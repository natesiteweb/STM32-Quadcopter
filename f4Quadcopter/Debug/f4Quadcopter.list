
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000960c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009878  08009878  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009880  08009880  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ab4  200001e4  08009a6c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c98  08009a6c  00021c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfe1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c8f  00000000  00000000  0003d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a8  00000000  00000000  00040e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  00042330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024150  00000000  00000000  00043610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015218  00000000  00000000  00067760  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8aad  00000000  00000000  0007c978  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145425  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f8  00000000  00000000  001454a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009784 	.word	0x08009784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009784 	.word	0x08009784

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <MX_GPIO_Init+0xe0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a30      	ldr	r2, [pc, #192]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a29      	ldr	r2, [pc, #164]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a22      	ldr	r2, [pc, #136]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2106      	movs	r1, #6
 800060a:	4816      	ldr	r0, [pc, #88]	; (8000664 <MX_GPIO_Init+0xe4>)
 800060c:	f001 f992 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000616:	4814      	ldr	r0, [pc, #80]	; (8000668 <MX_GPIO_Init+0xe8>)
 8000618:	f001 f98c 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800061c:	2306      	movs	r3, #6
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	480c      	ldr	r0, [pc, #48]	; (8000664 <MX_GPIO_Init+0xe4>)
 8000634:	f000 ffe4 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000638:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_GPIO_Init+0xe8>)
 8000652:	f000 ffd5 	bl	8001600 <HAL_GPIO_Init>

}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	; 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40020800 	.word	0x40020800
 8000668:	40020400 	.word	0x40020400

0800066c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f001 f95d 	bl	8001968 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f950 	bl	8000958 <Error_Handler>
  }

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000210 	.word	0x20000210
 80006c0:	40005400 	.word	0x40005400
 80006c4:	00061a80 	.word	0x00061a80

080006c8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C2_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C2_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C2_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C2_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C2_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C2_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C2_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C2_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C2_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C2_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C2_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C2_Init+0x50>)
 8000706:	f001 f92f 	bl	8001968 <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f922 	bl	8000958 <Error_Handler>
  }

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000264 	.word	0x20000264
 800071c:	40005800 	.word	0x40005800
 8000720:	00061a80 	.word	0x00061a80

08000724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a32      	ldr	r2, [pc, #200]	; (800080c <HAL_I2C_MspInit+0xe8>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d12c      	bne.n	80007a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <HAL_I2C_MspInit+0xec>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a30      	ldr	r2, [pc, #192]	; (8000810 <HAL_I2C_MspInit+0xec>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <HAL_I2C_MspInit+0xec>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000762:	23c0      	movs	r3, #192	; 0xc0
 8000764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000766:	2312      	movs	r3, #18
 8000768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800076a:	2301      	movs	r3, #1
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000772:	2304      	movs	r3, #4
 8000774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4825      	ldr	r0, [pc, #148]	; (8000814 <HAL_I2C_MspInit+0xf0>)
 800077e:	f000 ff3f 	bl	8001600 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <HAL_I2C_MspInit+0xec>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a21      	ldr	r2, [pc, #132]	; (8000810 <HAL_I2C_MspInit+0xec>)
 800078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_I2C_MspInit+0xec>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800079e:	e031      	b.n	8000804 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <HAL_I2C_MspInit+0xf4>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d12c      	bne.n	8000804 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_I2C_MspInit+0xec>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a17      	ldr	r2, [pc, #92]	; (8000810 <HAL_I2C_MspInit+0xec>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <HAL_I2C_MspInit+0xec>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007cc:	2312      	movs	r3, #18
 80007ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007d8:	2304      	movs	r3, #4
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <HAL_I2C_MspInit+0xf0>)
 80007e4:	f000 ff0c 	bl	8001600 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_I2C_MspInit+0xec>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_I2C_MspInit+0xec>)
 80007f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_I2C_MspInit+0xec>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	bf00      	nop
 8000806:	3730      	adds	r7, #48	; 0x30
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40005400 	.word	0x40005400
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400
 8000818:	40005800 	.word	0x40005800

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fd48 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f816 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f7ff feaa 	bl	8000580 <MX_GPIO_Init>
  MX_I2C1_Init();
 800082c:	f7ff ff1e 	bl	800066c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000830:	f7ff ff4a 	bl	80006c8 <MX_I2C2_Init>
  MX_RTC_Init();
 8000834:	f000 f982 	bl	8000b3c <MX_RTC_Init>
  MX_TIM3_Init();
 8000838:	f000 fa68 	bl	8000d0c <MX_TIM3_Init>
  MX_TIM5_Init();
 800083c:	f000 fae0 	bl	8000e00 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000840:	f000 fb3c 	bl	8000ebc <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000844:	f007 fdfe 	bl	8008444 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  main_setup();
 8000848:	f000 f88e 	bl	8000968 <main_setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_loop();
 800084c:	f000 f910 	bl	8000a70 <main_loop>
 8000850:	e7fc      	b.n	800084c <main+0x30>
	...

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b098      	sub	sp, #96	; 0x60
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800085e:	2230      	movs	r2, #48	; 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f008 fb42 	bl	8008eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <SystemClock_Config+0xfc>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a30      	ldr	r2, [pc, #192]	; (8000950 <SystemClock_Config+0xfc>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <SystemClock_Config+0xfc>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <SystemClock_Config+0x100>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a2a      	ldr	r2, [pc, #168]	; (8000954 <SystemClock_Config+0x100>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6013      	str	r3, [r2, #0]
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <SystemClock_Config+0x100>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008be:	2309      	movs	r3, #9
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d6:	2310      	movs	r3, #16
 80008d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008e4:	2307      	movs	r3, #7
 80008e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 f95f 	bl	8003bb0 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80008f8:	f000 f82e 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000908:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2105      	movs	r1, #5
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fbb8 	bl	8004090 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000926:	f000 f817 	bl	8000958 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800092a:	2302      	movs	r3, #2
 800092c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fd85 	bl	8004448 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000944:	f000 f808 	bl	8000958 <Error_Handler>
  }
}
 8000948:	bf00      	nop
 800094a:	3760      	adds	r7, #96	; 0x60
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <main_setup>:
uint8_t buf[20];
int16_t val;
float gyro_x;

void main_setup()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af02      	add	r7, sp, #8
	HAL_Delay(10000);
 800096e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000972:	f000 fd11 	bl	8001398 <HAL_Delay>

	buf[0] = 0x6B;
 8000976:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <main_setup+0xf8>)
 8000978:	226b      	movs	r2, #107	; 0x6b
 800097a:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00;
 800097c:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <main_setup+0xf8>)
 800097e:	2200      	movs	r2, #0
 8000980:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 8000982:	23d0      	movs	r3, #208	; 0xd0
 8000984:	b299      	uxth	r1, r3
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2302      	movs	r3, #2
 800098e:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <main_setup+0xf8>)
 8000990:	4834      	ldr	r0, [pc, #208]	; (8000a64 <main_setup+0xfc>)
 8000992:	f001 f921 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <main_setup+0x100>)
 800099c:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <main_setup+0x100>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d008      	beq.n	80009b8 <main_setup+0x50>
	{
		strcpy((char*)buf, "Error Tx\r\n");
 80009a6:	4a2e      	ldr	r2, [pc, #184]	; (8000a60 <main_setup+0xf8>)
 80009a8:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <main_setup+0x104>)
 80009aa:	cb03      	ldmia	r3!, {r0, r1}
 80009ac:	6010      	str	r0, [r2, #0]
 80009ae:	6051      	str	r1, [r2, #4]
 80009b0:	8819      	ldrh	r1, [r3, #0]
 80009b2:	789b      	ldrb	r3, [r3, #2]
 80009b4:	8111      	strh	r1, [r2, #8]
 80009b6:	7293      	strb	r3, [r2, #10]
	}

	HAL_Delay(10);
 80009b8:	200a      	movs	r0, #10
 80009ba:	f000 fced 	bl	8001398 <HAL_Delay>

	buf[0] = 0x1B;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <main_setup+0xf8>)
 80009c0:	221b      	movs	r2, #27
 80009c2:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x08;
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <main_setup+0xf8>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 80009ca:	23d0      	movs	r3, #208	; 0xd0
 80009cc:	b299      	uxth	r1, r3
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2302      	movs	r3, #2
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <main_setup+0xf8>)
 80009d8:	4822      	ldr	r0, [pc, #136]	; (8000a64 <main_setup+0xfc>)
 80009da:	f001 f8fd 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <main_setup+0x100>)
 80009e4:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <main_setup+0x100>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <main_setup+0x98>
	{
		strcpy((char*)buf, "Error Tx\r\n");
 80009ee:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <main_setup+0xf8>)
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <main_setup+0x104>)
 80009f2:	cb03      	ldmia	r3!, {r0, r1}
 80009f4:	6010      	str	r0, [r2, #0]
 80009f6:	6051      	str	r1, [r2, #4]
 80009f8:	8819      	ldrh	r1, [r3, #0]
 80009fa:	789b      	ldrb	r3, [r3, #2]
 80009fc:	8111      	strh	r1, [r2, #8]
 80009fe:	7293      	strb	r3, [r2, #10]
	}

	HAL_Delay(10);
 8000a00:	200a      	movs	r0, #10
 8000a02:	f000 fcc9 	bl	8001398 <HAL_Delay>

	buf[0] = 0x1A;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <main_setup+0xf8>)
 8000a08:	221a      	movs	r2, #26
 8000a0a:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x03;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <main_setup+0xf8>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 8000a12:	23d0      	movs	r3, #208	; 0xd0
 8000a14:	b299      	uxth	r1, r3
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <main_setup+0xf8>)
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <main_setup+0xfc>)
 8000a22:	f001 f8d9 	bl	8001bd8 <HAL_I2C_Master_Transmit>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <main_setup+0x100>)
 8000a2c:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <main_setup+0x100>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d008      	beq.n	8000a48 <main_setup+0xe0>
	{
		strcpy((char*)buf, "Error Tx\r\n");
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <main_setup+0xf8>)
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <main_setup+0x104>)
 8000a3a:	cb03      	ldmia	r3!, {r0, r1}
 8000a3c:	6010      	str	r0, [r2, #0]
 8000a3e:	6051      	str	r1, [r2, #4]
 8000a40:	8819      	ldrh	r1, [r3, #0]
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	8111      	strh	r1, [r2, #8]
 8000a46:	7293      	strb	r3, [r2, #10]
	}

	CDC_Transmit_FS(buf, strlen((char*)buf));
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <main_setup+0xf8>)
 8000a4a:	f7ff fbc1 	bl	80001d0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4619      	mov	r1, r3
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <main_setup+0xf8>)
 8000a56:	f007 fdb3 	bl	80085c0 <CDC_Transmit_FS>
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200002c0 	.word	0x200002c0
 8000a64:	20000210 	.word	0x20000210
 8000a68:	200002d4 	.word	0x200002d4
 8000a6c:	0800979c 	.word	0x0800979c

08000a70 <main_loop>:

void main_loop()
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af04      	add	r7, sp, #16
	HAL_Delay(50);
 8000a76:	2032      	movs	r0, #50	; 0x32
 8000a78:	f000 fc8e 	bl	8001398 <HAL_Delay>

	ret = HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x43, 1, buf, 2, HAL_MAX_DELAY);
 8000a7c:	23d0      	movs	r3, #208	; 0xd0
 8000a7e:	b299      	uxth	r1, r3
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2302      	movs	r3, #2
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <main_loop+0xac>)
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	2243      	movs	r2, #67	; 0x43
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <main_loop+0xb0>)
 8000a94:	f001 f99e 	bl	8001dd4 <HAL_I2C_Mem_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <main_loop+0xb4>)
 8000a9e:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <main_loop+0xb4>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d009      	beq.n	8000abc <main_loop+0x4c>
	{
		strcpy((char*)buf, "Error Rx\r\n");
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <main_loop+0xac>)
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <main_loop+0xb8>)
 8000aac:	cb03      	ldmia	r3!, {r0, r1}
 8000aae:	6010      	str	r0, [r2, #0]
 8000ab0:	6051      	str	r1, [r2, #4]
 8000ab2:	8819      	ldrh	r1, [r3, #0]
 8000ab4:	789b      	ldrb	r3, [r3, #2]
 8000ab6:	8111      	strh	r1, [r2, #8]
 8000ab8:	7293      	strb	r3, [r2, #10]
 8000aba:	e022      	b.n	8000b02 <main_loop+0x92>
	}
	else
	{
		val = (int16_t)((buf[0] << 8) | (buf[1]));
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <main_loop+0xac>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <main_loop+0xac>)
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b21a      	sxth	r2, r3
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <main_loop+0xbc>)
 8000ad0:	801a      	strh	r2, [r3, #0]
		/*if(val > 0x7FF)
		{
			val |= 0xF000;
		}*/
		gyro_x = val;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <main_loop+0xbc>)
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	ee07 3a90 	vmov	s15, r3
 8000adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <main_loop+0xc0>)
 8000ae2:	edc3 7a00 	vstr	s15, [r3]
		//gyro_x *= 100;
		//sprintf((char*)buf, "%u\r\n", (int16_t)val);
		//strcpy((char*)buf, itoa((int16_t)val, buf, 10));
		itoa(val, buf, 10);
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <main_loop+0xbc>)
 8000ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aec:	220a      	movs	r2, #10
 8000aee:	490b      	ldr	r1, [pc, #44]	; (8000b1c <main_loop+0xac>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f008 f9e9 	bl	8008ec8 <itoa>
		sprintf((char*)buf, "%s%s", buf, "\r\n");
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <main_loop+0xc4>)
 8000af8:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <main_loop+0xac>)
 8000afa:	490f      	ldr	r1, [pc, #60]	; (8000b38 <main_loop+0xc8>)
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <main_loop+0xac>)
 8000afe:	f008 fab5 	bl	800906c <siprintf>
	}

	CDC_Transmit_FS(buf, strlen((char*)buf));
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <main_loop+0xac>)
 8000b04:	f7ff fb64 	bl	80001d0 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <main_loop+0xac>)
 8000b10:	f007 fd56 	bl	80085c0 <CDC_Transmit_FS>
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200002c0 	.word	0x200002c0
 8000b20:	20000210 	.word	0x20000210
 8000b24:	200002d4 	.word	0x200002d4
 8000b28:	080097a8 	.word	0x080097a8
 8000b2c:	200002b8 	.word	0x200002b8
 8000b30:	200002bc 	.word	0x200002bc
 8000b34:	080097b4 	.word	0x080097b4
 8000b38:	080097b8 	.word	0x080097b8

08000b3c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <MX_RTC_Init+0x48>)
 8000b44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b4e:	227f      	movs	r2, #127	; 0x7f
 8000b50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b54:	22ff      	movs	r2, #255	; 0xff
 8000b56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_RTC_Init+0x44>)
 8000b6c:	f003 fd4e 	bl	800460c <HAL_RTC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b76:	f7ff feef 	bl	8000958 <Error_Handler>
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200002d8 	.word	0x200002d8
 8000b84:	40002800 	.word	0x40002800

08000b88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <HAL_RTC_MspInit+0x24>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d102      	bne.n	8000ba0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_RTC_MspInit+0x28>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40002800 	.word	0x40002800
 8000bb0:	42470e3c 	.word	0x42470e3c

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_MspInit+0x4c>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 fb7e 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <OTG_FS_IRQHandler+0x10>)
 8000c66:	f001 ff70 	bl	8002b4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000188c 	.word	0x2000188c

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f008 f8ce 	bl	8008e44 <__errno>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	230c      	movs	r3, #12
 8000cac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	20000200 	.word	0x20000200
 8000cdc:	20001c98 	.word	0x20001c98

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SystemInit+0x28>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <SystemInit+0x28>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SystemInit+0x28>)
 8000cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	f107 0320 	add.w	r3, r7, #32
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d30:	4a32      	ldr	r2, [pc, #200]	; (8000dfc <MX_TIM3_Init+0xf0>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d40:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4e:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000d54:	4828      	ldr	r0, [pc, #160]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d56:	f003 fd69 	bl	800482c <HAL_TIM_OC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d60:	f7ff fdfa 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4619      	mov	r1, r3
 8000d72:	4821      	ldr	r0, [pc, #132]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d74:	f004 fb78 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d7e:	f7ff fdeb 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000d9a:	f003 fd9d 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000da4:	f7ff fdd8 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2204      	movs	r2, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000db0:	f003 fd92 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dba:	f7ff fdcd 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2208      	movs	r2, #8
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000dc6:	f003 fd87 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000dd0:	f7ff fdc2 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000ddc:	f003 fd7c 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000de6:	f7ff fdb7 	bl	8000958 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <MX_TIM3_Init+0xec>)
 8000dec:	f000 f9b6 	bl	800115c <HAL_TIM_MspPostInit>

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000378 	.word	0x20000378
 8000dfc:	40000400 	.word	0x40000400

08000e00 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <MX_TIM5_Init+0xb8>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000e42:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e44:	f003 fd1d 	bl	8004882 <HAL_TIM_IC_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f7ff fd83 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e62:	f004 fb01 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f7ff fd74 	bl	8000958 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e74:	2301      	movs	r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e88:	f003 fd86 	bl	8004998 <HAL_TIM_IC_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8000e92:	f7ff fd61 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	2204      	movs	r2, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_TIM5_Init+0xb4>)
 8000e9e:	f003 fd7b 	bl	8004998 <HAL_TIM_IC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8000ea8:	f7ff fd56 	bl	8000958 <Error_Handler>
  }

}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000338 	.word	0x20000338
 8000eb8:	40000c00 	.word	0x40000c00

08000ebc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b096      	sub	sp, #88	; 0x58
 8000ec0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 fff9 	bl	8008eec <memset>

  htim8.Instance = TIM8;
 8000efa:	4b50      	ldr	r3, [pc, #320]	; (800103c <MX_TIM8_Init+0x180>)
 8000efc:	4a50      	ldr	r2, [pc, #320]	; (8001040 <MX_TIM8_Init+0x184>)
 8000efe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f00:	4b4e      	ldr	r3, [pc, #312]	; (800103c <MX_TIM8_Init+0x180>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b4d      	ldr	r3, [pc, #308]	; (800103c <MX_TIM8_Init+0x180>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f0c:	4b4b      	ldr	r3, [pc, #300]	; (800103c <MX_TIM8_Init+0x180>)
 8000f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b49      	ldr	r3, [pc, #292]	; (800103c <MX_TIM8_Init+0x180>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f1a:	4b48      	ldr	r3, [pc, #288]	; (800103c <MX_TIM8_Init+0x180>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b46      	ldr	r3, [pc, #280]	; (800103c <MX_TIM8_Init+0x180>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f26:	4845      	ldr	r0, [pc, #276]	; (800103c <MX_TIM8_Init+0x180>)
 8000f28:	f003 fc55 	bl	80047d6 <HAL_TIM_Base_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000f32:	f7ff fd11 	bl	8000958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f40:	4619      	mov	r1, r3
 8000f42:	483e      	ldr	r0, [pc, #248]	; (800103c <MX_TIM8_Init+0x180>)
 8000f44:	f003 fdc4 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000f4e:	f7ff fd03 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000f52:	483a      	ldr	r0, [pc, #232]	; (800103c <MX_TIM8_Init+0x180>)
 8000f54:	f003 fc6a 	bl	800482c <HAL_TIM_OC_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000f5e:	f7ff fcfb 	bl	8000958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4832      	ldr	r0, [pc, #200]	; (800103c <MX_TIM8_Init+0x180>)
 8000f72:	f004 fa79 	bl	8005468 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f7c:	f7ff fcec 	bl	8000958 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4825      	ldr	r0, [pc, #148]	; (800103c <MX_TIM8_Init+0x180>)
 8000fa6:	f003 fc97 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000fb0:	f7ff fcd2 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481f      	ldr	r0, [pc, #124]	; (800103c <MX_TIM8_Init+0x180>)
 8000fbe:	f003 fc8b 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000fc8:	f7ff fcc6 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	2208      	movs	r2, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4819      	ldr	r0, [pc, #100]	; (800103c <MX_TIM8_Init+0x180>)
 8000fd6:	f003 fc7f 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000fe0:	f7ff fcba 	bl	8000958 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	220c      	movs	r2, #12
 8000fea:	4619      	mov	r1, r3
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_TIM8_Init+0x180>)
 8000fee:	f003 fc73 	bl	80048d8 <HAL_TIM_OC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000ff8:	f7ff fcae 	bl	8000958 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_TIM8_Init+0x180>)
 8001020:	f004 fa9e 	bl	8005560 <HAL_TIMEx_ConfigBreakDeadTime>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800102a:	f7ff fc95 	bl	8000958 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <MX_TIM8_Init+0x180>)
 8001030:	f000 f894 	bl	800115c <HAL_TIM_MspPostInit>

}
 8001034:	bf00      	nop
 8001036:	3758      	adds	r7, #88	; 0x58
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200002f8 	.word	0x200002f8
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <HAL_TIM_OC_MspInit+0x3c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d10d      	bne.n	8001072 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_OC_MspInit+0x40>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_TIM_OC_MspInit+0x40>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <HAL_TIM_OC_MspInit+0x40>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40000400 	.word	0x40000400
 8001084:	40023800 	.word	0x40023800

08001088 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a19      	ldr	r2, [pc, #100]	; (800110c <HAL_TIM_IC_MspInit+0x84>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d12b      	bne.n	8001102 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_TIM_IC_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_TIM_IC_MspInit+0x88>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_TIM_IC_MspInit+0x88>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_TIM_IC_MspInit+0x88>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_TIM_IC_MspInit+0x88>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_TIM_IC_MspInit+0x88>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010e2:	2303      	movs	r3, #3
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010f2:	2302      	movs	r3, #2
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_TIM_IC_MspInit+0x8c>)
 80010fe:	f000 fa7f 	bl	8001600 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40000c00 	.word	0x40000c00
 8001110:	40023800 	.word	0x40023800
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_TIM_Base_MspInit+0x3c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10d      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_TIM_Base_MspInit+0x40>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <HAL_TIM_Base_MspInit+0x40>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_TIM_Base_MspInit+0x40>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40010400 	.word	0x40010400
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a33      	ldr	r2, [pc, #204]	; (8001248 <HAL_TIM_MspPostInit+0xec>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d13c      	bne.n	80011f8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b32      	ldr	r3, [pc, #200]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a31      	ldr	r2, [pc, #196]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b2f      	ldr	r3, [pc, #188]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a2a      	ldr	r2, [pc, #168]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b6:	23c0      	movs	r3, #192	; 0xc0
 80011b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011c6:	2302      	movs	r3, #2
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <HAL_TIM_MspPostInit+0xf4>)
 80011d2:	f000 fa15 	bl	8001600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011d6:	2303      	movs	r3, #3
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011e6:	2302      	movs	r3, #2
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4818      	ldr	r0, [pc, #96]	; (8001254 <HAL_TIM_MspPostInit+0xf8>)
 80011f2:	f000 fa05 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80011f6:	e023      	b.n	8001240 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <HAL_TIM_MspPostInit+0xfc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d11e      	bne.n	8001240 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a10      	ldr	r2, [pc, #64]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <HAL_TIM_MspPostInit+0xf0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800121e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001230:	2303      	movs	r3, #3
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4808      	ldr	r0, [pc, #32]	; (800125c <HAL_TIM_MspPostInit+0x100>)
 800123c:	f000 f9e0 	bl	8001600 <HAL_GPIO_Init>
}
 8001240:	bf00      	nop
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40000400 	.word	0x40000400
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40010400 	.word	0x40010400
 800125c:	40020800 	.word	0x40020800

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001264:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001266:	e003      	b.n	8001270 <LoopCopyDataInit>

08001268 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800126a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800126c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800126e:	3104      	adds	r1, #4

08001270 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001274:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001276:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001278:	d3f6      	bcc.n	8001268 <CopyDataInit>
  ldr  r2, =_sbss
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800127c:	e002      	b.n	8001284 <LoopFillZerobss>

0800127e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800127e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001280:	f842 3b04 	str.w	r3, [r2], #4

08001284 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001286:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001288:	d3f9      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800128a:	f7ff fd29 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f007 fddf 	bl	8008e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fac3 	bl	800081c <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001298:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800129c:	08009888 	.word	0x08009888
  ldr  r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012a4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80012a8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80012ac:	20001c98 	.word	0x20001c98

080012b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f94d 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fc64 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f965 	bl	80015e6 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f000 f92d 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	20000008 	.word	0x20000008
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	200003b8 	.word	0x200003b8

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200003b8 	.word	0x200003b8

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_Delay+0x40>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff29 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff3e 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff8e 	bl	80014d0 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff31 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e16b      	b.n	80018f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 815a 	bne.w	80018ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00b      	beq.n	800165a <HAL_GPIO_Init+0x5a>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164e:	2b11      	cmp	r3, #17
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b12      	cmp	r3, #18
 8001658:	d130      	bne.n	80016bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 0201 	and.w	r2, r3, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0xfc>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80b4 	beq.w	80018ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <HAL_GPIO_Init+0x308>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <HAL_GPIO_Init+0x308>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_GPIO_Init+0x308>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a5a      	ldr	r2, [pc, #360]	; (800190c <HAL_GPIO_Init+0x30c>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a51      	ldr	r2, [pc, #324]	; (8001910 <HAL_GPIO_Init+0x310>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02b      	beq.n	8001826 <HAL_GPIO_Init+0x226>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a50      	ldr	r2, [pc, #320]	; (8001914 <HAL_GPIO_Init+0x314>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x222>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <HAL_GPIO_Init+0x318>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x21e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4e      	ldr	r2, [pc, #312]	; (800191c <HAL_GPIO_Init+0x31c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x21a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <HAL_GPIO_Init+0x320>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x216>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_GPIO_Init+0x324>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x212>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4b      	ldr	r2, [pc, #300]	; (8001928 <HAL_GPIO_Init+0x328>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4a      	ldr	r2, [pc, #296]	; (800192c <HAL_GPIO_Init+0x32c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x20a>
 8001806:	2307      	movs	r3, #7
 8001808:	e00e      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180a:	2308      	movs	r3, #8
 800180c:	e00c      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180e:	2306      	movs	r3, #6
 8001810:	e00a      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001812:	2305      	movs	r3, #5
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001816:	2304      	movs	r3, #4
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_GPIO_Init+0x30c>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001846:	4b3a      	ldr	r3, [pc, #232]	; (8001930 <HAL_GPIO_Init+0x330>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186a:	4a31      	ldr	r2, [pc, #196]	; (8001930 <HAL_GPIO_Init+0x330>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x330>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001894:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_GPIO_Init+0x330>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_GPIO_Init+0x330>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_GPIO_Init+0x330>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_GPIO_Init+0x330>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_GPIO_Init+0x330>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f ae90 	bls.w	800161c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	3724      	adds	r7, #36	; 0x24
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40021400 	.word	0x40021400
 8001928:	40021800 	.word	0x40021800
 800192c:	40021c00 	.word	0x40021c00
 8001930:	40013c00 	.word	0x40013c00

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e11f      	b.n	8001bba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fec8 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	; 0x24
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019cc:	f002 fd28 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a7b      	ldr	r2, [pc, #492]	; (8001bc4 <HAL_I2C_Init+0x25c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d807      	bhi.n	80019ec <HAL_I2C_Init+0x84>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a7a      	ldr	r2, [pc, #488]	; (8001bc8 <HAL_I2C_Init+0x260>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e006      	b.n	80019fa <HAL_I2C_Init+0x92>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a77      	ldr	r2, [pc, #476]	; (8001bcc <HAL_I2C_Init+0x264>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0db      	b.n	8001bba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4a72      	ldr	r2, [pc, #456]	; (8001bd0 <HAL_I2C_Init+0x268>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4a64      	ldr	r2, [pc, #400]	; (8001bc4 <HAL_I2C_Init+0x25c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d802      	bhi.n	8001a3c <HAL_I2C_Init+0xd4>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	e009      	b.n	8001a50 <HAL_I2C_Init+0xe8>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	4a63      	ldr	r2, [pc, #396]	; (8001bd4 <HAL_I2C_Init+0x26c>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	3301      	adds	r3, #1
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4956      	ldr	r1, [pc, #344]	; (8001bc4 <HAL_I2C_Init+0x25c>)
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	d80d      	bhi.n	8001a8c <HAL_I2C_Init+0x124>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e59      	subs	r1, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	bf38      	it	cc
 8001a88:	2304      	movcc	r3, #4
 8001a8a:	e04f      	b.n	8001b2c <HAL_I2C_Init+0x1c4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d111      	bne.n	8001ab8 <HAL_I2C_Init+0x150>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1e58      	subs	r0, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	440b      	add	r3, r1
 8001aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	e012      	b.n	8001ade <HAL_I2C_Init+0x176>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1e58      	subs	r0, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	0099      	lsls	r1, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf0c      	ite	eq
 8001ad8:	2301      	moveq	r3, #1
 8001ada:	2300      	movne	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Init+0x17e>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e022      	b.n	8001b2c <HAL_I2C_Init+0x1c4>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10e      	bne.n	8001b0c <HAL_I2C_Init+0x1a4>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1e58      	subs	r0, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	440b      	add	r3, r1
 8001afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0a:	e00f      	b.n	8001b2c <HAL_I2C_Init+0x1c4>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1e58      	subs	r0, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	0099      	lsls	r1, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	6809      	ldr	r1, [r1, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69da      	ldr	r2, [r3, #28]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6911      	ldr	r1, [r2, #16]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68d2      	ldr	r2, [r2, #12]
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	000186a0 	.word	0x000186a0
 8001bc8:	001e847f 	.word	0x001e847f
 8001bcc:	003d08ff 	.word	0x003d08ff
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	10624dd3 	.word	0x10624dd3

08001bd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	461a      	mov	r2, r3
 8001be4:	460b      	mov	r3, r1
 8001be6:	817b      	strh	r3, [r7, #10]
 8001be8:	4613      	mov	r3, r2
 8001bea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff fbc8 	bl	8001380 <HAL_GetTick>
 8001bf0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	f040 80e0 	bne.w	8001dc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2319      	movs	r3, #25
 8001c06:	2201      	movs	r2, #1
 8001c08:	4970      	ldr	r1, [pc, #448]	; (8001dcc <HAL_I2C_Master_Transmit+0x1f4>)
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fc70 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c16:	2302      	movs	r3, #2
 8001c18:	e0d3      	b.n	8001dc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_I2C_Master_Transmit+0x50>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0cc      	b.n	8001dc2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d007      	beq.n	8001c4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2221      	movs	r2, #33	; 0x21
 8001c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2210      	movs	r2, #16
 8001c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	893a      	ldrh	r2, [r7, #8]
 8001c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	6a3a      	ldr	r2, [r7, #32]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fac2 	bl	8002220 <I2C_MasterRequestWrite>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e08d      	b.n	8001dc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cbc:	e066      	b.n	8001d8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	6a39      	ldr	r1, [r7, #32]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fcea 	bl	800269c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00d      	beq.n	8001cea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d107      	bne.n	8001ce6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06b      	b.n	8001dc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d11b      	bne.n	8001d60 <HAL_I2C_Master_Transmit+0x188>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d017      	beq.n	8001d60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	6a39      	ldr	r1, [r7, #32]
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f000 fcda 	bl	800271e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d107      	bne.n	8001d88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e01a      	b.n	8001dc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d194      	bne.n	8001cbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e000      	b.n	8001dc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	00100002 	.word	0x00100002
 8001dd0:	ffff0000 	.word	0xffff0000

08001dd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	; 0x30
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	4608      	mov	r0, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	461a      	mov	r2, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	817b      	strh	r3, [r7, #10]
 8001de6:	460b      	mov	r3, r1
 8001de8:	813b      	strh	r3, [r7, #8]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dee:	f7ff fac7 	bl	8001380 <HAL_GetTick>
 8001df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	f040 8208 	bne.w	8002212 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2319      	movs	r3, #25
 8001e08:	2201      	movs	r2, #1
 8001e0a:	497b      	ldr	r1, [pc, #492]	; (8001ff8 <HAL_I2C_Mem_Read+0x224>)
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fb6f 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e1fb      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Mem_Read+0x56>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e1f4      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d007      	beq.n	8001e50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f042 0201 	orr.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2222      	movs	r2, #34	; 0x22
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a5b      	ldr	r2, [pc, #364]	; (8001ffc <HAL_I2C_Mem_Read+0x228>)
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e92:	88f8      	ldrh	r0, [r7, #6]
 8001e94:	893a      	ldrh	r2, [r7, #8]
 8001e96:	8979      	ldrh	r1, [r7, #10]
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fa3e 	bl	8002324 <I2C_RequestMemoryRead>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1b0      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d113      	bne.n	8001ee2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	623b      	str	r3, [r7, #32]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e184      	b.n	80021ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d11b      	bne.n	8001f22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e164      	b.n	80021ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d11b      	bne.n	8001f62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	61bb      	str	r3, [r7, #24]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	e144      	b.n	80021ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f78:	e138      	b.n	80021ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	f200 80f1 	bhi.w	8002166 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d123      	bne.n	8001fd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fc05 	bl	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e139      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fd2:	e10b      	b.n	80021ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d14e      	bne.n	800207a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4906      	ldr	r1, [pc, #24]	; (8002000 <HAL_I2C_Mem_Read+0x22c>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fa82 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e10e      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
 8001ff6:	bf00      	nop
 8001ff8:	00100002 	.word	0x00100002
 8001ffc:	ffff0000 	.word	0xffff0000
 8002000:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002078:	e0b8      	b.n	80021ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002080:	2200      	movs	r2, #0
 8002082:	4966      	ldr	r1, [pc, #408]	; (800221c <HAL_I2C_Mem_Read+0x448>)
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 fa33 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0bf      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	2200      	movs	r2, #0
 80020de:	494f      	ldr	r1, [pc, #316]	; (800221c <HAL_I2C_Mem_Read+0x448>)
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fa05 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e091      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	b29a      	uxth	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002164:	e042      	b.n	80021ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fb18 	bl	80027a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e04c      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d118      	bne.n	80021ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f aec2 	bne.w	8001f7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002212:	2302      	movs	r3, #2
  }
}
 8002214:	4618      	mov	r0, r3
 8002216:	3728      	adds	r7, #40	; 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	00010004 	.word	0x00010004

08002220 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	460b      	mov	r3, r1
 800222e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d006      	beq.n	800224a <I2C_MasterRequestWrite+0x2a>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d003      	beq.n	800224a <I2C_MasterRequestWrite+0x2a>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002248:	d108      	bne.n	800225c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e00b      	b.n	8002274 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	2b12      	cmp	r3, #18
 8002262:	d107      	bne.n	8002274 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f935 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e035      	b.n	8002312 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ae:	d108      	bne.n	80022c2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b0:	897b      	ldrh	r3, [r7, #10]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022be:	611a      	str	r2, [r3, #16]
 80022c0:	e01b      	b.n	80022fa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022c2:	897b      	ldrh	r3, [r7, #10]
 80022c4:	11db      	asrs	r3, r3, #7
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f003 0306 	and.w	r3, r3, #6
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f063 030f 	orn	r3, r3, #15
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	490f      	ldr	r1, [pc, #60]	; (800231c <I2C_MasterRequestWrite+0xfc>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f95c 	bl	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e010      	b.n	8002312 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022f0:	897b      	ldrh	r3, [r7, #10]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4908      	ldr	r1, [pc, #32]	; (8002320 <I2C_MasterRequestWrite+0x100>)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f94c 	bl	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	00010008 	.word	0x00010008
 8002320:	00010002 	.word	0x00010002

08002324 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4603      	mov	r3, r0
 8002334:	817b      	strh	r3, [r7, #10]
 8002336:	460b      	mov	r3, r1
 8002338:	813b      	strh	r3, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800234c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	2200      	movs	r2, #0
 8002366:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f8c0 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00c      	beq.n	8002390 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0a9      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800239e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	6a3a      	ldr	r2, [r7, #32]
 80023a4:	4951      	ldr	r1, [pc, #324]	; (80024ec <I2C_RequestMemoryRead+0x1c8>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f8f9 	bl	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e096      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	6a39      	ldr	r1, [r7, #32]
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f963 	bl	800269c <I2C_WaitOnTXEFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d107      	bne.n	80023f4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e075      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023fe:	893b      	ldrh	r3, [r7, #8]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]
 8002408:	e021      	b.n	800244e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800240a:	893b      	ldrh	r3, [r7, #8]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	6a39      	ldr	r1, [r7, #32]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f93d 	bl	800269c <I2C_WaitOnTXEFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b04      	cmp	r3, #4
 800242e:	d107      	bne.n	8002440 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e04f      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002444:	893b      	ldrh	r3, [r7, #8]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	6a39      	ldr	r1, [r7, #32]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f922 	bl	800269c <I2C_WaitOnTXEFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2b04      	cmp	r3, #4
 8002464:	d107      	bne.n	8002476 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002474:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e034      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002488:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	2200      	movs	r2, #0
 8002492:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f82a 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00c      	beq.n	80024bc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e013      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024bc:	897b      	ldrh	r3, [r7, #10]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	6a3a      	ldr	r2, [r7, #32]
 80024d0:	4906      	ldr	r1, [pc, #24]	; (80024ec <I2C_RequestMemoryRead+0x1c8>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f863 	bl	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	00010002 	.word	0x00010002

080024f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	e025      	b.n	800254e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d021      	beq.n	800254e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7fe ff39 	bl	8001380 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e023      	b.n	8002596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10d      	bne.n	8002574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	e00c      	b.n	800258e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4013      	ands	r3, r2
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	429a      	cmp	r2, r3
 8002592:	d0b6      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ac:	e051      	b.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d123      	bne.n	8002606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f043 0204 	orr.w	r2, r3, #4
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e046      	b.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d021      	beq.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260e:	f7fe feb7 	bl	8001380 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d116      	bne.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0220 	orr.w	r2, r3, #32
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e020      	b.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d10c      	bne.n	8002676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	e00b      	b.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	43da      	mvns	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4013      	ands	r3, r2
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d18d      	bne.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a8:	e02d      	b.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 f8ce 	bl	800284c <I2C_IsAcknowledgeFailed>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e02d      	b.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d021      	beq.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7fe fe5d 	bl	8001380 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e007      	b.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d1ca      	bne.n	80026aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800272a:	e02d      	b.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f88d 	bl	800284c <I2C_IsAcknowledgeFailed>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e02d      	b.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002742:	d021      	beq.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002744:	f7fe fe1c 	bl	8001380 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	429a      	cmp	r2, r3
 8002752:	d302      	bcc.n	800275a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b04      	cmp	r3, #4
 8002794:	d1ca      	bne.n	800272c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027ac:	e042      	b.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d119      	bne.n	80027f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0210 	mvn.w	r2, #16
 80027c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e029      	b.n	8002844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f0:	f7fe fdc6 	bl	8001380 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d302      	bcc.n	8002806 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f043 0220 	orr.w	r2, r3, #32
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e007      	b.n	8002844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d1b5      	bne.n	80027ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d11b      	bne.n	800289c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800286c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0204 	orr.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ac:	b08f      	sub	sp, #60	; 0x3c
 80028ae:	af0a      	add	r7, sp, #40	; 0x28
 80028b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e10f      	b.n	8002adc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f005 ffb8 	bl	800884c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2203      	movs	r2, #3
 80028e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 ff97 	bl	800582e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	687e      	ldr	r6, [r7, #4]
 8002908:	466d      	mov	r5, sp
 800290a:	f106 0410 	add.w	r4, r6, #16
 800290e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002916:	e894 0003 	ldmia.w	r4, {r0, r1}
 800291a:	e885 0003 	stmia.w	r5, {r0, r1}
 800291e:	1d33      	adds	r3, r6, #4
 8002920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002922:	6838      	ldr	r0, [r7, #0]
 8002924:	f002 fe6e 	bl	8005604 <USB_CoreInit>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2202      	movs	r2, #2
 8002932:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e0d0      	b.n	8002adc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f002 ff85 	bl	8005850 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e04a      	b.n	80029e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	333d      	adds	r3, #61	; 0x3d
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	333c      	adds	r3, #60	; 0x3c
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	b298      	uxth	r0, r3
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3342      	adds	r3, #66	; 0x42
 8002988:	4602      	mov	r2, r0
 800298a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	333f      	adds	r3, #63	; 0x3f
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3344      	adds	r3, #68	; 0x44
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3348      	adds	r3, #72	; 0x48
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3350      	adds	r3, #80	; 0x50
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d3af      	bcc.n	800294c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
 80029f0:	e044      	b.n	8002a7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d3b5      	bcc.n	80029f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	687e      	ldr	r6, [r7, #4]
 8002a8e:	466d      	mov	r5, sp
 8002a90:	f106 0410 	add.w	r4, r6, #16
 8002a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa4:	1d33      	adds	r3, r6, #4
 8002aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa8:	6838      	ldr	r0, [r7, #0]
 8002aaa:	f002 fefb 	bl	80058a4 <USB_DevInit>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e00d      	b.n	8002adc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 ff3a 	bl	800694e <USB_DevDisconnect>

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_PCD_Start+0x1c>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e020      	b.n	8002b42 <HAL_PCD_Start+0x5e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d109      	bne.n	8002b24 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d005      	beq.n	8002b24 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 fef8 	bl	800691e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fe6a 	bl	800580c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b4a:	b590      	push	{r4, r7, lr}
 8002b4c:	b08d      	sub	sp, #52	; 0x34
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 ff9f 	bl	8006aa4 <USB_GetMode>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f040 839d 	bne.w	80032a8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 ff03 	bl	800697e <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 8393 	beq.w	80032a6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 fefa 	bl	800697e <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d107      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f002 0202 	and.w	r2, r2, #2
 8002ba2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fee8 	bl	800697e <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d161      	bne.n	8002c7c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0210 	bic.w	r2, r2, #16
 8002bc6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	0c5b      	lsrs	r3, r3, #17
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d124      	bne.n	8002c3e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d035      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	6a38      	ldr	r0, [r7, #32]
 8002c14:	f003 fd60 	bl	80066d8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c24:	441a      	add	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c36:	441a      	add	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	619a      	str	r2, [r3, #24]
 8002c3c:	e016      	b.n	8002c6c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	0c5b      	lsrs	r3, r3, #17
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d110      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c50:	2208      	movs	r2, #8
 8002c52:	4619      	mov	r1, r3
 8002c54:	6a38      	ldr	r0, [r7, #32]
 8002c56:	f003 fd3f 	bl	80066d8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c66:	441a      	add	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0210 	orr.w	r2, r2, #16
 8002c7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fe7c 	bl	800697e <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c90:	d16e      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fe82 	bl	80069a4 <USB_ReadDevAllOutEpInterrupt>
 8002ca0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ca2:	e062      	b.n	8002d6a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d057      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fea7 	bl	8006a0c <USB_ReadDevOutEPInterrupt>
 8002cbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2301      	movs	r3, #1
 8002cda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fdb0 	bl	8003844 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 feaa 	bl	8003a5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2310      	movs	r3, #16
 8002d22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2320      	movs	r3, #32
 8002d3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	3301      	adds	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d199      	bne.n	8002ca4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fe02 	bl	800697e <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d84:	f040 80c0 	bne.w	8002f08 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f003 fe23 	bl	80069d8 <USB_ReadDevAllInEpInterrupt>
 8002d92:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d98:	e0b2      	b.n	8002f00 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80a7 	beq.w	8002ef4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fe49 	bl	8006a48 <USB_ReadDevInEPInterrupt>
 8002db6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d057      	beq.n	8002e72 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	2201      	movs	r2, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69f9      	ldr	r1, [r7, #28]
 8002dde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002de2:	4013      	ands	r3, r2
 8002de4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df2:	461a      	mov	r2, r3
 8002df4:	2301      	movs	r3, #1
 8002df6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d132      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3348      	adds	r3, #72	; 0x48
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4403      	add	r3, r0
 8002e20:	3344      	adds	r3, #68	; 0x44
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4419      	add	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4403      	add	r3, r0
 8002e34:	3348      	adds	r3, #72	; 0x48
 8002e36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d113      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x31c>
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3350      	adds	r3, #80	; 0x50
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2101      	movs	r1, #1
 8002e62:	f003 fe51 	bl	8006b08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f005 fd6e 	bl	800894e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002edc:	461a      	mov	r2, r3
 8002ede:	2302      	movs	r3, #2
 8002ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fc1b 	bl	800372a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f47f af49 	bne.w	8002d9a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fd36 	bl	800697e <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f1c:	d122      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d108      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f44:	2100      	movs	r1, #0
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fe26 	bl	8003b98 <HAL_PCDEx_LPM_Callback>
 8002f4c:	e002      	b.n	8002f54 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f005 fd74 	bl	8008a3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fd08 	bl	800697e <USB_ReadInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f78:	d112      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f005 fd30 	bl	80089f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002f9e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fcea 	bl	800697e <USB_ReadInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	f040 80c7 	bne.w	8003146 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2110      	movs	r1, #16
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fdca 	bl	8005b6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fdc:	e056      	b.n	800308c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fea:	461a      	mov	r2, r3
 8002fec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ff0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003002:	0151      	lsls	r1, r2, #5
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	440a      	add	r2, r1
 8003008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800300c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003010:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003022:	0151      	lsls	r1, r2, #5
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	440a      	add	r2, r1
 8003028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800302c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003030:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303e:	461a      	mov	r2, r3
 8003040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003044:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003056:	0151      	lsls	r1, r2, #5
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	440a      	add	r2, r1
 800305c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003064:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003076:	0151      	lsls	r1, r2, #5
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	440a      	add	r2, r1
 800307c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003084:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	3301      	adds	r3, #1
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003092:	429a      	cmp	r2, r3
 8003094:	d3a3      	bcc.n	8002fde <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c2:	f043 030b 	orr.w	r3, r3, #11
 80030c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d8:	f043 030b 	orr.w	r3, r3, #11
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	e015      	b.n	800310c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003106:	f043 030b 	orr.w	r3, r3, #11
 800310a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800311e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003130:	461a      	mov	r2, r3
 8003132:	f003 fce9 	bl	8006b08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 fc17 	bl	800697e <USB_ReadInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	d124      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f003 fcad 	bl	8006ac0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f002 fd5f 	bl	8005c2e <USB_GetDevSpeed>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681c      	ldr	r4, [r3, #0]
 800317c:	f001 f944 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8003180:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	4620      	mov	r0, r4
 800318c:	f002 fa9c 	bl	80056c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f005 fc04 	bl	800899e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fbe7 	bl	800697e <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d10a      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f005 fbe1 	bl	8008982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f002 0208 	and.w	r2, r2, #8
 80031ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fbd2 	bl	800697e <USB_ReadInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e4:	d10f      	bne.n	8003206 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f005 fc43 	bl	8008a7c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fbb7 	bl	800697e <USB_ReadInterrupts>
 8003210:	4603      	mov	r3, r0
 8003212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321a:	d10f      	bne.n	800323c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	b2db      	uxtb	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f005 fc16 	bl	8008a58 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800323a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fb9c 	bl	800697e <USB_ReadInterrupts>
 8003246:	4603      	mov	r3, r0
 8003248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003250:	d10a      	bne.n	8003268 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f005 fc24 	bl	8008aa0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 fb86 	bl	800697e <USB_ReadInterrupts>
 8003272:	4603      	mov	r3, r0
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b04      	cmp	r3, #4
 800327a:	d115      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f005 fc14 	bl	8008abc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	e000      	b.n	80032a8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80032a6:	bf00      	nop
    }
  }
}
 80032a8:	3734      	adds	r7, #52	; 0x34
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}

080032ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_PCD_SetAddress+0x1a>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e013      	b.n	80032f0 <HAL_PCD_SetAddress+0x42>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 faf6 	bl	80068d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	70fb      	strb	r3, [r7, #3]
 800330a:	460b      	mov	r3, r1
 800330c:	803b      	strh	r3, [r7, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da0f      	bge.n	800333e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3338      	adds	r3, #56	; 0x38
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	3304      	adds	r3, #4
 8003334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	705a      	strb	r2, [r3, #1]
 800333c:	e00f      	b.n	800335e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800336a:	883a      	ldrh	r2, [r7, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	78ba      	ldrb	r2, [r7, #2]
 8003374:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003388:	78bb      	ldrb	r3, [r7, #2]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d102      	bne.n	8003394 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_PCD_EP_Open+0xaa>
 800339e:	2302      	movs	r3, #2
 80033a0:	e00e      	b.n	80033c0 <HAL_PCD_EP_Open+0xc8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 fc61 	bl	8005c78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80033be:	7afb      	ldrb	r3, [r7, #11]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	da0f      	bge.n	80033fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	f003 020f 	and.w	r2, r3, #15
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	3338      	adds	r3, #56	; 0x38
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	705a      	strb	r2, [r3, #1]
 80033fa:	e00f      	b.n	800341c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	f003 020f 	and.w	r2, r3, #15
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_PCD_EP_Close+0x6e>
 8003432:	2302      	movs	r3, #2
 8003434:	e00e      	b.n	8003454 <HAL_PCD_EP_Close+0x8c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	4618      	mov	r0, r3
 8003446:	f002 fc9f 	bl	8005d88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	460b      	mov	r3, r1
 800346a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4413      	add	r3, r2
 8003482:	3304      	adds	r3, #4
 8003484:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2200      	movs	r2, #0
 800349c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d102      	bne.n	80034b8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034b8:	7afb      	ldrb	r3, [r7, #11]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	f002 ff7a 	bl	80063c8 <USB_EP0StartXfer>
 80034d4:	e008      	b.n	80034e8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	6979      	ldr	r1, [r7, #20]
 80034e4:	f002 fd2c 	bl	8005f40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 020f 	and.w	r2, r3, #15
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003514:	681b      	ldr	r3, [r3, #0]
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	460b      	mov	r3, r1
 8003530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	3338      	adds	r3, #56	; 0x38
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2201      	movs	r2, #1
 8003560:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003562:	7afb      	ldrb	r3, [r7, #11]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	b2da      	uxtb	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800357c:	7afb      	ldrb	r3, [r7, #11]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	461a      	mov	r2, r3
 8003592:	6979      	ldr	r1, [r7, #20]
 8003594:	f002 ff18 	bl	80063c8 <USB_EP0StartXfer>
 8003598:	e008      	b.n	80035ac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	f002 fcca 	bl	8005f40 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d901      	bls.n	80035d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e050      	b.n	8003676 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	da0f      	bge.n	80035fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	3338      	adds	r3, #56	; 0x38
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	705a      	strb	r2, [r3, #1]
 80035fa:	e00d      	b.n	8003618 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_PCD_EP_SetStall+0x82>
 8003634:	2302      	movs	r3, #2
 8003636:	e01e      	b.n	8003676 <HAL_PCD_EP_SetStall+0xc0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f003 f86f 	bl	800672a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	b2d9      	uxtb	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003666:	461a      	mov	r2, r3
 8003668:	f003 fa4e 	bl	8006b08 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d901      	bls.n	800369c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e042      	b.n	8003722 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800369c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	da0f      	bge.n	80036c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	f003 020f 	and.w	r2, r3, #15
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	3338      	adds	r3, #56	; 0x38
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	3304      	adds	r3, #4
 80036ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	705a      	strb	r2, [r3, #1]
 80036c2:	e00f      	b.n	80036e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_PCD_EP_ClrStall+0x86>
 8003700:	2302      	movs	r3, #2
 8003702:	e00e      	b.n	8003722 <HAL_PCD_EP_ClrStall+0xa4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68f9      	ldr	r1, [r7, #12]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 f877 	bl	8006806 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b08a      	sub	sp, #40	; 0x28
 800372e:	af02      	add	r7, sp, #8
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3338      	adds	r3, #56	; 0x38
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4413      	add	r3, r2
 800374e:	3304      	adds	r3, #4
 8003750:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	429a      	cmp	r2, r3
 800375c:	d901      	bls.n	8003762 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e06c      	b.n	800383c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	d902      	bls.n	800377e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3303      	adds	r3, #3
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003786:	e02b      	b.n	80037e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	429a      	cmp	r2, r3
 800379c:	d902      	bls.n	80037a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3303      	adds	r3, #3
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68d9      	ldr	r1, [r3, #12]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	6978      	ldr	r0, [r7, #20]
 80037c4:	f002 ff53 	bl	800666e <USB_WritePacket>

    ep->xfer_buff  += len;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	441a      	add	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	441a      	add	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d809      	bhi.n	800380a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037fe:	429a      	cmp	r2, r3
 8003800:	d203      	bcs.n	800380a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1be      	bne.n	8003788 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	429a      	cmp	r2, r3
 8003814:	d811      	bhi.n	800383a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2201      	movs	r2, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	43db      	mvns	r3, r3
 8003830:	6939      	ldr	r1, [r7, #16]
 8003832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003836:	4013      	ands	r3, r2
 8003838:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	333c      	adds	r3, #60	; 0x3c
 800385c:	3304      	adds	r3, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b01      	cmp	r3, #1
 8003878:	f040 80a0 	bne.w	80039bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d015      	beq.n	80038b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a72      	ldr	r2, [pc, #456]	; (8003a54 <PCD_EP_OutXfrComplete_int+0x210>)
 800388a:	4293      	cmp	r3, r2
 800388c:	f240 80dd 	bls.w	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80d7 	beq.w	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a8:	461a      	mov	r2, r3
 80038aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ae:	6093      	str	r3, [r2, #8]
 80038b0:	e0cb      	b.n	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	2320      	movs	r3, #32
 80038cc:	6093      	str	r3, [r2, #8]
 80038ce:	e0bc      	b.n	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 80b7 	bne.w	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <PCD_EP_OutXfrComplete_int+0x210>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d90f      	bls.n	8003904 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fa:	461a      	mov	r2, r3
 80038fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003900:	6093      	str	r3, [r2, #8]
 8003902:	e0a2      	b.n	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003916:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	0159      	lsls	r1, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	440b      	add	r3, r1
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800392a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4403      	add	r3, r0
 800393a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800393e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4403      	add	r3, r0
 8003962:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4419      	add	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4403      	add	r3, r0
 8003978:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800397c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d114      	bne.n	80039ae <PCD_EP_OutXfrComplete_int+0x16a>
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d108      	bne.n	80039ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039a6:	461a      	mov	r2, r3
 80039a8:	2101      	movs	r1, #1
 80039aa:	f003 f8ad 	bl	8006b08 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f004 ffaf 	bl	8008918 <HAL_PCD_DataOutStageCallback>
 80039ba:	e046      	b.n	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <PCD_EP_OutXfrComplete_int+0x214>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d124      	bne.n	8003a0e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	461a      	mov	r2, r3
 80039dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e0:	6093      	str	r3, [r2, #8]
 80039e2:	e032      	b.n	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fa:	461a      	mov	r2, r3
 80039fc:	2320      	movs	r3, #32
 80039fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f004 ff86 	bl	8008918 <HAL_PCD_DataOutStageCallback>
 8003a0c:	e01d      	b.n	8003a4a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d114      	bne.n	8003a3e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d108      	bne.n	8003a3e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a36:	461a      	mov	r2, r3
 8003a38:	2100      	movs	r1, #0
 8003a3a:	f003 f865 	bl	8006b08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f004 ff67 	bl	8008918 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	4f54300a 	.word	0x4f54300a
 8003a58:	4f54310a 	.word	0x4f54310a

08003a5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	333c      	adds	r3, #60	; 0x3c
 8003a74:	3304      	adds	r3, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d90e      	bls.n	8003ab0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f004 ff1f 	bl	80088f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d90c      	bls.n	8003ad8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d108      	bne.n	8003ad8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	f003 f818 	bl	8006b08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	4f54300a 	.word	0x4f54300a

08003ae8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
 8003af4:	4613      	mov	r3, r2
 8003af6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d107      	bne.n	8003b16 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b06:	883b      	ldrh	r3, [r7, #0]
 8003b08:	0419      	lsls	r1, r3, #16
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
 8003b14:	e028      	b.n	8003b68 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4413      	add	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e00d      	b.n	8003b46 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	3340      	adds	r3, #64	; 0x40
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	3301      	adds	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d3ec      	bcc.n	8003b2a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b50:	883b      	ldrh	r3, [r7, #0]
 8003b52:	0418      	lsls	r0, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	4302      	orrs	r2, r0
 8003b60:	3340      	adds	r3, #64	; 0x40
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	887a      	ldrh	r2, [r7, #2]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e25b      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d075      	beq.n	8003cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bce:	4ba3      	ldr	r3, [pc, #652]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d00c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4ba0      	ldr	r3, [pc, #640]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d112      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b9d      	ldr	r3, [pc, #628]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf2:	d10b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	4b99      	ldr	r3, [pc, #612]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05b      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d157      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e236      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x74>
 8003c16:	4b91      	ldr	r3, [pc, #580]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a90      	ldr	r2, [pc, #576]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e01d      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x98>
 8003c2e:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a8a      	ldr	r2, [pc, #552]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0xb0>
 8003c48:	4b84      	ldr	r3, [pc, #528]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a83      	ldr	r2, [pc, #524]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b81      	ldr	r3, [pc, #516]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a80      	ldr	r2, [pc, #512]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd fb8a 	bl	8001380 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd fb86 	bl	8001380 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1fb      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	4b76      	ldr	r3, [pc, #472]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	e014      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fd fb76 	bl	8001380 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd fb72 	bl	8001380 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1e7      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	4b6c      	ldr	r3, [pc, #432]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e000      	b.n	8003cba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d063      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b62      	ldr	r3, [pc, #392]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d11c      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b5f      	ldr	r3, [pc, #380]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cea:	4b5c      	ldr	r3, [pc, #368]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d001      	beq.n	8003d02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e1bb      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4952      	ldr	r1, [pc, #328]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d16:	e03a      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d020      	beq.n	8003d62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d20:	4b4f      	ldr	r3, [pc, #316]	; (8003e60 <HAL_RCC_OscConfig+0x2b0>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd fb2b 	bl	8001380 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fd fb27 	bl	8001380 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e19c      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4c:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4940      	ldr	r1, [pc, #256]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	e015      	b.n	8003d8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_OscConfig+0x2b0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fd fb0a 	bl	8001380 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fd fb06 	bl	8001380 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e17b      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	4b36      	ldr	r3, [pc, #216]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d030      	beq.n	8003dfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da2:	4b30      	ldr	r3, [pc, #192]	; (8003e64 <HAL_RCC_OscConfig+0x2b4>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da8:	f7fd faea 	bl	8001380 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db0:	f7fd fae6 	bl	8001380 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e15b      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x200>
 8003dce:	e015      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd0:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <HAL_RCC_OscConfig+0x2b4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fad3 	bl	8001380 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dde:	f7fd facf 	bl	8001380 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e144      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f0      	bne.n	8003dde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80a0 	beq.w	8003f4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d121      	bne.n	8003e8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <HAL_RCC_OscConfig+0x2b8>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fd fa95 	bl	8001380 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	e011      	b.n	8003e7e <HAL_RCC_OscConfig+0x2ce>
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	42470000 	.word	0x42470000
 8003e64:	42470e80 	.word	0x42470e80
 8003e68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6c:	f7fd fa88 	bl	8001380 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e0fd      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b81      	ldr	r3, [pc, #516]	; (8004084 <HAL_RCC_OscConfig+0x4d4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0f0      	beq.n	8003e6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d106      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x2f0>
 8003e92:	4b7d      	ldr	r3, [pc, #500]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a7c      	ldr	r2, [pc, #496]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e01c      	b.n	8003eda <HAL_RCC_OscConfig+0x32a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x312>
 8003ea8:	4b77      	ldr	r3, [pc, #476]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a76      	ldr	r2, [pc, #472]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	4b74      	ldr	r3, [pc, #464]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a73      	ldr	r2, [pc, #460]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x32a>
 8003ec2:	4b71      	ldr	r3, [pc, #452]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a70      	ldr	r2, [pc, #448]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	4b6e      	ldr	r3, [pc, #440]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4a6d      	ldr	r2, [pc, #436]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d015      	beq.n	8003f0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fd fa4d 	bl	8001380 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd fa49 	bl	8001380 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e0bc      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f00:	4b61      	ldr	r3, [pc, #388]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ee      	beq.n	8003eea <HAL_RCC_OscConfig+0x33a>
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fd fa37 	bl	8001380 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fd fa33 	bl	8001380 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0a6      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2c:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ee      	bne.n	8003f16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f38:	7dfb      	ldrb	r3, [r7, #23]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d105      	bne.n	8003f4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f3e:	4b52      	ldr	r3, [pc, #328]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a51      	ldr	r2, [pc, #324]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8092 	beq.w	8004078 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f54:	4b4c      	ldr	r3, [pc, #304]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d05c      	beq.n	800401a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d141      	bne.n	8003fec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f68:	4b48      	ldr	r3, [pc, #288]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fd fa07 	bl	8001380 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fd fa03 	bl	8001380 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e078      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f88:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	3b01      	subs	r3, #1
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	061b      	lsls	r3, r3, #24
 8003fb8:	4933      	ldr	r1, [pc, #204]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fbe:	4b33      	ldr	r3, [pc, #204]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fd f9dc 	bl	8001380 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fd f9d8 	bl	8001380 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e04d      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x41c>
 8003fea:	e045      	b.n	8004078 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fec:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fd f9c5 	bl	8001380 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fd f9c1 	bl	8001380 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e036      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f0      	bne.n	8003ffa <HAL_RCC_OscConfig+0x44a>
 8004018:	e02e      	b.n	8004078 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e029      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004026:	4b18      	ldr	r3, [pc, #96]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	429a      	cmp	r2, r3
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d115      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800404e:	4013      	ands	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004054:	4293      	cmp	r3, r2
 8004056:	d10d      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d106      	bne.n	8004074 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40007000 	.word	0x40007000
 8004088:	40023800 	.word	0x40023800
 800408c:	42470060 	.word	0x42470060

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0cc      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a4:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d90c      	bls.n	80040cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b65      	ldr	r3, [pc, #404]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ba:	4b63      	ldr	r3, [pc, #396]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0b8      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d020      	beq.n	800411a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a58      	ldr	r2, [pc, #352]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040fc:	4b53      	ldr	r3, [pc, #332]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004108:	4b50      	ldr	r3, [pc, #320]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	494d      	ldr	r1, [pc, #308]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d044      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d107      	bne.n	800413e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d119      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e07f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d003      	beq.n	800414e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414e:	4b3f      	ldr	r3, [pc, #252]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e06f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415e:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e067      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800416e:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 0203 	bic.w	r2, r3, #3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	4934      	ldr	r1, [pc, #208]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004180:	f7fd f8fe 	bl	8001380 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	e00a      	b.n	800419e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004188:	f7fd f8fa 	bl	8001380 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04f      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419e:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 020c 	and.w	r2, r3, #12
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d1eb      	bne.n	8004188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d20c      	bcs.n	80041d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e032      	b.n	800423e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041e4:	4b19      	ldr	r3, [pc, #100]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	4916      	ldr	r1, [pc, #88]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	490e      	ldr	r1, [pc, #56]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004216:	f000 f821 	bl	800425c <HAL_RCC_GetSysClockFreq>
 800421a:	4601      	mov	r1, r0
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	fa21 f303 	lsr.w	r3, r1, r3
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd f85e 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00
 800424c:	40023800 	.word	0x40023800
 8004250:	08009808 	.word	0x08009808
 8004254:	20000000 	.word	0x20000000
 8004258:	20000004 	.word	0x20000004

0800425c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800425c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	2300      	movs	r3, #0
 800426c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004272:	4b63      	ldr	r3, [pc, #396]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b04      	cmp	r3, #4
 800427c:	d007      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x32>
 800427e:	2b08      	cmp	r3, #8
 8004280:	d008      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x38>
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 80b4 	bne.w	80043f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004288:	4b5e      	ldr	r3, [pc, #376]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800428a:	60bb      	str	r3, [r7, #8]
       break;
 800428c:	e0b3      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b5d      	ldr	r3, [pc, #372]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004290:	60bb      	str	r3, [r7, #8]
      break;
 8004292:	e0b0      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004294:	4b5a      	ldr	r3, [pc, #360]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429e:	4b58      	ldr	r3, [pc, #352]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d04a      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042aa:	4b55      	ldr	r3, [pc, #340]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	099b      	lsrs	r3, r3, #6
 80042b0:	f04f 0400 	mov.w	r4, #0
 80042b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	ea03 0501 	and.w	r5, r3, r1
 80042c0:	ea04 0602 	and.w	r6, r4, r2
 80042c4:	4629      	mov	r1, r5
 80042c6:	4632      	mov	r2, r6
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	0154      	lsls	r4, r2, #5
 80042d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042d6:	014b      	lsls	r3, r1, #5
 80042d8:	4619      	mov	r1, r3
 80042da:	4622      	mov	r2, r4
 80042dc:	1b49      	subs	r1, r1, r5
 80042de:	eb62 0206 	sbc.w	r2, r2, r6
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	0194      	lsls	r4, r2, #6
 80042ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042f0:	018b      	lsls	r3, r1, #6
 80042f2:	1a5b      	subs	r3, r3, r1
 80042f4:	eb64 0402 	sbc.w	r4, r4, r2
 80042f8:	f04f 0100 	mov.w	r1, #0
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	00e2      	lsls	r2, r4, #3
 8004302:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004306:	00d9      	lsls	r1, r3, #3
 8004308:	460b      	mov	r3, r1
 800430a:	4614      	mov	r4, r2
 800430c:	195b      	adds	r3, r3, r5
 800430e:	eb44 0406 	adc.w	r4, r4, r6
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	02a2      	lsls	r2, r4, #10
 800431c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004320:	0299      	lsls	r1, r3, #10
 8004322:	460b      	mov	r3, r1
 8004324:	4614      	mov	r4, r2
 8004326:	4618      	mov	r0, r3
 8004328:	4621      	mov	r1, r4
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f04f 0400 	mov.w	r4, #0
 8004330:	461a      	mov	r2, r3
 8004332:	4623      	mov	r3, r4
 8004334:	f7fb ffa4 	bl	8000280 <__aeabi_uldivmod>
 8004338:	4603      	mov	r3, r0
 800433a:	460c      	mov	r4, r1
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	e049      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	f04f 0400 	mov.w	r4, #0
 800434a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	ea03 0501 	and.w	r5, r3, r1
 8004356:	ea04 0602 	and.w	r6, r4, r2
 800435a:	4629      	mov	r1, r5
 800435c:	4632      	mov	r2, r6
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	f04f 0400 	mov.w	r4, #0
 8004366:	0154      	lsls	r4, r2, #5
 8004368:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800436c:	014b      	lsls	r3, r1, #5
 800436e:	4619      	mov	r1, r3
 8004370:	4622      	mov	r2, r4
 8004372:	1b49      	subs	r1, r1, r5
 8004374:	eb62 0206 	sbc.w	r2, r2, r6
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	f04f 0400 	mov.w	r4, #0
 8004380:	0194      	lsls	r4, r2, #6
 8004382:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004386:	018b      	lsls	r3, r1, #6
 8004388:	1a5b      	subs	r3, r3, r1
 800438a:	eb64 0402 	sbc.w	r4, r4, r2
 800438e:	f04f 0100 	mov.w	r1, #0
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	00e2      	lsls	r2, r4, #3
 8004398:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800439c:	00d9      	lsls	r1, r3, #3
 800439e:	460b      	mov	r3, r1
 80043a0:	4614      	mov	r4, r2
 80043a2:	195b      	adds	r3, r3, r5
 80043a4:	eb44 0406 	adc.w	r4, r4, r6
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	02a2      	lsls	r2, r4, #10
 80043b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043b6:	0299      	lsls	r1, r3, #10
 80043b8:	460b      	mov	r3, r1
 80043ba:	4614      	mov	r4, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	4621      	mov	r1, r4
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f04f 0400 	mov.w	r4, #0
 80043c6:	461a      	mov	r2, r3
 80043c8:	4623      	mov	r3, r4
 80043ca:	f7fb ff59 	bl	8000280 <__aeabi_uldivmod>
 80043ce:	4603      	mov	r3, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	3301      	adds	r3, #1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ec:	60bb      	str	r3, [r7, #8]
      break;
 80043ee:	e002      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043f2:	60bb      	str	r3, [r7, #8]
      break;
 80043f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043f6:	68bb      	ldr	r3, [r7, #8]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	00f42400 	.word	0x00f42400

08004408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000000 	.word	0x20000000

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4601      	mov	r1, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a9b      	lsrs	r3, r3, #10
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4a03      	ldr	r2, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5cd3      	ldrb	r3, [r2, r3]
 8004438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	08009818 	.word	0x08009818

08004448 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d105      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800446c:	2b00      	cmp	r3, #0
 800446e:	d035      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004470:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004476:	f7fc ff83 	bl	8001380 <HAL_GetTick>
 800447a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800447e:	f7fc ff7f 	bl	8001380 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0b0      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004490:	4b5b      	ldr	r3, [pc, #364]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	019a      	lsls	r2, r3, #6
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	071b      	lsls	r3, r3, #28
 80044a8:	4955      	ldr	r1, [pc, #340]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044b0:	4b52      	ldr	r3, [pc, #328]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044b6:	f7fc ff63 	bl	8001380 <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044be:	f7fc ff5f 	bl	8001380 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e090      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d0:	4b4b      	ldr	r3, [pc, #300]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8083 	beq.w	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b44      	ldr	r3, [pc, #272]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a43      	ldr	r2, [pc, #268]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004506:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a3e      	ldr	r2, [pc, #248]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004512:	f7fc ff35 	bl	8001380 <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004518:	e008      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800451a:	f7fc ff31 	bl	8001380 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e062      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800452c:	4b35      	ldr	r3, [pc, #212]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004540:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02f      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	429a      	cmp	r2, r3
 8004554:	d028      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004556:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004560:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004562:	2201      	movs	r2, #1
 8004564:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800456c:	4a24      	ldr	r2, [pc, #144]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d114      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800457e:	f7fc feff 	bl	8001380 <HAL_GetTick>
 8004582:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fc fefb 	bl	8001380 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e02a      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	4b18      	ldr	r3, [pc, #96]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ee      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b4:	d10d      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ca:	490d      	ldr	r1, [pc, #52]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	608b      	str	r3, [r1, #8]
 80045d0:	e005      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045dc:	6093      	str	r3, [r2, #8]
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ea:	4905      	ldr	r1, [pc, #20]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	42470068 	.word	0x42470068
 8004600:	40023800 	.word	0x40023800
 8004604:	40007000 	.word	0x40007000
 8004608:	42470e40 	.word	0x42470e40

0800460c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e083      	b.n	8004726 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7f5b      	ldrb	r3, [r3, #29]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc faaa 	bl	8000b88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	22ca      	movs	r2, #202	; 0xca
 8004640:	625a      	str	r2, [r3, #36]	; 0x24
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2253      	movs	r2, #83	; 0x53
 8004648:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f897 	bl	800477e <RTC_EnterInitMode>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	22ff      	movs	r2, #255	; 0xff
 800465c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e05e      	b.n	8004726 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800467a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6899      	ldr	r1, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68d2      	ldr	r2, [r2, #12]
 80046a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6919      	ldr	r1, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	041a      	lsls	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10e      	bne.n	80046f4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f829 	bl	800472e <HAL_RTC_WaitForSynchro>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e018      	b.n	8004726 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004748:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800474a:	f7fc fe19 	bl	8001380 <HAL_GetTick>
 800474e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004750:	e009      	b.n	8004766 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004752:	f7fc fe15 	bl	8001380 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004760:	d901      	bls.n	8004766 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e007      	b.n	8004776 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ee      	beq.n	8004752 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d119      	bne.n	80047cc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047a2:	f7fc fded 	bl	8001380 <HAL_GetTick>
 80047a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80047a8:	e009      	b.n	80047be <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80047aa:	f7fc fde9 	bl	8001380 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047b8:	d901      	bls.n	80047be <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e007      	b.n	80047ce <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ee      	beq.n	80047aa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e01d      	b.n	8004824 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d106      	bne.n	8004802 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fc fc8b 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f000 fa13 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e01d      	b.n	800487a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fc fbf6 	bl	8001044 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f000 f9e8 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e01d      	b.n	80048d0 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fc fbed 	bl	8001088 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f000 f9bd 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_OC_ConfigChannel+0x1a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e04e      	b.n	8004990 <HAL_TIM_OC_ConfigChannel+0xb8>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	d839      	bhi.n	800497c <HAL_TIM_OC_ConfigChannel+0xa4>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <HAL_TIM_OC_ConfigChannel+0x38>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004945 	.word	0x08004945
 8004914:	0800497d 	.word	0x0800497d
 8004918:	0800497d 	.word	0x0800497d
 800491c:	0800497d 	.word	0x0800497d
 8004920:	08004953 	.word	0x08004953
 8004924:	0800497d 	.word	0x0800497d
 8004928:	0800497d 	.word	0x0800497d
 800492c:	0800497d 	.word	0x0800497d
 8004930:	08004961 	.word	0x08004961
 8004934:	0800497d 	.word	0x0800497d
 8004938:	0800497d 	.word	0x0800497d
 800493c:	0800497d 	.word	0x0800497d
 8004940:	0800496f 	.word	0x0800496f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fa18 	bl	8004d80 <TIM_OC1_SetConfig>
      break;
 8004950:	e015      	b.n	800497e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fa81 	bl	8004e60 <TIM_OC2_SetConfig>
      break;
 800495e:	e00e      	b.n	800497e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 faf0 	bl	8004f4c <TIM_OC3_SetConfig>
      break;
 800496c:	e007      	b.n	800497e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fb5d 	bl	8005034 <TIM_OC4_SetConfig>
      break;
 800497a:	e000      	b.n	800497e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800497c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e08a      	b.n	8004ac8 <HAL_TIM_IC_ConfigChannel+0x130>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11b      	bne.n	8004a00 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f000 fb82 	bl	80050e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 020c 	bic.w	r2, r2, #12
 80049ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	619a      	str	r2, [r3, #24]
 80049fe:	e05a      	b.n	8004ab6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d11c      	bne.n	8004a40 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	6819      	ldr	r1, [r3, #0]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f000 fc06 	bl	8005226 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6999      	ldr	r1, [r3, #24]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	021a      	lsls	r2, r3, #8
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	619a      	str	r2, [r3, #24]
 8004a3e:	e03a      	b.n	8004ab6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11b      	bne.n	8004a7e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6819      	ldr	r1, [r3, #0]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f000 fc53 	bl	8005300 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 020c 	bic.w	r2, r2, #12
 8004a68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69d9      	ldr	r1, [r3, #28]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	61da      	str	r2, [r3, #28]
 8004a7c:	e01b      	b.n	8004ab6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6819      	ldr	r1, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f000 fc73 	bl	8005378 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004aa0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69d9      	ldr	r1, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	021a      	lsls	r2, r3, #8
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_ConfigClockSource+0x18>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0a6      	b.n	8004c36 <HAL_TIM_ConfigClockSource+0x166>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d067      	beq.n	8004bf0 <HAL_TIM_ConfigClockSource+0x120>
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d80b      	bhi.n	8004b3c <HAL_TIM_ConfigClockSource+0x6c>
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d073      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x140>
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d802      	bhi.n	8004b32 <HAL_TIM_ConfigClockSource+0x62>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d06f      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b30:	e078      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d06c      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x140>
 8004b36:	2b30      	cmp	r3, #48	; 0x30
 8004b38:	d06a      	beq.n	8004c10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004b3a:	e073      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d00d      	beq.n	8004b5c <HAL_TIM_ConfigClockSource+0x8c>
 8004b40:	2b70      	cmp	r3, #112	; 0x70
 8004b42:	d804      	bhi.n	8004b4e <HAL_TIM_ConfigClockSource+0x7e>
 8004b44:	2b50      	cmp	r3, #80	; 0x50
 8004b46:	d033      	beq.n	8004bb0 <HAL_TIM_ConfigClockSource+0xe0>
 8004b48:	2b60      	cmp	r3, #96	; 0x60
 8004b4a:	d041      	beq.n	8004bd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004b4c:	e06a      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d066      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x152>
 8004b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b58:	d017      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004b5a:	e063      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6899      	ldr	r1, [r3, #8]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f000 fc5c 	bl	8005428 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
      break;
 8004b88:	e04c      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f000 fc45 	bl	8005428 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bac:	609a      	str	r2, [r3, #8]
      break;
 8004bae:	e039      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	f000 fb03 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2150      	movs	r1, #80	; 0x50
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fc12 	bl	80053f2 <TIM_ITRx_SetConfig>
      break;
 8004bce:	e029      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6859      	ldr	r1, [r3, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f000 fb5f 	bl	80052a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2160      	movs	r1, #96	; 0x60
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fc02 	bl	80053f2 <TIM_ITRx_SetConfig>
      break;
 8004bee:	e019      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f000 fae3 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2140      	movs	r1, #64	; 0x40
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fbf2 	bl	80053f2 <TIM_ITRx_SetConfig>
      break;
 8004c0e:	e009      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 fbe9 	bl	80053f2 <TIM_ITRx_SetConfig>
      break;
 8004c20:	e000      	b.n	8004c24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d00f      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3d      	ldr	r2, [pc, #244]	; (8004d58 <TIM_Base_SetConfig+0x118>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00b      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <TIM_Base_SetConfig+0x11c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a3b      	ldr	r2, [pc, #236]	; (8004d60 <TIM_Base_SetConfig+0x120>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d108      	bne.n	8004c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d027      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	; (8004d58 <TIM_Base_SetConfig+0x118>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d023      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2b      	ldr	r2, [pc, #172]	; (8004d5c <TIM_Base_SetConfig+0x11c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01f      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <TIM_Base_SetConfig+0x120>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d017      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <TIM_Base_SetConfig+0x128>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <TIM_Base_SetConfig+0x12c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <TIM_Base_SetConfig+0x130>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <TIM_Base_SetConfig+0x134>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a24      	ldr	r2, [pc, #144]	; (8004d78 <TIM_Base_SetConfig+0x138>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a23      	ldr	r2, [pc, #140]	; (8004d7c <TIM_Base_SetConfig+0x13c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0xf8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d103      	bne.n	8004d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	615a      	str	r2, [r3, #20]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40010400 	.word	0x40010400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800
 8004d74:	40001800 	.word	0x40001800
 8004d78:	40001c00 	.word	0x40001c00
 8004d7c:	40002000 	.word	0x40002000

08004d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f023 0201 	bic.w	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 0302 	bic.w	r3, r3, #2
 8004dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <TIM_OC1_SetConfig+0xd8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_OC1_SetConfig+0x64>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <TIM_OC1_SetConfig+0xdc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d10c      	bne.n	8004dfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0308 	bic.w	r3, r3, #8
 8004dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <TIM_OC1_SetConfig+0xd8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC1_SetConfig+0x8e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <TIM_OC1_SetConfig+0xdc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d111      	bne.n	8004e32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40010400 	.word	0x40010400

08004e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	f023 0210 	bic.w	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0320 	bic.w	r3, r3, #32
 8004eaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <TIM_OC2_SetConfig+0xe4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_OC2_SetConfig+0x68>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a21      	ldr	r2, [pc, #132]	; (8004f48 <TIM_OC2_SetConfig+0xe8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d10d      	bne.n	8004ee4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <TIM_OC2_SetConfig+0xe4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC2_SetConfig+0x94>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <TIM_OC2_SetConfig+0xe8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d113      	bne.n	8004f1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004efa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40010000 	.word	0x40010000
 8004f48:	40010400 	.word	0x40010400

08004f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a21      	ldr	r2, [pc, #132]	; (800502c <TIM_OC3_SetConfig+0xe0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_OC3_SetConfig+0x66>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a20      	ldr	r2, [pc, #128]	; (8005030 <TIM_OC3_SetConfig+0xe4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d10d      	bne.n	8004fce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	; (800502c <TIM_OC3_SetConfig+0xe0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_OC3_SetConfig+0x92>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <TIM_OC3_SetConfig+0xe4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d113      	bne.n	8005006 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40010000 	.word	0x40010000
 8005030:	40010400 	.word	0x40010400

08005034 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800507e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	031b      	lsls	r3, r3, #12
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a12      	ldr	r2, [pc, #72]	; (80050d8 <TIM_OC4_SetConfig+0xa4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC4_SetConfig+0x68>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a11      	ldr	r2, [pc, #68]	; (80050dc <TIM_OC4_SetConfig+0xa8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d109      	bne.n	80050b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40010400 	.word	0x40010400

080050e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4a28      	ldr	r2, [pc, #160]	; (80051ac <TIM_TI1_SetConfig+0xcc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01b      	beq.n	8005146 <TIM_TI1_SetConfig+0x66>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005114:	d017      	beq.n	8005146 <TIM_TI1_SetConfig+0x66>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <TIM_TI1_SetConfig+0xd0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <TIM_TI1_SetConfig+0x66>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4a24      	ldr	r2, [pc, #144]	; (80051b4 <TIM_TI1_SetConfig+0xd4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00f      	beq.n	8005146 <TIM_TI1_SetConfig+0x66>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a23      	ldr	r2, [pc, #140]	; (80051b8 <TIM_TI1_SetConfig+0xd8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <TIM_TI1_SetConfig+0x66>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <TIM_TI1_SetConfig+0xdc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <TIM_TI1_SetConfig+0x66>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_TI1_SetConfig+0xe0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_TI1_SetConfig+0x66>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <TIM_TI1_SetConfig+0xe4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <TIM_TI1_SetConfig+0x6a>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <TIM_TI1_SetConfig+0x6c>
 800514a:	2300      	movs	r3, #0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e003      	b.n	800516a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005170:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	b2db      	uxtb	r3, r3
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f023 030a 	bic.w	r3, r3, #10
 8005184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 030a 	and.w	r3, r3, #10
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40001800 	.word	0x40001800

080051c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 030a 	bic.w	r3, r3, #10
 8005204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	f023 0210 	bic.w	r2, r3, #16
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005252:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	b29b      	uxth	r3, r3
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005278:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f023 0210 	bic.w	r2, r3, #16
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	031b      	lsls	r3, r3, #12
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	621a      	str	r2, [r3, #32]
}
 80052f4:	bf00      	nop
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 0303 	bic.w	r3, r3, #3
 800532c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800533c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	b2db      	uxtb	r3, r3
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005350:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	021b      	lsls	r3, r3, #8
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	031b      	lsls	r3, r3, #12
 80053bc:	b29b      	uxth	r3, r3
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80053ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	031b      	lsls	r3, r3, #12
 80053d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	621a      	str	r2, [r3, #32]
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	f043 0307 	orr.w	r3, r3, #7
 8005414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	021a      	lsls	r2, r3, #8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	431a      	orrs	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4313      	orrs	r3, r2
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	609a      	str	r2, [r3, #8]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800547c:	2302      	movs	r3, #2
 800547e:	e05a      	b.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a21      	ldr	r2, [pc, #132]	; (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d022      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d01d      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d018      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a18      	ldr	r2, [pc, #96]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d004      	beq.n	800550a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d10c      	bne.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4313      	orrs	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800
 8005550:	40000c00 	.word	0x40000c00
 8005554:	40010400 	.word	0x40010400
 8005558:	40014000 	.word	0x40014000
 800555c:	40001800 	.word	0x40001800

08005560 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005578:	2302      	movs	r3, #2
 800557a:	e03d      	b.n	80055f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 001c 	add.w	r0, r7, #28
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b01      	cmp	r3, #1
 800561a:	d122      	bne.n	8005662 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d105      	bne.n	8005656 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f001 fab4 	bl	8006bc4 <USB_CoreReset>
 800565c:	4603      	mov	r3, r0
 800565e:	73fb      	strb	r3, [r7, #15]
 8005660:	e01a      	b.n	8005698 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 faa8 	bl	8006bc4 <USB_CoreReset>
 8005674:	4603      	mov	r3, r0
 8005676:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
 800568a:	e005      	b.n	8005698 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10b      	bne.n	80056b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f043 0206 	orr.w	r2, r3, #6
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c2:	b004      	add	sp, #16
 80056c4:	4770      	bx	lr
	...

080056c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d165      	bne.n	80057a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a41      	ldr	r2, [pc, #260]	; (80057e4 <USB_SetTurnaroundTime+0x11c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d906      	bls.n	80056f2 <USB_SetTurnaroundTime+0x2a>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <USB_SetTurnaroundTime+0x120>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d802      	bhi.n	80056f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056ec:	230f      	movs	r3, #15
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e062      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a3c      	ldr	r2, [pc, #240]	; (80057e8 <USB_SetTurnaroundTime+0x120>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d906      	bls.n	8005708 <USB_SetTurnaroundTime+0x40>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4a3b      	ldr	r2, [pc, #236]	; (80057ec <USB_SetTurnaroundTime+0x124>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d802      	bhi.n	8005708 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005702:	230e      	movs	r3, #14
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e057      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a38      	ldr	r2, [pc, #224]	; (80057ec <USB_SetTurnaroundTime+0x124>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d906      	bls.n	800571e <USB_SetTurnaroundTime+0x56>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4a37      	ldr	r2, [pc, #220]	; (80057f0 <USB_SetTurnaroundTime+0x128>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d802      	bhi.n	800571e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005718:	230d      	movs	r3, #13
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e04c      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4a33      	ldr	r2, [pc, #204]	; (80057f0 <USB_SetTurnaroundTime+0x128>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d906      	bls.n	8005734 <USB_SetTurnaroundTime+0x6c>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4a32      	ldr	r2, [pc, #200]	; (80057f4 <USB_SetTurnaroundTime+0x12c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d802      	bhi.n	8005734 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800572e:	230c      	movs	r3, #12
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	e041      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a2f      	ldr	r2, [pc, #188]	; (80057f4 <USB_SetTurnaroundTime+0x12c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d906      	bls.n	800574a <USB_SetTurnaroundTime+0x82>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a2e      	ldr	r2, [pc, #184]	; (80057f8 <USB_SetTurnaroundTime+0x130>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d802      	bhi.n	800574a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005744:	230b      	movs	r3, #11
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e036      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a2a      	ldr	r2, [pc, #168]	; (80057f8 <USB_SetTurnaroundTime+0x130>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d906      	bls.n	8005760 <USB_SetTurnaroundTime+0x98>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a29      	ldr	r2, [pc, #164]	; (80057fc <USB_SetTurnaroundTime+0x134>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d802      	bhi.n	8005760 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800575a:	230a      	movs	r3, #10
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e02b      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4a26      	ldr	r2, [pc, #152]	; (80057fc <USB_SetTurnaroundTime+0x134>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d906      	bls.n	8005776 <USB_SetTurnaroundTime+0xae>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4a25      	ldr	r2, [pc, #148]	; (8005800 <USB_SetTurnaroundTime+0x138>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d802      	bhi.n	8005776 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005770:	2309      	movs	r3, #9
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e020      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4a21      	ldr	r2, [pc, #132]	; (8005800 <USB_SetTurnaroundTime+0x138>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d906      	bls.n	800578c <USB_SetTurnaroundTime+0xc4>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4a20      	ldr	r2, [pc, #128]	; (8005804 <USB_SetTurnaroundTime+0x13c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d802      	bhi.n	800578c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005786:	2308      	movs	r3, #8
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e015      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <USB_SetTurnaroundTime+0x13c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d906      	bls.n	80057a2 <USB_SetTurnaroundTime+0xda>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <USB_SetTurnaroundTime+0x140>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d802      	bhi.n	80057a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800579c:	2307      	movs	r3, #7
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e00a      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057a2:	2306      	movs	r3, #6
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e007      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80057ae:	2309      	movs	r3, #9
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e001      	b.n	80057b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80057b4:	2309      	movs	r3, #9
 80057b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	00d8acbf 	.word	0x00d8acbf
 80057e8:	00e4e1bf 	.word	0x00e4e1bf
 80057ec:	00f423ff 	.word	0x00f423ff
 80057f0:	0106737f 	.word	0x0106737f
 80057f4:	011a499f 	.word	0x011a499f
 80057f8:	01312cff 	.word	0x01312cff
 80057fc:	014ca43f 	.word	0x014ca43f
 8005800:	016e35ff 	.word	0x016e35ff
 8005804:	01a6ab1f 	.word	0x01a6ab1f
 8005808:	01e847ff 	.word	0x01e847ff

0800580c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f043 0201 	orr.w	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f023 0201 	bic.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d106      	bne.n	800587c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
 800587a:	e00b      	b.n	8005894 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	e001      	b.n	8005894 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e003      	b.n	800589c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005894:	2032      	movs	r0, #50	; 0x32
 8005896:	f7fb fd7f 	bl	8001398 <HAL_Delay>

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a4:	b084      	sub	sp, #16
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	e009      	b.n	80058d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3340      	adds	r3, #64	; 0x40
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	3301      	adds	r3, #1
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b0e      	cmp	r3, #14
 80058dc:	d9f2      	bls.n	80058c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11c      	bne.n	800591e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f2:	f043 0302 	orr.w	r3, r3, #2
 80058f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	; 0x38
 800591c:	e00b      	b.n	8005936 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800593c:	461a      	mov	r2, r3
 800593e:	2300      	movs	r3, #0
 8005940:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005948:	4619      	mov	r1, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	461a      	mov	r2, r3
 8005952:	680b      	ldr	r3, [r1, #0]
 8005954:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b01      	cmp	r3, #1
 800595a:	d10c      	bne.n	8005976 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005962:	2100      	movs	r1, #0
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f949 	bl	8005bfc <USB_SetDevSpeed>
 800596a:	e008      	b.n	800597e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800596c:	2101      	movs	r1, #1
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f944 	bl	8005bfc <USB_SetDevSpeed>
 8005974:	e003      	b.n	800597e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005976:	2103      	movs	r1, #3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f93f 	bl	8005bfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800597e:	2110      	movs	r1, #16
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8f3 	bl	8005b6c <USB_FlushTxFifo>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f911 	bl	8005bb8 <USB_FlushRxFifo>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	461a      	mov	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	461a      	mov	r2, r3
 80059b4:	2300      	movs	r3, #0
 80059b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	461a      	mov	r2, r3
 80059c0:	2300      	movs	r3, #0
 80059c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	e043      	b.n	8005a52 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e0:	d118      	bne.n	8005a14 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f4:	461a      	mov	r2, r3
 80059f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e013      	b.n	8005a26 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e008      	b.n	8005a26 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	461a      	mov	r2, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	461a      	mov	r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a44:	461a      	mov	r2, r3
 8005a46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d3b7      	bcc.n	80059ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	e043      	b.n	8005ae8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a76:	d118      	bne.n	8005aaa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e013      	b.n	8005abc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e008      	b.n	8005abc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2300      	movs	r3, #0
 8005aba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	461a      	mov	r2, r3
 8005adc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ae0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d3b7      	bcc.n	8005a60 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d105      	bne.n	8005b24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f043 0210 	orr.w	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <USB_DevInit+0x2c4>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f043 0208 	orr.w	r2, r3, #8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d107      	bne.n	8005b58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b50:	f043 0304 	orr.w	r3, r3, #4
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b64:	b004      	add	sp, #16
 8005b66:	4770      	bx	lr
 8005b68:	803c3800 	.word	0x803c3800

08005b6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	f043 0220 	orr.w	r2, r3, #32
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <USB_FlushTxFifo+0x48>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d0f0      	beq.n	8005b86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	00030d40 	.word	0x00030d40

08005bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <USB_FlushRxFifo+0x40>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d901      	bls.n	8005bdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e006      	b.n	8005bea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	d0f0      	beq.n	8005bca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	00030d40 	.word	0x00030d40

08005bfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	68f9      	ldr	r1, [r7, #12]
 8005c18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0306 	and.w	r3, r3, #6
 8005c46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]
 8005c52:	e00a      	b.n	8005c6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d002      	beq.n	8005c60 <USB_GetDevSpeed+0x32>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b06      	cmp	r3, #6
 8005c5e:	d102      	bne.n	8005c66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c60:	2302      	movs	r3, #2
 8005c62:	75fb      	strb	r3, [r7, #23]
 8005c64:	e001      	b.n	8005c6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c66:	230f      	movs	r3, #15
 8005c68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d13a      	bne.n	8005d0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d155      	bne.n	8005d78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	78db      	ldrb	r3, [r3, #3]
 8005ce6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	059b      	lsls	r3, r3, #22
 8005cee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	e036      	b.n	8005d78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d20:	041b      	lsls	r3, r3, #16
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d11a      	bne.n	8005d78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	78db      	ldrb	r3, [r3, #3]
 8005d5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	4313      	orrs	r3, r2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d161      	bne.n	8005e68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dba:	d11f      	bne.n	8005dfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	43db      	mvns	r3, r3
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	69da      	ldr	r2, [r3, #28]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e40:	4013      	ands	r3, r2
 8005e42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	0159      	lsls	r1, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	440b      	add	r3, r1
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4b35      	ldr	r3, [pc, #212]	; (8005f38 <USB_DeactivateEndpoint+0x1b0>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	600b      	str	r3, [r1, #0]
 8005e66:	e060      	b.n	8005f2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e7e:	d11f      	bne.n	8005ec0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ebe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	041b      	lsls	r3, r3, #16
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	68f9      	ldr	r1, [r7, #12]
 8005edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8005efa:	041b      	lsls	r3, r3, #16
 8005efc:	43db      	mvns	r3, r3
 8005efe:	68f9      	ldr	r1, [r7, #12]
 8005f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f04:	4013      	ands	r3, r2
 8005f06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	0159      	lsls	r1, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	440b      	add	r3, r1
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	4619      	mov	r1, r3
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <USB_DeactivateEndpoint+0x1b4>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	ec337800 	.word	0xec337800
 8005f3c:	eff37800 	.word	0xeff37800

08005f40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	; 0x28
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 815c 	bne.w	800621a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d132      	bne.n	8005fd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc8:	0cdb      	lsrs	r3, r3, #19
 8005fca:	04db      	lsls	r3, r3, #19
 8005fcc:	6113      	str	r3, [r2, #16]
 8005fce:	e074      	b.n	80060ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fea:	0cdb      	lsrs	r3, r3, #19
 8005fec:	04db      	lsls	r3, r3, #19
 8005fee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800600e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006012:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6959      	ldr	r1, [r3, #20]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	440b      	add	r3, r1
 800602c:	1e59      	subs	r1, r3, #1
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	fbb1 f3f3 	udiv	r3, r1, r3
 8006036:	04d9      	lsls	r1, r3, #19
 8006038:	4b9d      	ldr	r3, [pc, #628]	; (80062b0 <USB_EPStartXfer+0x370>)
 800603a:	400b      	ands	r3, r1
 800603c:	69b9      	ldr	r1, [r7, #24]
 800603e:	0148      	lsls	r0, r1, #5
 8006040:	69f9      	ldr	r1, [r7, #28]
 8006042:	4401      	add	r1, r0
 8006044:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006048:	4313      	orrs	r3, r2
 800604a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006062:	69b9      	ldr	r1, [r7, #24]
 8006064:	0148      	lsls	r0, r1, #5
 8006066:	69f9      	ldr	r1, [r7, #28]
 8006068:	4401      	add	r1, r0
 800606a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	78db      	ldrb	r3, [r3, #3]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d11f      	bne.n	80060ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006098:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d14b      	bne.n	8006158 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	461a      	mov	r2, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	78db      	ldrb	r3, [r3, #3]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d128      	bne.n	8006136 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d110      	bne.n	8006116 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e00f      	b.n	8006136 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006134:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006150:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e12f      	b.n	80063b8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006172:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006176:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	78db      	ldrb	r3, [r3, #3]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d015      	beq.n	80061ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 8117 	beq.w	80063b8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	2101      	movs	r1, #1
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	69f9      	ldr	r1, [r7, #28]
 80061a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a6:	4313      	orrs	r3, r2
 80061a8:	634b      	str	r3, [r1, #52]	; 0x34
 80061aa:	e105      	b.n	80063b8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d110      	bne.n	80061de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	e00f      	b.n	80061fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	0151      	lsls	r1, r2, #5
 80061f0:	69fa      	ldr	r2, [r7, #28]
 80061f2:	440a      	add	r2, r1
 80061f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	68d9      	ldr	r1, [r3, #12]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	b298      	uxth	r0, r3
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4603      	mov	r3, r0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fa2b 	bl	800666e <USB_WritePacket>
 8006218:	e0ce      	b.n	80063b8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006234:	0cdb      	lsrs	r3, r3, #19
 8006236:	04db      	lsls	r3, r3, #19
 8006238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006254:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006258:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800625c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d126      	bne.n	80062b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	0148      	lsls	r0, r1, #5
 8006280:	69f9      	ldr	r1, [r7, #28]
 8006282:	4401      	add	r1, r0
 8006284:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006288:	4313      	orrs	r3, r2
 800628a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062aa:	6113      	str	r3, [r2, #16]
 80062ac:	e036      	b.n	800631c <USB_EPStartXfer+0x3dc>
 80062ae:	bf00      	nop
 80062b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	695a      	ldr	r2, [r3, #20]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	4413      	add	r3, r2
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	8afb      	ldrh	r3, [r7, #22]
 80062da:	04d9      	lsls	r1, r3, #19
 80062dc:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <USB_EPStartXfer+0x484>)
 80062de:	400b      	ands	r3, r1
 80062e0:	69b9      	ldr	r1, [r7, #24]
 80062e2:	0148      	lsls	r0, r1, #5
 80062e4:	69f9      	ldr	r1, [r7, #28]
 80062e6:	4401      	add	r1, r0
 80062e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062ec:	4313      	orrs	r3, r2
 80062ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	8af9      	ldrh	r1, [r7, #22]
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	0148      	lsls	r0, r1, #5
 8006310:	69f9      	ldr	r1, [r7, #28]
 8006312:	4401      	add	r1, r0
 8006314:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006318:	4313      	orrs	r3, r2
 800631a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d10d      	bne.n	800633e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	68d9      	ldr	r1, [r3, #12]
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633a:	460a      	mov	r2, r1
 800633c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	78db      	ldrb	r3, [r3, #3]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d128      	bne.n	8006398 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d110      	bne.n	8006378 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e00f      	b.n	8006398 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006396:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	1ff80000 	.word	0x1ff80000

080063c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f040 80cd 	bne.w	8006584 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d132      	bne.n	8006458 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006450:	0cdb      	lsrs	r3, r3, #19
 8006452:	04db      	lsls	r3, r3, #19
 8006454:	6113      	str	r3, [r2, #16]
 8006456:	e04e      	b.n	80064f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	0cdb      	lsrs	r3, r3, #19
 8006474:	04db      	lsls	r3, r3, #19
 8006476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	0151      	lsls	r1, r2, #5
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	440a      	add	r2, r1
 800648e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800649a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	695a      	ldr	r2, [r3, #20]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d903      	bls.n	80064b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e6:	6939      	ldr	r1, [r7, #16]
 80064e8:	0148      	lsls	r0, r1, #5
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	4401      	add	r1, r0
 80064ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064f2:	4313      	orrs	r3, r2
 80064f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d11e      	bne.n	800653a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006510:	461a      	mov	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	0151      	lsls	r1, r2, #5
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	440a      	add	r2, r1
 800652e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	e092      	b.n	8006660 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006554:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006558:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d07e      	beq.n	8006660 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	2101      	movs	r1, #1
 8006574:	fa01 f303 	lsl.w	r3, r1, r3
 8006578:	6979      	ldr	r1, [r7, #20]
 800657a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800657e:	4313      	orrs	r3, r2
 8006580:	634b      	str	r3, [r1, #52]	; 0x34
 8006582:	e06d      	b.n	8006660 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659e:	0cdb      	lsrs	r3, r3, #19
 80065a0:	04db      	lsls	r3, r3, #19
 80065a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	0151      	lsls	r1, r2, #5
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	440a      	add	r2, r1
 80065ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065c6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660e:	6939      	ldr	r1, [r7, #16]
 8006610:	0148      	lsls	r0, r1, #5
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	4401      	add	r1, r0
 8006616:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800661a:	4313      	orrs	r3, r2
 800661c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d10d      	bne.n	8006640 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	68d9      	ldr	r1, [r3, #12]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	460a      	mov	r2, r1
 800663e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800665e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800666e:	b480      	push	{r7}
 8006670:	b089      	sub	sp, #36	; 0x24
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	4611      	mov	r1, r2
 800667a:	461a      	mov	r2, r3
 800667c:	460b      	mov	r3, r1
 800667e:	71fb      	strb	r3, [r7, #7]
 8006680:	4613      	mov	r3, r2
 8006682:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800668c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11a      	bne.n	80066ca <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006694:	88bb      	ldrh	r3, [r7, #4]
 8006696:	3303      	adds	r3, #3
 8006698:	089b      	lsrs	r3, r3, #2
 800669a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e00f      	b.n	80066c2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	031a      	lsls	r2, r3, #12
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ae:	461a      	mov	r2, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	3304      	adds	r3, #4
 80066ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	3301      	adds	r3, #1
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d3eb      	bcc.n	80066a2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3724      	adds	r7, #36	; 0x24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066d8:	b480      	push	{r7}
 80066da:	b089      	sub	sp, #36	; 0x24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	3303      	adds	r3, #3
 80066f2:	089b      	lsrs	r3, r3, #2
 80066f4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e00b      	b.n	8006714 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	601a      	str	r2, [r3, #0]
    pDest++;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3304      	adds	r3, #4
 800670c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	3301      	adds	r3, #1
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	429a      	cmp	r2, r3
 800671a:	d3ef      	bcc.n	80066fc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800671c:	69fb      	ldr	r3, [r7, #28]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3724      	adds	r7, #36	; 0x24
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	785b      	ldrb	r3, [r3, #1]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d12c      	bne.n	80067a0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	db12      	blt.n	800677e <USB_EPSetStall+0x54>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00f      	beq.n	800677e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	440a      	add	r2, r1
 8006774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006778:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800677c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e02b      	b.n	80067f8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	db12      	blt.n	80067d8 <USB_EPSetStall+0xae>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00f      	beq.n	80067d8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067d6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d128      	bne.n	8006874 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	440a      	add	r2, r1
 8006838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006840:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	78db      	ldrb	r3, [r3, #3]
 8006846:	2b03      	cmp	r3, #3
 8006848:	d003      	beq.n	8006852 <USB_EPClearStall+0x4c>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	78db      	ldrb	r3, [r3, #3]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d138      	bne.n	80068c4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e027      	b.n	80068c4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006892:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	78db      	ldrb	r3, [r3, #3]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d003      	beq.n	80068a4 <USB_EPClearStall+0x9e>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	78db      	ldrb	r3, [r3, #3]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d10f      	bne.n	80068c4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068f4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006906:	68f9      	ldr	r1, [r7, #12]
 8006908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800690c:	4313      	orrs	r3, r2
 800690e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006938:	f023 0302 	bic.w	r3, r3, #2
 800693c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800693e:	2003      	movs	r0, #3
 8006940:	f7fa fd2a 	bl	8001398 <HAL_Delay>

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006968:	f043 0302 	orr.w	r3, r3, #2
 800696c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800696e:	2003      	movs	r0, #3
 8006970:	f7fa fd12 	bl	8001398 <HAL_Delay>

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800697e:	b480      	push	{r7}
 8006980:	b085      	sub	sp, #20
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4013      	ands	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006996:	68fb      	ldr	r3, [r7, #12]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	4013      	ands	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	0c1b      	lsrs	r3, r3, #16
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	4013      	ands	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	b29b      	uxth	r3, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	4013      	ands	r3, r2
 8006a38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	01db      	lsls	r3, r3, #7
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	4013      	ands	r3, r2
 8006a94:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a96:	68bb      	ldr	r3, [r7, #8]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ada:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ade:	f023 0307 	bic.w	r3, r3, #7
 8006ae2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
	...

08006b08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	460b      	mov	r3, r1
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	333c      	adds	r3, #60	; 0x3c
 8006b1e:	3304      	adds	r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <USB_EP0_OutStart+0xb8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d90a      	bls.n	8006b42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b3c:	d101      	bne.n	8006b42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e037      	b.n	8006bb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b48:	461a      	mov	r2, r3
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b70:	f043 0318 	orr.w	r3, r3, #24
 8006b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b8a:	7afb      	ldrb	r3, [r7, #11]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10f      	bne.n	8006bb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b96:	461a      	mov	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006baa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006bae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	4f54300a 	.word	0x4f54300a

08006bc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <USB_CoreReset+0x64>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e01b      	b.n	8006c1a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	daf2      	bge.n	8006bd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f043 0201 	orr.w	r2, r3, #1
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <USB_CoreReset+0x64>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e006      	b.n	8006c1a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d0f0      	beq.n	8006bfa <USB_CoreReset+0x36>

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	00030d40 	.word	0x00030d40

08006c2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c3c:	f002 f946 	bl	8008ecc <malloc>
 8006c40:	4603      	mov	r3, r0
 8006c42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c52:	2302      	movs	r3, #2
 8006c54:	e066      	b.n	8006d24 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7c1b      	ldrb	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d119      	bne.n	8006c9a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	2181      	movs	r1, #129	; 0x81
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 ff99 	bl	8008ba6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c7e:	2202      	movs	r2, #2
 8006c80:	2101      	movs	r1, #1
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f001 ff8f 	bl	8008ba6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2210      	movs	r2, #16
 8006c94:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c98:	e016      	b.n	8006cc8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c9a:	2340      	movs	r3, #64	; 0x40
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	2181      	movs	r1, #129	; 0x81
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 ff80 	bl	8008ba6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cac:	2340      	movs	r3, #64	; 0x40
 8006cae:	2202      	movs	r2, #2
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 ff77 	bl	8008ba6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cc8:	2308      	movs	r3, #8
 8006cca:	2203      	movs	r2, #3
 8006ccc:	2182      	movs	r1, #130	; 0x82
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 ff69 	bl	8008ba6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	7c1b      	ldrb	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	2101      	movs	r1, #1
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f002 f83a 	bl	8008d84 <USBD_LL_PrepareReceive>
 8006d10:	e007      	b.n	8006d22 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f002 f831 	bl	8008d84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d3c:	2181      	movs	r1, #129	; 0x81
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 ff57 	bl	8008bf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 ff50 	bl	8008bf2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d5a:	2182      	movs	r1, #130	; 0x82
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 ff48 	bl	8008bf2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00e      	beq.n	8006d9a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f002 f8a5 	bl	8008edc <free>
    pdev->pClassData = NULL;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006db4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03a      	beq.n	8006e44 <USBD_CDC_Setup+0xa0>
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	f040 8097 	bne.w	8006f02 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	88db      	ldrh	r3, [r3, #6]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d029      	beq.n	8006e30 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b25b      	sxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da11      	bge.n	8006e0a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006df2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	88d2      	ldrh	r2, [r2, #6]
 8006df8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dfa:	6939      	ldr	r1, [r7, #16]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	461a      	mov	r2, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fa9d 	bl	8008342 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006e08:	e082      	b.n	8006f10 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	785a      	ldrb	r2, [r3, #1]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	88db      	ldrh	r3, [r3, #6]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e20:	6939      	ldr	r1, [r7, #16]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	88db      	ldrh	r3, [r3, #6]
 8006e26:	461a      	mov	r2, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 fab6 	bl	800839a <USBD_CtlPrepareRx>
    break;
 8006e2e:	e06f      	b.n	8006f10 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	7850      	ldrb	r0, [r2, #1]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	4798      	blx	r3
    break;
 8006e42:	e065      	b.n	8006f10 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	785b      	ldrb	r3, [r3, #1]
 8006e48:	2b0b      	cmp	r3, #11
 8006e4a:	d84f      	bhi.n	8006eec <USBD_CDC_Setup+0x148>
 8006e4c:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <USBD_CDC_Setup+0xb0>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006efb 	.word	0x08006efb
 8006e5c:	08006eed 	.word	0x08006eed
 8006e60:	08006eed 	.word	0x08006eed
 8006e64:	08006eed 	.word	0x08006eed
 8006e68:	08006eed 	.word	0x08006eed
 8006e6c:	08006eed 	.word	0x08006eed
 8006e70:	08006eed 	.word	0x08006eed
 8006e74:	08006eed 	.word	0x08006eed
 8006e78:	08006eed 	.word	0x08006eed
 8006e7c:	08006ead 	.word	0x08006ead
 8006e80:	08006ed5 	.word	0x08006ed5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e8e:	f107 030c 	add.w	r3, r7, #12
 8006e92:	2202      	movs	r2, #2
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 fa53 	bl	8008342 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e9c:	e030      	b.n	8006f00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 f9dd 	bl	8008260 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eaa:	e029      	b.n	8006f00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d107      	bne.n	8006ec6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006eb6:	f107 030f 	add.w	r3, r7, #15
 8006eba:	2201      	movs	r2, #1
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fa3f 	bl	8008342 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006ec4:	e01c      	b.n	8006f00 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 f9c9 	bl	8008260 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ed2:	e015      	b.n	8006f00 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d00f      	beq.n	8006efe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f9bd 	bl	8008260 <USBD_CtlError>
        ret = USBD_FAIL;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006eea:	e008      	b.n	8006efe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 f9b6 	bl	8008260 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef8:	e002      	b.n	8006f00 <USBD_CDC_Setup+0x15c>
      break;
 8006efa:	bf00      	nop
 8006efc:	e008      	b.n	8006f10 <USBD_CDC_Setup+0x16c>
      break;
 8006efe:	bf00      	nop
    }
    break;
 8006f00:	e006      	b.n	8006f10 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 f9ab 	bl	8008260 <USBD_CtlError>
    ret = USBD_FAIL;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	75fb      	strb	r3, [r7, #23]
    break;
 8006f0e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop

08006f1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e049      	b.n	8006fd2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f46:	78fa      	ldrb	r2, [r7, #3]
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	3318      	adds	r3, #24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d029      	beq.n	8006fb0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	3318      	adds	r3, #24
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	78f9      	ldrb	r1, [r7, #3]
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	460b      	mov	r3, r1
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	1a5b      	subs	r3, r3, r1
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4403      	add	r3, r0
 8006f7c:	3344      	adds	r3, #68	; 0x44
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f84:	fb03 f301 	mul.w	r3, r3, r1
 8006f88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d110      	bne.n	8006fb0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3318      	adds	r3, #24
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fa2:	78f9      	ldrb	r1, [r7, #3]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 feca 	bl	8008d42 <USBD_LL_Transmit>
 8006fae:	e00f      	b.n	8006fd0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e015      	b.n	8007028 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fee0 	bl	8008dc6 <USBD_LL_GetRxDataSize>
 8007006:	4602      	mov	r2, r0
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007022:	4611      	mov	r1, r2
 8007024:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800703e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d015      	beq.n	8007076 <USBD_CDC_EP0_RxReady+0x46>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007050:	2bff      	cmp	r3, #255	; 0xff
 8007052:	d010      	beq.n	8007076 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007062:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800706a:	b292      	uxth	r2, r2
 800706c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	22ff      	movs	r2, #255	; 0xff
 8007072:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2243      	movs	r2, #67	; 0x43
 800708c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800708e:	4b03      	ldr	r3, [pc, #12]	; (800709c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20000094 	.word	0x20000094

080070a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2243      	movs	r2, #67	; 0x43
 80070ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80070ae:	4b03      	ldr	r3, [pc, #12]	; (80070bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000050 	.word	0x20000050

080070c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2243      	movs	r2, #67	; 0x43
 80070cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80070ce:	4b03      	ldr	r3, [pc, #12]	; (80070dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	200000d8 	.word	0x200000d8

080070e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	220a      	movs	r2, #10
 80070ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070ee:	4b03      	ldr	r3, [pc, #12]	; (80070fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	2000000c 	.word	0x2000000c

08007100 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007110:	2303      	movs	r3, #3
 8007112:	e004      	b.n	800711e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800716c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007192:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007194:	2301      	movs	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e01a      	b.n	80071dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d114      	bne.n	80071da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071ce:	2181      	movs	r1, #129	; 0x81
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fdb6 	bl	8008d42 <USBD_LL_Transmit>

    ret = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071da:	7bfb      	ldrb	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071fe:	2303      	movs	r3, #3
 8007200:	e016      	b.n	8007230 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7c1b      	ldrb	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007214:	2101      	movs	r1, #1
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fdb4 	bl	8008d84 <USBD_LL_PrepareReceive>
 800721c:	e007      	b.n	800722e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007224:	2340      	movs	r3, #64	; 0x40
 8007226:	2101      	movs	r1, #1
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fdab 	bl	8008d84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	e025      	b.n	800729c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	79fa      	ldrb	r2, [r7, #7]
 800728e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 fc21 	bl	8008ad8 <USBD_LL_Init>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]

  return ret;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e010      	b.n	80072de <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	f107 020e 	add.w	r2, r7, #14
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
 80072d4:	4602      	mov	r2, r0
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b082      	sub	sp, #8
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fc3e 	bl	8008b70 <USBD_LL_Start>
 80072f4:	4603      	mov	r3, r0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007320:	2303      	movs	r3, #3
 8007322:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4611      	mov	r1, r2
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
  }

  return USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 ff2c 	bl	80081ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d00e      	beq.n	80073d6 <USBD_LL_SetupStage+0x5a>
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d302      	bcc.n	80073c2 <USBD_LL_SetupStage+0x46>
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d014      	beq.n	80073ea <USBD_LL_SetupStage+0x6e>
 80073c0:	e01d      	b.n	80073fe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa18 	bl	8007800 <USBD_StdDevReq>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]
      break;
 80073d4:	e020      	b.n	8007418 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa7c 	bl	80078dc <USBD_StdItfReq>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
      break;
 80073e8:	e016      	b.n	8007418 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fab8 	bl	8007968 <USBD_StdEPReq>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]
      break;
 80073fc:	e00c      	b.n	8007418 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007408:	b2db      	uxtb	r3, r3
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 fc0f 	bl	8008c30 <USBD_LL_StallEP>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
      break;
 8007416:	bf00      	nop
  }

  return ret;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	460b      	mov	r3, r1
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d137      	bne.n	80074a6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800743c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007444:	2b03      	cmp	r3, #3
 8007446:	d14a      	bne.n	80074de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	429a      	cmp	r2, r3
 8007452:	d913      	bls.n	800747c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	1ad2      	subs	r2, r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	4293      	cmp	r3, r2
 800746c:	bf28      	it	cs
 800746e:	4613      	movcs	r3, r2
 8007470:	461a      	mov	r2, r3
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 ffad 	bl	80083d4 <USBD_CtlContinueRx>
 800747a:	e030      	b.n	80074de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800748e:	2b03      	cmp	r3, #3
 8007490:	d105      	bne.n	800749e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 ffa9 	bl	80083f6 <USBD_CtlSendStatus>
 80074a4:	e01b      	b.n	80074de <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d013      	beq.n	80074da <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d10e      	bne.n	80074da <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	7afa      	ldrb	r2, [r7, #11]
 80074c6:	4611      	mov	r1, r2
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	4798      	blx	r3
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	e002      	b.n	80074e0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074da:	2303      	movs	r3, #3
 80074dc:	e000      	b.n	80074e0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	460b      	mov	r3, r1
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d16a      	bne.n	80075d2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3314      	adds	r3, #20
 8007500:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007508:	2b02      	cmp	r3, #2
 800750a:	d155      	bne.n	80075b8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	429a      	cmp	r2, r3
 8007516:	d914      	bls.n	8007542 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	1ad2      	subs	r2, r2, r3
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	461a      	mov	r2, r3
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 ff22 	bl	8008378 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007534:	2300      	movs	r3, #0
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f001 fc22 	bl	8008d84 <USBD_LL_PrepareReceive>
 8007540:	e03a      	b.n	80075b8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	429a      	cmp	r2, r3
 800754c:	d11c      	bne.n	8007588 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007556:	429a      	cmp	r2, r3
 8007558:	d316      	bcc.n	8007588 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007564:	429a      	cmp	r2, r3
 8007566:	d20f      	bcs.n	8007588 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007568:	2200      	movs	r2, #0
 800756a:	2100      	movs	r1, #0
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 ff03 	bl	8008378 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800757a:	2300      	movs	r3, #0
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 fbff 	bl	8008d84 <USBD_LL_PrepareReceive>
 8007586:	e017      	b.n	80075b8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800759a:	2b03      	cmp	r3, #3
 800759c:	d105      	bne.n	80075aa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 fb3f 	bl	8008c30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 ff32 	bl	800841c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d123      	bne.n	800760a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff fe9b 	bl	80072fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075d0:	e01b      	b.n	800760a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d10e      	bne.n	8007606 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	7afa      	ldrb	r2, [r7, #11]
 80075f2:	4611      	mov	r1, r2
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	4798      	blx	r3
 80075f8:	4603      	mov	r3, r0
 80075fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80075fc:	7dfb      	ldrb	r3, [r7, #23]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	e002      	b.n	800760c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007606:	2303      	movs	r3, #3
 8007608:	e000      	b.n	800760c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007640:	2b00      	cmp	r3, #0
 8007642:	d009      	beq.n	8007658 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6852      	ldr	r2, [r2, #4]
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	4611      	mov	r1, r2
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007658:	2340      	movs	r3, #64	; 0x40
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 faa1 	bl	8008ba6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2240      	movs	r2, #64	; 0x40
 8007670:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007674:	2340      	movs	r3, #64	; 0x40
 8007676:	2200      	movs	r2, #0
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 fa93 	bl	8008ba6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2240      	movs	r2, #64	; 0x40
 800768a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007696:	b480      	push	{r7}
 8007698:	b083      	sub	sp, #12
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2204      	movs	r2, #4
 80076ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d105      	bne.n	80076fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800771a:	2b03      	cmp	r3, #3
 800771c:	d10b      	bne.n	8007736 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d009      	beq.n	80077b8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	6852      	ldr	r2, [r2, #4]
 80077b0:	b2d2      	uxtb	r2, r2
 80077b2:	4611      	mov	r1, r2
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	4798      	blx	r3
  }

  return USBD_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b087      	sub	sp, #28
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	3301      	adds	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077e0:	8a3b      	ldrh	r3, [r7, #16]
 80077e2:	021b      	lsls	r3, r3, #8
 80077e4:	b21a      	sxth	r2, r3
 80077e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	b21b      	sxth	r3, r3
 80077ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077f0:	89fb      	ldrh	r3, [r7, #14]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007816:	2b20      	cmp	r3, #32
 8007818:	d004      	beq.n	8007824 <USBD_StdDevReq+0x24>
 800781a:	2b40      	cmp	r3, #64	; 0x40
 800781c:	d002      	beq.n	8007824 <USBD_StdDevReq+0x24>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <USBD_StdDevReq+0x38>
 8007822:	e050      	b.n	80078c6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]
    break;
 8007836:	e04b      	b.n	80078d0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b09      	cmp	r3, #9
 800783e:	d83c      	bhi.n	80078ba <USBD_StdDevReq+0xba>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <USBD_StdDevReq+0x48>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	0800789d 	.word	0x0800789d
 800784c:	080078b1 	.word	0x080078b1
 8007850:	080078bb 	.word	0x080078bb
 8007854:	080078a7 	.word	0x080078a7
 8007858:	080078bb 	.word	0x080078bb
 800785c:	0800787b 	.word	0x0800787b
 8007860:	08007871 	.word	0x08007871
 8007864:	080078bb 	.word	0x080078bb
 8007868:	08007893 	.word	0x08007893
 800786c:	08007885 	.word	0x08007885
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f9ce 	bl	8007c14 <USBD_GetDescriptor>
      break;
 8007878:	e024      	b.n	80078c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fb33 	bl	8007ee8 <USBD_SetAddress>
      break;
 8007882:	e01f      	b.n	80078c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fb70 	bl	8007f6c <USBD_SetConfig>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
      break;
 8007890:	e018      	b.n	80078c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fc0d 	bl	80080b4 <USBD_GetConfig>
      break;
 800789a:	e013      	b.n	80078c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fc3c 	bl	800811c <USBD_GetStatus>
      break;
 80078a4:	e00e      	b.n	80078c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fc6a 	bl	8008182 <USBD_SetFeature>
      break;
 80078ae:	e009      	b.n	80078c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fc79 	bl	80081aa <USBD_ClrFeature>
      break;
 80078b8:	e004      	b.n	80078c4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fccf 	bl	8008260 <USBD_CtlError>
      break;
 80078c2:	bf00      	nop
    }
    break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fcc9 	bl	8008260 <USBD_CtlError>
    break;
 80078ce:	bf00      	nop
  }

  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	d003      	beq.n	80078fe <USBD_StdItfReq+0x22>
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d001      	beq.n	80078fe <USBD_StdItfReq+0x22>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d12a      	bne.n	8007954 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007904:	3b01      	subs	r3, #1
 8007906:	2b02      	cmp	r3, #2
 8007908:	d81d      	bhi.n	8007946 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	889b      	ldrh	r3, [r3, #4]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	d813      	bhi.n	800793c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	88db      	ldrh	r3, [r3, #6]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d110      	bne.n	8007950 <USBD_StdItfReq+0x74>
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10d      	bne.n	8007950 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fd5e 	bl	80083f6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800793a:	e009      	b.n	8007950 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fc8e 	bl	8008260 <USBD_CtlError>
      break;
 8007944:	e004      	b.n	8007950 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc89 	bl	8008260 <USBD_CtlError>
      break;
 800794e:	e000      	b.n	8007952 <USBD_StdItfReq+0x76>
      break;
 8007950:	bf00      	nop
    }
    break;
 8007952:	e004      	b.n	800795e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007954:	6839      	ldr	r1, [r7, #0]
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fc82 	bl	8008260 <USBD_CtlError>
    break;
 800795c:	bf00      	nop
  }

  return ret;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	889b      	ldrh	r3, [r3, #4]
 800797a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007984:	2b20      	cmp	r3, #32
 8007986:	d004      	beq.n	8007992 <USBD_StdEPReq+0x2a>
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	d002      	beq.n	8007992 <USBD_StdEPReq+0x2a>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <USBD_StdEPReq+0x3e>
 8007990:	e135      	b.n	8007bfe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
    break;
 80079a4:	e130      	b.n	8007c08 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d03e      	beq.n	8007a2c <USBD_StdEPReq+0xc4>
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d002      	beq.n	80079b8 <USBD_StdEPReq+0x50>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d077      	beq.n	8007aa6 <USBD_StdEPReq+0x13e>
 80079b6:	e11c      	b.n	8007bf2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d002      	beq.n	80079c8 <USBD_StdEPReq+0x60>
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d015      	beq.n	80079f2 <USBD_StdEPReq+0x8a>
 80079c6:	e02b      	b.n	8007a20 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <USBD_StdEPReq+0x80>
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b80      	cmp	r3, #128	; 0x80
 80079d2:	d009      	beq.n	80079e8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f929 	bl	8008c30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079de:	2180      	movs	r1, #128	; 0x80
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f001 f925 	bl	8008c30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079e6:	e020      	b.n	8007a2a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fc38 	bl	8008260 <USBD_CtlError>
        break;
 80079f0:	e01b      	b.n	8007a2a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10e      	bne.n	8007a18 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <USBD_StdEPReq+0xb0>
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b80      	cmp	r3, #128	; 0x80
 8007a04:	d008      	beq.n	8007a18 <USBD_StdEPReq+0xb0>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	88db      	ldrh	r3, [r3, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d104      	bne.n	8007a18 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 f90c 	bl	8008c30 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fcec 	bl	80083f6 <USBD_CtlSendStatus>

        break;
 8007a1e:	e004      	b.n	8007a2a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fc1c 	bl	8008260 <USBD_CtlError>
        break;
 8007a28:	bf00      	nop
      }
      break;
 8007a2a:	e0e7      	b.n	8007bfc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d002      	beq.n	8007a3c <USBD_StdEPReq+0xd4>
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d015      	beq.n	8007a66 <USBD_StdEPReq+0xfe>
 8007a3a:	e02d      	b.n	8007a98 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00c      	beq.n	8007a5c <USBD_StdEPReq+0xf4>
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b80      	cmp	r3, #128	; 0x80
 8007a46:	d009      	beq.n	8007a5c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f8ef 	bl	8008c30 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a52:	2180      	movs	r1, #128	; 0x80
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f8eb 	bl	8008c30 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a5a:	e023      	b.n	8007aa4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fbfe 	bl	8008260 <USBD_CtlError>
        break;
 8007a64:	e01e      	b.n	8007aa4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	885b      	ldrh	r3, [r3, #2]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d119      	bne.n	8007aa2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f8f6 	bl	8008c6e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fcb7 	bl	80083f6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
        }
        break;
 8007a96:	e004      	b.n	8007aa2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fbe0 	bl	8008260 <USBD_CtlError>
        break;
 8007aa0:	e000      	b.n	8007aa4 <USBD_StdEPReq+0x13c>
        break;
 8007aa2:	bf00      	nop
      }
      break;
 8007aa4:	e0aa      	b.n	8007bfc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d002      	beq.n	8007ab6 <USBD_StdEPReq+0x14e>
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d032      	beq.n	8007b1a <USBD_StdEPReq+0x1b2>
 8007ab4:	e097      	b.n	8007be6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <USBD_StdEPReq+0x164>
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
 8007abe:	2b80      	cmp	r3, #128	; 0x80
 8007ac0:	d004      	beq.n	8007acc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fbcb 	bl	8008260 <USBD_CtlError>
          break;
 8007aca:	e091      	b.n	8007bf0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da0b      	bge.n	8007aec <USBD_StdEPReq+0x184>
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	3310      	adds	r3, #16
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	3304      	adds	r3, #4
 8007aea:	e00b      	b.n	8007b04 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	3304      	adds	r3, #4
 8007b04:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fc15 	bl	8008342 <USBD_CtlSendData>
        break;
 8007b18:	e06a      	b.n	8007bf0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	da11      	bge.n	8007b46 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	f003 020f 	and.w	r2, r3, #15
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	440b      	add	r3, r1
 8007b34:	3324      	adds	r3, #36	; 0x24
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d117      	bne.n	8007b6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb8e 	bl	8008260 <USBD_CtlError>
            break;
 8007b44:	e054      	b.n	8007bf0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb7b 	bl	8008260 <USBD_CtlError>
            break;
 8007b6a:	e041      	b.n	8007bf0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da0b      	bge.n	8007b8c <USBD_StdEPReq+0x224>
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	3310      	adds	r3, #16
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	3304      	adds	r3, #4
 8007b8a:	e00b      	b.n	8007ba4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b92:	4613      	mov	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <USBD_StdEPReq+0x24a>
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b80      	cmp	r3, #128	; 0x80
 8007bb0:	d103      	bne.n	8007bba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	e00e      	b.n	8007bd8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 f874 	bl	8008cac <USBD_LL_IsStallEP>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e002      	b.n	8007bd8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fbaf 	bl	8008342 <USBD_CtlSendData>
          break;
 8007be4:	e004      	b.n	8007bf0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fb39 	bl	8008260 <USBD_CtlError>
        break;
 8007bee:	bf00      	nop
      }
      break;
 8007bf0:	e004      	b.n	8007bfc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb33 	bl	8008260 <USBD_CtlError>
      break;
 8007bfa:	bf00      	nop
    }
    break;
 8007bfc:	e004      	b.n	8007c08 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fb2d 	bl	8008260 <USBD_CtlError>
    break;
 8007c06:	bf00      	nop
  }

  return ret;
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	885b      	ldrh	r3, [r3, #2]
 8007c2e:	0a1b      	lsrs	r3, r3, #8
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	2b06      	cmp	r3, #6
 8007c36:	f200 8128 	bhi.w	8007e8a <USBD_GetDescriptor+0x276>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <USBD_GetDescriptor+0x2c>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	08007c75 	.word	0x08007c75
 8007c48:	08007cb5 	.word	0x08007cb5
 8007c4c:	08007e8b 	.word	0x08007e8b
 8007c50:	08007e8b 	.word	0x08007e8b
 8007c54:	08007e2b 	.word	0x08007e2b
 8007c58:	08007e57 	.word	0x08007e57
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
    break;
 8007c72:	e112      	b.n	8007e9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	7c1b      	ldrb	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10d      	bne.n	8007c98 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	f107 0208 	add.w	r2, r7, #8
 8007c88:	4610      	mov	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	2202      	movs	r2, #2
 8007c94:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c96:	e100      	b.n	8007e9a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	f107 0208 	add.w	r2, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	2202      	movs	r2, #2
 8007cb0:	701a      	strb	r2, [r3, #0]
    break;
 8007cb2:	e0f2      	b.n	8007e9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	885b      	ldrh	r3, [r3, #2]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	f200 80ac 	bhi.w	8007e18 <USBD_GetDescriptor+0x204>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <USBD_GetDescriptor+0xb4>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007ce1 	.word	0x08007ce1
 8007ccc:	08007d15 	.word	0x08007d15
 8007cd0:	08007d49 	.word	0x08007d49
 8007cd4:	08007d7d 	.word	0x08007d7d
 8007cd8:	08007db1 	.word	0x08007db1
 8007cdc:	08007de5 	.word	0x08007de5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c12      	ldrb	r2, [r2, #16]
 8007cf8:	f107 0108 	add.w	r1, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d02:	e091      	b.n	8007e28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 faaa 	bl	8008260 <USBD_CtlError>
        err++;
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	72fb      	strb	r3, [r7, #11]
      break;
 8007d12:	e089      	b.n	8007e28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f107 0108 	add.w	r1, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d36:	e077      	b.n	8007e28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa90 	bl	8008260 <USBD_CtlError>
        err++;
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	3301      	adds	r3, #1
 8007d44:	72fb      	strb	r3, [r7, #11]
      break;
 8007d46:	e06f      	b.n	8007e28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	7c12      	ldrb	r2, [r2, #16]
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d6a:	e05d      	b.n	8007e28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa76 	bl	8008260 <USBD_CtlError>
        err++;
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	3301      	adds	r3, #1
 8007d78:	72fb      	strb	r3, [r7, #11]
      break;
 8007d7a:	e055      	b.n	8007e28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
 8007d94:	f107 0108 	add.w	r1, r7, #8
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d9e:	e043      	b.n	8007e28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa5c 	bl	8008260 <USBD_CtlError>
        err++;
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	3301      	adds	r3, #1
 8007dac:	72fb      	strb	r3, [r7, #11]
      break;
 8007dae:	e03b      	b.n	8007e28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	695b      	ldr	r3, [r3, #20]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7c12      	ldrb	r2, [r2, #16]
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dd2:	e029      	b.n	8007e28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa42 	bl	8008260 <USBD_CtlError>
        err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
      break;
 8007de2:	e021      	b.n	8007e28 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e06:	e00f      	b.n	8007e28 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa28 	bl	8008260 <USBD_CtlError>
        err++;
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	3301      	adds	r3, #1
 8007e14:	72fb      	strb	r3, [r7, #11]
      break;
 8007e16:	e007      	b.n	8007e28 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa20 	bl	8008260 <USBD_CtlError>
      err++;
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	3301      	adds	r3, #1
 8007e24:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e26:	bf00      	nop
    }
    break;
 8007e28:	e037      	b.n	8007e9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7c1b      	ldrb	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d109      	bne.n	8007e46 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	f107 0208 	add.w	r2, r7, #8
 8007e3e:	4610      	mov	r0, r2
 8007e40:	4798      	blx	r3
 8007e42:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e44:	e029      	b.n	8007e9a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fa09 	bl	8008260 <USBD_CtlError>
      err++;
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	3301      	adds	r3, #1
 8007e52:	72fb      	strb	r3, [r7, #11]
    break;
 8007e54:	e021      	b.n	8007e9a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	7c1b      	ldrb	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10d      	bne.n	8007e7a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	f107 0208 	add.w	r2, r7, #8
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4798      	blx	r3
 8007e6e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	2207      	movs	r2, #7
 8007e76:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e78:	e00f      	b.n	8007e9a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f9ef 	bl	8008260 <USBD_CtlError>
      err++;
 8007e82:	7afb      	ldrb	r3, [r7, #11]
 8007e84:	3301      	adds	r3, #1
 8007e86:	72fb      	strb	r3, [r7, #11]
    break;
 8007e88:	e007      	b.n	8007e9a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f9e7 	bl	8008260 <USBD_CtlError>
    err++;
 8007e92:	7afb      	ldrb	r3, [r7, #11]
 8007e94:	3301      	adds	r3, #1
 8007e96:	72fb      	strb	r3, [r7, #11]
    break;
 8007e98:	bf00      	nop
  }

  if (err != 0U)
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d11e      	bne.n	8007ede <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	88db      	ldrh	r3, [r3, #6]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d016      	beq.n	8007ed6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007ea8:	893b      	ldrh	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00e      	beq.n	8007ecc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	88da      	ldrh	r2, [r3, #6]
 8007eb2:	893b      	ldrh	r3, [r7, #8]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bf28      	it	cs
 8007eb8:	4613      	movcs	r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ebe:	893b      	ldrh	r3, [r7, #8]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fa3c 	bl	8008342 <USBD_CtlSendData>
 8007eca:	e009      	b.n	8007ee0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f9c6 	bl	8008260 <USBD_CtlError>
 8007ed4:	e004      	b.n	8007ee0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fa8d 	bl	80083f6 <USBD_CtlSendStatus>
 8007edc:	e000      	b.n	8007ee0 <USBD_GetDescriptor+0x2cc>
    return;
 8007ede:	bf00      	nop
    }
  }
}
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop

08007ee8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	889b      	ldrh	r3, [r3, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d130      	bne.n	8007f5c <USBD_SetAddress+0x74>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d12c      	bne.n	8007f5c <USBD_SetAddress+0x74>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	885b      	ldrh	r3, [r3, #2]
 8007f06:	2b7f      	cmp	r3, #127	; 0x7f
 8007f08:	d828      	bhi.n	8007f5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	885b      	ldrh	r3, [r3, #2]
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d104      	bne.n	8007f2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f99c 	bl	8008260 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f28:	e01c      	b.n	8007f64 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	7bfa      	ldrb	r2, [r7, #15]
 8007f2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fee4 	bl	8008d04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa5a 	bl	80083f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f50:	e008      	b.n	8007f64 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5a:	e003      	b.n	8007f64 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f97e 	bl	8008260 <USBD_CtlError>
  }
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	885b      	ldrh	r3, [r3, #2]
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	4b4b      	ldr	r3, [pc, #300]	; (80080b0 <USBD_SetConfig+0x144>)
 8007f82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f84:	4b4a      	ldr	r3, [pc, #296]	; (80080b0 <USBD_SetConfig+0x144>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d905      	bls.n	8007f98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f966 	bl	8008260 <USBD_CtlError>
    return USBD_FAIL;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e087      	b.n	80080a8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d002      	beq.n	8007fa8 <USBD_SetConfig+0x3c>
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d025      	beq.n	8007ff2 <USBD_SetConfig+0x86>
 8007fa6:	e071      	b.n	800808c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007fa8:	4b41      	ldr	r3, [pc, #260]	; (80080b0 <USBD_SetConfig+0x144>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01c      	beq.n	8007fea <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007fb0:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <USBD_SetConfig+0x144>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fba:	4b3d      	ldr	r3, [pc, #244]	; (80080b0 <USBD_SetConfig+0x144>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff f9a7 	bl	8007314 <USBD_SetClassConfig>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f944 	bl	8008260 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007fd8:	e065      	b.n	80080a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa0b 	bl	80083f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2203      	movs	r2, #3
 8007fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fe8:	e05d      	b.n	80080a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa03 	bl	80083f6 <USBD_CtlSendStatus>
    break;
 8007ff0:	e059      	b.n	80080a6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007ff2:	4b2f      	ldr	r3, [pc, #188]	; (80080b0 <USBD_SetConfig+0x144>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d112      	bne.n	8008020 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008002:	4b2b      	ldr	r3, [pc, #172]	; (80080b0 <USBD_SetConfig+0x144>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800800c:	4b28      	ldr	r3, [pc, #160]	; (80080b0 <USBD_SetConfig+0x144>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff f99a 	bl	800734c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f9ec 	bl	80083f6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800801e:	e042      	b.n	80080a6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008020:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <USBD_SetConfig+0x144>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d02a      	beq.n	8008084 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff f988 	bl	800734c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800803c:	4b1c      	ldr	r3, [pc, #112]	; (80080b0 <USBD_SetConfig+0x144>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008046:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <USBD_SetConfig+0x144>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff f961 	bl	8007314 <USBD_SetClassConfig>
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00f      	beq.n	800807c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f8fe 	bl	8008260 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff f96d 	bl	800734c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800807a:	e014      	b.n	80080a6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f9ba 	bl	80083f6 <USBD_CtlSendStatus>
    break;
 8008082:	e010      	b.n	80080a6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f9b6 	bl	80083f6 <USBD_CtlSendStatus>
    break;
 800808a:	e00c      	b.n	80080a6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f8e6 	bl	8008260 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008094:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <USBD_SetConfig+0x144>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff f956 	bl	800734c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80080a0:	2303      	movs	r3, #3
 80080a2:	73fb      	strb	r3, [r7, #15]
    break;
 80080a4:	bf00      	nop
  }

  return ret;
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000204 	.word	0x20000204

080080b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	88db      	ldrh	r3, [r3, #6]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d004      	beq.n	80080d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f8c9 	bl	8008260 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80080ce:	e021      	b.n	8008114 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	db17      	blt.n	800810a <USBD_GetConfig+0x56>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	dd02      	ble.n	80080e4 <USBD_GetConfig+0x30>
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d00b      	beq.n	80080fa <USBD_GetConfig+0x46>
 80080e2:	e012      	b.n	800810a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3308      	adds	r3, #8
 80080ee:	2201      	movs	r2, #1
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f925 	bl	8008342 <USBD_CtlSendData>
      break;
 80080f8:	e00c      	b.n	8008114 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3304      	adds	r3, #4
 80080fe:	2201      	movs	r2, #1
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f91d 	bl	8008342 <USBD_CtlSendData>
      break;
 8008108:	e004      	b.n	8008114 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f8a7 	bl	8008260 <USBD_CtlError>
      break;
 8008112:	bf00      	nop
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800812c:	3b01      	subs	r3, #1
 800812e:	2b02      	cmp	r3, #2
 8008130:	d81e      	bhi.n	8008170 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	88db      	ldrh	r3, [r3, #6]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d004      	beq.n	8008144 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f88f 	bl	8008260 <USBD_CtlError>
      break;
 8008142:	e01a      	b.n	800817a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d005      	beq.n	8008160 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f043 0202 	orr.w	r2, r3, #2
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	330c      	adds	r3, #12
 8008164:	2202      	movs	r2, #2
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f8ea 	bl	8008342 <USBD_CtlSendData>
    break;
 800816e:	e004      	b.n	800817a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f874 	bl	8008260 <USBD_CtlError>
    break;
 8008178:	bf00      	nop
  }
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d106      	bne.n	80081a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f92a 	bl	80083f6 <USBD_CtlSendStatus>
  }
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b082      	sub	sp, #8
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ba:	3b01      	subs	r3, #1
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d80b      	bhi.n	80081d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	885b      	ldrh	r3, [r3, #2]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d10c      	bne.n	80081e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f910 	bl	80083f6 <USBD_CtlSendStatus>
      }
      break;
 80081d6:	e004      	b.n	80081e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f840 	bl	8008260 <USBD_CtlError>
      break;
 80081e0:	e000      	b.n	80081e4 <USBD_ClrFeature+0x3a>
      break;
 80081e2:	bf00      	nop
  }
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff fad3 	bl	80077c2 <SWAPBYTE>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fac6 	bl	80077c2 <SWAPBYTE>
 8008236:	4603      	mov	r3, r0
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	3301      	adds	r3, #1
 8008248:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fab9 	bl	80077c2 <SWAPBYTE>
 8008250:	4603      	mov	r3, r0
 8008252:	461a      	mov	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	80da      	strh	r2, [r3, #6]
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800826a:	2180      	movs	r1, #128	; 0x80
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fcdf 	bl	8008c30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008272:	2100      	movs	r1, #0
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fcdb 	bl	8008c30 <USBD_LL_StallEP>
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d036      	beq.n	8008306 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800829c:	6938      	ldr	r0, [r7, #16]
 800829e:	f000 f836 	bl	800830e <USBD_GetLen>
 80082a2:	4603      	mov	r3, r0
 80082a4:	3301      	adds	r3, #1
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	4413      	add	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	7812      	ldrb	r2, [r2, #0]
 80082ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	3301      	adds	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4413      	add	r3, r2
 80082c8:	2203      	movs	r2, #3
 80082ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	3301      	adds	r3, #1
 80082d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082d2:	e013      	b.n	80082fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4413      	add	r3, r2
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	7812      	ldrb	r2, [r2, #0]
 80082de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	3301      	adds	r3, #1
 80082e4:	613b      	str	r3, [r7, #16]
    idx++;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	3301      	adds	r3, #1
 80082ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	2200      	movs	r2, #0
 80082f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	3301      	adds	r3, #1
 80082fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e7      	bne.n	80082d4 <USBD_GetString+0x52>
 8008304:	e000      	b.n	8008308 <USBD_GetString+0x86>
    return;
 8008306:	bf00      	nop
  }
}
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800831e:	e005      	b.n	800832c <USBD_GetLen+0x1e>
  {
    len++;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
 8008322:	3301      	adds	r3, #1
 8008324:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3301      	adds	r3, #1
 800832a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1f5      	bne.n	8008320 <USBD_GetLen+0x12>
  }

  return len;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	60f8      	str	r0, [r7, #12]
 800834a:	60b9      	str	r1, [r7, #8]
 800834c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2202      	movs	r2, #2
 8008352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	2100      	movs	r1, #0
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 fcea 	bl	8008d42 <USBD_LL_Transmit>

  return USBD_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	2100      	movs	r1, #0
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 fcd9 	bl	8008d42 <USBD_LL_Transmit>

  return USBD_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2203      	movs	r2, #3
 80083aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	2100      	movs	r1, #0
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f000 fcdd 	bl	8008d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	2100      	movs	r1, #0
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f000 fccc 	bl	8008d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2204      	movs	r2, #4
 8008402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008406:	2300      	movs	r3, #0
 8008408:	2200      	movs	r2, #0
 800840a:	2100      	movs	r1, #0
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fc98 	bl	8008d42 <USBD_LL_Transmit>

  return USBD_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2205      	movs	r2, #5
 8008428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800842c:	2300      	movs	r3, #0
 800842e:	2200      	movs	r2, #0
 8008430:	2100      	movs	r1, #0
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fca6 	bl	8008d84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008448:	2200      	movs	r2, #0
 800844a:	4912      	ldr	r1, [pc, #72]	; (8008494 <MX_USB_DEVICE_Init+0x50>)
 800844c:	4812      	ldr	r0, [pc, #72]	; (8008498 <MX_USB_DEVICE_Init+0x54>)
 800844e:	f7fe fef3 	bl	8007238 <USBD_Init>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008458:	f7f8 fa7e 	bl	8000958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800845c:	490f      	ldr	r1, [pc, #60]	; (800849c <MX_USB_DEVICE_Init+0x58>)
 800845e:	480e      	ldr	r0, [pc, #56]	; (8008498 <MX_USB_DEVICE_Init+0x54>)
 8008460:	f7fe ff20 	bl	80072a4 <USBD_RegisterClass>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800846a:	f7f8 fa75 	bl	8000958 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800846e:	490c      	ldr	r1, [pc, #48]	; (80084a0 <MX_USB_DEVICE_Init+0x5c>)
 8008470:	4809      	ldr	r0, [pc, #36]	; (8008498 <MX_USB_DEVICE_Init+0x54>)
 8008472:	f7fe fe45 	bl	8007100 <USBD_CDC_RegisterInterface>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800847c:	f7f8 fa6c 	bl	8000958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008480:	4805      	ldr	r0, [pc, #20]	; (8008498 <MX_USB_DEVICE_Init+0x54>)
 8008482:	f7fe ff30 	bl	80072e6 <USBD_Start>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800848c:	f7f8 fa64 	bl	8000958 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008490:	bf00      	nop
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20000130 	.word	0x20000130
 8008498:	200003bc 	.word	0x200003bc
 800849c:	20000018 	.word	0x20000018
 80084a0:	2000011c 	.word	0x2000011c

080084a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80084a8:	2200      	movs	r2, #0
 80084aa:	4905      	ldr	r1, [pc, #20]	; (80084c0 <CDC_Init_FS+0x1c>)
 80084ac:	4805      	ldr	r0, [pc, #20]	; (80084c4 <CDC_Init_FS+0x20>)
 80084ae:	f7fe fe3c 	bl	800712a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80084b2:	4905      	ldr	r1, [pc, #20]	; (80084c8 <CDC_Init_FS+0x24>)
 80084b4:	4803      	ldr	r0, [pc, #12]	; (80084c4 <CDC_Init_FS+0x20>)
 80084b6:	f7fe fe51 	bl	800715c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084bc:	4618      	mov	r0, r3
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000e8c 	.word	0x20000e8c
 80084c4:	200003bc 	.word	0x200003bc
 80084c8:	2000068c 	.word	0x2000068c

080084cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
 80084e8:	4613      	mov	r3, r2
 80084ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	2b23      	cmp	r3, #35	; 0x23
 80084f0:	d84a      	bhi.n	8008588 <CDC_Control_FS+0xac>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <CDC_Control_FS+0x1c>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008589 	.word	0x08008589
 80084fc:	08008589 	.word	0x08008589
 8008500:	08008589 	.word	0x08008589
 8008504:	08008589 	.word	0x08008589
 8008508:	08008589 	.word	0x08008589
 800850c:	08008589 	.word	0x08008589
 8008510:	08008589 	.word	0x08008589
 8008514:	08008589 	.word	0x08008589
 8008518:	08008589 	.word	0x08008589
 800851c:	08008589 	.word	0x08008589
 8008520:	08008589 	.word	0x08008589
 8008524:	08008589 	.word	0x08008589
 8008528:	08008589 	.word	0x08008589
 800852c:	08008589 	.word	0x08008589
 8008530:	08008589 	.word	0x08008589
 8008534:	08008589 	.word	0x08008589
 8008538:	08008589 	.word	0x08008589
 800853c:	08008589 	.word	0x08008589
 8008540:	08008589 	.word	0x08008589
 8008544:	08008589 	.word	0x08008589
 8008548:	08008589 	.word	0x08008589
 800854c:	08008589 	.word	0x08008589
 8008550:	08008589 	.word	0x08008589
 8008554:	08008589 	.word	0x08008589
 8008558:	08008589 	.word	0x08008589
 800855c:	08008589 	.word	0x08008589
 8008560:	08008589 	.word	0x08008589
 8008564:	08008589 	.word	0x08008589
 8008568:	08008589 	.word	0x08008589
 800856c:	08008589 	.word	0x08008589
 8008570:	08008589 	.word	0x08008589
 8008574:	08008589 	.word	0x08008589
 8008578:	08008589 	.word	0x08008589
 800857c:	08008589 	.word	0x08008589
 8008580:	08008589 	.word	0x08008589
 8008584:	08008589 	.word	0x08008589
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008588:	bf00      	nop
  }

  return (USBD_OK);
 800858a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	4805      	ldr	r0, [pc, #20]	; (80085bc <CDC_Receive_FS+0x24>)
 80085a6:	f7fe fdd9 	bl	800715c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085aa:	4804      	ldr	r0, [pc, #16]	; (80085bc <CDC_Receive_FS+0x24>)
 80085ac:	f7fe fe1a 	bl	80071e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200003bc 	.word	0x200003bc

080085c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085d0:	4b0d      	ldr	r3, [pc, #52]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e00b      	b.n	80085fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4806      	ldr	r0, [pc, #24]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085ee:	f7fe fd9c 	bl	800712a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085f2:	4805      	ldr	r0, [pc, #20]	; (8008608 <CDC_Transmit_FS+0x48>)
 80085f4:	f7fe fdc6 	bl	8007184 <USBD_CDC_TransmitPacket>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	200003bc 	.word	0x200003bc

0800860c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800861e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	6039      	str	r1, [r7, #0]
 800863a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2212      	movs	r2, #18
 8008640:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008642:	4b03      	ldr	r3, [pc, #12]	; (8008650 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	2000014c 	.word	0x2000014c

08008654 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2204      	movs	r2, #4
 8008664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008666:	4b03      	ldr	r3, [pc, #12]	; (8008674 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008668:	4618      	mov	r0, r3
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	20000160 	.word	0x20000160

08008678 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	6039      	str	r1, [r7, #0]
 8008682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	4907      	ldr	r1, [pc, #28]	; (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
 800868e:	4808      	ldr	r0, [pc, #32]	; (80086b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008690:	f7ff fdf7 	bl	8008282 <USBD_GetString>
 8008694:	e004      	b.n	80086a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	4904      	ldr	r1, [pc, #16]	; (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
 800869a:	4805      	ldr	r0, [pc, #20]	; (80086b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800869c:	f7ff fdf1 	bl	8008282 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	2000168c 	.word	0x2000168c
 80086b0:	080097c0 	.word	0x080097c0

080086b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	4904      	ldr	r1, [pc, #16]	; (80086d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086c4:	4804      	ldr	r0, [pc, #16]	; (80086d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086c6:	f7ff fddc 	bl	8008282 <USBD_GetString>
  return USBD_StrDesc;
 80086ca:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000168c 	.word	0x2000168c
 80086d8:	080097d8 	.word	0x080097d8

080086dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	6039      	str	r1, [r7, #0]
 80086e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	221a      	movs	r2, #26
 80086ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086ee:	f000 f843 	bl	8008778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086f2:	4b02      	ldr	r3, [pc, #8]	; (80086fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20000164 	.word	0x20000164

08008700 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d105      	bne.n	800871e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	4907      	ldr	r1, [pc, #28]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008716:	4808      	ldr	r0, [pc, #32]	; (8008738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008718:	f7ff fdb3 	bl	8008282 <USBD_GetString>
 800871c:	e004      	b.n	8008728 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	4904      	ldr	r1, [pc, #16]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008722:	4805      	ldr	r0, [pc, #20]	; (8008738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008724:	f7ff fdad 	bl	8008282 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008728:	4b02      	ldr	r3, [pc, #8]	; (8008734 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800872a:	4618      	mov	r0, r3
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	2000168c 	.word	0x2000168c
 8008738:	080097ec 	.word	0x080097ec

0800873c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	6039      	str	r1, [r7, #0]
 8008746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d105      	bne.n	800875a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4907      	ldr	r1, [pc, #28]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008752:	4808      	ldr	r0, [pc, #32]	; (8008774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008754:	f7ff fd95 	bl	8008282 <USBD_GetString>
 8008758:	e004      	b.n	8008764 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4904      	ldr	r1, [pc, #16]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800875e:	4805      	ldr	r0, [pc, #20]	; (8008774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008760:	f7ff fd8f 	bl	8008282 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008764:	4b02      	ldr	r3, [pc, #8]	; (8008770 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	2000168c 	.word	0x2000168c
 8008774:	080097f8 	.word	0x080097f8

08008778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800877e:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <Get_SerialNum+0x44>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008784:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <Get_SerialNum+0x48>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800878a:	4b0e      	ldr	r3, [pc, #56]	; (80087c4 <Get_SerialNum+0x4c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800879e:	2208      	movs	r2, #8
 80087a0:	4909      	ldr	r1, [pc, #36]	; (80087c8 <Get_SerialNum+0x50>)
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f814 	bl	80087d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087a8:	2204      	movs	r2, #4
 80087aa:	4908      	ldr	r1, [pc, #32]	; (80087cc <Get_SerialNum+0x54>)
 80087ac:	68b8      	ldr	r0, [r7, #8]
 80087ae:	f000 f80f 	bl	80087d0 <IntToUnicode>
  }
}
 80087b2:	bf00      	nop
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	1fff7a10 	.word	0x1fff7a10
 80087c0:	1fff7a14 	.word	0x1fff7a14
 80087c4:	1fff7a18 	.word	0x1fff7a18
 80087c8:	20000166 	.word	0x20000166
 80087cc:	20000176 	.word	0x20000176

080087d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
 80087e6:	e027      	b.n	8008838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	0f1b      	lsrs	r3, r3, #28
 80087ec:	2b09      	cmp	r3, #9
 80087ee:	d80b      	bhi.n	8008808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	0f1b      	lsrs	r3, r3, #28
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	4619      	mov	r1, r3
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	440b      	add	r3, r1
 8008800:	3230      	adds	r2, #48	; 0x30
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e00a      	b.n	800881e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0f1b      	lsrs	r3, r3, #28
 800880c:	b2da      	uxtb	r2, r3
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	005b      	lsls	r3, r3, #1
 8008812:	4619      	mov	r1, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	440b      	add	r3, r1
 8008818:	3237      	adds	r2, #55	; 0x37
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	011b      	lsls	r3, r3, #4
 8008822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	3301      	adds	r3, #1
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	3301      	adds	r3, #1
 8008836:	75fb      	strb	r3, [r7, #23]
 8008838:	7dfa      	ldrb	r2, [r7, #23]
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	429a      	cmp	r2, r3
 800883e:	d3d3      	bcc.n	80087e8 <IntToUnicode+0x18>
  }
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008854:	f107 0314 	add.w	r3, r7, #20
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	60da      	str	r2, [r3, #12]
 8008862:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800886c:	d13a      	bne.n	80088e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	4b1e      	ldr	r3, [pc, #120]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008878:	f043 0301 	orr.w	r3, r3, #1
 800887c:	6313      	str	r3, [r2, #48]	; 0x30
 800887e:	4b1b      	ldr	r3, [pc, #108]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800888a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800888e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008890:	2302      	movs	r3, #2
 8008892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008894:	2300      	movs	r3, #0
 8008896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008898:	2303      	movs	r3, #3
 800889a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800889c:	230a      	movs	r3, #10
 800889e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	4619      	mov	r1, r3
 80088a6:	4812      	ldr	r0, [pc, #72]	; (80088f0 <HAL_PCD_MspInit+0xa4>)
 80088a8:	f7f8 feaa 	bl	8001600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	4a0e      	ldr	r2, [pc, #56]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088b6:	6353      	str	r3, [r2, #52]	; 0x34
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c0:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088c6:	6453      	str	r3, [r2, #68]	; 0x44
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <HAL_PCD_MspInit+0xa0>)
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	2043      	movs	r0, #67	; 0x43
 80088da:	f7f8 fe5a 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088de:	2043      	movs	r0, #67	; 0x43
 80088e0:	f7f8 fe73 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088e4:	bf00      	nop
 80088e6:	3728      	adds	r7, #40	; 0x28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	40023800 	.word	0x40023800
 80088f0:	40020000 	.word	0x40020000

080088f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008908:	4619      	mov	r1, r3
 800890a:	4610      	mov	r0, r2
 800890c:	f7fe fd36 	bl	800737c <USBD_LL_SetupStage>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	4613      	mov	r3, r2
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	1a9b      	subs	r3, r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	440b      	add	r3, r1
 8008938:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	4619      	mov	r1, r3
 8008942:	f7fe fd6e 	bl	8007422 <USBD_LL_DataOutStage>
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	1a9b      	subs	r3, r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	440b      	add	r3, r1
 800896e:	3348      	adds	r3, #72	; 0x48
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	78fb      	ldrb	r3, [r7, #3]
 8008974:	4619      	mov	r1, r3
 8008976:	f7fe fdb7 	bl	80074e8 <USBD_LL_DataInStage>
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b082      	sub	sp, #8
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe febb 	bl	800770c <USBD_LL_SOF>
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089a6:	2301      	movs	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]
 80089b6:	e008      	b.n	80089ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d102      	bne.n	80089c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
 80089c4:	e001      	b.n	80089ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80089c6:	f7f7 ffc7 	bl	8000958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089d0:	7bfa      	ldrb	r2, [r7, #15]
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe fe5e 	bl	8007696 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe fe17 	bl	8007614 <USBD_LL_Reset>
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fe59 	bl	80076b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	6812      	ldr	r2, [r2, #0]
 8008a12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a16:	f043 0301 	orr.w	r3, r3, #1
 8008a1a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a24:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <HAL_PCD_SuspendCallback+0x48>)
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	4a03      	ldr	r2, [pc, #12]	; (8008a38 <HAL_PCD_SuspendCallback+0x48>)
 8008a2a:	f043 0306 	orr.w	r3, r3, #6
 8008a2e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	e000ed00 	.word	0xe000ed00

08008a3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fe48 	bl	80076e0 <USBD_LL_Resume>
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fe73 	bl	800775a <USBD_LL_IsoOUTIncomplete>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fe54 	bl	8007740 <USBD_LL_IsoINIncomplete>
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fe60 	bl	8007774 <USBD_LL_DevConnected>
}
 8008ab4:	bf00      	nop
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fe5d 	bl	800778a <USBD_LL_DevDisconnected>
}
 8008ad0:	bf00      	nop
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d13c      	bne.n	8008b62 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ae8:	4a20      	ldr	r2, [pc, #128]	; (8008b6c <USBD_LL_Init+0x94>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a1e      	ldr	r2, [pc, #120]	; (8008b6c <USBD_LL_Init+0x94>)
 8008af4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008af8:	4b1c      	ldr	r3, [pc, #112]	; (8008b6c <USBD_LL_Init+0x94>)
 8008afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008afe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b00:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b02:	2204      	movs	r2, #4
 8008b04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b06:	4b19      	ldr	r3, [pc, #100]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b08:	2202      	movs	r2, #2
 8008b0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b0c:	4b17      	ldr	r3, [pc, #92]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b12:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b14:	2202      	movs	r2, #2
 8008b16:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b18:	4b14      	ldr	r3, [pc, #80]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b36:	480d      	ldr	r0, [pc, #52]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b38:	f7f9 feb7 	bl	80028aa <HAL_PCD_Init>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b42:	f7f7 ff09 	bl	8000958 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b46:	2180      	movs	r1, #128	; 0x80
 8008b48:	4808      	ldr	r0, [pc, #32]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b4a:	f7fb f814 	bl	8003b76 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b4e:	2240      	movs	r2, #64	; 0x40
 8008b50:	2100      	movs	r1, #0
 8008b52:	4806      	ldr	r0, [pc, #24]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b54:	f7fa ffc8 	bl	8003ae8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b58:	2280      	movs	r2, #128	; 0x80
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	4803      	ldr	r0, [pc, #12]	; (8008b6c <USBD_LL_Init+0x94>)
 8008b5e:	f7fa ffc3 	bl	8003ae8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	2000188c 	.word	0x2000188c

08008b70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7f9 ffac 	bl	8002ae4 <HAL_PCD_Start>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f92a 	bl	8008dec <USBD_Get_USB_Status>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	4608      	mov	r0, r1
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	70fb      	strb	r3, [r7, #3]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70bb      	strb	r3, [r7, #2]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bce:	78bb      	ldrb	r3, [r7, #2]
 8008bd0:	883a      	ldrh	r2, [r7, #0]
 8008bd2:	78f9      	ldrb	r1, [r7, #3]
 8008bd4:	f7fa fb90 	bl	80032f8 <HAL_PCD_EP_Open>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 f904 	bl	8008dec <USBD_Get_USB_Status>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c0c:	78fa      	ldrb	r2, [r7, #3]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fa fbd9 	bl	80033c8 <HAL_PCD_EP_Close>
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 f8e5 	bl	8008dec <USBD_Get_USB_Status>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fa fcb1 	bl	80035b6 <HAL_PCD_EP_SetStall>
 8008c54:	4603      	mov	r3, r0
 8008c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f8c6 	bl	8008dec <USBD_Get_USB_Status>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fa fcf6 	bl	800367e <HAL_PCD_EP_ClrStall>
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 f8a7 	bl	8008dec <USBD_Get_USB_Status>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cbe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da0b      	bge.n	8008ce0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	333e      	adds	r3, #62	; 0x3e
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	e00b      	b.n	8008cf8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008cf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	4611      	mov	r1, r2
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fa fac3 	bl	80032ae <HAL_PCD_SetAddress>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f85c 	bl	8008dec <USBD_Get_USB_Status>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b086      	sub	sp, #24
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	603b      	str	r3, [r7, #0]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d60:	7af9      	ldrb	r1, [r7, #11]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	f7fa fbdc 	bl	8003522 <HAL_PCD_EP_Transmit>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 f83b 	bl	8008dec <USBD_Get_USB_Status>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	607a      	str	r2, [r7, #4]
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	460b      	mov	r3, r1
 8008d92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008da2:	7af9      	ldrb	r1, [r7, #11]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	f7fa fb58 	bl	800345c <HAL_PCD_EP_Receive>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f81a 	bl	8008dec <USBD_Get_USB_Status>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fa fb88 	bl	80034f2 <HAL_PCD_EP_GetRxCount>
 8008de2:	4603      	mov	r3, r0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d817      	bhi.n	8008e30 <USBD_Get_USB_Status+0x44>
 8008e00:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <USBD_Get_USB_Status+0x1c>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e19 	.word	0x08008e19
 8008e0c:	08008e1f 	.word	0x08008e1f
 8008e10:	08008e25 	.word	0x08008e25
 8008e14:	08008e2b 	.word	0x08008e2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1c:	e00b      	b.n	8008e36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	73fb      	strb	r3, [r7, #15]
    break;
 8008e22:	e008      	b.n	8008e36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e24:	2301      	movs	r3, #1
 8008e26:	73fb      	strb	r3, [r7, #15]
    break;
 8008e28:	e005      	b.n	8008e36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2e:	e002      	b.n	8008e36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e30:	2303      	movs	r3, #3
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	bf00      	nop
  }
  return usb_status;
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <__errno>:
 8008e44:	4b01      	ldr	r3, [pc, #4]	; (8008e4c <__errno+0x8>)
 8008e46:	6818      	ldr	r0, [r3, #0]
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20000180 	.word	0x20000180

08008e50 <__libc_init_array>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	4e0d      	ldr	r6, [pc, #52]	; (8008e88 <__libc_init_array+0x38>)
 8008e54:	4c0d      	ldr	r4, [pc, #52]	; (8008e8c <__libc_init_array+0x3c>)
 8008e56:	1ba4      	subs	r4, r4, r6
 8008e58:	10a4      	asrs	r4, r4, #2
 8008e5a:	2500      	movs	r5, #0
 8008e5c:	42a5      	cmp	r5, r4
 8008e5e:	d109      	bne.n	8008e74 <__libc_init_array+0x24>
 8008e60:	4e0b      	ldr	r6, [pc, #44]	; (8008e90 <__libc_init_array+0x40>)
 8008e62:	4c0c      	ldr	r4, [pc, #48]	; (8008e94 <__libc_init_array+0x44>)
 8008e64:	f000 fc8e 	bl	8009784 <_init>
 8008e68:	1ba4      	subs	r4, r4, r6
 8008e6a:	10a4      	asrs	r4, r4, #2
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	42a5      	cmp	r5, r4
 8008e70:	d105      	bne.n	8008e7e <__libc_init_array+0x2e>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}
 8008e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e78:	4798      	blx	r3
 8008e7a:	3501      	adds	r5, #1
 8008e7c:	e7ee      	b.n	8008e5c <__libc_init_array+0xc>
 8008e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e82:	4798      	blx	r3
 8008e84:	3501      	adds	r5, #1
 8008e86:	e7f2      	b.n	8008e6e <__libc_init_array+0x1e>
 8008e88:	08009880 	.word	0x08009880
 8008e8c:	08009880 	.word	0x08009880
 8008e90:	08009880 	.word	0x08009880
 8008e94:	08009884 	.word	0x08009884

08008e98 <__itoa>:
 8008e98:	1e93      	subs	r3, r2, #2
 8008e9a:	2b22      	cmp	r3, #34	; 0x22
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	d904      	bls.n	8008eac <__itoa+0x14>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	700b      	strb	r3, [r1, #0]
 8008ea6:	461c      	mov	r4, r3
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	bd10      	pop	{r4, pc}
 8008eac:	2a0a      	cmp	r2, #10
 8008eae:	d109      	bne.n	8008ec4 <__itoa+0x2c>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	da07      	bge.n	8008ec4 <__itoa+0x2c>
 8008eb4:	232d      	movs	r3, #45	; 0x2d
 8008eb6:	700b      	strb	r3, [r1, #0]
 8008eb8:	4240      	negs	r0, r0
 8008eba:	2101      	movs	r1, #1
 8008ebc:	4421      	add	r1, r4
 8008ebe:	f000 f8f5 	bl	80090ac <__utoa>
 8008ec2:	e7f1      	b.n	8008ea8 <__itoa+0x10>
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	e7f9      	b.n	8008ebc <__itoa+0x24>

08008ec8 <itoa>:
 8008ec8:	f7ff bfe6 	b.w	8008e98 <__itoa>

08008ecc <malloc>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <malloc+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f000 b861 	b.w	8008f98 <_malloc_r>
 8008ed6:	bf00      	nop
 8008ed8:	20000180 	.word	0x20000180

08008edc <free>:
 8008edc:	4b02      	ldr	r3, [pc, #8]	; (8008ee8 <free+0xc>)
 8008ede:	4601      	mov	r1, r0
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	f000 b80b 	b.w	8008efc <_free_r>
 8008ee6:	bf00      	nop
 8008ee8:	20000180 	.word	0x20000180

08008eec <memset>:
 8008eec:	4402      	add	r2, r0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d100      	bne.n	8008ef6 <memset+0xa>
 8008ef4:	4770      	bx	lr
 8008ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8008efa:	e7f9      	b.n	8008ef0 <memset+0x4>

08008efc <_free_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4605      	mov	r5, r0
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d045      	beq.n	8008f90 <_free_r+0x94>
 8008f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f08:	1f0c      	subs	r4, r1, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bfb8      	it	lt
 8008f0e:	18e4      	addlt	r4, r4, r3
 8008f10:	f000 f90a 	bl	8009128 <__malloc_lock>
 8008f14:	4a1f      	ldr	r2, [pc, #124]	; (8008f94 <_free_r+0x98>)
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	4610      	mov	r0, r2
 8008f1a:	b933      	cbnz	r3, 8008f2a <_free_r+0x2e>
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	6014      	str	r4, [r2, #0]
 8008f20:	4628      	mov	r0, r5
 8008f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f26:	f000 b900 	b.w	800912a <__malloc_unlock>
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	d90c      	bls.n	8008f48 <_free_r+0x4c>
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	1862      	adds	r2, r4, r1
 8008f32:	4293      	cmp	r3, r2
 8008f34:	bf04      	itt	eq
 8008f36:	681a      	ldreq	r2, [r3, #0]
 8008f38:	685b      	ldreq	r3, [r3, #4]
 8008f3a:	6063      	str	r3, [r4, #4]
 8008f3c:	bf04      	itt	eq
 8008f3e:	1852      	addeq	r2, r2, r1
 8008f40:	6022      	streq	r2, [r4, #0]
 8008f42:	6004      	str	r4, [r0, #0]
 8008f44:	e7ec      	b.n	8008f20 <_free_r+0x24>
 8008f46:	4613      	mov	r3, r2
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	b10a      	cbz	r2, 8008f50 <_free_r+0x54>
 8008f4c:	42a2      	cmp	r2, r4
 8008f4e:	d9fa      	bls.n	8008f46 <_free_r+0x4a>
 8008f50:	6819      	ldr	r1, [r3, #0]
 8008f52:	1858      	adds	r0, r3, r1
 8008f54:	42a0      	cmp	r0, r4
 8008f56:	d10b      	bne.n	8008f70 <_free_r+0x74>
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	4401      	add	r1, r0
 8008f5c:	1858      	adds	r0, r3, r1
 8008f5e:	4282      	cmp	r2, r0
 8008f60:	6019      	str	r1, [r3, #0]
 8008f62:	d1dd      	bne.n	8008f20 <_free_r+0x24>
 8008f64:	6810      	ldr	r0, [r2, #0]
 8008f66:	6852      	ldr	r2, [r2, #4]
 8008f68:	605a      	str	r2, [r3, #4]
 8008f6a:	4401      	add	r1, r0
 8008f6c:	6019      	str	r1, [r3, #0]
 8008f6e:	e7d7      	b.n	8008f20 <_free_r+0x24>
 8008f70:	d902      	bls.n	8008f78 <_free_r+0x7c>
 8008f72:	230c      	movs	r3, #12
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	e7d3      	b.n	8008f20 <_free_r+0x24>
 8008f78:	6820      	ldr	r0, [r4, #0]
 8008f7a:	1821      	adds	r1, r4, r0
 8008f7c:	428a      	cmp	r2, r1
 8008f7e:	bf04      	itt	eq
 8008f80:	6811      	ldreq	r1, [r2, #0]
 8008f82:	6852      	ldreq	r2, [r2, #4]
 8008f84:	6062      	str	r2, [r4, #4]
 8008f86:	bf04      	itt	eq
 8008f88:	1809      	addeq	r1, r1, r0
 8008f8a:	6021      	streq	r1, [r4, #0]
 8008f8c:	605c      	str	r4, [r3, #4]
 8008f8e:	e7c7      	b.n	8008f20 <_free_r+0x24>
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
 8008f92:	bf00      	nop
 8008f94:	20000208 	.word	0x20000208

08008f98 <_malloc_r>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	1ccd      	adds	r5, r1, #3
 8008f9c:	f025 0503 	bic.w	r5, r5, #3
 8008fa0:	3508      	adds	r5, #8
 8008fa2:	2d0c      	cmp	r5, #12
 8008fa4:	bf38      	it	cc
 8008fa6:	250c      	movcc	r5, #12
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	4606      	mov	r6, r0
 8008fac:	db01      	blt.n	8008fb2 <_malloc_r+0x1a>
 8008fae:	42a9      	cmp	r1, r5
 8008fb0:	d903      	bls.n	8008fba <_malloc_r+0x22>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	f000 f8b5 	bl	8009128 <__malloc_lock>
 8008fbe:	4a21      	ldr	r2, [pc, #132]	; (8009044 <_malloc_r+0xac>)
 8008fc0:	6814      	ldr	r4, [r2, #0]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	b991      	cbnz	r1, 8008fec <_malloc_r+0x54>
 8008fc6:	4c20      	ldr	r4, [pc, #128]	; (8009048 <_malloc_r+0xb0>)
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	b91b      	cbnz	r3, 8008fd4 <_malloc_r+0x3c>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f83d 	bl	800904c <_sbrk_r>
 8008fd2:	6020      	str	r0, [r4, #0]
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 f838 	bl	800904c <_sbrk_r>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d124      	bne.n	800902a <_malloc_r+0x92>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	6033      	str	r3, [r6, #0]
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f000 f8a0 	bl	800912a <__malloc_unlock>
 8008fea:	e7e4      	b.n	8008fb6 <_malloc_r+0x1e>
 8008fec:	680b      	ldr	r3, [r1, #0]
 8008fee:	1b5b      	subs	r3, r3, r5
 8008ff0:	d418      	bmi.n	8009024 <_malloc_r+0x8c>
 8008ff2:	2b0b      	cmp	r3, #11
 8008ff4:	d90f      	bls.n	8009016 <_malloc_r+0x7e>
 8008ff6:	600b      	str	r3, [r1, #0]
 8008ff8:	50cd      	str	r5, [r1, r3]
 8008ffa:	18cc      	adds	r4, r1, r3
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 f894 	bl	800912a <__malloc_unlock>
 8009002:	f104 000b 	add.w	r0, r4, #11
 8009006:	1d23      	adds	r3, r4, #4
 8009008:	f020 0007 	bic.w	r0, r0, #7
 800900c:	1ac3      	subs	r3, r0, r3
 800900e:	d0d3      	beq.n	8008fb8 <_malloc_r+0x20>
 8009010:	425a      	negs	r2, r3
 8009012:	50e2      	str	r2, [r4, r3]
 8009014:	e7d0      	b.n	8008fb8 <_malloc_r+0x20>
 8009016:	428c      	cmp	r4, r1
 8009018:	684b      	ldr	r3, [r1, #4]
 800901a:	bf16      	itet	ne
 800901c:	6063      	strne	r3, [r4, #4]
 800901e:	6013      	streq	r3, [r2, #0]
 8009020:	460c      	movne	r4, r1
 8009022:	e7eb      	b.n	8008ffc <_malloc_r+0x64>
 8009024:	460c      	mov	r4, r1
 8009026:	6849      	ldr	r1, [r1, #4]
 8009028:	e7cc      	b.n	8008fc4 <_malloc_r+0x2c>
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d005      	beq.n	8009040 <_malloc_r+0xa8>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f808 	bl	800904c <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d0cf      	beq.n	8008fe0 <_malloc_r+0x48>
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	e7db      	b.n	8008ffc <_malloc_r+0x64>
 8009044:	20000208 	.word	0x20000208
 8009048:	2000020c 	.word	0x2000020c

0800904c <_sbrk_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4c06      	ldr	r4, [pc, #24]	; (8009068 <_sbrk_r+0x1c>)
 8009050:	2300      	movs	r3, #0
 8009052:	4605      	mov	r5, r0
 8009054:	4608      	mov	r0, r1
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	f7f7 fe0c 	bl	8000c74 <_sbrk>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_sbrk_r+0x1a>
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	b103      	cbz	r3, 8009066 <_sbrk_r+0x1a>
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20001c94 	.word	0x20001c94

0800906c <siprintf>:
 800906c:	b40e      	push	{r1, r2, r3}
 800906e:	b500      	push	{lr}
 8009070:	b09c      	sub	sp, #112	; 0x70
 8009072:	ab1d      	add	r3, sp, #116	; 0x74
 8009074:	9002      	str	r0, [sp, #8]
 8009076:	9006      	str	r0, [sp, #24]
 8009078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800907c:	4809      	ldr	r0, [pc, #36]	; (80090a4 <siprintf+0x38>)
 800907e:	9107      	str	r1, [sp, #28]
 8009080:	9104      	str	r1, [sp, #16]
 8009082:	4909      	ldr	r1, [pc, #36]	; (80090a8 <siprintf+0x3c>)
 8009084:	f853 2b04 	ldr.w	r2, [r3], #4
 8009088:	9105      	str	r1, [sp, #20]
 800908a:	6800      	ldr	r0, [r0, #0]
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	a902      	add	r1, sp, #8
 8009090:	f000 f8a6 	bl	80091e0 <_svfiprintf_r>
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	b01c      	add	sp, #112	; 0x70
 800909c:	f85d eb04 	ldr.w	lr, [sp], #4
 80090a0:	b003      	add	sp, #12
 80090a2:	4770      	bx	lr
 80090a4:	20000180 	.word	0x20000180
 80090a8:	ffff0208 	.word	0xffff0208

080090ac <__utoa>:
 80090ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ae:	4b1d      	ldr	r3, [pc, #116]	; (8009124 <__utoa+0x78>)
 80090b0:	b08b      	sub	sp, #44	; 0x2c
 80090b2:	4605      	mov	r5, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	466e      	mov	r6, sp
 80090b8:	f103 0c20 	add.w	ip, r3, #32
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	6859      	ldr	r1, [r3, #4]
 80090c0:	4637      	mov	r7, r6
 80090c2:	c703      	stmia	r7!, {r0, r1}
 80090c4:	3308      	adds	r3, #8
 80090c6:	4563      	cmp	r3, ip
 80090c8:	463e      	mov	r6, r7
 80090ca:	d1f7      	bne.n	80090bc <__utoa+0x10>
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	791b      	ldrb	r3, [r3, #4]
 80090d0:	713b      	strb	r3, [r7, #4]
 80090d2:	1e93      	subs	r3, r2, #2
 80090d4:	2b22      	cmp	r3, #34	; 0x22
 80090d6:	6038      	str	r0, [r7, #0]
 80090d8:	f04f 0300 	mov.w	r3, #0
 80090dc:	d904      	bls.n	80090e8 <__utoa+0x3c>
 80090de:	7023      	strb	r3, [r4, #0]
 80090e0:	461c      	mov	r4, r3
 80090e2:	4620      	mov	r0, r4
 80090e4:	b00b      	add	sp, #44	; 0x2c
 80090e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e8:	1e66      	subs	r6, r4, #1
 80090ea:	fbb5 f0f2 	udiv	r0, r5, r2
 80090ee:	af0a      	add	r7, sp, #40	; 0x28
 80090f0:	fb02 5510 	mls	r5, r2, r0, r5
 80090f4:	443d      	add	r5, r7
 80090f6:	1c59      	adds	r1, r3, #1
 80090f8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80090fc:	f806 5f01 	strb.w	r5, [r6, #1]!
 8009100:	4605      	mov	r5, r0
 8009102:	b968      	cbnz	r0, 8009120 <__utoa+0x74>
 8009104:	5460      	strb	r0, [r4, r1]
 8009106:	4423      	add	r3, r4
 8009108:	4622      	mov	r2, r4
 800910a:	1b19      	subs	r1, r3, r4
 800910c:	1b10      	subs	r0, r2, r4
 800910e:	4281      	cmp	r1, r0
 8009110:	dde7      	ble.n	80090e2 <__utoa+0x36>
 8009112:	7811      	ldrb	r1, [r2, #0]
 8009114:	7818      	ldrb	r0, [r3, #0]
 8009116:	f802 0b01 	strb.w	r0, [r2], #1
 800911a:	f803 1901 	strb.w	r1, [r3], #-1
 800911e:	e7f4      	b.n	800910a <__utoa+0x5e>
 8009120:	460b      	mov	r3, r1
 8009122:	e7e2      	b.n	80090ea <__utoa+0x3e>
 8009124:	08009820 	.word	0x08009820

08009128 <__malloc_lock>:
 8009128:	4770      	bx	lr

0800912a <__malloc_unlock>:
 800912a:	4770      	bx	lr

0800912c <__ssputs_r>:
 800912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009130:	688e      	ldr	r6, [r1, #8]
 8009132:	429e      	cmp	r6, r3
 8009134:	4682      	mov	sl, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4690      	mov	r8, r2
 800913a:	4699      	mov	r9, r3
 800913c:	d837      	bhi.n	80091ae <__ssputs_r+0x82>
 800913e:	898a      	ldrh	r2, [r1, #12]
 8009140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009144:	d031      	beq.n	80091aa <__ssputs_r+0x7e>
 8009146:	6825      	ldr	r5, [r4, #0]
 8009148:	6909      	ldr	r1, [r1, #16]
 800914a:	1a6f      	subs	r7, r5, r1
 800914c:	6965      	ldr	r5, [r4, #20]
 800914e:	2302      	movs	r3, #2
 8009150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009154:	fb95 f5f3 	sdiv	r5, r5, r3
 8009158:	f109 0301 	add.w	r3, r9, #1
 800915c:	443b      	add	r3, r7
 800915e:	429d      	cmp	r5, r3
 8009160:	bf38      	it	cc
 8009162:	461d      	movcc	r5, r3
 8009164:	0553      	lsls	r3, r2, #21
 8009166:	d530      	bpl.n	80091ca <__ssputs_r+0x9e>
 8009168:	4629      	mov	r1, r5
 800916a:	f7ff ff15 	bl	8008f98 <_malloc_r>
 800916e:	4606      	mov	r6, r0
 8009170:	b950      	cbnz	r0, 8009188 <__ssputs_r+0x5c>
 8009172:	230c      	movs	r3, #12
 8009174:	f8ca 3000 	str.w	r3, [sl]
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	463a      	mov	r2, r7
 800918a:	6921      	ldr	r1, [r4, #16]
 800918c:	f000 faa8 	bl	80096e0 <memcpy>
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	6126      	str	r6, [r4, #16]
 800919e:	6165      	str	r5, [r4, #20]
 80091a0:	443e      	add	r6, r7
 80091a2:	1bed      	subs	r5, r5, r7
 80091a4:	6026      	str	r6, [r4, #0]
 80091a6:	60a5      	str	r5, [r4, #8]
 80091a8:	464e      	mov	r6, r9
 80091aa:	454e      	cmp	r6, r9
 80091ac:	d900      	bls.n	80091b0 <__ssputs_r+0x84>
 80091ae:	464e      	mov	r6, r9
 80091b0:	4632      	mov	r2, r6
 80091b2:	4641      	mov	r1, r8
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	f000 fa9e 	bl	80096f6 <memmove>
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	1b9b      	subs	r3, r3, r6
 80091be:	60a3      	str	r3, [r4, #8]
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	441e      	add	r6, r3
 80091c4:	6026      	str	r6, [r4, #0]
 80091c6:	2000      	movs	r0, #0
 80091c8:	e7dc      	b.n	8009184 <__ssputs_r+0x58>
 80091ca:	462a      	mov	r2, r5
 80091cc:	f000 faac 	bl	8009728 <_realloc_r>
 80091d0:	4606      	mov	r6, r0
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1e2      	bne.n	800919c <__ssputs_r+0x70>
 80091d6:	6921      	ldr	r1, [r4, #16]
 80091d8:	4650      	mov	r0, sl
 80091da:	f7ff fe8f 	bl	8008efc <_free_r>
 80091de:	e7c8      	b.n	8009172 <__ssputs_r+0x46>

080091e0 <_svfiprintf_r>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	461d      	mov	r5, r3
 80091e6:	898b      	ldrh	r3, [r1, #12]
 80091e8:	061f      	lsls	r7, r3, #24
 80091ea:	b09d      	sub	sp, #116	; 0x74
 80091ec:	4680      	mov	r8, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	4616      	mov	r6, r2
 80091f2:	d50f      	bpl.n	8009214 <_svfiprintf_r+0x34>
 80091f4:	690b      	ldr	r3, [r1, #16]
 80091f6:	b96b      	cbnz	r3, 8009214 <_svfiprintf_r+0x34>
 80091f8:	2140      	movs	r1, #64	; 0x40
 80091fa:	f7ff fecd 	bl	8008f98 <_malloc_r>
 80091fe:	6020      	str	r0, [r4, #0]
 8009200:	6120      	str	r0, [r4, #16]
 8009202:	b928      	cbnz	r0, 8009210 <_svfiprintf_r+0x30>
 8009204:	230c      	movs	r3, #12
 8009206:	f8c8 3000 	str.w	r3, [r8]
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	e0c8      	b.n	80093a2 <_svfiprintf_r+0x1c2>
 8009210:	2340      	movs	r3, #64	; 0x40
 8009212:	6163      	str	r3, [r4, #20]
 8009214:	2300      	movs	r3, #0
 8009216:	9309      	str	r3, [sp, #36]	; 0x24
 8009218:	2320      	movs	r3, #32
 800921a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800921e:	2330      	movs	r3, #48	; 0x30
 8009220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009224:	9503      	str	r5, [sp, #12]
 8009226:	f04f 0b01 	mov.w	fp, #1
 800922a:	4637      	mov	r7, r6
 800922c:	463d      	mov	r5, r7
 800922e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009232:	b10b      	cbz	r3, 8009238 <_svfiprintf_r+0x58>
 8009234:	2b25      	cmp	r3, #37	; 0x25
 8009236:	d13e      	bne.n	80092b6 <_svfiprintf_r+0xd6>
 8009238:	ebb7 0a06 	subs.w	sl, r7, r6
 800923c:	d00b      	beq.n	8009256 <_svfiprintf_r+0x76>
 800923e:	4653      	mov	r3, sl
 8009240:	4632      	mov	r2, r6
 8009242:	4621      	mov	r1, r4
 8009244:	4640      	mov	r0, r8
 8009246:	f7ff ff71 	bl	800912c <__ssputs_r>
 800924a:	3001      	adds	r0, #1
 800924c:	f000 80a4 	beq.w	8009398 <_svfiprintf_r+0x1b8>
 8009250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009252:	4453      	add	r3, sl
 8009254:	9309      	str	r3, [sp, #36]	; 0x24
 8009256:	783b      	ldrb	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 809d 	beq.w	8009398 <_svfiprintf_r+0x1b8>
 800925e:	2300      	movs	r3, #0
 8009260:	f04f 32ff 	mov.w	r2, #4294967295
 8009264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	9307      	str	r3, [sp, #28]
 800926c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009270:	931a      	str	r3, [sp, #104]	; 0x68
 8009272:	462f      	mov	r7, r5
 8009274:	2205      	movs	r2, #5
 8009276:	f817 1b01 	ldrb.w	r1, [r7], #1
 800927a:	4850      	ldr	r0, [pc, #320]	; (80093bc <_svfiprintf_r+0x1dc>)
 800927c:	f7f6 ffb0 	bl	80001e0 <memchr>
 8009280:	9b04      	ldr	r3, [sp, #16]
 8009282:	b9d0      	cbnz	r0, 80092ba <_svfiprintf_r+0xda>
 8009284:	06d9      	lsls	r1, r3, #27
 8009286:	bf44      	itt	mi
 8009288:	2220      	movmi	r2, #32
 800928a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800928e:	071a      	lsls	r2, r3, #28
 8009290:	bf44      	itt	mi
 8009292:	222b      	movmi	r2, #43	; 0x2b
 8009294:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009298:	782a      	ldrb	r2, [r5, #0]
 800929a:	2a2a      	cmp	r2, #42	; 0x2a
 800929c:	d015      	beq.n	80092ca <_svfiprintf_r+0xea>
 800929e:	9a07      	ldr	r2, [sp, #28]
 80092a0:	462f      	mov	r7, r5
 80092a2:	2000      	movs	r0, #0
 80092a4:	250a      	movs	r5, #10
 80092a6:	4639      	mov	r1, r7
 80092a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ac:	3b30      	subs	r3, #48	; 0x30
 80092ae:	2b09      	cmp	r3, #9
 80092b0:	d94d      	bls.n	800934e <_svfiprintf_r+0x16e>
 80092b2:	b1b8      	cbz	r0, 80092e4 <_svfiprintf_r+0x104>
 80092b4:	e00f      	b.n	80092d6 <_svfiprintf_r+0xf6>
 80092b6:	462f      	mov	r7, r5
 80092b8:	e7b8      	b.n	800922c <_svfiprintf_r+0x4c>
 80092ba:	4a40      	ldr	r2, [pc, #256]	; (80093bc <_svfiprintf_r+0x1dc>)
 80092bc:	1a80      	subs	r0, r0, r2
 80092be:	fa0b f000 	lsl.w	r0, fp, r0
 80092c2:	4318      	orrs	r0, r3
 80092c4:	9004      	str	r0, [sp, #16]
 80092c6:	463d      	mov	r5, r7
 80092c8:	e7d3      	b.n	8009272 <_svfiprintf_r+0x92>
 80092ca:	9a03      	ldr	r2, [sp, #12]
 80092cc:	1d11      	adds	r1, r2, #4
 80092ce:	6812      	ldr	r2, [r2, #0]
 80092d0:	9103      	str	r1, [sp, #12]
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	db01      	blt.n	80092da <_svfiprintf_r+0xfa>
 80092d6:	9207      	str	r2, [sp, #28]
 80092d8:	e004      	b.n	80092e4 <_svfiprintf_r+0x104>
 80092da:	4252      	negs	r2, r2
 80092dc:	f043 0302 	orr.w	r3, r3, #2
 80092e0:	9207      	str	r2, [sp, #28]
 80092e2:	9304      	str	r3, [sp, #16]
 80092e4:	783b      	ldrb	r3, [r7, #0]
 80092e6:	2b2e      	cmp	r3, #46	; 0x2e
 80092e8:	d10c      	bne.n	8009304 <_svfiprintf_r+0x124>
 80092ea:	787b      	ldrb	r3, [r7, #1]
 80092ec:	2b2a      	cmp	r3, #42	; 0x2a
 80092ee:	d133      	bne.n	8009358 <_svfiprintf_r+0x178>
 80092f0:	9b03      	ldr	r3, [sp, #12]
 80092f2:	1d1a      	adds	r2, r3, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	9203      	str	r2, [sp, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	bfb8      	it	lt
 80092fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009300:	3702      	adds	r7, #2
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	4d2e      	ldr	r5, [pc, #184]	; (80093c0 <_svfiprintf_r+0x1e0>)
 8009306:	7839      	ldrb	r1, [r7, #0]
 8009308:	2203      	movs	r2, #3
 800930a:	4628      	mov	r0, r5
 800930c:	f7f6 ff68 	bl	80001e0 <memchr>
 8009310:	b138      	cbz	r0, 8009322 <_svfiprintf_r+0x142>
 8009312:	2340      	movs	r3, #64	; 0x40
 8009314:	1b40      	subs	r0, r0, r5
 8009316:	fa03 f000 	lsl.w	r0, r3, r0
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	4303      	orrs	r3, r0
 800931e:	3701      	adds	r7, #1
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	7839      	ldrb	r1, [r7, #0]
 8009324:	4827      	ldr	r0, [pc, #156]	; (80093c4 <_svfiprintf_r+0x1e4>)
 8009326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932a:	2206      	movs	r2, #6
 800932c:	1c7e      	adds	r6, r7, #1
 800932e:	f7f6 ff57 	bl	80001e0 <memchr>
 8009332:	2800      	cmp	r0, #0
 8009334:	d038      	beq.n	80093a8 <_svfiprintf_r+0x1c8>
 8009336:	4b24      	ldr	r3, [pc, #144]	; (80093c8 <_svfiprintf_r+0x1e8>)
 8009338:	bb13      	cbnz	r3, 8009380 <_svfiprintf_r+0x1a0>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	3307      	adds	r3, #7
 800933e:	f023 0307 	bic.w	r3, r3, #7
 8009342:	3308      	adds	r3, #8
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	444b      	add	r3, r9
 800934a:	9309      	str	r3, [sp, #36]	; 0x24
 800934c:	e76d      	b.n	800922a <_svfiprintf_r+0x4a>
 800934e:	fb05 3202 	mla	r2, r5, r2, r3
 8009352:	2001      	movs	r0, #1
 8009354:	460f      	mov	r7, r1
 8009356:	e7a6      	b.n	80092a6 <_svfiprintf_r+0xc6>
 8009358:	2300      	movs	r3, #0
 800935a:	3701      	adds	r7, #1
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	4619      	mov	r1, r3
 8009360:	250a      	movs	r5, #10
 8009362:	4638      	mov	r0, r7
 8009364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009368:	3a30      	subs	r2, #48	; 0x30
 800936a:	2a09      	cmp	r2, #9
 800936c:	d903      	bls.n	8009376 <_svfiprintf_r+0x196>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0c8      	beq.n	8009304 <_svfiprintf_r+0x124>
 8009372:	9105      	str	r1, [sp, #20]
 8009374:	e7c6      	b.n	8009304 <_svfiprintf_r+0x124>
 8009376:	fb05 2101 	mla	r1, r5, r1, r2
 800937a:	2301      	movs	r3, #1
 800937c:	4607      	mov	r7, r0
 800937e:	e7f0      	b.n	8009362 <_svfiprintf_r+0x182>
 8009380:	ab03      	add	r3, sp, #12
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	4622      	mov	r2, r4
 8009386:	4b11      	ldr	r3, [pc, #68]	; (80093cc <_svfiprintf_r+0x1ec>)
 8009388:	a904      	add	r1, sp, #16
 800938a:	4640      	mov	r0, r8
 800938c:	f3af 8000 	nop.w
 8009390:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009394:	4681      	mov	r9, r0
 8009396:	d1d6      	bne.n	8009346 <_svfiprintf_r+0x166>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	065b      	lsls	r3, r3, #25
 800939c:	f53f af35 	bmi.w	800920a <_svfiprintf_r+0x2a>
 80093a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a2:	b01d      	add	sp, #116	; 0x74
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	ab03      	add	r3, sp, #12
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4622      	mov	r2, r4
 80093ae:	4b07      	ldr	r3, [pc, #28]	; (80093cc <_svfiprintf_r+0x1ec>)
 80093b0:	a904      	add	r1, sp, #16
 80093b2:	4640      	mov	r0, r8
 80093b4:	f000 f882 	bl	80094bc <_printf_i>
 80093b8:	e7ea      	b.n	8009390 <_svfiprintf_r+0x1b0>
 80093ba:	bf00      	nop
 80093bc:	08009845 	.word	0x08009845
 80093c0:	0800984b 	.word	0x0800984b
 80093c4:	0800984f 	.word	0x0800984f
 80093c8:	00000000 	.word	0x00000000
 80093cc:	0800912d 	.word	0x0800912d

080093d0 <_printf_common>:
 80093d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d4:	4691      	mov	r9, r2
 80093d6:	461f      	mov	r7, r3
 80093d8:	688a      	ldr	r2, [r1, #8]
 80093da:	690b      	ldr	r3, [r1, #16]
 80093dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bfb8      	it	lt
 80093e4:	4613      	movlt	r3, r2
 80093e6:	f8c9 3000 	str.w	r3, [r9]
 80093ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ee:	4606      	mov	r6, r0
 80093f0:	460c      	mov	r4, r1
 80093f2:	b112      	cbz	r2, 80093fa <_printf_common+0x2a>
 80093f4:	3301      	adds	r3, #1
 80093f6:	f8c9 3000 	str.w	r3, [r9]
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	0699      	lsls	r1, r3, #26
 80093fe:	bf42      	ittt	mi
 8009400:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009404:	3302      	addmi	r3, #2
 8009406:	f8c9 3000 	strmi.w	r3, [r9]
 800940a:	6825      	ldr	r5, [r4, #0]
 800940c:	f015 0506 	ands.w	r5, r5, #6
 8009410:	d107      	bne.n	8009422 <_printf_common+0x52>
 8009412:	f104 0a19 	add.w	sl, r4, #25
 8009416:	68e3      	ldr	r3, [r4, #12]
 8009418:	f8d9 2000 	ldr.w	r2, [r9]
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	42ab      	cmp	r3, r5
 8009420:	dc28      	bgt.n	8009474 <_printf_common+0xa4>
 8009422:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009426:	6822      	ldr	r2, [r4, #0]
 8009428:	3300      	adds	r3, #0
 800942a:	bf18      	it	ne
 800942c:	2301      	movne	r3, #1
 800942e:	0692      	lsls	r2, r2, #26
 8009430:	d42d      	bmi.n	800948e <_printf_common+0xbe>
 8009432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009436:	4639      	mov	r1, r7
 8009438:	4630      	mov	r0, r6
 800943a:	47c0      	blx	r8
 800943c:	3001      	adds	r0, #1
 800943e:	d020      	beq.n	8009482 <_printf_common+0xb2>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	68e5      	ldr	r5, [r4, #12]
 8009444:	f8d9 2000 	ldr.w	r2, [r9]
 8009448:	f003 0306 	and.w	r3, r3, #6
 800944c:	2b04      	cmp	r3, #4
 800944e:	bf08      	it	eq
 8009450:	1aad      	subeq	r5, r5, r2
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	6922      	ldr	r2, [r4, #16]
 8009456:	bf0c      	ite	eq
 8009458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800945c:	2500      	movne	r5, #0
 800945e:	4293      	cmp	r3, r2
 8009460:	bfc4      	itt	gt
 8009462:	1a9b      	subgt	r3, r3, r2
 8009464:	18ed      	addgt	r5, r5, r3
 8009466:	f04f 0900 	mov.w	r9, #0
 800946a:	341a      	adds	r4, #26
 800946c:	454d      	cmp	r5, r9
 800946e:	d11a      	bne.n	80094a6 <_printf_common+0xd6>
 8009470:	2000      	movs	r0, #0
 8009472:	e008      	b.n	8009486 <_printf_common+0xb6>
 8009474:	2301      	movs	r3, #1
 8009476:	4652      	mov	r2, sl
 8009478:	4639      	mov	r1, r7
 800947a:	4630      	mov	r0, r6
 800947c:	47c0      	blx	r8
 800947e:	3001      	adds	r0, #1
 8009480:	d103      	bne.n	800948a <_printf_common+0xba>
 8009482:	f04f 30ff 	mov.w	r0, #4294967295
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	3501      	adds	r5, #1
 800948c:	e7c3      	b.n	8009416 <_printf_common+0x46>
 800948e:	18e1      	adds	r1, r4, r3
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	2030      	movs	r0, #48	; 0x30
 8009494:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009498:	4422      	add	r2, r4
 800949a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800949e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094a2:	3302      	adds	r3, #2
 80094a4:	e7c5      	b.n	8009432 <_printf_common+0x62>
 80094a6:	2301      	movs	r3, #1
 80094a8:	4622      	mov	r2, r4
 80094aa:	4639      	mov	r1, r7
 80094ac:	4630      	mov	r0, r6
 80094ae:	47c0      	blx	r8
 80094b0:	3001      	adds	r0, #1
 80094b2:	d0e6      	beq.n	8009482 <_printf_common+0xb2>
 80094b4:	f109 0901 	add.w	r9, r9, #1
 80094b8:	e7d8      	b.n	800946c <_printf_common+0x9c>
	...

080094bc <_printf_i>:
 80094bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80094c4:	460c      	mov	r4, r1
 80094c6:	7e09      	ldrb	r1, [r1, #24]
 80094c8:	b085      	sub	sp, #20
 80094ca:	296e      	cmp	r1, #110	; 0x6e
 80094cc:	4617      	mov	r7, r2
 80094ce:	4606      	mov	r6, r0
 80094d0:	4698      	mov	r8, r3
 80094d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094d4:	f000 80b3 	beq.w	800963e <_printf_i+0x182>
 80094d8:	d822      	bhi.n	8009520 <_printf_i+0x64>
 80094da:	2963      	cmp	r1, #99	; 0x63
 80094dc:	d036      	beq.n	800954c <_printf_i+0x90>
 80094de:	d80a      	bhi.n	80094f6 <_printf_i+0x3a>
 80094e0:	2900      	cmp	r1, #0
 80094e2:	f000 80b9 	beq.w	8009658 <_printf_i+0x19c>
 80094e6:	2958      	cmp	r1, #88	; 0x58
 80094e8:	f000 8083 	beq.w	80095f2 <_printf_i+0x136>
 80094ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80094f4:	e032      	b.n	800955c <_printf_i+0xa0>
 80094f6:	2964      	cmp	r1, #100	; 0x64
 80094f8:	d001      	beq.n	80094fe <_printf_i+0x42>
 80094fa:	2969      	cmp	r1, #105	; 0x69
 80094fc:	d1f6      	bne.n	80094ec <_printf_i+0x30>
 80094fe:	6820      	ldr	r0, [r4, #0]
 8009500:	6813      	ldr	r3, [r2, #0]
 8009502:	0605      	lsls	r5, r0, #24
 8009504:	f103 0104 	add.w	r1, r3, #4
 8009508:	d52a      	bpl.n	8009560 <_printf_i+0xa4>
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6011      	str	r1, [r2, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	da03      	bge.n	800951a <_printf_i+0x5e>
 8009512:	222d      	movs	r2, #45	; 0x2d
 8009514:	425b      	negs	r3, r3
 8009516:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800951a:	486f      	ldr	r0, [pc, #444]	; (80096d8 <_printf_i+0x21c>)
 800951c:	220a      	movs	r2, #10
 800951e:	e039      	b.n	8009594 <_printf_i+0xd8>
 8009520:	2973      	cmp	r1, #115	; 0x73
 8009522:	f000 809d 	beq.w	8009660 <_printf_i+0x1a4>
 8009526:	d808      	bhi.n	800953a <_printf_i+0x7e>
 8009528:	296f      	cmp	r1, #111	; 0x6f
 800952a:	d020      	beq.n	800956e <_printf_i+0xb2>
 800952c:	2970      	cmp	r1, #112	; 0x70
 800952e:	d1dd      	bne.n	80094ec <_printf_i+0x30>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	f043 0320 	orr.w	r3, r3, #32
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	e003      	b.n	8009542 <_printf_i+0x86>
 800953a:	2975      	cmp	r1, #117	; 0x75
 800953c:	d017      	beq.n	800956e <_printf_i+0xb2>
 800953e:	2978      	cmp	r1, #120	; 0x78
 8009540:	d1d4      	bne.n	80094ec <_printf_i+0x30>
 8009542:	2378      	movs	r3, #120	; 0x78
 8009544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009548:	4864      	ldr	r0, [pc, #400]	; (80096dc <_printf_i+0x220>)
 800954a:	e055      	b.n	80095f8 <_printf_i+0x13c>
 800954c:	6813      	ldr	r3, [r2, #0]
 800954e:	1d19      	adds	r1, r3, #4
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6011      	str	r1, [r2, #0]
 8009554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800955c:	2301      	movs	r3, #1
 800955e:	e08c      	b.n	800967a <_printf_i+0x1be>
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6011      	str	r1, [r2, #0]
 8009564:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009568:	bf18      	it	ne
 800956a:	b21b      	sxthne	r3, r3
 800956c:	e7cf      	b.n	800950e <_printf_i+0x52>
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	6825      	ldr	r5, [r4, #0]
 8009572:	1d18      	adds	r0, r3, #4
 8009574:	6010      	str	r0, [r2, #0]
 8009576:	0628      	lsls	r0, r5, #24
 8009578:	d501      	bpl.n	800957e <_printf_i+0xc2>
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	e002      	b.n	8009584 <_printf_i+0xc8>
 800957e:	0668      	lsls	r0, r5, #25
 8009580:	d5fb      	bpl.n	800957a <_printf_i+0xbe>
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	4854      	ldr	r0, [pc, #336]	; (80096d8 <_printf_i+0x21c>)
 8009586:	296f      	cmp	r1, #111	; 0x6f
 8009588:	bf14      	ite	ne
 800958a:	220a      	movne	r2, #10
 800958c:	2208      	moveq	r2, #8
 800958e:	2100      	movs	r1, #0
 8009590:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009594:	6865      	ldr	r5, [r4, #4]
 8009596:	60a5      	str	r5, [r4, #8]
 8009598:	2d00      	cmp	r5, #0
 800959a:	f2c0 8095 	blt.w	80096c8 <_printf_i+0x20c>
 800959e:	6821      	ldr	r1, [r4, #0]
 80095a0:	f021 0104 	bic.w	r1, r1, #4
 80095a4:	6021      	str	r1, [r4, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d13d      	bne.n	8009626 <_printf_i+0x16a>
 80095aa:	2d00      	cmp	r5, #0
 80095ac:	f040 808e 	bne.w	80096cc <_printf_i+0x210>
 80095b0:	4665      	mov	r5, ip
 80095b2:	2a08      	cmp	r2, #8
 80095b4:	d10b      	bne.n	80095ce <_printf_i+0x112>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	07db      	lsls	r3, r3, #31
 80095ba:	d508      	bpl.n	80095ce <_printf_i+0x112>
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	6862      	ldr	r2, [r4, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	bfde      	ittt	le
 80095c4:	2330      	movle	r3, #48	; 0x30
 80095c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095ce:	ebac 0305 	sub.w	r3, ip, r5
 80095d2:	6123      	str	r3, [r4, #16]
 80095d4:	f8cd 8000 	str.w	r8, [sp]
 80095d8:	463b      	mov	r3, r7
 80095da:	aa03      	add	r2, sp, #12
 80095dc:	4621      	mov	r1, r4
 80095de:	4630      	mov	r0, r6
 80095e0:	f7ff fef6 	bl	80093d0 <_printf_common>
 80095e4:	3001      	adds	r0, #1
 80095e6:	d14d      	bne.n	8009684 <_printf_i+0x1c8>
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	b005      	add	sp, #20
 80095ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095f2:	4839      	ldr	r0, [pc, #228]	; (80096d8 <_printf_i+0x21c>)
 80095f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80095f8:	6813      	ldr	r3, [r2, #0]
 80095fa:	6821      	ldr	r1, [r4, #0]
 80095fc:	1d1d      	adds	r5, r3, #4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	6015      	str	r5, [r2, #0]
 8009602:	060a      	lsls	r2, r1, #24
 8009604:	d50b      	bpl.n	800961e <_printf_i+0x162>
 8009606:	07ca      	lsls	r2, r1, #31
 8009608:	bf44      	itt	mi
 800960a:	f041 0120 	orrmi.w	r1, r1, #32
 800960e:	6021      	strmi	r1, [r4, #0]
 8009610:	b91b      	cbnz	r3, 800961a <_printf_i+0x15e>
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	f022 0220 	bic.w	r2, r2, #32
 8009618:	6022      	str	r2, [r4, #0]
 800961a:	2210      	movs	r2, #16
 800961c:	e7b7      	b.n	800958e <_printf_i+0xd2>
 800961e:	064d      	lsls	r5, r1, #25
 8009620:	bf48      	it	mi
 8009622:	b29b      	uxthmi	r3, r3
 8009624:	e7ef      	b.n	8009606 <_printf_i+0x14a>
 8009626:	4665      	mov	r5, ip
 8009628:	fbb3 f1f2 	udiv	r1, r3, r2
 800962c:	fb02 3311 	mls	r3, r2, r1, r3
 8009630:	5cc3      	ldrb	r3, [r0, r3]
 8009632:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009636:	460b      	mov	r3, r1
 8009638:	2900      	cmp	r1, #0
 800963a:	d1f5      	bne.n	8009628 <_printf_i+0x16c>
 800963c:	e7b9      	b.n	80095b2 <_printf_i+0xf6>
 800963e:	6813      	ldr	r3, [r2, #0]
 8009640:	6825      	ldr	r5, [r4, #0]
 8009642:	6961      	ldr	r1, [r4, #20]
 8009644:	1d18      	adds	r0, r3, #4
 8009646:	6010      	str	r0, [r2, #0]
 8009648:	0628      	lsls	r0, r5, #24
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	d501      	bpl.n	8009652 <_printf_i+0x196>
 800964e:	6019      	str	r1, [r3, #0]
 8009650:	e002      	b.n	8009658 <_printf_i+0x19c>
 8009652:	066a      	lsls	r2, r5, #25
 8009654:	d5fb      	bpl.n	800964e <_printf_i+0x192>
 8009656:	8019      	strh	r1, [r3, #0]
 8009658:	2300      	movs	r3, #0
 800965a:	6123      	str	r3, [r4, #16]
 800965c:	4665      	mov	r5, ip
 800965e:	e7b9      	b.n	80095d4 <_printf_i+0x118>
 8009660:	6813      	ldr	r3, [r2, #0]
 8009662:	1d19      	adds	r1, r3, #4
 8009664:	6011      	str	r1, [r2, #0]
 8009666:	681d      	ldr	r5, [r3, #0]
 8009668:	6862      	ldr	r2, [r4, #4]
 800966a:	2100      	movs	r1, #0
 800966c:	4628      	mov	r0, r5
 800966e:	f7f6 fdb7 	bl	80001e0 <memchr>
 8009672:	b108      	cbz	r0, 8009678 <_printf_i+0x1bc>
 8009674:	1b40      	subs	r0, r0, r5
 8009676:	6060      	str	r0, [r4, #4]
 8009678:	6863      	ldr	r3, [r4, #4]
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	2300      	movs	r3, #0
 800967e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009682:	e7a7      	b.n	80095d4 <_printf_i+0x118>
 8009684:	6923      	ldr	r3, [r4, #16]
 8009686:	462a      	mov	r2, r5
 8009688:	4639      	mov	r1, r7
 800968a:	4630      	mov	r0, r6
 800968c:	47c0      	blx	r8
 800968e:	3001      	adds	r0, #1
 8009690:	d0aa      	beq.n	80095e8 <_printf_i+0x12c>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	079b      	lsls	r3, r3, #30
 8009696:	d413      	bmi.n	80096c0 <_printf_i+0x204>
 8009698:	68e0      	ldr	r0, [r4, #12]
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	4298      	cmp	r0, r3
 800969e:	bfb8      	it	lt
 80096a0:	4618      	movlt	r0, r3
 80096a2:	e7a3      	b.n	80095ec <_printf_i+0x130>
 80096a4:	2301      	movs	r3, #1
 80096a6:	464a      	mov	r2, r9
 80096a8:	4639      	mov	r1, r7
 80096aa:	4630      	mov	r0, r6
 80096ac:	47c0      	blx	r8
 80096ae:	3001      	adds	r0, #1
 80096b0:	d09a      	beq.n	80095e8 <_printf_i+0x12c>
 80096b2:	3501      	adds	r5, #1
 80096b4:	68e3      	ldr	r3, [r4, #12]
 80096b6:	9a03      	ldr	r2, [sp, #12]
 80096b8:	1a9b      	subs	r3, r3, r2
 80096ba:	42ab      	cmp	r3, r5
 80096bc:	dcf2      	bgt.n	80096a4 <_printf_i+0x1e8>
 80096be:	e7eb      	b.n	8009698 <_printf_i+0x1dc>
 80096c0:	2500      	movs	r5, #0
 80096c2:	f104 0919 	add.w	r9, r4, #25
 80096c6:	e7f5      	b.n	80096b4 <_printf_i+0x1f8>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1ac      	bne.n	8009626 <_printf_i+0x16a>
 80096cc:	7803      	ldrb	r3, [r0, #0]
 80096ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096d6:	e76c      	b.n	80095b2 <_printf_i+0xf6>
 80096d8:	08009856 	.word	0x08009856
 80096dc:	08009867 	.word	0x08009867

080096e0 <memcpy>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	1e43      	subs	r3, r0, #1
 80096e4:	440a      	add	r2, r1
 80096e6:	4291      	cmp	r1, r2
 80096e8:	d100      	bne.n	80096ec <memcpy+0xc>
 80096ea:	bd10      	pop	{r4, pc}
 80096ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096f4:	e7f7      	b.n	80096e6 <memcpy+0x6>

080096f6 <memmove>:
 80096f6:	4288      	cmp	r0, r1
 80096f8:	b510      	push	{r4, lr}
 80096fa:	eb01 0302 	add.w	r3, r1, r2
 80096fe:	d807      	bhi.n	8009710 <memmove+0x1a>
 8009700:	1e42      	subs	r2, r0, #1
 8009702:	4299      	cmp	r1, r3
 8009704:	d00a      	beq.n	800971c <memmove+0x26>
 8009706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800970a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800970e:	e7f8      	b.n	8009702 <memmove+0xc>
 8009710:	4283      	cmp	r3, r0
 8009712:	d9f5      	bls.n	8009700 <memmove+0xa>
 8009714:	1881      	adds	r1, r0, r2
 8009716:	1ad2      	subs	r2, r2, r3
 8009718:	42d3      	cmn	r3, r2
 800971a:	d100      	bne.n	800971e <memmove+0x28>
 800971c:	bd10      	pop	{r4, pc}
 800971e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009722:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009726:	e7f7      	b.n	8009718 <memmove+0x22>

08009728 <_realloc_r>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	4607      	mov	r7, r0
 800972c:	4614      	mov	r4, r2
 800972e:	460e      	mov	r6, r1
 8009730:	b921      	cbnz	r1, 800973c <_realloc_r+0x14>
 8009732:	4611      	mov	r1, r2
 8009734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009738:	f7ff bc2e 	b.w	8008f98 <_malloc_r>
 800973c:	b922      	cbnz	r2, 8009748 <_realloc_r+0x20>
 800973e:	f7ff fbdd 	bl	8008efc <_free_r>
 8009742:	4625      	mov	r5, r4
 8009744:	4628      	mov	r0, r5
 8009746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009748:	f000 f814 	bl	8009774 <_malloc_usable_size_r>
 800974c:	42a0      	cmp	r0, r4
 800974e:	d20f      	bcs.n	8009770 <_realloc_r+0x48>
 8009750:	4621      	mov	r1, r4
 8009752:	4638      	mov	r0, r7
 8009754:	f7ff fc20 	bl	8008f98 <_malloc_r>
 8009758:	4605      	mov	r5, r0
 800975a:	2800      	cmp	r0, #0
 800975c:	d0f2      	beq.n	8009744 <_realloc_r+0x1c>
 800975e:	4631      	mov	r1, r6
 8009760:	4622      	mov	r2, r4
 8009762:	f7ff ffbd 	bl	80096e0 <memcpy>
 8009766:	4631      	mov	r1, r6
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff fbc7 	bl	8008efc <_free_r>
 800976e:	e7e9      	b.n	8009744 <_realloc_r+0x1c>
 8009770:	4635      	mov	r5, r6
 8009772:	e7e7      	b.n	8009744 <_realloc_r+0x1c>

08009774 <_malloc_usable_size_r>:
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f18      	subs	r0, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfbc      	itt	lt
 800977e:	580b      	ldrlt	r3, [r1, r0]
 8009780:	18c0      	addlt	r0, r0, r3
 8009782:	4770      	bx	lr

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
