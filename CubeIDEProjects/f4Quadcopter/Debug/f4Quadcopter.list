
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f394  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800f528  0800f528  0001f528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7c8  0800f7c8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7c8  0800f7c8  0001f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7d0  0800f7d0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7d0  0800f7d0  0001f7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7d4  0800f7d4  0001f7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800f7d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003760  20000204  0800f9dc  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003964  0800f9dc  00023964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021733  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045d8  00000000  00000000  00041967  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001660  00000000  00000000  00045f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001470  00000000  00000000  000475a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d91  00000000  00000000  00048a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000178df  00000000  00000000  0006d7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9fa6  00000000  00000000  00085080  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000642c  00000000  00000000  0014f0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f50c 	.word	0x0800f50c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800f50c 	.word	0x0800f50c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_DMA_Init+0x6c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <MX_DMA_Init+0x6c>)
 8000f58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_DMA_Init+0x6c>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	200b      	movs	r0, #11
 8000f70:	f002 fb2f 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f74:	200b      	movs	r0, #11
 8000f76:	f002 fb48 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	200e      	movs	r0, #14
 8000f80:	f002 fb27 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f84:	200e      	movs	r0, #14
 8000f86:	f002 fb40 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2011      	movs	r0, #17
 8000f90:	f002 fb1f 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f94:	2011      	movs	r0, #17
 8000f96:	f002 fb38 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	202f      	movs	r0, #47	; 0x2f
 8000fa0:	f002 fb17 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000fa4:	202f      	movs	r0, #47	; 0x2f
 8000fa6:	f002 fb30 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <MX_GPIO_Init+0xe0>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a30      	ldr	r2, [pc, #192]	; (8001098 <MX_GPIO_Init+0xe0>)
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_GPIO_Init+0xe0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <MX_GPIO_Init+0xe0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a29      	ldr	r2, [pc, #164]	; (8001098 <MX_GPIO_Init+0xe0>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <MX_GPIO_Init+0xe0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_GPIO_Init+0xe0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a22      	ldr	r2, [pc, #136]	; (8001098 <MX_GPIO_Init+0xe0>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <MX_GPIO_Init+0xe0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_GPIO_Init+0xe0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <MX_GPIO_Init+0xe0>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_GPIO_Init+0xe0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2106      	movs	r1, #6
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <MX_GPIO_Init+0xe4>)
 8001044:	f002 ffc6 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <MX_GPIO_Init+0xe8>)
 8001050:	f002 ffc0 	bl	8003fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001054:	2306      	movs	r3, #6
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_GPIO_Init+0xe4>)
 800106c:	f002 fe00 	bl	8003c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001070:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_GPIO_Init+0xe8>)
 800108a:	f002 fdf1 	bl	8003c70 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020400 	.word	0x40020400

080010a4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f002 ffab 	bl	800403c <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f001 f89e 	bl	800222c <Error_Handler>
  }

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200002ac 	.word	0x200002ac
 80010f8:	40005400 	.word	0x40005400
 80010fc:	00061a80 	.word	0x00061a80

08001100 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C2_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <MX_I2C2_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_I2C2_Init+0x50>)
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <MX_I2C2_Init+0x58>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_I2C2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_I2C2_Init+0x50>)
 800111e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_I2C2_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_I2C2_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_I2C2_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_I2C2_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C2_Init+0x50>)
 800113e:	f002 ff7d 	bl	800403c <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001148:	f001 f870 	bl	800222c <Error_Handler>
  }

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000300 	.word	0x20000300
 8001154:	40005800 	.word	0x40005800
 8001158:	00061a80 	.word	0x00061a80

0800115c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	; 0x30
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a9d      	ldr	r2, [pc, #628]	; (80013f0 <HAL_I2C_MspInit+0x294>)
 800117a:	4293      	cmp	r3, r2
 800117c:	f040 8093 	bne.w	80012a6 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	4b9b      	ldr	r3, [pc, #620]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a9a      	ldr	r2, [pc, #616]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b98      	ldr	r3, [pc, #608]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a0:	2312      	movs	r3, #18
 80011a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011ac:	2304      	movs	r3, #4
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4890      	ldr	r0, [pc, #576]	; (80013f8 <HAL_I2C_MspInit+0x29c>)
 80011b8:	f002 fd5a 	bl	8003c70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	4a8b      	ldr	r2, [pc, #556]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80011c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011ca:	6413      	str	r3, [r2, #64]	; 0x40
 80011cc:	4b89      	ldr	r3, [pc, #548]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80011d8:	4b88      	ldr	r3, [pc, #544]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 80011da:	4a89      	ldr	r2, [pc, #548]	; (8001400 <HAL_I2C_MspInit+0x2a4>)
 80011dc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80011de:	4b87      	ldr	r3, [pc, #540]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 80011e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011e4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e6:	4b85      	ldr	r3, [pc, #532]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ec:	4b83      	ldr	r3, [pc, #524]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f2:	4b82      	ldr	r3, [pc, #520]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 80011f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fa:	4b80      	ldr	r3, [pc, #512]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001200:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001206:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800120c:	4b7b      	ldr	r3, [pc, #492]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 800120e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001212:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001214:	4b79      	ldr	r3, [pc, #484]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800121a:	4878      	ldr	r0, [pc, #480]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 800121c:	f002 fa10 	bl	8003640 <HAL_DMA_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001226:	f001 f801 	bl	800222c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a73      	ldr	r2, [pc, #460]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 800122e:	639a      	str	r2, [r3, #56]	; 0x38
 8001230:	4a72      	ldr	r2, [pc, #456]	; (80013fc <HAL_I2C_MspInit+0x2a0>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001236:	4b73      	ldr	r3, [pc, #460]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 8001238:	4a73      	ldr	r2, [pc, #460]	; (8001408 <HAL_I2C_MspInit+0x2ac>)
 800123a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800123c:	4b71      	ldr	r3, [pc, #452]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 800123e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001242:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001244:	4b6f      	ldr	r3, [pc, #444]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 8001246:	2240      	movs	r2, #64	; 0x40
 8001248:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124a:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001250:	4b6c      	ldr	r3, [pc, #432]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 8001252:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001256:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001258:	4b6a      	ldr	r3, [pc, #424]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800125e:	4b69      	ldr	r3, [pc, #420]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001264:	4b67      	ldr	r3, [pc, #412]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800126a:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 800126c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001270:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001272:	4b64      	ldr	r3, [pc, #400]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 8001274:	2200      	movs	r2, #0
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001278:	4862      	ldr	r0, [pc, #392]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 800127a:	f002 f9e1 	bl	8003640 <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001284:	f000 ffd2 	bl	800222c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a5e      	ldr	r2, [pc, #376]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 800128c:	635a      	str	r2, [r3, #52]	; 0x34
 800128e:	4a5d      	ldr	r2, [pc, #372]	; (8001404 <HAL_I2C_MspInit+0x2a8>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	201f      	movs	r0, #31
 800129a:	f002 f99a 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800129e:	201f      	movs	r0, #31
 80012a0:	f002 f9b3 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012a4:	e0a0      	b.n	80013e8 <HAL_I2C_MspInit+0x28c>
  else if(i2cHandle->Instance==I2C2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a58      	ldr	r2, [pc, #352]	; (800140c <HAL_I2C_MspInit+0x2b0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	f040 809b 	bne.w	80013e8 <HAL_I2C_MspInit+0x28c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b4f      	ldr	r3, [pc, #316]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d8:	2301      	movs	r3, #1
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e0:	2304      	movs	r3, #4
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	4843      	ldr	r0, [pc, #268]	; (80013f8 <HAL_I2C_MspInit+0x29c>)
 80012ec:	f002 fcc0 	bl	8003c70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a3e      	ldr	r2, [pc, #248]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 80012fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_I2C_MspInit+0x298>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 800130e:	4a41      	ldr	r2, [pc, #260]	; (8001414 <HAL_I2C_MspInit+0x2b8>)
 8001310:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001314:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001318:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 800131c:	2240      	movs	r2, #64	; 0x40
 800131e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001320:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001326:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800132c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001346:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001348:	4b31      	ldr	r3, [pc, #196]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800134e:	4830      	ldr	r0, [pc, #192]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001350:	f002 f976 	bl	8003640 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_MspInit+0x202>
      Error_Handler();
 800135a:	f000 ff67 	bl	800222c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a2b      	ldr	r2, [pc, #172]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001362:	635a      	str	r2, [r3, #52]	; 0x34
 8001364:	4a2a      	ldr	r2, [pc, #168]	; (8001410 <HAL_I2C_MspInit+0x2b4>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_I2C_MspInit+0x2c0>)
 800136e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 8001372:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001376:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 8001386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 80013a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 80013ae:	f002 f947 	bl	8003640 <HAL_DMA_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_I2C_MspInit+0x260>
      Error_Handler();
 80013b8:	f000 ff38 	bl	800222c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a16      	ldr	r2, [pc, #88]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <HAL_I2C_MspInit+0x2bc>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2021      	movs	r0, #33	; 0x21
 80013ce:	f002 f900 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80013d2:	2021      	movs	r0, #33	; 0x21
 80013d4:	f002 f919 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2022      	movs	r0, #34	; 0x22
 80013de:	f002 f8f8 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80013e2:	2022      	movs	r0, #34	; 0x22
 80013e4:	f002 f911 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400
 80013fc:	20000414 	.word	0x20000414
 8001400:	40026010 	.word	0x40026010
 8001404:	2000024c 	.word	0x2000024c
 8001408:	400260a0 	.word	0x400260a0
 800140c:	40005800 	.word	0x40005800
 8001410:	200003b4 	.word	0x200003b4
 8001414:	400260b8 	.word	0x400260b8
 8001418:	20000354 	.word	0x20000354
 800141c:	40026058 	.word	0x40026058

08001420 <Setup_IMU>:
float acc_magnitude, acc_x, acc_y, acc_z;
float gyro_x_angle, gyro_y_angle, gyro_z_angle;
float gyro_x_calibration, gyro_y_calibration, gyro_z_calibration;

void Setup_IMU()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af02      	add	r7, sp, #8
	imu_setup_buffer[0] = 0x6B;
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <Setup_IMU+0x90>)
 8001428:	226b      	movs	r2, #107	; 0x6b
 800142a:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x00;
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <Setup_IMU+0x90>)
 800142e:	2200      	movs	r2, #0
 8001430:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8001432:	23d0      	movs	r3, #208	; 0xd0
 8001434:	b299      	uxth	r1, r3
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <Setup_IMU+0x90>)
 8001440:	481c      	ldr	r0, [pc, #112]	; (80014b4 <Setup_IMU+0x94>)
 8001442:	f002 ff33 	bl	80042ac <HAL_I2C_Master_Transmit>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <Setup_IMU+0x98>)
 800144c:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 800144e:	200a      	movs	r0, #10
 8001450:	f001 ffc2 	bl	80033d8 <HAL_Delay>

	imu_setup_buffer[0] = 0x1B;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <Setup_IMU+0x90>)
 8001456:	221b      	movs	r2, #27
 8001458:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x08;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <Setup_IMU+0x90>)
 800145c:	2208      	movs	r2, #8
 800145e:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8001460:	23d0      	movs	r3, #208	; 0xd0
 8001462:	b299      	uxth	r1, r3
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2302      	movs	r3, #2
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <Setup_IMU+0x90>)
 800146e:	4811      	ldr	r0, [pc, #68]	; (80014b4 <Setup_IMU+0x94>)
 8001470:	f002 ff1c 	bl	80042ac <HAL_I2C_Master_Transmit>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <Setup_IMU+0x98>)
 800147a:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 800147c:	200a      	movs	r0, #10
 800147e:	f001 ffab 	bl	80033d8 <HAL_Delay>

	imu_setup_buffer[0] = 0x1A;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <Setup_IMU+0x90>)
 8001484:	221a      	movs	r2, #26
 8001486:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x03;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <Setup_IMU+0x90>)
 800148a:	2203      	movs	r2, #3
 800148c:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 800148e:	23d0      	movs	r3, #208	; 0xd0
 8001490:	b299      	uxth	r1, r3
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2302      	movs	r3, #2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <Setup_IMU+0x90>)
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <Setup_IMU+0x94>)
 800149e:	f002 ff05 	bl	80042ac <HAL_I2C_Master_Transmit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <Setup_IMU+0x98>)
 80014a8:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200004b0 	.word	0x200004b0
 80014b4:	200002ac 	.word	0x200002ac
 80014b8:	200004ce 	.word	0x200004ce

080014bc <Calibrate_IMU>:

void Calibrate_IMU()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2000; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	e035      	b.n	8001534 <Calibrate_IMU+0x78>
	{
		Read_IMU(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f000 f875 	bl	80015b8 <Read_IMU>
		gyro_x_calibration += raw_gyro_acc_data[0];
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <Calibrate_IMU+0xdc>)
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <Calibrate_IMU+0xe0>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Calibrate_IMU+0xe0>)
 80014e8:	edc3 7a00 	vstr	s15, [r3]
		gyro_y_calibration += raw_gyro_acc_data[1];
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <Calibrate_IMU+0xdc>)
 80014ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <Calibrate_IMU+0xe4>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <Calibrate_IMU+0xe4>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
		gyro_z_calibration += raw_gyro_acc_data[2];
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <Calibrate_IMU+0xdc>)
 800150c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <Calibrate_IMU+0xe8>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <Calibrate_IMU+0xe8>)
 8001524:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001528:	2002      	movs	r0, #2
 800152a:	f001 ff55 	bl	80033d8 <HAL_Delay>
	for(int i = 0; i < 2000; i++)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3301      	adds	r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800153a:	dbc5      	blt.n	80014c8 <Calibrate_IMU+0xc>
	}

	gyro_x_angle = 0;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <Calibrate_IMU+0xec>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
	gyro_y_angle = 0;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <Calibrate_IMU+0xf0>)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
	gyro_z_angle = 0;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <Calibrate_IMU+0xf4>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	601a      	str	r2, [r3, #0]

	gyro_x_calibration /= 2000;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <Calibrate_IMU+0xe0>)
 8001556:	ed93 7a00 	vldr	s14, [r3]
 800155a:	eddf 6a16 	vldr	s13, [pc, #88]	; 80015b4 <Calibrate_IMU+0xf8>
 800155e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <Calibrate_IMU+0xe0>)
 8001564:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_calibration /= 2000;
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <Calibrate_IMU+0xe4>)
 800156a:	ed93 7a00 	vldr	s14, [r3]
 800156e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80015b4 <Calibrate_IMU+0xf8>
 8001572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <Calibrate_IMU+0xe4>)
 8001578:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_calibration /= 2000;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <Calibrate_IMU+0xe8>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80015b4 <Calibrate_IMU+0xf8>
 8001586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <Calibrate_IMU+0xe8>)
 800158c:	edc3 7a00 	vstr	s15, [r3]
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000494 	.word	0x20000494
 800159c:	20000484 	.word	0x20000484
 80015a0:	20000490 	.word	0x20000490
 80015a4:	2000048c 	.word	0x2000048c
 80015a8:	2000047c 	.word	0x2000047c
 80015ac:	20000488 	.word	0x20000488
 80015b0:	200004a4 	.word	0x200004a4
 80015b4:	44fa0000 	.word	0x44fa0000

080015b8 <Read_IMU>:

void Read_IMU(uint8_t is_calibrating)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af04      	add	r7, sp, #16
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t *)raw_gyro_acc_buffer, 14, HAL_MAX_DELAY);//Implement failure logic later
 80015c2:	23d0      	movs	r3, #208	; 0xd0
 80015c4:	b299      	uxth	r1, r3
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	230e      	movs	r3, #14
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <Read_IMU+0x140>)
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	223b      	movs	r2, #59	; 0x3b
 80015d8:	4848      	ldr	r0, [pc, #288]	; (80016fc <Read_IMU+0x144>)
 80015da:	f002 ff65 	bl	80044a8 <HAL_I2C_Mem_Read>
	raw_gyro_acc_data[3] = (int16_t)((raw_gyro_acc_buffer[0] << 8) | (raw_gyro_acc_buffer[1]));	//Acc X
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <Read_IMU+0x140>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <Read_IMU+0x140>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b43      	ldr	r3, [pc, #268]	; (8001700 <Read_IMU+0x148>)
 80015f2:	80da      	strh	r2, [r3, #6]
	raw_gyro_acc_data[4] = (int16_t)((raw_gyro_acc_buffer[2] << 8) | (raw_gyro_acc_buffer[3]));	//Acc Y
 80015f4:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <Read_IMU+0x140>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <Read_IMU+0x140>)
 80015fe:	78db      	ldrb	r3, [r3, #3]
 8001600:	b21b      	sxth	r3, r3
 8001602:	4313      	orrs	r3, r2
 8001604:	b21a      	sxth	r2, r3
 8001606:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <Read_IMU+0x148>)
 8001608:	811a      	strh	r2, [r3, #8]
	raw_gyro_acc_data[5] = (int16_t)((raw_gyro_acc_buffer[4] << 8) | (raw_gyro_acc_buffer[5]));	//Acc Z
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <Read_IMU+0x140>)
 800160c:	791b      	ldrb	r3, [r3, #4]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <Read_IMU+0x140>)
 8001614:	795b      	ldrb	r3, [r3, #5]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21a      	sxth	r2, r3
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <Read_IMU+0x148>)
 800161e:	815a      	strh	r2, [r3, #10]
	raw_imu_temp = (int16_t)((raw_gyro_acc_buffer[6] << 8) | (raw_gyro_acc_buffer[7]));
 8001620:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <Read_IMU+0x140>)
 8001622:	799b      	ldrb	r3, [r3, #6]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <Read_IMU+0x140>)
 800162a:	79db      	ldrb	r3, [r3, #7]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <Read_IMU+0x14c>)
 8001634:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[0] = (int16_t)((raw_gyro_acc_buffer[8] << 8) | (raw_gyro_acc_buffer[9]));	//Gyro X
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <Read_IMU+0x140>)
 8001638:	7a1b      	ldrb	r3, [r3, #8]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <Read_IMU+0x140>)
 8001640:	7a5b      	ldrb	r3, [r3, #9]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <Read_IMU+0x148>)
 800164a:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[1] = (int16_t)((raw_gyro_acc_buffer[10] << 8) | (raw_gyro_acc_buffer[11]));	//Gyro Y
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <Read_IMU+0x140>)
 800164e:	7a9b      	ldrb	r3, [r3, #10]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <Read_IMU+0x140>)
 8001656:	7adb      	ldrb	r3, [r3, #11]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <Read_IMU+0x148>)
 8001660:	805a      	strh	r2, [r3, #2]
	raw_gyro_acc_data[2] = (int16_t)((raw_gyro_acc_buffer[12] << 8) | (raw_gyro_acc_buffer[13]));	//Gyro Z
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <Read_IMU+0x140>)
 8001664:	7b1b      	ldrb	r3, [r3, #12]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <Read_IMU+0x140>)
 800166c:	7b5b      	ldrb	r3, [r3, #13]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21a      	sxth	r2, r3
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <Read_IMU+0x148>)
 8001676:	809a      	strh	r2, [r3, #4]

	if(!is_calibrating)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d138      	bne.n	80016f0 <Read_IMU+0x138>
	{
		raw_gyro_acc_data[0] -= gyro_x_calibration;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <Read_IMU+0x148>)
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <Read_IMU+0x150>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169a:	ee17 3a90 	vmov	r3, s15
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <Read_IMU+0x148>)
 80016a2:	801a      	strh	r2, [r3, #0]
		raw_gyro_acc_data[1] -= gyro_y_calibration;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <Read_IMU+0x148>)
 80016a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <Read_IMU+0x154>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c0:	ee17 3a90 	vmov	r3, s15
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <Read_IMU+0x148>)
 80016c8:	805a      	strh	r2, [r3, #2]
		raw_gyro_acc_data[2] -= gyro_z_calibration;
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <Read_IMU+0x148>)
 80016cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <Read_IMU+0x158>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <Read_IMU+0x148>)
 80016ee:	809a      	strh	r2, [r3, #4]
	}
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200004d8 	.word	0x200004d8
 80016fc:	200002ac 	.word	0x200002ac
 8001700:	20000494 	.word	0x20000494
 8001704:	20000478 	.word	0x20000478
 8001708:	20000484 	.word	0x20000484
 800170c:	20000490 	.word	0x20000490
 8001710:	2000048c 	.word	0x2000048c
 8001714:	00000000 	.word	0x00000000

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001720:	f001 fde8 	bl	80032f4 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 8001724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001728:	f001 fe56 	bl	80033d8 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172c:	f000 fb86 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001730:	f7ff fc42 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001734:	f7ff fc08 	bl	8000f48 <MX_DMA_Init>
  MX_I2C1_Init();
 8001738:	f7ff fcb4 	bl	80010a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800173c:	f7ff fce0 	bl	8001100 <MX_I2C2_Init>
  MX_RTC_Init();
 8001740:	f000 fd7c 	bl	800223c <MX_RTC_Init>
  MX_TIM3_Init();
 8001744:	f001 fa98 	bl	8002c78 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001748:	f001 fb12 	bl	8002d70 <MX_TIM5_Init>
  MX_TIM8_Init();
 800174c:	f001 fb80 	bl	8002e50 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8001750:	f00b fa28 	bl	800cba4 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 8001754:	f001 fc42 	bl	8002fdc <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001758:	2100      	movs	r1, #0
 800175a:	4830      	ldr	r0, [pc, #192]	; (800181c <main+0x104>)
 800175c:	f007 fa34 	bl	8008bc8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8001760:	482f      	ldr	r0, [pc, #188]	; (8001820 <main+0x108>)
 8001762:	f007 f96d 	bl	8008a40 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);//Motor 1 - FL
 8001766:	210c      	movs	r1, #12
 8001768:	482e      	ldr	r0, [pc, #184]	; (8001824 <main+0x10c>)
 800176a:	f007 f9b9 	bl	8008ae0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);//Motor 2 - FR
 800176e:	2108      	movs	r1, #8
 8001770:	482c      	ldr	r0, [pc, #176]	; (8001824 <main+0x10c>)
 8001772:	f007 f9b5 	bl	8008ae0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);//Motor 3 - BR
 8001776:	2104      	movs	r1, #4
 8001778:	482a      	ldr	r0, [pc, #168]	; (8001824 <main+0x10c>)
 800177a:	f007 f9b1 	bl	8008ae0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//Motor 4 - BL
 800177e:	2100      	movs	r1, #0
 8001780:	4828      	ldr	r0, [pc, #160]	; (8001824 <main+0x10c>)
 8001782:	f007 f9ad 	bl	8008ae0 <HAL_TIM_PWM_Start>

  auto_packet_buffer[0].total_width = 0;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <main+0x110>)
 8001788:	2200      	movs	r2, #0
 800178a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  auto_packet_buffer[0].var_count = 0;
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <main+0x110>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  auto_packet_buffer[0].id = 0x01;
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <main+0x110>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
  AddToAutoBuffer(0, &(raw_gyro_acc_data[0]), 2);
 800179c:	2202      	movs	r2, #2
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <main+0x114>)
 80017a0:	2000      	movs	r0, #0
 80017a2:	f001 f971 	bl	8002a88 <AddToAutoBuffer>
  AddToAutoBuffer(0, &(raw_gyro_acc_data[1]), 2);
 80017a6:	2202      	movs	r2, #2
 80017a8:	4921      	ldr	r1, [pc, #132]	; (8001830 <main+0x118>)
 80017aa:	2000      	movs	r0, #0
 80017ac:	f001 f96c 	bl	8002a88 <AddToAutoBuffer>
  AddToAutoBuffer(0, &(raw_gyro_acc_data[2]), 2);
 80017b0:	2202      	movs	r2, #2
 80017b2:	4920      	ldr	r1, [pc, #128]	; (8001834 <main+0x11c>)
 80017b4:	2000      	movs	r0, #0
 80017b6:	f001 f967 	bl	8002a88 <AddToAutoBuffer>
  AddToAutoBuffer(0, &gyro_x_angle, 4);
 80017ba:	2204      	movs	r2, #4
 80017bc:	491e      	ldr	r1, [pc, #120]	; (8001838 <main+0x120>)
 80017be:	2000      	movs	r0, #0
 80017c0:	f001 f962 	bl	8002a88 <AddToAutoBuffer>
  AddToAutoBuffer(0, &gyro_y_angle, 4);
 80017c4:	2204      	movs	r2, #4
 80017c6:	491d      	ldr	r1, [pc, #116]	; (800183c <main+0x124>)
 80017c8:	2000      	movs	r0, #0
 80017ca:	f001 f95d 	bl	8002a88 <AddToAutoBuffer>
  AddToAutoBuffer(0, &gyro_z_angle, 4);
 80017ce:	2204      	movs	r2, #4
 80017d0:	491b      	ldr	r1, [pc, #108]	; (8001840 <main+0x128>)
 80017d2:	2000      	movs	r0, #0
 80017d4:	f001 f958 	bl	8002a88 <AddToAutoBuffer>
  AddToAutoBuffer(0, &how_long_to_loop_main, 4);
 80017d8:	2204      	movs	r2, #4
 80017da:	491a      	ldr	r1, [pc, #104]	; (8001844 <main+0x12c>)
 80017dc:	2000      	movs	r0, #0
 80017de:	f001 f953 	bl	8002a88 <AddToAutoBuffer>
  AddToAutoBuffer(0, &(ppm_channels[2]), 4);
 80017e2:	2204      	movs	r2, #4
 80017e4:	4918      	ldr	r1, [pc, #96]	; (8001848 <main+0x130>)
 80017e6:	2000      	movs	r0, #0
 80017e8:	f001 f94e 	bl	8002a88 <AddToAutoBuffer>
  auto_packet_count += 1;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <main+0x134>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <main+0x134>)
 80017f6:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < 6; i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	e008      	b.n	8001810 <main+0xf8>
  {
	  ppm_channels[i] = 1000;
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <main+0x138>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 6; i++)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3301      	adds	r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b05      	cmp	r3, #5
 8001814:	ddf3      	ble.n	80017fe <main+0xe6>
  }

  for(int i = 0; i < 35; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	e023      	b.n	8001864 <main+0x14c>
 800181c:	20001fc4 	.word	0x20001fc4
 8001820:	20002044 	.word	0x20002044
 8001824:	20001f84 	.word	0x20001f84
 8001828:	20000a34 	.word	0x20000a34
 800182c:	20000494 	.word	0x20000494
 8001830:	20000496 	.word	0x20000496
 8001834:	20000498 	.word	0x20000498
 8001838:	2000047c 	.word	0x2000047c
 800183c:	20000488 	.word	0x20000488
 8001840:	200004a4 	.word	0x200004a4
 8001844:	20000510 	.word	0x20000510
 8001848:	20000548 	.word	0x20000548
 800184c:	20000239 	.word	0x20000239
 8001850:	20000540 	.word	0x20000540
  {
	  empty_data_packet.payload[i] = '\0';
 8001854:	4ad0      	ldr	r2, [pc, #832]	; (8001b98 <main+0x480>)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	4413      	add	r3, r2
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b22      	cmp	r3, #34	; 0x22
 8001868:	ddf4      	ble.n	8001854 <main+0x13c>
  }

  Setup_IMU();
 800186a:	f7ff fdd9 	bl	8001420 <Setup_IMU>

  //CDC_Transmit_FS(buf, strlen((char*)buf));

  HAL_Delay(2000);
 800186e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001872:	f001 fdb1 	bl	80033d8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(GetMillisDifference(&temp_led_timer) > 500)
 8001876:	48c9      	ldr	r0, [pc, #804]	; (8001b9c <main+0x484>)
 8001878:	f000 fc4a 	bl	8002110 <GetMillisDifference>
 800187c:	4603      	mov	r3, r0
 800187e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001882:	d908      	bls.n	8001896 <main+0x17e>
	  {
		  temp_led_timer = GetMillis();
 8001884:	f000 fc32 	bl	80020ec <GetMillis>
 8001888:	4602      	mov	r2, r0
 800188a:	4bc4      	ldr	r3, [pc, #784]	; (8001b9c <main+0x484>)
 800188c:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800188e:	2102      	movs	r1, #2
 8001890:	48c3      	ldr	r0, [pc, #780]	; (8001ba0 <main+0x488>)
 8001892:	f002 fbb8 	bl	8004006 <HAL_GPIO_TogglePin>
	  }

	  if(GetMicrosDifference(&pwm_output_timer) >= 4000)
 8001896:	48c3      	ldr	r0, [pc, #780]	; (8001ba4 <main+0x48c>)
 8001898:	f000 fc48 	bl	800212c <GetMicrosDifference>
 800189c:	4603      	mov	r3, r0
 800189e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80018a2:	d309      	bcc.n	80018b8 <main+0x1a0>
	  {
		  pwm_output_timer = GetMicros();
 80018a4:	f000 fc16 	bl	80020d4 <GetMicros>
 80018a8:	4602      	mov	r2, r0
 80018aa:	4bbe      	ldr	r3, [pc, #760]	; (8001ba4 <main+0x48c>)
 80018ac:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim8, 4999); //Reset motor PWN counter for fast response time
 80018ae:	4bbe      	ldr	r3, [pc, #760]	; (8001ba8 <main+0x490>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  if(GetMicrosDifference(&main_loop_timer) >= 2000)
 80018b8:	48bc      	ldr	r0, [pc, #752]	; (8001bac <main+0x494>)
 80018ba:	f000 fc37 	bl	800212c <GetMicrosDifference>
 80018be:	4603      	mov	r3, r0
 80018c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80018c4:	f0c0 8280 	bcc.w	8001dc8 <main+0x6b0>
	  {
		  how_long_to_loop_main = GetMicrosDifference(&main_loop_timer);
 80018c8:	48b8      	ldr	r0, [pc, #736]	; (8001bac <main+0x494>)
 80018ca:	f000 fc2f 	bl	800212c <GetMicrosDifference>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4bb7      	ldr	r3, [pc, #732]	; (8001bb0 <main+0x498>)
 80018d2:	601a      	str	r2, [r3, #0]
		  main_loop_timer = GetMicros();
 80018d4:	f000 fbfe 	bl	80020d4 <GetMicros>
 80018d8:	4602      	mov	r2, r0
 80018da:	4bb4      	ldr	r3, [pc, #720]	; (8001bac <main+0x494>)
 80018dc:	601a      	str	r2, [r3, #0]

		  Read_IMU(0);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fe6a 	bl	80015b8 <Read_IMU>

		  gyro_x = (float)raw_gyro_acc_data[0] / 65.5;
 80018e4:	4bb3      	ldr	r3, [pc, #716]	; (8001bb4 <main+0x49c>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f2:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001bb8 <main+0x4a0>
 80018f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018fa:	4bb0      	ldr	r3, [pc, #704]	; (8001bbc <main+0x4a4>)
 80018fc:	edc3 7a00 	vstr	s15, [r3]
		  gyro_y = (float)raw_gyro_acc_data[1] / -65.5;
 8001900:	4bac      	ldr	r3, [pc, #688]	; (8001bb4 <main+0x49c>)
 8001902:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800190e:	eddf 6aac 	vldr	s13, [pc, #688]	; 8001bc0 <main+0x4a8>
 8001912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001916:	4bab      	ldr	r3, [pc, #684]	; (8001bc4 <main+0x4ac>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
		  gyro_z = (float)raw_gyro_acc_data[2] / -65.5;
 800191c:	4ba5      	ldr	r3, [pc, #660]	; (8001bb4 <main+0x49c>)
 800191e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192a:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8001bc0 <main+0x4a8>
 800192e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001932:	4ba5      	ldr	r3, [pc, #660]	; (8001bc8 <main+0x4b0>)
 8001934:	edc3 7a00 	vstr	s15, [r3]

		  acc_magnitude = sqrt(((float)raw_gyro_acc_data[3] * (float)raw_gyro_acc_data[3]) + ((float)raw_gyro_acc_data[4] * (float)raw_gyro_acc_data[4]) + ((float)raw_gyro_acc_data[5] * (float)raw_gyro_acc_data[5]));
 8001938:	4b9e      	ldr	r3, [pc, #632]	; (8001bb4 <main+0x49c>)
 800193a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001946:	4b9b      	ldr	r3, [pc, #620]	; (8001bb4 <main+0x49c>)
 8001948:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001958:	4b96      	ldr	r3, [pc, #600]	; (8001bb4 <main+0x49c>)
 800195a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001966:	4b93      	ldr	r3, [pc, #588]	; (8001bb4 <main+0x49c>)
 8001968:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197c:	4b8d      	ldr	r3, [pc, #564]	; (8001bb4 <main+0x49c>)
 800197e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800198a:	4b8a      	ldr	r3, [pc, #552]	; (8001bb4 <main+0x49c>)
 800198c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a0:	ee17 0a90 	vmov	r0, s15
 80019a4:	f7fe fdd0 	bl	8000548 <__aeabi_f2d>
 80019a8:	4603      	mov	r3, r0
 80019aa:	460c      	mov	r4, r1
 80019ac:	ec44 3b10 	vmov	d0, r3, r4
 80019b0:	f00c faba 	bl	800df28 <sqrt>
 80019b4:	ec54 3b10 	vmov	r3, r4, d0
 80019b8:	4618      	mov	r0, r3
 80019ba:	4621      	mov	r1, r4
 80019bc:	f7ff f8f4 	bl	8000ba8 <__aeabi_d2f>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b82      	ldr	r3, [pc, #520]	; (8001bcc <main+0x4b4>)
 80019c4:	601a      	str	r2, [r3, #0]

		  if(acc_magnitude != 0)
 80019c6:	4b81      	ldr	r3, [pc, #516]	; (8001bcc <main+0x4b4>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d06f      	beq.n	8001ab6 <main+0x39e>
		  {
			  if(abs(raw_gyro_acc_data[4]) < acc_magnitude)
 80019d6:	4b77      	ldr	r3, [pc, #476]	; (8001bb4 <main+0x49c>)
 80019d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bfb8      	it	lt
 80019e0:	425b      	neglt	r3, r3
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ea:	4b78      	ldr	r3, [pc, #480]	; (8001bcc <main+0x4b4>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f8:	d525      	bpl.n	8001a46 <main+0x32e>
			  {
				  acc_x = asin((float)raw_gyro_acc_data[4] / acc_magnitude) * 57.296;
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <main+0x49c>)
 80019fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a08:	4b70      	ldr	r3, [pc, #448]	; (8001bcc <main+0x4b4>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a12:	ee16 0a90 	vmov	r0, s13
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	ec44 3b10 	vmov	d0, r3, r4
 8001a22:	f00c fa29 	bl	800de78 <asin>
 8001a26:	ec51 0b10 	vmov	r0, r1, d0
 8001a2a:	a357      	add	r3, pc, #348	; (adr r3, 8001b88 <main+0x470>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe fde2 	bl	80005f8 <__aeabi_dmul>
 8001a34:	4603      	mov	r3, r0
 8001a36:	460c      	mov	r4, r1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	f7ff f8b4 	bl	8000ba8 <__aeabi_d2f>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <main+0x4b8>)
 8001a44:	601a      	str	r2, [r3, #0]
			  }

			  if(abs(raw_gyro_acc_data[3]) < acc_magnitude)
 8001a46:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <main+0x49c>)
 8001a48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bfb8      	it	lt
 8001a50:	425b      	neglt	r3, r3
 8001a52:	ee07 3a90 	vmov	s15, r3
 8001a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <main+0x4b4>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a68:	d525      	bpl.n	8001ab6 <main+0x39e>
			  {
				  acc_y = asin((float)raw_gyro_acc_data[3] / acc_magnitude) * 57.296;
 8001a6a:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <main+0x49c>)
 8001a6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a78:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <main+0x4b4>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a82:	ee16 0a90 	vmov	r0, s13
 8001a86:	f7fe fd5f 	bl	8000548 <__aeabi_f2d>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	460c      	mov	r4, r1
 8001a8e:	ec44 3b10 	vmov	d0, r3, r4
 8001a92:	f00c f9f1 	bl	800de78 <asin>
 8001a96:	ec51 0b10 	vmov	r0, r1, d0
 8001a9a:	a33b      	add	r3, pc, #236	; (adr r3, 8001b88 <main+0x470>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4621      	mov	r1, r4
 8001aac:	f7ff f87c 	bl	8000ba8 <__aeabi_d2f>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <main+0x4bc>)
 8001ab4:	601a      	str	r2, [r3, #0]
			  }
		  }

		  gyro_x_angle += (gyro_x) * ((float)how_long_to_loop_main / 1000000);
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <main+0x498>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001be4 <main+0x4cc>
 8001ac6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <main+0x4a4>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad4:	4b40      	ldr	r3, [pc, #256]	; (8001bd8 <main+0x4c0>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <main+0x4c0>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
		  gyro_y_angle += (gyro_y) * ((float)how_long_to_loop_main / 1000000);
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <main+0x498>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	ee07 3a90 	vmov	s15, r3
 8001aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001be4 <main+0x4cc>
 8001af4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <main+0x4ac>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <main+0x4c4>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <main+0x4c4>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
		  gyro_z_angle += (gyro_z) * ((float)how_long_to_loop_main / 1000000);
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <main+0x498>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001be4 <main+0x4cc>
 8001b22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <main+0x4b0>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <main+0x4c8>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <main+0x4c8>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]

		  gyro_x_angle += (gyro_y_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <main+0x4c0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fcff 	bl	8000548 <__aeabi_f2d>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <main+0x4c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcf8 	bl	8000548 <__aeabi_f2d>
 8001b58:	4680      	mov	r8, r0
 8001b5a:	4689      	mov	r9, r1
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <main+0x4b0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcf1 	bl	8000548 <__aeabi_f2d>
 8001b66:	a30a      	add	r3, pc, #40	; (adr r3, 8001b90 <main+0x478>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4692      	mov	sl, r2
 8001b76:	469b      	mov	fp, r3
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <main+0x498>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	e030      	b.n	8001be8 <main+0x4d0>
 8001b86:	bf00      	nop
 8001b88:	53f7ced9 	.word	0x53f7ced9
 8001b8c:	404ca5e3 	.word	0x404ca5e3
 8001b90:	ad42c3ca 	.word	0xad42c3ca
 8001b94:	3f91de69 	.word	0x3f91de69
 8001b98:	20001f38 	.word	0x20001f38
 8001b9c:	2000053c 	.word	0x2000053c
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	2000050c 	.word	0x2000050c
 8001ba8:	20001f84 	.word	0x20001f84
 8001bac:	20000564 	.word	0x20000564
 8001bb0:	20000510 	.word	0x20000510
 8001bb4:	20000494 	.word	0x20000494
 8001bb8:	42830000 	.word	0x42830000
 8001bbc:	200004a0 	.word	0x200004a0
 8001bc0:	c2830000 	.word	0xc2830000
 8001bc4:	20000480 	.word	0x20000480
 8001bc8:	200004d0 	.word	0x200004d0
 8001bcc:	200004a8 	.word	0x200004a8
 8001bd0:	200004ac 	.word	0x200004ac
 8001bd4:	20000474 	.word	0x20000474
 8001bd8:	2000047c 	.word	0x2000047c
 8001bdc:	20000488 	.word	0x20000488
 8001be0:	200004a4 	.word	0x200004a4
 8001be4:	49742400 	.word	0x49742400
 8001be8:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001be4 <main+0x4cc>
 8001bec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bf0:	ee16 0a90 	vmov	r0, s13
 8001bf4:	f7fe fca8 	bl	8000548 <__aeabi_f2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4650      	mov	r0, sl
 8001bfe:	4659      	mov	r1, fp
 8001c00:	f7fe fcfa 	bl	80005f8 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	ec43 2b17 	vmov	d7, r2, r3
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	f00c f8e8 	bl	800dde8 <sin>
 8001c18:	ec53 2b10 	vmov	r2, r3, d0
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f7fe fcea 	bl	80005f8 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fb2e 	bl	800028c <__adddf3>
 8001c30:	4603      	mov	r3, r0
 8001c32:	460c      	mov	r4, r1
 8001c34:	4618      	mov	r0, r3
 8001c36:	4621      	mov	r1, r4
 8001c38:	f7fe ffb6 	bl	8000ba8 <__aeabi_d2f>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <main+0x6f8>)
 8001c40:	601a      	str	r2, [r3, #0]
		  gyro_y_angle -= (gyro_x_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 8001c42:	4b74      	ldr	r3, [pc, #464]	; (8001e14 <main+0x6fc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc7e 	bl	8000548 <__aeabi_f2d>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	460d      	mov	r5, r1
 8001c50:	4b6f      	ldr	r3, [pc, #444]	; (8001e10 <main+0x6f8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc77 	bl	8000548 <__aeabi_f2d>
 8001c5a:	4680      	mov	r8, r0
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	4b6e      	ldr	r3, [pc, #440]	; (8001e18 <main+0x700>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc70 	bl	8000548 <__aeabi_f2d>
 8001c68:	a363      	add	r3, pc, #396	; (adr r3, 8001df8 <main+0x6e0>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4692      	mov	sl, r2
 8001c78:	469b      	mov	fp, r3
 8001c7a:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <main+0x704>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c86:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001e20 <main+0x708>
 8001c8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c8e:	ee16 0a90 	vmov	r0, s13
 8001c92:	f7fe fc59 	bl	8000548 <__aeabi_f2d>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4650      	mov	r0, sl
 8001c9c:	4659      	mov	r1, fp
 8001c9e:	f7fe fcab 	bl	80005f8 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	ec43 2b17 	vmov	d7, r2, r3
 8001caa:	eeb0 0a47 	vmov.f32	s0, s14
 8001cae:	eef0 0a67 	vmov.f32	s1, s15
 8001cb2:	f00c f899 	bl	800dde8 <sin>
 8001cb6:	ec53 2b10 	vmov	r2, r3, d0
 8001cba:	4640      	mov	r0, r8
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	f7fe fc9b 	bl	80005f8 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	4629      	mov	r1, r5
 8001cca:	f7fe fadd 	bl	8000288 <__aeabi_dsub>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	f7fe ff67 	bl	8000ba8 <__aeabi_d2f>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <main+0x6fc>)
 8001cde:	601a      	str	r2, [r3, #0]

		  gyro_x_angle = (gyro_x_angle * 0.9985) + (acc_x * (1.0000 - 0.9985));
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <main+0x6f8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc2f 	bl	8000548 <__aeabi_f2d>
 8001cea:	a345      	add	r3, pc, #276	; (adr r3, 8001e00 <main+0x6e8>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fc82 	bl	80005f8 <__aeabi_dmul>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	460c      	mov	r4, r1
 8001cf8:	4625      	mov	r5, r4
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <main+0x70c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc21 	bl	8000548 <__aeabi_f2d>
 8001d06:	a340      	add	r3, pc, #256	; (adr r3, 8001e08 <main+0x6f0>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc74 	bl	80005f8 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fab8 	bl	800028c <__adddf3>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	4618      	mov	r0, r3
 8001d22:	4621      	mov	r1, r4
 8001d24:	f7fe ff40 	bl	8000ba8 <__aeabi_d2f>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <main+0x6f8>)
 8001d2c:	601a      	str	r2, [r3, #0]
		  gyro_y_angle = (gyro_y_angle * 0.9985) + (acc_y * (1.0000 - 0.9985));
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <main+0x6fc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fc08 	bl	8000548 <__aeabi_f2d>
 8001d38:	a331      	add	r3, pc, #196	; (adr r3, 8001e00 <main+0x6e8>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fc5b 	bl	80005f8 <__aeabi_dmul>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	4625      	mov	r5, r4
 8001d48:	461c      	mov	r4, r3
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <main+0x710>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbfa 	bl	8000548 <__aeabi_f2d>
 8001d54:	a32c      	add	r3, pc, #176	; (adr r3, 8001e08 <main+0x6f0>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fc4d 	bl	80005f8 <__aeabi_dmul>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f7fe fa91 	bl	800028c <__adddf3>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460c      	mov	r4, r1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4621      	mov	r1, r4
 8001d72:	f7fe ff19 	bl	8000ba8 <__aeabi_d2f>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <main+0x6fc>)
 8001d7a:	601a      	str	r2, [r3, #0]

		  if(gyro_z_angle < 0)
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <main+0x714>)
 8001d7e:	edd3 7a00 	vldr	s15, [r3]
 8001d82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	d509      	bpl.n	8001da0 <main+0x688>
			  gyro_z_angle += 360;
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <main+0x714>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001e30 <main+0x718>
 8001d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d9a:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <main+0x714>)
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
		  if(gyro_z_angle >= 360)
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <main+0x714>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001e30 <main+0x718>
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	db09      	blt.n	8001dc8 <main+0x6b0>
			  gyro_z_angle -= 360;
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <main+0x714>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001e30 <main+0x718>
 8001dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <main+0x714>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
	  }

	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, ppm_channels[2]);
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <main+0x71c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <main+0x720>)
 8001dce:	6892      	ldr	r2, [r2, #8]
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, ppm_channels[2]);
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <main+0x71c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <main+0x720>)
 8001dd8:	6892      	ldr	r2, [r2, #8]
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, ppm_channels[2]);
 8001ddc:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <main+0x71c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <main+0x720>)
 8001de2:	6892      	ldr	r2, [r2, #8]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, ppm_channels[2]);
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <main+0x71c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <main+0x720>)
 8001dec:	6892      	ldr	r2, [r2, #8]
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34

	  telem_loop();
 8001df0:	f000 fb66 	bl	80024c0 <telem_loop>
	  if(GetMillisDifference(&temp_led_timer) > 500)
 8001df4:	e53f      	b.n	8001876 <main+0x15e>
 8001df6:	bf00      	nop
 8001df8:	ad42c3ca 	.word	0xad42c3ca
 8001dfc:	3f91de69 	.word	0x3f91de69
 8001e00:	45a1cac1 	.word	0x45a1cac1
 8001e04:	3feff3b6 	.word	0x3feff3b6
 8001e08:	bc6a7e00 	.word	0xbc6a7e00
 8001e0c:	3f589374 	.word	0x3f589374
 8001e10:	2000047c 	.word	0x2000047c
 8001e14:	20000488 	.word	0x20000488
 8001e18:	200004d0 	.word	0x200004d0
 8001e1c:	20000510 	.word	0x20000510
 8001e20:	49742400 	.word	0x49742400
 8001e24:	200004ac 	.word	0x200004ac
 8001e28:	20000474 	.word	0x20000474
 8001e2c:	200004a4 	.word	0x200004a4
 8001e30:	43b40000 	.word	0x43b40000
 8001e34:	20001f84 	.word	0x20001f84
 8001e38:	20000540 	.word	0x20000540

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b098      	sub	sp, #96	; 0x60
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e46:	2230      	movs	r2, #48	; 0x30
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f00b fbbe 	bl	800d5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e60:	f107 030c 	add.w	r3, r7, #12
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <SystemClock_Config+0xfc>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <SystemClock_Config+0xfc>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <SystemClock_Config+0xfc>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <SystemClock_Config+0x100>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <SystemClock_Config+0x100>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <SystemClock_Config+0x100>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ea6:	2309      	movs	r3, #9
 8001ea8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ebe:	2310      	movs	r3, #16
 8001ec0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ec2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ec6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 ff75 	bl	8007dc4 <HAL_RCC_OscConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ee0:	f000 f9a4 	bl	800222c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ef0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	2105      	movs	r1, #5
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 f9ce 	bl	80082a4 <HAL_RCC_ClockConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001f0e:	f000 f98d 	bl	800222c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f12:	2302      	movs	r3, #2
 8001f14:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	4618      	mov	r0, r3
 8001f22:	f006 fb9b 	bl	800865c <HAL_RCCEx_PeriphCLKConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001f2c:	f000 f97e 	bl	800222c <Error_Handler>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3760      	adds	r7, #96	; 0x60
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000

08001f40 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a4e      	ldr	r2, [pc, #312]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	f040 8094 	bne.w	800207a <HAL_TIM_IC_CaptureCallback+0x13a>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8001f52:	2100      	movs	r1, #0
 8001f54:	484b      	ldr	r0, [pc, #300]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001f56:	f007 f9c1 	bl	80092dc <HAL_TIM_ReadCapturedValue>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001f5e:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001f60:	2101      	movs	r1, #1
 8001f62:	484a      	ldr	r0, [pc, #296]	; (800208c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001f64:	f002 f81e 	bl	8003fa4 <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d014      	beq.n	8001f98 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001f74:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020a 	bic.w	r2, r2, #10
 8001f84:	621a      	str	r2, [r3, #32]
 8001f86:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0202 	orr.w	r2, r2, #2
 8001f94:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8001f96:	e070      	b.n	800207a <HAL_TIM_IC_CaptureCallback+0x13a>
			if (current_ppm_capture > last_ppm_capture)
 8001f98:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d907      	bls.n	8001fb4 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 8001fa4:	4b38      	ldr	r3, [pc, #224]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	4a39      	ldr	r2, [pc, #228]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00d      	b.n	8001fd0 <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b35      	ldr	r3, [pc, #212]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d807      	bhi.n	8001fd0 <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <HAL_TIM_IC_CaptureCallback+0x150>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	4a31      	ldr	r2, [pc, #196]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001fce:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d903      	bls.n	8001fe4 <HAL_TIM_IC_CaptureCallback+0xa4>
				current_ppm_channel = 0;
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e006      	b.n	8001ff2 <HAL_TIM_IC_CaptureCallback+0xb2>
				current_ppm_channel++;
 8001fe4:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001ff0:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d903      	bls.n	8002006 <HAL_TIM_IC_CaptureCallback+0xc6>
				test_max_frequency = frequency_read;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a26      	ldr	r2, [pc, #152]	; (800209c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8002004:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 8002006:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8002010:	6013      	str	r3, [r2, #0]
			if(frequency_read < 1000)
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201a:	d204      	bcs.n	8002026 <HAL_TIM_IC_CaptureCallback+0xe6>
				frequency_read = 1000;
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 800201e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e008      	b.n	8002038 <HAL_TIM_IC_CaptureCallback+0xf8>
			else if(frequency_read > 2000)
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800202e:	d903      	bls.n	8002038 <HAL_TIM_IC_CaptureCallback+0xf8>
				frequency_read = 2000;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8002032:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002036:	601a      	str	r2, [r3, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 8002038:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x158>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00d      	beq.n	800205e <HAL_TIM_IC_CaptureCallback+0x11e>
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x158>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b06      	cmp	r3, #6
 800204a:	d808      	bhi.n	800205e <HAL_TIM_IC_CaptureCallback+0x11e>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_TIM_IC_CaptureCallback+0x158>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	4a0f      	ldr	r2, [pc, #60]	; (8002094 <HAL_TIM_IC_CaptureCallback+0x154>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4911      	ldr	r1, [pc, #68]	; (80020a0 <HAL_TIM_IC_CaptureCallback+0x160>)
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a1a      	ldr	r2, [r3, #32]
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 020a 	bic.w	r2, r2, #10
 800206c:	621a      	str	r2, [r3, #32]
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_TIM_IC_CaptureCallback+0x144>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a12      	ldr	r2, [r2, #32]
 8002078:	621a      	str	r2, [r3, #32]
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20001fc4 	.word	0x20001fc4
 8002088:	20000224 	.word	0x20000224
 800208c:	40020000 	.word	0x40020000
 8002090:	20000228 	.word	0x20000228
 8002094:	20000014 	.word	0x20000014
 8002098:	2000022c 	.word	0x2000022c
 800209c:	20000230 	.word	0x20000230
 80020a0:	20000540 	.word	0x20000540

080020a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d104      	bne.n	80020be <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//micros_timer_base += 65000;//65536;
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3341      	adds	r3, #65	; 0x41
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80020bc:	6013      	str	r3, [r2, #0]
	}
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20002044 	.word	0x20002044
 80020d0:	20000560 	.word	0x20000560

080020d4 <GetMicros>:

uint32_t GetMicros()
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim9);
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <GetMicros+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20002044 	.word	0x20002044

080020ec <GetMillis>:

uint32_t GetMillis()
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 80020f0:	f7ff fff0 	bl	80020d4 <GetMicros>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <GetMillis+0x1c>)
 80020f8:	fba3 2302 	umull	r2, r3, r3, r2
 80020fc:	099a      	lsrs	r2, r3, #6
 80020fe:	4b03      	ldr	r3, [pc, #12]	; (800210c <GetMillis+0x20>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	10624dd3 	.word	0x10624dd3
 800210c:	20000560 	.word	0x20000560

08002110 <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 8002118:	f7ff ffe8 	bl	80020ec <GetMillis>
 800211c:	4602      	mov	r2, r0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1ad3      	subs	r3, r2, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8002134:	f7ff ffce 	bl	80020d4 <GetMicros>
 8002138:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	429a      	cmp	r2, r3
 8002146:	d905      	bls.n	8002154 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e00c      	b.n	800216e <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	429a      	cmp	r2, r3
 800215c:	d207      	bcs.n	800216e <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 800216a:	33e8      	adds	r3, #232	; 0xe8
 800216c:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 800216e:	68fb      	ldr	r3, [r7, #12]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d102      	bne.n	80021a2 <HAL_I2C_MasterTxCpltCallback+0x16>
	{
		tx_done = 1;
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_I2C_MasterTxCpltCallback+0x28>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
	}
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000300 	.word	0x20000300
 80021b4:	20000240 	.word	0x20000240

080021b8 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d107      	bne.n	80021d8 <HAL_I2C_MasterRxCpltCallback+0x20>
	{
		rx_done = 1;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <HAL_I2C_MasterRxCpltCallback+0x30>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
		acks_counted++;
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_I2C_MasterRxCpltCallback+0x34>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_I2C_MasterRxCpltCallback+0x34>)
 80021d6:	6013      	str	r3, [r2, #0]
	}
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20000300 	.word	0x20000300
 80021e8:	2000023f 	.word	0x2000023f
 80021ec:	20000588 	.word	0x20000588

080021f0 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_RTC_Init+0x44>)
 8002242:	4a10      	ldr	r2, [pc, #64]	; (8002284 <MX_RTC_Init+0x48>)
 8002244:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_RTC_Init+0x44>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_RTC_Init+0x44>)
 800224e:	227f      	movs	r2, #127	; 0x7f
 8002250:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_RTC_Init+0x44>)
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_RTC_Init+0x44>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_RTC_Init+0x44>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_RTC_Init+0x44>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_RTC_Init+0x44>)
 800226c:	f006 fad8 	bl	8008820 <HAL_RTC_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002276:	f7ff ffd9 	bl	800222c <Error_Handler>
  }

}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000568 	.word	0x20000568
 8002284:	40002800 	.word	0x40002800

08002288 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a05      	ldr	r2, [pc, #20]	; (80022ac <HAL_RTC_MspInit+0x24>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d102      	bne.n	80022a0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RTC_MspInit+0x28>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40002800 	.word	0x40002800
 80022b0:	42470e3c 	.word	0x42470e3c

080022b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_MspInit+0x4c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <HAL_MspInit+0x4c>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_MspInit+0x4c>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_MspInit+0x4c>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_MspInit+0x4c>)
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_MspInit+0x4c>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f001 f81e 	bl	8003398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <DMA1_Stream0_IRQHandler+0x10>)
 8002366:	f001 fa3b 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000414 	.word	0x20000414

08002374 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA1_Stream3_IRQHandler+0x10>)
 800237a:	f001 fa31 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000354 	.word	0x20000354

08002388 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <DMA1_Stream6_IRQHandler+0x10>)
 800238e:	f001 fa27 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	2000024c 	.word	0x2000024c

0800239c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80023a2:	f006 fc79 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20002044 	.word	0x20002044

080023b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <I2C1_EV_IRQHandler+0x10>)
 80023b6:	f002 fc51 	bl	8004c5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200002ac 	.word	0x200002ac

080023c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <I2C2_EV_IRQHandler+0x10>)
 80023ca:	f002 fc47 	bl	8004c5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000300 	.word	0x20000300

080023d8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <I2C2_ER_IRQHandler+0x10>)
 80023de:	f002 fda3 	bl	8004f28 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000300 	.word	0x20000300

080023ec <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <DMA1_Stream7_IRQHandler+0x10>)
 80023f2:	f001 f9f5 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200003b4 	.word	0x200003b4

08002400 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <TIM5_IRQHandler+0x10>)
 8002406:	f006 fc47 	bl	8008c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20001fc4 	.word	0x20001fc4

08002414 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <OTG_FS_IRQHandler+0x10>)
 800241a:	f004 fca0 	bl	8006d5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20003558 	.word	0x20003558

08002428 <_sbrk>:
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
 8002458:	f00b f87e 	bl	800d558 <__errno>
 800245c:	4602      	mov	r2, r0
 800245e:	230c      	movs	r3, #12
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20020000 	.word	0x20020000
 8002488:	00000400 	.word	0x00000400
 800248c:	20000234 	.word	0x20000234
 8002490:	20003968 	.word	0x20003968

08002494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <SystemInit+0x28>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <SystemInit+0x28>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <SystemInit+0x28>)
 80024aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ae:	609a      	str	r2, [r3, #8]
#endif
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <telem_loop>:
uint32_t acks_counted;
uint32_t acks_per_second;


void telem_loop()
{
 80024c0:	b5b0      	push	{r4, r5, r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af02      	add	r7, sp, #8
	if(GetMillisDifference(&acks_per_second_timer) >= 1000)
 80024c6:	48b4      	ldr	r0, [pc, #720]	; (8002798 <telem_loop+0x2d8>)
 80024c8:	f7ff fe22 	bl	8002110 <GetMillisDifference>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d2:	d30b      	bcc.n	80024ec <telem_loop+0x2c>
	{
		acks_per_second_timer = GetMillis();
 80024d4:	f7ff fe0a 	bl	80020ec <GetMillis>
 80024d8:	4602      	mov	r2, r0
 80024da:	4baf      	ldr	r3, [pc, #700]	; (8002798 <telem_loop+0x2d8>)
 80024dc:	601a      	str	r2, [r3, #0]
		acks_per_second = acks_counted;
 80024de:	4baf      	ldr	r3, [pc, #700]	; (800279c <telem_loop+0x2dc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4aaf      	ldr	r2, [pc, #700]	; (80027a0 <telem_loop+0x2e0>)
 80024e4:	6013      	str	r3, [r2, #0]
		acks_counted = 0;
 80024e6:	4bad      	ldr	r3, [pc, #692]	; (800279c <telem_loop+0x2dc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
	}

	if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY)
 80024ec:	48ad      	ldr	r0, [pc, #692]	; (80027a4 <telem_loop+0x2e4>)
 80024ee:	f002 fdf8 	bl	80050e2 <HAL_I2C_GetState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	f040 82a9 	bne.w	8002a4c <telem_loop+0x58c>
	{
		if(rx_done)
 80024fa:	4bab      	ldr	r3, [pc, #684]	; (80027a8 <telem_loop+0x2e8>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8138 	beq.w	8002774 <telem_loop+0x2b4>
		{
			rx_done = 0;
 8002504:	4ba8      	ldr	r3, [pc, #672]	; (80027a8 <telem_loop+0x2e8>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
			ack_rate_counter = 0;
 800250a:	4ba8      	ldr	r3, [pc, #672]	; (80027ac <telem_loop+0x2ec>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]

			switch(telem_receive_buffer[0])
 8002510:	4ba7      	ldr	r3, [pc, #668]	; (80027b0 <telem_loop+0x2f0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2bf3      	cmp	r3, #243	; 0xf3
 8002518:	d078      	beq.n	800260c <telem_loop+0x14c>
 800251a:	2bf3      	cmp	r3, #243	; 0xf3
 800251c:	dc01      	bgt.n	8002522 <telem_loop+0x62>
 800251e:	2b00      	cmp	r3, #0
			{
			case 0x00:
				break;
 8002520:	e128      	b.n	8002774 <telem_loop+0x2b4>
			switch(telem_receive_buffer[0])
 8002522:	2bf5      	cmp	r3, #245	; 0xf5
 8002524:	f000 80be 	beq.w	80026a4 <telem_loop+0x1e4>
 8002528:	2bf7      	cmp	r3, #247	; 0xf7
 800252a:	f040 8123 	bne.w	8002774 <telem_loop+0x2b4>
			case CALIBRATE_GYRO_REQUEST:
				Calibrate_IMU();
 800252e:	f7fe ffc5 	bl	80014bc <Calibrate_IMU>

				for(int i = 0; i < 35; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	e00f      	b.n	8002558 <telem_loop+0x98>
				{
					manual_packet_buffer[manual_packet_count].payload[i] = '\0';
 8002538:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <telem_loop+0x2f4>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	4a9e      	ldr	r2, [pc, #632]	; (80027b8 <telem_loop+0x2f8>)
 8002540:	460b      	mov	r3, r1
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	440b      	add	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	441a      	add	r2, r3
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	4413      	add	r3, r2
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 35; i++)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	2b22      	cmp	r3, #34	; 0x22
 800255c:	ddec      	ble.n	8002538 <telem_loop+0x78>
				}

				sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%s", "Gyro Calibrated.\n");//uint32_t
 800255e:	4b95      	ldr	r3, [pc, #596]	; (80027b4 <telem_loop+0x2f4>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4a92      	ldr	r2, [pc, #584]	; (80027b8 <telem_loop+0x2f8>)
 800256e:	4413      	add	r3, r2
 8002570:	4a92      	ldr	r2, [pc, #584]	; (80027bc <telem_loop+0x2fc>)
 8002572:	461d      	mov	r5, r3
 8002574:	4614      	mov	r4, r2
 8002576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002578:	6028      	str	r0, [r5, #0]
 800257a:	6069      	str	r1, [r5, #4]
 800257c:	60aa      	str	r2, [r5, #8]
 800257e:	60eb      	str	r3, [r5, #12]
 8002580:	8823      	ldrh	r3, [r4, #0]
 8002582:	822b      	strh	r3, [r5, #16]
				sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%c%c%s", 0x09 , strlen((char*)(manual_packet_buffer[manual_packet_count].payload)), "Gyro Calibrated.\n");
 8002584:	4b8b      	ldr	r3, [pc, #556]	; (80027b4 <telem_loop+0x2f4>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4613      	mov	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4a89      	ldr	r2, [pc, #548]	; (80027b8 <telem_loop+0x2f8>)
 8002594:	189c      	adds	r4, r3, r2
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <telem_loop+0x2f4>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4a84      	ldr	r2, [pc, #528]	; (80027b8 <telem_loop+0x2f8>)
 80025a6:	4413      	add	r3, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd fe11 	bl	80001d0 <strlen>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b82      	ldr	r3, [pc, #520]	; (80027bc <telem_loop+0x2fc>)
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	2209      	movs	r2, #9
 80025b8:	4981      	ldr	r1, [pc, #516]	; (80027c0 <telem_loop+0x300>)
 80025ba:	4620      	mov	r0, r4
 80025bc:	f00b f8c6 	bl	800d74c <siprintf>

				manual_packet_buffer[manual_packet_count].width = strlen((char *)(manual_packet_buffer[manual_packet_count].payload));
 80025c0:	4b7c      	ldr	r3, [pc, #496]	; (80027b4 <telem_loop+0x2f4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4a7a      	ldr	r2, [pc, #488]	; (80027b8 <telem_loop+0x2f8>)
 80025d0:	4413      	add	r3, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd fdfc 	bl	80001d0 <strlen>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <telem_loop+0x2f4>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	b2d0      	uxtb	r0, r2
 80025e2:	4a75      	ldr	r2, [pc, #468]	; (80027b8 <telem_loop+0x2f8>)
 80025e4:	460b      	mov	r3, r1
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	3323      	adds	r3, #35	; 0x23
 80025f0:	4602      	mov	r2, r0
 80025f2:	701a      	strb	r2, [r3, #0]

				if(manual_packet_count < 31)
 80025f4:	4b6f      	ldr	r3, [pc, #444]	; (80027b4 <telem_loop+0x2f4>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b1e      	cmp	r3, #30
 80025fa:	f200 80b6 	bhi.w	800276a <telem_loop+0x2aa>
					manual_packet_count++;
 80025fe:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <telem_loop+0x2f4>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	3301      	adds	r3, #1
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <telem_loop+0x2f4>)
 8002608:	701a      	strb	r2, [r3, #0]
				break;
 800260a:	e0ae      	b.n	800276a <telem_loop+0x2aa>
			case PID_GAIN_FIRST_REQUEST:
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800260c:	2104      	movs	r1, #4
 800260e:	486d      	ldr	r0, [pc, #436]	; (80027c4 <telem_loop+0x304>)
 8002610:	f001 fcf9 	bl	8004006 <HAL_GPIO_TogglePin>
				for(int i = 0; i < 35; i++)
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
 8002618:	e00f      	b.n	800263a <telem_loop+0x17a>
				{
					manual_packet_buffer[manual_packet_count].payload[i] = '\0';
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <telem_loop+0x2f4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4619      	mov	r1, r3
 8002620:	4a65      	ldr	r2, [pc, #404]	; (80027b8 <telem_loop+0x2f8>)
 8002622:	460b      	mov	r3, r1
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	441a      	add	r2, r3
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	4413      	add	r3, r2
 8002630:	2200      	movs	r2, #0
 8002632:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 35; i++)
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	3301      	adds	r3, #1
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	2b22      	cmp	r3, #34	; 0x22
 800263e:	ddec      	ble.n	800261a <telem_loop+0x15a>
				}
				manual_packet_buffer[manual_packet_count].width = 1;
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <telem_loop+0x2f4>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	4a5c      	ldr	r2, [pc, #368]	; (80027b8 <telem_loop+0x2f8>)
 8002648:	460b      	mov	r3, r1
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3323      	adds	r3, #35	; 0x23
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 8002658:	2003      	movs	r0, #3
 800265a:	f000 fa73 	bl	8002b44 <AddIDToManualBuffer>
				AddToManualBuffer(&kp_roll, 4);
 800265e:	2104      	movs	r1, #4
 8002660:	4859      	ldr	r0, [pc, #356]	; (80027c8 <telem_loop+0x308>)
 8002662:	f000 fa89 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&ki_roll, 4);
 8002666:	2104      	movs	r1, #4
 8002668:	4858      	ldr	r0, [pc, #352]	; (80027cc <telem_loop+0x30c>)
 800266a:	f000 fa85 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&kd_roll, 4);
 800266e:	2104      	movs	r1, #4
 8002670:	4857      	ldr	r0, [pc, #348]	; (80027d0 <telem_loop+0x310>)
 8002672:	f000 fa81 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&kp_yaw, 4);
 8002676:	2104      	movs	r1, #4
 8002678:	4856      	ldr	r0, [pc, #344]	; (80027d4 <telem_loop+0x314>)
 800267a:	f000 fa7d 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&ki_yaw, 4);
 800267e:	2104      	movs	r1, #4
 8002680:	4855      	ldr	r0, [pc, #340]	; (80027d8 <telem_loop+0x318>)
 8002682:	f000 fa79 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&kd_yaw, 4);
 8002686:	2104      	movs	r1, #4
 8002688:	4854      	ldr	r0, [pc, #336]	; (80027dc <telem_loop+0x31c>)
 800268a:	f000 fa75 	bl	8002b78 <AddToManualBuffer>

				if(manual_packet_count < 31)
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <telem_loop+0x2f4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b1e      	cmp	r3, #30
 8002694:	d86b      	bhi.n	800276e <telem_loop+0x2ae>
					manual_packet_count++;
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <telem_loop+0x2f4>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <telem_loop+0x2f4>)
 80026a0:	701a      	strb	r2, [r3, #0]
				break;
 80026a2:	e064      	b.n	800276e <telem_loop+0x2ae>
			case PID_GAIN_FIRST_UPDATE_REQUEST:
				telem_receive_read_index = 1;
 80026a4:	4b4e      	ldr	r3, [pc, #312]	; (80027e0 <telem_loop+0x320>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer(&kp_roll, 4);
 80026aa:	2104      	movs	r1, #4
 80026ac:	4846      	ldr	r0, [pc, #280]	; (80027c8 <telem_loop+0x308>)
 80026ae:	f000 fab5 	bl	8002c1c <ReadReceiveBuffer>
				ReadReceiveBuffer(&ki_roll, 4);
 80026b2:	2104      	movs	r1, #4
 80026b4:	4845      	ldr	r0, [pc, #276]	; (80027cc <telem_loop+0x30c>)
 80026b6:	f000 fab1 	bl	8002c1c <ReadReceiveBuffer>
				ReadReceiveBuffer(&kd_roll, 4);
 80026ba:	2104      	movs	r1, #4
 80026bc:	4844      	ldr	r0, [pc, #272]	; (80027d0 <telem_loop+0x310>)
 80026be:	f000 faad 	bl	8002c1c <ReadReceiveBuffer>
				ReadReceiveBuffer(&kp_yaw, 4);
 80026c2:	2104      	movs	r1, #4
 80026c4:	4843      	ldr	r0, [pc, #268]	; (80027d4 <telem_loop+0x314>)
 80026c6:	f000 faa9 	bl	8002c1c <ReadReceiveBuffer>
				ReadReceiveBuffer(&ki_yaw, 4);
 80026ca:	2104      	movs	r1, #4
 80026cc:	4842      	ldr	r0, [pc, #264]	; (80027d8 <telem_loop+0x318>)
 80026ce:	f000 faa5 	bl	8002c1c <ReadReceiveBuffer>
				ReadReceiveBuffer(&kd_yaw, 4);
 80026d2:	2104      	movs	r1, #4
 80026d4:	4841      	ldr	r0, [pc, #260]	; (80027dc <telem_loop+0x31c>)
 80026d6:	f000 faa1 	bl	8002c1c <ReadReceiveBuffer>

				for(int i = 0; i < 35; i++)
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	e00f      	b.n	8002700 <telem_loop+0x240>
				{
					manual_packet_buffer[manual_packet_count].payload[i] = '\0';
 80026e0:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <telem_loop+0x2f4>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4a34      	ldr	r2, [pc, #208]	; (80027b8 <telem_loop+0x2f8>)
 80026e8:	460b      	mov	r3, r1
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	4413      	add	r3, r2
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 35; i++)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b22      	cmp	r3, #34	; 0x22
 8002704:	ddec      	ble.n	80026e0 <telem_loop+0x220>
				}
				manual_packet_buffer[manual_packet_count].width = 1;
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <telem_loop+0x2f4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <telem_loop+0x2f8>)
 800270e:	460b      	mov	r3, r1
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	440b      	add	r3, r1
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	3323      	adds	r3, #35	; 0x23
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 800271e:	2003      	movs	r0, #3
 8002720:	f000 fa10 	bl	8002b44 <AddIDToManualBuffer>
				AddToManualBuffer(&kp_roll, 4);
 8002724:	2104      	movs	r1, #4
 8002726:	4828      	ldr	r0, [pc, #160]	; (80027c8 <telem_loop+0x308>)
 8002728:	f000 fa26 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&ki_roll, 4);
 800272c:	2104      	movs	r1, #4
 800272e:	4827      	ldr	r0, [pc, #156]	; (80027cc <telem_loop+0x30c>)
 8002730:	f000 fa22 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&kd_roll, 4);
 8002734:	2104      	movs	r1, #4
 8002736:	4826      	ldr	r0, [pc, #152]	; (80027d0 <telem_loop+0x310>)
 8002738:	f000 fa1e 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&kp_yaw, 4);
 800273c:	2104      	movs	r1, #4
 800273e:	4825      	ldr	r0, [pc, #148]	; (80027d4 <telem_loop+0x314>)
 8002740:	f000 fa1a 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&ki_yaw, 4);
 8002744:	2104      	movs	r1, #4
 8002746:	4824      	ldr	r0, [pc, #144]	; (80027d8 <telem_loop+0x318>)
 8002748:	f000 fa16 	bl	8002b78 <AddToManualBuffer>
				AddToManualBuffer(&kd_yaw, 4);
 800274c:	2104      	movs	r1, #4
 800274e:	4823      	ldr	r0, [pc, #140]	; (80027dc <telem_loop+0x31c>)
 8002750:	f000 fa12 	bl	8002b78 <AddToManualBuffer>

				if(manual_packet_count < 31)
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <telem_loop+0x2f4>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b1e      	cmp	r3, #30
 800275a:	d80a      	bhi.n	8002772 <telem_loop+0x2b2>
					manual_packet_count++;
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <telem_loop+0x2f4>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <telem_loop+0x2f4>)
 8002766:	701a      	strb	r2, [r3, #0]
				break;
 8002768:	e003      	b.n	8002772 <telem_loop+0x2b2>
				break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <telem_loop+0x2b4>
				break;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <telem_loop+0x2b4>
				break;
 8002772:	bf00      	nop
			}
		}

		if(tx_done)
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <telem_loop+0x324>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d060      	beq.n	800283e <telem_loop+0x37e>
		{
			tx_done = 0;
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <telem_loop+0x324>)
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]

			if(manual_packet_count > 0)
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <telem_loop+0x2f4>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d059      	beq.n	800283e <telem_loop+0x37e>
			{
				for(int i = 0; i < manual_packet_count - 1; i++)
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e04a      	b.n	8002826 <telem_loop+0x366>
				{
					for(int j = 0; j < 35; j++)
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e041      	b.n	800281a <telem_loop+0x35a>
 8002796:	bf00      	nop
 8002798:	20001f80 	.word	0x20001f80
 800279c:	20000588 	.word	0x20000588
 80027a0:	20001f34 	.word	0x20001f34
 80027a4:	20000300 	.word	0x20000300
 80027a8:	2000023f 	.word	0x2000023f
 80027ac:	2000023c 	.word	0x2000023c
 80027b0:	20001f5c 	.word	0x20001f5c
 80027b4:	20000238 	.word	0x20000238
 80027b8:	2000058c 	.word	0x2000058c
 80027bc:	0800f528 	.word	0x0800f528
 80027c0:	0800f53c 	.word	0x0800f53c
 80027c4:	40020800 	.word	0x40020800
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000008 	.word	0x20000008
 80027d0:	20000010 	.word	0x20000010
 80027d4:	20000004 	.word	0x20000004
 80027d8:	2000000c 	.word	0x2000000c
 80027dc:	20000220 	.word	0x20000220
 80027e0:	2000023b 	.word	0x2000023b
 80027e4:	20000240 	.word	0x20000240
					{
						manual_packet_buffer[i].payload[j] = manual_packet_buffer[i + 1].payload[j];
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	4999      	ldr	r1, [pc, #612]	; (8002a54 <telem_loop+0x594>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	18ca      	adds	r2, r1, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4413      	add	r3, r2
 80027fc:	7818      	ldrb	r0, [r3, #0]
 80027fe:	4995      	ldr	r1, [pc, #596]	; (8002a54 <telem_loop+0x594>)
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	18ca      	adds	r2, r1, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	4413      	add	r3, r2
 8002810:	4602      	mov	r2, r0
 8002812:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 35; j++)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b22      	cmp	r3, #34	; 0x22
 800281e:	dde3      	ble.n	80027e8 <telem_loop+0x328>
				for(int i = 0; i < manual_packet_count - 1; i++)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	3301      	adds	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <telem_loop+0x598>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3b01      	subs	r3, #1
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbae      	blt.n	8002790 <telem_loop+0x2d0>
					}
				}

				manual_packet_count--;
 8002832:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <telem_loop+0x598>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b87      	ldr	r3, [pc, #540]	; (8002a58 <telem_loop+0x598>)
 800283c:	701a      	strb	r2, [r3, #0]
			}
		}

		if(waiting_to_rx)
 800283e:	4b87      	ldr	r3, [pc, #540]	; (8002a5c <telem_loop+0x59c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d017      	beq.n	8002876 <telem_loop+0x3b6>
		{
			if(HAL_I2C_Master_Seq_Receive_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_receive_buffer, 34, I2C_LAST_FRAME) != HAL_OK)
 8002846:	2320      	movs	r3, #32
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2322      	movs	r3, #34	; 0x22
 800284c:	4a84      	ldr	r2, [pc, #528]	; (8002a60 <telem_loop+0x5a0>)
 800284e:	2108      	movs	r1, #8
 8002850:	4884      	ldr	r0, [pc, #528]	; (8002a64 <telem_loop+0x5a4>)
 8002852:	f002 f90d 	bl	8004a70 <HAL_I2C_Master_Seq_Receive_IT>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <telem_loop+0x3b0>
			{
				transmit_fail_flag = 1;
 800285c:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <telem_loop+0x5a8>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
				ack_rate_counter = 0;
 8002862:	4b82      	ldr	r3, [pc, #520]	; (8002a6c <telem_loop+0x5ac>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
				waiting_to_rx = 0;
 8002868:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <telem_loop+0x59c>)
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
 800286e:	e002      	b.n	8002876 <telem_loop+0x3b6>
			}
			else
			{
				waiting_to_rx = 0;
 8002870:	4b7a      	ldr	r3, [pc, #488]	; (8002a5c <telem_loop+0x59c>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
				//ack_rate_counter = 0;
			}
		}

		if(!waiting_to_rx && GetMicrosDifference(&telem_min_transmit_timer) >= 2500)
 8002876:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <telem_loop+0x59c>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f040 80e6 	bne.w	8002a4c <telem_loop+0x58c>
 8002880:	487b      	ldr	r0, [pc, #492]	; (8002a70 <telem_loop+0x5b0>)
 8002882:	f7ff fc53 	bl	800212c <GetMicrosDifference>
 8002886:	4602      	mov	r2, r0
 8002888:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800288c:	429a      	cmp	r2, r3
 800288e:	f240 80dd 	bls.w	8002a4c <telem_loop+0x58c>
		{
			for(int i = 0; i < 35; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e007      	b.n	80028a8 <telem_loop+0x3e8>
			{
				telem_send_buffer[i] = '\0';
 8002898:	4a76      	ldr	r2, [pc, #472]	; (8002a74 <telem_loop+0x5b4>)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 35; i++)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	3301      	adds	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b22      	cmp	r3, #34	; 0x22
 80028ac:	ddf4      	ble.n	8002898 <telem_loop+0x3d8>
			}

			if(manual_packet_count > 0)
 80028ae:	4b6a      	ldr	r3, [pc, #424]	; (8002a58 <telem_loop+0x598>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d024      	beq.n	8002900 <telem_loop+0x440>
			{

				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e00b      	b.n	80028d4 <telem_loop+0x414>
				{
					telem_send_buffer[i] = manual_packet_buffer[0].payload[i];
 80028bc:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <telem_loop+0x594>)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4413      	add	r3, r2
 80028c2:	7819      	ldrb	r1, [r3, #0]
 80028c4:	4a6b      	ldr	r2, [pc, #428]	; (8002a74 <telem_loop+0x5b4>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	460a      	mov	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3301      	adds	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	4b5f      	ldr	r3, [pc, #380]	; (8002a54 <telem_loop+0x594>)
 80028d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4293      	cmp	r3, r2
 80028e0:	dbec      	blt.n	80028bc <telem_loop+0x3fc>
				}

				telem_send_buffer[32] = manual_packet_buffer[0].width;
 80028e2:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <telem_loop+0x594>)
 80028e4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80028e8:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <telem_loop+0x5b4>)
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]
				telem_send_buffer[33] = 0;//Unreliable
 80028ee:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <telem_loop+0x5b4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				telem_send_buffer[34] = 0;//No data
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <telem_loop+0x5b4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80028fe:	e05e      	b.n	80029be <telem_loop+0x4fe>
			}
			else
			{
				telem_send_buffer[0] = auto_packet_buffer[auto_packet_counter].id;
 8002900:	4b5d      	ldr	r3, [pc, #372]	; (8002a78 <telem_loop+0x5b8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <telem_loop+0x5bc>)
 8002908:	23a8      	movs	r3, #168	; 0xa8
 800290a:	fb03 f301 	mul.w	r3, r3, r1
 800290e:	4413      	add	r3, r2
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	4b58      	ldr	r3, [pc, #352]	; (8002a74 <telem_loop+0x5b4>)
 8002914:	701a      	strb	r2, [r3, #0]
				uint8_t var_index = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	72fb      	strb	r3, [r7, #11]

				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	e02d      	b.n	800297c <telem_loop+0x4bc>
				{
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 8002920:	2300      	movs	r3, #0
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	e017      	b.n	8002956 <telem_loop+0x496>
					{
						telem_send_buffer[var_index] = *((uint8_t *)(auto_packet_buffer[auto_packet_counter].payload[i]) + j);
 8002926:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <telem_loop+0x5b8>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	4953      	ldr	r1, [pc, #332]	; (8002a7c <telem_loop+0x5bc>)
 800292e:	232a      	movs	r3, #42	; 0x2a
 8002930:	fb03 f202 	mul.w	r2, r3, r2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	441a      	add	r2, r3
 8002942:	7afb      	ldrb	r3, [r7, #11]
 8002944:	7811      	ldrb	r1, [r2, #0]
 8002946:	4a4b      	ldr	r2, [pc, #300]	; (8002a74 <telem_loop+0x5b4>)
 8002948:	54d1      	strb	r1, [r2, r3]

						var_index++;
 800294a:	7afb      	ldrb	r3, [r7, #11]
 800294c:	3301      	adds	r3, #1
 800294e:	72fb      	strb	r3, [r7, #11]
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4b48      	ldr	r3, [pc, #288]	; (8002a78 <telem_loop+0x5b8>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	4a47      	ldr	r2, [pc, #284]	; (8002a7c <telem_loop+0x5bc>)
 800295e:	23a8      	movs	r3, #168	; 0xa8
 8002960:	fb03 f301 	mul.w	r3, r3, r1
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	3384      	adds	r3, #132	; 0x84
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4293      	cmp	r3, r2
 8002974:	dbd7      	blt.n	8002926 <telem_loop+0x466>
				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3301      	adds	r3, #1
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <telem_loop+0x5b8>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	4a3e      	ldr	r2, [pc, #248]	; (8002a7c <telem_loop+0x5bc>)
 8002984:	23a8      	movs	r3, #168	; 0xa8
 8002986:	fb03 f301 	mul.w	r3, r3, r1
 800298a:	4413      	add	r3, r2
 800298c:	33a4      	adds	r3, #164	; 0xa4
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4293      	cmp	r3, r2
 8002996:	dbc3      	blt.n	8002920 <telem_loop+0x460>
					}
				}

				telem_send_buffer[32] = var_index;
 8002998:	4a36      	ldr	r2, [pc, #216]	; (8002a74 <telem_loop+0x5b4>)
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f882 3020 	strb.w	r3, [r2, #32]

				auto_packet_counter++;
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <telem_loop+0x5b8>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <telem_loop+0x5b8>)
 80029aa:	701a      	strb	r2, [r3, #0]

				if(auto_packet_counter >= auto_packet_count)
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <telem_loop+0x5b8>)
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <telem_loop+0x5c0>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d302      	bcc.n	80029be <telem_loop+0x4fe>
					auto_packet_counter = 0;
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <telem_loop+0x5b8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]

			//sprintf((char*)telem_send_buffer, "%lu%s%ld%lu%s", how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t
			//sprintf((char*)telem_send_buffer, "%c%c%lu%s%ld%lu%s", 0x09 , strlen((char*)telem_send_buffer), how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t


			if(ack_rate_counter < 0xFF)
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <telem_loop+0x5ac>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2bff      	cmp	r3, #255	; 0xff
 80029c6:	d006      	beq.n	80029d6 <telem_loop+0x516>
				ack_rate_counter++;
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <telem_loop+0x5ac>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <telem_loop+0x5ac>)
 80029d4:	701a      	strb	r2, [r3, #0]

			telem_send_buffer[33] = 0;//Unreliable
 80029d6:	4b27      	ldr	r3, [pc, #156]	; (8002a74 <telem_loop+0x5b4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			telem_send_buffer[34] = 0;//No data
 80029de:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <telem_loop+0x5b4>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			//ack_rate_counter = 0;

			if(ack_rate_counter == ack_rate)
 80029e6:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <telem_loop+0x5ac>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4b25      	ldr	r3, [pc, #148]	; (8002a84 <telem_loop+0x5c4>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d115      	bne.n	8002a20 <telem_loop+0x560>
			{
				//telem_send_buffer[34] = 1;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_FRAME) != HAL_OK)
 80029f4:	2301      	movs	r3, #1
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2323      	movs	r3, #35	; 0x23
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <telem_loop+0x5b4>)
 80029fc:	2108      	movs	r1, #8
 80029fe:	4819      	ldr	r0, [pc, #100]	; (8002a64 <telem_loop+0x5a4>)
 8002a00:	f001 ff78 	bl	80048f4 <HAL_I2C_Master_Seq_Transmit_IT>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <telem_loop+0x558>
				{
					transmit_fail_flag = 1;
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <telem_loop+0x5a8>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <telem_loop+0x5ac>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e014      	b.n	8002a42 <telem_loop+0x582>
				}
				else
				{
					waiting_to_rx = 1;
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <telem_loop+0x59c>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e010      	b.n	8002a42 <telem_loop+0x582>
			}
			else
			{
				//telem_send_buffer[34] = 0;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8002a20:	2308      	movs	r3, #8
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2323      	movs	r3, #35	; 0x23
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <telem_loop+0x5b4>)
 8002a28:	2108      	movs	r1, #8
 8002a2a:	480e      	ldr	r0, [pc, #56]	; (8002a64 <telem_loop+0x5a4>)
 8002a2c:	f001 ff62 	bl	80048f4 <HAL_I2C_Master_Seq_Transmit_IT>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <telem_loop+0x582>
				{
					transmit_fail_flag = 1;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <telem_loop+0x5a8>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <telem_loop+0x5ac>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
				}
			}

			telem_min_transmit_timer = GetMicros();
 8002a42:	f7ff fb47 	bl	80020d4 <GetMicros>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <telem_loop+0x5b0>)
 8002a4a:	601a      	str	r2, [r3, #0]

			//HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35);
		}
	}
}
 8002a4c:	bf00      	nop
 8002a4e:	3728      	adds	r7, #40	; 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdb0      	pop	{r4, r5, r7, pc}
 8002a54:	2000058c 	.word	0x2000058c
 8002a58:	20000238 	.word	0x20000238
 8002a5c:	2000023e 	.word	0x2000023e
 8002a60:	20001f5c 	.word	0x20001f5c
 8002a64:	20000300 	.word	0x20000300
 8002a68:	2000023d 	.word	0x2000023d
 8002a6c:	2000023c 	.word	0x2000023c
 8002a70:	20000a0c 	.word	0x20000a0c
 8002a74:	20000a10 	.word	0x20000a10
 8002a78:	2000023a 	.word	0x2000023a
 8002a7c:	20000a34 	.word	0x20000a34
 8002a80:	20000239 	.word	0x20000239
 8002a84:	2000001c 	.word	0x2000001c

08002a88 <AddToAutoBuffer>:

void AddToAutoBuffer(uint8_t buf_index, uint8_t *num, uint8_t size)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
 8002a94:	4613      	mov	r3, r2
 8002a96:	71bb      	strb	r3, [r7, #6]
	auto_packet_buffer[buf_index].payload[auto_packet_buffer[buf_index].var_count] = (uint8_t *)num;
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	79fa      	ldrb	r2, [r7, #7]
 8002a9c:	4928      	ldr	r1, [pc, #160]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002a9e:	20a8      	movs	r0, #168	; 0xa8
 8002aa0:	fb00 f202 	mul.w	r2, r0, r2
 8002aa4:	440a      	add	r2, r1
 8002aa6:	32a4      	adds	r2, #164	; 0xa4
 8002aa8:	7812      	ldrb	r2, [r2, #0]
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002aae:	212a      	movs	r1, #42	; 0x2a
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4403      	add	r3, r0
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	605a      	str	r2, [r3, #4]
	auto_packet_buffer[buf_index].width[auto_packet_buffer[buf_index].var_count] = size;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	79fa      	ldrb	r2, [r7, #7]
 8002ac2:	491f      	ldr	r1, [pc, #124]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002ac4:	20a8      	movs	r0, #168	; 0xa8
 8002ac6:	fb00 f202 	mul.w	r2, r0, r2
 8002aca:	440a      	add	r2, r1
 8002acc:	32a4      	adds	r2, #164	; 0xa4
 8002ace:	7812      	ldrb	r2, [r2, #0]
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002ad4:	21a8      	movs	r1, #168	; 0xa8
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	4403      	add	r3, r0
 8002ade:	3384      	adds	r3, #132	; 0x84
 8002ae0:	79ba      	ldrb	r2, [r7, #6]
 8002ae2:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].total_width += size;
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002ae8:	21a8      	movs	r1, #168	; 0xa8
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	33a5      	adds	r3, #165	; 0xa5
 8002af2:	7819      	ldrb	r1, [r3, #0]
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	79ba      	ldrb	r2, [r7, #6]
 8002af8:	440a      	add	r2, r1
 8002afa:	b2d0      	uxtb	r0, r2
 8002afc:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002afe:	21a8      	movs	r1, #168	; 0xa8
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	33a5      	adds	r3, #165	; 0xa5
 8002b08:	4602      	mov	r2, r0
 8002b0a:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].var_count += 1;
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002b10:	21a8      	movs	r1, #168	; 0xa8
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	33a4      	adds	r3, #164	; 0xa4
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	3201      	adds	r2, #1
 8002b20:	b2d0      	uxtb	r0, r2
 8002b22:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <AddToAutoBuffer+0xb8>)
 8002b24:	21a8      	movs	r1, #168	; 0xa8
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	33a4      	adds	r3, #164	; 0xa4
 8002b2e:	4602      	mov	r2, r0
 8002b30:	701a      	strb	r2, [r3, #0]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000a34 	.word	0x20000a34

08002b44 <AddIDToManualBuffer>:

void AddIDToManualBuffer(uint8_t packet_id)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	manual_packet_buffer[manual_packet_count].payload[0] = packet_id;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <AddIDToManualBuffer+0x2c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <AddIDToManualBuffer+0x30>)
 8002b56:	460b      	mov	r3, r1
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	79fa      	ldrb	r2, [r7, #7]
 8002b62:	701a      	strb	r2, [r3, #0]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000238 	.word	0x20000238
 8002b74:	2000058c 	.word	0x2000058c

08002b78 <AddToManualBuffer>:

void AddToManualBuffer(uint8_t *num, uint8_t size)
{
 8002b78:	b490      	push	{r4, r7}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e020      	b.n	8002bcc <AddToManualBuffer+0x54>
	{
		manual_packet_buffer[manual_packet_count].payload[manual_packet_buffer[manual_packet_count].width + i] = *(((uint8_t *)num) + i);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	18d1      	adds	r1, r2, r3
 8002b90:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <AddToManualBuffer+0x9c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <AddToManualBuffer+0x9c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461c      	mov	r4, r3
 8002b9c:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <AddToManualBuffer+0xa0>)
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4423      	add	r3, r4
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3323      	adds	r3, #35	; 0x23
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	441a      	add	r2, r3
 8002bb2:	780c      	ldrb	r4, [r1, #0]
 8002bb4:	4918      	ldr	r1, [pc, #96]	; (8002c18 <AddToManualBuffer+0xa0>)
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4403      	add	r3, r0
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dbda      	blt.n	8002b8a <AddToManualBuffer+0x12>
	}

	manual_packet_buffer[manual_packet_count].width += size;
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <AddToManualBuffer+0x9c>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4a0f      	ldr	r2, [pc, #60]	; (8002c18 <AddToManualBuffer+0xa0>)
 8002bdc:	460b      	mov	r3, r1
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	3323      	adds	r3, #35	; 0x23
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <AddToManualBuffer+0x9c>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2d8      	uxtb	r0, r3
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <AddToManualBuffer+0xa0>)
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3323      	adds	r3, #35	; 0x23
 8002c04:	4602      	mov	r2, r0
 8002c06:	701a      	strb	r2, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc90      	pop	{r4, r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000238 	.word	0x20000238
 8002c18:	2000058c 	.word	0x2000058c

08002c1c <ReadReceiveBuffer>:

void ReadReceiveBuffer(uint8_t *output, uint8_t size)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	e00e      	b.n	8002c4c <ReadReceiveBuffer+0x30>
	{
		*(((uint8_t *)output) + i) = telem_receive_buffer[telem_receive_read_index + i];
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <ReadReceiveBuffer+0x54>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	440b      	add	r3, r1
 8002c3e:	490d      	ldr	r1, [pc, #52]	; (8002c74 <ReadReceiveBuffer+0x58>)
 8002c40:	5c8a      	ldrb	r2, [r1, r2]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	dbec      	blt.n	8002c2e <ReadReceiveBuffer+0x12>
	}

	telem_receive_read_index += size;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <ReadReceiveBuffer+0x54>)
 8002c56:	781a      	ldrb	r2, [r3, #0]
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <ReadReceiveBuffer+0x54>)
 8002c60:	701a      	strb	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	2000023b 	.word	0x2000023b
 8002c74:	20001f5c 	.word	0x20001f5c

08002c78 <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7e:	f107 0320 	add.w	r3, r7, #32
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	615a      	str	r2, [r3, #20]
 8002c98:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002c9a:	4b33      	ldr	r3, [pc, #204]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002c9c:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <MX_TIM3_Init+0xf4>)
 8002c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002ca2:	2253      	movs	r2, #83	; 0x53
 8002ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002cae:	f241 3287 	movw	r2, #4999	; 0x1387
 8002cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cc0:	4829      	ldr	r0, [pc, #164]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002cc2:	f005 fee1 	bl	8008a88 <HAL_TIM_PWM_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002ccc:	f7ff faae 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cd8:	f107 0320 	add.w	r3, r7, #32
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4822      	ldr	r0, [pc, #136]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002ce0:	f006 ff8e 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002cea:	f7ff fa9f 	bl	800222c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cee:	2360      	movs	r3, #96	; 0x60
 8002cf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	2200      	movs	r2, #0
 8002d04:	4619      	mov	r1, r3
 8002d06:	4818      	ldr	r0, [pc, #96]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002d08:	f006 f96a 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002d12:	f7ff fa8b 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	2204      	movs	r2, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4812      	ldr	r0, [pc, #72]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002d1e:	f006 f95f 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002d28:	f7ff fa80 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2208      	movs	r2, #8
 8002d30:	4619      	mov	r1, r3
 8002d32:	480d      	ldr	r0, [pc, #52]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002d34:	f006 f954 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8002d3e:	f7ff fa75 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	220c      	movs	r2, #12
 8002d46:	4619      	mov	r1, r3
 8002d48:	4807      	ldr	r0, [pc, #28]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002d4a:	f006 f949 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8002d54:	f7ff fa6a 	bl	800222c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002d58:	4803      	ldr	r0, [pc, #12]	; (8002d68 <MX_TIM3_Init+0xf0>)
 8002d5a:	f000 fa1f 	bl	800319c <HAL_TIM_MspPostInit>

}
 8002d5e:	bf00      	nop
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20002004 	.word	0x20002004
 8002d6c:	40000400 	.word	0x40000400

08002d70 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d8e:	463b      	mov	r3, r7
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002d9c:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <MX_TIM5_Init+0xdc>)
 8002d9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002da2:	2253      	movs	r2, #83	; 0x53
 8002da4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da6:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002dac:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002dae:	f04f 32ff 	mov.w	r2, #4294967295
 8002db2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dba:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002dc0:	4821      	ldr	r0, [pc, #132]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002dc2:	f005 fe12 	bl	80089ea <HAL_TIM_Base_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8002dcc:	f7ff fa2e 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002dd6:	f107 0318 	add.w	r3, r7, #24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	481a      	ldr	r0, [pc, #104]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002dde:	f006 f9c5 	bl	800916c <HAL_TIM_ConfigClockSource>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002de8:	f7ff fa20 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002dec:	4816      	ldr	r0, [pc, #88]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002dee:	f005 feb5 	bl	8008b5c <HAL_TIM_IC_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002df8:	f7ff fa18 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	4619      	mov	r1, r3
 8002e0a:	480f      	ldr	r0, [pc, #60]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002e0c:	f006 fef8 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002e16:	f7ff fa09 	bl	800222c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4805      	ldr	r0, [pc, #20]	; (8002e48 <MX_TIM5_Init+0xd8>)
 8002e32:	f006 f839 	bl	8008ea8 <HAL_TIM_IC_ConfigChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8002e3c:	f7ff f9f6 	bl	800222c <Error_Handler>
  }

}
 8002e40:	bf00      	nop
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20001fc4 	.word	0x20001fc4
 8002e4c:	40000c00 	.word	0x40000c00

08002e50 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b096      	sub	sp, #88	; 0x58
 8002e54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	615a      	str	r2, [r3, #20]
 8002e80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e82:	1d3b      	adds	r3, r7, #4
 8002e84:	2220      	movs	r2, #32
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f00a fb9f 	bl	800d5cc <memset>

  htim8.Instance = TIM8;
 8002e8e:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002e90:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <MX_TIM8_Init+0x188>)
 8002e92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8002e94:	4b4f      	ldr	r3, [pc, #316]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002e96:	22a7      	movs	r2, #167	; 0xa7
 8002e98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8002ea0:	4b4c      	ldr	r3, [pc, #304]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002ea2:	f241 3287 	movw	r2, #4999	; 0x1387
 8002ea6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002eae:	4b49      	ldr	r3, [pc, #292]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb4:	4b47      	ldr	r3, [pc, #284]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002eba:	4846      	ldr	r0, [pc, #280]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002ebc:	f005 fd95 	bl	80089ea <HAL_TIM_Base_Init>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002ec6:	f7ff f9b1 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ece:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ed0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	483f      	ldr	r0, [pc, #252]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002ed8:	f006 f948 	bl	800916c <HAL_TIM_ConfigClockSource>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002ee2:	f7ff f9a3 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002ee6:	483b      	ldr	r0, [pc, #236]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002ee8:	f005 fdce 	bl	8008a88 <HAL_TIM_PWM_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002ef2:	f7ff f99b 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002efe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f02:	4619      	mov	r1, r3
 8002f04:	4833      	ldr	r0, [pc, #204]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002f06:	f006 fe7b 	bl	8009c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002f10:	f7ff f98c 	bl	800222c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f14:	2360      	movs	r3, #96	; 0x60
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8002f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f22:	2300      	movs	r3, #0
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f36:	2200      	movs	r2, #0
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4826      	ldr	r0, [pc, #152]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002f3c:	f006 f850 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8002f46:	f7ff f971 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4e:	2204      	movs	r2, #4
 8002f50:	4619      	mov	r1, r3
 8002f52:	4820      	ldr	r0, [pc, #128]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002f54:	f006 f844 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002f5e:	f7ff f965 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f66:	2208      	movs	r2, #8
 8002f68:	4619      	mov	r1, r3
 8002f6a:	481a      	ldr	r0, [pc, #104]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002f6c:	f006 f838 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8002f76:	f7ff f959 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7e:	220c      	movs	r2, #12
 8002f80:	4619      	mov	r1, r3
 8002f82:	4814      	ldr	r0, [pc, #80]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002f84:	f006 f82c 	bl	8008fe0 <HAL_TIM_PWM_ConfigChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002f8e:	f7ff f94d 	bl	800222c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002faa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002fb6:	f006 fe9f 	bl	8009cf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 8002fc0:	f7ff f934 	bl	800222c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002fc4:	4803      	ldr	r0, [pc, #12]	; (8002fd4 <MX_TIM8_Init+0x184>)
 8002fc6:	f000 f8e9 	bl	800319c <HAL_TIM_MspPostInit>

}
 8002fca:	bf00      	nop
 8002fcc:	3758      	adds	r7, #88	; 0x58
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20001f84 	.word	0x20001f84
 8002fd8:	40010400 	.word	0x40010400

08002fdc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <MX_TIM9_Init+0x6c>)
 8002ff0:	4a16      	ldr	r2, [pc, #88]	; (800304c <MX_TIM9_Init+0x70>)
 8002ff2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <MX_TIM9_Init+0x6c>)
 8002ff6:	22a7      	movs	r2, #167	; 0xa7
 8002ff8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <MX_TIM9_Init+0x6c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64999;
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <MX_TIM9_Init+0x6c>)
 8003002:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8003006:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <MX_TIM9_Init+0x6c>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <MX_TIM9_Init+0x6c>)
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003014:	480c      	ldr	r0, [pc, #48]	; (8003048 <MX_TIM9_Init+0x6c>)
 8003016:	f005 fce8 	bl	80089ea <HAL_TIM_Base_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003020:	f7ff f904 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003028:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800302a:	463b      	mov	r3, r7
 800302c:	4619      	mov	r1, r3
 800302e:	4806      	ldr	r0, [pc, #24]	; (8003048 <MX_TIM9_Init+0x6c>)
 8003030:	f006 f89c 	bl	800916c <HAL_TIM_ConfigClockSource>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800303a:	f7ff f8f7 	bl	800222c <Error_Handler>
  }

}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20002044 	.word	0x20002044
 800304c:	40014000 	.word	0x40014000

08003050 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10d      	bne.n	800307e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 800306c:	f043 0302 	orr.w	r3, r3, #2
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40000400 	.word	0x40000400
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	; 0x30
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 031c 	add.w	r3, r7, #28
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a35      	ldr	r2, [pc, #212]	; (8003188 <HAL_TIM_Base_MspInit+0xf4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d134      	bne.n	8003120 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a33      	ldr	r2, [pc, #204]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a2c      	ldr	r2, [pc, #176]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80030ee:	2301      	movs	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fa:	2300      	movs	r3, #0
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030fe:	2302      	movs	r3, #2
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	4619      	mov	r1, r3
 8003108:	4821      	ldr	r0, [pc, #132]	; (8003190 <HAL_TIM_Base_MspInit+0xfc>)
 800310a:	f000 fdb1 	bl	8003c70 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2100      	movs	r1, #0
 8003112:	2032      	movs	r0, #50	; 0x32
 8003114:	f000 fa5d 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003118:	2032      	movs	r0, #50	; 0x32
 800311a:	f000 fa76 	bl	800360a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800311e:	e02e      	b.n	800317e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_TIM_Base_MspInit+0x100>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
}
 8003146:	e01a      	b.n	800317e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <HAL_TIM_Base_MspInit+0x104>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d115      	bne.n	800317e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	4a0c      	ldr	r2, [pc, #48]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6453      	str	r3, [r2, #68]	; 0x44
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_TIM_Base_MspInit+0xf8>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800316e:	2200      	movs	r2, #0
 8003170:	2100      	movs	r1, #0
 8003172:	2018      	movs	r0, #24
 8003174:	f000 fa2d 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003178:	2018      	movs	r0, #24
 800317a:	f000 fa46 	bl	800360a <HAL_NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3730      	adds	r7, #48	; 0x30
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40023800 	.word	0x40023800
 8003190:	40020000 	.word	0x40020000
 8003194:	40010400 	.word	0x40010400
 8003198:	40014000 	.word	0x40014000

0800319c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a33      	ldr	r2, [pc, #204]	; (8003288 <HAL_TIM_MspPostInit+0xec>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d13c      	bne.n	8003238 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	4b32      	ldr	r3, [pc, #200]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a31      	ldr	r2, [pc, #196]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031f6:	23c0      	movs	r3, #192	; 0xc0
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003206:	2302      	movs	r3, #2
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	481f      	ldr	r0, [pc, #124]	; (8003290 <HAL_TIM_MspPostInit+0xf4>)
 8003212:	f000 fd2d 	bl	8003c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003216:	2303      	movs	r3, #3
 8003218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003226:	2302      	movs	r3, #2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4619      	mov	r1, r3
 8003230:	4818      	ldr	r0, [pc, #96]	; (8003294 <HAL_TIM_MspPostInit+0xf8>)
 8003232:	f000 fd1d 	bl	8003c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003236:	e023      	b.n	8003280 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a16      	ldr	r2, [pc, #88]	; (8003298 <HAL_TIM_MspPostInit+0xfc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d11e      	bne.n	8003280 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 800324c:	f043 0304 	orr.w	r3, r3, #4
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_TIM_MspPostInit+0xf0>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800325e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003270:	2303      	movs	r3, #3
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	4619      	mov	r1, r3
 800327a:	4808      	ldr	r0, [pc, #32]	; (800329c <HAL_TIM_MspPostInit+0x100>)
 800327c:	f000 fcf8 	bl	8003c70 <HAL_GPIO_Init>
}
 8003280:	bf00      	nop
 8003282:	3728      	adds	r7, #40	; 0x28
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40000400 	.word	0x40000400
 800328c:	40023800 	.word	0x40023800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020400 	.word	0x40020400
 8003298:	40010400 	.word	0x40010400
 800329c:	40020800 	.word	0x40020800

080032a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032a6:	e003      	b.n	80032b0 <LoopCopyDataInit>

080032a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032ae:	3104      	adds	r1, #4

080032b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032b8:	d3f6      	bcc.n	80032a8 <CopyDataInit>
  ldr  r2, =_sbss
 80032ba:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032bc:	e002      	b.n	80032c4 <LoopFillZerobss>

080032be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032c0:	f842 3b04 	str.w	r3, [r2], #4

080032c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032c8:	d3f9      	bcc.n	80032be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032ca:	f7ff f8e3 	bl	8002494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ce:	f00a f949 	bl	800d564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d2:	f7fe fa21 	bl	8001718 <main>
  bx  lr    
 80032d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032dc:	0800f7d8 	.word	0x0800f7d8
  ldr  r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032e4:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80032e8:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 80032ec:	20003964 	.word	0x20003964

080032f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f0:	e7fe      	b.n	80032f0 <ADC_IRQHandler>
	...

080032f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_Init+0x40>)
 80032fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HAL_Init+0x40>)
 800330a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800330e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_Init+0x40>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <HAL_Init+0x40>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331c:	2003      	movs	r0, #3
 800331e:	f000 f94d 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003322:	2000      	movs	r0, #0
 8003324:	f000 f808 	bl	8003338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003328:	f7fe ffc4 	bl	80022b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_InitTick+0x54>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_InitTick+0x58>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f965 	bl	8003626 <HAL_SYSTICK_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00e      	b.n	8003384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d80a      	bhi.n	8003382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336c:	2200      	movs	r2, #0
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f000 f92d 	bl	80035d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <HAL_InitTick+0x5c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000018 	.word	0x20000018
 8003390:	20000024 	.word	0x20000024
 8003394:	20000020 	.word	0x20000020

08003398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x20>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_IncTick+0x24>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_IncTick+0x24>)
 80033aa:	6013      	str	r3, [r2, #0]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000024 	.word	0x20000024
 80033bc:	20002084 	.word	0x20002084

080033c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return uwTick;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_GetTick+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20002084 	.word	0x20002084

080033d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff ffee 	bl	80033c0 <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d005      	beq.n	80033fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_Delay+0x40>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033fe:	bf00      	nop
 8003400:	f7ff ffde 	bl	80033c0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	429a      	cmp	r2, r3
 800340e:	d8f7      	bhi.n	8003400 <HAL_Delay+0x28>
  {
  }
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000024 	.word	0x20000024

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	; (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	; (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	; (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	; 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003588:	d301      	bcc.n	800358e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358e:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <SysTick_Config+0x40>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f7ff ff8e 	bl	80034bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <SysTick_Config+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <SysTick_Config+0x40>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff29 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff3e 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff8e 	bl	8003510 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5d 	bl	80034bc <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff31 	bl	8003480 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa2 	bl	8003578 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff feb8 	bl	80033c0 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e099      	b.n	8003790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367c:	e00f      	b.n	800369e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367e:	f7ff fe9f 	bl	80033c0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b05      	cmp	r3, #5
 800368a:	d908      	bls.n	800369e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e078      	b.n	8003790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e8      	bne.n	800367e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4b38      	ldr	r3, [pc, #224]	; (8003798 <HAL_DMA_Init+0x158>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	2b04      	cmp	r3, #4
 8003730:	d117      	bne.n	8003762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fa19 	bl	8003b7c <DMA_CheckFifoParam>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800375e:	2301      	movs	r3, #1
 8003760:	e016      	b.n	8003790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9d0 	bl	8003b10 <DMA_CalcBaseAndBitshift>
 8003770:	4603      	mov	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	223f      	movs	r2, #63	; 0x3f
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	f010803f 	.word	0xf010803f

0800379c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d004      	beq.n	80037ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2280      	movs	r2, #128	; 0x80
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e00c      	b.n	80037d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2205      	movs	r2, #5
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037ec:	4b92      	ldr	r3, [pc, #584]	; (8003a38 <HAL_DMA_IRQHandler+0x258>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a92      	ldr	r2, [pc, #584]	; (8003a3c <HAL_DMA_IRQHandler+0x25c>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0a9b      	lsrs	r3, r3, #10
 80037f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2208      	movs	r2, #8
 800380c:	409a      	lsls	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01a      	beq.n	800384c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	2208      	movs	r2, #8
 800383a:	409a      	lsls	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	2201      	movs	r2, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d012      	beq.n	8003882 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	2201      	movs	r2, #1
 8003870:	409a      	lsls	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2204      	movs	r2, #4
 8003888:	409a      	lsls	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d012      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	2204      	movs	r2, #4
 80038a6:	409a      	lsls	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	f043 0204 	orr.w	r2, r3, #4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	2210      	movs	r2, #16
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d043      	beq.n	8003950 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d03c      	beq.n	8003950 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	2210      	movs	r2, #16
 80038dc:	409a      	lsls	r2, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d018      	beq.n	8003922 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d024      	beq.n	8003950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
 800390e:	e01f      	b.n	8003950 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01b      	beq.n	8003950 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
 8003920:	e016      	b.n	8003950 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0208 	bic.w	r2, r2, #8
 800393e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	2220      	movs	r2, #32
 8003956:	409a      	lsls	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 808e 	beq.w	8003a7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8086 	beq.w	8003a7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003976:	2220      	movs	r2, #32
 8003978:	409a      	lsls	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b05      	cmp	r3, #5
 8003988:	d136      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0216 	bic.w	r2, r2, #22
 8003998:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <HAL_DMA_IRQHandler+0x1da>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0208 	bic.w	r2, r2, #8
 80039c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	223f      	movs	r2, #63	; 0x3f
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d07d      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
        }
        return;
 80039f6:	e078      	b.n	8003aea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01c      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d108      	bne.n	8003a26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d030      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
 8003a24:	e02b      	b.n	8003a7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d027      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e022      	b.n	8003a7e <HAL_DMA_IRQHandler+0x29e>
 8003a38:	20000018 	.word	0x20000018
 8003a3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0210 	bic.w	r2, r2, #16
 8003a5c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d032      	beq.n	8003aec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d022      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2205      	movs	r2, #5
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d307      	bcc.n	8003ac6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f2      	bne.n	8003aaa <HAL_DMA_IRQHandler+0x2ca>
 8003ac4:	e000      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ac6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_IRQHandler+0x30c>
        return;
 8003aea:	bf00      	nop
    }
  }
}
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop

08003af4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b02:	b2db      	uxtb	r3, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	3b10      	subs	r3, #16
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <DMA_CalcBaseAndBitshift+0x64>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <DMA_CalcBaseAndBitshift+0x68>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d909      	bls.n	8003b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	1d1a      	adds	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b50:	e007      	b.n	8003b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	aaaaaaab 	.word	0xaaaaaaab
 8003b78:	0800f5a4 	.word	0x0800f5a4

08003b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d855      	bhi.n	8003c48 <DMA_CheckFifoParam+0xcc>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <DMA_CheckFifoParam+0x28>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bc7 	.word	0x08003bc7
 8003bac:	08003bb5 	.word	0x08003bb5
 8003bb0:	08003c49 	.word	0x08003c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d045      	beq.n	8003c4c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e042      	b.n	8003c4c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bce:	d13f      	bne.n	8003c50 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd4:	e03c      	b.n	8003c50 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bde:	d121      	bne.n	8003c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d836      	bhi.n	8003c54 <DMA_CheckFifoParam+0xd8>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <DMA_CheckFifoParam+0x70>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c03 	.word	0x08003c03
 8003bf4:	08003bfd 	.word	0x08003bfd
 8003bf8:	08003c15 	.word	0x08003c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e02f      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d024      	beq.n	8003c58 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c12:	e021      	b.n	8003c58 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c1c:	d11e      	bne.n	8003c5c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c22:	e01b      	b.n	8003c5c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d902      	bls.n	8003c30 <DMA_CheckFifoParam+0xb4>
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d003      	beq.n	8003c36 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c2e:	e018      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      break;
 8003c34:	e015      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      break;
 8003c46:	e00b      	b.n	8003c60 <DMA_CheckFifoParam+0xe4>
      break;
 8003c48:	bf00      	nop
 8003c4a:	e00a      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e008      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;
 8003c50:	bf00      	nop
 8003c52:	e006      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;
 8003c54:	bf00      	nop
 8003c56:	e004      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;
 8003c58:	bf00      	nop
 8003c5a:	e002      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;   
 8003c5c:	bf00      	nop
 8003c5e:	e000      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;
 8003c60:	bf00      	nop
    }
  } 
  
  return status; 
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	; 0x24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	e16b      	b.n	8003f64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	f040 815a 	bne.w	8003f5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d00b      	beq.n	8003cca <HAL_GPIO_Init+0x5a>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d007      	beq.n	8003cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cbe:	2b11      	cmp	r3, #17
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b12      	cmp	r3, #18
 8003cc8:	d130      	bne.n	8003d2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	2203      	movs	r2, #3
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0xfc>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b12      	cmp	r3, #18
 8003d6a:	d123      	bne.n	8003db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	220f      	movs	r2, #15
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	08da      	lsrs	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3208      	adds	r2, #8
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	2203      	movs	r2, #3
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0203 	and.w	r2, r3, #3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80b4 	beq.w	8003f5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <HAL_GPIO_Init+0x308>)
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	4a5e      	ldr	r2, [pc, #376]	; (8003f78 <HAL_GPIO_Init+0x308>)
 8003e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e04:	6453      	str	r3, [r2, #68]	; 0x44
 8003e06:	4b5c      	ldr	r3, [pc, #368]	; (8003f78 <HAL_GPIO_Init+0x308>)
 8003e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e12:	4a5a      	ldr	r2, [pc, #360]	; (8003f7c <HAL_GPIO_Init+0x30c>)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	220f      	movs	r2, #15
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a51      	ldr	r2, [pc, #324]	; (8003f80 <HAL_GPIO_Init+0x310>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d02b      	beq.n	8003e96 <HAL_GPIO_Init+0x226>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a50      	ldr	r2, [pc, #320]	; (8003f84 <HAL_GPIO_Init+0x314>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d025      	beq.n	8003e92 <HAL_GPIO_Init+0x222>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4f      	ldr	r2, [pc, #316]	; (8003f88 <HAL_GPIO_Init+0x318>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <HAL_GPIO_Init+0x21e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4e      	ldr	r2, [pc, #312]	; (8003f8c <HAL_GPIO_Init+0x31c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d019      	beq.n	8003e8a <HAL_GPIO_Init+0x21a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4d      	ldr	r2, [pc, #308]	; (8003f90 <HAL_GPIO_Init+0x320>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <HAL_GPIO_Init+0x216>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4c      	ldr	r2, [pc, #304]	; (8003f94 <HAL_GPIO_Init+0x324>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00d      	beq.n	8003e82 <HAL_GPIO_Init+0x212>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <HAL_GPIO_Init+0x328>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_GPIO_Init+0x20e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4a      	ldr	r2, [pc, #296]	; (8003f9c <HAL_GPIO_Init+0x32c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_GPIO_Init+0x20a>
 8003e76:	2307      	movs	r3, #7
 8003e78:	e00e      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	e00c      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e7e:	2306      	movs	r3, #6
 8003e80:	e00a      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e82:	2305      	movs	r3, #5
 8003e84:	e008      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e004      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e002      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_GPIO_Init+0x228>
 8003e96:	2300      	movs	r3, #0
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	f002 0203 	and.w	r2, r2, #3
 8003e9e:	0092      	lsls	r2, r2, #2
 8003ea0:	4093      	lsls	r3, r2
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea8:	4934      	ldr	r1, [pc, #208]	; (8003f7c <HAL_GPIO_Init+0x30c>)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	089b      	lsrs	r3, r3, #2
 8003eae:	3302      	adds	r3, #2
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eda:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ee0:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0a:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f2e:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f58:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <HAL_GPIO_Init+0x330>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	f67f ae90 	bls.w	8003c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3724      	adds	r7, #36	; 0x24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40020400 	.word	0x40020400
 8003f88:	40020800 	.word	0x40020800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40021400 	.word	0x40021400
 8003f98:	40021800 	.word	0x40021800
 8003f9c:	40021c00 	.word	0x40021c00
 8003fa0:	40013c00 	.word	0x40013c00

08003fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	887b      	ldrh	r3, [r7, #2]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
 8003fc0:	e001      	b.n	8003fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	807b      	strh	r3, [r7, #2]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe4:	787b      	ldrb	r3, [r7, #1]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ff0:	e003      	b.n	8003ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	041a      	lsls	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	887b      	ldrh	r3, [r7, #2]
 8004018:	401a      	ands	r2, r3
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	429a      	cmp	r2, r3
 800401e:	d104      	bne.n	800402a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	041a      	lsls	r2, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004028:	e002      	b.n	8004030 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800402a:	887a      	ldrh	r2, [r7, #2]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	619a      	str	r2, [r3, #24]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e11f      	b.n	800428e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd f87a 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800408e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800409e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040a0:	f004 fac8 	bl	8008634 <HAL_RCC_GetPCLK1Freq>
 80040a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4a7b      	ldr	r2, [pc, #492]	; (8004298 <HAL_I2C_Init+0x25c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d807      	bhi.n	80040c0 <HAL_I2C_Init+0x84>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4a7a      	ldr	r2, [pc, #488]	; (800429c <HAL_I2C_Init+0x260>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	bf94      	ite	ls
 80040b8:	2301      	movls	r3, #1
 80040ba:	2300      	movhi	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e006      	b.n	80040ce <HAL_I2C_Init+0x92>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a77      	ldr	r2, [pc, #476]	; (80042a0 <HAL_I2C_Init+0x264>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bf94      	ite	ls
 80040c8:	2301      	movls	r3, #1
 80040ca:	2300      	movhi	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0db      	b.n	800428e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a72      	ldr	r2, [pc, #456]	; (80042a4 <HAL_I2C_Init+0x268>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0c9b      	lsrs	r3, r3, #18
 80040e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a64      	ldr	r2, [pc, #400]	; (8004298 <HAL_I2C_Init+0x25c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d802      	bhi.n	8004110 <HAL_I2C_Init+0xd4>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3301      	adds	r3, #1
 800410e:	e009      	b.n	8004124 <HAL_I2C_Init+0xe8>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	4a63      	ldr	r2, [pc, #396]	; (80042a8 <HAL_I2C_Init+0x26c>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	099b      	lsrs	r3, r3, #6
 8004122:	3301      	adds	r3, #1
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	430b      	orrs	r3, r1
 800412a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4956      	ldr	r1, [pc, #344]	; (8004298 <HAL_I2C_Init+0x25c>)
 8004140:	428b      	cmp	r3, r1
 8004142:	d80d      	bhi.n	8004160 <HAL_I2C_Init+0x124>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1e59      	subs	r1, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004152:	3301      	adds	r3, #1
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	2b04      	cmp	r3, #4
 800415a:	bf38      	it	cc
 800415c:	2304      	movcc	r3, #4
 800415e:	e04f      	b.n	8004200 <HAL_I2C_Init+0x1c4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d111      	bne.n	800418c <HAL_I2C_Init+0x150>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	440b      	add	r3, r1
 8004176:	fbb0 f3f3 	udiv	r3, r0, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e012      	b.n	80041b2 <HAL_I2C_Init+0x176>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e58      	subs	r0, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	0099      	lsls	r1, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Init+0x17e>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e022      	b.n	8004200 <HAL_I2C_Init+0x1c4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <HAL_I2C_Init+0x1a4>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1e58      	subs	r0, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	440b      	add	r3, r1
 80041d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d4:	3301      	adds	r3, #1
 80041d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041de:	e00f      	b.n	8004200 <HAL_I2C_Init+0x1c4>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	0099      	lsls	r1, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	6809      	ldr	r1, [r1, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800422e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6911      	ldr	r1, [r2, #16]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	000186a0 	.word	0x000186a0
 800429c:	001e847f 	.word	0x001e847f
 80042a0:	003d08ff 	.word	0x003d08ff
 80042a4:	431bde83 	.word	0x431bde83
 80042a8:	10624dd3 	.word	0x10624dd3

080042ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	461a      	mov	r2, r3
 80042b8:	460b      	mov	r3, r1
 80042ba:	817b      	strh	r3, [r7, #10]
 80042bc:	4613      	mov	r3, r2
 80042be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042c0:	f7ff f87e 	bl	80033c0 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	f040 80e0 	bne.w	8004494 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2319      	movs	r3, #25
 80042da:	2201      	movs	r2, #1
 80042dc:	4970      	ldr	r1, [pc, #448]	; (80044a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f002 f9f5 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
 80042ec:	e0d3      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_I2C_Master_Transmit+0x50>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e0cc      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1ea>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d007      	beq.n	8004322 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0201 	orr.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004330:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2221      	movs	r2, #33	; 0x21
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2210      	movs	r2, #16
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	893a      	ldrh	r2, [r7, #8]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a50      	ldr	r2, [pc, #320]	; (80044a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f001 ffc8 	bl	8006300 <I2C_MasterRequestWrite>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e08d      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004390:	e066      	b.n	8004460 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	6a39      	ldr	r1, [r7, #32]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f002 fa6f 	bl	800687a <I2C_WaitOnTXEFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d107      	bne.n	80043ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06b      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d11b      	bne.n	8004434 <HAL_I2C_Master_Transmit+0x188>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d017      	beq.n	8004434 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	6a39      	ldr	r1, [r7, #32]
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f002 fa5f 	bl	80068fc <I2C_WaitOnBTFFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00d      	beq.n	8004460 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b04      	cmp	r3, #4
 800444a:	d107      	bne.n	800445c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e01a      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	2b00      	cmp	r3, #0
 8004466:	d194      	bne.n	8004392 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	00100002 	.word	0x00100002
 80044a4:	ffff0000 	.word	0xffff0000

080044a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08c      	sub	sp, #48	; 0x30
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	461a      	mov	r2, r3
 80044b6:	4603      	mov	r3, r0
 80044b8:	817b      	strh	r3, [r7, #10]
 80044ba:	460b      	mov	r3, r1
 80044bc:	813b      	strh	r3, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044c2:	f7fe ff7d 	bl	80033c0 <HAL_GetTick>
 80044c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	f040 8208 	bne.w	80048e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	2319      	movs	r3, #25
 80044dc:	2201      	movs	r2, #1
 80044de:	497b      	ldr	r1, [pc, #492]	; (80046cc <HAL_I2C_Mem_Read+0x224>)
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f002 f8f4 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
 80044ee:	e1fb      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_I2C_Mem_Read+0x56>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e1f4      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d007      	beq.n	8004524 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2222      	movs	r2, #34	; 0x22
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2240      	movs	r2, #64	; 0x40
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a5b      	ldr	r2, [pc, #364]	; (80046d0 <HAL_I2C_Mem_Read+0x228>)
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004566:	88f8      	ldrh	r0, [r7, #6]
 8004568:	893a      	ldrh	r2, [r7, #8]
 800456a:	8979      	ldrh	r1, [r7, #10]
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4603      	mov	r3, r0
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f001 ff44 	bl	8006404 <I2C_RequestMemoryRead>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1b0      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458a:	2b00      	cmp	r3, #0
 800458c:	d113      	bne.n	80045b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	623b      	str	r3, [r7, #32]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	623b      	str	r3, [r7, #32]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e184      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d11b      	bne.n	80045f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61fb      	str	r3, [r7, #28]
 80045e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e164      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d11b      	bne.n	8004636 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	e144      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800464c:	e138      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	2b03      	cmp	r3, #3
 8004654:	f200 80f1 	bhi.w	800483a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	2b01      	cmp	r3, #1
 800465e:	d123      	bne.n	80046a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f002 f98a 	bl	800697e <I2C_WaitOnRXNEFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e139      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a6:	e10b      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d14e      	bne.n	800474e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	2200      	movs	r2, #0
 80046b8:	4906      	ldr	r1, [pc, #24]	; (80046d4 <HAL_I2C_Mem_Read+0x22c>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f002 f807 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e10e      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
 80046ca:	bf00      	nop
 80046cc:	00100002 	.word	0x00100002
 80046d0:	ffff0000 	.word	0xffff0000
 80046d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800474c:	e0b8      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	2200      	movs	r2, #0
 8004756:	4966      	ldr	r1, [pc, #408]	; (80048f0 <HAL_I2C_Mem_Read+0x448>)
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f001 ffb8 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e0bf      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	2200      	movs	r2, #0
 80047b2:	494f      	ldr	r1, [pc, #316]	; (80048f0 <HAL_I2C_Mem_Read+0x448>)
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f001 ff8a 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e091      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004838:	e042      	b.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f002 f89d 	bl	800697e <I2C_WaitOnRXNEFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e04c      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b04      	cmp	r3, #4
 800488c:	d118      	bne.n	80048c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f47f aec2 	bne.w	800464e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3728      	adds	r7, #40	; 0x28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	00010004 	.word	0x00010004

080048f4 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	461a      	mov	r2, r3
 8004900:	460b      	mov	r3, r1
 8004902:	817b      	strh	r3, [r7, #10]
 8004904:	4613      	mov	r3, r2
 8004906:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b20      	cmp	r3, #32
 800491a:	f040 809e 	bne.w	8004a5a <HAL_I2C_Master_Seq_Transmit_IT+0x166>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d002      	beq.n	800492a <HAL_I2C_Master_Seq_Transmit_IT+0x36>
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d130      	bne.n	800498c <HAL_I2C_Master_Seq_Transmit_IT+0x98>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800492a:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	4a4e      	ldr	r2, [pc, #312]	; (8004a6c <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0a1a      	lsrs	r2, r3, #8
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009a      	lsls	r2, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	3b01      	subs	r3, #1
 8004948:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d116      	bne.n	800497e <HAL_I2C_Master_Seq_Transmit_IT+0x8a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	f043 0220 	orr.w	r2, r3, #32
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e06e      	b.n	8004a5c <HAL_I2C_Master_Seq_Transmit_IT+0x168>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b02      	cmp	r3, #2
 800498a:	d0db      	beq.n	8004944 <HAL_I2C_Master_Seq_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8004996:	2302      	movs	r3, #2
 8004998:	e060      	b.n	8004a5c <HAL_I2C_Master_Seq_Transmit_IT+0x168>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d007      	beq.n	80049c0 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2210      	movs	r2, #16
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	893a      	ldrh	r2, [r7, #8]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004a02:	897a      	ldrh	r2, [r7, #10]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b11      	cmp	r3, #17
 8004a12:	d10c      	bne.n	8004a2e <HAL_I2C_Master_Seq_Transmit_IT+0x13a>
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a1a:	d003      	beq.n	8004a24 <HAL_I2C_Master_Seq_Transmit_IT+0x130>
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a22:	d101      	bne.n	8004a28 <HAL_I2C_Master_Seq_Transmit_IT+0x134>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <HAL_I2C_Master_Seq_Transmit_IT+0x136>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004a54:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000018 	.word	0x20000018
 8004a6c:	14f8b589 	.word	0x14f8b589

08004a70 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	817b      	strh	r3, [r7, #10]
 8004a80:	4613      	mov	r3, r2
 8004a82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a8c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004a90:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	f040 80d2 	bne.w	8004c44 <HAL_I2C_Master_Seq_Receive_IT+0x1d4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d002      	beq.n	8004aac <HAL_I2C_Master_Seq_Receive_IT+0x3c>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d130      	bne.n	8004b0e <HAL_I2C_Master_Seq_Receive_IT+0x9e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aac:	4b69      	ldr	r3, [pc, #420]	; (8004c54 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	08db      	lsrs	r3, r3, #3
 8004ab2:	4a69      	ldr	r2, [pc, #420]	; (8004c58 <HAL_I2C_Master_Seq_Receive_IT+0x1e8>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	0a1a      	lsrs	r2, r3, #8
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009a      	lsls	r2, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d116      	bne.n	8004b00 <HAL_I2C_Master_Seq_Receive_IT+0x90>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0a2      	b.n	8004c46 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d0db      	beq.n	8004ac6 <HAL_I2C_Master_Seq_Receive_IT+0x56>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e094      	b.n	8004c46 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d007      	beq.n	8004b42 <HAL_I2C_Master_Seq_Receive_IT+0xd2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b50:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2222      	movs	r2, #34	; 0x22
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	893a      	ldrh	r2, [r7, #8]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004b84:	897a      	ldrh	r2, [r7, #10]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d126      	bne.n	8004be8 <HAL_I2C_Master_Seq_Receive_IT+0x178>
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d002      	beq.n	8004ba6 <HAL_I2C_Master_Seq_Receive_IT+0x136>
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d120      	bne.n	8004be8 <HAL_I2C_Master_Seq_Receive_IT+0x178>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b12      	cmp	r3, #18
 8004baa:	d114      	bne.n	8004bd6 <HAL_I2C_Master_Seq_Receive_IT+0x166>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bba:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bd2:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004bd4:	e010      	b.n	8004bf8 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004be4:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004be6:	e007      	b.n	8004bf8 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf6:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b12      	cmp	r3, #18
 8004bfc:	d10c      	bne.n	8004c18 <HAL_I2C_Master_Seq_Receive_IT+0x1a8>
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c04:	d003      	beq.n	8004c0e <HAL_I2C_Master_Seq_Receive_IT+0x19e>
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c0c:	d101      	bne.n	8004c12 <HAL_I2C_Master_Seq_Receive_IT+0x1a2>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_I2C_Master_Seq_Receive_IT+0x1a4>
 8004c12:	2300      	movs	r3, #0
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d107      	bne.n	8004c28 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c26:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3724      	adds	r7, #36	; 0x24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000018 	.word	0x20000018
 8004c58:	14f8b589 	.word	0x14f8b589

08004c5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d003      	beq.n	8004c94 <HAL_I2C_EV_IRQHandler+0x38>
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	f040 80b6 	bne.w	8004e00 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10d      	bne.n	8004cca <HAL_I2C_EV_IRQHandler+0x6e>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004cb4:	d003      	beq.n	8004cbe <HAL_I2C_EV_IRQHandler+0x62>
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004cbc:	d101      	bne.n	8004cc2 <HAL_I2C_EV_IRQHandler+0x66>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_I2C_EV_IRQHandler+0x68>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f000 8127 	beq.w	8004f18 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00c      	beq.n	8004cee <HAL_I2C_EV_IRQHandler+0x92>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	0a5b      	lsrs	r3, r3, #9
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 fed1 	bl	8006a88 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fcf8 	bl	80056dc <I2C_Master_SB>
 8004cec:	e087      	b.n	8004dfe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	08db      	lsrs	r3, r3, #3
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_I2C_EV_IRQHandler+0xb2>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	0a5b      	lsrs	r3, r3, #9
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fd6e 	bl	80057e8 <I2C_Master_ADD10>
 8004d0c:	e077      	b.n	8004dfe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_I2C_EV_IRQHandler+0xd2>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	0a5b      	lsrs	r3, r3, #9
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fd88 	bl	800583c <I2C_Master_ADDR>
 8004d2c:	e067      	b.n	8004dfe <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d030      	beq.n	8004d9c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d48:	f000 80e8 	beq.w	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00f      	beq.n	8004d78 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	0a9b      	lsrs	r3, r3, #10
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9c4 	bl	80050fe <I2C_MasterTransmit_TXE>
 8004d76:	e042      	b.n	8004dfe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80cb 	beq.w	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	0a5b      	lsrs	r3, r3, #9
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 80c4 	beq.w	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fa4e 	bl	8005236 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d9a:	e0bf      	b.n	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004daa:	f000 80b7 	beq.w	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	099b      	lsrs	r3, r3, #6
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00f      	beq.n	8004dda <HAL_I2C_EV_IRQHandler+0x17e>
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	0a9b      	lsrs	r3, r3, #10
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d009      	beq.n	8004dda <HAL_I2C_EV_IRQHandler+0x17e>
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	089b      	lsrs	r3, r3, #2
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fb16 	bl	8005404 <I2C_MasterReceive_RXNE>
 8004dd8:	e011      	b.n	8004dfe <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 809a 	beq.w	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	0a5b      	lsrs	r3, r3, #9
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8093 	beq.w	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fb86 	bl	8005508 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dfc:	e08e      	b.n	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004dfe:	e08d      	b.n	8004f1c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	61fb      	str	r3, [r7, #28]
 8004e10:	e007      	b.n	8004e22 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	085b      	lsrs	r3, r3, #1
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d012      	beq.n	8004e54 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	0a5b      	lsrs	r3, r3, #9
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 ff44 	bl	8005cda <I2C_Slave_ADDR>
 8004e52:	e066      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0x218>
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	0a5b      	lsrs	r3, r3, #9
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 ff79 	bl	8005d64 <I2C_Slave_STOPF>
 8004e72:	e056      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	2b21      	cmp	r3, #33	; 0x21
 8004e78:	d002      	beq.n	8004e80 <HAL_I2C_EV_IRQHandler+0x224>
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	2b29      	cmp	r3, #41	; 0x29
 8004e7e:	d125      	bne.n	8004ecc <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	09db      	lsrs	r3, r3, #7
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00f      	beq.n	8004eac <HAL_I2C_EV_IRQHandler+0x250>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	0a9b      	lsrs	r3, r3, #10
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <HAL_I2C_EV_IRQHandler+0x250>
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fe5a 	bl	8005b5e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eaa:	e039      	b.n	8004f20 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d033      	beq.n	8004f20 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	0a5b      	lsrs	r3, r3, #9
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02d      	beq.n	8004f20 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fe87 	bl	8005bd8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eca:	e029      	b.n	8004f20 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00f      	beq.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x29c>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	0a9b      	lsrs	r3, r3, #10
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x29c>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fe92 	bl	8005c1a <I2C_SlaveReceive_RXNE>
 8004ef6:	e014      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	089b      	lsrs	r3, r3, #2
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	0a5b      	lsrs	r3, r3, #9
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fec0 	bl	8005c96 <I2C_SlaveReceive_BTF>
 8004f16:	e004      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004f18:	bf00      	nop
 8004f1a:	e002      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f1c:	bf00      	nop
 8004f1e:	e000      	b.n	8004f22 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f20:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <HAL_I2C_ER_IRQHandler+0x4e>
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f74:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	0a5b      	lsrs	r3, r3, #9
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00e      	beq.n	8004fa0 <HAL_I2C_ER_IRQHandler+0x78>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004f9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	0a9b      	lsrs	r3, r3, #10
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d03f      	beq.n	800502c <HAL_I2C_ER_IRQHandler+0x104>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d039      	beq.n	800502c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004fb8:	7efb      	ldrb	r3, [r7, #27]
 8004fba:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004fd2:	7ebb      	ldrb	r3, [r7, #26]
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d112      	bne.n	8004ffe <HAL_I2C_ER_IRQHandler+0xd6>
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <HAL_I2C_ER_IRQHandler+0xd6>
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b21      	cmp	r3, #33	; 0x21
 8004fe2:	d008      	beq.n	8004ff6 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	2b29      	cmp	r3, #41	; 0x29
 8004fe8:	d005      	beq.n	8004ff6 <HAL_I2C_ER_IRQHandler+0xce>
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b28      	cmp	r3, #40	; 0x28
 8004fee:	d106      	bne.n	8004ffe <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b21      	cmp	r3, #33	; 0x21
 8004ff4:	d103      	bne.n	8004ffe <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 ffe4 	bl	8005fc4 <I2C_Slave_AF>
 8004ffc:	e016      	b.n	800502c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005006:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	f043 0304 	orr.w	r3, r3, #4
 800500e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005010:	7efb      	ldrb	r3, [r7, #27]
 8005012:	2b10      	cmp	r3, #16
 8005014:	d002      	beq.n	800501c <HAL_I2C_ER_IRQHandler+0xf4>
 8005016:	7efb      	ldrb	r3, [r7, #27]
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d107      	bne.n	800502c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	0adb      	lsrs	r3, r3, #11
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <HAL_I2C_ER_IRQHandler+0x12e>
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	f043 0308 	orr.w	r3, r3, #8
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005054:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 f81b 	bl	80060a4 <I2C_ITError>
  }
}
 800506e:	bf00      	nop
 8005070:	3728      	adds	r7, #40	; 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	70fb      	strb	r3, [r7, #3]
 80050aa:	4613      	mov	r3, r2
 80050ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005114:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d150      	bne.n	80051c6 <I2C_MasterTransmit_TXE+0xc8>
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b21      	cmp	r3, #33	; 0x21
 8005128:	d14d      	bne.n	80051c6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d01d      	beq.n	800516c <I2C_MasterTransmit_TXE+0x6e>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b20      	cmp	r3, #32
 8005134:	d01a      	beq.n	800516c <I2C_MasterTransmit_TXE+0x6e>
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800513c:	d016      	beq.n	800516c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2211      	movs	r2, #17
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fd f811 	bl	800218c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800516a:	e060      	b.n	800522e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800517a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d107      	bne.n	80051b6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff ff8d 	bl	80050ce <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051b4:	e03b      	b.n	800522e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc ffe4 	bl	800218c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051c4:	e033      	b.n	800522e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b21      	cmp	r3, #33	; 0x21
 80051ca:	d005      	beq.n	80051d8 <I2C_MasterTransmit_TXE+0xda>
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d12d      	bne.n	800522e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b22      	cmp	r3, #34	; 0x22
 80051d6:	d12a      	bne.n	800522e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d108      	bne.n	80051f4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80051f2:	e01c      	b.n	800522e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d103      	bne.n	8005208 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f898 	bl	8005336 <I2C_MemoryTransmit_TXE_BTF>
}
 8005206:	e012      	b.n	800522e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800522c:	e7ff      	b.n	800522e <I2C_MasterTransmit_TXE+0x130>
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b21      	cmp	r3, #33	; 0x21
 800524e:	d165      	bne.n	800531c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	781a      	ldrb	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800527e:	e056      	b.n	800532e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b08      	cmp	r3, #8
 8005284:	d01d      	beq.n	80052c2 <I2C_MasterTransmit_BTF+0x8c>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b20      	cmp	r3, #32
 800528a:	d01a      	beq.n	80052c2 <I2C_MasterTransmit_BTF+0x8c>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005292:	d016      	beq.n	80052c2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052a2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2211      	movs	r2, #17
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fc ff66 	bl	800218c <HAL_I2C_MasterTxCpltCallback>
}
 80052c0:	e035      	b.n	800532e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052d0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d107      	bne.n	800530c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff fee2 	bl	80050ce <HAL_I2C_MemTxCpltCallback>
}
 800530a:	e010      	b.n	800532e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fc ff39 	bl	800218c <HAL_I2C_MasterTxCpltCallback>
}
 800531a:	e008      	b.n	800532e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d102      	bne.n	800532e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f804 	bl	8005336 <I2C_MemoryTransmit_TXE_BTF>
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11d      	bne.n	8005382 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10b      	bne.n	8005366 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005352:	b2da      	uxtb	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005364:	e048      	b.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800536a:	b29b      	uxth	r3, r3
 800536c:	121b      	asrs	r3, r3, #8
 800536e:	b2da      	uxtb	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005380:	e03a      	b.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005386:	2b01      	cmp	r3, #1
 8005388:	d10b      	bne.n	80053a2 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538e:	b2da      	uxtb	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053a0:	e02a      	b.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d126      	bne.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b22      	cmp	r3, #34	; 0x22
 80053b4:	d108      	bne.n	80053c8 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	e017      	b.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b21      	cmp	r3, #33	; 0x21
 80053d2:	d111      	bne.n	80053f8 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b22      	cmp	r3, #34	; 0x22
 8005416:	d173      	bne.n	8005500 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d920      	bls.n	8005468 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b03      	cmp	r3, #3
 8005454:	d154      	bne.n	8005500 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005464:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005466:	e04b      	b.n	8005500 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	2b02      	cmp	r3, #2
 800546e:	d047      	beq.n	8005500 <I2C_MasterReceive_RXNE+0xfc>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d002      	beq.n	800547c <I2C_MasterReceive_RXNE+0x78>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d141      	bne.n	8005500 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800549a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d10a      	bne.n	80054ec <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fc fe47 	bl	8002178 <HAL_I2C_MemRxCpltCallback>
}
 80054ea:	e009      	b.n	8005500 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2212      	movs	r2, #18
 80054f8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc fe5c 	bl	80021b8 <HAL_I2C_MasterRxCpltCallback>
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b04      	cmp	r3, #4
 800551e:	d11b      	bne.n	8005558 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005556:	e0bd      	b.n	80056d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b03      	cmp	r3, #3
 8005560:	d129      	bne.n	80055b6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005570:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b04      	cmp	r3, #4
 8005576:	d00a      	beq.n	800558e <I2C_MasterReceive_BTF+0x86>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d007      	beq.n	800558e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691a      	ldr	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055b4:	e08e      	b.n	80056d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d176      	bne.n	80056ae <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d002      	beq.n	80055cc <I2C_MasterReceive_BTF+0xc4>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d108      	bne.n	80055de <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e019      	b.n	8005612 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d002      	beq.n	80055ea <I2C_MasterReceive_BTF+0xe2>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d108      	bne.n	80055fc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	e00a      	b.n	8005612 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d007      	beq.n	8005612 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005610:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	3b01      	subs	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800566c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b40      	cmp	r3, #64	; 0x40
 8005680:	d10a      	bne.n	8005698 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fc fd71 	bl	8002178 <HAL_I2C_MemRxCpltCallback>
}
 8005696:	e01d      	b.n	80056d4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2212      	movs	r2, #18
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fc fd86 	bl	80021b8 <HAL_I2C_MasterRxCpltCallback>
}
 80056ac:	e012      	b.n	80056d4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b01      	subs	r3, #1
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d117      	bne.n	8005720 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	461a      	mov	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005708:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800570a:	e067      	b.n	80057dc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]
}
 800571e:	e05d      	b.n	80057dc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005728:	d133      	bne.n	8005792 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b21      	cmp	r3, #33	; 0x21
 8005734:	d109      	bne.n	800574a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	b2db      	uxtb	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005746:	611a      	str	r2, [r3, #16]
 8005748:	e008      	b.n	800575c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	b2da      	uxtb	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <I2C_Master_SB+0x92>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	2b00      	cmp	r3, #0
 8005774:	d032      	beq.n	80057dc <I2C_Master_SB+0x100>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02d      	beq.n	80057dc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800578e:	605a      	str	r2, [r3, #4]
}
 8005790:	e024      	b.n	80057dc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10e      	bne.n	80057b8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	b29b      	uxth	r3, r3
 80057a0:	11db      	asrs	r3, r3, #7
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0306 	and.w	r3, r3, #6
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f063 030f 	orn	r3, r3, #15
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	611a      	str	r2, [r3, #16]
}
 80057b6:	e011      	b.n	80057dc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10d      	bne.n	80057dc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	11db      	asrs	r3, r3, #7
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	f003 0306 	and.w	r3, r3, #6
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f063 030e 	orn	r3, r3, #14
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	611a      	str	r2, [r3, #16]
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <I2C_Master_ADD10+0x24>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d011      	beq.n	8005830 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <I2C_Master_ADD10+0x38>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800582e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800583c:	b480      	push	{r7}
 800583e:	b091      	sub	sp, #68	; 0x44
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b22      	cmp	r3, #34	; 0x22
 8005864:	f040 8169 	bne.w	8005b3a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <I2C_Master_ADDR+0x54>
 8005870:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d10b      	bne.n	8005890 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005878:	2300      	movs	r3, #0
 800587a:	633b      	str	r3, [r7, #48]	; 0x30
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	633b      	str	r3, [r7, #48]	; 0x30
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	633b      	str	r3, [r7, #48]	; 0x30
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	e160      	b.n	8005b52 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	2b00      	cmp	r3, #0
 8005896:	d11d      	bne.n	80058d4 <I2C_Master_ADDR+0x98>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058a0:	d118      	bne.n	80058d4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a2:	2300      	movs	r3, #0
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058c6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	651a      	str	r2, [r3, #80]	; 0x50
 80058d2:	e13e      	b.n	8005b52 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d113      	bne.n	8005906 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058de:	2300      	movs	r3, #0
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e115      	b.n	8005b32 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	f040 808a 	bne.w	8005a26 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005918:	d137      	bne.n	800598a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005928:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005938:	d113      	bne.n	8005962 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594a:	2300      	movs	r3, #0
 800594c:	627b      	str	r3, [r7, #36]	; 0x24
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	e0e7      	b.n	8005b32 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005962:	2300      	movs	r3, #0
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e0d3      	b.n	8005b32 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	2b08      	cmp	r3, #8
 800598e:	d02e      	beq.n	80059ee <I2C_Master_ADDR+0x1b2>
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	2b20      	cmp	r3, #32
 8005994:	d02b      	beq.n	80059ee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	2b12      	cmp	r3, #18
 800599a:	d102      	bne.n	80059a2 <I2C_Master_ADDR+0x166>
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d125      	bne.n	80059ee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d00e      	beq.n	80059c6 <I2C_Master_ADDR+0x18a>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d00b      	beq.n	80059c6 <I2C_Master_ADDR+0x18a>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d008      	beq.n	80059c6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	e0a1      	b.n	8005b32 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e085      	b.n	8005b32 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d14d      	bne.n	8005acc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d016      	beq.n	8005a64 <I2C_Master_ADDR+0x228>
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d013      	beq.n	8005a64 <I2C_Master_ADDR+0x228>
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d010      	beq.n	8005a64 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	e007      	b.n	8005a74 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a72:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a82:	d117      	bne.n	8005ab4 <I2C_Master_ADDR+0x278>
 8005a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a8a:	d00b      	beq.n	8005aa4 <I2C_Master_ADDR+0x268>
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d008      	beq.n	8005aa4 <I2C_Master_ADDR+0x268>
 8005a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d005      	beq.n	8005aa4 <I2C_Master_ADDR+0x268>
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d002      	beq.n	8005aa4 <I2C_Master_ADDR+0x268>
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d107      	bne.n	8005ab4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	e032      	b.n	8005b32 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ada:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aea:	d117      	bne.n	8005b1c <I2C_Master_ADDR+0x2e0>
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005af2:	d00b      	beq.n	8005b0c <I2C_Master_ADDR+0x2d0>
 8005af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d008      	beq.n	8005b0c <I2C_Master_ADDR+0x2d0>
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d005      	beq.n	8005b0c <I2C_Master_ADDR+0x2d0>
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	2b10      	cmp	r3, #16
 8005b04:	d002      	beq.n	8005b0c <I2C_Master_ADDR+0x2d0>
 8005b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d107      	bne.n	8005b1c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b38:	e00b      	b.n	8005b52 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
}
 8005b50:	e7ff      	b.n	8005b52 <I2C_Master_ADDR+0x316>
 8005b52:	bf00      	nop
 8005b54:	3744      	adds	r7, #68	; 0x44
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d02b      	beq.n	8005bd0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d114      	bne.n	8005bd0 <I2C_SlaveTransmit_TXE+0x72>
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b29      	cmp	r3, #41	; 0x29
 8005baa:	d111      	bne.n	8005bd0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2221      	movs	r2, #33	; 0x21
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2228      	movs	r2, #40	; 0x28
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7ff fa53 	bl	8005076 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02c      	beq.n	8005c8e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d114      	bne.n	8005c8e <I2C_SlaveReceive_RXNE+0x74>
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b2a      	cmp	r3, #42	; 0x2a
 8005c68:	d111      	bne.n	8005c8e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2222      	movs	r2, #34	; 0x22
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2228      	movs	r2, #40	; 0x28
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff f9fe 	bl	800508a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005cf4:	2b28      	cmp	r3, #40	; 0x28
 8005cf6:	d127      	bne.n	8005d48 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d06:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	09db      	lsrs	r3, r3, #7
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	81bb      	strh	r3, [r7, #12]
 8005d2a:	e002      	b.n	8005d32 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d3a:	89ba      	ldrh	r2, [r7, #12]
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff f9ac 	bl	800509e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d46:	e008      	b.n	8005d5a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f06f 0202 	mvn.w	r2, #2
 8005d50:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005d84:	2300      	movs	r3, #0
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dc0:	d172      	bne.n	8005ea8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b22      	cmp	r3, #34	; 0x22
 8005dc6:	d002      	beq.n	8005dce <I2C_Slave_STOPF+0x6a>
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b2a      	cmp	r3, #42	; 0x2a
 8005dcc:	d135      	bne.n	8005e3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0204 	orr.w	r2, r3, #4
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fd fe74 	bl	8003af4 <HAL_DMA_GetState>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d049      	beq.n	8005ea6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	4a69      	ldr	r2, [pc, #420]	; (8005fbc <I2C_Slave_STOPF+0x258>)
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fd fcbc 	bl	800379c <HAL_DMA_Abort_IT>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d03d      	beq.n	8005ea6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e38:	e035      	b.n	8005ea6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f043 0204 	orr.w	r2, r3, #4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fd fe3e 	bl	8003af4 <HAL_DMA_GetState>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d014      	beq.n	8005ea8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	4a4e      	ldr	r2, [pc, #312]	; (8005fbc <I2C_Slave_STOPF+0x258>)
 8005e84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fd fc86 	bl	800379c <HAL_DMA_Abort_IT>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
 8005ea4:	e000      	b.n	8005ea8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ea6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d03e      	beq.n	8005f30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d112      	bne.n	8005ee6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d112      	bne.n	8005f1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f043 0204 	orr.w	r2, r3, #4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f8b3 	bl	80060a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f3e:	e039      	b.n	8005fb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b2a      	cmp	r3, #42	; 0x2a
 8005f44:	d109      	bne.n	8005f5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2228      	movs	r2, #40	; 0x28
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff f898 	bl	800508a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b28      	cmp	r3, #40	; 0x28
 8005f64:	d111      	bne.n	8005f8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a15      	ldr	r2, [pc, #84]	; (8005fc0 <I2C_Slave_STOPF+0x25c>)
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff f899 	bl	80050ba <HAL_I2C_ListenCpltCallback>
}
 8005f88:	e014      	b.n	8005fb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	2b22      	cmp	r3, #34	; 0x22
 8005f90:	d002      	beq.n	8005f98 <I2C_Slave_STOPF+0x234>
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b22      	cmp	r3, #34	; 0x22
 8005f96:	d10d      	bne.n	8005fb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff f86b 	bl	800508a <HAL_I2C_SlaveRxCpltCallback>
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	080065d1 	.word	0x080065d1
 8005fc0:	ffff0000 	.word	0xffff0000

08005fc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d002      	beq.n	8005fe6 <I2C_Slave_AF+0x22>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d129      	bne.n	800603a <I2C_Slave_AF+0x76>
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b28      	cmp	r3, #40	; 0x28
 8005fea:	d126      	bne.n	800603a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <I2C_Slave_AF+0xdc>)
 8005ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006000:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800600a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff f841 	bl	80050ba <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006038:	e02e      	b.n	8006098 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800603a:	7bfb      	ldrb	r3, [r7, #15]
 800603c:	2b21      	cmp	r3, #33	; 0x21
 800603e:	d126      	bne.n	800608e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a17      	ldr	r2, [pc, #92]	; (80060a0 <I2C_Slave_AF+0xdc>)
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2221      	movs	r2, #33	; 0x21
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800606a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006074:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fe fff5 	bl	8005076 <HAL_I2C_SlaveTxCpltCallback>
}
 800608c:	e004      	b.n	8006098 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006096:	615a      	str	r2, [r3, #20]
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	ffff0000 	.word	0xffff0000

080060a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d10a      	bne.n	80060d6 <I2C_ITError+0x32>
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	2b22      	cmp	r3, #34	; 0x22
 80060c4:	d107      	bne.n	80060d6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060dc:	2b28      	cmp	r3, #40	; 0x28
 80060de:	d107      	bne.n	80060f0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2228      	movs	r2, #40	; 0x28
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060ee:	e015      	b.n	800611c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fe:	d006      	beq.n	800610e <I2C_ITError+0x6a>
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	2b60      	cmp	r3, #96	; 0x60
 8006104:	d003      	beq.n	800610e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612a:	d162      	bne.n	80061f2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800613a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d020      	beq.n	800618c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614e:	4a6a      	ldr	r2, [pc, #424]	; (80062f8 <I2C_ITError+0x254>)
 8006150:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	4618      	mov	r0, r3
 8006158:	f7fd fb20 	bl	800379c <HAL_DMA_Abort_IT>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8089 	beq.w	8006276 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0201 	bic.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006186:	4610      	mov	r0, r2
 8006188:	4798      	blx	r3
 800618a:	e074      	b.n	8006276 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	4a59      	ldr	r2, [pc, #356]	; (80062f8 <I2C_ITError+0x254>)
 8006192:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	4618      	mov	r0, r3
 800619a:	f7fd faff 	bl	800379c <HAL_DMA_Abort_IT>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d068      	beq.n	8006276 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d10b      	bne.n	80061ca <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
 80061f0:	e041      	b.n	8006276 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b60      	cmp	r3, #96	; 0x60
 80061fc:	d125      	bne.n	800624a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2220      	movs	r2, #32
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d10b      	bne.n	8006232 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fb ffd4 	bl	80021f0 <HAL_I2C_AbortCpltCallback>
 8006248:	e015      	b.n	8006276 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d10b      	bne.n	8006270 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691a      	ldr	r2, [r3, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fb ffc7 	bl	8002204 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10e      	bne.n	80062a4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d113      	bne.n	80062f0 <I2C_ITError+0x24c>
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b28      	cmp	r3, #40	; 0x28
 80062cc:	d110      	bne.n	80062f0 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <I2C_ITError+0x258>)
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2220      	movs	r2, #32
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fe fee5 	bl	80050ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	080065d1 	.word	0x080065d1
 80062fc:	ffff0000 	.word	0xffff0000

08006300 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	460b      	mov	r3, r1
 800630e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d006      	beq.n	800632a <I2C_MasterRequestWrite+0x2a>
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d003      	beq.n	800632a <I2C_MasterRequestWrite+0x2a>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006328:	d108      	bne.n	800633c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e00b      	b.n	8006354 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	2b12      	cmp	r3, #18
 8006342:	d107      	bne.n	8006354 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f9b4 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00c      	beq.n	8006386 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e035      	b.n	80063f2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638e:	d108      	bne.n	80063a2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006390:	897b      	ldrh	r3, [r7, #10]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800639e:	611a      	str	r2, [r3, #16]
 80063a0:	e01b      	b.n	80063da <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063a2:	897b      	ldrh	r3, [r7, #10]
 80063a4:	11db      	asrs	r3, r3, #7
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0306 	and.w	r3, r3, #6
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f063 030f 	orn	r3, r3, #15
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	490f      	ldr	r1, [pc, #60]	; (80063fc <I2C_MasterRequestWrite+0xfc>)
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f9db 	bl	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e010      	b.n	80063f2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063d0:	897b      	ldrh	r3, [r7, #10]
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	4908      	ldr	r1, [pc, #32]	; (8006400 <I2C_MasterRequestWrite+0x100>)
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f9cb 	bl	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	00010008 	.word	0x00010008
 8006400:	00010002 	.word	0x00010002

08006404 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	4608      	mov	r0, r1
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	4603      	mov	r3, r0
 8006414:	817b      	strh	r3, [r7, #10]
 8006416:	460b      	mov	r3, r1
 8006418:	813b      	strh	r3, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800642c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800643c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	2200      	movs	r2, #0
 8006446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f93f 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e0a9      	b.n	80065c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006470:	897b      	ldrh	r3, [r7, #10]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800647e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	4951      	ldr	r1, [pc, #324]	; (80065cc <I2C_RequestMemoryRead+0x1c8>)
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f978 	bl	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e096      	b.n	80065c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	6a39      	ldr	r1, [r7, #32]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f9e2 	bl	800687a <I2C_WaitOnTXEFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d107      	bne.n	80064d4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e075      	b.n	80065c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d105      	bne.n	80064ea <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064de:	893b      	ldrh	r3, [r7, #8]
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]
 80064e8:	e021      	b.n	800652e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	0a1b      	lsrs	r3, r3, #8
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	6a39      	ldr	r1, [r7, #32]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 f9bc 	bl	800687a <I2C_WaitOnTXEFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00d      	beq.n	8006524 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	2b04      	cmp	r3, #4
 800650e:	d107      	bne.n	8006520 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800651e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e04f      	b.n	80065c4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006524:	893b      	ldrh	r3, [r7, #8]
 8006526:	b2da      	uxtb	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	6a39      	ldr	r1, [r7, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f9a1 	bl	800687a <I2C_WaitOnTXEFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00d      	beq.n	800655a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b04      	cmp	r3, #4
 8006544:	d107      	bne.n	8006556 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e034      	b.n	80065c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2200      	movs	r2, #0
 8006572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f8a9 	bl	80066ce <I2C_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00c      	beq.n	800659c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e013      	b.n	80065c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800659c:	897b      	ldrh	r3, [r7, #10]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	4906      	ldr	r1, [pc, #24]	; (80065cc <I2C_RequestMemoryRead+0x1c8>)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f8e2 	bl	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	00010002 	.word	0x00010002

080065d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f2:	2200      	movs	r2, #0
 80065f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	2200      	movs	r2, #0
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006614:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006628:	2200      	movs	r2, #0
 800662a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	2200      	movs	r2, #0
 800663a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b60      	cmp	r3, #96	; 0x60
 8006656:	d10e      	bne.n	8006676 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7fb fdbe 	bl	80021f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006674:	e027      	b.n	80066c6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800667c:	2b28      	cmp	r3, #40	; 0x28
 800667e:	d117      	bne.n	80066b0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800669e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2228      	movs	r2, #40	; 0x28
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066ae:	e007      	b.n	80066c0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7fb fd9f 	bl	8002204 <HAL_I2C_ErrorCallback>
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066de:	e025      	b.n	800672c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d021      	beq.n	800672c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e8:	f7fc fe6a 	bl	80033c0 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d302      	bcc.n	80066fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d116      	bne.n	800672c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	f043 0220 	orr.w	r2, r3, #32
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e023      	b.n	8006774 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	0c1b      	lsrs	r3, r3, #16
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b01      	cmp	r3, #1
 8006734:	d10d      	bne.n	8006752 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	43da      	mvns	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4013      	ands	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	bf0c      	ite	eq
 8006748:	2301      	moveq	r3, #1
 800674a:	2300      	movne	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	461a      	mov	r2, r3
 8006750:	e00c      	b.n	800676c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	43da      	mvns	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4013      	ands	r3, r2
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	461a      	mov	r2, r3
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	429a      	cmp	r2, r3
 8006770:	d0b6      	beq.n	80066e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800678a:	e051      	b.n	8006830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679a:	d123      	bne.n	80067e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	f043 0204 	orr.w	r2, r3, #4
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e046      	b.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d021      	beq.n	8006830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ec:	f7fc fde8 	bl	80033c0 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d302      	bcc.n	8006802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	f043 0220 	orr.w	r2, r3, #32
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e020      	b.n	8006872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	0c1b      	lsrs	r3, r3, #16
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10c      	bne.n	8006854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	43da      	mvns	r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	4013      	ands	r3, r2
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e00b      	b.n	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	43da      	mvns	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4013      	ands	r3, r2
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d18d      	bne.n	800678c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006886:	e02d      	b.n	80068e4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f8ce 	bl	8006a2a <I2C_IsAcknowledgeFailed>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e02d      	b.n	80068f4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d021      	beq.n	80068e4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a0:	f7fc fd8e 	bl	80033c0 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d302      	bcc.n	80068b6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d116      	bne.n	80068e4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e007      	b.n	80068f4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b80      	cmp	r3, #128	; 0x80
 80068f0:	d1ca      	bne.n	8006888 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006908:	e02d      	b.n	8006966 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 f88d 	bl	8006a2a <I2C_IsAcknowledgeFailed>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e02d      	b.n	8006976 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d021      	beq.n	8006966 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006922:	f7fc fd4d 	bl	80033c0 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	429a      	cmp	r2, r3
 8006930:	d302      	bcc.n	8006938 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d116      	bne.n	8006966 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e007      	b.n	8006976 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b04      	cmp	r3, #4
 8006972:	d1ca      	bne.n	800690a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800698a:	e042      	b.n	8006a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b10      	cmp	r3, #16
 8006998:	d119      	bne.n	80069ce <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f06f 0210 	mvn.w	r2, #16
 80069a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e029      	b.n	8006a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ce:	f7fc fcf7 	bl	80033c0 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d116      	bne.n	8006a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e007      	b.n	8006a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b40      	cmp	r3, #64	; 0x40
 8006a1e:	d1b5      	bne.n	800698c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a40:	d11b      	bne.n	8006a7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f043 0204 	orr.w	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a98:	d103      	bne.n	8006aa2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aa0:	e007      	b.n	8006ab2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006aaa:	d102      	bne.n	8006ab2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2208      	movs	r2, #8
 8006ab0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ac0:	b08f      	sub	sp, #60	; 0x3c
 8006ac2:	af0a      	add	r7, sp, #40	; 0x28
 8006ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e10f      	b.n	8006cf0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f006 fa38 	bl	800cf60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2203      	movs	r2, #3
 8006af4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f003 fa6d 	bl	8009fee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	687e      	ldr	r6, [r7, #4]
 8006b1c:	466d      	mov	r5, sp
 8006b1e:	f106 0410 	add.w	r4, r6, #16
 8006b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006b32:	1d33      	adds	r3, r6, #4
 8006b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b36:	6838      	ldr	r0, [r7, #0]
 8006b38:	f003 f944 	bl	8009dc4 <USB_CoreInit>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2202      	movs	r2, #2
 8006b46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e0d0      	b.n	8006cf0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2100      	movs	r1, #0
 8006b54:	4618      	mov	r0, r3
 8006b56:	f003 fa5b 	bl	800a010 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	73fb      	strb	r3, [r7, #15]
 8006b5e:	e04a      	b.n	8006bf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b60:	7bfa      	ldrb	r2, [r7, #15]
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4613      	mov	r3, r2
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	1a9b      	subs	r3, r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	333d      	adds	r3, #61	; 0x3d
 8006b70:	2201      	movs	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b74:	7bfa      	ldrb	r2, [r7, #15]
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	333c      	adds	r3, #60	; 0x3c
 8006b84:	7bfa      	ldrb	r2, [r7, #15]
 8006b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b88:	7bfa      	ldrb	r2, [r7, #15]
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	b298      	uxth	r0, r3
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	3342      	adds	r3, #66	; 0x42
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ba0:	7bfa      	ldrb	r2, [r7, #15]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	00db      	lsls	r3, r3, #3
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	333f      	adds	r3, #63	; 0x3f
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bb4:	7bfa      	ldrb	r2, [r7, #15]
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	3344      	adds	r3, #68	; 0x44
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006bc8:	7bfa      	ldrb	r2, [r7, #15]
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	3348      	adds	r3, #72	; 0x48
 8006bd8:	2200      	movs	r2, #0
 8006bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006bdc:	7bfa      	ldrb	r2, [r7, #15]
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	3350      	adds	r3, #80	; 0x50
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	73fb      	strb	r3, [r7, #15]
 8006bf6:	7bfa      	ldrb	r2, [r7, #15]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d3af      	bcc.n	8006b60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
 8006c04:	e044      	b.n	8006c90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c06:	7bfa      	ldrb	r2, [r7, #15]
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	440b      	add	r3, r1
 8006c14:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006c2e:	7bfa      	ldrb	r2, [r7, #15]
 8006c30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c48:	7bfa      	ldrb	r2, [r7, #15]
 8006c4a:	6879      	ldr	r1, [r7, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	1a9b      	subs	r3, r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006c5e:	7bfa      	ldrb	r2, [r7, #15]
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	73fb      	strb	r3, [r7, #15]
 8006c90:	7bfa      	ldrb	r2, [r7, #15]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d3b5      	bcc.n	8006c06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	687e      	ldr	r6, [r7, #4]
 8006ca2:	466d      	mov	r5, sp
 8006ca4:	f106 0410 	add.w	r4, r6, #16
 8006ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006cb8:	1d33      	adds	r3, r6, #4
 8006cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cbc:	6838      	ldr	r0, [r7, #0]
 8006cbe:	f003 f9d1 	bl	800a064 <USB_DevInit>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e00d      	b.n	8006cf0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f004 fa10 	bl	800b10e <USB_DevDisconnect>

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cf8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_PCD_Start+0x1c>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e020      	b.n	8006d56 <HAL_PCD_Start+0x5e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d109      	bne.n	8006d38 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d005      	beq.n	8006d38 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f004 f9ce 	bl	800b0de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f003 f940 	bl	8009fcc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006d5e:	b590      	push	{r4, r7, lr}
 8006d60:	b08d      	sub	sp, #52	; 0x34
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f004 fa75 	bl	800b264 <USB_GetMode>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 839d 	bne.w	80074bc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f004 f9d9 	bl	800b13e <USB_ReadInterrupts>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8393 	beq.w	80074ba <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f004 f9d0 	bl	800b13e <USB_ReadInterrupts>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d107      	bne.n	8006db8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f002 0202 	and.w	r2, r2, #2
 8006db6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f004 f9be 	bl	800b13e <USB_ReadInterrupts>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f003 0310 	and.w	r3, r3, #16
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d161      	bne.n	8006e90 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0210 	bic.w	r2, r2, #16
 8006dda:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	4613      	mov	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4413      	add	r3, r2
 8006df8:	3304      	adds	r3, #4
 8006dfa:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	0c5b      	lsrs	r3, r3, #17
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d124      	bne.n	8006e52 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d035      	beq.n	8006e80 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	091b      	lsrs	r3, r3, #4
 8006e1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	6a38      	ldr	r0, [r7, #32]
 8006e28:	f004 f836 	bl	800ae98 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	091b      	lsrs	r3, r3, #4
 8006e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e38:	441a      	add	r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	091b      	lsrs	r3, r3, #4
 8006e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e4a:	441a      	add	r2, r3
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	619a      	str	r2, [r3, #24]
 8006e50:	e016      	b.n	8006e80 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	0c5b      	lsrs	r3, r3, #17
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	2b06      	cmp	r3, #6
 8006e5c:	d110      	bne.n	8006e80 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006e64:	2208      	movs	r2, #8
 8006e66:	4619      	mov	r1, r3
 8006e68:	6a38      	ldr	r0, [r7, #32]
 8006e6a:	f004 f815 	bl	800ae98 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e7a:	441a      	add	r2, r3
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0210 	orr.w	r2, r2, #16
 8006e8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f004 f952 	bl	800b13e <USB_ReadInterrupts>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ea0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ea4:	d16e      	bne.n	8006f84 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f004 f958 	bl	800b164 <USB_ReadDevAllOutEpInterrupt>
 8006eb4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006eb6:	e062      	b.n	8006f7e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d057      	beq.n	8006f72 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f004 f97d 	bl	800b1cc <USB_ReadDevOutEPInterrupt>
 8006ed2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eea:	461a      	mov	r2, r3
 8006eec:	2301      	movs	r3, #1
 8006eee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fdb0 	bl	8007a58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f003 0308 	and.w	r3, r3, #8
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2308      	movs	r3, #8
 8006f12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 feaa 	bl	8007c70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f003 0310 	and.w	r3, r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d008      	beq.n	8006f38 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	461a      	mov	r2, r3
 8006f34:	2310      	movs	r3, #16
 8006f36:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2320      	movs	r3, #32
 8006f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f70:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	3301      	adds	r3, #1
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d199      	bne.n	8006eb8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f004 f8d8 	bl	800b13e <USB_ReadInterrupts>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f98:	f040 80c0 	bne.w	800711c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f004 f8f9 	bl	800b198 <USB_ReadDevAllInEpInterrupt>
 8006fa6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006fac:	e0b2      	b.n	8007114 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80a7 	beq.w	8007108 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f004 f91f 	bl	800b208 <USB_ReadDevInEPInterrupt>
 8006fca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d057      	beq.n	8007086 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	2201      	movs	r2, #1
 8006fde:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	43db      	mvns	r3, r3
 8006ff0:	69f9      	ldr	r1, [r7, #28]
 8006ff2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	461a      	mov	r2, r3
 8007008:	2301      	movs	r3, #1
 800700a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d132      	bne.n	800707a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007018:	4613      	mov	r3, r2
 800701a:	00db      	lsls	r3, r3, #3
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	440b      	add	r3, r1
 8007022:	3348      	adds	r3, #72	; 0x48
 8007024:	6819      	ldr	r1, [r3, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	4613      	mov	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4403      	add	r3, r0
 8007034:	3344      	adds	r3, #68	; 0x44
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4419      	add	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703e:	4613      	mov	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4403      	add	r3, r0
 8007048:	3348      	adds	r3, #72	; 0x48
 800704a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d113      	bne.n	800707a <HAL_PCD_IRQHandler+0x31c>
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007056:	4613      	mov	r3, r2
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	3350      	adds	r3, #80	; 0x50
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d108      	bne.n	800707a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007072:	461a      	mov	r2, r3
 8007074:	2101      	movs	r1, #1
 8007076:	f004 f927 	bl	800b2c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	b2db      	uxtb	r3, r3
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f005 ffee 	bl	800d062 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	461a      	mov	r2, r3
 800709e:	2308      	movs	r3, #8
 80070a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f003 0310 	and.w	r3, r3, #16
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b8:	461a      	mov	r2, r3
 80070ba:	2310      	movs	r3, #16
 80070bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	461a      	mov	r2, r3
 80070d6:	2340      	movs	r3, #64	; 0x40
 80070d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f0:	461a      	mov	r2, r3
 80070f2:	2302      	movs	r3, #2
 80070f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fc1b 	bl	800793e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	3301      	adds	r3, #1
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	f47f af49 	bne.w	8006fae <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4618      	mov	r0, r3
 8007122:	f004 f80c 	bl	800b13e <USB_ReadInterrupts>
 8007126:	4603      	mov	r3, r0
 8007128:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800712c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007130:	d122      	bne.n	8007178 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007140:	f023 0301 	bic.w	r3, r3, #1
 8007144:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800714c:	2b01      	cmp	r3, #1
 800714e:	d108      	bne.n	8007162 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007158:	2100      	movs	r1, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fe26 	bl	8007dac <HAL_PCDEx_LPM_Callback>
 8007160:	e002      	b.n	8007168 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f005 fff4 	bl	800d150 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	695a      	ldr	r2, [r3, #20]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f003 ffde 	bl	800b13e <USB_ReadInterrupts>
 8007182:	4603      	mov	r3, r0
 8007184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718c:	d112      	bne.n	80071b4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b01      	cmp	r3, #1
 800719c:	d102      	bne.n	80071a4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f005 ffb0 	bl	800d104 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80071b2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f003 ffc0 	bl	800b13e <USB_ReadInterrupts>
 80071be:	4603      	mov	r3, r0
 80071c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c8:	f040 80c7 	bne.w	800735a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071da:	f023 0301 	bic.w	r3, r3, #1
 80071de:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2110      	movs	r1, #16
 80071e6:	4618      	mov	r0, r3
 80071e8:	f003 f8a0 	bl	800a32c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071ec:	2300      	movs	r3, #0
 80071ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071f0:	e056      	b.n	80072a0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	461a      	mov	r2, r3
 8007200:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007204:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	4413      	add	r3, r2
 800720e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	69fa      	ldr	r2, [r7, #28]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007220:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007224:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007244:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	461a      	mov	r2, r3
 8007254:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007258:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	015a      	lsls	r2, r3, #5
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	4413      	add	r3, r2
 8007262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726a:	0151      	lsls	r1, r2, #5
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	440a      	add	r2, r1
 8007270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007274:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007278:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007294:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007298:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	3301      	adds	r3, #1
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d3a3      	bcc.n	80071f2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80072bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d6:	f043 030b 	orr.w	r3, r3, #11
 80072da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072ec:	f043 030b 	orr.w	r3, r3, #11
 80072f0:	6453      	str	r3, [r2, #68]	; 0x44
 80072f2:	e015      	b.n	8007320 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007306:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800730a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	69fa      	ldr	r2, [r7, #28]
 8007316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800731a:	f043 030b 	orr.w	r3, r3, #11
 800731e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007332:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007344:	461a      	mov	r2, r3
 8007346:	f003 ffbf 	bl	800b2c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695a      	ldr	r2, [r3, #20]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007358:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f003 feed 	bl	800b13e <USB_ReadInterrupts>
 8007364:	4603      	mov	r3, r0
 8007366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	d124      	bne.n	80073ba <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f003 ff83 	bl	800b280 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f003 f835 	bl	800a3ee <USB_GetDevSpeed>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681c      	ldr	r4, [r3, #0]
 8007390:	f001 f944 	bl	800861c <HAL_RCC_GetHCLKFreq>
 8007394:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800739a:	b2db      	uxtb	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	4620      	mov	r0, r4
 80073a0:	f002 fd72 	bl	8009e88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f005 fe84 	bl	800d0b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	695a      	ldr	r2, [r3, #20]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80073b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f003 febd 	bl	800b13e <USB_ReadInterrupts>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d10a      	bne.n	80073e4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f005 fe61 	bl	800d096 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f002 0208 	and.w	r2, r2, #8
 80073e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f003 fea8 	bl	800b13e <USB_ReadInterrupts>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f8:	d10f      	bne.n	800741a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	b2db      	uxtb	r3, r3
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f005 fec3 	bl	800d190 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695a      	ldr	r2, [r3, #20]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f003 fe8d 	bl	800b13e <USB_ReadInterrupts>
 8007424:	4603      	mov	r3, r0
 8007426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800742a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800742e:	d10f      	bne.n	8007450 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	b2db      	uxtb	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f005 fe96 	bl	800d16c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	695a      	ldr	r2, [r3, #20]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800744e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4618      	mov	r0, r3
 8007456:	f003 fe72 	bl	800b13e <USB_ReadInterrupts>
 800745a:	4603      	mov	r3, r0
 800745c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007464:	d10a      	bne.n	800747c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f005 fea4 	bl	800d1b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695a      	ldr	r2, [r3, #20]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800747a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f003 fe5c 	bl	800b13e <USB_ReadInterrupts>
 8007486:	4603      	mov	r3, r0
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b04      	cmp	r3, #4
 800748e:	d115      	bne.n	80074bc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f005 fe94 	bl	800d1d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6859      	ldr	r1, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]
 80074b8:	e000      	b.n	80074bc <HAL_PCD_IRQHandler+0x75e>
      return;
 80074ba:	bf00      	nop
    }
  }
}
 80074bc:	3734      	adds	r7, #52	; 0x34
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd90      	pop	{r4, r7, pc}

080074c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b082      	sub	sp, #8
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_PCD_SetAddress+0x1a>
 80074d8:	2302      	movs	r3, #2
 80074da:	e013      	b.n	8007504 <HAL_PCD_SetAddress+0x42>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	78fa      	ldrb	r2, [r7, #3]
 80074e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f003 fdcc 	bl	800b092 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	461a      	mov	r2, r3
 800751a:	4603      	mov	r3, r0
 800751c:	70fb      	strb	r3, [r7, #3]
 800751e:	460b      	mov	r3, r1
 8007520:	803b      	strh	r3, [r7, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800752a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da0f      	bge.n	8007552 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	4613      	mov	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	3338      	adds	r3, #56	; 0x38
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	3304      	adds	r3, #4
 8007548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	705a      	strb	r2, [r3, #1]
 8007550:	e00f      	b.n	8007572 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	f003 020f 	and.w	r2, r3, #15
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	3304      	adds	r3, #4
 800756a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	b2da      	uxtb	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800757e:	883a      	ldrh	r2, [r7, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	78ba      	ldrb	r2, [r7, #2]
 8007588:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d004      	beq.n	800759c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800759c:	78bb      	ldrb	r3, [r7, #2]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d102      	bne.n	80075a8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_PCD_EP_Open+0xaa>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e00e      	b.n	80075d4 <HAL_PCD_EP_Open+0xc8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f002 ff37 	bl	800a438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80075d2:	7afb      	ldrb	r3, [r7, #11]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da0f      	bge.n	8007610 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	f003 020f 	and.w	r2, r3, #15
 80075f6:	4613      	mov	r3, r2
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	3338      	adds	r3, #56	; 0x38
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	4413      	add	r3, r2
 8007604:	3304      	adds	r3, #4
 8007606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	705a      	strb	r2, [r3, #1]
 800760e:	e00f      	b.n	8007630 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	4613      	mov	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	3304      	adds	r3, #4
 8007628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	b2da      	uxtb	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_PCD_EP_Close+0x6e>
 8007646:	2302      	movs	r3, #2
 8007648:	e00e      	b.n	8007668 <HAL_PCD_EP_Close+0x8c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68f9      	ldr	r1, [r7, #12]
 8007658:	4618      	mov	r0, r3
 800765a:	f002 ff75 	bl	800a548 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	460b      	mov	r3, r1
 800767e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	f003 020f 	and.w	r2, r3, #15
 8007686:	4613      	mov	r3, r2
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	3304      	adds	r3, #4
 8007698:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2200      	movs	r2, #0
 80076aa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2200      	movs	r2, #0
 80076b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d102      	bne.n	80076cc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80076cc:	7afb      	ldrb	r3, [r7, #11]
 80076ce:	f003 030f 	and.w	r3, r3, #15
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d109      	bne.n	80076ea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	6979      	ldr	r1, [r7, #20]
 80076e4:	f003 fa50 	bl	800ab88 <USB_EP0StartXfer>
 80076e8:	e008      	b.n	80076fc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	6979      	ldr	r1, [r7, #20]
 80076f8:	f003 f802 	bl	800a700 <USB_EPStartXfer>
  }

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	f003 020f 	and.w	r2, r3, #15
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	1a9b      	subs	r3, r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	440b      	add	r3, r1
 8007724:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007728:	681b      	ldr	r3, [r3, #0]
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b086      	sub	sp, #24
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	607a      	str	r2, [r7, #4]
 8007740:	603b      	str	r3, [r7, #0]
 8007742:	460b      	mov	r3, r1
 8007744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007746:	7afb      	ldrb	r3, [r7, #11]
 8007748:	f003 020f 	and.w	r2, r3, #15
 800774c:	4613      	mov	r3, r2
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	3338      	adds	r3, #56	; 0x38
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	3304      	adds	r3, #4
 800775c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2200      	movs	r2, #0
 800776e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2201      	movs	r2, #1
 8007774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007776:	7afb      	ldrb	r3, [r7, #11]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	b2da      	uxtb	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d102      	bne.n	8007790 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	f003 f9ee 	bl	800ab88 <USB_EP0StartXfer>
 80077ac:	e008      	b.n	80077c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	6979      	ldr	r1, [r7, #20]
 80077bc:	f002 ffa0 	bl	800a700 <USB_EPStartXfer>
  }

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	460b      	mov	r3, r1
 80077d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	f003 020f 	and.w	r2, r3, #15
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d901      	bls.n	80077e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e050      	b.n	800788a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80077e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da0f      	bge.n	8007810 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 020f 	and.w	r2, r3, #15
 80077f6:	4613      	mov	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	3338      	adds	r3, #56	; 0x38
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	3304      	adds	r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	705a      	strb	r2, [r3, #1]
 800780e:	e00d      	b.n	800782c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	3304      	adds	r3, #4
 8007824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	f003 030f 	and.w	r3, r3, #15
 8007838:	b2da      	uxtb	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_PCD_EP_SetStall+0x82>
 8007848:	2302      	movs	r3, #2
 800784a:	e01e      	b.n	800788a <HAL_PCD_EP_SetStall+0xc0>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	4618      	mov	r0, r3
 800785c:	f003 fb45 	bl	800aeea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	b2d9      	uxtb	r1, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800787a:	461a      	mov	r2, r3
 800787c:	f003 fd24 	bl	800b2c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	f003 020f 	and.w	r2, r3, #15
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d901      	bls.n	80078b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e042      	b.n	8007936 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	da0f      	bge.n	80078d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	f003 020f 	and.w	r2, r3, #15
 80078be:	4613      	mov	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	1a9b      	subs	r3, r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	3338      	adds	r3, #56	; 0x38
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	4413      	add	r3, r2
 80078cc:	3304      	adds	r3, #4
 80078ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	705a      	strb	r2, [r3, #1]
 80078d6:	e00f      	b.n	80078f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	f003 020f 	and.w	r2, r3, #15
 80078de:	4613      	mov	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	1a9b      	subs	r3, r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	3304      	adds	r3, #4
 80078f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	b2da      	uxtb	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_PCD_EP_ClrStall+0x86>
 8007914:	2302      	movs	r3, #2
 8007916:	e00e      	b.n	8007936 <HAL_PCD_EP_ClrStall+0xa4>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68f9      	ldr	r1, [r7, #12]
 8007926:	4618      	mov	r0, r3
 8007928:	f003 fb4d 	bl	800afc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b08a      	sub	sp, #40	; 0x28
 8007942:	af02      	add	r7, sp, #8
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	3338      	adds	r3, #56	; 0x38
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4413      	add	r3, r2
 8007962:	3304      	adds	r3, #4
 8007964:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	429a      	cmp	r2, r3
 8007970:	d901      	bls.n	8007976 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e06c      	b.n	8007a50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	695a      	ldr	r2, [r3, #20]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	429a      	cmp	r2, r3
 800798a:	d902      	bls.n	8007992 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3303      	adds	r3, #3
 8007996:	089b      	lsrs	r3, r3, #2
 8007998:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800799a:	e02b      	b.n	80079f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	695a      	ldr	r2, [r3, #20]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	69fa      	ldr	r2, [r7, #28]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d902      	bls.n	80079b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	3303      	adds	r3, #3
 80079bc:	089b      	lsrs	r3, r3, #2
 80079be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	68d9      	ldr	r1, [r3, #12]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	4603      	mov	r3, r0
 80079d6:	6978      	ldr	r0, [r7, #20]
 80079d8:	f003 fa29 	bl	800ae2e <USB_WritePacket>

    ep->xfer_buff  += len;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68da      	ldr	r2, [r3, #12]
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	441a      	add	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	699a      	ldr	r2, [r3, #24]
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	441a      	add	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d809      	bhi.n	8007a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d203      	bcs.n	8007a1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1be      	bne.n	800799c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	695a      	ldr	r2, [r3, #20]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d811      	bhi.n	8007a4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	2201      	movs	r2, #1
 8007a32:	fa02 f303 	lsl.w	r3, r2, r3
 8007a36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	43db      	mvns	r3, r3
 8007a44:	6939      	ldr	r1, [r7, #16]
 8007a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	333c      	adds	r3, #60	; 0x3c
 8007a70:	3304      	adds	r3, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	f040 80a0 	bne.w	8007bd0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 0308 	and.w	r3, r3, #8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d015      	beq.n	8007ac6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4a72      	ldr	r2, [pc, #456]	; (8007c68 <PCD_EP_OutXfrComplete_int+0x210>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	f240 80dd 	bls.w	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80d7 	beq.w	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abc:	461a      	mov	r2, r3
 8007abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ac2:	6093      	str	r3, [r2, #8]
 8007ac4:	e0cb      	b.n	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	461a      	mov	r2, r3
 8007ade:	2320      	movs	r3, #32
 8007ae0:	6093      	str	r3, [r2, #8]
 8007ae2:	e0bc      	b.n	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 80b7 	bne.w	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a5d      	ldr	r2, [pc, #372]	; (8007c68 <PCD_EP_OutXfrComplete_int+0x210>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d90f      	bls.n	8007b18 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b14:	6093      	str	r3, [r2, #8]
 8007b16:	e0a2      	b.n	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b2a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	0159      	lsls	r1, r3, #5
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	440b      	add	r3, r1
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007b3e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4403      	add	r3, r0
 8007b4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007b52:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b66:	6819      	ldr	r1, [r3, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	1a9b      	subs	r3, r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4403      	add	r3, r0
 8007b76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4419      	add	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	4613      	mov	r3, r2
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4403      	add	r3, r0
 8007b8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b90:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d114      	bne.n	8007bc2 <PCD_EP_OutXfrComplete_int+0x16a>
 8007b98:	6879      	ldr	r1, [r7, #4]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	1a9b      	subs	r3, r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d108      	bne.n	8007bc2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007bba:	461a      	mov	r2, r3
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	f003 fb83 	bl	800b2c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f005 fa2f 	bl	800d02c <HAL_PCD_DataOutStageCallback>
 8007bce:	e046      	b.n	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a26      	ldr	r2, [pc, #152]	; (8007c6c <PCD_EP_OutXfrComplete_int+0x214>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d124      	bne.n	8007c22 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf4:	6093      	str	r3, [r2, #8]
 8007bf6:	e032      	b.n	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 0320 	and.w	r3, r3, #32
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d008      	beq.n	8007c14 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2320      	movs	r3, #32
 8007c12:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f005 fa06 	bl	800d02c <HAL_PCD_DataOutStageCallback>
 8007c20:	e01d      	b.n	8007c5e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d114      	bne.n	8007c52 <PCD_EP_OutXfrComplete_int+0x1fa>
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	1a9b      	subs	r3, r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d108      	bne.n	8007c52 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f003 fb3b 	bl	800b2c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f005 f9e7 	bl	800d02c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	4f54300a 	.word	0x4f54300a
 8007c6c:	4f54310a 	.word	0x4f54310a

08007c70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	333c      	adds	r3, #60	; 0x3c
 8007c88:	3304      	adds	r3, #4
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d90e      	bls.n	8007cc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d009      	beq.n	8007cc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f005 f99f 	bl	800d008 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4a0a      	ldr	r2, [pc, #40]	; (8007cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d90c      	bls.n	8007cec <PCD_EP_OutSetupPacket_int+0x7c>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d108      	bne.n	8007cec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6818      	ldr	r0, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	f003 faee 	bl	800b2c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	4f54300a 	.word	0x4f54300a

08007cfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d107      	bne.n	8007d2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007d1a:	883b      	ldrh	r3, [r7, #0]
 8007d1c:	0419      	lsls	r1, r3, #16
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	629a      	str	r2, [r3, #40]	; 0x28
 8007d28:	e028      	b.n	8007d7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d30:	0c1b      	lsrs	r3, r3, #16
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	4413      	add	r3, r2
 8007d36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	e00d      	b.n	8007d5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	3340      	adds	r3, #64	; 0x40
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	4413      	add	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	3301      	adds	r3, #1
 8007d58:	73fb      	strb	r3, [r7, #15]
 8007d5a:	7bfa      	ldrb	r2, [r7, #15]
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d3ec      	bcc.n	8007d3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007d64:	883b      	ldrh	r3, [r7, #0]
 8007d66:	0418      	lsls	r0, r3, #16
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6819      	ldr	r1, [r3, #0]
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	4302      	orrs	r2, r0
 8007d74:	3340      	adds	r3, #64	; 0x40
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	440b      	add	r3, r1
 8007d7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	887a      	ldrh	r2, [r7, #2]
 8007d9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e25b      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d075      	beq.n	8007ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007de2:	4ba3      	ldr	r3, [pc, #652]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 030c 	and.w	r3, r3, #12
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d00c      	beq.n	8007e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dee:	4ba0      	ldr	r3, [pc, #640]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d112      	bne.n	8007e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dfa:	4b9d      	ldr	r3, [pc, #628]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e06:	d10b      	bne.n	8007e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e08:	4b99      	ldr	r3, [pc, #612]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d05b      	beq.n	8007ecc <HAL_RCC_OscConfig+0x108>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d157      	bne.n	8007ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e236      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e28:	d106      	bne.n	8007e38 <HAL_RCC_OscConfig+0x74>
 8007e2a:	4b91      	ldr	r3, [pc, #580]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a90      	ldr	r2, [pc, #576]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	e01d      	b.n	8007e74 <HAL_RCC_OscConfig+0xb0>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e40:	d10c      	bne.n	8007e5c <HAL_RCC_OscConfig+0x98>
 8007e42:	4b8b      	ldr	r3, [pc, #556]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a8a      	ldr	r2, [pc, #552]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	4b88      	ldr	r3, [pc, #544]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a87      	ldr	r2, [pc, #540]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e00b      	b.n	8007e74 <HAL_RCC_OscConfig+0xb0>
 8007e5c:	4b84      	ldr	r3, [pc, #528]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a83      	ldr	r2, [pc, #524]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	4b81      	ldr	r3, [pc, #516]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a80      	ldr	r2, [pc, #512]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d013      	beq.n	8007ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e7c:	f7fb faa0 	bl	80033c0 <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e84:	f7fb fa9c 	bl	80033c0 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b64      	cmp	r3, #100	; 0x64
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e1fb      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e96:	4b76      	ldr	r3, [pc, #472]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f0      	beq.n	8007e84 <HAL_RCC_OscConfig+0xc0>
 8007ea2:	e014      	b.n	8007ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea4:	f7fb fa8c 	bl	80033c0 <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eac:	f7fb fa88 	bl	80033c0 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b64      	cmp	r3, #100	; 0x64
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e1e7      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ebe:	4b6c      	ldr	r3, [pc, #432]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f0      	bne.n	8007eac <HAL_RCC_OscConfig+0xe8>
 8007eca:	e000      	b.n	8007ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d063      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eda:	4b65      	ldr	r3, [pc, #404]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 030c 	and.w	r3, r3, #12
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ee6:	4b62      	ldr	r3, [pc, #392]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d11c      	bne.n	8007f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ef2:	4b5f      	ldr	r3, [pc, #380]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d116      	bne.n	8007f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007efe:	4b5c      	ldr	r3, [pc, #368]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <HAL_RCC_OscConfig+0x152>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d001      	beq.n	8007f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e1bb      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f16:	4b56      	ldr	r3, [pc, #344]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	4952      	ldr	r1, [pc, #328]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f2a:	e03a      	b.n	8007fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d020      	beq.n	8007f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f34:	4b4f      	ldr	r3, [pc, #316]	; (8008074 <HAL_RCC_OscConfig+0x2b0>)
 8007f36:	2201      	movs	r2, #1
 8007f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3a:	f7fb fa41 	bl	80033c0 <HAL_GetTick>
 8007f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f40:	e008      	b.n	8007f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f42:	f7fb fa3d 	bl	80033c0 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e19c      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f54:	4b46      	ldr	r3, [pc, #280]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0f0      	beq.n	8007f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f60:	4b43      	ldr	r3, [pc, #268]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	4940      	ldr	r1, [pc, #256]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	600b      	str	r3, [r1, #0]
 8007f74:	e015      	b.n	8007fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f76:	4b3f      	ldr	r3, [pc, #252]	; (8008074 <HAL_RCC_OscConfig+0x2b0>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7fb fa20 	bl	80033c0 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f84:	f7fb fa1c 	bl	80033c0 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e17b      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f96:	4b36      	ldr	r3, [pc, #216]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f0      	bne.n	8007f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d030      	beq.n	8008010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d016      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fb6:	4b30      	ldr	r3, [pc, #192]	; (8008078 <HAL_RCC_OscConfig+0x2b4>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fbc:	f7fb fa00 	bl	80033c0 <HAL_GetTick>
 8007fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fc4:	f7fb f9fc 	bl	80033c0 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e15b      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fd6:	4b26      	ldr	r3, [pc, #152]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8007fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f0      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x200>
 8007fe2:	e015      	b.n	8008010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fe4:	4b24      	ldr	r3, [pc, #144]	; (8008078 <HAL_RCC_OscConfig+0x2b4>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fea:	f7fb f9e9 	bl	80033c0 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ff2:	f7fb f9e5 	bl	80033c0 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e144      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008004:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8008006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1f0      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 80a0 	beq.w	800815e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10f      	bne.n	800804e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	4a0e      	ldr	r2, [pc, #56]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8008038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803c:	6413      	str	r3, [r2, #64]	; 0x40
 800803e:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <HAL_RCC_OscConfig+0x2ac>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008046:	60bb      	str	r3, [r7, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800804a:	2301      	movs	r3, #1
 800804c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800804e:	4b0b      	ldr	r3, [pc, #44]	; (800807c <HAL_RCC_OscConfig+0x2b8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008056:	2b00      	cmp	r3, #0
 8008058:	d121      	bne.n	800809e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800805a:	4b08      	ldr	r3, [pc, #32]	; (800807c <HAL_RCC_OscConfig+0x2b8>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a07      	ldr	r2, [pc, #28]	; (800807c <HAL_RCC_OscConfig+0x2b8>)
 8008060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008066:	f7fb f9ab 	bl	80033c0 <HAL_GetTick>
 800806a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800806c:	e011      	b.n	8008092 <HAL_RCC_OscConfig+0x2ce>
 800806e:	bf00      	nop
 8008070:	40023800 	.word	0x40023800
 8008074:	42470000 	.word	0x42470000
 8008078:	42470e80 	.word	0x42470e80
 800807c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008080:	f7fb f99e 	bl	80033c0 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e0fd      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008092:	4b81      	ldr	r3, [pc, #516]	; (8008298 <HAL_RCC_OscConfig+0x4d4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0f0      	beq.n	8008080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d106      	bne.n	80080b4 <HAL_RCC_OscConfig+0x2f0>
 80080a6:	4b7d      	ldr	r3, [pc, #500]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	4a7c      	ldr	r2, [pc, #496]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080ac:	f043 0301 	orr.w	r3, r3, #1
 80080b0:	6713      	str	r3, [r2, #112]	; 0x70
 80080b2:	e01c      	b.n	80080ee <HAL_RCC_OscConfig+0x32a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	2b05      	cmp	r3, #5
 80080ba:	d10c      	bne.n	80080d6 <HAL_RCC_OscConfig+0x312>
 80080bc:	4b77      	ldr	r3, [pc, #476]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c0:	4a76      	ldr	r2, [pc, #472]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080c2:	f043 0304 	orr.w	r3, r3, #4
 80080c6:	6713      	str	r3, [r2, #112]	; 0x70
 80080c8:	4b74      	ldr	r3, [pc, #464]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080cc:	4a73      	ldr	r2, [pc, #460]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	6713      	str	r3, [r2, #112]	; 0x70
 80080d4:	e00b      	b.n	80080ee <HAL_RCC_OscConfig+0x32a>
 80080d6:	4b71      	ldr	r3, [pc, #452]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080da:	4a70      	ldr	r2, [pc, #448]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	6713      	str	r3, [r2, #112]	; 0x70
 80080e2:	4b6e      	ldr	r3, [pc, #440]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	4a6d      	ldr	r2, [pc, #436]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80080e8:	f023 0304 	bic.w	r3, r3, #4
 80080ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d015      	beq.n	8008122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f6:	f7fb f963 	bl	80033c0 <HAL_GetTick>
 80080fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080fc:	e00a      	b.n	8008114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080fe:	f7fb f95f 	bl	80033c0 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	f241 3288 	movw	r2, #5000	; 0x1388
 800810c:	4293      	cmp	r3, r2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e0bc      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008114:	4b61      	ldr	r3, [pc, #388]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 8008116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0ee      	beq.n	80080fe <HAL_RCC_OscConfig+0x33a>
 8008120:	e014      	b.n	800814c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008122:	f7fb f94d 	bl	80033c0 <HAL_GetTick>
 8008126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008128:	e00a      	b.n	8008140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800812a:	f7fb f949 	bl	80033c0 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	f241 3288 	movw	r2, #5000	; 0x1388
 8008138:	4293      	cmp	r3, r2
 800813a:	d901      	bls.n	8008140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e0a6      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008140:	4b56      	ldr	r3, [pc, #344]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 8008142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008144:	f003 0302 	and.w	r3, r3, #2
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1ee      	bne.n	800812a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d105      	bne.n	800815e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008152:	4b52      	ldr	r3, [pc, #328]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	4a51      	ldr	r2, [pc, #324]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 8008158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800815c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8092 	beq.w	800828c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008168:	4b4c      	ldr	r3, [pc, #304]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f003 030c 	and.w	r3, r3, #12
 8008170:	2b08      	cmp	r3, #8
 8008172:	d05c      	beq.n	800822e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d141      	bne.n	8008200 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817c:	4b48      	ldr	r3, [pc, #288]	; (80082a0 <HAL_RCC_OscConfig+0x4dc>)
 800817e:	2200      	movs	r2, #0
 8008180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008182:	f7fb f91d 	bl	80033c0 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800818a:	f7fb f919 	bl	80033c0 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e078      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819c:	4b3f      	ldr	r3, [pc, #252]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f0      	bne.n	800818a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	69da      	ldr	r2, [r3, #28]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	431a      	orrs	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	019b      	lsls	r3, r3, #6
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	3b01      	subs	r3, #1
 80081c2:	041b      	lsls	r3, r3, #16
 80081c4:	431a      	orrs	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	061b      	lsls	r3, r3, #24
 80081cc:	4933      	ldr	r1, [pc, #204]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081d2:	4b33      	ldr	r3, [pc, #204]	; (80082a0 <HAL_RCC_OscConfig+0x4dc>)
 80081d4:	2201      	movs	r2, #1
 80081d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d8:	f7fb f8f2 	bl	80033c0 <HAL_GetTick>
 80081dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081de:	e008      	b.n	80081f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081e0:	f7fb f8ee 	bl	80033c0 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e04d      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081f2:	4b2a      	ldr	r3, [pc, #168]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0f0      	beq.n	80081e0 <HAL_RCC_OscConfig+0x41c>
 80081fe:	e045      	b.n	800828c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008200:	4b27      	ldr	r3, [pc, #156]	; (80082a0 <HAL_RCC_OscConfig+0x4dc>)
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008206:	f7fb f8db 	bl	80033c0 <HAL_GetTick>
 800820a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800820c:	e008      	b.n	8008220 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800820e:	f7fb f8d7 	bl	80033c0 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e036      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008220:	4b1e      	ldr	r3, [pc, #120]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1f0      	bne.n	800820e <HAL_RCC_OscConfig+0x44a>
 800822c:	e02e      	b.n	800828c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e029      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800823a:	4b18      	ldr	r3, [pc, #96]	; (800829c <HAL_RCC_OscConfig+0x4d8>)
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	429a      	cmp	r2, r3
 800824c:	d11c      	bne.n	8008288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008258:	429a      	cmp	r2, r3
 800825a:	d115      	bne.n	8008288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008262:	4013      	ands	r3, r2
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008268:	4293      	cmp	r3, r2
 800826a:	d10d      	bne.n	8008288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008276:	429a      	cmp	r2, r3
 8008278:	d106      	bne.n	8008288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008284:	429a      	cmp	r2, r3
 8008286:	d001      	beq.n	800828c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e000      	b.n	800828e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40007000 	.word	0x40007000
 800829c:	40023800 	.word	0x40023800
 80082a0:	42470060 	.word	0x42470060

080082a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0cc      	b.n	8008452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082b8:	4b68      	ldr	r3, [pc, #416]	; (800845c <HAL_RCC_ClockConfig+0x1b8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d90c      	bls.n	80082e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b65      	ldr	r3, [pc, #404]	; (800845c <HAL_RCC_ClockConfig+0x1b8>)
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ce:	4b63      	ldr	r3, [pc, #396]	; (800845c <HAL_RCC_ClockConfig+0x1b8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d001      	beq.n	80082e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e0b8      	b.n	8008452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d020      	beq.n	800832e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d005      	beq.n	8008304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082f8:	4b59      	ldr	r3, [pc, #356]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	4a58      	ldr	r2, [pc, #352]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 80082fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008310:	4b53      	ldr	r3, [pc, #332]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	4a52      	ldr	r2, [pc, #328]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800831a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800831c:	4b50      	ldr	r3, [pc, #320]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	494d      	ldr	r1, [pc, #308]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 800832a:	4313      	orrs	r3, r2
 800832c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d044      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d107      	bne.n	8008352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008342:	4b47      	ldr	r3, [pc, #284]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d119      	bne.n	8008382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e07f      	b.n	8008452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d003      	beq.n	8008362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800835e:	2b03      	cmp	r3, #3
 8008360:	d107      	bne.n	8008372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008362:	4b3f      	ldr	r3, [pc, #252]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d109      	bne.n	8008382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e06f      	b.n	8008452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008372:	4b3b      	ldr	r3, [pc, #236]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e067      	b.n	8008452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008382:	4b37      	ldr	r3, [pc, #220]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f023 0203 	bic.w	r2, r3, #3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	4934      	ldr	r1, [pc, #208]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008390:	4313      	orrs	r3, r2
 8008392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008394:	f7fb f814 	bl	80033c0 <HAL_GetTick>
 8008398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800839a:	e00a      	b.n	80083b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800839c:	f7fb f810 	bl	80033c0 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e04f      	b.n	8008452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083b2:	4b2b      	ldr	r3, [pc, #172]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f003 020c 	and.w	r2, r3, #12
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d1eb      	bne.n	800839c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083c4:	4b25      	ldr	r3, [pc, #148]	; (800845c <HAL_RCC_ClockConfig+0x1b8>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d20c      	bcs.n	80083ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083d2:	4b22      	ldr	r3, [pc, #136]	; (800845c <HAL_RCC_ClockConfig+0x1b8>)
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	b2d2      	uxtb	r2, r2
 80083d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083da:	4b20      	ldr	r3, [pc, #128]	; (800845c <HAL_RCC_ClockConfig+0x1b8>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 030f 	and.w	r3, r3, #15
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d001      	beq.n	80083ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e032      	b.n	8008452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d008      	beq.n	800840a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083f8:	4b19      	ldr	r3, [pc, #100]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	4916      	ldr	r1, [pc, #88]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008406:	4313      	orrs	r3, r2
 8008408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d009      	beq.n	800842a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	490e      	ldr	r1, [pc, #56]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008426:	4313      	orrs	r3, r2
 8008428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800842a:	f000 f821 	bl	8008470 <HAL_RCC_GetSysClockFreq>
 800842e:	4601      	mov	r1, r0
 8008430:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	091b      	lsrs	r3, r3, #4
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	4a0a      	ldr	r2, [pc, #40]	; (8008464 <HAL_RCC_ClockConfig+0x1c0>)
 800843c:	5cd3      	ldrb	r3, [r2, r3]
 800843e:	fa21 f303 	lsr.w	r3, r1, r3
 8008442:	4a09      	ldr	r2, [pc, #36]	; (8008468 <HAL_RCC_ClockConfig+0x1c4>)
 8008444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <HAL_RCC_ClockConfig+0x1c8>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f7fa ff74 	bl	8003338 <HAL_InitTick>

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	40023c00 	.word	0x40023c00
 8008460:	40023800 	.word	0x40023800
 8008464:	0800f58c 	.word	0x0800f58c
 8008468:	20000018 	.word	0x20000018
 800846c:	20000020 	.word	0x20000020

08008470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	607b      	str	r3, [r7, #4]
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	2300      	movs	r3, #0
 8008480:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008486:	4b63      	ldr	r3, [pc, #396]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f003 030c 	and.w	r3, r3, #12
 800848e:	2b04      	cmp	r3, #4
 8008490:	d007      	beq.n	80084a2 <HAL_RCC_GetSysClockFreq+0x32>
 8008492:	2b08      	cmp	r3, #8
 8008494:	d008      	beq.n	80084a8 <HAL_RCC_GetSysClockFreq+0x38>
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 80b4 	bne.w	8008604 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800849c:	4b5e      	ldr	r3, [pc, #376]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800849e:	60bb      	str	r3, [r7, #8]
       break;
 80084a0:	e0b3      	b.n	800860a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084a2:	4b5d      	ldr	r3, [pc, #372]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80084a4:	60bb      	str	r3, [r7, #8]
      break;
 80084a6:	e0b0      	b.n	800860a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084a8:	4b5a      	ldr	r3, [pc, #360]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084b2:	4b58      	ldr	r3, [pc, #352]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d04a      	beq.n	8008554 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084be:	4b55      	ldr	r3, [pc, #340]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	099b      	lsrs	r3, r3, #6
 80084c4:	f04f 0400 	mov.w	r4, #0
 80084c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80084cc:	f04f 0200 	mov.w	r2, #0
 80084d0:	ea03 0501 	and.w	r5, r3, r1
 80084d4:	ea04 0602 	and.w	r6, r4, r2
 80084d8:	4629      	mov	r1, r5
 80084da:	4632      	mov	r2, r6
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	f04f 0400 	mov.w	r4, #0
 80084e4:	0154      	lsls	r4, r2, #5
 80084e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80084ea:	014b      	lsls	r3, r1, #5
 80084ec:	4619      	mov	r1, r3
 80084ee:	4622      	mov	r2, r4
 80084f0:	1b49      	subs	r1, r1, r5
 80084f2:	eb62 0206 	sbc.w	r2, r2, r6
 80084f6:	f04f 0300 	mov.w	r3, #0
 80084fa:	f04f 0400 	mov.w	r4, #0
 80084fe:	0194      	lsls	r4, r2, #6
 8008500:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008504:	018b      	lsls	r3, r1, #6
 8008506:	1a5b      	subs	r3, r3, r1
 8008508:	eb64 0402 	sbc.w	r4, r4, r2
 800850c:	f04f 0100 	mov.w	r1, #0
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	00e2      	lsls	r2, r4, #3
 8008516:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800851a:	00d9      	lsls	r1, r3, #3
 800851c:	460b      	mov	r3, r1
 800851e:	4614      	mov	r4, r2
 8008520:	195b      	adds	r3, r3, r5
 8008522:	eb44 0406 	adc.w	r4, r4, r6
 8008526:	f04f 0100 	mov.w	r1, #0
 800852a:	f04f 0200 	mov.w	r2, #0
 800852e:	02a2      	lsls	r2, r4, #10
 8008530:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008534:	0299      	lsls	r1, r3, #10
 8008536:	460b      	mov	r3, r1
 8008538:	4614      	mov	r4, r2
 800853a:	4618      	mov	r0, r3
 800853c:	4621      	mov	r1, r4
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f04f 0400 	mov.w	r4, #0
 8008544:	461a      	mov	r2, r3
 8008546:	4623      	mov	r3, r4
 8008548:	f7f8 fb7e 	bl	8000c48 <__aeabi_uldivmod>
 800854c:	4603      	mov	r3, r0
 800854e:	460c      	mov	r4, r1
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e049      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008554:	4b2f      	ldr	r3, [pc, #188]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	099b      	lsrs	r3, r3, #6
 800855a:	f04f 0400 	mov.w	r4, #0
 800855e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008562:	f04f 0200 	mov.w	r2, #0
 8008566:	ea03 0501 	and.w	r5, r3, r1
 800856a:	ea04 0602 	and.w	r6, r4, r2
 800856e:	4629      	mov	r1, r5
 8008570:	4632      	mov	r2, r6
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	f04f 0400 	mov.w	r4, #0
 800857a:	0154      	lsls	r4, r2, #5
 800857c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008580:	014b      	lsls	r3, r1, #5
 8008582:	4619      	mov	r1, r3
 8008584:	4622      	mov	r2, r4
 8008586:	1b49      	subs	r1, r1, r5
 8008588:	eb62 0206 	sbc.w	r2, r2, r6
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	f04f 0400 	mov.w	r4, #0
 8008594:	0194      	lsls	r4, r2, #6
 8008596:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800859a:	018b      	lsls	r3, r1, #6
 800859c:	1a5b      	subs	r3, r3, r1
 800859e:	eb64 0402 	sbc.w	r4, r4, r2
 80085a2:	f04f 0100 	mov.w	r1, #0
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	00e2      	lsls	r2, r4, #3
 80085ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80085b0:	00d9      	lsls	r1, r3, #3
 80085b2:	460b      	mov	r3, r1
 80085b4:	4614      	mov	r4, r2
 80085b6:	195b      	adds	r3, r3, r5
 80085b8:	eb44 0406 	adc.w	r4, r4, r6
 80085bc:	f04f 0100 	mov.w	r1, #0
 80085c0:	f04f 0200 	mov.w	r2, #0
 80085c4:	02a2      	lsls	r2, r4, #10
 80085c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80085ca:	0299      	lsls	r1, r3, #10
 80085cc:	460b      	mov	r3, r1
 80085ce:	4614      	mov	r4, r2
 80085d0:	4618      	mov	r0, r3
 80085d2:	4621      	mov	r1, r4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f04f 0400 	mov.w	r4, #0
 80085da:	461a      	mov	r2, r3
 80085dc:	4623      	mov	r3, r4
 80085de:	f7f8 fb33 	bl	8000c48 <__aeabi_uldivmod>
 80085e2:	4603      	mov	r3, r0
 80085e4:	460c      	mov	r4, r1
 80085e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085e8:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	0c1b      	lsrs	r3, r3, #16
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	3301      	adds	r3, #1
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008600:	60bb      	str	r3, [r7, #8]
      break;
 8008602:	e002      	b.n	800860a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008604:	4b04      	ldr	r3, [pc, #16]	; (8008618 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008606:	60bb      	str	r3, [r7, #8]
      break;
 8008608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800860a:	68bb      	ldr	r3, [r7, #8]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008614:	40023800 	.word	0x40023800
 8008618:	00f42400 	.word	0x00f42400

0800861c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008620:	4b03      	ldr	r3, [pc, #12]	; (8008630 <HAL_RCC_GetHCLKFreq+0x14>)
 8008622:	681b      	ldr	r3, [r3, #0]
}
 8008624:	4618      	mov	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	20000018 	.word	0x20000018

08008634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008638:	f7ff fff0 	bl	800861c <HAL_RCC_GetHCLKFreq>
 800863c:	4601      	mov	r1, r0
 800863e:	4b05      	ldr	r3, [pc, #20]	; (8008654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	0a9b      	lsrs	r3, r3, #10
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	4a03      	ldr	r2, [pc, #12]	; (8008658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800864a:	5cd3      	ldrb	r3, [r2, r3]
 800864c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008650:	4618      	mov	r0, r3
 8008652:	bd80      	pop	{r7, pc}
 8008654:	40023800 	.word	0x40023800
 8008658:	0800f59c 	.word	0x0800f59c

0800865c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d105      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008680:	2b00      	cmp	r3, #0
 8008682:	d035      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008684:	4b62      	ldr	r3, [pc, #392]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800868a:	f7fa fe99 	bl	80033c0 <HAL_GetTick>
 800868e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008690:	e008      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008692:	f7fa fe95 	bl	80033c0 <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d901      	bls.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e0b0      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086a4:	4b5b      	ldr	r3, [pc, #364]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1f0      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	019a      	lsls	r2, r3, #6
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	071b      	lsls	r3, r3, #28
 80086bc:	4955      	ldr	r1, [pc, #340]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80086c4:	4b52      	ldr	r3, [pc, #328]	; (8008810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80086c6:	2201      	movs	r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80086ca:	f7fa fe79 	bl	80033c0 <HAL_GetTick>
 80086ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086d0:	e008      	b.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80086d2:	f7fa fe75 	bl	80033c0 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b02      	cmp	r3, #2
 80086de:	d901      	bls.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e090      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086e4:	4b4b      	ldr	r3, [pc, #300]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8083 	beq.w	8008804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	4b44      	ldr	r3, [pc, #272]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	4a43      	ldr	r2, [pc, #268]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800870c:	6413      	str	r3, [r2, #64]	; 0x40
 800870e:	4b41      	ldr	r3, [pc, #260]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800871a:	4b3f      	ldr	r3, [pc, #252]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a3e      	ldr	r2, [pc, #248]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008724:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008726:	f7fa fe4b 	bl	80033c0 <HAL_GetTick>
 800872a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800872c:	e008      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800872e:	f7fa fe47 	bl	80033c0 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b02      	cmp	r3, #2
 800873a:	d901      	bls.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e062      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008740:	4b35      	ldr	r3, [pc, #212]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d0f0      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800874c:	4b31      	ldr	r3, [pc, #196]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800874e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008754:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d02f      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	429a      	cmp	r2, r3
 8008768:	d028      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800876a:	4b2a      	ldr	r3, [pc, #168]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800876c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008772:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008774:	4b29      	ldr	r3, [pc, #164]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008776:	2201      	movs	r2, #1
 8008778:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800877a:	4b28      	ldr	r3, [pc, #160]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008780:	4a24      	ldr	r2, [pc, #144]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008786:	4b23      	ldr	r3, [pc, #140]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b01      	cmp	r3, #1
 8008790:	d114      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008792:	f7fa fe15 	bl	80033c0 <HAL_GetTick>
 8008796:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008798:	e00a      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800879a:	f7fa fe11 	bl	80033c0 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e02a      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087b0:	4b18      	ldr	r3, [pc, #96]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0ee      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c8:	d10d      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80087ca:	4b12      	ldr	r3, [pc, #72]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087de:	490d      	ldr	r1, [pc, #52]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	608b      	str	r3, [r1, #8]
 80087e4:	e005      	b.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	4a0a      	ldr	r2, [pc, #40]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087f0:	6093      	str	r3, [r2, #8]
 80087f2:	4b08      	ldr	r3, [pc, #32]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80087f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087fe:	4905      	ldr	r1, [pc, #20]	; (8008814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008800:	4313      	orrs	r3, r2
 8008802:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	42470068 	.word	0x42470068
 8008814:	40023800 	.word	0x40023800
 8008818:	40007000 	.word	0x40007000
 800881c:	42470e40 	.word	0x42470e40

08008820 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e083      	b.n	800893a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7f5b      	ldrb	r3, [r3, #29]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d105      	bne.n	8008848 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7f9 fd20 	bl	8002288 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	22ca      	movs	r2, #202	; 0xca
 8008854:	625a      	str	r2, [r3, #36]	; 0x24
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2253      	movs	r2, #83	; 0x53
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f897 	bl	8008992 <RTC_EnterInitMode>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d008      	beq.n	800887c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	22ff      	movs	r2, #255	; 0xff
 8008870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2204      	movs	r2, #4
 8008876:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e05e      	b.n	800893a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800888a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800888e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6899      	ldr	r1, [r3, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	68d2      	ldr	r2, [r2, #12]
 80088b6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6919      	ldr	r1, [r3, #16]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	041a      	lsls	r2, r3, #16
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10e      	bne.n	8008908 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f829 	bl	8008942 <HAL_RTC_WaitForSynchro>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d008      	beq.n	8008908 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	22ff      	movs	r2, #255	; 0xff
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2204      	movs	r2, #4
 8008902:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e018      	b.n	800893a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008916:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	22ff      	movs	r2, #255	; 0xff
 8008930:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008938:	2300      	movs	r3, #0
  }
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800895c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800895e:	f7fa fd2f 	bl	80033c0 <HAL_GetTick>
 8008962:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008964:	e009      	b.n	800897a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008966:	f7fa fd2b 	bl	80033c0 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008974:	d901      	bls.n	800897a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e007      	b.n	800898a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0ee      	beq.n	8008966 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d119      	bne.n	80089e0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f04f 32ff 	mov.w	r2, #4294967295
 80089b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089b6:	f7fa fd03 	bl	80033c0 <HAL_GetTick>
 80089ba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089bc:	e009      	b.n	80089d2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80089be:	f7fa fcff 	bl	80033c0 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089cc:	d901      	bls.n	80089d2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e007      	b.n	80089e2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0ee      	beq.n	80089be <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e01d      	b.n	8008a38 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7fa fb3f 	bl	8003094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4619      	mov	r1, r3
 8008a28:	4610      	mov	r0, r2
 8008a2a:	f000 fcaf 	bl	800938c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b06      	cmp	r3, #6
 8008a68:	d007      	beq.n	8008a7a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f042 0201 	orr.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3714      	adds	r7, #20
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e01d      	b.n	8008ad6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7fa face 	bl	8003050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f000 fc60 	bl	800938c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2201      	movs	r2, #1
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 f85e 	bl	8009bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a15      	ldr	r2, [pc, #84]	; (8008b54 <HAL_TIM_PWM_Start+0x74>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d004      	beq.n	8008b0c <HAL_TIM_PWM_Start+0x2c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a14      	ldr	r2, [pc, #80]	; (8008b58 <HAL_TIM_PWM_Start+0x78>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d101      	bne.n	8008b10 <HAL_TIM_PWM_Start+0x30>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e000      	b.n	8008b12 <HAL_TIM_PWM_Start+0x32>
 8008b10:	2300      	movs	r3, #0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d007      	beq.n	8008b26 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b06      	cmp	r3, #6
 8008b36:	d007      	beq.n	8008b48 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0201 	orr.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40010400 	.word	0x40010400

08008b5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e01d      	b.n	8008baa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d106      	bne.n	8008b88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f815 	bl	8008bb2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f000 fbf6 	bl	800938c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b0c      	cmp	r3, #12
 8008bd6:	d841      	bhi.n	8008c5c <HAL_TIM_IC_Start_IT+0x94>
 8008bd8:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <HAL_TIM_IC_Start_IT+0x18>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008c15 	.word	0x08008c15
 8008be4:	08008c5d 	.word	0x08008c5d
 8008be8:	08008c5d 	.word	0x08008c5d
 8008bec:	08008c5d 	.word	0x08008c5d
 8008bf0:	08008c27 	.word	0x08008c27
 8008bf4:	08008c5d 	.word	0x08008c5d
 8008bf8:	08008c5d 	.word	0x08008c5d
 8008bfc:	08008c5d 	.word	0x08008c5d
 8008c00:	08008c39 	.word	0x08008c39
 8008c04:	08008c5d 	.word	0x08008c5d
 8008c08:	08008c5d 	.word	0x08008c5d
 8008c0c:	08008c5d 	.word	0x08008c5d
 8008c10:	08008c4b 	.word	0x08008c4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68da      	ldr	r2, [r3, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0202 	orr.w	r2, r2, #2
 8008c22:	60da      	str	r2, [r3, #12]
      break;
 8008c24:	e01b      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f042 0204 	orr.w	r2, r2, #4
 8008c34:	60da      	str	r2, [r3, #12]
      break;
 8008c36:	e012      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0208 	orr.w	r2, r2, #8
 8008c46:	60da      	str	r2, [r3, #12]
      break;
 8008c48:	e009      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0210 	orr.w	r2, r2, #16
 8008c58:	60da      	str	r2, [r3, #12]
      break;
 8008c5a:	e000      	b.n	8008c5e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8008c5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2201      	movs	r2, #1
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 ffa4 	bl	8009bb4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b06      	cmp	r3, #6
 8008c7c:	d007      	beq.n	8008c8e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0201 	orr.w	r2, r2, #1
 8008c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d122      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d11b      	bne.n	8008cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f06f 0202 	mvn.w	r2, #2
 8008cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7f9 f930 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8008ce0:	e005      	b.n	8008cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fb3e 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7f9 fa95 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d122      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d11b      	bne.n	8008d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f06f 0204 	mvn.w	r2, #4
 8008d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7f9 f906 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8008d34:	e005      	b.n	8008d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fb14 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7f9 fa6b 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d122      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d11b      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f06f 0208 	mvn.w	r2, #8
 8008d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2204      	movs	r2, #4
 8008d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69db      	ldr	r3, [r3, #28]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7f9 f8dc 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8008d88:	e005      	b.n	8008d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 faea 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f7f9 fa41 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b10      	cmp	r3, #16
 8008da8:	d122      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d11b      	bne.n	8008df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0210 	mvn.w	r2, #16
 8008dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7f9 f8b2 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8008ddc:	e005      	b.n	8008dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fac0 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7f9 fa17 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d10e      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d107      	bne.n	8008e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0201 	mvn.w	r2, #1
 8008e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7f9 f944 	bl	80020a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d10e      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d107      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 ffb4 	bl	8009db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e52:	2b40      	cmp	r3, #64	; 0x40
 8008e54:	d10e      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d107      	bne.n	8008e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fa82 	bl	8009378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d10e      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f003 0320 	and.w	r3, r3, #32
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d107      	bne.n	8008ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0220 	mvn.w	r2, #32
 8008e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 ff7e 	bl	8009d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d101      	bne.n	8008ec2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e08a      	b.n	8008fd8 <HAL_TIM_IC_ConfigChannel+0x130>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11b      	bne.n	8008f10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6819      	ldr	r1, [r3, #0]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	685a      	ldr	r2, [r3, #4]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f000 fca0 	bl	800982c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699a      	ldr	r2, [r3, #24]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 020c 	bic.w	r2, r2, #12
 8008efa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6999      	ldr	r1, [r3, #24]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	689a      	ldr	r2, [r3, #8]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	619a      	str	r2, [r3, #24]
 8008f0e:	e05a      	b.n	8008fc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b04      	cmp	r3, #4
 8008f14:	d11c      	bne.n	8008f50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6819      	ldr	r1, [r3, #0]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f000 fd24 	bl	8009972 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	699a      	ldr	r2, [r3, #24]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6999      	ldr	r1, [r3, #24]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	021a      	lsls	r2, r3, #8
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	430a      	orrs	r2, r1
 8008f4c:	619a      	str	r2, [r3, #24]
 8008f4e:	e03a      	b.n	8008fc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d11b      	bne.n	8008f8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	f000 fd71 	bl	8009a4c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69da      	ldr	r2, [r3, #28]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 020c 	bic.w	r2, r2, #12
 8008f78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69d9      	ldr	r1, [r3, #28]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	61da      	str	r2, [r3, #28]
 8008f8c:	e01b      	b.n	8008fc6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6819      	ldr	r1, [r3, #0]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f000 fd91 	bl	8009ac4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	69da      	ldr	r2, [r3, #28]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008fb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69d9      	ldr	r1, [r3, #28]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	021a      	lsls	r2, r3, #8
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e0b4      	b.n	8009164 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b0c      	cmp	r3, #12
 800900e:	f200 809f 	bhi.w	8009150 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009012:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009018:	0800904d 	.word	0x0800904d
 800901c:	08009151 	.word	0x08009151
 8009020:	08009151 	.word	0x08009151
 8009024:	08009151 	.word	0x08009151
 8009028:	0800908d 	.word	0x0800908d
 800902c:	08009151 	.word	0x08009151
 8009030:	08009151 	.word	0x08009151
 8009034:	08009151 	.word	0x08009151
 8009038:	080090cf 	.word	0x080090cf
 800903c:	08009151 	.word	0x08009151
 8009040:	08009151 	.word	0x08009151
 8009044:	08009151 	.word	0x08009151
 8009048:	0800910f 	.word	0x0800910f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fa3a 	bl	80094cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0208 	orr.w	r2, r2, #8
 8009066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0204 	bic.w	r2, r2, #4
 8009076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6999      	ldr	r1, [r3, #24]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	691a      	ldr	r2, [r3, #16]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	619a      	str	r2, [r3, #24]
      break;
 800908a:	e062      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fa8a 	bl	80095ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	699a      	ldr	r2, [r3, #24]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	699a      	ldr	r2, [r3, #24]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6999      	ldr	r1, [r3, #24]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	021a      	lsls	r2, r3, #8
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	619a      	str	r2, [r3, #24]
      break;
 80090cc:	e041      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fadf 	bl	8009698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69da      	ldr	r2, [r3, #28]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0208 	orr.w	r2, r2, #8
 80090e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69da      	ldr	r2, [r3, #28]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0204 	bic.w	r2, r2, #4
 80090f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69d9      	ldr	r1, [r3, #28]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	691a      	ldr	r2, [r3, #16]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	430a      	orrs	r2, r1
 800910a:	61da      	str	r2, [r3, #28]
      break;
 800910c:	e021      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fb33 	bl	8009780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69da      	ldr	r2, [r3, #28]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69d9      	ldr	r1, [r3, #28]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	021a      	lsls	r2, r3, #8
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	61da      	str	r2, [r3, #28]
      break;
 800914e:	e000      	b.n	8009152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009150:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d101      	bne.n	8009184 <HAL_TIM_ConfigClockSource+0x18>
 8009180:	2302      	movs	r3, #2
 8009182:	e0a6      	b.n	80092d2 <HAL_TIM_ConfigClockSource+0x166>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b40      	cmp	r3, #64	; 0x40
 80091ba:	d067      	beq.n	800928c <HAL_TIM_ConfigClockSource+0x120>
 80091bc:	2b40      	cmp	r3, #64	; 0x40
 80091be:	d80b      	bhi.n	80091d8 <HAL_TIM_ConfigClockSource+0x6c>
 80091c0:	2b10      	cmp	r3, #16
 80091c2:	d073      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0x140>
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d802      	bhi.n	80091ce <HAL_TIM_ConfigClockSource+0x62>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d06f      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80091cc:	e078      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80091ce:	2b20      	cmp	r3, #32
 80091d0:	d06c      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0x140>
 80091d2:	2b30      	cmp	r3, #48	; 0x30
 80091d4:	d06a      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80091d6:	e073      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80091d8:	2b70      	cmp	r3, #112	; 0x70
 80091da:	d00d      	beq.n	80091f8 <HAL_TIM_ConfigClockSource+0x8c>
 80091dc:	2b70      	cmp	r3, #112	; 0x70
 80091de:	d804      	bhi.n	80091ea <HAL_TIM_ConfigClockSource+0x7e>
 80091e0:	2b50      	cmp	r3, #80	; 0x50
 80091e2:	d033      	beq.n	800924c <HAL_TIM_ConfigClockSource+0xe0>
 80091e4:	2b60      	cmp	r3, #96	; 0x60
 80091e6:	d041      	beq.n	800926c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80091e8:	e06a      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ee:	d066      	beq.n	80092be <HAL_TIM_ConfigClockSource+0x152>
 80091f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091f4:	d017      	beq.n	8009226 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80091f6:	e063      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	6899      	ldr	r1, [r3, #8]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	f000 fcb4 	bl	8009b74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800921a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	609a      	str	r2, [r3, #8]
      break;
 8009224:	e04c      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6899      	ldr	r1, [r3, #8]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f000 fc9d 	bl	8009b74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009248:	609a      	str	r2, [r3, #8]
      break;
 800924a:	e039      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	6859      	ldr	r1, [r3, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	461a      	mov	r2, r3
 800925a:	f000 fb5b 	bl	8009914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2150      	movs	r1, #80	; 0x50
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fc6a 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 800926a:	e029      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	6859      	ldr	r1, [r3, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	461a      	mov	r2, r3
 800927a:	f000 fbb7 	bl	80099ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2160      	movs	r1, #96	; 0x60
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fc5a 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 800928a:	e019      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6818      	ldr	r0, [r3, #0]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	6859      	ldr	r1, [r3, #4]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	461a      	mov	r2, r3
 800929a:	f000 fb3b 	bl	8009914 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2140      	movs	r1, #64	; 0x40
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fc4a 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 80092aa:	e009      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f000 fc41 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 80092bc:	e000      	b.n	80092c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80092be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b0c      	cmp	r3, #12
 80092ee:	d831      	bhi.n	8009354 <HAL_TIM_ReadCapturedValue+0x78>
 80092f0:	a201      	add	r2, pc, #4	; (adr r2, 80092f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80092f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f6:	bf00      	nop
 80092f8:	0800932d 	.word	0x0800932d
 80092fc:	08009355 	.word	0x08009355
 8009300:	08009355 	.word	0x08009355
 8009304:	08009355 	.word	0x08009355
 8009308:	08009337 	.word	0x08009337
 800930c:	08009355 	.word	0x08009355
 8009310:	08009355 	.word	0x08009355
 8009314:	08009355 	.word	0x08009355
 8009318:	08009341 	.word	0x08009341
 800931c:	08009355 	.word	0x08009355
 8009320:	08009355 	.word	0x08009355
 8009324:	08009355 	.word	0x08009355
 8009328:	0800934b 	.word	0x0800934b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	60fb      	str	r3, [r7, #12]

      break;
 8009334:	e00f      	b.n	8009356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933c:	60fb      	str	r3, [r7, #12]

      break;
 800933e:	e00a      	b.n	8009356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	60fb      	str	r3, [r7, #12]

      break;
 8009348:	e005      	b.n	8009356 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	60fb      	str	r3, [r7, #12]

      break;
 8009352:	e000      	b.n	8009356 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009354:	bf00      	nop
  }

  return tmpreg;
 8009356:	68fb      	ldr	r3, [r7, #12]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a40      	ldr	r2, [pc, #256]	; (80094a0 <TIM_Base_SetConfig+0x114>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d013      	beq.n	80093cc <TIM_Base_SetConfig+0x40>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093aa:	d00f      	beq.n	80093cc <TIM_Base_SetConfig+0x40>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a3d      	ldr	r2, [pc, #244]	; (80094a4 <TIM_Base_SetConfig+0x118>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d00b      	beq.n	80093cc <TIM_Base_SetConfig+0x40>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a3c      	ldr	r2, [pc, #240]	; (80094a8 <TIM_Base_SetConfig+0x11c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d007      	beq.n	80093cc <TIM_Base_SetConfig+0x40>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a3b      	ldr	r2, [pc, #236]	; (80094ac <TIM_Base_SetConfig+0x120>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d003      	beq.n	80093cc <TIM_Base_SetConfig+0x40>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a3a      	ldr	r2, [pc, #232]	; (80094b0 <TIM_Base_SetConfig+0x124>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d108      	bne.n	80093de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a2f      	ldr	r2, [pc, #188]	; (80094a0 <TIM_Base_SetConfig+0x114>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d02b      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ec:	d027      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a2c      	ldr	r2, [pc, #176]	; (80094a4 <TIM_Base_SetConfig+0x118>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d023      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a2b      	ldr	r2, [pc, #172]	; (80094a8 <TIM_Base_SetConfig+0x11c>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01f      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a2a      	ldr	r2, [pc, #168]	; (80094ac <TIM_Base_SetConfig+0x120>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d01b      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <TIM_Base_SetConfig+0x124>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d017      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a28      	ldr	r2, [pc, #160]	; (80094b4 <TIM_Base_SetConfig+0x128>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d013      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a27      	ldr	r2, [pc, #156]	; (80094b8 <TIM_Base_SetConfig+0x12c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d00f      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a26      	ldr	r2, [pc, #152]	; (80094bc <TIM_Base_SetConfig+0x130>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d00b      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a25      	ldr	r2, [pc, #148]	; (80094c0 <TIM_Base_SetConfig+0x134>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d007      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a24      	ldr	r2, [pc, #144]	; (80094c4 <TIM_Base_SetConfig+0x138>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d003      	beq.n	800943e <TIM_Base_SetConfig+0xb2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a23      	ldr	r2, [pc, #140]	; (80094c8 <TIM_Base_SetConfig+0x13c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d108      	bne.n	8009450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4313      	orrs	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a0a      	ldr	r2, [pc, #40]	; (80094a0 <TIM_Base_SetConfig+0x114>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d003      	beq.n	8009484 <TIM_Base_SetConfig+0xf8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a0c      	ldr	r2, [pc, #48]	; (80094b0 <TIM_Base_SetConfig+0x124>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d103      	bne.n	800948c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	691a      	ldr	r2, [r3, #16]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	615a      	str	r2, [r3, #20]
}
 8009492:	bf00      	nop
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	40010000 	.word	0x40010000
 80094a4:	40000400 	.word	0x40000400
 80094a8:	40000800 	.word	0x40000800
 80094ac:	40000c00 	.word	0x40000c00
 80094b0:	40010400 	.word	0x40010400
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40014400 	.word	0x40014400
 80094bc:	40014800 	.word	0x40014800
 80094c0:	40001800 	.word	0x40001800
 80094c4:	40001c00 	.word	0x40001c00
 80094c8:	40002000 	.word	0x40002000

080094cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	f023 0201 	bic.w	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0303 	bic.w	r3, r3, #3
 8009502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f023 0302 	bic.w	r3, r3, #2
 8009514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	4313      	orrs	r3, r2
 800951e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a20      	ldr	r2, [pc, #128]	; (80095a4 <TIM_OC1_SetConfig+0xd8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d003      	beq.n	8009530 <TIM_OC1_SetConfig+0x64>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1f      	ldr	r2, [pc, #124]	; (80095a8 <TIM_OC1_SetConfig+0xdc>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d10c      	bne.n	800954a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f023 0308 	bic.w	r3, r3, #8
 8009536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	4313      	orrs	r3, r2
 8009540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f023 0304 	bic.w	r3, r3, #4
 8009548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a15      	ldr	r2, [pc, #84]	; (80095a4 <TIM_OC1_SetConfig+0xd8>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d003      	beq.n	800955a <TIM_OC1_SetConfig+0x8e>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a14      	ldr	r2, [pc, #80]	; (80095a8 <TIM_OC1_SetConfig+0xdc>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d111      	bne.n	800957e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	693a      	ldr	r2, [r7, #16]
 8009570:	4313      	orrs	r3, r2
 8009572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	621a      	str	r2, [r3, #32]
}
 8009598:	bf00      	nop
 800959a:	371c      	adds	r7, #28
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	40010000 	.word	0x40010000
 80095a8:	40010400 	.word	0x40010400

080095ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f023 0210 	bic.w	r2, r3, #16
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	021b      	lsls	r3, r3, #8
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f023 0320 	bic.w	r3, r3, #32
 80095f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	011b      	lsls	r3, r3, #4
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a22      	ldr	r2, [pc, #136]	; (8009690 <TIM_OC2_SetConfig+0xe4>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d003      	beq.n	8009614 <TIM_OC2_SetConfig+0x68>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a21      	ldr	r2, [pc, #132]	; (8009694 <TIM_OC2_SetConfig+0xe8>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d10d      	bne.n	8009630 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800961a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4313      	orrs	r3, r2
 8009626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800962e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a17      	ldr	r2, [pc, #92]	; (8009690 <TIM_OC2_SetConfig+0xe4>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d003      	beq.n	8009640 <TIM_OC2_SetConfig+0x94>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a16      	ldr	r2, [pc, #88]	; (8009694 <TIM_OC2_SetConfig+0xe8>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d113      	bne.n	8009668 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800964e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	4313      	orrs	r3, r2
 800965a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	621a      	str	r2, [r3, #32]
}
 8009682:	bf00      	nop
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40010000 	.word	0x40010000
 8009694:	40010400 	.word	0x40010400

08009698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 0303 	bic.w	r3, r3, #3
 80096ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	021b      	lsls	r3, r3, #8
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a21      	ldr	r2, [pc, #132]	; (8009778 <TIM_OC3_SetConfig+0xe0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_OC3_SetConfig+0x66>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a20      	ldr	r2, [pc, #128]	; (800977c <TIM_OC3_SetConfig+0xe4>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d10d      	bne.n	800971a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	021b      	lsls	r3, r3, #8
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a16      	ldr	r2, [pc, #88]	; (8009778 <TIM_OC3_SetConfig+0xe0>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d003      	beq.n	800972a <TIM_OC3_SetConfig+0x92>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a15      	ldr	r2, [pc, #84]	; (800977c <TIM_OC3_SetConfig+0xe4>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d113      	bne.n	8009752 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	011b      	lsls	r3, r3, #4
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	4313      	orrs	r3, r2
 8009744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	621a      	str	r2, [r3, #32]
}
 800976c:	bf00      	nop
 800976e:	371c      	adds	r7, #28
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	40010000 	.word	0x40010000
 800977c:	40010400 	.word	0x40010400

08009780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	031b      	lsls	r3, r3, #12
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a12      	ldr	r2, [pc, #72]	; (8009824 <TIM_OC4_SetConfig+0xa4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d003      	beq.n	80097e8 <TIM_OC4_SetConfig+0x68>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a11      	ldr	r2, [pc, #68]	; (8009828 <TIM_OC4_SetConfig+0xa8>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d109      	bne.n	80097fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	019b      	lsls	r3, r3, #6
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	621a      	str	r2, [r3, #32]
}
 8009816:	bf00      	nop
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40010000 	.word	0x40010000
 8009828:	40010400 	.word	0x40010400

0800982c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4a28      	ldr	r2, [pc, #160]	; (80098f8 <TIM_TI1_SetConfig+0xcc>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d01b      	beq.n	8009892 <TIM_TI1_SetConfig+0x66>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009860:	d017      	beq.n	8009892 <TIM_TI1_SetConfig+0x66>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	4a25      	ldr	r2, [pc, #148]	; (80098fc <TIM_TI1_SetConfig+0xd0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d013      	beq.n	8009892 <TIM_TI1_SetConfig+0x66>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4a24      	ldr	r2, [pc, #144]	; (8009900 <TIM_TI1_SetConfig+0xd4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00f      	beq.n	8009892 <TIM_TI1_SetConfig+0x66>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4a23      	ldr	r2, [pc, #140]	; (8009904 <TIM_TI1_SetConfig+0xd8>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00b      	beq.n	8009892 <TIM_TI1_SetConfig+0x66>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	4a22      	ldr	r2, [pc, #136]	; (8009908 <TIM_TI1_SetConfig+0xdc>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d007      	beq.n	8009892 <TIM_TI1_SetConfig+0x66>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4a21      	ldr	r2, [pc, #132]	; (800990c <TIM_TI1_SetConfig+0xe0>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d003      	beq.n	8009892 <TIM_TI1_SetConfig+0x66>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	4a20      	ldr	r2, [pc, #128]	; (8009910 <TIM_TI1_SetConfig+0xe4>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d101      	bne.n	8009896 <TIM_TI1_SetConfig+0x6a>
 8009892:	2301      	movs	r3, #1
 8009894:	e000      	b.n	8009898 <TIM_TI1_SetConfig+0x6c>
 8009896:	2300      	movs	r3, #0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d008      	beq.n	80098ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f023 0303 	bic.w	r3, r3, #3
 80098a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	e003      	b.n	80098b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f043 0301 	orr.w	r3, r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f023 030a 	bic.w	r3, r3, #10
 80098d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f003 030a 	and.w	r3, r3, #10
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	4313      	orrs	r3, r2
 80098dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	697a      	ldr	r2, [r7, #20]
 80098e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	621a      	str	r2, [r3, #32]
}
 80098ea:	bf00      	nop
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40010000 	.word	0x40010000
 80098fc:	40000400 	.word	0x40000400
 8009900:	40000800 	.word	0x40000800
 8009904:	40000c00 	.word	0x40000c00
 8009908:	40010400 	.word	0x40010400
 800990c:	40014000 	.word	0x40014000
 8009910:	40001800 	.word	0x40001800

08009914 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	f023 0201 	bic.w	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800993e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f023 030a 	bic.w	r3, r3, #10
 8009950:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009972:	b480      	push	{r7}
 8009974:	b087      	sub	sp, #28
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
 800997e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	f023 0210 	bic.w	r2, r3, #16
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800999e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	021b      	lsls	r3, r3, #8
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	031b      	lsls	r3, r3, #12
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	621a      	str	r2, [r3, #32]
}
 80099e0:	bf00      	nop
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	f023 0210 	bic.w	r2, r3, #16
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	031b      	lsls	r3, r3, #12
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	011b      	lsls	r3, r3, #4
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	621a      	str	r2, [r3, #32]
}
 8009a40:	bf00      	nop
 8009a42:	371c      	adds	r7, #28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b087      	sub	sp, #28
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f023 0303 	bic.w	r3, r3, #3
 8009a78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009a9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	697a      	ldr	r2, [r7, #20]
 8009ab0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	621a      	str	r2, [r3, #32]
}
 8009ab8:	bf00      	nop
 8009aba:	371c      	adds	r7, #28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b087      	sub	sp, #28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a1b      	ldr	r3, [r3, #32]
 8009ae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009af0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	021b      	lsls	r3, r3, #8
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	031b      	lsls	r3, r3, #12
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009b16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	031b      	lsls	r3, r3, #12
 8009b1c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	621a      	str	r2, [r3, #32]
}
 8009b32:	bf00      	nop
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	f043 0307 	orr.w	r3, r3, #7
 8009b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	609a      	str	r2, [r3, #8]
}
 8009b68:	bf00      	nop
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	021a      	lsls	r2, r3, #8
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	431a      	orrs	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	609a      	str	r2, [r3, #8]
}
 8009ba8:	bf00      	nop
 8009baa:	371c      	adds	r7, #28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1a      	ldr	r2, [r3, #32]
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	43db      	mvns	r3, r3
 8009bd6:	401a      	ands	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a1a      	ldr	r2, [r3, #32]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f003 031f 	and.w	r3, r3, #31
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bec:	431a      	orrs	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
}
 8009bf2:	bf00      	nop
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
	...

08009c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e05a      	b.n	8009cce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a21      	ldr	r2, [pc, #132]	; (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d022      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c64:	d01d      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a1d      	ldr	r2, [pc, #116]	; (8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d018      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a1b      	ldr	r2, [pc, #108]	; (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d013      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a1a      	ldr	r2, [pc, #104]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d00e      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a18      	ldr	r2, [pc, #96]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d009      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a17      	ldr	r2, [pc, #92]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d004      	beq.n	8009ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a15      	ldr	r2, [pc, #84]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d10c      	bne.n	8009cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	40010000 	.word	0x40010000
 8009ce0:	40000400 	.word	0x40000400
 8009ce4:	40000800 	.word	0x40000800
 8009ce8:	40000c00 	.word	0x40000c00
 8009cec:	40010400 	.word	0x40010400
 8009cf0:	40014000 	.word	0x40014000
 8009cf4:	40001800 	.word	0x40001800

08009cf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d10:	2302      	movs	r3, #2
 8009d12:	e03d      	b.n	8009d90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	f107 001c 	add.w	r0, r7, #28
 8009dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d122      	bne.n	8009e22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d105      	bne.n	8009e16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 fab4 	bl	800b384 <USB_CoreReset>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73fb      	strb	r3, [r7, #15]
 8009e20:	e01a      	b.n	8009e58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 faa8 	bl	800b384 <USB_CoreReset>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
 8009e4a:	e005      	b.n	8009e58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d10b      	bne.n	8009e76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f043 0206 	orr.w	r2, r3, #6
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f043 0220 	orr.w	r2, r3, #32
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e82:	b004      	add	sp, #16
 8009e84:	4770      	bx	lr
	...

08009e88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	4613      	mov	r3, r2
 8009e94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d165      	bne.n	8009f68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	4a41      	ldr	r2, [pc, #260]	; (8009fa4 <USB_SetTurnaroundTime+0x11c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d906      	bls.n	8009eb2 <USB_SetTurnaroundTime+0x2a>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4a40      	ldr	r2, [pc, #256]	; (8009fa8 <USB_SetTurnaroundTime+0x120>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d802      	bhi.n	8009eb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009eac:	230f      	movs	r3, #15
 8009eae:	617b      	str	r3, [r7, #20]
 8009eb0:	e062      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	4a3c      	ldr	r2, [pc, #240]	; (8009fa8 <USB_SetTurnaroundTime+0x120>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d906      	bls.n	8009ec8 <USB_SetTurnaroundTime+0x40>
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	4a3b      	ldr	r2, [pc, #236]	; (8009fac <USB_SetTurnaroundTime+0x124>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d802      	bhi.n	8009ec8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ec2:	230e      	movs	r3, #14
 8009ec4:	617b      	str	r3, [r7, #20]
 8009ec6:	e057      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	4a38      	ldr	r2, [pc, #224]	; (8009fac <USB_SetTurnaroundTime+0x124>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d906      	bls.n	8009ede <USB_SetTurnaroundTime+0x56>
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4a37      	ldr	r2, [pc, #220]	; (8009fb0 <USB_SetTurnaroundTime+0x128>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d802      	bhi.n	8009ede <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009ed8:	230d      	movs	r3, #13
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	e04c      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	4a33      	ldr	r2, [pc, #204]	; (8009fb0 <USB_SetTurnaroundTime+0x128>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d906      	bls.n	8009ef4 <USB_SetTurnaroundTime+0x6c>
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4a32      	ldr	r2, [pc, #200]	; (8009fb4 <USB_SetTurnaroundTime+0x12c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d802      	bhi.n	8009ef4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009eee:	230c      	movs	r3, #12
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	e041      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4a2f      	ldr	r2, [pc, #188]	; (8009fb4 <USB_SetTurnaroundTime+0x12c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d906      	bls.n	8009f0a <USB_SetTurnaroundTime+0x82>
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4a2e      	ldr	r2, [pc, #184]	; (8009fb8 <USB_SetTurnaroundTime+0x130>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d802      	bhi.n	8009f0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009f04:	230b      	movs	r3, #11
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	e036      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4a2a      	ldr	r2, [pc, #168]	; (8009fb8 <USB_SetTurnaroundTime+0x130>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d906      	bls.n	8009f20 <USB_SetTurnaroundTime+0x98>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	4a29      	ldr	r2, [pc, #164]	; (8009fbc <USB_SetTurnaroundTime+0x134>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d802      	bhi.n	8009f20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009f1a:	230a      	movs	r3, #10
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e02b      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4a26      	ldr	r2, [pc, #152]	; (8009fbc <USB_SetTurnaroundTime+0x134>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d906      	bls.n	8009f36 <USB_SetTurnaroundTime+0xae>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4a25      	ldr	r2, [pc, #148]	; (8009fc0 <USB_SetTurnaroundTime+0x138>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d802      	bhi.n	8009f36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009f30:	2309      	movs	r3, #9
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	e020      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	4a21      	ldr	r2, [pc, #132]	; (8009fc0 <USB_SetTurnaroundTime+0x138>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d906      	bls.n	8009f4c <USB_SetTurnaroundTime+0xc4>
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	4a20      	ldr	r2, [pc, #128]	; (8009fc4 <USB_SetTurnaroundTime+0x13c>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d802      	bhi.n	8009f4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f46:	2308      	movs	r3, #8
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	e015      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	4a1d      	ldr	r2, [pc, #116]	; (8009fc4 <USB_SetTurnaroundTime+0x13c>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d906      	bls.n	8009f62 <USB_SetTurnaroundTime+0xda>
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4a1c      	ldr	r2, [pc, #112]	; (8009fc8 <USB_SetTurnaroundTime+0x140>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d802      	bhi.n	8009f62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f5c:	2307      	movs	r3, #7
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e00a      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f62:	2306      	movs	r3, #6
 8009f64:	617b      	str	r3, [r7, #20]
 8009f66:	e007      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f68:	79fb      	ldrb	r3, [r7, #7]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d102      	bne.n	8009f74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f6e:	2309      	movs	r3, #9
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	e001      	b.n	8009f78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f74:	2309      	movs	r3, #9
 8009f76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	029b      	lsls	r3, r3, #10
 8009f8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009f90:	431a      	orrs	r2, r3
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	371c      	adds	r7, #28
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	00d8acbf 	.word	0x00d8acbf
 8009fa8:	00e4e1bf 	.word	0x00e4e1bf
 8009fac:	00f423ff 	.word	0x00f423ff
 8009fb0:	0106737f 	.word	0x0106737f
 8009fb4:	011a499f 	.word	0x011a499f
 8009fb8:	01312cff 	.word	0x01312cff
 8009fbc:	014ca43f 	.word	0x014ca43f
 8009fc0:	016e35ff 	.word	0x016e35ff
 8009fc4:	01a6ab1f 	.word	0x01a6ab1f
 8009fc8:	01e847ff 	.word	0x01e847ff

08009fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f043 0201 	orr.w	r2, r3, #1
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f023 0201 	bic.w	r2, r3, #1
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d106      	bne.n	800a03c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	60da      	str	r2, [r3, #12]
 800a03a:	e00b      	b.n	800a054 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a03c:	78fb      	ldrb	r3, [r7, #3]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60da      	str	r2, [r3, #12]
 800a04e:	e001      	b.n	800a054 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e003      	b.n	800a05c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a054:	2032      	movs	r0, #50	; 0x32
 800a056:	f7f9 f9bf 	bl	80033d8 <HAL_Delay>

  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a064:	b084      	sub	sp, #16
 800a066:	b580      	push	{r7, lr}
 800a068:	b086      	sub	sp, #24
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a07e:	2300      	movs	r3, #0
 800a080:	613b      	str	r3, [r7, #16]
 800a082:	e009      	b.n	800a098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	3340      	adds	r3, #64	; 0x40
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	2200      	movs	r2, #0
 800a090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3301      	adds	r3, #1
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2b0e      	cmp	r3, #14
 800a09c:	d9f2      	bls.n	800a084 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d11c      	bne.n	800a0de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0b2:	f043 0302 	orr.w	r3, r3, #2
 800a0b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	639a      	str	r2, [r3, #56]	; 0x38
 800a0dc:	e00b      	b.n	800a0f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	2300      	movs	r3, #0
 800a100:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a108:	4619      	mov	r1, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a110:	461a      	mov	r2, r3
 800a112:	680b      	ldr	r3, [r1, #0]
 800a114:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d10c      	bne.n	800a136 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d104      	bne.n	800a12c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a122:	2100      	movs	r1, #0
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f949 	bl	800a3bc <USB_SetDevSpeed>
 800a12a:	e008      	b.n	800a13e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a12c:	2101      	movs	r1, #1
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f944 	bl	800a3bc <USB_SetDevSpeed>
 800a134:	e003      	b.n	800a13e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a136:	2103      	movs	r1, #3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f93f 	bl	800a3bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a13e:	2110      	movs	r1, #16
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f8f3 	bl	800a32c <USB_FlushTxFifo>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f911 	bl	800a378 <USB_FlushRxFifo>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a166:	461a      	mov	r2, r3
 800a168:	2300      	movs	r3, #0
 800a16a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a172:	461a      	mov	r2, r3
 800a174:	2300      	movs	r3, #0
 800a176:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17e:	461a      	mov	r2, r3
 800a180:	2300      	movs	r3, #0
 800a182:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a184:	2300      	movs	r3, #0
 800a186:	613b      	str	r3, [r7, #16]
 800a188:	e043      	b.n	800a212 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a19c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1a0:	d118      	bne.n	800a1d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10a      	bne.n	800a1be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	e013      	b.n	800a1e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	e008      	b.n	800a1e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	015a      	lsls	r2, r3, #5
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	4413      	add	r3, r2
 800a200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a204:	461a      	mov	r2, r3
 800a206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a20a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	3301      	adds	r3, #1
 800a210:	613b      	str	r3, [r7, #16]
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	429a      	cmp	r2, r3
 800a218:	d3b7      	bcc.n	800a18a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a21a:	2300      	movs	r3, #0
 800a21c:	613b      	str	r3, [r7, #16]
 800a21e:	e043      	b.n	800a2a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a236:	d118      	bne.n	800a26a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10a      	bne.n	800a254 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	461a      	mov	r2, r3
 800a24c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	e013      	b.n	800a27c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a260:	461a      	mov	r2, r3
 800a262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	e008      	b.n	800a27c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a276:	461a      	mov	r2, r3
 800a278:	2300      	movs	r3, #0
 800a27a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a288:	461a      	mov	r2, r3
 800a28a:	2300      	movs	r3, #0
 800a28c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29a:	461a      	mov	r2, r3
 800a29c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a2a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d3b7      	bcc.n	800a220 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a2d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d105      	bne.n	800a2e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	f043 0210 	orr.w	r2, r3, #16
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	699a      	ldr	r2, [r3, #24]
 800a2e8:	4b0f      	ldr	r3, [pc, #60]	; (800a328 <USB_DevInit+0x2c4>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	f043 0208 	orr.w	r2, r3, #8
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a304:	2b01      	cmp	r3, #1
 800a306:	d107      	bne.n	800a318 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a310:	f043 0304 	orr.w	r3, r3, #4
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a318:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a324:	b004      	add	sp, #16
 800a326:	4770      	bx	lr
 800a328:	803c3800 	.word	0x803c3800

0800a32c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	019b      	lsls	r3, r3, #6
 800a33e:	f043 0220 	orr.w	r2, r3, #32
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3301      	adds	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4a09      	ldr	r2, [pc, #36]	; (800a374 <USB_FlushTxFifo+0x48>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d901      	bls.n	800a358 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a354:	2303      	movs	r3, #3
 800a356:	e006      	b.n	800a366 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b20      	cmp	r3, #32
 800a362:	d0f0      	beq.n	800a346 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	00030d40 	.word	0x00030d40

0800a378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a380:	2300      	movs	r3, #0
 800a382:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2210      	movs	r2, #16
 800a388:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3301      	adds	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a09      	ldr	r2, [pc, #36]	; (800a3b8 <USB_FlushRxFifo+0x40>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d901      	bls.n	800a39c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e006      	b.n	800a3aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	2b10      	cmp	r3, #16
 800a3a6:	d0f0      	beq.n	800a38a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	00030d40 	.word	0x00030d40

0800a3bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	78fb      	ldrb	r3, [r7, #3]
 800a3d6:	68f9      	ldr	r1, [r7, #12]
 800a3d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b087      	sub	sp, #28
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f003 0306 	and.w	r3, r3, #6
 800a406:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d102      	bne.n	800a414 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]
 800a412:	e00a      	b.n	800a42a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b02      	cmp	r3, #2
 800a418:	d002      	beq.n	800a420 <USB_GetDevSpeed+0x32>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b06      	cmp	r3, #6
 800a41e:	d102      	bne.n	800a426 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a420:	2302      	movs	r3, #2
 800a422:	75fb      	strb	r3, [r7, #23]
 800a424:	e001      	b.n	800a42a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a426:	230f      	movs	r3, #15
 800a428:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d13a      	bne.n	800a4ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a45a:	69da      	ldr	r2, [r3, #28]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	f003 030f 	and.w	r3, r3, #15
 800a464:	2101      	movs	r1, #1
 800a466:	fa01 f303 	lsl.w	r3, r1, r3
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	68f9      	ldr	r1, [r7, #12]
 800a46e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a472:	4313      	orrs	r3, r2
 800a474:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d155      	bne.n	800a538 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	78db      	ldrb	r3, [r3, #3]
 800a4a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	059b      	lsls	r3, r3, #22
 800a4ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	0151      	lsls	r1, r2, #5
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4c6:	6013      	str	r3, [r2, #0]
 800a4c8:	e036      	b.n	800a538 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d0:	69da      	ldr	r2, [r3, #28]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	2101      	movs	r1, #1
 800a4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	68f9      	ldr	r1, [r7, #12]
 800a4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d11a      	bne.n	800a538 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	78db      	ldrb	r3, [r3, #3]
 800a51c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a51e:	430b      	orrs	r3, r1
 800a520:	4313      	orrs	r3, r2
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	0151      	lsls	r1, r2, #5
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	440a      	add	r2, r1
 800a52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a52e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a536:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
	...

0800a548 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	785b      	ldrb	r3, [r3, #1]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d161      	bne.n	800a628 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a57a:	d11f      	bne.n	800a5bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	0151      	lsls	r1, r2, #5
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	440a      	add	r2, r1
 800a592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a59a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	68f9      	ldr	r1, [r7, #12]
 800a5d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5dc:	4013      	ands	r3, r2
 800a5de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	69da      	ldr	r2, [r3, #28]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	f003 030f 	and.w	r3, r3, #15
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	43db      	mvns	r3, r3
 800a5fa:	68f9      	ldr	r1, [r7, #12]
 800a5fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a600:	4013      	ands	r3, r2
 800a602:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	0159      	lsls	r1, r3, #5
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	440b      	add	r3, r1
 800a61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61e:	4619      	mov	r1, r3
 800a620:	4b35      	ldr	r3, [pc, #212]	; (800a6f8 <USB_DeactivateEndpoint+0x1b0>)
 800a622:	4013      	ands	r3, r2
 800a624:	600b      	str	r3, [r1, #0]
 800a626:	e060      	b.n	800a6ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a63a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a63e:	d11f      	bne.n	800a680 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	440a      	add	r2, r1
 800a656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a65e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	440a      	add	r2, r1
 800a676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a67a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a67e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	2101      	movs	r1, #1
 800a692:	fa01 f303 	lsl.w	r3, r1, r3
 800a696:	041b      	lsls	r3, r3, #16
 800a698:	43db      	mvns	r3, r3
 800a69a:	68f9      	ldr	r1, [r7, #12]
 800a69c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6aa:	69da      	ldr	r2, [r3, #28]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	f003 030f 	and.w	r3, r3, #15
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ba:	041b      	lsls	r3, r3, #16
 800a6bc:	43db      	mvns	r3, r3
 800a6be:	68f9      	ldr	r1, [r7, #12]
 800a6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	015a      	lsls	r2, r3, #5
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	0159      	lsls	r1, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	440b      	add	r3, r1
 800a6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <USB_DeactivateEndpoint+0x1b4>)
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	ec337800 	.word	0xec337800
 800a6fc:	eff37800 	.word	0xeff37800

0800a700 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08a      	sub	sp, #40	; 0x28
 800a704:	af02      	add	r7, sp, #8
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	4613      	mov	r3, r2
 800a70c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	785b      	ldrb	r3, [r3, #1]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	f040 815c 	bne.w	800a9da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d132      	bne.n	800a790 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	0151      	lsls	r1, r2, #5
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	440a      	add	r2, r1
 800a740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a74c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	4413      	add	r3, r2
 800a756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	0151      	lsls	r1, r2, #5
 800a760:	69fa      	ldr	r2, [r7, #28]
 800a762:	440a      	add	r2, r1
 800a764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a76c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	0151      	lsls	r1, r2, #5
 800a780:	69fa      	ldr	r2, [r7, #28]
 800a782:	440a      	add	r2, r1
 800a784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a788:	0cdb      	lsrs	r3, r3, #19
 800a78a:	04db      	lsls	r3, r3, #19
 800a78c:	6113      	str	r3, [r2, #16]
 800a78e:	e074      	b.n	800a87a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	69fa      	ldr	r2, [r7, #28]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7aa:	0cdb      	lsrs	r3, r3, #19
 800a7ac:	04db      	lsls	r3, r3, #19
 800a7ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e0:	691a      	ldr	r2, [r3, #16]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	6959      	ldr	r1, [r3, #20]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	440b      	add	r3, r1
 800a7ec:	1e59      	subs	r1, r3, #1
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7f6:	04d9      	lsls	r1, r3, #19
 800a7f8:	4b9d      	ldr	r3, [pc, #628]	; (800aa70 <USB_EPStartXfer+0x370>)
 800a7fa:	400b      	ands	r3, r1
 800a7fc:	69b9      	ldr	r1, [r7, #24]
 800a7fe:	0148      	lsls	r0, r1, #5
 800a800:	69f9      	ldr	r1, [r7, #28]
 800a802:	4401      	add	r1, r0
 800a804:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a808:	4313      	orrs	r3, r2
 800a80a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a818:	691a      	ldr	r2, [r3, #16]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a822:	69b9      	ldr	r1, [r7, #24]
 800a824:	0148      	lsls	r0, r1, #5
 800a826:	69f9      	ldr	r1, [r7, #28]
 800a828:	4401      	add	r1, r0
 800a82a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a82e:	4313      	orrs	r3, r2
 800a830:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	78db      	ldrb	r3, [r3, #3]
 800a836:	2b01      	cmp	r3, #1
 800a838:	d11f      	bne.n	800a87a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	015a      	lsls	r2, r3, #5
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	4413      	add	r3, r2
 800a842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	0151      	lsls	r1, r2, #5
 800a84c:	69fa      	ldr	r2, [r7, #28]
 800a84e:	440a      	add	r2, r1
 800a850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a854:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a858:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a878:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d14b      	bne.n	800a918 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d009      	beq.n	800a89c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a894:	461a      	mov	r2, r3
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	78db      	ldrb	r3, [r3, #3]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d128      	bne.n	800a8f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d110      	bne.n	800a8d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69ba      	ldr	r2, [r7, #24]
 800a8c4:	0151      	lsls	r1, r2, #5
 800a8c6:	69fa      	ldr	r2, [r7, #28]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	e00f      	b.n	800a8f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	015a      	lsls	r2, r3, #5
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	4413      	add	r3, r2
 800a8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	0151      	lsls	r1, r2, #5
 800a8e8:	69fa      	ldr	r2, [r7, #28]
 800a8ea:	440a      	add	r2, r1
 800a8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	0151      	lsls	r1, r2, #5
 800a908:	69fa      	ldr	r2, [r7, #28]
 800a90a:	440a      	add	r2, r1
 800a90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	e12f      	b.n	800ab78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	0151      	lsls	r1, r2, #5
 800a92a:	69fa      	ldr	r2, [r7, #28]
 800a92c:	440a      	add	r2, r1
 800a92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a936:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	78db      	ldrb	r3, [r3, #3]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d015      	beq.n	800a96c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 8117 	beq.w	800ab78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	f003 030f 	and.w	r3, r3, #15
 800a95a:	2101      	movs	r1, #1
 800a95c:	fa01 f303 	lsl.w	r3, r1, r3
 800a960:	69f9      	ldr	r1, [r7, #28]
 800a962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a966:	4313      	orrs	r3, r2
 800a968:	634b      	str	r3, [r1, #52]	; 0x34
 800a96a:	e105      	b.n	800ab78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d110      	bne.n	800a99e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	4413      	add	r3, r2
 800a984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69ba      	ldr	r2, [r7, #24]
 800a98c:	0151      	lsls	r1, r2, #5
 800a98e:	69fa      	ldr	r2, [r7, #28]
 800a990:	440a      	add	r2, r1
 800a992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	e00f      	b.n	800a9be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	0151      	lsls	r1, r2, #5
 800a9b0:	69fa      	ldr	r2, [r7, #28]
 800a9b2:	440a      	add	r2, r1
 800a9b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	68d9      	ldr	r1, [r3, #12]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	781a      	ldrb	r2, [r3, #0]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	b298      	uxth	r0, r3
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 fa2b 	bl	800ae2e <USB_WritePacket>
 800a9d8:	e0ce      	b.n	800ab78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	0151      	lsls	r1, r2, #5
 800a9ec:	69fa      	ldr	r2, [r7, #28]
 800a9ee:	440a      	add	r2, r1
 800a9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f4:	0cdb      	lsrs	r3, r3, #19
 800a9f6:	04db      	lsls	r3, r3, #19
 800a9f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	0151      	lsls	r1, r2, #5
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	440a      	add	r2, r1
 800aa10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d126      	bne.n	800aa74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa32:	691a      	ldr	r2, [r3, #16]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa3c:	69b9      	ldr	r1, [r7, #24]
 800aa3e:	0148      	lsls	r0, r1, #5
 800aa40:	69f9      	ldr	r1, [r7, #28]
 800aa42:	4401      	add	r1, r0
 800aa44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	69fb      	ldr	r3, [r7, #28]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	69fa      	ldr	r2, [r7, #28]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa6a:	6113      	str	r3, [r2, #16]
 800aa6c:	e036      	b.n	800aadc <USB_EPStartXfer+0x3dc>
 800aa6e:	bf00      	nop
 800aa70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	695a      	ldr	r2, [r3, #20]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	1e5a      	subs	r2, r3, #1
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	015a      	lsls	r2, r3, #5
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	4413      	add	r3, r2
 800aa92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	8afb      	ldrh	r3, [r7, #22]
 800aa9a:	04d9      	lsls	r1, r3, #19
 800aa9c:	4b39      	ldr	r3, [pc, #228]	; (800ab84 <USB_EPStartXfer+0x484>)
 800aa9e:	400b      	ands	r3, r1
 800aaa0:	69b9      	ldr	r1, [r7, #24]
 800aaa2:	0148      	lsls	r0, r1, #5
 800aaa4:	69f9      	ldr	r1, [r7, #28]
 800aaa6:	4401      	add	r1, r0
 800aaa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aaac:	4313      	orrs	r3, r2
 800aaae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	8af9      	ldrh	r1, [r7, #22]
 800aac4:	fb01 f303 	mul.w	r3, r1, r3
 800aac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aacc:	69b9      	ldr	r1, [r7, #24]
 800aace:	0148      	lsls	r0, r1, #5
 800aad0:	69f9      	ldr	r1, [r7, #28]
 800aad2:	4401      	add	r1, r0
 800aad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aad8:	4313      	orrs	r3, r2
 800aada:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aadc:	79fb      	ldrb	r3, [r7, #7]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d10d      	bne.n	800aafe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d009      	beq.n	800aafe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	68d9      	ldr	r1, [r3, #12]
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafa:	460a      	mov	r2, r1
 800aafc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	78db      	ldrb	r3, [r3, #3]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d128      	bne.n	800ab58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d110      	bne.n	800ab38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	0151      	lsls	r1, r2, #5
 800ab28:	69fa      	ldr	r2, [r7, #28]
 800ab2a:	440a      	add	r2, r1
 800ab2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	e00f      	b.n	800ab58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	69ba      	ldr	r2, [r7, #24]
 800ab48:	0151      	lsls	r1, r2, #5
 800ab4a:	69fa      	ldr	r2, [r7, #28]
 800ab4c:	440a      	add	r2, r1
 800ab4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	1ff80000 	.word	0x1ff80000

0800ab88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	4613      	mov	r3, r2
 800ab94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	785b      	ldrb	r3, [r3, #1]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	f040 80cd 	bne.w	800ad44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d132      	bne.n	800ac18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800abd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800abd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	015a      	lsls	r2, r3, #5
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	4413      	add	r3, r2
 800abde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	0151      	lsls	r1, r2, #5
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	440a      	add	r2, r1
 800abec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac02:	691b      	ldr	r3, [r3, #16]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	0151      	lsls	r1, r2, #5
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	440a      	add	r2, r1
 800ac0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac10:	0cdb      	lsrs	r3, r3, #19
 800ac12:	04db      	lsls	r3, r3, #19
 800ac14:	6113      	str	r3, [r2, #16]
 800ac16:	e04e      	b.n	800acb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	0151      	lsls	r1, r2, #5
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	440a      	add	r2, r1
 800ac2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac32:	0cdb      	lsrs	r3, r3, #19
 800ac34:	04db      	lsls	r3, r3, #19
 800ac36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	015a      	lsls	r2, r3, #5
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	4413      	add	r3, r2
 800ac40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	693a      	ldr	r2, [r7, #16]
 800ac48:	0151      	lsls	r1, r2, #5
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	440a      	add	r2, r1
 800ac4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	695a      	ldr	r2, [r3, #20]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d903      	bls.n	800ac70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	689a      	ldr	r2, [r3, #8]
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	0151      	lsls	r1, r2, #5
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	440a      	add	r2, r1
 800ac86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9c:	691a      	ldr	r2, [r3, #16]
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aca6:	6939      	ldr	r1, [r7, #16]
 800aca8:	0148      	lsls	r0, r1, #5
 800acaa:	6979      	ldr	r1, [r7, #20]
 800acac:	4401      	add	r1, r0
 800acae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800acb2:	4313      	orrs	r3, r2
 800acb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d11e      	bne.n	800acfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d009      	beq.n	800acd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd0:	461a      	mov	r2, r3
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	0151      	lsls	r1, r2, #5
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	440a      	add	r2, r1
 800acee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	e092      	b.n	800ae20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	015a      	lsls	r2, r3, #5
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	4413      	add	r3, r2
 800ad02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	0151      	lsls	r1, r2, #5
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	440a      	add	r2, r1
 800ad10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d07e      	beq.n	800ae20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	f003 030f 	and.w	r3, r3, #15
 800ad32:	2101      	movs	r1, #1
 800ad34:	fa01 f303 	lsl.w	r3, r1, r3
 800ad38:	6979      	ldr	r1, [r7, #20]
 800ad3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	634b      	str	r3, [r1, #52]	; 0x34
 800ad42:	e06d      	b.n	800ae20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	0151      	lsls	r1, r2, #5
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	440a      	add	r2, r1
 800ad5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad5e:	0cdb      	lsrs	r3, r3, #19
 800ad60:	04db      	lsls	r3, r3, #19
 800ad62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	693a      	ldr	r2, [r7, #16]
 800ad74:	0151      	lsls	r1, r2, #5
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	440a      	add	r2, r1
 800ad7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	695b      	ldr	r3, [r3, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	689a      	ldr	r2, [r3, #8]
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	0151      	lsls	r1, r2, #5
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	440a      	add	r2, r1
 800adae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc4:	691a      	ldr	r2, [r3, #16]
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adce:	6939      	ldr	r1, [r7, #16]
 800add0:	0148      	lsls	r0, r1, #5
 800add2:	6979      	ldr	r1, [r7, #20]
 800add4:	4401      	add	r1, r0
 800add6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800adda:	4313      	orrs	r3, r2
 800addc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d10d      	bne.n	800ae00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d009      	beq.n	800ae00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	68d9      	ldr	r1, [r3, #12]
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfc:	460a      	mov	r2, r1
 800adfe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	0151      	lsls	r1, r2, #5
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	440a      	add	r2, r1
 800ae16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b089      	sub	sp, #36	; 0x24
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	60f8      	str	r0, [r7, #12]
 800ae36:	60b9      	str	r1, [r7, #8]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	71fb      	strb	r3, [r7, #7]
 800ae40:	4613      	mov	r3, r2
 800ae42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ae4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d11a      	bne.n	800ae8a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae54:	88bb      	ldrh	r3, [r7, #4]
 800ae56:	3303      	adds	r3, #3
 800ae58:	089b      	lsrs	r3, r3, #2
 800ae5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61bb      	str	r3, [r7, #24]
 800ae60:	e00f      	b.n	800ae82 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae62:	79fb      	ldrb	r3, [r7, #7]
 800ae64:	031a      	lsls	r2, r3, #12
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	4413      	add	r3, r2
 800ae6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae6e:	461a      	mov	r2, r3
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d3eb      	bcc.n	800ae62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3724      	adds	r7, #36	; 0x24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b089      	sub	sp, #36	; 0x24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4613      	mov	r3, r2
 800aea4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800aeae:	88fb      	ldrh	r3, [r7, #6]
 800aeb0:	3303      	adds	r3, #3
 800aeb2:	089b      	lsrs	r3, r3, #2
 800aeb4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61bb      	str	r3, [r7, #24]
 800aeba:	e00b      	b.n	800aed4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	601a      	str	r2, [r3, #0]
    pDest++;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	3304      	adds	r3, #4
 800aecc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	3301      	adds	r3, #1
 800aed2:	61bb      	str	r3, [r7, #24]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d3ef      	bcc.n	800aebc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aedc:	69fb      	ldr	r3, [r7, #28]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3724      	adds	r7, #36	; 0x24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr

0800aeea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aeea:	b480      	push	{r7}
 800aeec:	b085      	sub	sp, #20
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d12c      	bne.n	800af60 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	015a      	lsls	r2, r3, #5
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	db12      	blt.n	800af3e <USB_EPSetStall+0x54>
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00f      	beq.n	800af3e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	015a      	lsls	r2, r3, #5
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	4413      	add	r3, r2
 800af26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	0151      	lsls	r1, r2, #5
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	440a      	add	r2, r1
 800af34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af38:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af3c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	015a      	lsls	r2, r3, #5
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	4413      	add	r3, r2
 800af46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	0151      	lsls	r1, r2, #5
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	440a      	add	r2, r1
 800af54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	e02b      	b.n	800afb8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	db12      	blt.n	800af98 <USB_EPSetStall+0xae>
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00f      	beq.n	800af98 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	015a      	lsls	r2, r3, #5
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4413      	add	r3, r2
 800af80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	0151      	lsls	r1, r2, #5
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	440a      	add	r2, r1
 800af8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af96:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	0151      	lsls	r1, r2, #5
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	440a      	add	r2, r1
 800afae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800afb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b085      	sub	sp, #20
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	785b      	ldrb	r3, [r3, #1]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d128      	bne.n	800b034 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	015a      	lsls	r2, r3, #5
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	4413      	add	r3, r2
 800afea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	0151      	lsls	r1, r2, #5
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	440a      	add	r2, r1
 800aff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800affc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b000:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	78db      	ldrb	r3, [r3, #3]
 800b006:	2b03      	cmp	r3, #3
 800b008:	d003      	beq.n	800b012 <USB_EPClearStall+0x4c>
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	78db      	ldrb	r3, [r3, #3]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d138      	bne.n	800b084 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	440a      	add	r2, r1
 800b028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b02c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	e027      	b.n	800b084 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	0151      	lsls	r1, r2, #5
 800b046:	68fa      	ldr	r2, [r7, #12]
 800b048:	440a      	add	r2, r1
 800b04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b04e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b052:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	78db      	ldrb	r3, [r3, #3]
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d003      	beq.n	800b064 <USB_EPClearStall+0x9e>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	78db      	ldrb	r3, [r3, #3]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d10f      	bne.n	800b084 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	0151      	lsls	r1, r2, #5
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	440a      	add	r2, r1
 800b07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b07e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b082:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b092:	b480      	push	{r7}
 800b094:	b085      	sub	sp, #20
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b0b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	78fb      	ldrb	r3, [r7, #3]
 800b0c0:	011b      	lsls	r3, r3, #4
 800b0c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0f8:	f023 0302 	bic.w	r3, r3, #2
 800b0fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b0fe:	2003      	movs	r0, #3
 800b100:	f7f8 f96a 	bl	80033d8 <HAL_Delay>

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}

0800b10e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b084      	sub	sp, #16
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b128:	f043 0302 	orr.w	r3, r3, #2
 800b12c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b12e:	2003      	movs	r0, #3
 800b130:	f7f8 f952 	bl	80033d8 <HAL_Delay>

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3710      	adds	r7, #16
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}

0800b13e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4013      	ands	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b156:	68fb      	ldr	r3, [r7, #12]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	4013      	ands	r3, r2
 800b186:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	0c1b      	lsrs	r3, r3, #16
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	b29b      	uxth	r3, r3
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b1dc:	78fb      	ldrb	r3, [r7, #3]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	f003 030f 	and.w	r3, r3, #15
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
 800b238:	01db      	lsls	r3, r3, #7
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	4313      	orrs	r3, r2
 800b240:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4013      	ands	r3, r2
 800b254:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b256:	68bb      	ldr	r3, [r7, #8]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	f003 0301 	and.w	r3, r3, #1
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b29a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b29e:	f023 0307 	bic.w	r3, r3, #7
 800b2a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
	...

0800b2c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	333c      	adds	r3, #60	; 0x3c
 800b2de:	3304      	adds	r3, #4
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	4a26      	ldr	r2, [pc, #152]	; (800b380 <USB_EP0_OutStart+0xb8>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d90a      	bls.n	800b302 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2fc:	d101      	bne.n	800b302 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	e037      	b.n	800b372 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b308:	461a      	mov	r2, r3
 800b30a:	2300      	movs	r3, #0
 800b30c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b330:	f043 0318 	orr.w	r3, r3, #24
 800b334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b344:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b348:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b34a:	7afb      	ldrb	r3, [r7, #11]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10f      	bne.n	800b370 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b356:	461a      	mov	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	697a      	ldr	r2, [r7, #20]
 800b366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b36a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b36e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	371c      	adds	r7, #28
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	4f54300a 	.word	0x4f54300a

0800b384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4a13      	ldr	r2, [pc, #76]	; (800b3e8 <USB_CoreReset+0x64>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d901      	bls.n	800b3a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e01b      	b.n	800b3da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	daf2      	bge.n	800b390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	f043 0201 	orr.w	r2, r3, #1
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4a09      	ldr	r2, [pc, #36]	; (800b3e8 <USB_CoreReset+0x64>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d901      	bls.n	800b3cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e006      	b.n	800b3da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d0f0      	beq.n	800b3ba <USB_CoreReset+0x36>

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	00030d40 	.word	0x00030d40

0800b3ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3fc:	f002 f8d6 	bl	800d5ac <malloc>
 800b400:	4603      	mov	r3, r0
 800b402:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d105      	bne.n	800b416 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b412:	2302      	movs	r3, #2
 800b414:	e066      	b.n	800b4e4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	7c1b      	ldrb	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d119      	bne.n	800b45a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b42a:	2202      	movs	r2, #2
 800b42c:	2181      	movs	r1, #129	; 0x81
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f001 ff43 	bl	800d2ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b43a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b43e:	2202      	movs	r2, #2
 800b440:	2101      	movs	r1, #1
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f001 ff39 	bl	800d2ba <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2210      	movs	r2, #16
 800b454:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b458:	e016      	b.n	800b488 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b45a:	2340      	movs	r3, #64	; 0x40
 800b45c:	2202      	movs	r2, #2
 800b45e:	2181      	movs	r1, #129	; 0x81
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f001 ff2a 	bl	800d2ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b46c:	2340      	movs	r3, #64	; 0x40
 800b46e:	2202      	movs	r2, #2
 800b470:	2101      	movs	r1, #1
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f001 ff21 	bl	800d2ba <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2210      	movs	r2, #16
 800b484:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b488:	2308      	movs	r3, #8
 800b48a:	2203      	movs	r2, #3
 800b48c:	2182      	movs	r1, #130	; 0x82
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 ff13 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	7c1b      	ldrb	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d109      	bne.n	800b4d2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 ffe4 	bl	800d498 <USBD_LL_PrepareReceive>
 800b4d0:	e007      	b.n	800b4e2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4d8:	2340      	movs	r3, #64	; 0x40
 800b4da:	2101      	movs	r1, #1
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 ffdb 	bl	800d498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4fc:	2181      	movs	r1, #129	; 0x81
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f001 ff01 	bl	800d306 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b50a:	2101      	movs	r1, #1
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 fefa 	bl	800d306 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b51a:	2182      	movs	r1, #130	; 0x82
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f001 fef2 	bl	800d306 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00e      	beq.n	800b55a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b54c:	4618      	mov	r0, r3
 800b54e:	f002 f835 	bl	800d5bc <free>
    pdev->pClassData = NULL;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b574:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b576:	2300      	movs	r3, #0
 800b578:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d03a      	beq.n	800b604 <USBD_CDC_Setup+0xa0>
 800b58e:	2b20      	cmp	r3, #32
 800b590:	f040 8097 	bne.w	800b6c2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	88db      	ldrh	r3, [r3, #6]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d029      	beq.n	800b5f0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	da11      	bge.n	800b5ca <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b5b2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5b4:	683a      	ldr	r2, [r7, #0]
 800b5b6:	88d2      	ldrh	r2, [r2, #6]
 800b5b8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5ba:	6939      	ldr	r1, [r7, #16]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	88db      	ldrh	r3, [r3, #6]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 fa6d 	bl	800caa2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b5c8:	e082      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	785a      	ldrb	r2, [r3, #1]
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	88db      	ldrh	r3, [r3, #6]
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5e0:	6939      	ldr	r1, [r7, #16]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	88db      	ldrh	r3, [r3, #6]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 fa86 	bl	800cafa <USBD_CtlPrepareRx>
    break;
 800b5ee:	e06f      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	7850      	ldrb	r0, [r2, #1]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	4798      	blx	r3
    break;
 800b602:	e065      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2b0b      	cmp	r3, #11
 800b60a:	d84f      	bhi.n	800b6ac <USBD_CDC_Setup+0x148>
 800b60c:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <USBD_CDC_Setup+0xb0>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b645 	.word	0x0800b645
 800b618:	0800b6bb 	.word	0x0800b6bb
 800b61c:	0800b6ad 	.word	0x0800b6ad
 800b620:	0800b6ad 	.word	0x0800b6ad
 800b624:	0800b6ad 	.word	0x0800b6ad
 800b628:	0800b6ad 	.word	0x0800b6ad
 800b62c:	0800b6ad 	.word	0x0800b6ad
 800b630:	0800b6ad 	.word	0x0800b6ad
 800b634:	0800b6ad 	.word	0x0800b6ad
 800b638:	0800b6ad 	.word	0x0800b6ad
 800b63c:	0800b66d 	.word	0x0800b66d
 800b640:	0800b695 	.word	0x0800b695
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d107      	bne.n	800b65e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b64e:	f107 030c 	add.w	r3, r7, #12
 800b652:	2202      	movs	r2, #2
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 fa23 	bl	800caa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b65c:	e030      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 f9ad 	bl	800c9c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800b666:	2303      	movs	r3, #3
 800b668:	75fb      	strb	r3, [r7, #23]
      break;
 800b66a:	e029      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b672:	2b03      	cmp	r3, #3
 800b674:	d107      	bne.n	800b686 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b676:	f107 030f 	add.w	r3, r7, #15
 800b67a:	2201      	movs	r2, #1
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 fa0f 	bl	800caa2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b684:	e01c      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f001 f999 	bl	800c9c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800b68e:	2303      	movs	r3, #3
 800b690:	75fb      	strb	r3, [r7, #23]
      break;
 800b692:	e015      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d00f      	beq.n	800b6be <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 f98d 	bl	800c9c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b6aa:	e008      	b.n	800b6be <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f001 f986 	bl	800c9c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6b8:	e002      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>
      break;
 800b6ba:	bf00      	nop
 800b6bc:	e008      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>
      break;
 800b6be:	bf00      	nop
    }
    break;
 800b6c0:	e006      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 f97b 	bl	800c9c0 <USBD_CtlError>
    ret = USBD_FAIL;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	75fb      	strb	r3, [r7, #23]
    break;
 800b6ce:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop

0800b6dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e049      	b.n	800b792 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b704:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b706:	78fa      	ldrb	r2, [r7, #3]
 800b708:	6879      	ldr	r1, [r7, #4]
 800b70a:	4613      	mov	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	440b      	add	r3, r1
 800b714:	3318      	adds	r3, #24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d029      	beq.n	800b770 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b71c:	78fa      	ldrb	r2, [r7, #3]
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	4613      	mov	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	440b      	add	r3, r1
 800b72a:	3318      	adds	r3, #24
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	78f9      	ldrb	r1, [r7, #3]
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	460b      	mov	r3, r1
 800b734:	00db      	lsls	r3, r3, #3
 800b736:	1a5b      	subs	r3, r3, r1
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4403      	add	r3, r0
 800b73c:	3344      	adds	r3, #68	; 0x44
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	fbb2 f1f3 	udiv	r1, r2, r3
 800b744:	fb03 f301 	mul.w	r3, r3, r1
 800b748:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d110      	bne.n	800b770 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b74e:	78fa      	ldrb	r2, [r7, #3]
 800b750:	6879      	ldr	r1, [r7, #4]
 800b752:	4613      	mov	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	440b      	add	r3, r1
 800b75c:	3318      	adds	r3, #24
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b762:	78f9      	ldrb	r1, [r7, #3]
 800b764:	2300      	movs	r3, #0
 800b766:	2200      	movs	r2, #0
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 fe74 	bl	800d456 <USBD_LL_Transmit>
 800b76e:	e00f      	b.n	800b790 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2200      	movs	r2, #0
 800b774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b78c:	78fa      	ldrb	r2, [r7, #3]
 800b78e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e015      	b.n	800b7e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 fe8a 	bl	800d4da <USBD_LL_GetRxDataSize>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d015      	beq.n	800b836 <USBD_CDC_EP0_RxReady+0x46>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b810:	2bff      	cmp	r3, #255	; 0xff
 800b812:	d010      	beq.n	800b836 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b822:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b82a:	b292      	uxth	r2, r2
 800b82c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	22ff      	movs	r2, #255	; 0xff
 800b832:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2243      	movs	r2, #67	; 0x43
 800b84c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b84e:	4b03      	ldr	r3, [pc, #12]	; (800b85c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	200000b0 	.word	0x200000b0

0800b860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2243      	movs	r2, #67	; 0x43
 800b86c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b86e:	4b03      	ldr	r3, [pc, #12]	; (800b87c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	2000006c 	.word	0x2000006c

0800b880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2243      	movs	r2, #67	; 0x43
 800b88c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b88e:	4b03      	ldr	r3, [pc, #12]	; (800b89c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	200000f4 	.word	0x200000f4

0800b8a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	220a      	movs	r2, #10
 800b8ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8ae:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	20000028 	.word	0x20000028

0800b8c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e004      	b.n	800b8de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b087      	sub	sp, #28
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	60b9      	str	r1, [r7, #8]
 800b8f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	371c      	adds	r7, #28
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b92c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b95e:	2303      	movs	r3, #3
 800b960:	e016      	b.n	800b990 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	7c1b      	ldrb	r3, [r3, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d109      	bne.n	800b97e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b970:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b974:	2101      	movs	r1, #1
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f001 fd8e 	bl	800d498 <USBD_LL_PrepareReceive>
 800b97c:	e007      	b.n	800b98e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b984:	2340      	movs	r3, #64	; 0x40
 800b986:	2101      	movs	r1, #1
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f001 fd85 	bl	800d498 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e025      	b.n	800b9fc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	79fa      	ldrb	r2, [r7, #7]
 800b9ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f001 fbfb 	bl	800d1ec <USBD_LL_Init>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d101      	bne.n	800ba1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e010      	b.n	800ba3e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2c:	f107 020e 	add.w	r2, r7, #14
 800ba30:	4610      	mov	r0, r2
 800ba32:	4798      	blx	r3
 800ba34:	4602      	mov	r2, r0
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f001 fc18 	bl	800d284 <USBD_LL_Start>
 800ba54:	4603      	mov	r3, r0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b083      	sub	sp, #12
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba80:	2303      	movs	r3, #3
 800ba82:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	78fa      	ldrb	r2, [r7, #3]
 800ba98:	4611      	mov	r1, r2
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	4798      	blx	r3
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	78fa      	ldrb	r2, [r7, #3]
 800bacc:	4611      	mov	r1, r2
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	4798      	blx	r3
  }

  return USBD_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 ff2c 	bl	800c94c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb02:	461a      	mov	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb10:	f003 031f 	and.w	r3, r3, #31
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d00e      	beq.n	800bb36 <USBD_LL_SetupStage+0x5a>
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d302      	bcc.n	800bb22 <USBD_LL_SetupStage+0x46>
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d014      	beq.n	800bb4a <USBD_LL_SetupStage+0x6e>
 800bb20:	e01d      	b.n	800bb5e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa18 	bl	800bf60 <USBD_StdDevReq>
 800bb30:	4603      	mov	r3, r0
 800bb32:	73fb      	strb	r3, [r7, #15]
      break;
 800bb34:	e020      	b.n	800bb78 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fa7c 	bl	800c03c <USBD_StdItfReq>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73fb      	strb	r3, [r7, #15]
      break;
 800bb48:	e016      	b.n	800bb78 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fab8 	bl	800c0c8 <USBD_StdEPReq>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5c:	e00c      	b.n	800bb78 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f001 fbe9 	bl	800d344 <USBD_LL_StallEP>
 800bb72:	4603      	mov	r3, r0
 800bb74:	73fb      	strb	r3, [r7, #15]
      break;
 800bb76:	bf00      	nop
  }

  return ret;
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3710      	adds	r7, #16
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b086      	sub	sp, #24
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	607a      	str	r2, [r7, #4]
 800bb8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb90:	7afb      	ldrb	r3, [r7, #11]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d137      	bne.n	800bc06 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d14a      	bne.n	800bc3e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	689a      	ldr	r2, [r3, #8]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d913      	bls.n	800bbdc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	1ad2      	subs	r2, r2, r3
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	68da      	ldr	r2, [r3, #12]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	bf28      	it	cs
 800bbce:	4613      	movcs	r3, r2
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	6879      	ldr	r1, [r7, #4]
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f000 ffad 	bl	800cb34 <USBD_CtlContinueRx>
 800bbda:	e030      	b.n	800bc3e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe2:	691b      	ldr	r3, [r3, #16]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00a      	beq.n	800bbfe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d105      	bne.n	800bbfe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 ffa9 	bl	800cb56 <USBD_CtlSendStatus>
 800bc04:	e01b      	b.n	800bc3e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d013      	beq.n	800bc3a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d10e      	bne.n	800bc3a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	7afa      	ldrb	r2, [r7, #11]
 800bc26:	4611      	mov	r1, r2
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	4798      	blx	r3
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bc36:	7dfb      	ldrb	r3, [r7, #23]
 800bc38:	e002      	b.n	800bc40 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e000      	b.n	800bc40 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	460b      	mov	r3, r1
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc56:	7afb      	ldrb	r3, [r7, #11]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d16a      	bne.n	800bd32 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3314      	adds	r3, #20
 800bc60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc68:	2b02      	cmp	r3, #2
 800bc6a:	d155      	bne.n	800bd18 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	689a      	ldr	r2, [r3, #8]
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d914      	bls.n	800bca2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	689a      	ldr	r2, [r3, #8]
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	1ad2      	subs	r2, r2, r3
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	6879      	ldr	r1, [r7, #4]
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 ff22 	bl	800cad8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc94:	2300      	movs	r3, #0
 800bc96:	2200      	movs	r2, #0
 800bc98:	2100      	movs	r1, #0
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f001 fbfc 	bl	800d498 <USBD_LL_PrepareReceive>
 800bca0:	e03a      	b.n	800bd18 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	68da      	ldr	r2, [r3, #12]
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d11c      	bne.n	800bce8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d316      	bcc.n	800bce8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d20f      	bcs.n	800bce8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcc8:	2200      	movs	r2, #0
 800bcca:	2100      	movs	r1, #0
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 ff03 	bl	800cad8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcda:	2300      	movs	r3, #0
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2100      	movs	r1, #0
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f001 fbd9 	bl	800d498 <USBD_LL_PrepareReceive>
 800bce6:	e017      	b.n	800bd18 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00a      	beq.n	800bd0a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d105      	bne.n	800bd0a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd0a:	2180      	movs	r1, #128	; 0x80
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f001 fb19 	bl	800d344 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 ff32 	bl	800cb7c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d123      	bne.n	800bd6a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f7ff fe9b 	bl	800ba5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd30:	e01b      	b.n	800bd6a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d013      	beq.n	800bd66 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d10e      	bne.n	800bd66 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	7afa      	ldrb	r2, [r7, #11]
 800bd52:	4611      	mov	r1, r2
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	4798      	blx	r3
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	e002      	b.n	800bd6c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e000      	b.n	800bd6c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3718      	adds	r7, #24
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d009      	beq.n	800bdb8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	6852      	ldr	r2, [r2, #4]
 800bdb0:	b2d2      	uxtb	r2, r2
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdb8:	2340      	movs	r3, #64	; 0x40
 800bdba:	2200      	movs	r2, #0
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 fa7b 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2240      	movs	r2, #64	; 0x40
 800bdd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdd4:	2340      	movs	r3, #64	; 0x40
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	2180      	movs	r1, #128	; 0x80
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f001 fa6d 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2240      	movs	r2, #64	; 0x40
 800bdea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
 800bdfe:	460b      	mov	r3, r1
 800be00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	78fa      	ldrb	r2, [r7, #3]
 800be06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2204      	movs	r2, #4
 800be2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4e:	2b04      	cmp	r3, #4
 800be50:	d105      	bne.n	800be5e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d10b      	bne.n	800be96 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d005      	beq.n	800be96 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3708      	adds	r7, #8
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr

0800beba <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800beba:	b480      	push	{r7}
 800bebc:	b083      	sub	sp, #12
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	460b      	mov	r3, r1
 800bec4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bec6:	2300      	movs	r3, #0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b082      	sub	sp, #8
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d009      	beq.n	800bf18 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	6852      	ldr	r2, [r2, #4]
 800bf10:	b2d2      	uxtb	r2, r2
 800bf12:	4611      	mov	r1, r2
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	4798      	blx	r3
  }

  return USBD_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b087      	sub	sp, #28
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	3301      	adds	r3, #1
 800bf38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf40:	8a3b      	ldrh	r3, [r7, #16]
 800bf42:	021b      	lsls	r3, r3, #8
 800bf44:	b21a      	sxth	r2, r3
 800bf46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	b21b      	sxth	r3, r3
 800bf4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf50:	89fb      	ldrh	r3, [r7, #14]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
	...

0800bf60 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf76:	2b20      	cmp	r3, #32
 800bf78:	d004      	beq.n	800bf84 <USBD_StdDevReq+0x24>
 800bf7a:	2b40      	cmp	r3, #64	; 0x40
 800bf7c:	d002      	beq.n	800bf84 <USBD_StdDevReq+0x24>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d00a      	beq.n	800bf98 <USBD_StdDevReq+0x38>
 800bf82:	e050      	b.n	800c026 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	4798      	blx	r3
 800bf92:	4603      	mov	r3, r0
 800bf94:	73fb      	strb	r3, [r7, #15]
    break;
 800bf96:	e04b      	b.n	800c030 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	785b      	ldrb	r3, [r3, #1]
 800bf9c:	2b09      	cmp	r3, #9
 800bf9e:	d83c      	bhi.n	800c01a <USBD_StdDevReq+0xba>
 800bfa0:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <USBD_StdDevReq+0x48>)
 800bfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa6:	bf00      	nop
 800bfa8:	0800bffd 	.word	0x0800bffd
 800bfac:	0800c011 	.word	0x0800c011
 800bfb0:	0800c01b 	.word	0x0800c01b
 800bfb4:	0800c007 	.word	0x0800c007
 800bfb8:	0800c01b 	.word	0x0800c01b
 800bfbc:	0800bfdb 	.word	0x0800bfdb
 800bfc0:	0800bfd1 	.word	0x0800bfd1
 800bfc4:	0800c01b 	.word	0x0800c01b
 800bfc8:	0800bff3 	.word	0x0800bff3
 800bfcc:	0800bfe5 	.word	0x0800bfe5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f9ce 	bl	800c374 <USBD_GetDescriptor>
      break;
 800bfd8:	e024      	b.n	800c024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fb33 	bl	800c648 <USBD_SetAddress>
      break;
 800bfe2:	e01f      	b.n	800c024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fb70 	bl	800c6cc <USBD_SetConfig>
 800bfec:	4603      	mov	r3, r0
 800bfee:	73fb      	strb	r3, [r7, #15]
      break;
 800bff0:	e018      	b.n	800c024 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bff2:	6839      	ldr	r1, [r7, #0]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fc0d 	bl	800c814 <USBD_GetConfig>
      break;
 800bffa:	e013      	b.n	800c024 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fc3c 	bl	800c87c <USBD_GetStatus>
      break;
 800c004:	e00e      	b.n	800c024 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c006:	6839      	ldr	r1, [r7, #0]
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fc6a 	bl	800c8e2 <USBD_SetFeature>
      break;
 800c00e:	e009      	b.n	800c024 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 fc79 	bl	800c90a <USBD_ClrFeature>
      break;
 800c018:	e004      	b.n	800c024 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fccf 	bl	800c9c0 <USBD_CtlError>
      break;
 800c022:	bf00      	nop
    }
    break;
 800c024:	e004      	b.n	800c030 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fcc9 	bl	800c9c0 <USBD_CtlError>
    break;
 800c02e:	bf00      	nop
  }

  return ret;
 800c030:	7bfb      	ldrb	r3, [r7, #15]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop

0800c03c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c052:	2b20      	cmp	r3, #32
 800c054:	d003      	beq.n	800c05e <USBD_StdItfReq+0x22>
 800c056:	2b40      	cmp	r3, #64	; 0x40
 800c058:	d001      	beq.n	800c05e <USBD_StdItfReq+0x22>
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d12a      	bne.n	800c0b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c064:	3b01      	subs	r3, #1
 800c066:	2b02      	cmp	r3, #2
 800c068:	d81d      	bhi.n	800c0a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	889b      	ldrh	r3, [r3, #4]
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	2b01      	cmp	r3, #1
 800c072:	d813      	bhi.n	800c09c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	4798      	blx	r3
 800c082:	4603      	mov	r3, r0
 800c084:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	88db      	ldrh	r3, [r3, #6]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d110      	bne.n	800c0b0 <USBD_StdItfReq+0x74>
 800c08e:	7bfb      	ldrb	r3, [r7, #15]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10d      	bne.n	800c0b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fd5e 	bl	800cb56 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c09a:	e009      	b.n	800c0b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fc8e 	bl	800c9c0 <USBD_CtlError>
      break;
 800c0a4:	e004      	b.n	800c0b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fc89 	bl	800c9c0 <USBD_CtlError>
      break;
 800c0ae:	e000      	b.n	800c0b2 <USBD_StdItfReq+0x76>
      break;
 800c0b0:	bf00      	nop
    }
    break;
 800c0b2:	e004      	b.n	800c0be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fc82 	bl	800c9c0 <USBD_CtlError>
    break;
 800c0bc:	bf00      	nop
  }

  return ret;
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	889b      	ldrh	r3, [r3, #4]
 800c0da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	d004      	beq.n	800c0f2 <USBD_StdEPReq+0x2a>
 800c0e8:	2b40      	cmp	r3, #64	; 0x40
 800c0ea:	d002      	beq.n	800c0f2 <USBD_StdEPReq+0x2a>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00a      	beq.n	800c106 <USBD_StdEPReq+0x3e>
 800c0f0:	e135      	b.n	800c35e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	4798      	blx	r3
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]
    break;
 800c104:	e130      	b.n	800c368 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	785b      	ldrb	r3, [r3, #1]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d03e      	beq.n	800c18c <USBD_StdEPReq+0xc4>
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d002      	beq.n	800c118 <USBD_StdEPReq+0x50>
 800c112:	2b00      	cmp	r3, #0
 800c114:	d077      	beq.n	800c206 <USBD_StdEPReq+0x13e>
 800c116:	e11c      	b.n	800c352 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d002      	beq.n	800c128 <USBD_StdEPReq+0x60>
 800c122:	2b03      	cmp	r3, #3
 800c124:	d015      	beq.n	800c152 <USBD_StdEPReq+0x8a>
 800c126:	e02b      	b.n	800c180 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <USBD_StdEPReq+0x80>
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b80      	cmp	r3, #128	; 0x80
 800c132:	d009      	beq.n	800c148 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 f903 	bl	800d344 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c13e:	2180      	movs	r1, #128	; 0x80
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 f8ff 	bl	800d344 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c146:	e020      	b.n	800c18a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fc38 	bl	800c9c0 <USBD_CtlError>
        break;
 800c150:	e01b      	b.n	800c18a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10e      	bne.n	800c178 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00b      	beq.n	800c178 <USBD_StdEPReq+0xb0>
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	2b80      	cmp	r3, #128	; 0x80
 800c164:	d008      	beq.n	800c178 <USBD_StdEPReq+0xb0>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	88db      	ldrh	r3, [r3, #6]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d104      	bne.n	800c178 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c16e:	7bbb      	ldrb	r3, [r7, #14]
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f001 f8e6 	bl	800d344 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fcec 	bl	800cb56 <USBD_CtlSendStatus>

        break;
 800c17e:	e004      	b.n	800c18a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c180:	6839      	ldr	r1, [r7, #0]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fc1c 	bl	800c9c0 <USBD_CtlError>
        break;
 800c188:	bf00      	nop
      }
      break;
 800c18a:	e0e7      	b.n	800c35c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c192:	2b02      	cmp	r3, #2
 800c194:	d002      	beq.n	800c19c <USBD_StdEPReq+0xd4>
 800c196:	2b03      	cmp	r3, #3
 800c198:	d015      	beq.n	800c1c6 <USBD_StdEPReq+0xfe>
 800c19a:	e02d      	b.n	800c1f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00c      	beq.n	800c1bc <USBD_StdEPReq+0xf4>
 800c1a2:	7bbb      	ldrb	r3, [r7, #14]
 800c1a4:	2b80      	cmp	r3, #128	; 0x80
 800c1a6:	d009      	beq.n	800c1bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f001 f8c9 	bl	800d344 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1b2:	2180      	movs	r1, #128	; 0x80
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f001 f8c5 	bl	800d344 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c1ba:	e023      	b.n	800c204 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fbfe 	bl	800c9c0 <USBD_CtlError>
        break;
 800c1c4:	e01e      	b.n	800c204 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	885b      	ldrh	r3, [r3, #2]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d119      	bne.n	800c202 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d004      	beq.n	800c1e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f001 f8d0 	bl	800d382 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fcb7 	bl	800cb56 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	4798      	blx	r3
        }
        break;
 800c1f6:	e004      	b.n	800c202 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fbe0 	bl	800c9c0 <USBD_CtlError>
        break;
 800c200:	e000      	b.n	800c204 <USBD_StdEPReq+0x13c>
        break;
 800c202:	bf00      	nop
      }
      break;
 800c204:	e0aa      	b.n	800c35c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d002      	beq.n	800c216 <USBD_StdEPReq+0x14e>
 800c210:	2b03      	cmp	r3, #3
 800c212:	d032      	beq.n	800c27a <USBD_StdEPReq+0x1b2>
 800c214:	e097      	b.n	800c346 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d007      	beq.n	800c22c <USBD_StdEPReq+0x164>
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	2b80      	cmp	r3, #128	; 0x80
 800c220:	d004      	beq.n	800c22c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fbcb 	bl	800c9c0 <USBD_CtlError>
          break;
 800c22a:	e091      	b.n	800c350 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c230:	2b00      	cmp	r3, #0
 800c232:	da0b      	bge.n	800c24c <USBD_StdEPReq+0x184>
 800c234:	7bbb      	ldrb	r3, [r7, #14]
 800c236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	3310      	adds	r3, #16
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	3304      	adds	r3, #4
 800c24a:	e00b      	b.n	800c264 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c252:	4613      	mov	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	3304      	adds	r3, #4
 800c264:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	2200      	movs	r2, #0
 800c26a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2202      	movs	r2, #2
 800c270:	4619      	mov	r1, r3
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fc15 	bl	800caa2 <USBD_CtlSendData>
        break;
 800c278:	e06a      	b.n	800c350 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c27a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	da11      	bge.n	800c2a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	f003 020f 	and.w	r2, r3, #15
 800c288:	6879      	ldr	r1, [r7, #4]
 800c28a:	4613      	mov	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	4413      	add	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	440b      	add	r3, r1
 800c294:	3324      	adds	r3, #36	; 0x24
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d117      	bne.n	800c2cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fb8e 	bl	800c9c0 <USBD_CtlError>
            break;
 800c2a4:	e054      	b.n	800c350 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	f003 020f 	and.w	r2, r3, #15
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	440b      	add	r3, r1
 800c2b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d104      	bne.n	800c2cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fb7b 	bl	800c9c0 <USBD_CtlError>
            break;
 800c2ca:	e041      	b.n	800c350 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	da0b      	bge.n	800c2ec <USBD_StdEPReq+0x224>
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2da:	4613      	mov	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	3310      	adds	r3, #16
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	e00b      	b.n	800c304 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c2ec:	7bbb      	ldrb	r3, [r7, #14]
 800c2ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4413      	add	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	4413      	add	r3, r2
 800c302:	3304      	adds	r3, #4
 800c304:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c306:	7bbb      	ldrb	r3, [r7, #14]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d002      	beq.n	800c312 <USBD_StdEPReq+0x24a>
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	2b80      	cmp	r3, #128	; 0x80
 800c310:	d103      	bne.n	800c31a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2200      	movs	r2, #0
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	e00e      	b.n	800c338 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f001 f84e 	bl	800d3c0 <USBD_LL_IsStallEP>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d003      	beq.n	800c332 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2201      	movs	r2, #1
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	e002      	b.n	800c338 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2202      	movs	r2, #2
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fbaf 	bl	800caa2 <USBD_CtlSendData>
          break;
 800c344:	e004      	b.n	800c350 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fb39 	bl	800c9c0 <USBD_CtlError>
        break;
 800c34e:	bf00      	nop
      }
      break;
 800c350:	e004      	b.n	800c35c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fb33 	bl	800c9c0 <USBD_CtlError>
      break;
 800c35a:	bf00      	nop
    }
    break;
 800c35c:	e004      	b.n	800c368 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c35e:	6839      	ldr	r1, [r7, #0]
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fb2d 	bl	800c9c0 <USBD_CtlError>
    break;
 800c366:	bf00      	nop
  }

  return ret;
 800c368:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
	...

0800c374 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	885b      	ldrh	r3, [r3, #2]
 800c38e:	0a1b      	lsrs	r3, r3, #8
 800c390:	b29b      	uxth	r3, r3
 800c392:	3b01      	subs	r3, #1
 800c394:	2b06      	cmp	r3, #6
 800c396:	f200 8128 	bhi.w	800c5ea <USBD_GetDescriptor+0x276>
 800c39a:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <USBD_GetDescriptor+0x2c>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3bd 	.word	0x0800c3bd
 800c3a4:	0800c3d5 	.word	0x0800c3d5
 800c3a8:	0800c415 	.word	0x0800c415
 800c3ac:	0800c5eb 	.word	0x0800c5eb
 800c3b0:	0800c5eb 	.word	0x0800c5eb
 800c3b4:	0800c58b 	.word	0x0800c58b
 800c3b8:	0800c5b7 	.word	0x0800c5b7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
    break;
 800c3d2:	e112      	b.n	800c5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	7c1b      	ldrb	r3, [r3, #16]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10d      	bne.n	800c3f8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3e4:	f107 0208 	add.w	r2, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c3f6:	e100      	b.n	800c5fa <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c400:	f107 0208 	add.w	r2, r7, #8
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
 800c408:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3301      	adds	r3, #1
 800c40e:	2202      	movs	r2, #2
 800c410:	701a      	strb	r2, [r3, #0]
    break;
 800c412:	e0f2      	b.n	800c5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	885b      	ldrh	r3, [r3, #2]
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	2b05      	cmp	r3, #5
 800c41c:	f200 80ac 	bhi.w	800c578 <USBD_GetDescriptor+0x204>
 800c420:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <USBD_GetDescriptor+0xb4>)
 800c422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c426:	bf00      	nop
 800c428:	0800c441 	.word	0x0800c441
 800c42c:	0800c475 	.word	0x0800c475
 800c430:	0800c4a9 	.word	0x0800c4a9
 800c434:	0800c4dd 	.word	0x0800c4dd
 800c438:	0800c511 	.word	0x0800c511
 800c43c:	0800c545 	.word	0x0800c545
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	4610      	mov	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c462:	e091      	b.n	800c588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 faaa 	bl	800c9c0 <USBD_CtlError>
        err++;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	3301      	adds	r3, #1
 800c470:	72fb      	strb	r3, [r7, #11]
      break;
 800c472:	e089      	b.n	800c588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c496:	e077      	b.n	800c588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fa90 	bl	800c9c0 <USBD_CtlError>
        err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
      break;
 800c4a6:	e06f      	b.n	800c588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4ca:	e05d      	b.n	800c588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa76 	bl	800c9c0 <USBD_CtlError>
        err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
      break;
 800c4da:	e055      	b.n	800c588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e2:	691b      	ldr	r3, [r3, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00b      	beq.n	800c500 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	7c12      	ldrb	r2, [r2, #16]
 800c4f4:	f107 0108 	add.w	r1, r7, #8
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4798      	blx	r3
 800c4fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4fe:	e043      	b.n	800c588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fa5c 	bl	800c9c0 <USBD_CtlError>
        err++;
 800c508:	7afb      	ldrb	r3, [r7, #11]
 800c50a:	3301      	adds	r3, #1
 800c50c:	72fb      	strb	r3, [r7, #11]
      break;
 800c50e:	e03b      	b.n	800c588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	7c12      	ldrb	r2, [r2, #16]
 800c528:	f107 0108 	add.w	r1, r7, #8
 800c52c:	4610      	mov	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c532:	e029      	b.n	800c588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fa42 	bl	800c9c0 <USBD_CtlError>
        err++;
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	3301      	adds	r3, #1
 800c540:	72fb      	strb	r3, [r7, #11]
      break;
 800c542:	e021      	b.n	800c588 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c54a:	699b      	ldr	r3, [r3, #24]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00b      	beq.n	800c568 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	7c12      	ldrb	r2, [r2, #16]
 800c55c:	f107 0108 	add.w	r1, r7, #8
 800c560:	4610      	mov	r0, r2
 800c562:	4798      	blx	r3
 800c564:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c566:	e00f      	b.n	800c588 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fa28 	bl	800c9c0 <USBD_CtlError>
        err++;
 800c570:	7afb      	ldrb	r3, [r7, #11]
 800c572:	3301      	adds	r3, #1
 800c574:	72fb      	strb	r3, [r7, #11]
      break;
 800c576:	e007      	b.n	800c588 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa20 	bl	800c9c0 <USBD_CtlError>
      err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c586:	bf00      	nop
    }
    break;
 800c588:	e037      	b.n	800c5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	7c1b      	ldrb	r3, [r3, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c59a:	f107 0208 	add.w	r2, r7, #8
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4798      	blx	r3
 800c5a2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c5a4:	e029      	b.n	800c5fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fa09 	bl	800c9c0 <USBD_CtlError>
      err++;
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	72fb      	strb	r3, [r7, #11]
    break;
 800c5b4:	e021      	b.n	800c5fa <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7c1b      	ldrb	r3, [r3, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10d      	bne.n	800c5da <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c6:	f107 0208 	add.w	r2, r7, #8
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	4798      	blx	r3
 800c5ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c5d8:	e00f      	b.n	800c5fa <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c5da:	6839      	ldr	r1, [r7, #0]
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f000 f9ef 	bl	800c9c0 <USBD_CtlError>
      err++;
 800c5e2:	7afb      	ldrb	r3, [r7, #11]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	72fb      	strb	r3, [r7, #11]
    break;
 800c5e8:	e007      	b.n	800c5fa <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f9e7 	bl	800c9c0 <USBD_CtlError>
    err++;
 800c5f2:	7afb      	ldrb	r3, [r7, #11]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	72fb      	strb	r3, [r7, #11]
    break;
 800c5f8:	bf00      	nop
  }

  if (err != 0U)
 800c5fa:	7afb      	ldrb	r3, [r7, #11]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11e      	bne.n	800c63e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	88db      	ldrh	r3, [r3, #6]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d016      	beq.n	800c636 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c608:	893b      	ldrh	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00e      	beq.n	800c62c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	88da      	ldrh	r2, [r3, #6]
 800c612:	893b      	ldrh	r3, [r7, #8]
 800c614:	4293      	cmp	r3, r2
 800c616:	bf28      	it	cs
 800c618:	4613      	movcs	r3, r2
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c61e:	893b      	ldrh	r3, [r7, #8]
 800c620:	461a      	mov	r2, r3
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fa3c 	bl	800caa2 <USBD_CtlSendData>
 800c62a:	e009      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c62c:	6839      	ldr	r1, [r7, #0]
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 f9c6 	bl	800c9c0 <USBD_CtlError>
 800c634:	e004      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fa8d 	bl	800cb56 <USBD_CtlSendStatus>
 800c63c:	e000      	b.n	800c640 <USBD_GetDescriptor+0x2cc>
    return;
 800c63e:	bf00      	nop
    }
  }
}
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop

0800c648 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d130      	bne.n	800c6bc <USBD_SetAddress+0x74>
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	88db      	ldrh	r3, [r3, #6]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d12c      	bne.n	800c6bc <USBD_SetAddress+0x74>
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	885b      	ldrh	r3, [r3, #2]
 800c666:	2b7f      	cmp	r3, #127	; 0x7f
 800c668:	d828      	bhi.n	800c6bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	885b      	ldrh	r3, [r3, #2]
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c674:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d104      	bne.n	800c68a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f99c 	bl	800c9c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c688:	e01c      	b.n	800c6c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7bfa      	ldrb	r2, [r7, #15]
 800c68e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c692:	7bfb      	ldrb	r3, [r7, #15]
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 febe 	bl	800d418 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fa5a 	bl	800cb56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d004      	beq.n	800c6b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b0:	e008      	b.n	800c6c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ba:	e003      	b.n	800c6c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6bc:	6839      	ldr	r1, [r7, #0]
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f97e 	bl	800c9c0 <USBD_CtlError>
  }
}
 800c6c4:	bf00      	nop
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	885b      	ldrh	r3, [r3, #2]
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	4b4b      	ldr	r3, [pc, #300]	; (800c810 <USBD_SetConfig+0x144>)
 800c6e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6e4:	4b4a      	ldr	r3, [pc, #296]	; (800c810 <USBD_SetConfig+0x144>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d905      	bls.n	800c6f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6ec:	6839      	ldr	r1, [r7, #0]
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f966 	bl	800c9c0 <USBD_CtlError>
    return USBD_FAIL;
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	e087      	b.n	800c808 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d002      	beq.n	800c708 <USBD_SetConfig+0x3c>
 800c702:	2b03      	cmp	r3, #3
 800c704:	d025      	beq.n	800c752 <USBD_SetConfig+0x86>
 800c706:	e071      	b.n	800c7ec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c708:	4b41      	ldr	r3, [pc, #260]	; (800c810 <USBD_SetConfig+0x144>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d01c      	beq.n	800c74a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c710:	4b3f      	ldr	r3, [pc, #252]	; (800c810 <USBD_SetConfig+0x144>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	461a      	mov	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c71a:	4b3d      	ldr	r3, [pc, #244]	; (800c810 <USBD_SetConfig+0x144>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff f9a7 	bl	800ba74 <USBD_SetClassConfig>
 800c726:	4603      	mov	r3, r0
 800c728:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f944 	bl	800c9c0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c738:	e065      	b.n	800c806 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fa0b 	bl	800cb56 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2203      	movs	r2, #3
 800c744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c748:	e05d      	b.n	800c806 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fa03 	bl	800cb56 <USBD_CtlSendStatus>
    break;
 800c750:	e059      	b.n	800c806 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c752:	4b2f      	ldr	r3, [pc, #188]	; (800c810 <USBD_SetConfig+0x144>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d112      	bne.n	800c780 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2202      	movs	r2, #2
 800c75e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c762:	4b2b      	ldr	r3, [pc, #172]	; (800c810 <USBD_SetConfig+0x144>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	461a      	mov	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c76c:	4b28      	ldr	r3, [pc, #160]	; (800c810 <USBD_SetConfig+0x144>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7ff f99a 	bl	800baac <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 f9ec 	bl	800cb56 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c77e:	e042      	b.n	800c806 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c780:	4b23      	ldr	r3, [pc, #140]	; (800c810 <USBD_SetConfig+0x144>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	461a      	mov	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d02a      	beq.n	800c7e4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff f988 	bl	800baac <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c79c:	4b1c      	ldr	r3, [pc, #112]	; (800c810 <USBD_SetConfig+0x144>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7a6:	4b1a      	ldr	r3, [pc, #104]	; (800c810 <USBD_SetConfig+0x144>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff f961 	bl	800ba74 <USBD_SetClassConfig>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00f      	beq.n	800c7dc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f8fe 	bl	800c9c0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7ff f96d 	bl	800baac <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2202      	movs	r2, #2
 800c7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c7da:	e014      	b.n	800c806 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 f9ba 	bl	800cb56 <USBD_CtlSendStatus>
    break;
 800c7e2:	e010      	b.n	800c806 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f9b6 	bl	800cb56 <USBD_CtlSendStatus>
    break;
 800c7ea:	e00c      	b.n	800c806 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f8e6 	bl	800c9c0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7f4:	4b06      	ldr	r3, [pc, #24]	; (800c810 <USBD_SetConfig+0x144>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff f956 	bl	800baac <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c800:	2303      	movs	r3, #3
 800c802:	73fb      	strb	r3, [r7, #15]
    break;
 800c804:	bf00      	nop
  }

  return ret;
 800c806:	7bfb      	ldrb	r3, [r7, #15]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	20000241 	.word	0x20000241

0800c814 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	88db      	ldrh	r3, [r3, #6]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d004      	beq.n	800c830 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f8c9 	bl	800c9c0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c82e:	e021      	b.n	800c874 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c836:	2b01      	cmp	r3, #1
 800c838:	db17      	blt.n	800c86a <USBD_GetConfig+0x56>
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	dd02      	ble.n	800c844 <USBD_GetConfig+0x30>
 800c83e:	2b03      	cmp	r3, #3
 800c840:	d00b      	beq.n	800c85a <USBD_GetConfig+0x46>
 800c842:	e012      	b.n	800c86a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3308      	adds	r3, #8
 800c84e:	2201      	movs	r2, #1
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f925 	bl	800caa2 <USBD_CtlSendData>
      break;
 800c858:	e00c      	b.n	800c874 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3304      	adds	r3, #4
 800c85e:	2201      	movs	r2, #1
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f91d 	bl	800caa2 <USBD_CtlSendData>
      break;
 800c868:	e004      	b.n	800c874 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f8a7 	bl	800c9c0 <USBD_CtlError>
      break;
 800c872:	bf00      	nop
}
 800c874:	bf00      	nop
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c88c:	3b01      	subs	r3, #1
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d81e      	bhi.n	800c8d0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	88db      	ldrh	r3, [r3, #6]
 800c896:	2b02      	cmp	r3, #2
 800c898:	d004      	beq.n	800c8a4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c89a:	6839      	ldr	r1, [r7, #0]
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 f88f 	bl	800c9c0 <USBD_CtlError>
      break;
 800c8a2:	e01a      	b.n	800c8da <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d005      	beq.n	800c8c0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f043 0202 	orr.w	r2, r3, #2
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	330c      	adds	r3, #12
 800c8c4:	2202      	movs	r2, #2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 f8ea 	bl	800caa2 <USBD_CtlSendData>
    break;
 800c8ce:	e004      	b.n	800c8da <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f874 	bl	800c9c0 <USBD_CtlError>
    break;
 800c8d8:	bf00      	nop
  }
}
 800c8da:	bf00      	nop
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	885b      	ldrh	r3, [r3, #2]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d106      	bne.n	800c902 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f92a 	bl	800cb56 <USBD_CtlSendStatus>
  }
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c91a:	3b01      	subs	r3, #1
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d80b      	bhi.n	800c938 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	885b      	ldrh	r3, [r3, #2]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d10c      	bne.n	800c942 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f910 	bl	800cb56 <USBD_CtlSendStatus>
      }
      break;
 800c936:	e004      	b.n	800c942 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f840 	bl	800c9c0 <USBD_CtlError>
      break;
 800c940:	e000      	b.n	800c944 <USBD_ClrFeature+0x3a>
      break;
 800c942:	bf00      	nop
  }
}
 800c944:	bf00      	nop
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	781a      	ldrb	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	781a      	ldrb	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7ff fad3 	bl	800bf22 <SWAPBYTE>
 800c97c:	4603      	mov	r3, r0
 800c97e:	461a      	mov	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	3301      	adds	r3, #1
 800c988:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3301      	adds	r3, #1
 800c98e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff fac6 	bl	800bf22 <SWAPBYTE>
 800c996:	4603      	mov	r3, r0
 800c998:	461a      	mov	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff fab9 	bl	800bf22 <SWAPBYTE>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	80da      	strh	r2, [r3, #6]
}
 800c9b8:	bf00      	nop
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ca:	2180      	movs	r1, #128	; 0x80
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fcb9 	bl	800d344 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 fcb5 	bl	800d344 <USBD_LL_StallEP>
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b086      	sub	sp, #24
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	60f8      	str	r0, [r7, #12]
 800c9ea:	60b9      	str	r1, [r7, #8]
 800c9ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d036      	beq.n	800ca66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9fc:	6938      	ldr	r0, [r7, #16]
 800c9fe:	f000 f836 	bl	800ca6e <USBD_GetLen>
 800ca02:	4603      	mov	r3, r0
 800ca04:	3301      	adds	r3, #1
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	005b      	lsls	r3, r3, #1
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	4413      	add	r3, r2
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	7812      	ldrb	r2, [r2, #0]
 800ca1a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca1c:	7dfb      	ldrb	r3, [r7, #23]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca22:	7dfb      	ldrb	r3, [r7, #23]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	4413      	add	r3, r2
 800ca28:	2203      	movs	r2, #3
 800ca2a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca32:	e013      	b.n	800ca5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	4413      	add	r3, r2
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	7812      	ldrb	r2, [r2, #0]
 800ca3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	3301      	adds	r3, #1
 800ca44:	613b      	str	r3, [r7, #16]
    idx++;
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	4413      	add	r3, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca56:	7dfb      	ldrb	r3, [r7, #23]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1e7      	bne.n	800ca34 <USBD_GetString+0x52>
 800ca64:	e000      	b.n	800ca68 <USBD_GetString+0x86>
    return;
 800ca66:	bf00      	nop
  }
}
 800ca68:	3718      	adds	r7, #24
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b085      	sub	sp, #20
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca7e:	e005      	b.n	800ca8c <USBD_GetLen+0x1e>
  {
    len++;
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	3301      	adds	r3, #1
 800ca84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1f5      	bne.n	800ca80 <USBD_GetLen+0x12>
  }

  return len;
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3714      	adds	r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2202      	movs	r2, #2
 800cab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	2100      	movs	r1, #0
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f000 fcc4 	bl	800d456 <USBD_LL_Transmit>

  return USBD_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	2100      	movs	r1, #0
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f000 fcb3 	bl	800d456 <USBD_LL_Transmit>

  return USBD_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cafa:	b580      	push	{r7, lr}
 800cafc:	b084      	sub	sp, #16
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	60f8      	str	r0, [r7, #12]
 800cb02:	60b9      	str	r1, [r7, #8]
 800cb04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2203      	movs	r2, #3
 800cb0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	2100      	movs	r1, #0
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f000 fcb7 	bl	800d498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	2100      	movs	r1, #0
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 fca6 	bl	800d498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b082      	sub	sp, #8
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2204      	movs	r2, #4
 800cb62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb66:	2300      	movs	r3, #0
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fc72 	bl	800d456 <USBD_LL_Transmit>

  return USBD_OK;
 800cb72:	2300      	movs	r3, #0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2205      	movs	r2, #5
 800cb88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2100      	movs	r1, #0
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fc80 	bl	800d498 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
	...

0800cba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4912      	ldr	r1, [pc, #72]	; (800cbf4 <MX_USB_DEVICE_Init+0x50>)
 800cbac:	4812      	ldr	r0, [pc, #72]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbae:	f7fe fef3 	bl	800b998 <USBD_Init>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbb8:	f7f5 fb38 	bl	800222c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbbc:	490f      	ldr	r1, [pc, #60]	; (800cbfc <MX_USB_DEVICE_Init+0x58>)
 800cbbe:	480e      	ldr	r0, [pc, #56]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbc0:	f7fe ff20 	bl	800ba04 <USBD_RegisterClass>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbca:	f7f5 fb2f 	bl	800222c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbce:	490c      	ldr	r1, [pc, #48]	; (800cc00 <MX_USB_DEVICE_Init+0x5c>)
 800cbd0:	4809      	ldr	r0, [pc, #36]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbd2:	f7fe fe75 	bl	800b8c0 <USBD_CDC_RegisterInterface>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbdc:	f7f5 fb26 	bl	800222c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbe0:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <MX_USB_DEVICE_Init+0x54>)
 800cbe2:	f7fe ff30 	bl	800ba46 <USBD_Start>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbec:	f7f5 fb1e 	bl	800222c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbf0:	bf00      	nop
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	2000014c 	.word	0x2000014c
 800cbf8:	20002088 	.word	0x20002088
 800cbfc:	20000034 	.word	0x20000034
 800cc00:	20000138 	.word	0x20000138

0800cc04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc08:	2200      	movs	r2, #0
 800cc0a:	4905      	ldr	r1, [pc, #20]	; (800cc20 <CDC_Init_FS+0x1c>)
 800cc0c:	4805      	ldr	r0, [pc, #20]	; (800cc24 <CDC_Init_FS+0x20>)
 800cc0e:	f7fe fe6c 	bl	800b8ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc12:	4905      	ldr	r1, [pc, #20]	; (800cc28 <CDC_Init_FS+0x24>)
 800cc14:	4803      	ldr	r0, [pc, #12]	; (800cc24 <CDC_Init_FS+0x20>)
 800cc16:	f7fe fe81 	bl	800b91c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	20002b58 	.word	0x20002b58
 800cc24:	20002088 	.word	0x20002088
 800cc28:	20002358 	.word	0x20002358

0800cc2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc4c:	79fb      	ldrb	r3, [r7, #7]
 800cc4e:	2b23      	cmp	r3, #35	; 0x23
 800cc50:	d84a      	bhi.n	800cce8 <CDC_Control_FS+0xac>
 800cc52:	a201      	add	r2, pc, #4	; (adr r2, 800cc58 <CDC_Control_FS+0x1c>)
 800cc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc58:	0800cce9 	.word	0x0800cce9
 800cc5c:	0800cce9 	.word	0x0800cce9
 800cc60:	0800cce9 	.word	0x0800cce9
 800cc64:	0800cce9 	.word	0x0800cce9
 800cc68:	0800cce9 	.word	0x0800cce9
 800cc6c:	0800cce9 	.word	0x0800cce9
 800cc70:	0800cce9 	.word	0x0800cce9
 800cc74:	0800cce9 	.word	0x0800cce9
 800cc78:	0800cce9 	.word	0x0800cce9
 800cc7c:	0800cce9 	.word	0x0800cce9
 800cc80:	0800cce9 	.word	0x0800cce9
 800cc84:	0800cce9 	.word	0x0800cce9
 800cc88:	0800cce9 	.word	0x0800cce9
 800cc8c:	0800cce9 	.word	0x0800cce9
 800cc90:	0800cce9 	.word	0x0800cce9
 800cc94:	0800cce9 	.word	0x0800cce9
 800cc98:	0800cce9 	.word	0x0800cce9
 800cc9c:	0800cce9 	.word	0x0800cce9
 800cca0:	0800cce9 	.word	0x0800cce9
 800cca4:	0800cce9 	.word	0x0800cce9
 800cca8:	0800cce9 	.word	0x0800cce9
 800ccac:	0800cce9 	.word	0x0800cce9
 800ccb0:	0800cce9 	.word	0x0800cce9
 800ccb4:	0800cce9 	.word	0x0800cce9
 800ccb8:	0800cce9 	.word	0x0800cce9
 800ccbc:	0800cce9 	.word	0x0800cce9
 800ccc0:	0800cce9 	.word	0x0800cce9
 800ccc4:	0800cce9 	.word	0x0800cce9
 800ccc8:	0800cce9 	.word	0x0800cce9
 800cccc:	0800cce9 	.word	0x0800cce9
 800ccd0:	0800cce9 	.word	0x0800cce9
 800ccd4:	0800cce9 	.word	0x0800cce9
 800ccd8:	0800cce9 	.word	0x0800cce9
 800ccdc:	0800cce9 	.word	0x0800cce9
 800cce0:	0800cce9 	.word	0x0800cce9
 800cce4:	0800cce9 	.word	0x0800cce9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cce8:	bf00      	nop
  }

  return (USBD_OK);
 800ccea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd02:	6879      	ldr	r1, [r7, #4]
 800cd04:	4805      	ldr	r0, [pc, #20]	; (800cd1c <CDC_Receive_FS+0x24>)
 800cd06:	f7fe fe09 	bl	800b91c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd0a:	4804      	ldr	r0, [pc, #16]	; (800cd1c <CDC_Receive_FS+0x24>)
 800cd0c:	f7fe fe1a 	bl	800b944 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	20002088 	.word	0x20002088

0800cd20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	4613      	mov	r3, r2
 800cd2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	371c      	adds	r7, #28
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
	...

0800cd44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	6039      	str	r1, [r7, #0]
 800cd4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2212      	movs	r2, #18
 800cd54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd56:	4b03      	ldr	r3, [pc, #12]	; (800cd64 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	20000168 	.word	0x20000168

0800cd68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	4603      	mov	r3, r0
 800cd70:	6039      	str	r1, [r7, #0]
 800cd72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2204      	movs	r2, #4
 800cd78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd7a:	4b03      	ldr	r3, [pc, #12]	; (800cd88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr
 800cd88:	2000017c 	.word	0x2000017c

0800cd8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	6039      	str	r1, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd98:	79fb      	ldrb	r3, [r7, #7]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d105      	bne.n	800cdaa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	4907      	ldr	r1, [pc, #28]	; (800cdc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cda2:	4808      	ldr	r0, [pc, #32]	; (800cdc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cda4:	f7ff fe1d 	bl	800c9e2 <USBD_GetString>
 800cda8:	e004      	b.n	800cdb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	4904      	ldr	r1, [pc, #16]	; (800cdc0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdae:	4805      	ldr	r0, [pc, #20]	; (800cdc4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdb0:	f7ff fe17 	bl	800c9e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdb4:	4b02      	ldr	r3, [pc, #8]	; (800cdc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	20003358 	.word	0x20003358
 800cdc4:	0800f544 	.word	0x0800f544

0800cdc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4603      	mov	r3, r0
 800cdd0:	6039      	str	r1, [r7, #0]
 800cdd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	4904      	ldr	r1, [pc, #16]	; (800cde8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cdd8:	4804      	ldr	r0, [pc, #16]	; (800cdec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cdda:	f7ff fe02 	bl	800c9e2 <USBD_GetString>
  return USBD_StrDesc;
 800cdde:	4b02      	ldr	r3, [pc, #8]	; (800cde8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	20003358 	.word	0x20003358
 800cdec:	0800f55c 	.word	0x0800f55c

0800cdf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	6039      	str	r1, [r7, #0]
 800cdfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	221a      	movs	r2, #26
 800ce00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce02:	f000 f843 	bl	800ce8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce06:	4b02      	ldr	r3, [pc, #8]	; (800ce10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20000180 	.word	0x20000180

0800ce14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	6039      	str	r1, [r7, #0]
 800ce1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d105      	bne.n	800ce32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce26:	683a      	ldr	r2, [r7, #0]
 800ce28:	4907      	ldr	r1, [pc, #28]	; (800ce48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce2a:	4808      	ldr	r0, [pc, #32]	; (800ce4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce2c:	f7ff fdd9 	bl	800c9e2 <USBD_GetString>
 800ce30:	e004      	b.n	800ce3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	4904      	ldr	r1, [pc, #16]	; (800ce48 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce36:	4805      	ldr	r0, [pc, #20]	; (800ce4c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce38:	f7ff fdd3 	bl	800c9e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce3c:	4b02      	ldr	r3, [pc, #8]	; (800ce48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	20003358 	.word	0x20003358
 800ce4c:	0800f570 	.word	0x0800f570

0800ce50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	4603      	mov	r3, r0
 800ce58:	6039      	str	r1, [r7, #0]
 800ce5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce5c:	79fb      	ldrb	r3, [r7, #7]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d105      	bne.n	800ce6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4907      	ldr	r1, [pc, #28]	; (800ce84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce66:	4808      	ldr	r0, [pc, #32]	; (800ce88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce68:	f7ff fdbb 	bl	800c9e2 <USBD_GetString>
 800ce6c:	e004      	b.n	800ce78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce6e:	683a      	ldr	r2, [r7, #0]
 800ce70:	4904      	ldr	r1, [pc, #16]	; (800ce84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce72:	4805      	ldr	r0, [pc, #20]	; (800ce88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce74:	f7ff fdb5 	bl	800c9e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce78:	4b02      	ldr	r3, [pc, #8]	; (800ce84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	20003358 	.word	0x20003358
 800ce88:	0800f57c 	.word	0x0800f57c

0800ce8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce92:	4b0f      	ldr	r3, [pc, #60]	; (800ced0 <Get_SerialNum+0x44>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce98:	4b0e      	ldr	r3, [pc, #56]	; (800ced4 <Get_SerialNum+0x48>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce9e:	4b0e      	ldr	r3, [pc, #56]	; (800ced8 <Get_SerialNum+0x4c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4413      	add	r3, r2
 800ceaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d009      	beq.n	800cec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ceb2:	2208      	movs	r2, #8
 800ceb4:	4909      	ldr	r1, [pc, #36]	; (800cedc <Get_SerialNum+0x50>)
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f000 f814 	bl	800cee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cebc:	2204      	movs	r2, #4
 800cebe:	4908      	ldr	r1, [pc, #32]	; (800cee0 <Get_SerialNum+0x54>)
 800cec0:	68b8      	ldr	r0, [r7, #8]
 800cec2:	f000 f80f 	bl	800cee4 <IntToUnicode>
  }
}
 800cec6:	bf00      	nop
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	1fff7a10 	.word	0x1fff7a10
 800ced4:	1fff7a14 	.word	0x1fff7a14
 800ced8:	1fff7a18 	.word	0x1fff7a18
 800cedc:	20000182 	.word	0x20000182
 800cee0:	20000192 	.word	0x20000192

0800cee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	4613      	mov	r3, r2
 800cef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cef6:	2300      	movs	r3, #0
 800cef8:	75fb      	strb	r3, [r7, #23]
 800cefa:	e027      	b.n	800cf4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	0f1b      	lsrs	r3, r3, #28
 800cf00:	2b09      	cmp	r3, #9
 800cf02:	d80b      	bhi.n	800cf1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	0f1b      	lsrs	r3, r3, #28
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	005b      	lsls	r3, r3, #1
 800cf0e:	4619      	mov	r1, r3
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	440b      	add	r3, r1
 800cf14:	3230      	adds	r2, #48	; 0x30
 800cf16:	b2d2      	uxtb	r2, r2
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	e00a      	b.n	800cf32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	0f1b      	lsrs	r3, r3, #28
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	7dfb      	ldrb	r3, [r7, #23]
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	4619      	mov	r1, r3
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	440b      	add	r3, r1
 800cf2c:	3237      	adds	r2, #55	; 0x37
 800cf2e:	b2d2      	uxtb	r2, r2
 800cf30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	011b      	lsls	r3, r3, #4
 800cf36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf38:	7dfb      	ldrb	r3, [r7, #23]
 800cf3a:	005b      	lsls	r3, r3, #1
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	4413      	add	r3, r2
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	75fb      	strb	r3, [r7, #23]
 800cf4c:	7dfa      	ldrb	r2, [r7, #23]
 800cf4e:	79fb      	ldrb	r3, [r7, #7]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d3d3      	bcc.n	800cefc <IntToUnicode+0x18>
  }
}
 800cf54:	bf00      	nop
 800cf56:	371c      	adds	r7, #28
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08a      	sub	sp, #40	; 0x28
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf68:	f107 0314 	add.w	r3, r7, #20
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	605a      	str	r2, [r3, #4]
 800cf72:	609a      	str	r2, [r3, #8]
 800cf74:	60da      	str	r2, [r3, #12]
 800cf76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf80:	d13a      	bne.n	800cff8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf82:	2300      	movs	r3, #0
 800cf84:	613b      	str	r3, [r7, #16]
 800cf86:	4b1e      	ldr	r3, [pc, #120]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8a:	4a1d      	ldr	r2, [pc, #116]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cf8c:	f043 0301 	orr.w	r3, r3, #1
 800cf90:	6313      	str	r3, [r2, #48]	; 0x30
 800cf92:	4b1b      	ldr	r3, [pc, #108]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	613b      	str	r3, [r7, #16]
 800cf9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cfa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cfac:	2303      	movs	r3, #3
 800cfae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cfb0:	230a      	movs	r3, #10
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cfb4:	f107 0314 	add.w	r3, r7, #20
 800cfb8:	4619      	mov	r1, r3
 800cfba:	4812      	ldr	r0, [pc, #72]	; (800d004 <HAL_PCD_MspInit+0xa4>)
 800cfbc:	f7f6 fe58 	bl	8003c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cfc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc4:	4a0e      	ldr	r2, [pc, #56]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cfc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfca:	6353      	str	r3, [r2, #52]	; 0x34
 800cfcc:	2300      	movs	r3, #0
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cfd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfd4:	4a0a      	ldr	r2, [pc, #40]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cfd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfda:	6453      	str	r3, [r2, #68]	; 0x44
 800cfdc:	4b08      	ldr	r3, [pc, #32]	; (800d000 <HAL_PCD_MspInit+0xa0>)
 800cfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	2043      	movs	r0, #67	; 0x43
 800cfee:	f7f6 faf0 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cff2:	2043      	movs	r0, #67	; 0x43
 800cff4:	f7f6 fb09 	bl	800360a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cff8:	bf00      	nop
 800cffa:	3728      	adds	r7, #40	; 0x28
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	40023800 	.word	0x40023800
 800d004:	40020000 	.word	0x40020000

0800d008 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d01c:	4619      	mov	r1, r3
 800d01e:	4610      	mov	r0, r2
 800d020:	f7fe fd5c 	bl	800badc <USBD_LL_SetupStage>
}
 800d024:	bf00      	nop
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d03e:	78fa      	ldrb	r2, [r7, #3]
 800d040:	6879      	ldr	r1, [r7, #4]
 800d042:	4613      	mov	r3, r2
 800d044:	00db      	lsls	r3, r3, #3
 800d046:	1a9b      	subs	r3, r3, r2
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	440b      	add	r3, r1
 800d04c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	78fb      	ldrb	r3, [r7, #3]
 800d054:	4619      	mov	r1, r3
 800d056:	f7fe fd94 	bl	800bb82 <USBD_LL_DataOutStage>
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	460b      	mov	r3, r1
 800d06c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d074:	78fa      	ldrb	r2, [r7, #3]
 800d076:	6879      	ldr	r1, [r7, #4]
 800d078:	4613      	mov	r3, r2
 800d07a:	00db      	lsls	r3, r3, #3
 800d07c:	1a9b      	subs	r3, r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	440b      	add	r3, r1
 800d082:	3348      	adds	r3, #72	; 0x48
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	78fb      	ldrb	r3, [r7, #3]
 800d088:	4619      	mov	r1, r3
 800d08a:	f7fe fddd 	bl	800bc48 <USBD_LL_DataInStage>
}
 800d08e:	bf00      	nop
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fe fee1 	bl	800be6c <USBD_LL_SOF>
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d102      	bne.n	800d0cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]
 800d0ca:	e008      	b.n	800d0de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d102      	bne.n	800d0da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	73fb      	strb	r3, [r7, #15]
 800d0d8:	e001      	b.n	800d0de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d0da:	f7f5 f8a7 	bl	800222c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0e4:	7bfa      	ldrb	r2, [r7, #15]
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fe fe84 	bl	800bdf6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fe fe3d 	bl	800bd74 <USBD_LL_Reset>
}
 800d0fa:	bf00      	nop
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
	...

0800d104 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe fe7f 	bl	800be16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	6812      	ldr	r2, [r2, #0]
 800d126:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d12a:	f043 0301 	orr.w	r3, r3, #1
 800d12e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a1b      	ldr	r3, [r3, #32]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d005      	beq.n	800d144 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d138:	4b04      	ldr	r3, [pc, #16]	; (800d14c <HAL_PCD_SuspendCallback+0x48>)
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	4a03      	ldr	r2, [pc, #12]	; (800d14c <HAL_PCD_SuspendCallback+0x48>)
 800d13e:	f043 0306 	orr.w	r3, r3, #6
 800d142:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d144:	bf00      	nop
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	e000ed00 	.word	0xe000ed00

0800d150 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fe fe6e 	bl	800be40 <USBD_LL_Resume>
}
 800d164:	bf00      	nop
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	460b      	mov	r3, r1
 800d176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d17e:	78fa      	ldrb	r2, [r7, #3]
 800d180:	4611      	mov	r1, r2
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe fe99 	bl	800beba <USBD_LL_IsoOUTIncomplete>
}
 800d188:	bf00      	nop
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1a2:	78fa      	ldrb	r2, [r7, #3]
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe fe7a 	bl	800bea0 <USBD_LL_IsoINIncomplete>
}
 800d1ac:	bf00      	nop
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fe fe86 	bl	800bed4 <USBD_LL_DevConnected>
}
 800d1c8:	bf00      	nop
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fe fe83 	bl	800beea <USBD_LL_DevDisconnected>
}
 800d1e4:	bf00      	nop
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d13c      	bne.n	800d276 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1fc:	4a20      	ldr	r2, [pc, #128]	; (800d280 <USBD_LL_Init+0x94>)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a1e      	ldr	r2, [pc, #120]	; (800d280 <USBD_LL_Init+0x94>)
 800d208:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d20c:	4b1c      	ldr	r3, [pc, #112]	; (800d280 <USBD_LL_Init+0x94>)
 800d20e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d212:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d214:	4b1a      	ldr	r3, [pc, #104]	; (800d280 <USBD_LL_Init+0x94>)
 800d216:	2204      	movs	r2, #4
 800d218:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d21a:	4b19      	ldr	r3, [pc, #100]	; (800d280 <USBD_LL_Init+0x94>)
 800d21c:	2202      	movs	r2, #2
 800d21e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d220:	4b17      	ldr	r3, [pc, #92]	; (800d280 <USBD_LL_Init+0x94>)
 800d222:	2200      	movs	r2, #0
 800d224:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d226:	4b16      	ldr	r3, [pc, #88]	; (800d280 <USBD_LL_Init+0x94>)
 800d228:	2202      	movs	r2, #2
 800d22a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d22c:	4b14      	ldr	r3, [pc, #80]	; (800d280 <USBD_LL_Init+0x94>)
 800d22e:	2200      	movs	r2, #0
 800d230:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d232:	4b13      	ldr	r3, [pc, #76]	; (800d280 <USBD_LL_Init+0x94>)
 800d234:	2200      	movs	r2, #0
 800d236:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d238:	4b11      	ldr	r3, [pc, #68]	; (800d280 <USBD_LL_Init+0x94>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d23e:	4b10      	ldr	r3, [pc, #64]	; (800d280 <USBD_LL_Init+0x94>)
 800d240:	2200      	movs	r2, #0
 800d242:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d244:	4b0e      	ldr	r3, [pc, #56]	; (800d280 <USBD_LL_Init+0x94>)
 800d246:	2200      	movs	r2, #0
 800d248:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d24a:	480d      	ldr	r0, [pc, #52]	; (800d280 <USBD_LL_Init+0x94>)
 800d24c:	f7f9 fc37 	bl	8006abe <HAL_PCD_Init>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d256:	f7f4 ffe9 	bl	800222c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d25a:	2180      	movs	r1, #128	; 0x80
 800d25c:	4808      	ldr	r0, [pc, #32]	; (800d280 <USBD_LL_Init+0x94>)
 800d25e:	f7fa fd94 	bl	8007d8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d262:	2240      	movs	r2, #64	; 0x40
 800d264:	2100      	movs	r1, #0
 800d266:	4806      	ldr	r0, [pc, #24]	; (800d280 <USBD_LL_Init+0x94>)
 800d268:	f7fa fd48 	bl	8007cfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d26c:	2280      	movs	r2, #128	; 0x80
 800d26e:	2101      	movs	r1, #1
 800d270:	4803      	ldr	r0, [pc, #12]	; (800d280 <USBD_LL_Init+0x94>)
 800d272:	f7fa fd43 	bl	8007cfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	20003558 	.word	0x20003558

0800d284 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f9 fd2c 	bl	8006cf8 <HAL_PCD_Start>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f000 f92a 	bl	800d500 <USBD_Get_USB_Status>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b084      	sub	sp, #16
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	4608      	mov	r0, r1
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	70fb      	strb	r3, [r7, #3]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	70bb      	strb	r3, [r7, #2]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2e2:	78bb      	ldrb	r3, [r7, #2]
 800d2e4:	883a      	ldrh	r2, [r7, #0]
 800d2e6:	78f9      	ldrb	r1, [r7, #3]
 800d2e8:	f7fa f910 	bl	800750c <HAL_PCD_EP_Open>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 f904 	bl	800d500 <USBD_Get_USB_Status>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d312:	2300      	movs	r3, #0
 800d314:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d320:	78fa      	ldrb	r2, [r7, #3]
 800d322:	4611      	mov	r1, r2
 800d324:	4618      	mov	r0, r3
 800d326:	f7fa f959 	bl	80075dc <HAL_PCD_EP_Close>
 800d32a:	4603      	mov	r3, r0
 800d32c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
 800d330:	4618      	mov	r0, r3
 800d332:	f000 f8e5 	bl	800d500 <USBD_Get_USB_Status>
 800d336:	4603      	mov	r3, r0
 800d338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d33a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d354:	2300      	movs	r3, #0
 800d356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d35e:	78fa      	ldrb	r2, [r7, #3]
 800d360:	4611      	mov	r1, r2
 800d362:	4618      	mov	r0, r3
 800d364:	f7fa fa31 	bl	80077ca <HAL_PCD_EP_SetStall>
 800d368:	4603      	mov	r3, r0
 800d36a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d36c:	7bfb      	ldrb	r3, [r7, #15]
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f8c6 	bl	800d500 <USBD_Get_USB_Status>
 800d374:	4603      	mov	r3, r0
 800d376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d378:	7bbb      	ldrb	r3, [r7, #14]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b084      	sub	sp, #16
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	460b      	mov	r3, r1
 800d38c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38e:	2300      	movs	r3, #0
 800d390:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d392:	2300      	movs	r3, #0
 800d394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d39c:	78fa      	ldrb	r2, [r7, #3]
 800d39e:	4611      	mov	r1, r2
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fa fa76 	bl	8007892 <HAL_PCD_EP_ClrStall>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3aa:	7bfb      	ldrb	r3, [r7, #15]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f000 f8a7 	bl	800d500 <USBD_Get_USB_Status>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	460b      	mov	r3, r1
 800d3ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d3d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	da0b      	bge.n	800d3f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3e2:	68f9      	ldr	r1, [r7, #12]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	1a9b      	subs	r3, r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	440b      	add	r3, r1
 800d3ee:	333e      	adds	r3, #62	; 0x3e
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	e00b      	b.n	800d40c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3f4:	78fb      	ldrb	r3, [r7, #3]
 800d3f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3fa:	68f9      	ldr	r1, [r7, #12]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	1a9b      	subs	r3, r3, r2
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	440b      	add	r3, r1
 800d406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d40a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d432:	78fa      	ldrb	r2, [r7, #3]
 800d434:	4611      	mov	r1, r2
 800d436:	4618      	mov	r0, r3
 800d438:	f7fa f843 	bl	80074c2 <HAL_PCD_SetAddress>
 800d43c:	4603      	mov	r3, r0
 800d43e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d440:	7bfb      	ldrb	r3, [r7, #15]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f85c 	bl	800d500 <USBD_Get_USB_Status>
 800d448:	4603      	mov	r3, r0
 800d44a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b086      	sub	sp, #24
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	60f8      	str	r0, [r7, #12]
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	603b      	str	r3, [r7, #0]
 800d462:	460b      	mov	r3, r1
 800d464:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d46a:	2300      	movs	r3, #0
 800d46c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d474:	7af9      	ldrb	r1, [r7, #11]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	f7fa f95c 	bl	8007736 <HAL_PCD_EP_Transmit>
 800d47e:	4603      	mov	r3, r0
 800d480:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d482:	7dfb      	ldrb	r3, [r7, #23]
 800d484:	4618      	mov	r0, r3
 800d486:	f000 f83b 	bl	800d500 <USBD_Get_USB_Status>
 800d48a:	4603      	mov	r3, r0
 800d48c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d48e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3718      	adds	r7, #24
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	607a      	str	r2, [r7, #4]
 800d4a2:	603b      	str	r3, [r7, #0]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d4b6:	7af9      	ldrb	r1, [r7, #11]
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	f7fa f8d8 	bl	8007670 <HAL_PCD_EP_Receive>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 f81a 	bl	800d500 <USBD_Get_USB_Status>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b082      	sub	sp, #8
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d4ec:	78fa      	ldrb	r2, [r7, #3]
 800d4ee:	4611      	mov	r1, r2
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fa f908 	bl	8007706 <HAL_PCD_EP_GetRxCount>
 800d4f6:	4603      	mov	r3, r0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d500:	b480      	push	{r7}
 800d502:	b085      	sub	sp, #20
 800d504:	af00      	add	r7, sp, #0
 800d506:	4603      	mov	r3, r0
 800d508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d50e:	79fb      	ldrb	r3, [r7, #7]
 800d510:	2b03      	cmp	r3, #3
 800d512:	d817      	bhi.n	800d544 <USBD_Get_USB_Status+0x44>
 800d514:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <USBD_Get_USB_Status+0x1c>)
 800d516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51a:	bf00      	nop
 800d51c:	0800d52d 	.word	0x0800d52d
 800d520:	0800d533 	.word	0x0800d533
 800d524:	0800d539 	.word	0x0800d539
 800d528:	0800d53f 	.word	0x0800d53f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d52c:	2300      	movs	r3, #0
 800d52e:	73fb      	strb	r3, [r7, #15]
    break;
 800d530:	e00b      	b.n	800d54a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d532:	2303      	movs	r3, #3
 800d534:	73fb      	strb	r3, [r7, #15]
    break;
 800d536:	e008      	b.n	800d54a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d538:	2301      	movs	r3, #1
 800d53a:	73fb      	strb	r3, [r7, #15]
    break;
 800d53c:	e005      	b.n	800d54a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d53e:	2303      	movs	r3, #3
 800d540:	73fb      	strb	r3, [r7, #15]
    break;
 800d542:	e002      	b.n	800d54a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d544:	2303      	movs	r3, #3
 800d546:	73fb      	strb	r3, [r7, #15]
    break;
 800d548:	bf00      	nop
  }
  return usb_status;
 800d54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <__errno>:
 800d558:	4b01      	ldr	r3, [pc, #4]	; (800d560 <__errno+0x8>)
 800d55a:	6818      	ldr	r0, [r3, #0]
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	2000019c 	.word	0x2000019c

0800d564 <__libc_init_array>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	4e0d      	ldr	r6, [pc, #52]	; (800d59c <__libc_init_array+0x38>)
 800d568:	4c0d      	ldr	r4, [pc, #52]	; (800d5a0 <__libc_init_array+0x3c>)
 800d56a:	1ba4      	subs	r4, r4, r6
 800d56c:	10a4      	asrs	r4, r4, #2
 800d56e:	2500      	movs	r5, #0
 800d570:	42a5      	cmp	r5, r4
 800d572:	d109      	bne.n	800d588 <__libc_init_array+0x24>
 800d574:	4e0b      	ldr	r6, [pc, #44]	; (800d5a4 <__libc_init_array+0x40>)
 800d576:	4c0c      	ldr	r4, [pc, #48]	; (800d5a8 <__libc_init_array+0x44>)
 800d578:	f001 ffc8 	bl	800f50c <_init>
 800d57c:	1ba4      	subs	r4, r4, r6
 800d57e:	10a4      	asrs	r4, r4, #2
 800d580:	2500      	movs	r5, #0
 800d582:	42a5      	cmp	r5, r4
 800d584:	d105      	bne.n	800d592 <__libc_init_array+0x2e>
 800d586:	bd70      	pop	{r4, r5, r6, pc}
 800d588:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d58c:	4798      	blx	r3
 800d58e:	3501      	adds	r5, #1
 800d590:	e7ee      	b.n	800d570 <__libc_init_array+0xc>
 800d592:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d596:	4798      	blx	r3
 800d598:	3501      	adds	r5, #1
 800d59a:	e7f2      	b.n	800d582 <__libc_init_array+0x1e>
 800d59c:	0800f7d0 	.word	0x0800f7d0
 800d5a0:	0800f7d0 	.word	0x0800f7d0
 800d5a4:	0800f7d0 	.word	0x0800f7d0
 800d5a8:	0800f7d4 	.word	0x0800f7d4

0800d5ac <malloc>:
 800d5ac:	4b02      	ldr	r3, [pc, #8]	; (800d5b8 <malloc+0xc>)
 800d5ae:	4601      	mov	r1, r0
 800d5b0:	6818      	ldr	r0, [r3, #0]
 800d5b2:	f000 b861 	b.w	800d678 <_malloc_r>
 800d5b6:	bf00      	nop
 800d5b8:	2000019c 	.word	0x2000019c

0800d5bc <free>:
 800d5bc:	4b02      	ldr	r3, [pc, #8]	; (800d5c8 <free+0xc>)
 800d5be:	4601      	mov	r1, r0
 800d5c0:	6818      	ldr	r0, [r3, #0]
 800d5c2:	f000 b80b 	b.w	800d5dc <_free_r>
 800d5c6:	bf00      	nop
 800d5c8:	2000019c 	.word	0x2000019c

0800d5cc <memset>:
 800d5cc:	4402      	add	r2, r0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d100      	bne.n	800d5d6 <memset+0xa>
 800d5d4:	4770      	bx	lr
 800d5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800d5da:	e7f9      	b.n	800d5d0 <memset+0x4>

0800d5dc <_free_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	4605      	mov	r5, r0
 800d5e0:	2900      	cmp	r1, #0
 800d5e2:	d045      	beq.n	800d670 <_free_r+0x94>
 800d5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5e8:	1f0c      	subs	r4, r1, #4
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	bfb8      	it	lt
 800d5ee:	18e4      	addlt	r4, r4, r3
 800d5f0:	f000 f8cc 	bl	800d78c <__malloc_lock>
 800d5f4:	4a1f      	ldr	r2, [pc, #124]	; (800d674 <_free_r+0x98>)
 800d5f6:	6813      	ldr	r3, [r2, #0]
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	b933      	cbnz	r3, 800d60a <_free_r+0x2e>
 800d5fc:	6063      	str	r3, [r4, #4]
 800d5fe:	6014      	str	r4, [r2, #0]
 800d600:	4628      	mov	r0, r5
 800d602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d606:	f000 b8c2 	b.w	800d78e <__malloc_unlock>
 800d60a:	42a3      	cmp	r3, r4
 800d60c:	d90c      	bls.n	800d628 <_free_r+0x4c>
 800d60e:	6821      	ldr	r1, [r4, #0]
 800d610:	1862      	adds	r2, r4, r1
 800d612:	4293      	cmp	r3, r2
 800d614:	bf04      	itt	eq
 800d616:	681a      	ldreq	r2, [r3, #0]
 800d618:	685b      	ldreq	r3, [r3, #4]
 800d61a:	6063      	str	r3, [r4, #4]
 800d61c:	bf04      	itt	eq
 800d61e:	1852      	addeq	r2, r2, r1
 800d620:	6022      	streq	r2, [r4, #0]
 800d622:	6004      	str	r4, [r0, #0]
 800d624:	e7ec      	b.n	800d600 <_free_r+0x24>
 800d626:	4613      	mov	r3, r2
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	b10a      	cbz	r2, 800d630 <_free_r+0x54>
 800d62c:	42a2      	cmp	r2, r4
 800d62e:	d9fa      	bls.n	800d626 <_free_r+0x4a>
 800d630:	6819      	ldr	r1, [r3, #0]
 800d632:	1858      	adds	r0, r3, r1
 800d634:	42a0      	cmp	r0, r4
 800d636:	d10b      	bne.n	800d650 <_free_r+0x74>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	4401      	add	r1, r0
 800d63c:	1858      	adds	r0, r3, r1
 800d63e:	4282      	cmp	r2, r0
 800d640:	6019      	str	r1, [r3, #0]
 800d642:	d1dd      	bne.n	800d600 <_free_r+0x24>
 800d644:	6810      	ldr	r0, [r2, #0]
 800d646:	6852      	ldr	r2, [r2, #4]
 800d648:	605a      	str	r2, [r3, #4]
 800d64a:	4401      	add	r1, r0
 800d64c:	6019      	str	r1, [r3, #0]
 800d64e:	e7d7      	b.n	800d600 <_free_r+0x24>
 800d650:	d902      	bls.n	800d658 <_free_r+0x7c>
 800d652:	230c      	movs	r3, #12
 800d654:	602b      	str	r3, [r5, #0]
 800d656:	e7d3      	b.n	800d600 <_free_r+0x24>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	1821      	adds	r1, r4, r0
 800d65c:	428a      	cmp	r2, r1
 800d65e:	bf04      	itt	eq
 800d660:	6811      	ldreq	r1, [r2, #0]
 800d662:	6852      	ldreq	r2, [r2, #4]
 800d664:	6062      	str	r2, [r4, #4]
 800d666:	bf04      	itt	eq
 800d668:	1809      	addeq	r1, r1, r0
 800d66a:	6021      	streq	r1, [r4, #0]
 800d66c:	605c      	str	r4, [r3, #4]
 800d66e:	e7c7      	b.n	800d600 <_free_r+0x24>
 800d670:	bd38      	pop	{r3, r4, r5, pc}
 800d672:	bf00      	nop
 800d674:	20000244 	.word	0x20000244

0800d678 <_malloc_r>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	1ccd      	adds	r5, r1, #3
 800d67c:	f025 0503 	bic.w	r5, r5, #3
 800d680:	3508      	adds	r5, #8
 800d682:	2d0c      	cmp	r5, #12
 800d684:	bf38      	it	cc
 800d686:	250c      	movcc	r5, #12
 800d688:	2d00      	cmp	r5, #0
 800d68a:	4606      	mov	r6, r0
 800d68c:	db01      	blt.n	800d692 <_malloc_r+0x1a>
 800d68e:	42a9      	cmp	r1, r5
 800d690:	d903      	bls.n	800d69a <_malloc_r+0x22>
 800d692:	230c      	movs	r3, #12
 800d694:	6033      	str	r3, [r6, #0]
 800d696:	2000      	movs	r0, #0
 800d698:	bd70      	pop	{r4, r5, r6, pc}
 800d69a:	f000 f877 	bl	800d78c <__malloc_lock>
 800d69e:	4a21      	ldr	r2, [pc, #132]	; (800d724 <_malloc_r+0xac>)
 800d6a0:	6814      	ldr	r4, [r2, #0]
 800d6a2:	4621      	mov	r1, r4
 800d6a4:	b991      	cbnz	r1, 800d6cc <_malloc_r+0x54>
 800d6a6:	4c20      	ldr	r4, [pc, #128]	; (800d728 <_malloc_r+0xb0>)
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	b91b      	cbnz	r3, 800d6b4 <_malloc_r+0x3c>
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f000 f83d 	bl	800d72c <_sbrk_r>
 800d6b2:	6020      	str	r0, [r4, #0]
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f000 f838 	bl	800d72c <_sbrk_r>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d124      	bne.n	800d70a <_malloc_r+0x92>
 800d6c0:	230c      	movs	r3, #12
 800d6c2:	6033      	str	r3, [r6, #0]
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 f862 	bl	800d78e <__malloc_unlock>
 800d6ca:	e7e4      	b.n	800d696 <_malloc_r+0x1e>
 800d6cc:	680b      	ldr	r3, [r1, #0]
 800d6ce:	1b5b      	subs	r3, r3, r5
 800d6d0:	d418      	bmi.n	800d704 <_malloc_r+0x8c>
 800d6d2:	2b0b      	cmp	r3, #11
 800d6d4:	d90f      	bls.n	800d6f6 <_malloc_r+0x7e>
 800d6d6:	600b      	str	r3, [r1, #0]
 800d6d8:	50cd      	str	r5, [r1, r3]
 800d6da:	18cc      	adds	r4, r1, r3
 800d6dc:	4630      	mov	r0, r6
 800d6de:	f000 f856 	bl	800d78e <__malloc_unlock>
 800d6e2:	f104 000b 	add.w	r0, r4, #11
 800d6e6:	1d23      	adds	r3, r4, #4
 800d6e8:	f020 0007 	bic.w	r0, r0, #7
 800d6ec:	1ac3      	subs	r3, r0, r3
 800d6ee:	d0d3      	beq.n	800d698 <_malloc_r+0x20>
 800d6f0:	425a      	negs	r2, r3
 800d6f2:	50e2      	str	r2, [r4, r3]
 800d6f4:	e7d0      	b.n	800d698 <_malloc_r+0x20>
 800d6f6:	428c      	cmp	r4, r1
 800d6f8:	684b      	ldr	r3, [r1, #4]
 800d6fa:	bf16      	itet	ne
 800d6fc:	6063      	strne	r3, [r4, #4]
 800d6fe:	6013      	streq	r3, [r2, #0]
 800d700:	460c      	movne	r4, r1
 800d702:	e7eb      	b.n	800d6dc <_malloc_r+0x64>
 800d704:	460c      	mov	r4, r1
 800d706:	6849      	ldr	r1, [r1, #4]
 800d708:	e7cc      	b.n	800d6a4 <_malloc_r+0x2c>
 800d70a:	1cc4      	adds	r4, r0, #3
 800d70c:	f024 0403 	bic.w	r4, r4, #3
 800d710:	42a0      	cmp	r0, r4
 800d712:	d005      	beq.n	800d720 <_malloc_r+0xa8>
 800d714:	1a21      	subs	r1, r4, r0
 800d716:	4630      	mov	r0, r6
 800d718:	f000 f808 	bl	800d72c <_sbrk_r>
 800d71c:	3001      	adds	r0, #1
 800d71e:	d0cf      	beq.n	800d6c0 <_malloc_r+0x48>
 800d720:	6025      	str	r5, [r4, #0]
 800d722:	e7db      	b.n	800d6dc <_malloc_r+0x64>
 800d724:	20000244 	.word	0x20000244
 800d728:	20000248 	.word	0x20000248

0800d72c <_sbrk_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4c06      	ldr	r4, [pc, #24]	; (800d748 <_sbrk_r+0x1c>)
 800d730:	2300      	movs	r3, #0
 800d732:	4605      	mov	r5, r0
 800d734:	4608      	mov	r0, r1
 800d736:	6023      	str	r3, [r4, #0]
 800d738:	f7f4 fe76 	bl	8002428 <_sbrk>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <_sbrk_r+0x1a>
 800d740:	6823      	ldr	r3, [r4, #0]
 800d742:	b103      	cbz	r3, 800d746 <_sbrk_r+0x1a>
 800d744:	602b      	str	r3, [r5, #0]
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	20003960 	.word	0x20003960

0800d74c <siprintf>:
 800d74c:	b40e      	push	{r1, r2, r3}
 800d74e:	b500      	push	{lr}
 800d750:	b09c      	sub	sp, #112	; 0x70
 800d752:	ab1d      	add	r3, sp, #116	; 0x74
 800d754:	9002      	str	r0, [sp, #8]
 800d756:	9006      	str	r0, [sp, #24]
 800d758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d75c:	4809      	ldr	r0, [pc, #36]	; (800d784 <siprintf+0x38>)
 800d75e:	9107      	str	r1, [sp, #28]
 800d760:	9104      	str	r1, [sp, #16]
 800d762:	4909      	ldr	r1, [pc, #36]	; (800d788 <siprintf+0x3c>)
 800d764:	f853 2b04 	ldr.w	r2, [r3], #4
 800d768:	9105      	str	r1, [sp, #20]
 800d76a:	6800      	ldr	r0, [r0, #0]
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	a902      	add	r1, sp, #8
 800d770:	f000 f868 	bl	800d844 <_svfiprintf_r>
 800d774:	9b02      	ldr	r3, [sp, #8]
 800d776:	2200      	movs	r2, #0
 800d778:	701a      	strb	r2, [r3, #0]
 800d77a:	b01c      	add	sp, #112	; 0x70
 800d77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d780:	b003      	add	sp, #12
 800d782:	4770      	bx	lr
 800d784:	2000019c 	.word	0x2000019c
 800d788:	ffff0208 	.word	0xffff0208

0800d78c <__malloc_lock>:
 800d78c:	4770      	bx	lr

0800d78e <__malloc_unlock>:
 800d78e:	4770      	bx	lr

0800d790 <__ssputs_r>:
 800d790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d794:	688e      	ldr	r6, [r1, #8]
 800d796:	429e      	cmp	r6, r3
 800d798:	4682      	mov	sl, r0
 800d79a:	460c      	mov	r4, r1
 800d79c:	4690      	mov	r8, r2
 800d79e:	4699      	mov	r9, r3
 800d7a0:	d837      	bhi.n	800d812 <__ssputs_r+0x82>
 800d7a2:	898a      	ldrh	r2, [r1, #12]
 800d7a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7a8:	d031      	beq.n	800d80e <__ssputs_r+0x7e>
 800d7aa:	6825      	ldr	r5, [r4, #0]
 800d7ac:	6909      	ldr	r1, [r1, #16]
 800d7ae:	1a6f      	subs	r7, r5, r1
 800d7b0:	6965      	ldr	r5, [r4, #20]
 800d7b2:	2302      	movs	r3, #2
 800d7b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7b8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d7bc:	f109 0301 	add.w	r3, r9, #1
 800d7c0:	443b      	add	r3, r7
 800d7c2:	429d      	cmp	r5, r3
 800d7c4:	bf38      	it	cc
 800d7c6:	461d      	movcc	r5, r3
 800d7c8:	0553      	lsls	r3, r2, #21
 800d7ca:	d530      	bpl.n	800d82e <__ssputs_r+0x9e>
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	f7ff ff53 	bl	800d678 <_malloc_r>
 800d7d2:	4606      	mov	r6, r0
 800d7d4:	b950      	cbnz	r0, 800d7ec <__ssputs_r+0x5c>
 800d7d6:	230c      	movs	r3, #12
 800d7d8:	f8ca 3000 	str.w	r3, [sl]
 800d7dc:	89a3      	ldrh	r3, [r4, #12]
 800d7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7e2:	81a3      	strh	r3, [r4, #12]
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ec:	463a      	mov	r2, r7
 800d7ee:	6921      	ldr	r1, [r4, #16]
 800d7f0:	f000 faa8 	bl	800dd44 <memcpy>
 800d7f4:	89a3      	ldrh	r3, [r4, #12]
 800d7f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	6126      	str	r6, [r4, #16]
 800d802:	6165      	str	r5, [r4, #20]
 800d804:	443e      	add	r6, r7
 800d806:	1bed      	subs	r5, r5, r7
 800d808:	6026      	str	r6, [r4, #0]
 800d80a:	60a5      	str	r5, [r4, #8]
 800d80c:	464e      	mov	r6, r9
 800d80e:	454e      	cmp	r6, r9
 800d810:	d900      	bls.n	800d814 <__ssputs_r+0x84>
 800d812:	464e      	mov	r6, r9
 800d814:	4632      	mov	r2, r6
 800d816:	4641      	mov	r1, r8
 800d818:	6820      	ldr	r0, [r4, #0]
 800d81a:	f000 fa9e 	bl	800dd5a <memmove>
 800d81e:	68a3      	ldr	r3, [r4, #8]
 800d820:	1b9b      	subs	r3, r3, r6
 800d822:	60a3      	str	r3, [r4, #8]
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	441e      	add	r6, r3
 800d828:	6026      	str	r6, [r4, #0]
 800d82a:	2000      	movs	r0, #0
 800d82c:	e7dc      	b.n	800d7e8 <__ssputs_r+0x58>
 800d82e:	462a      	mov	r2, r5
 800d830:	f000 faac 	bl	800dd8c <_realloc_r>
 800d834:	4606      	mov	r6, r0
 800d836:	2800      	cmp	r0, #0
 800d838:	d1e2      	bne.n	800d800 <__ssputs_r+0x70>
 800d83a:	6921      	ldr	r1, [r4, #16]
 800d83c:	4650      	mov	r0, sl
 800d83e:	f7ff fecd 	bl	800d5dc <_free_r>
 800d842:	e7c8      	b.n	800d7d6 <__ssputs_r+0x46>

0800d844 <_svfiprintf_r>:
 800d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d848:	461d      	mov	r5, r3
 800d84a:	898b      	ldrh	r3, [r1, #12]
 800d84c:	061f      	lsls	r7, r3, #24
 800d84e:	b09d      	sub	sp, #116	; 0x74
 800d850:	4680      	mov	r8, r0
 800d852:	460c      	mov	r4, r1
 800d854:	4616      	mov	r6, r2
 800d856:	d50f      	bpl.n	800d878 <_svfiprintf_r+0x34>
 800d858:	690b      	ldr	r3, [r1, #16]
 800d85a:	b96b      	cbnz	r3, 800d878 <_svfiprintf_r+0x34>
 800d85c:	2140      	movs	r1, #64	; 0x40
 800d85e:	f7ff ff0b 	bl	800d678 <_malloc_r>
 800d862:	6020      	str	r0, [r4, #0]
 800d864:	6120      	str	r0, [r4, #16]
 800d866:	b928      	cbnz	r0, 800d874 <_svfiprintf_r+0x30>
 800d868:	230c      	movs	r3, #12
 800d86a:	f8c8 3000 	str.w	r3, [r8]
 800d86e:	f04f 30ff 	mov.w	r0, #4294967295
 800d872:	e0c8      	b.n	800da06 <_svfiprintf_r+0x1c2>
 800d874:	2340      	movs	r3, #64	; 0x40
 800d876:	6163      	str	r3, [r4, #20]
 800d878:	2300      	movs	r3, #0
 800d87a:	9309      	str	r3, [sp, #36]	; 0x24
 800d87c:	2320      	movs	r3, #32
 800d87e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d882:	2330      	movs	r3, #48	; 0x30
 800d884:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d888:	9503      	str	r5, [sp, #12]
 800d88a:	f04f 0b01 	mov.w	fp, #1
 800d88e:	4637      	mov	r7, r6
 800d890:	463d      	mov	r5, r7
 800d892:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d896:	b10b      	cbz	r3, 800d89c <_svfiprintf_r+0x58>
 800d898:	2b25      	cmp	r3, #37	; 0x25
 800d89a:	d13e      	bne.n	800d91a <_svfiprintf_r+0xd6>
 800d89c:	ebb7 0a06 	subs.w	sl, r7, r6
 800d8a0:	d00b      	beq.n	800d8ba <_svfiprintf_r+0x76>
 800d8a2:	4653      	mov	r3, sl
 800d8a4:	4632      	mov	r2, r6
 800d8a6:	4621      	mov	r1, r4
 800d8a8:	4640      	mov	r0, r8
 800d8aa:	f7ff ff71 	bl	800d790 <__ssputs_r>
 800d8ae:	3001      	adds	r0, #1
 800d8b0:	f000 80a4 	beq.w	800d9fc <_svfiprintf_r+0x1b8>
 800d8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b6:	4453      	add	r3, sl
 800d8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ba:	783b      	ldrb	r3, [r7, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 809d 	beq.w	800d9fc <_svfiprintf_r+0x1b8>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8cc:	9304      	str	r3, [sp, #16]
 800d8ce:	9307      	str	r3, [sp, #28]
 800d8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800d8d6:	462f      	mov	r7, r5
 800d8d8:	2205      	movs	r2, #5
 800d8da:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d8de:	4850      	ldr	r0, [pc, #320]	; (800da20 <_svfiprintf_r+0x1dc>)
 800d8e0:	f7f2 fc7e 	bl	80001e0 <memchr>
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	b9d0      	cbnz	r0, 800d91e <_svfiprintf_r+0xda>
 800d8e8:	06d9      	lsls	r1, r3, #27
 800d8ea:	bf44      	itt	mi
 800d8ec:	2220      	movmi	r2, #32
 800d8ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d8f2:	071a      	lsls	r2, r3, #28
 800d8f4:	bf44      	itt	mi
 800d8f6:	222b      	movmi	r2, #43	; 0x2b
 800d8f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d8fc:	782a      	ldrb	r2, [r5, #0]
 800d8fe:	2a2a      	cmp	r2, #42	; 0x2a
 800d900:	d015      	beq.n	800d92e <_svfiprintf_r+0xea>
 800d902:	9a07      	ldr	r2, [sp, #28]
 800d904:	462f      	mov	r7, r5
 800d906:	2000      	movs	r0, #0
 800d908:	250a      	movs	r5, #10
 800d90a:	4639      	mov	r1, r7
 800d90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d910:	3b30      	subs	r3, #48	; 0x30
 800d912:	2b09      	cmp	r3, #9
 800d914:	d94d      	bls.n	800d9b2 <_svfiprintf_r+0x16e>
 800d916:	b1b8      	cbz	r0, 800d948 <_svfiprintf_r+0x104>
 800d918:	e00f      	b.n	800d93a <_svfiprintf_r+0xf6>
 800d91a:	462f      	mov	r7, r5
 800d91c:	e7b8      	b.n	800d890 <_svfiprintf_r+0x4c>
 800d91e:	4a40      	ldr	r2, [pc, #256]	; (800da20 <_svfiprintf_r+0x1dc>)
 800d920:	1a80      	subs	r0, r0, r2
 800d922:	fa0b f000 	lsl.w	r0, fp, r0
 800d926:	4318      	orrs	r0, r3
 800d928:	9004      	str	r0, [sp, #16]
 800d92a:	463d      	mov	r5, r7
 800d92c:	e7d3      	b.n	800d8d6 <_svfiprintf_r+0x92>
 800d92e:	9a03      	ldr	r2, [sp, #12]
 800d930:	1d11      	adds	r1, r2, #4
 800d932:	6812      	ldr	r2, [r2, #0]
 800d934:	9103      	str	r1, [sp, #12]
 800d936:	2a00      	cmp	r2, #0
 800d938:	db01      	blt.n	800d93e <_svfiprintf_r+0xfa>
 800d93a:	9207      	str	r2, [sp, #28]
 800d93c:	e004      	b.n	800d948 <_svfiprintf_r+0x104>
 800d93e:	4252      	negs	r2, r2
 800d940:	f043 0302 	orr.w	r3, r3, #2
 800d944:	9207      	str	r2, [sp, #28]
 800d946:	9304      	str	r3, [sp, #16]
 800d948:	783b      	ldrb	r3, [r7, #0]
 800d94a:	2b2e      	cmp	r3, #46	; 0x2e
 800d94c:	d10c      	bne.n	800d968 <_svfiprintf_r+0x124>
 800d94e:	787b      	ldrb	r3, [r7, #1]
 800d950:	2b2a      	cmp	r3, #42	; 0x2a
 800d952:	d133      	bne.n	800d9bc <_svfiprintf_r+0x178>
 800d954:	9b03      	ldr	r3, [sp, #12]
 800d956:	1d1a      	adds	r2, r3, #4
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	9203      	str	r2, [sp, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	bfb8      	it	lt
 800d960:	f04f 33ff 	movlt.w	r3, #4294967295
 800d964:	3702      	adds	r7, #2
 800d966:	9305      	str	r3, [sp, #20]
 800d968:	4d2e      	ldr	r5, [pc, #184]	; (800da24 <_svfiprintf_r+0x1e0>)
 800d96a:	7839      	ldrb	r1, [r7, #0]
 800d96c:	2203      	movs	r2, #3
 800d96e:	4628      	mov	r0, r5
 800d970:	f7f2 fc36 	bl	80001e0 <memchr>
 800d974:	b138      	cbz	r0, 800d986 <_svfiprintf_r+0x142>
 800d976:	2340      	movs	r3, #64	; 0x40
 800d978:	1b40      	subs	r0, r0, r5
 800d97a:	fa03 f000 	lsl.w	r0, r3, r0
 800d97e:	9b04      	ldr	r3, [sp, #16]
 800d980:	4303      	orrs	r3, r0
 800d982:	3701      	adds	r7, #1
 800d984:	9304      	str	r3, [sp, #16]
 800d986:	7839      	ldrb	r1, [r7, #0]
 800d988:	4827      	ldr	r0, [pc, #156]	; (800da28 <_svfiprintf_r+0x1e4>)
 800d98a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d98e:	2206      	movs	r2, #6
 800d990:	1c7e      	adds	r6, r7, #1
 800d992:	f7f2 fc25 	bl	80001e0 <memchr>
 800d996:	2800      	cmp	r0, #0
 800d998:	d038      	beq.n	800da0c <_svfiprintf_r+0x1c8>
 800d99a:	4b24      	ldr	r3, [pc, #144]	; (800da2c <_svfiprintf_r+0x1e8>)
 800d99c:	bb13      	cbnz	r3, 800d9e4 <_svfiprintf_r+0x1a0>
 800d99e:	9b03      	ldr	r3, [sp, #12]
 800d9a0:	3307      	adds	r3, #7
 800d9a2:	f023 0307 	bic.w	r3, r3, #7
 800d9a6:	3308      	adds	r3, #8
 800d9a8:	9303      	str	r3, [sp, #12]
 800d9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ac:	444b      	add	r3, r9
 800d9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b0:	e76d      	b.n	800d88e <_svfiprintf_r+0x4a>
 800d9b2:	fb05 3202 	mla	r2, r5, r2, r3
 800d9b6:	2001      	movs	r0, #1
 800d9b8:	460f      	mov	r7, r1
 800d9ba:	e7a6      	b.n	800d90a <_svfiprintf_r+0xc6>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	3701      	adds	r7, #1
 800d9c0:	9305      	str	r3, [sp, #20]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	250a      	movs	r5, #10
 800d9c6:	4638      	mov	r0, r7
 800d9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9cc:	3a30      	subs	r2, #48	; 0x30
 800d9ce:	2a09      	cmp	r2, #9
 800d9d0:	d903      	bls.n	800d9da <_svfiprintf_r+0x196>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0c8      	beq.n	800d968 <_svfiprintf_r+0x124>
 800d9d6:	9105      	str	r1, [sp, #20]
 800d9d8:	e7c6      	b.n	800d968 <_svfiprintf_r+0x124>
 800d9da:	fb05 2101 	mla	r1, r5, r1, r2
 800d9de:	2301      	movs	r3, #1
 800d9e0:	4607      	mov	r7, r0
 800d9e2:	e7f0      	b.n	800d9c6 <_svfiprintf_r+0x182>
 800d9e4:	ab03      	add	r3, sp, #12
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	4622      	mov	r2, r4
 800d9ea:	4b11      	ldr	r3, [pc, #68]	; (800da30 <_svfiprintf_r+0x1ec>)
 800d9ec:	a904      	add	r1, sp, #16
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	f3af 8000 	nop.w
 800d9f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d9f8:	4681      	mov	r9, r0
 800d9fa:	d1d6      	bne.n	800d9aa <_svfiprintf_r+0x166>
 800d9fc:	89a3      	ldrh	r3, [r4, #12]
 800d9fe:	065b      	lsls	r3, r3, #25
 800da00:	f53f af35 	bmi.w	800d86e <_svfiprintf_r+0x2a>
 800da04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da06:	b01d      	add	sp, #116	; 0x74
 800da08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0c:	ab03      	add	r3, sp, #12
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	4622      	mov	r2, r4
 800da12:	4b07      	ldr	r3, [pc, #28]	; (800da30 <_svfiprintf_r+0x1ec>)
 800da14:	a904      	add	r1, sp, #16
 800da16:	4640      	mov	r0, r8
 800da18:	f000 f882 	bl	800db20 <_printf_i>
 800da1c:	e7ea      	b.n	800d9f4 <_svfiprintf_r+0x1b0>
 800da1e:	bf00      	nop
 800da20:	0800f5ac 	.word	0x0800f5ac
 800da24:	0800f5b2 	.word	0x0800f5b2
 800da28:	0800f5b6 	.word	0x0800f5b6
 800da2c:	00000000 	.word	0x00000000
 800da30:	0800d791 	.word	0x0800d791

0800da34 <_printf_common>:
 800da34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da38:	4691      	mov	r9, r2
 800da3a:	461f      	mov	r7, r3
 800da3c:	688a      	ldr	r2, [r1, #8]
 800da3e:	690b      	ldr	r3, [r1, #16]
 800da40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da44:	4293      	cmp	r3, r2
 800da46:	bfb8      	it	lt
 800da48:	4613      	movlt	r3, r2
 800da4a:	f8c9 3000 	str.w	r3, [r9]
 800da4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da52:	4606      	mov	r6, r0
 800da54:	460c      	mov	r4, r1
 800da56:	b112      	cbz	r2, 800da5e <_printf_common+0x2a>
 800da58:	3301      	adds	r3, #1
 800da5a:	f8c9 3000 	str.w	r3, [r9]
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	0699      	lsls	r1, r3, #26
 800da62:	bf42      	ittt	mi
 800da64:	f8d9 3000 	ldrmi.w	r3, [r9]
 800da68:	3302      	addmi	r3, #2
 800da6a:	f8c9 3000 	strmi.w	r3, [r9]
 800da6e:	6825      	ldr	r5, [r4, #0]
 800da70:	f015 0506 	ands.w	r5, r5, #6
 800da74:	d107      	bne.n	800da86 <_printf_common+0x52>
 800da76:	f104 0a19 	add.w	sl, r4, #25
 800da7a:	68e3      	ldr	r3, [r4, #12]
 800da7c:	f8d9 2000 	ldr.w	r2, [r9]
 800da80:	1a9b      	subs	r3, r3, r2
 800da82:	42ab      	cmp	r3, r5
 800da84:	dc28      	bgt.n	800dad8 <_printf_common+0xa4>
 800da86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800da8a:	6822      	ldr	r2, [r4, #0]
 800da8c:	3300      	adds	r3, #0
 800da8e:	bf18      	it	ne
 800da90:	2301      	movne	r3, #1
 800da92:	0692      	lsls	r2, r2, #26
 800da94:	d42d      	bmi.n	800daf2 <_printf_common+0xbe>
 800da96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da9a:	4639      	mov	r1, r7
 800da9c:	4630      	mov	r0, r6
 800da9e:	47c0      	blx	r8
 800daa0:	3001      	adds	r0, #1
 800daa2:	d020      	beq.n	800dae6 <_printf_common+0xb2>
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	68e5      	ldr	r5, [r4, #12]
 800daa8:	f8d9 2000 	ldr.w	r2, [r9]
 800daac:	f003 0306 	and.w	r3, r3, #6
 800dab0:	2b04      	cmp	r3, #4
 800dab2:	bf08      	it	eq
 800dab4:	1aad      	subeq	r5, r5, r2
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	6922      	ldr	r2, [r4, #16]
 800daba:	bf0c      	ite	eq
 800dabc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dac0:	2500      	movne	r5, #0
 800dac2:	4293      	cmp	r3, r2
 800dac4:	bfc4      	itt	gt
 800dac6:	1a9b      	subgt	r3, r3, r2
 800dac8:	18ed      	addgt	r5, r5, r3
 800daca:	f04f 0900 	mov.w	r9, #0
 800dace:	341a      	adds	r4, #26
 800dad0:	454d      	cmp	r5, r9
 800dad2:	d11a      	bne.n	800db0a <_printf_common+0xd6>
 800dad4:	2000      	movs	r0, #0
 800dad6:	e008      	b.n	800daea <_printf_common+0xb6>
 800dad8:	2301      	movs	r3, #1
 800dada:	4652      	mov	r2, sl
 800dadc:	4639      	mov	r1, r7
 800dade:	4630      	mov	r0, r6
 800dae0:	47c0      	blx	r8
 800dae2:	3001      	adds	r0, #1
 800dae4:	d103      	bne.n	800daee <_printf_common+0xba>
 800dae6:	f04f 30ff 	mov.w	r0, #4294967295
 800daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daee:	3501      	adds	r5, #1
 800daf0:	e7c3      	b.n	800da7a <_printf_common+0x46>
 800daf2:	18e1      	adds	r1, r4, r3
 800daf4:	1c5a      	adds	r2, r3, #1
 800daf6:	2030      	movs	r0, #48	; 0x30
 800daf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dafc:	4422      	add	r2, r4
 800dafe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db06:	3302      	adds	r3, #2
 800db08:	e7c5      	b.n	800da96 <_printf_common+0x62>
 800db0a:	2301      	movs	r3, #1
 800db0c:	4622      	mov	r2, r4
 800db0e:	4639      	mov	r1, r7
 800db10:	4630      	mov	r0, r6
 800db12:	47c0      	blx	r8
 800db14:	3001      	adds	r0, #1
 800db16:	d0e6      	beq.n	800dae6 <_printf_common+0xb2>
 800db18:	f109 0901 	add.w	r9, r9, #1
 800db1c:	e7d8      	b.n	800dad0 <_printf_common+0x9c>
	...

0800db20 <_printf_i>:
 800db20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800db28:	460c      	mov	r4, r1
 800db2a:	7e09      	ldrb	r1, [r1, #24]
 800db2c:	b085      	sub	sp, #20
 800db2e:	296e      	cmp	r1, #110	; 0x6e
 800db30:	4617      	mov	r7, r2
 800db32:	4606      	mov	r6, r0
 800db34:	4698      	mov	r8, r3
 800db36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db38:	f000 80b3 	beq.w	800dca2 <_printf_i+0x182>
 800db3c:	d822      	bhi.n	800db84 <_printf_i+0x64>
 800db3e:	2963      	cmp	r1, #99	; 0x63
 800db40:	d036      	beq.n	800dbb0 <_printf_i+0x90>
 800db42:	d80a      	bhi.n	800db5a <_printf_i+0x3a>
 800db44:	2900      	cmp	r1, #0
 800db46:	f000 80b9 	beq.w	800dcbc <_printf_i+0x19c>
 800db4a:	2958      	cmp	r1, #88	; 0x58
 800db4c:	f000 8083 	beq.w	800dc56 <_printf_i+0x136>
 800db50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800db58:	e032      	b.n	800dbc0 <_printf_i+0xa0>
 800db5a:	2964      	cmp	r1, #100	; 0x64
 800db5c:	d001      	beq.n	800db62 <_printf_i+0x42>
 800db5e:	2969      	cmp	r1, #105	; 0x69
 800db60:	d1f6      	bne.n	800db50 <_printf_i+0x30>
 800db62:	6820      	ldr	r0, [r4, #0]
 800db64:	6813      	ldr	r3, [r2, #0]
 800db66:	0605      	lsls	r5, r0, #24
 800db68:	f103 0104 	add.w	r1, r3, #4
 800db6c:	d52a      	bpl.n	800dbc4 <_printf_i+0xa4>
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6011      	str	r1, [r2, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	da03      	bge.n	800db7e <_printf_i+0x5e>
 800db76:	222d      	movs	r2, #45	; 0x2d
 800db78:	425b      	negs	r3, r3
 800db7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800db7e:	486f      	ldr	r0, [pc, #444]	; (800dd3c <_printf_i+0x21c>)
 800db80:	220a      	movs	r2, #10
 800db82:	e039      	b.n	800dbf8 <_printf_i+0xd8>
 800db84:	2973      	cmp	r1, #115	; 0x73
 800db86:	f000 809d 	beq.w	800dcc4 <_printf_i+0x1a4>
 800db8a:	d808      	bhi.n	800db9e <_printf_i+0x7e>
 800db8c:	296f      	cmp	r1, #111	; 0x6f
 800db8e:	d020      	beq.n	800dbd2 <_printf_i+0xb2>
 800db90:	2970      	cmp	r1, #112	; 0x70
 800db92:	d1dd      	bne.n	800db50 <_printf_i+0x30>
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	f043 0320 	orr.w	r3, r3, #32
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	e003      	b.n	800dba6 <_printf_i+0x86>
 800db9e:	2975      	cmp	r1, #117	; 0x75
 800dba0:	d017      	beq.n	800dbd2 <_printf_i+0xb2>
 800dba2:	2978      	cmp	r1, #120	; 0x78
 800dba4:	d1d4      	bne.n	800db50 <_printf_i+0x30>
 800dba6:	2378      	movs	r3, #120	; 0x78
 800dba8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dbac:	4864      	ldr	r0, [pc, #400]	; (800dd40 <_printf_i+0x220>)
 800dbae:	e055      	b.n	800dc5c <_printf_i+0x13c>
 800dbb0:	6813      	ldr	r3, [r2, #0]
 800dbb2:	1d19      	adds	r1, r3, #4
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	6011      	str	r1, [r2, #0]
 800dbb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e08c      	b.n	800dcde <_printf_i+0x1be>
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6011      	str	r1, [r2, #0]
 800dbc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbcc:	bf18      	it	ne
 800dbce:	b21b      	sxthne	r3, r3
 800dbd0:	e7cf      	b.n	800db72 <_printf_i+0x52>
 800dbd2:	6813      	ldr	r3, [r2, #0]
 800dbd4:	6825      	ldr	r5, [r4, #0]
 800dbd6:	1d18      	adds	r0, r3, #4
 800dbd8:	6010      	str	r0, [r2, #0]
 800dbda:	0628      	lsls	r0, r5, #24
 800dbdc:	d501      	bpl.n	800dbe2 <_printf_i+0xc2>
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	e002      	b.n	800dbe8 <_printf_i+0xc8>
 800dbe2:	0668      	lsls	r0, r5, #25
 800dbe4:	d5fb      	bpl.n	800dbde <_printf_i+0xbe>
 800dbe6:	881b      	ldrh	r3, [r3, #0]
 800dbe8:	4854      	ldr	r0, [pc, #336]	; (800dd3c <_printf_i+0x21c>)
 800dbea:	296f      	cmp	r1, #111	; 0x6f
 800dbec:	bf14      	ite	ne
 800dbee:	220a      	movne	r2, #10
 800dbf0:	2208      	moveq	r2, #8
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dbf8:	6865      	ldr	r5, [r4, #4]
 800dbfa:	60a5      	str	r5, [r4, #8]
 800dbfc:	2d00      	cmp	r5, #0
 800dbfe:	f2c0 8095 	blt.w	800dd2c <_printf_i+0x20c>
 800dc02:	6821      	ldr	r1, [r4, #0]
 800dc04:	f021 0104 	bic.w	r1, r1, #4
 800dc08:	6021      	str	r1, [r4, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d13d      	bne.n	800dc8a <_printf_i+0x16a>
 800dc0e:	2d00      	cmp	r5, #0
 800dc10:	f040 808e 	bne.w	800dd30 <_printf_i+0x210>
 800dc14:	4665      	mov	r5, ip
 800dc16:	2a08      	cmp	r2, #8
 800dc18:	d10b      	bne.n	800dc32 <_printf_i+0x112>
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	07db      	lsls	r3, r3, #31
 800dc1e:	d508      	bpl.n	800dc32 <_printf_i+0x112>
 800dc20:	6923      	ldr	r3, [r4, #16]
 800dc22:	6862      	ldr	r2, [r4, #4]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	bfde      	ittt	le
 800dc28:	2330      	movle	r3, #48	; 0x30
 800dc2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc32:	ebac 0305 	sub.w	r3, ip, r5
 800dc36:	6123      	str	r3, [r4, #16]
 800dc38:	f8cd 8000 	str.w	r8, [sp]
 800dc3c:	463b      	mov	r3, r7
 800dc3e:	aa03      	add	r2, sp, #12
 800dc40:	4621      	mov	r1, r4
 800dc42:	4630      	mov	r0, r6
 800dc44:	f7ff fef6 	bl	800da34 <_printf_common>
 800dc48:	3001      	adds	r0, #1
 800dc4a:	d14d      	bne.n	800dce8 <_printf_i+0x1c8>
 800dc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc50:	b005      	add	sp, #20
 800dc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc56:	4839      	ldr	r0, [pc, #228]	; (800dd3c <_printf_i+0x21c>)
 800dc58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dc5c:	6813      	ldr	r3, [r2, #0]
 800dc5e:	6821      	ldr	r1, [r4, #0]
 800dc60:	1d1d      	adds	r5, r3, #4
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	6015      	str	r5, [r2, #0]
 800dc66:	060a      	lsls	r2, r1, #24
 800dc68:	d50b      	bpl.n	800dc82 <_printf_i+0x162>
 800dc6a:	07ca      	lsls	r2, r1, #31
 800dc6c:	bf44      	itt	mi
 800dc6e:	f041 0120 	orrmi.w	r1, r1, #32
 800dc72:	6021      	strmi	r1, [r4, #0]
 800dc74:	b91b      	cbnz	r3, 800dc7e <_printf_i+0x15e>
 800dc76:	6822      	ldr	r2, [r4, #0]
 800dc78:	f022 0220 	bic.w	r2, r2, #32
 800dc7c:	6022      	str	r2, [r4, #0]
 800dc7e:	2210      	movs	r2, #16
 800dc80:	e7b7      	b.n	800dbf2 <_printf_i+0xd2>
 800dc82:	064d      	lsls	r5, r1, #25
 800dc84:	bf48      	it	mi
 800dc86:	b29b      	uxthmi	r3, r3
 800dc88:	e7ef      	b.n	800dc6a <_printf_i+0x14a>
 800dc8a:	4665      	mov	r5, ip
 800dc8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dc90:	fb02 3311 	mls	r3, r2, r1, r3
 800dc94:	5cc3      	ldrb	r3, [r0, r3]
 800dc96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	2900      	cmp	r1, #0
 800dc9e:	d1f5      	bne.n	800dc8c <_printf_i+0x16c>
 800dca0:	e7b9      	b.n	800dc16 <_printf_i+0xf6>
 800dca2:	6813      	ldr	r3, [r2, #0]
 800dca4:	6825      	ldr	r5, [r4, #0]
 800dca6:	6961      	ldr	r1, [r4, #20]
 800dca8:	1d18      	adds	r0, r3, #4
 800dcaa:	6010      	str	r0, [r2, #0]
 800dcac:	0628      	lsls	r0, r5, #24
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	d501      	bpl.n	800dcb6 <_printf_i+0x196>
 800dcb2:	6019      	str	r1, [r3, #0]
 800dcb4:	e002      	b.n	800dcbc <_printf_i+0x19c>
 800dcb6:	066a      	lsls	r2, r5, #25
 800dcb8:	d5fb      	bpl.n	800dcb2 <_printf_i+0x192>
 800dcba:	8019      	strh	r1, [r3, #0]
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	4665      	mov	r5, ip
 800dcc2:	e7b9      	b.n	800dc38 <_printf_i+0x118>
 800dcc4:	6813      	ldr	r3, [r2, #0]
 800dcc6:	1d19      	adds	r1, r3, #4
 800dcc8:	6011      	str	r1, [r2, #0]
 800dcca:	681d      	ldr	r5, [r3, #0]
 800dccc:	6862      	ldr	r2, [r4, #4]
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f7f2 fa85 	bl	80001e0 <memchr>
 800dcd6:	b108      	cbz	r0, 800dcdc <_printf_i+0x1bc>
 800dcd8:	1b40      	subs	r0, r0, r5
 800dcda:	6060      	str	r0, [r4, #4]
 800dcdc:	6863      	ldr	r3, [r4, #4]
 800dcde:	6123      	str	r3, [r4, #16]
 800dce0:	2300      	movs	r3, #0
 800dce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dce6:	e7a7      	b.n	800dc38 <_printf_i+0x118>
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	462a      	mov	r2, r5
 800dcec:	4639      	mov	r1, r7
 800dcee:	4630      	mov	r0, r6
 800dcf0:	47c0      	blx	r8
 800dcf2:	3001      	adds	r0, #1
 800dcf4:	d0aa      	beq.n	800dc4c <_printf_i+0x12c>
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	079b      	lsls	r3, r3, #30
 800dcfa:	d413      	bmi.n	800dd24 <_printf_i+0x204>
 800dcfc:	68e0      	ldr	r0, [r4, #12]
 800dcfe:	9b03      	ldr	r3, [sp, #12]
 800dd00:	4298      	cmp	r0, r3
 800dd02:	bfb8      	it	lt
 800dd04:	4618      	movlt	r0, r3
 800dd06:	e7a3      	b.n	800dc50 <_printf_i+0x130>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	464a      	mov	r2, r9
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	4630      	mov	r0, r6
 800dd10:	47c0      	blx	r8
 800dd12:	3001      	adds	r0, #1
 800dd14:	d09a      	beq.n	800dc4c <_printf_i+0x12c>
 800dd16:	3501      	adds	r5, #1
 800dd18:	68e3      	ldr	r3, [r4, #12]
 800dd1a:	9a03      	ldr	r2, [sp, #12]
 800dd1c:	1a9b      	subs	r3, r3, r2
 800dd1e:	42ab      	cmp	r3, r5
 800dd20:	dcf2      	bgt.n	800dd08 <_printf_i+0x1e8>
 800dd22:	e7eb      	b.n	800dcfc <_printf_i+0x1dc>
 800dd24:	2500      	movs	r5, #0
 800dd26:	f104 0919 	add.w	r9, r4, #25
 800dd2a:	e7f5      	b.n	800dd18 <_printf_i+0x1f8>
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1ac      	bne.n	800dc8a <_printf_i+0x16a>
 800dd30:	7803      	ldrb	r3, [r0, #0]
 800dd32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd3a:	e76c      	b.n	800dc16 <_printf_i+0xf6>
 800dd3c:	0800f5bd 	.word	0x0800f5bd
 800dd40:	0800f5ce 	.word	0x0800f5ce

0800dd44 <memcpy>:
 800dd44:	b510      	push	{r4, lr}
 800dd46:	1e43      	subs	r3, r0, #1
 800dd48:	440a      	add	r2, r1
 800dd4a:	4291      	cmp	r1, r2
 800dd4c:	d100      	bne.n	800dd50 <memcpy+0xc>
 800dd4e:	bd10      	pop	{r4, pc}
 800dd50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd58:	e7f7      	b.n	800dd4a <memcpy+0x6>

0800dd5a <memmove>:
 800dd5a:	4288      	cmp	r0, r1
 800dd5c:	b510      	push	{r4, lr}
 800dd5e:	eb01 0302 	add.w	r3, r1, r2
 800dd62:	d807      	bhi.n	800dd74 <memmove+0x1a>
 800dd64:	1e42      	subs	r2, r0, #1
 800dd66:	4299      	cmp	r1, r3
 800dd68:	d00a      	beq.n	800dd80 <memmove+0x26>
 800dd6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800dd72:	e7f8      	b.n	800dd66 <memmove+0xc>
 800dd74:	4283      	cmp	r3, r0
 800dd76:	d9f5      	bls.n	800dd64 <memmove+0xa>
 800dd78:	1881      	adds	r1, r0, r2
 800dd7a:	1ad2      	subs	r2, r2, r3
 800dd7c:	42d3      	cmn	r3, r2
 800dd7e:	d100      	bne.n	800dd82 <memmove+0x28>
 800dd80:	bd10      	pop	{r4, pc}
 800dd82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd86:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dd8a:	e7f7      	b.n	800dd7c <memmove+0x22>

0800dd8c <_realloc_r>:
 800dd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd8e:	4607      	mov	r7, r0
 800dd90:	4614      	mov	r4, r2
 800dd92:	460e      	mov	r6, r1
 800dd94:	b921      	cbnz	r1, 800dda0 <_realloc_r+0x14>
 800dd96:	4611      	mov	r1, r2
 800dd98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dd9c:	f7ff bc6c 	b.w	800d678 <_malloc_r>
 800dda0:	b922      	cbnz	r2, 800ddac <_realloc_r+0x20>
 800dda2:	f7ff fc1b 	bl	800d5dc <_free_r>
 800dda6:	4625      	mov	r5, r4
 800dda8:	4628      	mov	r0, r5
 800ddaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddac:	f000 f814 	bl	800ddd8 <_malloc_usable_size_r>
 800ddb0:	42a0      	cmp	r0, r4
 800ddb2:	d20f      	bcs.n	800ddd4 <_realloc_r+0x48>
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	4638      	mov	r0, r7
 800ddb8:	f7ff fc5e 	bl	800d678 <_malloc_r>
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d0f2      	beq.n	800dda8 <_realloc_r+0x1c>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	4622      	mov	r2, r4
 800ddc6:	f7ff ffbd 	bl	800dd44 <memcpy>
 800ddca:	4631      	mov	r1, r6
 800ddcc:	4638      	mov	r0, r7
 800ddce:	f7ff fc05 	bl	800d5dc <_free_r>
 800ddd2:	e7e9      	b.n	800dda8 <_realloc_r+0x1c>
 800ddd4:	4635      	mov	r5, r6
 800ddd6:	e7e7      	b.n	800dda8 <_realloc_r+0x1c>

0800ddd8 <_malloc_usable_size_r>:
 800ddd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dddc:	1f18      	subs	r0, r3, #4
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bfbc      	itt	lt
 800dde2:	580b      	ldrlt	r3, [r1, r0]
 800dde4:	18c0      	addlt	r0, r0, r3
 800dde6:	4770      	bx	lr

0800dde8 <sin>:
 800dde8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddea:	ec51 0b10 	vmov	r0, r1, d0
 800ddee:	4a20      	ldr	r2, [pc, #128]	; (800de70 <sin+0x88>)
 800ddf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	dc07      	bgt.n	800de08 <sin+0x20>
 800ddf8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800de68 <sin+0x80>
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	f001 f9ab 	bl	800f158 <__kernel_sin>
 800de02:	ec51 0b10 	vmov	r0, r1, d0
 800de06:	e007      	b.n	800de18 <sin+0x30>
 800de08:	4a1a      	ldr	r2, [pc, #104]	; (800de74 <sin+0x8c>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	dd09      	ble.n	800de22 <sin+0x3a>
 800de0e:	ee10 2a10 	vmov	r2, s0
 800de12:	460b      	mov	r3, r1
 800de14:	f7f2 fa38 	bl	8000288 <__aeabi_dsub>
 800de18:	ec41 0b10 	vmov	d0, r0, r1
 800de1c:	b005      	add	sp, #20
 800de1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800de22:	4668      	mov	r0, sp
 800de24:	f000 faec 	bl	800e400 <__ieee754_rem_pio2>
 800de28:	f000 0003 	and.w	r0, r0, #3
 800de2c:	2801      	cmp	r0, #1
 800de2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de32:	ed9d 0b00 	vldr	d0, [sp]
 800de36:	d004      	beq.n	800de42 <sin+0x5a>
 800de38:	2802      	cmp	r0, #2
 800de3a:	d005      	beq.n	800de48 <sin+0x60>
 800de3c:	b970      	cbnz	r0, 800de5c <sin+0x74>
 800de3e:	2001      	movs	r0, #1
 800de40:	e7dd      	b.n	800ddfe <sin+0x16>
 800de42:	f000 fd81 	bl	800e948 <__kernel_cos>
 800de46:	e7dc      	b.n	800de02 <sin+0x1a>
 800de48:	2001      	movs	r0, #1
 800de4a:	f001 f985 	bl	800f158 <__kernel_sin>
 800de4e:	ec53 2b10 	vmov	r2, r3, d0
 800de52:	ee10 0a10 	vmov	r0, s0
 800de56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de5a:	e7dd      	b.n	800de18 <sin+0x30>
 800de5c:	f000 fd74 	bl	800e948 <__kernel_cos>
 800de60:	e7f5      	b.n	800de4e <sin+0x66>
 800de62:	bf00      	nop
 800de64:	f3af 8000 	nop.w
	...
 800de70:	3fe921fb 	.word	0x3fe921fb
 800de74:	7fefffff 	.word	0x7fefffff

0800de78 <asin>:
 800de78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de7a:	ed2d 8b02 	vpush	{d8}
 800de7e:	4e26      	ldr	r6, [pc, #152]	; (800df18 <asin+0xa0>)
 800de80:	b08b      	sub	sp, #44	; 0x2c
 800de82:	ec55 4b10 	vmov	r4, r5, d0
 800de86:	f000 f8ab 	bl	800dfe0 <__ieee754_asin>
 800de8a:	f996 3000 	ldrsb.w	r3, [r6]
 800de8e:	eeb0 8a40 	vmov.f32	s16, s0
 800de92:	eef0 8a60 	vmov.f32	s17, s1
 800de96:	3301      	adds	r3, #1
 800de98:	d036      	beq.n	800df08 <asin+0x90>
 800de9a:	4622      	mov	r2, r4
 800de9c:	462b      	mov	r3, r5
 800de9e:	4620      	mov	r0, r4
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7f2 fe43 	bl	8000b2c <__aeabi_dcmpun>
 800dea6:	4607      	mov	r7, r0
 800dea8:	bb70      	cbnz	r0, 800df08 <asin+0x90>
 800deaa:	ec45 4b10 	vmov	d0, r4, r5
 800deae:	f001 fa0d 	bl	800f2cc <fabs>
 800deb2:	2200      	movs	r2, #0
 800deb4:	4b19      	ldr	r3, [pc, #100]	; (800df1c <asin+0xa4>)
 800deb6:	ec51 0b10 	vmov	r0, r1, d0
 800deba:	f7f2 fe2d 	bl	8000b18 <__aeabi_dcmpgt>
 800debe:	b318      	cbz	r0, 800df08 <asin+0x90>
 800dec0:	2301      	movs	r3, #1
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	4816      	ldr	r0, [pc, #88]	; (800df20 <asin+0xa8>)
 800dec6:	4b17      	ldr	r3, [pc, #92]	; (800df24 <asin+0xac>)
 800dec8:	9301      	str	r3, [sp, #4]
 800deca:	9708      	str	r7, [sp, #32]
 800decc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ded0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ded4:	f001 fa8c 	bl	800f3f0 <nan>
 800ded8:	f996 3000 	ldrsb.w	r3, [r6]
 800dedc:	2b02      	cmp	r3, #2
 800dede:	ed8d 0b06 	vstr	d0, [sp, #24]
 800dee2:	d104      	bne.n	800deee <asin+0x76>
 800dee4:	f7ff fb38 	bl	800d558 <__errno>
 800dee8:	2321      	movs	r3, #33	; 0x21
 800deea:	6003      	str	r3, [r0, #0]
 800deec:	e004      	b.n	800def8 <asin+0x80>
 800deee:	4668      	mov	r0, sp
 800def0:	f001 fa7a 	bl	800f3e8 <matherr>
 800def4:	2800      	cmp	r0, #0
 800def6:	d0f5      	beq.n	800dee4 <asin+0x6c>
 800def8:	9b08      	ldr	r3, [sp, #32]
 800defa:	b11b      	cbz	r3, 800df04 <asin+0x8c>
 800defc:	f7ff fb2c 	bl	800d558 <__errno>
 800df00:	9b08      	ldr	r3, [sp, #32]
 800df02:	6003      	str	r3, [r0, #0]
 800df04:	ed9d 8b06 	vldr	d8, [sp, #24]
 800df08:	eeb0 0a48 	vmov.f32	s0, s16
 800df0c:	eef0 0a68 	vmov.f32	s1, s17
 800df10:	b00b      	add	sp, #44	; 0x2c
 800df12:	ecbd 8b02 	vpop	{d8}
 800df16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df18:	20000200 	.word	0x20000200
 800df1c:	3ff00000 	.word	0x3ff00000
 800df20:	0800f5b1 	.word	0x0800f5b1
 800df24:	0800f5df 	.word	0x0800f5df

0800df28 <sqrt>:
 800df28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df2c:	ed2d 8b02 	vpush	{d8}
 800df30:	b08b      	sub	sp, #44	; 0x2c
 800df32:	ec55 4b10 	vmov	r4, r5, d0
 800df36:	f000 fc55 	bl	800e7e4 <__ieee754_sqrt>
 800df3a:	4b26      	ldr	r3, [pc, #152]	; (800dfd4 <sqrt+0xac>)
 800df3c:	eeb0 8a40 	vmov.f32	s16, s0
 800df40:	eef0 8a60 	vmov.f32	s17, s1
 800df44:	f993 6000 	ldrsb.w	r6, [r3]
 800df48:	1c73      	adds	r3, r6, #1
 800df4a:	d02a      	beq.n	800dfa2 <sqrt+0x7a>
 800df4c:	4622      	mov	r2, r4
 800df4e:	462b      	mov	r3, r5
 800df50:	4620      	mov	r0, r4
 800df52:	4629      	mov	r1, r5
 800df54:	f7f2 fdea 	bl	8000b2c <__aeabi_dcmpun>
 800df58:	4607      	mov	r7, r0
 800df5a:	bb10      	cbnz	r0, 800dfa2 <sqrt+0x7a>
 800df5c:	f04f 0800 	mov.w	r8, #0
 800df60:	f04f 0900 	mov.w	r9, #0
 800df64:	4642      	mov	r2, r8
 800df66:	464b      	mov	r3, r9
 800df68:	4620      	mov	r0, r4
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7f2 fdb6 	bl	8000adc <__aeabi_dcmplt>
 800df70:	b1b8      	cbz	r0, 800dfa2 <sqrt+0x7a>
 800df72:	2301      	movs	r3, #1
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	4b18      	ldr	r3, [pc, #96]	; (800dfd8 <sqrt+0xb0>)
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	9708      	str	r7, [sp, #32]
 800df7c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800df80:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800df84:	b9b6      	cbnz	r6, 800dfb4 <sqrt+0x8c>
 800df86:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800df8a:	4668      	mov	r0, sp
 800df8c:	f001 fa2c 	bl	800f3e8 <matherr>
 800df90:	b1d0      	cbz	r0, 800dfc8 <sqrt+0xa0>
 800df92:	9b08      	ldr	r3, [sp, #32]
 800df94:	b11b      	cbz	r3, 800df9e <sqrt+0x76>
 800df96:	f7ff fadf 	bl	800d558 <__errno>
 800df9a:	9b08      	ldr	r3, [sp, #32]
 800df9c:	6003      	str	r3, [r0, #0]
 800df9e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800dfa2:	eeb0 0a48 	vmov.f32	s0, s16
 800dfa6:	eef0 0a68 	vmov.f32	s1, s17
 800dfaa:	b00b      	add	sp, #44	; 0x2c
 800dfac:	ecbd 8b02 	vpop	{d8}
 800dfb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfb4:	4642      	mov	r2, r8
 800dfb6:	464b      	mov	r3, r9
 800dfb8:	4640      	mov	r0, r8
 800dfba:	4649      	mov	r1, r9
 800dfbc:	f7f2 fc46 	bl	800084c <__aeabi_ddiv>
 800dfc0:	2e02      	cmp	r6, #2
 800dfc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dfc6:	d1e0      	bne.n	800df8a <sqrt+0x62>
 800dfc8:	f7ff fac6 	bl	800d558 <__errno>
 800dfcc:	2321      	movs	r3, #33	; 0x21
 800dfce:	6003      	str	r3, [r0, #0]
 800dfd0:	e7df      	b.n	800df92 <sqrt+0x6a>
 800dfd2:	bf00      	nop
 800dfd4:	20000200 	.word	0x20000200
 800dfd8:	0800f5e4 	.word	0x0800f5e4
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <__ieee754_asin>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	ec55 4b10 	vmov	r4, r5, d0
 800dfe8:	4bcb      	ldr	r3, [pc, #812]	; (800e318 <__ieee754_asin+0x338>)
 800dfea:	b087      	sub	sp, #28
 800dfec:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800dff0:	429f      	cmp	r7, r3
 800dff2:	9501      	str	r5, [sp, #4]
 800dff4:	dd31      	ble.n	800e05a <__ieee754_asin+0x7a>
 800dff6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800dffa:	ee10 3a10 	vmov	r3, s0
 800dffe:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800e002:	433b      	orrs	r3, r7
 800e004:	d117      	bne.n	800e036 <__ieee754_asin+0x56>
 800e006:	a3aa      	add	r3, pc, #680	; (adr r3, 800e2b0 <__ieee754_asin+0x2d0>)
 800e008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00c:	ee10 0a10 	vmov	r0, s0
 800e010:	4629      	mov	r1, r5
 800e012:	f7f2 faf1 	bl	80005f8 <__aeabi_dmul>
 800e016:	a3a8      	add	r3, pc, #672	; (adr r3, 800e2b8 <__ieee754_asin+0x2d8>)
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	4606      	mov	r6, r0
 800e01e:	460f      	mov	r7, r1
 800e020:	4620      	mov	r0, r4
 800e022:	4629      	mov	r1, r5
 800e024:	f7f2 fae8 	bl	80005f8 <__aeabi_dmul>
 800e028:	4602      	mov	r2, r0
 800e02a:	460b      	mov	r3, r1
 800e02c:	4630      	mov	r0, r6
 800e02e:	4639      	mov	r1, r7
 800e030:	f7f2 f92c 	bl	800028c <__adddf3>
 800e034:	e00a      	b.n	800e04c <__ieee754_asin+0x6c>
 800e036:	ee10 2a10 	vmov	r2, s0
 800e03a:	462b      	mov	r3, r5
 800e03c:	4620      	mov	r0, r4
 800e03e:	4629      	mov	r1, r5
 800e040:	f7f2 f922 	bl	8000288 <__aeabi_dsub>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	f7f2 fc00 	bl	800084c <__aeabi_ddiv>
 800e04c:	4604      	mov	r4, r0
 800e04e:	460d      	mov	r5, r1
 800e050:	ec45 4b10 	vmov	d0, r4, r5
 800e054:	b007      	add	sp, #28
 800e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05a:	4bb0      	ldr	r3, [pc, #704]	; (800e31c <__ieee754_asin+0x33c>)
 800e05c:	429f      	cmp	r7, r3
 800e05e:	dc11      	bgt.n	800e084 <__ieee754_asin+0xa4>
 800e060:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800e064:	f280 80ae 	bge.w	800e1c4 <__ieee754_asin+0x1e4>
 800e068:	a395      	add	r3, pc, #596	; (adr r3, 800e2c0 <__ieee754_asin+0x2e0>)
 800e06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06e:	ee10 0a10 	vmov	r0, s0
 800e072:	4629      	mov	r1, r5
 800e074:	f7f2 f90a 	bl	800028c <__adddf3>
 800e078:	2200      	movs	r2, #0
 800e07a:	4ba9      	ldr	r3, [pc, #676]	; (800e320 <__ieee754_asin+0x340>)
 800e07c:	f7f2 fd4c 	bl	8000b18 <__aeabi_dcmpgt>
 800e080:	2800      	cmp	r0, #0
 800e082:	d1e5      	bne.n	800e050 <__ieee754_asin+0x70>
 800e084:	ec45 4b10 	vmov	d0, r4, r5
 800e088:	f001 f920 	bl	800f2cc <fabs>
 800e08c:	2000      	movs	r0, #0
 800e08e:	ec53 2b10 	vmov	r2, r3, d0
 800e092:	49a3      	ldr	r1, [pc, #652]	; (800e320 <__ieee754_asin+0x340>)
 800e094:	f7f2 f8f8 	bl	8000288 <__aeabi_dsub>
 800e098:	2200      	movs	r2, #0
 800e09a:	4ba2      	ldr	r3, [pc, #648]	; (800e324 <__ieee754_asin+0x344>)
 800e09c:	f7f2 faac 	bl	80005f8 <__aeabi_dmul>
 800e0a0:	a389      	add	r3, pc, #548	; (adr r3, 800e2c8 <__ieee754_asin+0x2e8>)
 800e0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	460d      	mov	r5, r1
 800e0aa:	f7f2 faa5 	bl	80005f8 <__aeabi_dmul>
 800e0ae:	a388      	add	r3, pc, #544	; (adr r3, 800e2d0 <__ieee754_asin+0x2f0>)
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	f7f2 f8ea 	bl	800028c <__adddf3>
 800e0b8:	4622      	mov	r2, r4
 800e0ba:	462b      	mov	r3, r5
 800e0bc:	f7f2 fa9c 	bl	80005f8 <__aeabi_dmul>
 800e0c0:	a385      	add	r3, pc, #532	; (adr r3, 800e2d8 <__ieee754_asin+0x2f8>)
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	f7f2 f8df 	bl	8000288 <__aeabi_dsub>
 800e0ca:	4622      	mov	r2, r4
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	f7f2 fa93 	bl	80005f8 <__aeabi_dmul>
 800e0d2:	a383      	add	r3, pc, #524	; (adr r3, 800e2e0 <__ieee754_asin+0x300>)
 800e0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d8:	f7f2 f8d8 	bl	800028c <__adddf3>
 800e0dc:	4622      	mov	r2, r4
 800e0de:	462b      	mov	r3, r5
 800e0e0:	f7f2 fa8a 	bl	80005f8 <__aeabi_dmul>
 800e0e4:	a380      	add	r3, pc, #512	; (adr r3, 800e2e8 <__ieee754_asin+0x308>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	f7f2 f8cd 	bl	8000288 <__aeabi_dsub>
 800e0ee:	4622      	mov	r2, r4
 800e0f0:	462b      	mov	r3, r5
 800e0f2:	f7f2 fa81 	bl	80005f8 <__aeabi_dmul>
 800e0f6:	a37e      	add	r3, pc, #504	; (adr r3, 800e2f0 <__ieee754_asin+0x310>)
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	f7f2 f8c6 	bl	800028c <__adddf3>
 800e100:	4622      	mov	r2, r4
 800e102:	462b      	mov	r3, r5
 800e104:	f7f2 fa78 	bl	80005f8 <__aeabi_dmul>
 800e108:	a37b      	add	r3, pc, #492	; (adr r3, 800e2f8 <__ieee754_asin+0x318>)
 800e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10e:	4680      	mov	r8, r0
 800e110:	4689      	mov	r9, r1
 800e112:	4620      	mov	r0, r4
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 fa6f 	bl	80005f8 <__aeabi_dmul>
 800e11a:	a379      	add	r3, pc, #484	; (adr r3, 800e300 <__ieee754_asin+0x320>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f7f2 f8b2 	bl	8000288 <__aeabi_dsub>
 800e124:	4622      	mov	r2, r4
 800e126:	462b      	mov	r3, r5
 800e128:	f7f2 fa66 	bl	80005f8 <__aeabi_dmul>
 800e12c:	a376      	add	r3, pc, #472	; (adr r3, 800e308 <__ieee754_asin+0x328>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	f7f2 f8ab 	bl	800028c <__adddf3>
 800e136:	4622      	mov	r2, r4
 800e138:	462b      	mov	r3, r5
 800e13a:	f7f2 fa5d 	bl	80005f8 <__aeabi_dmul>
 800e13e:	a374      	add	r3, pc, #464	; (adr r3, 800e310 <__ieee754_asin+0x330>)
 800e140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e144:	f7f2 f8a0 	bl	8000288 <__aeabi_dsub>
 800e148:	4622      	mov	r2, r4
 800e14a:	462b      	mov	r3, r5
 800e14c:	f7f2 fa54 	bl	80005f8 <__aeabi_dmul>
 800e150:	4b73      	ldr	r3, [pc, #460]	; (800e320 <__ieee754_asin+0x340>)
 800e152:	2200      	movs	r2, #0
 800e154:	f7f2 f89a 	bl	800028c <__adddf3>
 800e158:	ec45 4b10 	vmov	d0, r4, r5
 800e15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e160:	f000 fb40 	bl	800e7e4 <__ieee754_sqrt>
 800e164:	4b70      	ldr	r3, [pc, #448]	; (800e328 <__ieee754_asin+0x348>)
 800e166:	429f      	cmp	r7, r3
 800e168:	ec5b ab10 	vmov	sl, fp, d0
 800e16c:	f340 80de 	ble.w	800e32c <__ieee754_asin+0x34c>
 800e170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e174:	4640      	mov	r0, r8
 800e176:	4649      	mov	r1, r9
 800e178:	f7f2 fb68 	bl	800084c <__aeabi_ddiv>
 800e17c:	4652      	mov	r2, sl
 800e17e:	465b      	mov	r3, fp
 800e180:	f7f2 fa3a 	bl	80005f8 <__aeabi_dmul>
 800e184:	4652      	mov	r2, sl
 800e186:	465b      	mov	r3, fp
 800e188:	f7f2 f880 	bl	800028c <__adddf3>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	f7f2 f87c 	bl	800028c <__adddf3>
 800e194:	a348      	add	r3, pc, #288	; (adr r3, 800e2b8 <__ieee754_asin+0x2d8>)
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	f7f2 f875 	bl	8000288 <__aeabi_dsub>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	a143      	add	r1, pc, #268	; (adr r1, 800e2b0 <__ieee754_asin+0x2d0>)
 800e1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1a8:	f7f2 f86e 	bl	8000288 <__aeabi_dsub>
 800e1ac:	9b01      	ldr	r3, [sp, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bfdc      	itt	le
 800e1b2:	4602      	movle	r2, r0
 800e1b4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	460d      	mov	r5, r1
 800e1bc:	bfdc      	itt	le
 800e1be:	4614      	movle	r4, r2
 800e1c0:	461d      	movle	r5, r3
 800e1c2:	e745      	b.n	800e050 <__ieee754_asin+0x70>
 800e1c4:	ee10 2a10 	vmov	r2, s0
 800e1c8:	ee10 0a10 	vmov	r0, s0
 800e1cc:	462b      	mov	r3, r5
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	f7f2 fa12 	bl	80005f8 <__aeabi_dmul>
 800e1d4:	a33c      	add	r3, pc, #240	; (adr r3, 800e2c8 <__ieee754_asin+0x2e8>)
 800e1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1da:	4606      	mov	r6, r0
 800e1dc:	460f      	mov	r7, r1
 800e1de:	f7f2 fa0b 	bl	80005f8 <__aeabi_dmul>
 800e1e2:	a33b      	add	r3, pc, #236	; (adr r3, 800e2d0 <__ieee754_asin+0x2f0>)
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	f7f2 f850 	bl	800028c <__adddf3>
 800e1ec:	4632      	mov	r2, r6
 800e1ee:	463b      	mov	r3, r7
 800e1f0:	f7f2 fa02 	bl	80005f8 <__aeabi_dmul>
 800e1f4:	a338      	add	r3, pc, #224	; (adr r3, 800e2d8 <__ieee754_asin+0x2f8>)
 800e1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fa:	f7f2 f845 	bl	8000288 <__aeabi_dsub>
 800e1fe:	4632      	mov	r2, r6
 800e200:	463b      	mov	r3, r7
 800e202:	f7f2 f9f9 	bl	80005f8 <__aeabi_dmul>
 800e206:	a336      	add	r3, pc, #216	; (adr r3, 800e2e0 <__ieee754_asin+0x300>)
 800e208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20c:	f7f2 f83e 	bl	800028c <__adddf3>
 800e210:	4632      	mov	r2, r6
 800e212:	463b      	mov	r3, r7
 800e214:	f7f2 f9f0 	bl	80005f8 <__aeabi_dmul>
 800e218:	a333      	add	r3, pc, #204	; (adr r3, 800e2e8 <__ieee754_asin+0x308>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	f7f2 f833 	bl	8000288 <__aeabi_dsub>
 800e222:	4632      	mov	r2, r6
 800e224:	463b      	mov	r3, r7
 800e226:	f7f2 f9e7 	bl	80005f8 <__aeabi_dmul>
 800e22a:	a331      	add	r3, pc, #196	; (adr r3, 800e2f0 <__ieee754_asin+0x310>)
 800e22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e230:	f7f2 f82c 	bl	800028c <__adddf3>
 800e234:	4632      	mov	r2, r6
 800e236:	463b      	mov	r3, r7
 800e238:	f7f2 f9de 	bl	80005f8 <__aeabi_dmul>
 800e23c:	a32e      	add	r3, pc, #184	; (adr r3, 800e2f8 <__ieee754_asin+0x318>)
 800e23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e242:	4680      	mov	r8, r0
 800e244:	4689      	mov	r9, r1
 800e246:	4630      	mov	r0, r6
 800e248:	4639      	mov	r1, r7
 800e24a:	f7f2 f9d5 	bl	80005f8 <__aeabi_dmul>
 800e24e:	a32c      	add	r3, pc, #176	; (adr r3, 800e300 <__ieee754_asin+0x320>)
 800e250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e254:	f7f2 f818 	bl	8000288 <__aeabi_dsub>
 800e258:	4632      	mov	r2, r6
 800e25a:	463b      	mov	r3, r7
 800e25c:	f7f2 f9cc 	bl	80005f8 <__aeabi_dmul>
 800e260:	a329      	add	r3, pc, #164	; (adr r3, 800e308 <__ieee754_asin+0x328>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	f7f2 f811 	bl	800028c <__adddf3>
 800e26a:	4632      	mov	r2, r6
 800e26c:	463b      	mov	r3, r7
 800e26e:	f7f2 f9c3 	bl	80005f8 <__aeabi_dmul>
 800e272:	a327      	add	r3, pc, #156	; (adr r3, 800e310 <__ieee754_asin+0x330>)
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	f7f2 f806 	bl	8000288 <__aeabi_dsub>
 800e27c:	4632      	mov	r2, r6
 800e27e:	463b      	mov	r3, r7
 800e280:	f7f2 f9ba 	bl	80005f8 <__aeabi_dmul>
 800e284:	2200      	movs	r2, #0
 800e286:	4b26      	ldr	r3, [pc, #152]	; (800e320 <__ieee754_asin+0x340>)
 800e288:	f7f2 f800 	bl	800028c <__adddf3>
 800e28c:	4602      	mov	r2, r0
 800e28e:	460b      	mov	r3, r1
 800e290:	4640      	mov	r0, r8
 800e292:	4649      	mov	r1, r9
 800e294:	f7f2 fada 	bl	800084c <__aeabi_ddiv>
 800e298:	4622      	mov	r2, r4
 800e29a:	462b      	mov	r3, r5
 800e29c:	f7f2 f9ac 	bl	80005f8 <__aeabi_dmul>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	e6c2      	b.n	800e030 <__ieee754_asin+0x50>
 800e2aa:	bf00      	nop
 800e2ac:	f3af 8000 	nop.w
 800e2b0:	54442d18 	.word	0x54442d18
 800e2b4:	3ff921fb 	.word	0x3ff921fb
 800e2b8:	33145c07 	.word	0x33145c07
 800e2bc:	3c91a626 	.word	0x3c91a626
 800e2c0:	8800759c 	.word	0x8800759c
 800e2c4:	7e37e43c 	.word	0x7e37e43c
 800e2c8:	0dfdf709 	.word	0x0dfdf709
 800e2cc:	3f023de1 	.word	0x3f023de1
 800e2d0:	7501b288 	.word	0x7501b288
 800e2d4:	3f49efe0 	.word	0x3f49efe0
 800e2d8:	b5688f3b 	.word	0xb5688f3b
 800e2dc:	3fa48228 	.word	0x3fa48228
 800e2e0:	0e884455 	.word	0x0e884455
 800e2e4:	3fc9c155 	.word	0x3fc9c155
 800e2e8:	03eb6f7d 	.word	0x03eb6f7d
 800e2ec:	3fd4d612 	.word	0x3fd4d612
 800e2f0:	55555555 	.word	0x55555555
 800e2f4:	3fc55555 	.word	0x3fc55555
 800e2f8:	b12e9282 	.word	0xb12e9282
 800e2fc:	3fb3b8c5 	.word	0x3fb3b8c5
 800e300:	1b8d0159 	.word	0x1b8d0159
 800e304:	3fe6066c 	.word	0x3fe6066c
 800e308:	9c598ac8 	.word	0x9c598ac8
 800e30c:	40002ae5 	.word	0x40002ae5
 800e310:	1c8a2d4b 	.word	0x1c8a2d4b
 800e314:	40033a27 	.word	0x40033a27
 800e318:	3fefffff 	.word	0x3fefffff
 800e31c:	3fdfffff 	.word	0x3fdfffff
 800e320:	3ff00000 	.word	0x3ff00000
 800e324:	3fe00000 	.word	0x3fe00000
 800e328:	3fef3332 	.word	0x3fef3332
 800e32c:	ee10 2a10 	vmov	r2, s0
 800e330:	ee10 0a10 	vmov	r0, s0
 800e334:	465b      	mov	r3, fp
 800e336:	4659      	mov	r1, fp
 800e338:	f7f1 ffa8 	bl	800028c <__adddf3>
 800e33c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e344:	4640      	mov	r0, r8
 800e346:	4649      	mov	r1, r9
 800e348:	f7f2 fa80 	bl	800084c <__aeabi_ddiv>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e354:	f7f2 f950 	bl	80005f8 <__aeabi_dmul>
 800e358:	2600      	movs	r6, #0
 800e35a:	4680      	mov	r8, r0
 800e35c:	4689      	mov	r9, r1
 800e35e:	4632      	mov	r2, r6
 800e360:	465b      	mov	r3, fp
 800e362:	4630      	mov	r0, r6
 800e364:	4659      	mov	r1, fp
 800e366:	f7f2 f947 	bl	80005f8 <__aeabi_dmul>
 800e36a:	4602      	mov	r2, r0
 800e36c:	460b      	mov	r3, r1
 800e36e:	4620      	mov	r0, r4
 800e370:	4629      	mov	r1, r5
 800e372:	f7f1 ff89 	bl	8000288 <__aeabi_dsub>
 800e376:	4632      	mov	r2, r6
 800e378:	4604      	mov	r4, r0
 800e37a:	460d      	mov	r5, r1
 800e37c:	465b      	mov	r3, fp
 800e37e:	4650      	mov	r0, sl
 800e380:	4659      	mov	r1, fp
 800e382:	f7f1 ff83 	bl	800028c <__adddf3>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	4620      	mov	r0, r4
 800e38c:	4629      	mov	r1, r5
 800e38e:	f7f2 fa5d 	bl	800084c <__aeabi_ddiv>
 800e392:	4602      	mov	r2, r0
 800e394:	460b      	mov	r3, r1
 800e396:	f7f1 ff79 	bl	800028c <__adddf3>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	a114      	add	r1, pc, #80	; (adr r1, 800e3f0 <__ieee754_asin+0x410>)
 800e3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3a4:	f7f1 ff70 	bl	8000288 <__aeabi_dsub>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4640      	mov	r0, r8
 800e3ae:	4649      	mov	r1, r9
 800e3b0:	f7f1 ff6a 	bl	8000288 <__aeabi_dsub>
 800e3b4:	465f      	mov	r7, fp
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	460d      	mov	r5, r1
 800e3ba:	4632      	mov	r2, r6
 800e3bc:	465b      	mov	r3, fp
 800e3be:	4630      	mov	r0, r6
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	f7f1 ff63 	bl	800028c <__adddf3>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	a10b      	add	r1, pc, #44	; (adr r1, 800e3f8 <__ieee754_asin+0x418>)
 800e3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3d0:	f7f1 ff5a 	bl	8000288 <__aeabi_dsub>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	4620      	mov	r0, r4
 800e3da:	4629      	mov	r1, r5
 800e3dc:	f7f1 ff54 	bl	8000288 <__aeabi_dsub>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	a104      	add	r1, pc, #16	; (adr r1, 800e3f8 <__ieee754_asin+0x418>)
 800e3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3ea:	e6dd      	b.n	800e1a8 <__ieee754_asin+0x1c8>
 800e3ec:	f3af 8000 	nop.w
 800e3f0:	33145c07 	.word	0x33145c07
 800e3f4:	3c91a626 	.word	0x3c91a626
 800e3f8:	54442d18 	.word	0x54442d18
 800e3fc:	3fe921fb 	.word	0x3fe921fb

0800e400 <__ieee754_rem_pio2>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	ec57 6b10 	vmov	r6, r7, d0
 800e408:	4bc3      	ldr	r3, [pc, #780]	; (800e718 <__ieee754_rem_pio2+0x318>)
 800e40a:	b08d      	sub	sp, #52	; 0x34
 800e40c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e410:	4598      	cmp	r8, r3
 800e412:	4604      	mov	r4, r0
 800e414:	9704      	str	r7, [sp, #16]
 800e416:	dc07      	bgt.n	800e428 <__ieee754_rem_pio2+0x28>
 800e418:	2200      	movs	r2, #0
 800e41a:	2300      	movs	r3, #0
 800e41c:	ed84 0b00 	vstr	d0, [r4]
 800e420:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e424:	2500      	movs	r5, #0
 800e426:	e027      	b.n	800e478 <__ieee754_rem_pio2+0x78>
 800e428:	4bbc      	ldr	r3, [pc, #752]	; (800e71c <__ieee754_rem_pio2+0x31c>)
 800e42a:	4598      	cmp	r8, r3
 800e42c:	dc75      	bgt.n	800e51a <__ieee754_rem_pio2+0x11a>
 800e42e:	9b04      	ldr	r3, [sp, #16]
 800e430:	4dbb      	ldr	r5, [pc, #748]	; (800e720 <__ieee754_rem_pio2+0x320>)
 800e432:	2b00      	cmp	r3, #0
 800e434:	ee10 0a10 	vmov	r0, s0
 800e438:	a3a9      	add	r3, pc, #676	; (adr r3, 800e6e0 <__ieee754_rem_pio2+0x2e0>)
 800e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43e:	4639      	mov	r1, r7
 800e440:	dd36      	ble.n	800e4b0 <__ieee754_rem_pio2+0xb0>
 800e442:	f7f1 ff21 	bl	8000288 <__aeabi_dsub>
 800e446:	45a8      	cmp	r8, r5
 800e448:	4606      	mov	r6, r0
 800e44a:	460f      	mov	r7, r1
 800e44c:	d018      	beq.n	800e480 <__ieee754_rem_pio2+0x80>
 800e44e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e6e8 <__ieee754_rem_pio2+0x2e8>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	f7f1 ff18 	bl	8000288 <__aeabi_dsub>
 800e458:	4602      	mov	r2, r0
 800e45a:	460b      	mov	r3, r1
 800e45c:	e9c4 2300 	strd	r2, r3, [r4]
 800e460:	4630      	mov	r0, r6
 800e462:	4639      	mov	r1, r7
 800e464:	f7f1 ff10 	bl	8000288 <__aeabi_dsub>
 800e468:	a39f      	add	r3, pc, #636	; (adr r3, 800e6e8 <__ieee754_rem_pio2+0x2e8>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	f7f1 ff0b 	bl	8000288 <__aeabi_dsub>
 800e472:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e476:	2501      	movs	r5, #1
 800e478:	4628      	mov	r0, r5
 800e47a:	b00d      	add	sp, #52	; 0x34
 800e47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e480:	a39b      	add	r3, pc, #620	; (adr r3, 800e6f0 <__ieee754_rem_pio2+0x2f0>)
 800e482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e486:	f7f1 feff 	bl	8000288 <__aeabi_dsub>
 800e48a:	a39b      	add	r3, pc, #620	; (adr r3, 800e6f8 <__ieee754_rem_pio2+0x2f8>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	4606      	mov	r6, r0
 800e492:	460f      	mov	r7, r1
 800e494:	f7f1 fef8 	bl	8000288 <__aeabi_dsub>
 800e498:	4602      	mov	r2, r0
 800e49a:	460b      	mov	r3, r1
 800e49c:	e9c4 2300 	strd	r2, r3, [r4]
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	4639      	mov	r1, r7
 800e4a4:	f7f1 fef0 	bl	8000288 <__aeabi_dsub>
 800e4a8:	a393      	add	r3, pc, #588	; (adr r3, 800e6f8 <__ieee754_rem_pio2+0x2f8>)
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	e7de      	b.n	800e46e <__ieee754_rem_pio2+0x6e>
 800e4b0:	f7f1 feec 	bl	800028c <__adddf3>
 800e4b4:	45a8      	cmp	r8, r5
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	460f      	mov	r7, r1
 800e4ba:	d016      	beq.n	800e4ea <__ieee754_rem_pio2+0xea>
 800e4bc:	a38a      	add	r3, pc, #552	; (adr r3, 800e6e8 <__ieee754_rem_pio2+0x2e8>)
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	f7f1 fee3 	bl	800028c <__adddf3>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	e9c4 2300 	strd	r2, r3, [r4]
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	f7f1 fed9 	bl	8000288 <__aeabi_dsub>
 800e4d6:	a384      	add	r3, pc, #528	; (adr r3, 800e6e8 <__ieee754_rem_pio2+0x2e8>)
 800e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4dc:	f7f1 fed6 	bl	800028c <__adddf3>
 800e4e0:	f04f 35ff 	mov.w	r5, #4294967295
 800e4e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e4e8:	e7c6      	b.n	800e478 <__ieee754_rem_pio2+0x78>
 800e4ea:	a381      	add	r3, pc, #516	; (adr r3, 800e6f0 <__ieee754_rem_pio2+0x2f0>)
 800e4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f0:	f7f1 fecc 	bl	800028c <__adddf3>
 800e4f4:	a380      	add	r3, pc, #512	; (adr r3, 800e6f8 <__ieee754_rem_pio2+0x2f8>)
 800e4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	f7f1 fec5 	bl	800028c <__adddf3>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	e9c4 2300 	strd	r2, r3, [r4]
 800e50a:	4630      	mov	r0, r6
 800e50c:	4639      	mov	r1, r7
 800e50e:	f7f1 febb 	bl	8000288 <__aeabi_dsub>
 800e512:	a379      	add	r3, pc, #484	; (adr r3, 800e6f8 <__ieee754_rem_pio2+0x2f8>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	e7e0      	b.n	800e4dc <__ieee754_rem_pio2+0xdc>
 800e51a:	4b82      	ldr	r3, [pc, #520]	; (800e724 <__ieee754_rem_pio2+0x324>)
 800e51c:	4598      	cmp	r8, r3
 800e51e:	f300 80d0 	bgt.w	800e6c2 <__ieee754_rem_pio2+0x2c2>
 800e522:	f000 fed3 	bl	800f2cc <fabs>
 800e526:	ec57 6b10 	vmov	r6, r7, d0
 800e52a:	ee10 0a10 	vmov	r0, s0
 800e52e:	a374      	add	r3, pc, #464	; (adr r3, 800e700 <__ieee754_rem_pio2+0x300>)
 800e530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e534:	4639      	mov	r1, r7
 800e536:	f7f2 f85f 	bl	80005f8 <__aeabi_dmul>
 800e53a:	2200      	movs	r2, #0
 800e53c:	4b7a      	ldr	r3, [pc, #488]	; (800e728 <__ieee754_rem_pio2+0x328>)
 800e53e:	f7f1 fea5 	bl	800028c <__adddf3>
 800e542:	f7f2 fb09 	bl	8000b58 <__aeabi_d2iz>
 800e546:	4605      	mov	r5, r0
 800e548:	f7f1 ffec 	bl	8000524 <__aeabi_i2d>
 800e54c:	a364      	add	r3, pc, #400	; (adr r3, 800e6e0 <__ieee754_rem_pio2+0x2e0>)
 800e54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e556:	f7f2 f84f 	bl	80005f8 <__aeabi_dmul>
 800e55a:	4602      	mov	r2, r0
 800e55c:	460b      	mov	r3, r1
 800e55e:	4630      	mov	r0, r6
 800e560:	4639      	mov	r1, r7
 800e562:	f7f1 fe91 	bl	8000288 <__aeabi_dsub>
 800e566:	a360      	add	r3, pc, #384	; (adr r3, 800e6e8 <__ieee754_rem_pio2+0x2e8>)
 800e568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56c:	4682      	mov	sl, r0
 800e56e:	468b      	mov	fp, r1
 800e570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e574:	f7f2 f840 	bl	80005f8 <__aeabi_dmul>
 800e578:	2d1f      	cmp	r5, #31
 800e57a:	4606      	mov	r6, r0
 800e57c:	460f      	mov	r7, r1
 800e57e:	dc0c      	bgt.n	800e59a <__ieee754_rem_pio2+0x19a>
 800e580:	1e6a      	subs	r2, r5, #1
 800e582:	4b6a      	ldr	r3, [pc, #424]	; (800e72c <__ieee754_rem_pio2+0x32c>)
 800e584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e588:	4543      	cmp	r3, r8
 800e58a:	d006      	beq.n	800e59a <__ieee754_rem_pio2+0x19a>
 800e58c:	4632      	mov	r2, r6
 800e58e:	463b      	mov	r3, r7
 800e590:	4650      	mov	r0, sl
 800e592:	4659      	mov	r1, fp
 800e594:	f7f1 fe78 	bl	8000288 <__aeabi_dsub>
 800e598:	e00e      	b.n	800e5b8 <__ieee754_rem_pio2+0x1b8>
 800e59a:	4632      	mov	r2, r6
 800e59c:	463b      	mov	r3, r7
 800e59e:	4650      	mov	r0, sl
 800e5a0:	4659      	mov	r1, fp
 800e5a2:	f7f1 fe71 	bl	8000288 <__aeabi_dsub>
 800e5a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e5aa:	9305      	str	r3, [sp, #20]
 800e5ac:	9a05      	ldr	r2, [sp, #20]
 800e5ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	2b10      	cmp	r3, #16
 800e5b6:	dc02      	bgt.n	800e5be <__ieee754_rem_pio2+0x1be>
 800e5b8:	e9c4 0100 	strd	r0, r1, [r4]
 800e5bc:	e039      	b.n	800e632 <__ieee754_rem_pio2+0x232>
 800e5be:	a34c      	add	r3, pc, #304	; (adr r3, 800e6f0 <__ieee754_rem_pio2+0x2f0>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5c8:	f7f2 f816 	bl	80005f8 <__aeabi_dmul>
 800e5cc:	4606      	mov	r6, r0
 800e5ce:	460f      	mov	r7, r1
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	4659      	mov	r1, fp
 800e5d8:	f7f1 fe56 	bl	8000288 <__aeabi_dsub>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4680      	mov	r8, r0
 800e5e2:	4689      	mov	r9, r1
 800e5e4:	4650      	mov	r0, sl
 800e5e6:	4659      	mov	r1, fp
 800e5e8:	f7f1 fe4e 	bl	8000288 <__aeabi_dsub>
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	463b      	mov	r3, r7
 800e5f0:	f7f1 fe4a 	bl	8000288 <__aeabi_dsub>
 800e5f4:	a340      	add	r3, pc, #256	; (adr r3, 800e6f8 <__ieee754_rem_pio2+0x2f8>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	4606      	mov	r6, r0
 800e5fc:	460f      	mov	r7, r1
 800e5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e602:	f7f1 fff9 	bl	80005f8 <__aeabi_dmul>
 800e606:	4632      	mov	r2, r6
 800e608:	463b      	mov	r3, r7
 800e60a:	f7f1 fe3d 	bl	8000288 <__aeabi_dsub>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	4606      	mov	r6, r0
 800e614:	460f      	mov	r7, r1
 800e616:	4640      	mov	r0, r8
 800e618:	4649      	mov	r1, r9
 800e61a:	f7f1 fe35 	bl	8000288 <__aeabi_dsub>
 800e61e:	9a05      	ldr	r2, [sp, #20]
 800e620:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e624:	1ad3      	subs	r3, r2, r3
 800e626:	2b31      	cmp	r3, #49	; 0x31
 800e628:	dc20      	bgt.n	800e66c <__ieee754_rem_pio2+0x26c>
 800e62a:	e9c4 0100 	strd	r0, r1, [r4]
 800e62e:	46c2      	mov	sl, r8
 800e630:	46cb      	mov	fp, r9
 800e632:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e636:	4650      	mov	r0, sl
 800e638:	4642      	mov	r2, r8
 800e63a:	464b      	mov	r3, r9
 800e63c:	4659      	mov	r1, fp
 800e63e:	f7f1 fe23 	bl	8000288 <__aeabi_dsub>
 800e642:	463b      	mov	r3, r7
 800e644:	4632      	mov	r2, r6
 800e646:	f7f1 fe1f 	bl	8000288 <__aeabi_dsub>
 800e64a:	9b04      	ldr	r3, [sp, #16]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e652:	f6bf af11 	bge.w	800e478 <__ieee754_rem_pio2+0x78>
 800e656:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e65a:	6063      	str	r3, [r4, #4]
 800e65c:	f8c4 8000 	str.w	r8, [r4]
 800e660:	60a0      	str	r0, [r4, #8]
 800e662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e666:	60e3      	str	r3, [r4, #12]
 800e668:	426d      	negs	r5, r5
 800e66a:	e705      	b.n	800e478 <__ieee754_rem_pio2+0x78>
 800e66c:	a326      	add	r3, pc, #152	; (adr r3, 800e708 <__ieee754_rem_pio2+0x308>)
 800e66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e676:	f7f1 ffbf 	bl	80005f8 <__aeabi_dmul>
 800e67a:	4606      	mov	r6, r0
 800e67c:	460f      	mov	r7, r1
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	4640      	mov	r0, r8
 800e684:	4649      	mov	r1, r9
 800e686:	f7f1 fdff 	bl	8000288 <__aeabi_dsub>
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	4682      	mov	sl, r0
 800e690:	468b      	mov	fp, r1
 800e692:	4640      	mov	r0, r8
 800e694:	4649      	mov	r1, r9
 800e696:	f7f1 fdf7 	bl	8000288 <__aeabi_dsub>
 800e69a:	4632      	mov	r2, r6
 800e69c:	463b      	mov	r3, r7
 800e69e:	f7f1 fdf3 	bl	8000288 <__aeabi_dsub>
 800e6a2:	a31b      	add	r3, pc, #108	; (adr r3, 800e710 <__ieee754_rem_pio2+0x310>)
 800e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a8:	4606      	mov	r6, r0
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6b0:	f7f1 ffa2 	bl	80005f8 <__aeabi_dmul>
 800e6b4:	4632      	mov	r2, r6
 800e6b6:	463b      	mov	r3, r7
 800e6b8:	f7f1 fde6 	bl	8000288 <__aeabi_dsub>
 800e6bc:	4606      	mov	r6, r0
 800e6be:	460f      	mov	r7, r1
 800e6c0:	e764      	b.n	800e58c <__ieee754_rem_pio2+0x18c>
 800e6c2:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <__ieee754_rem_pio2+0x330>)
 800e6c4:	4598      	cmp	r8, r3
 800e6c6:	dd35      	ble.n	800e734 <__ieee754_rem_pio2+0x334>
 800e6c8:	ee10 2a10 	vmov	r2, s0
 800e6cc:	463b      	mov	r3, r7
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	f7f1 fdd9 	bl	8000288 <__aeabi_dsub>
 800e6d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e6da:	e9c4 0100 	strd	r0, r1, [r4]
 800e6de:	e6a1      	b.n	800e424 <__ieee754_rem_pio2+0x24>
 800e6e0:	54400000 	.word	0x54400000
 800e6e4:	3ff921fb 	.word	0x3ff921fb
 800e6e8:	1a626331 	.word	0x1a626331
 800e6ec:	3dd0b461 	.word	0x3dd0b461
 800e6f0:	1a600000 	.word	0x1a600000
 800e6f4:	3dd0b461 	.word	0x3dd0b461
 800e6f8:	2e037073 	.word	0x2e037073
 800e6fc:	3ba3198a 	.word	0x3ba3198a
 800e700:	6dc9c883 	.word	0x6dc9c883
 800e704:	3fe45f30 	.word	0x3fe45f30
 800e708:	2e000000 	.word	0x2e000000
 800e70c:	3ba3198a 	.word	0x3ba3198a
 800e710:	252049c1 	.word	0x252049c1
 800e714:	397b839a 	.word	0x397b839a
 800e718:	3fe921fb 	.word	0x3fe921fb
 800e71c:	4002d97b 	.word	0x4002d97b
 800e720:	3ff921fb 	.word	0x3ff921fb
 800e724:	413921fb 	.word	0x413921fb
 800e728:	3fe00000 	.word	0x3fe00000
 800e72c:	0800f5ec 	.word	0x0800f5ec
 800e730:	7fefffff 	.word	0x7fefffff
 800e734:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e738:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e73c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e740:	4630      	mov	r0, r6
 800e742:	460f      	mov	r7, r1
 800e744:	f7f2 fa08 	bl	8000b58 <__aeabi_d2iz>
 800e748:	f7f1 feec 	bl	8000524 <__aeabi_i2d>
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	4630      	mov	r0, r6
 800e752:	4639      	mov	r1, r7
 800e754:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e758:	f7f1 fd96 	bl	8000288 <__aeabi_dsub>
 800e75c:	2200      	movs	r2, #0
 800e75e:	4b1f      	ldr	r3, [pc, #124]	; (800e7dc <__ieee754_rem_pio2+0x3dc>)
 800e760:	f7f1 ff4a 	bl	80005f8 <__aeabi_dmul>
 800e764:	460f      	mov	r7, r1
 800e766:	4606      	mov	r6, r0
 800e768:	f7f2 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800e76c:	f7f1 feda 	bl	8000524 <__aeabi_i2d>
 800e770:	4602      	mov	r2, r0
 800e772:	460b      	mov	r3, r1
 800e774:	4630      	mov	r0, r6
 800e776:	4639      	mov	r1, r7
 800e778:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e77c:	f7f1 fd84 	bl	8000288 <__aeabi_dsub>
 800e780:	2200      	movs	r2, #0
 800e782:	4b16      	ldr	r3, [pc, #88]	; (800e7dc <__ieee754_rem_pio2+0x3dc>)
 800e784:	f7f1 ff38 	bl	80005f8 <__aeabi_dmul>
 800e788:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e78c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800e790:	f04f 0803 	mov.w	r8, #3
 800e794:	2600      	movs	r6, #0
 800e796:	2700      	movs	r7, #0
 800e798:	4632      	mov	r2, r6
 800e79a:	463b      	mov	r3, r7
 800e79c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e7a0:	f108 3aff 	add.w	sl, r8, #4294967295
 800e7a4:	f7f2 f990 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7a8:	b9b0      	cbnz	r0, 800e7d8 <__ieee754_rem_pio2+0x3d8>
 800e7aa:	4b0d      	ldr	r3, [pc, #52]	; (800e7e0 <__ieee754_rem_pio2+0x3e0>)
 800e7ac:	9301      	str	r3, [sp, #4]
 800e7ae:	2302      	movs	r3, #2
 800e7b0:	9300      	str	r3, [sp, #0]
 800e7b2:	462a      	mov	r2, r5
 800e7b4:	4643      	mov	r3, r8
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	a806      	add	r0, sp, #24
 800e7ba:	f000 f98d 	bl	800ead8 <__kernel_rem_pio2>
 800e7be:	9b04      	ldr	r3, [sp, #16]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	4605      	mov	r5, r0
 800e7c4:	f6bf ae58 	bge.w	800e478 <__ieee754_rem_pio2+0x78>
 800e7c8:	6863      	ldr	r3, [r4, #4]
 800e7ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7ce:	6063      	str	r3, [r4, #4]
 800e7d0:	68e3      	ldr	r3, [r4, #12]
 800e7d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7d6:	e746      	b.n	800e666 <__ieee754_rem_pio2+0x266>
 800e7d8:	46d0      	mov	r8, sl
 800e7da:	e7dd      	b.n	800e798 <__ieee754_rem_pio2+0x398>
 800e7dc:	41700000 	.word	0x41700000
 800e7e0:	0800f66c 	.word	0x0800f66c

0800e7e4 <__ieee754_sqrt>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	4955      	ldr	r1, [pc, #340]	; (800e940 <__ieee754_sqrt+0x15c>)
 800e7ea:	ec55 4b10 	vmov	r4, r5, d0
 800e7ee:	43a9      	bics	r1, r5
 800e7f0:	462b      	mov	r3, r5
 800e7f2:	462a      	mov	r2, r5
 800e7f4:	d112      	bne.n	800e81c <__ieee754_sqrt+0x38>
 800e7f6:	ee10 2a10 	vmov	r2, s0
 800e7fa:	ee10 0a10 	vmov	r0, s0
 800e7fe:	4629      	mov	r1, r5
 800e800:	f7f1 fefa 	bl	80005f8 <__aeabi_dmul>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4620      	mov	r0, r4
 800e80a:	4629      	mov	r1, r5
 800e80c:	f7f1 fd3e 	bl	800028c <__adddf3>
 800e810:	4604      	mov	r4, r0
 800e812:	460d      	mov	r5, r1
 800e814:	ec45 4b10 	vmov	d0, r4, r5
 800e818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81c:	2d00      	cmp	r5, #0
 800e81e:	ee10 0a10 	vmov	r0, s0
 800e822:	4621      	mov	r1, r4
 800e824:	dc0f      	bgt.n	800e846 <__ieee754_sqrt+0x62>
 800e826:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e82a:	4330      	orrs	r0, r6
 800e82c:	d0f2      	beq.n	800e814 <__ieee754_sqrt+0x30>
 800e82e:	b155      	cbz	r5, 800e846 <__ieee754_sqrt+0x62>
 800e830:	ee10 2a10 	vmov	r2, s0
 800e834:	4620      	mov	r0, r4
 800e836:	4629      	mov	r1, r5
 800e838:	f7f1 fd26 	bl	8000288 <__aeabi_dsub>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	f7f2 f804 	bl	800084c <__aeabi_ddiv>
 800e844:	e7e4      	b.n	800e810 <__ieee754_sqrt+0x2c>
 800e846:	151b      	asrs	r3, r3, #20
 800e848:	d073      	beq.n	800e932 <__ieee754_sqrt+0x14e>
 800e84a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e84e:	07dd      	lsls	r5, r3, #31
 800e850:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e854:	bf48      	it	mi
 800e856:	0fc8      	lsrmi	r0, r1, #31
 800e858:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e85c:	bf44      	itt	mi
 800e85e:	0049      	lslmi	r1, r1, #1
 800e860:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e864:	2500      	movs	r5, #0
 800e866:	1058      	asrs	r0, r3, #1
 800e868:	0fcb      	lsrs	r3, r1, #31
 800e86a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e86e:	0049      	lsls	r1, r1, #1
 800e870:	2316      	movs	r3, #22
 800e872:	462c      	mov	r4, r5
 800e874:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e878:	19a7      	adds	r7, r4, r6
 800e87a:	4297      	cmp	r7, r2
 800e87c:	bfde      	ittt	le
 800e87e:	19bc      	addle	r4, r7, r6
 800e880:	1bd2      	suble	r2, r2, r7
 800e882:	19ad      	addle	r5, r5, r6
 800e884:	0fcf      	lsrs	r7, r1, #31
 800e886:	3b01      	subs	r3, #1
 800e888:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e88c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e890:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e894:	d1f0      	bne.n	800e878 <__ieee754_sqrt+0x94>
 800e896:	f04f 0c20 	mov.w	ip, #32
 800e89a:	469e      	mov	lr, r3
 800e89c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e8a0:	42a2      	cmp	r2, r4
 800e8a2:	eb06 070e 	add.w	r7, r6, lr
 800e8a6:	dc02      	bgt.n	800e8ae <__ieee754_sqrt+0xca>
 800e8a8:	d112      	bne.n	800e8d0 <__ieee754_sqrt+0xec>
 800e8aa:	428f      	cmp	r7, r1
 800e8ac:	d810      	bhi.n	800e8d0 <__ieee754_sqrt+0xec>
 800e8ae:	2f00      	cmp	r7, #0
 800e8b0:	eb07 0e06 	add.w	lr, r7, r6
 800e8b4:	da42      	bge.n	800e93c <__ieee754_sqrt+0x158>
 800e8b6:	f1be 0f00 	cmp.w	lr, #0
 800e8ba:	db3f      	blt.n	800e93c <__ieee754_sqrt+0x158>
 800e8bc:	f104 0801 	add.w	r8, r4, #1
 800e8c0:	1b12      	subs	r2, r2, r4
 800e8c2:	428f      	cmp	r7, r1
 800e8c4:	bf88      	it	hi
 800e8c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e8ca:	1bc9      	subs	r1, r1, r7
 800e8cc:	4433      	add	r3, r6
 800e8ce:	4644      	mov	r4, r8
 800e8d0:	0052      	lsls	r2, r2, #1
 800e8d2:	f1bc 0c01 	subs.w	ip, ip, #1
 800e8d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e8da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e8de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e8e2:	d1dd      	bne.n	800e8a0 <__ieee754_sqrt+0xbc>
 800e8e4:	430a      	orrs	r2, r1
 800e8e6:	d006      	beq.n	800e8f6 <__ieee754_sqrt+0x112>
 800e8e8:	1c5c      	adds	r4, r3, #1
 800e8ea:	bf13      	iteet	ne
 800e8ec:	3301      	addne	r3, #1
 800e8ee:	3501      	addeq	r5, #1
 800e8f0:	4663      	moveq	r3, ip
 800e8f2:	f023 0301 	bicne.w	r3, r3, #1
 800e8f6:	106a      	asrs	r2, r5, #1
 800e8f8:	085b      	lsrs	r3, r3, #1
 800e8fa:	07e9      	lsls	r1, r5, #31
 800e8fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e900:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e904:	bf48      	it	mi
 800e906:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e90a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e90e:	461c      	mov	r4, r3
 800e910:	e780      	b.n	800e814 <__ieee754_sqrt+0x30>
 800e912:	0aca      	lsrs	r2, r1, #11
 800e914:	3815      	subs	r0, #21
 800e916:	0549      	lsls	r1, r1, #21
 800e918:	2a00      	cmp	r2, #0
 800e91a:	d0fa      	beq.n	800e912 <__ieee754_sqrt+0x12e>
 800e91c:	02d6      	lsls	r6, r2, #11
 800e91e:	d50a      	bpl.n	800e936 <__ieee754_sqrt+0x152>
 800e920:	f1c3 0420 	rsb	r4, r3, #32
 800e924:	fa21 f404 	lsr.w	r4, r1, r4
 800e928:	1e5d      	subs	r5, r3, #1
 800e92a:	4099      	lsls	r1, r3
 800e92c:	4322      	orrs	r2, r4
 800e92e:	1b43      	subs	r3, r0, r5
 800e930:	e78b      	b.n	800e84a <__ieee754_sqrt+0x66>
 800e932:	4618      	mov	r0, r3
 800e934:	e7f0      	b.n	800e918 <__ieee754_sqrt+0x134>
 800e936:	0052      	lsls	r2, r2, #1
 800e938:	3301      	adds	r3, #1
 800e93a:	e7ef      	b.n	800e91c <__ieee754_sqrt+0x138>
 800e93c:	46a0      	mov	r8, r4
 800e93e:	e7bf      	b.n	800e8c0 <__ieee754_sqrt+0xdc>
 800e940:	7ff00000 	.word	0x7ff00000
 800e944:	00000000 	.word	0x00000000

0800e948 <__kernel_cos>:
 800e948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	ec59 8b10 	vmov	r8, r9, d0
 800e950:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800e954:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e958:	ed2d 8b02 	vpush	{d8}
 800e95c:	eeb0 8a41 	vmov.f32	s16, s2
 800e960:	eef0 8a61 	vmov.f32	s17, s3
 800e964:	da07      	bge.n	800e976 <__kernel_cos+0x2e>
 800e966:	ee10 0a10 	vmov	r0, s0
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f2 f8f4 	bl	8000b58 <__aeabi_d2iz>
 800e970:	2800      	cmp	r0, #0
 800e972:	f000 8089 	beq.w	800ea88 <__kernel_cos+0x140>
 800e976:	4642      	mov	r2, r8
 800e978:	464b      	mov	r3, r9
 800e97a:	4640      	mov	r0, r8
 800e97c:	4649      	mov	r1, r9
 800e97e:	f7f1 fe3b 	bl	80005f8 <__aeabi_dmul>
 800e982:	2200      	movs	r2, #0
 800e984:	4b4e      	ldr	r3, [pc, #312]	; (800eac0 <__kernel_cos+0x178>)
 800e986:	4604      	mov	r4, r0
 800e988:	460d      	mov	r5, r1
 800e98a:	f7f1 fe35 	bl	80005f8 <__aeabi_dmul>
 800e98e:	a340      	add	r3, pc, #256	; (adr r3, 800ea90 <__kernel_cos+0x148>)
 800e990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e994:	4682      	mov	sl, r0
 800e996:	468b      	mov	fp, r1
 800e998:	4620      	mov	r0, r4
 800e99a:	4629      	mov	r1, r5
 800e99c:	f7f1 fe2c 	bl	80005f8 <__aeabi_dmul>
 800e9a0:	a33d      	add	r3, pc, #244	; (adr r3, 800ea98 <__kernel_cos+0x150>)
 800e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a6:	f7f1 fc71 	bl	800028c <__adddf3>
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	462b      	mov	r3, r5
 800e9ae:	f7f1 fe23 	bl	80005f8 <__aeabi_dmul>
 800e9b2:	a33b      	add	r3, pc, #236	; (adr r3, 800eaa0 <__kernel_cos+0x158>)
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f7f1 fc66 	bl	8000288 <__aeabi_dsub>
 800e9bc:	4622      	mov	r2, r4
 800e9be:	462b      	mov	r3, r5
 800e9c0:	f7f1 fe1a 	bl	80005f8 <__aeabi_dmul>
 800e9c4:	a338      	add	r3, pc, #224	; (adr r3, 800eaa8 <__kernel_cos+0x160>)
 800e9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ca:	f7f1 fc5f 	bl	800028c <__adddf3>
 800e9ce:	4622      	mov	r2, r4
 800e9d0:	462b      	mov	r3, r5
 800e9d2:	f7f1 fe11 	bl	80005f8 <__aeabi_dmul>
 800e9d6:	a336      	add	r3, pc, #216	; (adr r3, 800eab0 <__kernel_cos+0x168>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	f7f1 fc54 	bl	8000288 <__aeabi_dsub>
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	462b      	mov	r3, r5
 800e9e4:	f7f1 fe08 	bl	80005f8 <__aeabi_dmul>
 800e9e8:	a333      	add	r3, pc, #204	; (adr r3, 800eab8 <__kernel_cos+0x170>)
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	f7f1 fc4d 	bl	800028c <__adddf3>
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	462b      	mov	r3, r5
 800e9f6:	f7f1 fdff 	bl	80005f8 <__aeabi_dmul>
 800e9fa:	4622      	mov	r2, r4
 800e9fc:	462b      	mov	r3, r5
 800e9fe:	f7f1 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ea02:	ec53 2b18 	vmov	r2, r3, d8
 800ea06:	4604      	mov	r4, r0
 800ea08:	460d      	mov	r5, r1
 800ea0a:	4640      	mov	r0, r8
 800ea0c:	4649      	mov	r1, r9
 800ea0e:	f7f1 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ea12:	460b      	mov	r3, r1
 800ea14:	4602      	mov	r2, r0
 800ea16:	4629      	mov	r1, r5
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f7f1 fc35 	bl	8000288 <__aeabi_dsub>
 800ea1e:	4b29      	ldr	r3, [pc, #164]	; (800eac4 <__kernel_cos+0x17c>)
 800ea20:	429e      	cmp	r6, r3
 800ea22:	4680      	mov	r8, r0
 800ea24:	4689      	mov	r9, r1
 800ea26:	dc11      	bgt.n	800ea4c <__kernel_cos+0x104>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	4659      	mov	r1, fp
 800ea30:	f7f1 fc2a 	bl	8000288 <__aeabi_dsub>
 800ea34:	460b      	mov	r3, r1
 800ea36:	4924      	ldr	r1, [pc, #144]	; (800eac8 <__kernel_cos+0x180>)
 800ea38:	4602      	mov	r2, r0
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	f7f1 fc24 	bl	8000288 <__aeabi_dsub>
 800ea40:	ecbd 8b02 	vpop	{d8}
 800ea44:	ec41 0b10 	vmov	d0, r0, r1
 800ea48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea4c:	4b1f      	ldr	r3, [pc, #124]	; (800eacc <__kernel_cos+0x184>)
 800ea4e:	491e      	ldr	r1, [pc, #120]	; (800eac8 <__kernel_cos+0x180>)
 800ea50:	429e      	cmp	r6, r3
 800ea52:	bfcc      	ite	gt
 800ea54:	4d1e      	ldrgt	r5, [pc, #120]	; (800ead0 <__kernel_cos+0x188>)
 800ea56:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ea5a:	2400      	movs	r4, #0
 800ea5c:	4622      	mov	r2, r4
 800ea5e:	462b      	mov	r3, r5
 800ea60:	2000      	movs	r0, #0
 800ea62:	f7f1 fc11 	bl	8000288 <__aeabi_dsub>
 800ea66:	4622      	mov	r2, r4
 800ea68:	4606      	mov	r6, r0
 800ea6a:	460f      	mov	r7, r1
 800ea6c:	462b      	mov	r3, r5
 800ea6e:	4650      	mov	r0, sl
 800ea70:	4659      	mov	r1, fp
 800ea72:	f7f1 fc09 	bl	8000288 <__aeabi_dsub>
 800ea76:	4642      	mov	r2, r8
 800ea78:	464b      	mov	r3, r9
 800ea7a:	f7f1 fc05 	bl	8000288 <__aeabi_dsub>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	4630      	mov	r0, r6
 800ea84:	4639      	mov	r1, r7
 800ea86:	e7d9      	b.n	800ea3c <__kernel_cos+0xf4>
 800ea88:	2000      	movs	r0, #0
 800ea8a:	490f      	ldr	r1, [pc, #60]	; (800eac8 <__kernel_cos+0x180>)
 800ea8c:	e7d8      	b.n	800ea40 <__kernel_cos+0xf8>
 800ea8e:	bf00      	nop
 800ea90:	be8838d4 	.word	0xbe8838d4
 800ea94:	bda8fae9 	.word	0xbda8fae9
 800ea98:	bdb4b1c4 	.word	0xbdb4b1c4
 800ea9c:	3e21ee9e 	.word	0x3e21ee9e
 800eaa0:	809c52ad 	.word	0x809c52ad
 800eaa4:	3e927e4f 	.word	0x3e927e4f
 800eaa8:	19cb1590 	.word	0x19cb1590
 800eaac:	3efa01a0 	.word	0x3efa01a0
 800eab0:	16c15177 	.word	0x16c15177
 800eab4:	3f56c16c 	.word	0x3f56c16c
 800eab8:	5555554c 	.word	0x5555554c
 800eabc:	3fa55555 	.word	0x3fa55555
 800eac0:	3fe00000 	.word	0x3fe00000
 800eac4:	3fd33332 	.word	0x3fd33332
 800eac8:	3ff00000 	.word	0x3ff00000
 800eacc:	3fe90000 	.word	0x3fe90000
 800ead0:	3fd20000 	.word	0x3fd20000
 800ead4:	00000000 	.word	0x00000000

0800ead8 <__kernel_rem_pio2>:
 800ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eadc:	ed2d 8b02 	vpush	{d8}
 800eae0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800eae4:	1ed4      	subs	r4, r2, #3
 800eae6:	9308      	str	r3, [sp, #32]
 800eae8:	9101      	str	r1, [sp, #4]
 800eaea:	4bc5      	ldr	r3, [pc, #788]	; (800ee00 <__kernel_rem_pio2+0x328>)
 800eaec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800eaee:	9009      	str	r0, [sp, #36]	; 0x24
 800eaf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eaf4:	9304      	str	r3, [sp, #16]
 800eaf6:	9b08      	ldr	r3, [sp, #32]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	9307      	str	r3, [sp, #28]
 800eafc:	2318      	movs	r3, #24
 800eafe:	fb94 f4f3 	sdiv	r4, r4, r3
 800eb02:	f06f 0317 	mvn.w	r3, #23
 800eb06:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800eb0a:	fb04 3303 	mla	r3, r4, r3, r3
 800eb0e:	eb03 0a02 	add.w	sl, r3, r2
 800eb12:	9b04      	ldr	r3, [sp, #16]
 800eb14:	9a07      	ldr	r2, [sp, #28]
 800eb16:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800edf0 <__kernel_rem_pio2+0x318>
 800eb1a:	eb03 0802 	add.w	r8, r3, r2
 800eb1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800eb20:	1aa7      	subs	r7, r4, r2
 800eb22:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eb26:	ae22      	add	r6, sp, #136	; 0x88
 800eb28:	2500      	movs	r5, #0
 800eb2a:	4545      	cmp	r5, r8
 800eb2c:	dd13      	ble.n	800eb56 <__kernel_rem_pio2+0x7e>
 800eb2e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800edf0 <__kernel_rem_pio2+0x318>
 800eb32:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800eb36:	2600      	movs	r6, #0
 800eb38:	9b04      	ldr	r3, [sp, #16]
 800eb3a:	429e      	cmp	r6, r3
 800eb3c:	dc32      	bgt.n	800eba4 <__kernel_rem_pio2+0xcc>
 800eb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb40:	9302      	str	r3, [sp, #8]
 800eb42:	9b08      	ldr	r3, [sp, #32]
 800eb44:	199d      	adds	r5, r3, r6
 800eb46:	ab22      	add	r3, sp, #136	; 0x88
 800eb48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb4c:	9306      	str	r3, [sp, #24]
 800eb4e:	ec59 8b18 	vmov	r8, r9, d8
 800eb52:	2700      	movs	r7, #0
 800eb54:	e01f      	b.n	800eb96 <__kernel_rem_pio2+0xbe>
 800eb56:	42ef      	cmn	r7, r5
 800eb58:	d407      	bmi.n	800eb6a <__kernel_rem_pio2+0x92>
 800eb5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800eb5e:	f7f1 fce1 	bl	8000524 <__aeabi_i2d>
 800eb62:	e8e6 0102 	strd	r0, r1, [r6], #8
 800eb66:	3501      	adds	r5, #1
 800eb68:	e7df      	b.n	800eb2a <__kernel_rem_pio2+0x52>
 800eb6a:	ec51 0b18 	vmov	r0, r1, d8
 800eb6e:	e7f8      	b.n	800eb62 <__kernel_rem_pio2+0x8a>
 800eb70:	9906      	ldr	r1, [sp, #24]
 800eb72:	9d02      	ldr	r5, [sp, #8]
 800eb74:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800eb78:	9106      	str	r1, [sp, #24]
 800eb7a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800eb7e:	9502      	str	r5, [sp, #8]
 800eb80:	f7f1 fd3a 	bl	80005f8 <__aeabi_dmul>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4640      	mov	r0, r8
 800eb8a:	4649      	mov	r1, r9
 800eb8c:	f7f1 fb7e 	bl	800028c <__adddf3>
 800eb90:	3701      	adds	r7, #1
 800eb92:	4680      	mov	r8, r0
 800eb94:	4689      	mov	r9, r1
 800eb96:	9b07      	ldr	r3, [sp, #28]
 800eb98:	429f      	cmp	r7, r3
 800eb9a:	dde9      	ble.n	800eb70 <__kernel_rem_pio2+0x98>
 800eb9c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800eba0:	3601      	adds	r6, #1
 800eba2:	e7c9      	b.n	800eb38 <__kernel_rem_pio2+0x60>
 800eba4:	9b04      	ldr	r3, [sp, #16]
 800eba6:	aa0e      	add	r2, sp, #56	; 0x38
 800eba8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebac:	930c      	str	r3, [sp, #48]	; 0x30
 800ebae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ebb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ebb4:	9c04      	ldr	r4, [sp, #16]
 800ebb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebb8:	ab9a      	add	r3, sp, #616	; 0x268
 800ebba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ebbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebc6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ebca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ebce:	ab9a      	add	r3, sp, #616	; 0x268
 800ebd0:	445b      	add	r3, fp
 800ebd2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ebd6:	2500      	movs	r5, #0
 800ebd8:	1b63      	subs	r3, r4, r5
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	dc78      	bgt.n	800ecd0 <__kernel_rem_pio2+0x1f8>
 800ebde:	4650      	mov	r0, sl
 800ebe0:	ec49 8b10 	vmov	d0, r8, r9
 800ebe4:	f000 fc0c 	bl	800f400 <scalbn>
 800ebe8:	ec57 6b10 	vmov	r6, r7, d0
 800ebec:	2200      	movs	r2, #0
 800ebee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ebf2:	ee10 0a10 	vmov	r0, s0
 800ebf6:	4639      	mov	r1, r7
 800ebf8:	f7f1 fcfe 	bl	80005f8 <__aeabi_dmul>
 800ebfc:	ec41 0b10 	vmov	d0, r0, r1
 800ec00:	f000 fb6e 	bl	800f2e0 <floor>
 800ec04:	2200      	movs	r2, #0
 800ec06:	ec51 0b10 	vmov	r0, r1, d0
 800ec0a:	4b7e      	ldr	r3, [pc, #504]	; (800ee04 <__kernel_rem_pio2+0x32c>)
 800ec0c:	f7f1 fcf4 	bl	80005f8 <__aeabi_dmul>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
 800ec14:	4630      	mov	r0, r6
 800ec16:	4639      	mov	r1, r7
 800ec18:	f7f1 fb36 	bl	8000288 <__aeabi_dsub>
 800ec1c:	460f      	mov	r7, r1
 800ec1e:	4606      	mov	r6, r0
 800ec20:	f7f1 ff9a 	bl	8000b58 <__aeabi_d2iz>
 800ec24:	9006      	str	r0, [sp, #24]
 800ec26:	f7f1 fc7d 	bl	8000524 <__aeabi_i2d>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	4630      	mov	r0, r6
 800ec30:	4639      	mov	r1, r7
 800ec32:	f7f1 fb29 	bl	8000288 <__aeabi_dsub>
 800ec36:	f1ba 0f00 	cmp.w	sl, #0
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	dd6c      	ble.n	800ed1a <__kernel_rem_pio2+0x242>
 800ec40:	1e62      	subs	r2, r4, #1
 800ec42:	ab0e      	add	r3, sp, #56	; 0x38
 800ec44:	f1ca 0118 	rsb	r1, sl, #24
 800ec48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ec4c:	9d06      	ldr	r5, [sp, #24]
 800ec4e:	fa40 f301 	asr.w	r3, r0, r1
 800ec52:	441d      	add	r5, r3
 800ec54:	408b      	lsls	r3, r1
 800ec56:	1ac0      	subs	r0, r0, r3
 800ec58:	ab0e      	add	r3, sp, #56	; 0x38
 800ec5a:	9506      	str	r5, [sp, #24]
 800ec5c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ec60:	f1ca 0317 	rsb	r3, sl, #23
 800ec64:	fa40 f303 	asr.w	r3, r0, r3
 800ec68:	9302      	str	r3, [sp, #8]
 800ec6a:	9b02      	ldr	r3, [sp, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	dd62      	ble.n	800ed36 <__kernel_rem_pio2+0x25e>
 800ec70:	9b06      	ldr	r3, [sp, #24]
 800ec72:	2200      	movs	r2, #0
 800ec74:	3301      	adds	r3, #1
 800ec76:	9306      	str	r3, [sp, #24]
 800ec78:	4615      	mov	r5, r2
 800ec7a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ec7e:	4294      	cmp	r4, r2
 800ec80:	f300 8095 	bgt.w	800edae <__kernel_rem_pio2+0x2d6>
 800ec84:	f1ba 0f00 	cmp.w	sl, #0
 800ec88:	dd07      	ble.n	800ec9a <__kernel_rem_pio2+0x1c2>
 800ec8a:	f1ba 0f01 	cmp.w	sl, #1
 800ec8e:	f000 80a2 	beq.w	800edd6 <__kernel_rem_pio2+0x2fe>
 800ec92:	f1ba 0f02 	cmp.w	sl, #2
 800ec96:	f000 80c1 	beq.w	800ee1c <__kernel_rem_pio2+0x344>
 800ec9a:	9b02      	ldr	r3, [sp, #8]
 800ec9c:	2b02      	cmp	r3, #2
 800ec9e:	d14a      	bne.n	800ed36 <__kernel_rem_pio2+0x25e>
 800eca0:	4632      	mov	r2, r6
 800eca2:	463b      	mov	r3, r7
 800eca4:	2000      	movs	r0, #0
 800eca6:	4958      	ldr	r1, [pc, #352]	; (800ee08 <__kernel_rem_pio2+0x330>)
 800eca8:	f7f1 faee 	bl	8000288 <__aeabi_dsub>
 800ecac:	4606      	mov	r6, r0
 800ecae:	460f      	mov	r7, r1
 800ecb0:	2d00      	cmp	r5, #0
 800ecb2:	d040      	beq.n	800ed36 <__kernel_rem_pio2+0x25e>
 800ecb4:	4650      	mov	r0, sl
 800ecb6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800edf8 <__kernel_rem_pio2+0x320>
 800ecba:	f000 fba1 	bl	800f400 <scalbn>
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	4639      	mov	r1, r7
 800ecc2:	ec53 2b10 	vmov	r2, r3, d0
 800ecc6:	f7f1 fadf 	bl	8000288 <__aeabi_dsub>
 800ecca:	4606      	mov	r6, r0
 800eccc:	460f      	mov	r7, r1
 800ecce:	e032      	b.n	800ed36 <__kernel_rem_pio2+0x25e>
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	4b4e      	ldr	r3, [pc, #312]	; (800ee0c <__kernel_rem_pio2+0x334>)
 800ecd4:	4640      	mov	r0, r8
 800ecd6:	4649      	mov	r1, r9
 800ecd8:	f7f1 fc8e 	bl	80005f8 <__aeabi_dmul>
 800ecdc:	f7f1 ff3c 	bl	8000b58 <__aeabi_d2iz>
 800ece0:	f7f1 fc20 	bl	8000524 <__aeabi_i2d>
 800ece4:	2200      	movs	r2, #0
 800ece6:	4b4a      	ldr	r3, [pc, #296]	; (800ee10 <__kernel_rem_pio2+0x338>)
 800ece8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecec:	f7f1 fc84 	bl	80005f8 <__aeabi_dmul>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	4640      	mov	r0, r8
 800ecf6:	4649      	mov	r1, r9
 800ecf8:	f7f1 fac6 	bl	8000288 <__aeabi_dsub>
 800ecfc:	f7f1 ff2c 	bl	8000b58 <__aeabi_d2iz>
 800ed00:	ab0e      	add	r3, sp, #56	; 0x38
 800ed02:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800ed06:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ed0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed0e:	f7f1 fabd 	bl	800028c <__adddf3>
 800ed12:	3501      	adds	r5, #1
 800ed14:	4680      	mov	r8, r0
 800ed16:	4689      	mov	r9, r1
 800ed18:	e75e      	b.n	800ebd8 <__kernel_rem_pio2+0x100>
 800ed1a:	d105      	bne.n	800ed28 <__kernel_rem_pio2+0x250>
 800ed1c:	1e63      	subs	r3, r4, #1
 800ed1e:	aa0e      	add	r2, sp, #56	; 0x38
 800ed20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed24:	15c3      	asrs	r3, r0, #23
 800ed26:	e79f      	b.n	800ec68 <__kernel_rem_pio2+0x190>
 800ed28:	2200      	movs	r2, #0
 800ed2a:	4b3a      	ldr	r3, [pc, #232]	; (800ee14 <__kernel_rem_pio2+0x33c>)
 800ed2c:	f7f1 feea 	bl	8000b04 <__aeabi_dcmpge>
 800ed30:	2800      	cmp	r0, #0
 800ed32:	d139      	bne.n	800eda8 <__kernel_rem_pio2+0x2d0>
 800ed34:	9002      	str	r0, [sp, #8]
 800ed36:	2200      	movs	r2, #0
 800ed38:	2300      	movs	r3, #0
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	4639      	mov	r1, r7
 800ed3e:	f7f1 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	f000 80c7 	beq.w	800eed6 <__kernel_rem_pio2+0x3fe>
 800ed48:	1e65      	subs	r5, r4, #1
 800ed4a:	462b      	mov	r3, r5
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	9904      	ldr	r1, [sp, #16]
 800ed50:	428b      	cmp	r3, r1
 800ed52:	da6a      	bge.n	800ee2a <__kernel_rem_pio2+0x352>
 800ed54:	2a00      	cmp	r2, #0
 800ed56:	f000 8088 	beq.w	800ee6a <__kernel_rem_pio2+0x392>
 800ed5a:	ab0e      	add	r3, sp, #56	; 0x38
 800ed5c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ed60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f000 80b4 	beq.w	800eed2 <__kernel_rem_pio2+0x3fa>
 800ed6a:	4650      	mov	r0, sl
 800ed6c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800edf8 <__kernel_rem_pio2+0x320>
 800ed70:	f000 fb46 	bl	800f400 <scalbn>
 800ed74:	00ec      	lsls	r4, r5, #3
 800ed76:	ab72      	add	r3, sp, #456	; 0x1c8
 800ed78:	191e      	adds	r6, r3, r4
 800ed7a:	ec59 8b10 	vmov	r8, r9, d0
 800ed7e:	f106 0a08 	add.w	sl, r6, #8
 800ed82:	462f      	mov	r7, r5
 800ed84:	2f00      	cmp	r7, #0
 800ed86:	f280 80df 	bge.w	800ef48 <__kernel_rem_pio2+0x470>
 800ed8a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800edf0 <__kernel_rem_pio2+0x318>
 800ed8e:	f04f 0a00 	mov.w	sl, #0
 800ed92:	eba5 030a 	sub.w	r3, r5, sl
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f2c0 810a 	blt.w	800efb0 <__kernel_rem_pio2+0x4d8>
 800ed9c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800ee18 <__kernel_rem_pio2+0x340>
 800eda0:	ec59 8b18 	vmov	r8, r9, d8
 800eda4:	2700      	movs	r7, #0
 800eda6:	e0f5      	b.n	800ef94 <__kernel_rem_pio2+0x4bc>
 800eda8:	2302      	movs	r3, #2
 800edaa:	9302      	str	r3, [sp, #8]
 800edac:	e760      	b.n	800ec70 <__kernel_rem_pio2+0x198>
 800edae:	ab0e      	add	r3, sp, #56	; 0x38
 800edb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb4:	b94d      	cbnz	r5, 800edca <__kernel_rem_pio2+0x2f2>
 800edb6:	b12b      	cbz	r3, 800edc4 <__kernel_rem_pio2+0x2ec>
 800edb8:	a80e      	add	r0, sp, #56	; 0x38
 800edba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800edbe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800edc2:	2301      	movs	r3, #1
 800edc4:	3201      	adds	r2, #1
 800edc6:	461d      	mov	r5, r3
 800edc8:	e759      	b.n	800ec7e <__kernel_rem_pio2+0x1a6>
 800edca:	a80e      	add	r0, sp, #56	; 0x38
 800edcc:	1acb      	subs	r3, r1, r3
 800edce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800edd2:	462b      	mov	r3, r5
 800edd4:	e7f6      	b.n	800edc4 <__kernel_rem_pio2+0x2ec>
 800edd6:	1e62      	subs	r2, r4, #1
 800edd8:	ab0e      	add	r3, sp, #56	; 0x38
 800edda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edde:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ede2:	a90e      	add	r1, sp, #56	; 0x38
 800ede4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ede8:	e757      	b.n	800ec9a <__kernel_rem_pio2+0x1c2>
 800edea:	bf00      	nop
 800edec:	f3af 8000 	nop.w
	...
 800edfc:	3ff00000 	.word	0x3ff00000
 800ee00:	0800f7b8 	.word	0x0800f7b8
 800ee04:	40200000 	.word	0x40200000
 800ee08:	3ff00000 	.word	0x3ff00000
 800ee0c:	3e700000 	.word	0x3e700000
 800ee10:	41700000 	.word	0x41700000
 800ee14:	3fe00000 	.word	0x3fe00000
 800ee18:	0800f778 	.word	0x0800f778
 800ee1c:	1e62      	subs	r2, r4, #1
 800ee1e:	ab0e      	add	r3, sp, #56	; 0x38
 800ee20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ee28:	e7db      	b.n	800ede2 <__kernel_rem_pio2+0x30a>
 800ee2a:	a90e      	add	r1, sp, #56	; 0x38
 800ee2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ee30:	3b01      	subs	r3, #1
 800ee32:	430a      	orrs	r2, r1
 800ee34:	e78b      	b.n	800ed4e <__kernel_rem_pio2+0x276>
 800ee36:	3301      	adds	r3, #1
 800ee38:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ee3c:	2900      	cmp	r1, #0
 800ee3e:	d0fa      	beq.n	800ee36 <__kernel_rem_pio2+0x35e>
 800ee40:	9a08      	ldr	r2, [sp, #32]
 800ee42:	4422      	add	r2, r4
 800ee44:	00d2      	lsls	r2, r2, #3
 800ee46:	a922      	add	r1, sp, #136	; 0x88
 800ee48:	18e3      	adds	r3, r4, r3
 800ee4a:	9206      	str	r2, [sp, #24]
 800ee4c:	440a      	add	r2, r1
 800ee4e:	9302      	str	r3, [sp, #8]
 800ee50:	f10b 0108 	add.w	r1, fp, #8
 800ee54:	f102 0308 	add.w	r3, r2, #8
 800ee58:	1c66      	adds	r6, r4, #1
 800ee5a:	910a      	str	r1, [sp, #40]	; 0x28
 800ee5c:	2500      	movs	r5, #0
 800ee5e:	930d      	str	r3, [sp, #52]	; 0x34
 800ee60:	9b02      	ldr	r3, [sp, #8]
 800ee62:	42b3      	cmp	r3, r6
 800ee64:	da04      	bge.n	800ee70 <__kernel_rem_pio2+0x398>
 800ee66:	461c      	mov	r4, r3
 800ee68:	e6a6      	b.n	800ebb8 <__kernel_rem_pio2+0xe0>
 800ee6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	e7e3      	b.n	800ee38 <__kernel_rem_pio2+0x360>
 800ee70:	9b06      	ldr	r3, [sp, #24]
 800ee72:	18ef      	adds	r7, r5, r3
 800ee74:	ab22      	add	r3, sp, #136	; 0x88
 800ee76:	441f      	add	r7, r3
 800ee78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ee7e:	f7f1 fb51 	bl	8000524 <__aeabi_i2d>
 800ee82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee84:	461c      	mov	r4, r3
 800ee86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee88:	e9c7 0100 	strd	r0, r1, [r7]
 800ee8c:	eb03 0b05 	add.w	fp, r3, r5
 800ee90:	2700      	movs	r7, #0
 800ee92:	f04f 0800 	mov.w	r8, #0
 800ee96:	f04f 0900 	mov.w	r9, #0
 800ee9a:	9b07      	ldr	r3, [sp, #28]
 800ee9c:	429f      	cmp	r7, r3
 800ee9e:	dd08      	ble.n	800eeb2 <__kernel_rem_pio2+0x3da>
 800eea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eea2:	aa72      	add	r2, sp, #456	; 0x1c8
 800eea4:	18eb      	adds	r3, r5, r3
 800eea6:	4413      	add	r3, r2
 800eea8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800eeac:	3601      	adds	r6, #1
 800eeae:	3508      	adds	r5, #8
 800eeb0:	e7d6      	b.n	800ee60 <__kernel_rem_pio2+0x388>
 800eeb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eeb6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800eeba:	f7f1 fb9d 	bl	80005f8 <__aeabi_dmul>
 800eebe:	4602      	mov	r2, r0
 800eec0:	460b      	mov	r3, r1
 800eec2:	4640      	mov	r0, r8
 800eec4:	4649      	mov	r1, r9
 800eec6:	f7f1 f9e1 	bl	800028c <__adddf3>
 800eeca:	3701      	adds	r7, #1
 800eecc:	4680      	mov	r8, r0
 800eece:	4689      	mov	r9, r1
 800eed0:	e7e3      	b.n	800ee9a <__kernel_rem_pio2+0x3c2>
 800eed2:	3d01      	subs	r5, #1
 800eed4:	e741      	b.n	800ed5a <__kernel_rem_pio2+0x282>
 800eed6:	f1ca 0000 	rsb	r0, sl, #0
 800eeda:	ec47 6b10 	vmov	d0, r6, r7
 800eede:	f000 fa8f 	bl	800f400 <scalbn>
 800eee2:	ec57 6b10 	vmov	r6, r7, d0
 800eee6:	2200      	movs	r2, #0
 800eee8:	4b99      	ldr	r3, [pc, #612]	; (800f150 <__kernel_rem_pio2+0x678>)
 800eeea:	ee10 0a10 	vmov	r0, s0
 800eeee:	4639      	mov	r1, r7
 800eef0:	f7f1 fe08 	bl	8000b04 <__aeabi_dcmpge>
 800eef4:	b1f8      	cbz	r0, 800ef36 <__kernel_rem_pio2+0x45e>
 800eef6:	2200      	movs	r2, #0
 800eef8:	4b96      	ldr	r3, [pc, #600]	; (800f154 <__kernel_rem_pio2+0x67c>)
 800eefa:	4630      	mov	r0, r6
 800eefc:	4639      	mov	r1, r7
 800eefe:	f7f1 fb7b 	bl	80005f8 <__aeabi_dmul>
 800ef02:	f7f1 fe29 	bl	8000b58 <__aeabi_d2iz>
 800ef06:	4680      	mov	r8, r0
 800ef08:	f7f1 fb0c 	bl	8000524 <__aeabi_i2d>
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	4b90      	ldr	r3, [pc, #576]	; (800f150 <__kernel_rem_pio2+0x678>)
 800ef10:	f7f1 fb72 	bl	80005f8 <__aeabi_dmul>
 800ef14:	460b      	mov	r3, r1
 800ef16:	4602      	mov	r2, r0
 800ef18:	4639      	mov	r1, r7
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	f7f1 f9b4 	bl	8000288 <__aeabi_dsub>
 800ef20:	f7f1 fe1a 	bl	8000b58 <__aeabi_d2iz>
 800ef24:	1c65      	adds	r5, r4, #1
 800ef26:	ab0e      	add	r3, sp, #56	; 0x38
 800ef28:	f10a 0a18 	add.w	sl, sl, #24
 800ef2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ef30:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ef34:	e719      	b.n	800ed6a <__kernel_rem_pio2+0x292>
 800ef36:	4630      	mov	r0, r6
 800ef38:	4639      	mov	r1, r7
 800ef3a:	f7f1 fe0d 	bl	8000b58 <__aeabi_d2iz>
 800ef3e:	ab0e      	add	r3, sp, #56	; 0x38
 800ef40:	4625      	mov	r5, r4
 800ef42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ef46:	e710      	b.n	800ed6a <__kernel_rem_pio2+0x292>
 800ef48:	ab0e      	add	r3, sp, #56	; 0x38
 800ef4a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ef4e:	f7f1 fae9 	bl	8000524 <__aeabi_i2d>
 800ef52:	4642      	mov	r2, r8
 800ef54:	464b      	mov	r3, r9
 800ef56:	f7f1 fb4f 	bl	80005f8 <__aeabi_dmul>
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ef60:	4b7c      	ldr	r3, [pc, #496]	; (800f154 <__kernel_rem_pio2+0x67c>)
 800ef62:	4640      	mov	r0, r8
 800ef64:	4649      	mov	r1, r9
 800ef66:	f7f1 fb47 	bl	80005f8 <__aeabi_dmul>
 800ef6a:	3f01      	subs	r7, #1
 800ef6c:	4680      	mov	r8, r0
 800ef6e:	4689      	mov	r9, r1
 800ef70:	e708      	b.n	800ed84 <__kernel_rem_pio2+0x2ac>
 800ef72:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ef76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ef7e:	f7f1 fb3b 	bl	80005f8 <__aeabi_dmul>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	4640      	mov	r0, r8
 800ef88:	4649      	mov	r1, r9
 800ef8a:	f7f1 f97f 	bl	800028c <__adddf3>
 800ef8e:	3701      	adds	r7, #1
 800ef90:	4680      	mov	r8, r0
 800ef92:	4689      	mov	r9, r1
 800ef94:	9b04      	ldr	r3, [sp, #16]
 800ef96:	429f      	cmp	r7, r3
 800ef98:	dc01      	bgt.n	800ef9e <__kernel_rem_pio2+0x4c6>
 800ef9a:	45ba      	cmp	sl, r7
 800ef9c:	dae9      	bge.n	800ef72 <__kernel_rem_pio2+0x49a>
 800ef9e:	ab4a      	add	r3, sp, #296	; 0x128
 800efa0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800efa4:	e9c3 8900 	strd	r8, r9, [r3]
 800efa8:	f10a 0a01 	add.w	sl, sl, #1
 800efac:	3e08      	subs	r6, #8
 800efae:	e6f0      	b.n	800ed92 <__kernel_rem_pio2+0x2ba>
 800efb0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800efb2:	2b03      	cmp	r3, #3
 800efb4:	d85b      	bhi.n	800f06e <__kernel_rem_pio2+0x596>
 800efb6:	e8df f003 	tbb	[pc, r3]
 800efba:	264a      	.short	0x264a
 800efbc:	0226      	.short	0x0226
 800efbe:	ab9a      	add	r3, sp, #616	; 0x268
 800efc0:	441c      	add	r4, r3
 800efc2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800efc6:	46a2      	mov	sl, r4
 800efc8:	46ab      	mov	fp, r5
 800efca:	f1bb 0f00 	cmp.w	fp, #0
 800efce:	dc6c      	bgt.n	800f0aa <__kernel_rem_pio2+0x5d2>
 800efd0:	46a2      	mov	sl, r4
 800efd2:	46ab      	mov	fp, r5
 800efd4:	f1bb 0f01 	cmp.w	fp, #1
 800efd8:	f300 8086 	bgt.w	800f0e8 <__kernel_rem_pio2+0x610>
 800efdc:	2000      	movs	r0, #0
 800efde:	2100      	movs	r1, #0
 800efe0:	2d01      	cmp	r5, #1
 800efe2:	f300 80a0 	bgt.w	800f126 <__kernel_rem_pio2+0x64e>
 800efe6:	9b02      	ldr	r3, [sp, #8]
 800efe8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800efec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f040 809e 	bne.w	800f132 <__kernel_rem_pio2+0x65a>
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	e9c3 7800 	strd	r7, r8, [r3]
 800effc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f000:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f004:	e033      	b.n	800f06e <__kernel_rem_pio2+0x596>
 800f006:	3408      	adds	r4, #8
 800f008:	ab4a      	add	r3, sp, #296	; 0x128
 800f00a:	441c      	add	r4, r3
 800f00c:	462e      	mov	r6, r5
 800f00e:	2000      	movs	r0, #0
 800f010:	2100      	movs	r1, #0
 800f012:	2e00      	cmp	r6, #0
 800f014:	da3a      	bge.n	800f08c <__kernel_rem_pio2+0x5b4>
 800f016:	9b02      	ldr	r3, [sp, #8]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d03d      	beq.n	800f098 <__kernel_rem_pio2+0x5c0>
 800f01c:	4602      	mov	r2, r0
 800f01e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f022:	9c01      	ldr	r4, [sp, #4]
 800f024:	e9c4 2300 	strd	r2, r3, [r4]
 800f028:	4602      	mov	r2, r0
 800f02a:	460b      	mov	r3, r1
 800f02c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f030:	f7f1 f92a 	bl	8000288 <__aeabi_dsub>
 800f034:	ae4c      	add	r6, sp, #304	; 0x130
 800f036:	2401      	movs	r4, #1
 800f038:	42a5      	cmp	r5, r4
 800f03a:	da30      	bge.n	800f09e <__kernel_rem_pio2+0x5c6>
 800f03c:	9b02      	ldr	r3, [sp, #8]
 800f03e:	b113      	cbz	r3, 800f046 <__kernel_rem_pio2+0x56e>
 800f040:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f044:	4619      	mov	r1, r3
 800f046:	9b01      	ldr	r3, [sp, #4]
 800f048:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f04c:	e00f      	b.n	800f06e <__kernel_rem_pio2+0x596>
 800f04e:	ab9a      	add	r3, sp, #616	; 0x268
 800f050:	441c      	add	r4, r3
 800f052:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f056:	2000      	movs	r0, #0
 800f058:	2100      	movs	r1, #0
 800f05a:	2d00      	cmp	r5, #0
 800f05c:	da10      	bge.n	800f080 <__kernel_rem_pio2+0x5a8>
 800f05e:	9b02      	ldr	r3, [sp, #8]
 800f060:	b113      	cbz	r3, 800f068 <__kernel_rem_pio2+0x590>
 800f062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f066:	4619      	mov	r1, r3
 800f068:	9b01      	ldr	r3, [sp, #4]
 800f06a:	e9c3 0100 	strd	r0, r1, [r3]
 800f06e:	9b06      	ldr	r3, [sp, #24]
 800f070:	f003 0007 	and.w	r0, r3, #7
 800f074:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f078:	ecbd 8b02 	vpop	{d8}
 800f07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f080:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f084:	f7f1 f902 	bl	800028c <__adddf3>
 800f088:	3d01      	subs	r5, #1
 800f08a:	e7e6      	b.n	800f05a <__kernel_rem_pio2+0x582>
 800f08c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f090:	f7f1 f8fc 	bl	800028c <__adddf3>
 800f094:	3e01      	subs	r6, #1
 800f096:	e7bc      	b.n	800f012 <__kernel_rem_pio2+0x53a>
 800f098:	4602      	mov	r2, r0
 800f09a:	460b      	mov	r3, r1
 800f09c:	e7c1      	b.n	800f022 <__kernel_rem_pio2+0x54a>
 800f09e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f0a2:	f7f1 f8f3 	bl	800028c <__adddf3>
 800f0a6:	3401      	adds	r4, #1
 800f0a8:	e7c6      	b.n	800f038 <__kernel_rem_pio2+0x560>
 800f0aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800f0ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f0b2:	4640      	mov	r0, r8
 800f0b4:	ec53 2b17 	vmov	r2, r3, d7
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f0be:	f7f1 f8e5 	bl	800028c <__adddf3>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	4606      	mov	r6, r0
 800f0c8:	460f      	mov	r7, r1
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	f7f1 f8db 	bl	8000288 <__aeabi_dsub>
 800f0d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0d6:	f7f1 f8d9 	bl	800028c <__adddf3>
 800f0da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0de:	e9ca 0100 	strd	r0, r1, [sl]
 800f0e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800f0e6:	e770      	b.n	800efca <__kernel_rem_pio2+0x4f2>
 800f0e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800f0ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	ec53 2b17 	vmov	r2, r3, d7
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f0fc:	f7f1 f8c6 	bl	800028c <__adddf3>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	4680      	mov	r8, r0
 800f106:	4689      	mov	r9, r1
 800f108:	4630      	mov	r0, r6
 800f10a:	4639      	mov	r1, r7
 800f10c:	f7f1 f8bc 	bl	8000288 <__aeabi_dsub>
 800f110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f114:	f7f1 f8ba 	bl	800028c <__adddf3>
 800f118:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f11c:	e9ca 0100 	strd	r0, r1, [sl]
 800f120:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800f124:	e756      	b.n	800efd4 <__kernel_rem_pio2+0x4fc>
 800f126:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f12a:	f7f1 f8af 	bl	800028c <__adddf3>
 800f12e:	3d01      	subs	r5, #1
 800f130:	e756      	b.n	800efe0 <__kernel_rem_pio2+0x508>
 800f132:	9b01      	ldr	r3, [sp, #4]
 800f134:	9a01      	ldr	r2, [sp, #4]
 800f136:	601f      	str	r7, [r3, #0]
 800f138:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f13c:	605c      	str	r4, [r3, #4]
 800f13e:	609d      	str	r5, [r3, #8]
 800f140:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f144:	60d3      	str	r3, [r2, #12]
 800f146:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f14a:	6110      	str	r0, [r2, #16]
 800f14c:	6153      	str	r3, [r2, #20]
 800f14e:	e78e      	b.n	800f06e <__kernel_rem_pio2+0x596>
 800f150:	41700000 	.word	0x41700000
 800f154:	3e700000 	.word	0x3e700000

0800f158 <__kernel_sin>:
 800f158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15c:	ec55 4b10 	vmov	r4, r5, d0
 800f160:	b085      	sub	sp, #20
 800f162:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f166:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f16a:	ed8d 1b00 	vstr	d1, [sp]
 800f16e:	9002      	str	r0, [sp, #8]
 800f170:	da06      	bge.n	800f180 <__kernel_sin+0x28>
 800f172:	ee10 0a10 	vmov	r0, s0
 800f176:	4629      	mov	r1, r5
 800f178:	f7f1 fcee 	bl	8000b58 <__aeabi_d2iz>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d051      	beq.n	800f224 <__kernel_sin+0xcc>
 800f180:	4622      	mov	r2, r4
 800f182:	462b      	mov	r3, r5
 800f184:	4620      	mov	r0, r4
 800f186:	4629      	mov	r1, r5
 800f188:	f7f1 fa36 	bl	80005f8 <__aeabi_dmul>
 800f18c:	4682      	mov	sl, r0
 800f18e:	468b      	mov	fp, r1
 800f190:	4602      	mov	r2, r0
 800f192:	460b      	mov	r3, r1
 800f194:	4620      	mov	r0, r4
 800f196:	4629      	mov	r1, r5
 800f198:	f7f1 fa2e 	bl	80005f8 <__aeabi_dmul>
 800f19c:	a341      	add	r3, pc, #260	; (adr r3, 800f2a4 <__kernel_sin+0x14c>)
 800f19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a2:	4680      	mov	r8, r0
 800f1a4:	4689      	mov	r9, r1
 800f1a6:	4650      	mov	r0, sl
 800f1a8:	4659      	mov	r1, fp
 800f1aa:	f7f1 fa25 	bl	80005f8 <__aeabi_dmul>
 800f1ae:	a33f      	add	r3, pc, #252	; (adr r3, 800f2ac <__kernel_sin+0x154>)
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	f7f1 f868 	bl	8000288 <__aeabi_dsub>
 800f1b8:	4652      	mov	r2, sl
 800f1ba:	465b      	mov	r3, fp
 800f1bc:	f7f1 fa1c 	bl	80005f8 <__aeabi_dmul>
 800f1c0:	a33c      	add	r3, pc, #240	; (adr r3, 800f2b4 <__kernel_sin+0x15c>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	f7f1 f861 	bl	800028c <__adddf3>
 800f1ca:	4652      	mov	r2, sl
 800f1cc:	465b      	mov	r3, fp
 800f1ce:	f7f1 fa13 	bl	80005f8 <__aeabi_dmul>
 800f1d2:	a33a      	add	r3, pc, #232	; (adr r3, 800f2bc <__kernel_sin+0x164>)
 800f1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d8:	f7f1 f856 	bl	8000288 <__aeabi_dsub>
 800f1dc:	4652      	mov	r2, sl
 800f1de:	465b      	mov	r3, fp
 800f1e0:	f7f1 fa0a 	bl	80005f8 <__aeabi_dmul>
 800f1e4:	a337      	add	r3, pc, #220	; (adr r3, 800f2c4 <__kernel_sin+0x16c>)
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	f7f1 f84f 	bl	800028c <__adddf3>
 800f1ee:	9b02      	ldr	r3, [sp, #8]
 800f1f0:	4606      	mov	r6, r0
 800f1f2:	460f      	mov	r7, r1
 800f1f4:	b9db      	cbnz	r3, 800f22e <__kernel_sin+0xd6>
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	460b      	mov	r3, r1
 800f1fa:	4650      	mov	r0, sl
 800f1fc:	4659      	mov	r1, fp
 800f1fe:	f7f1 f9fb 	bl	80005f8 <__aeabi_dmul>
 800f202:	a325      	add	r3, pc, #148	; (adr r3, 800f298 <__kernel_sin+0x140>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	f7f1 f83e 	bl	8000288 <__aeabi_dsub>
 800f20c:	4642      	mov	r2, r8
 800f20e:	464b      	mov	r3, r9
 800f210:	f7f1 f9f2 	bl	80005f8 <__aeabi_dmul>
 800f214:	4602      	mov	r2, r0
 800f216:	460b      	mov	r3, r1
 800f218:	4620      	mov	r0, r4
 800f21a:	4629      	mov	r1, r5
 800f21c:	f7f1 f836 	bl	800028c <__adddf3>
 800f220:	4604      	mov	r4, r0
 800f222:	460d      	mov	r5, r1
 800f224:	ec45 4b10 	vmov	d0, r4, r5
 800f228:	b005      	add	sp, #20
 800f22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22e:	2200      	movs	r2, #0
 800f230:	4b1b      	ldr	r3, [pc, #108]	; (800f2a0 <__kernel_sin+0x148>)
 800f232:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f236:	f7f1 f9df 	bl	80005f8 <__aeabi_dmul>
 800f23a:	4632      	mov	r2, r6
 800f23c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f240:	463b      	mov	r3, r7
 800f242:	4640      	mov	r0, r8
 800f244:	4649      	mov	r1, r9
 800f246:	f7f1 f9d7 	bl	80005f8 <__aeabi_dmul>
 800f24a:	4602      	mov	r2, r0
 800f24c:	460b      	mov	r3, r1
 800f24e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f252:	f7f1 f819 	bl	8000288 <__aeabi_dsub>
 800f256:	4652      	mov	r2, sl
 800f258:	465b      	mov	r3, fp
 800f25a:	f7f1 f9cd 	bl	80005f8 <__aeabi_dmul>
 800f25e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f262:	f7f1 f811 	bl	8000288 <__aeabi_dsub>
 800f266:	a30c      	add	r3, pc, #48	; (adr r3, 800f298 <__kernel_sin+0x140>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	4606      	mov	r6, r0
 800f26e:	460f      	mov	r7, r1
 800f270:	4640      	mov	r0, r8
 800f272:	4649      	mov	r1, r9
 800f274:	f7f1 f9c0 	bl	80005f8 <__aeabi_dmul>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4630      	mov	r0, r6
 800f27e:	4639      	mov	r1, r7
 800f280:	f7f1 f804 	bl	800028c <__adddf3>
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	4620      	mov	r0, r4
 800f28a:	4629      	mov	r1, r5
 800f28c:	f7f0 fffc 	bl	8000288 <__aeabi_dsub>
 800f290:	e7c6      	b.n	800f220 <__kernel_sin+0xc8>
 800f292:	bf00      	nop
 800f294:	f3af 8000 	nop.w
 800f298:	55555549 	.word	0x55555549
 800f29c:	3fc55555 	.word	0x3fc55555
 800f2a0:	3fe00000 	.word	0x3fe00000
 800f2a4:	5acfd57c 	.word	0x5acfd57c
 800f2a8:	3de5d93a 	.word	0x3de5d93a
 800f2ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800f2b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f2b4:	57b1fe7d 	.word	0x57b1fe7d
 800f2b8:	3ec71de3 	.word	0x3ec71de3
 800f2bc:	19c161d5 	.word	0x19c161d5
 800f2c0:	3f2a01a0 	.word	0x3f2a01a0
 800f2c4:	1110f8a6 	.word	0x1110f8a6
 800f2c8:	3f811111 	.word	0x3f811111

0800f2cc <fabs>:
 800f2cc:	ec51 0b10 	vmov	r0, r1, d0
 800f2d0:	ee10 2a10 	vmov	r2, s0
 800f2d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f2d8:	ec43 2b10 	vmov	d0, r2, r3
 800f2dc:	4770      	bx	lr
	...

0800f2e0 <floor>:
 800f2e0:	ec51 0b10 	vmov	r0, r1, d0
 800f2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f2ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f2f0:	2e13      	cmp	r6, #19
 800f2f2:	460c      	mov	r4, r1
 800f2f4:	ee10 5a10 	vmov	r5, s0
 800f2f8:	4680      	mov	r8, r0
 800f2fa:	dc34      	bgt.n	800f366 <floor+0x86>
 800f2fc:	2e00      	cmp	r6, #0
 800f2fe:	da16      	bge.n	800f32e <floor+0x4e>
 800f300:	a335      	add	r3, pc, #212	; (adr r3, 800f3d8 <floor+0xf8>)
 800f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f306:	f7f0 ffc1 	bl	800028c <__adddf3>
 800f30a:	2200      	movs	r2, #0
 800f30c:	2300      	movs	r3, #0
 800f30e:	f7f1 fc03 	bl	8000b18 <__aeabi_dcmpgt>
 800f312:	b148      	cbz	r0, 800f328 <floor+0x48>
 800f314:	2c00      	cmp	r4, #0
 800f316:	da59      	bge.n	800f3cc <floor+0xec>
 800f318:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f31c:	4a30      	ldr	r2, [pc, #192]	; (800f3e0 <floor+0x100>)
 800f31e:	432b      	orrs	r3, r5
 800f320:	2500      	movs	r5, #0
 800f322:	42ab      	cmp	r3, r5
 800f324:	bf18      	it	ne
 800f326:	4614      	movne	r4, r2
 800f328:	4621      	mov	r1, r4
 800f32a:	4628      	mov	r0, r5
 800f32c:	e025      	b.n	800f37a <floor+0x9a>
 800f32e:	4f2d      	ldr	r7, [pc, #180]	; (800f3e4 <floor+0x104>)
 800f330:	4137      	asrs	r7, r6
 800f332:	ea01 0307 	and.w	r3, r1, r7
 800f336:	4303      	orrs	r3, r0
 800f338:	d01f      	beq.n	800f37a <floor+0x9a>
 800f33a:	a327      	add	r3, pc, #156	; (adr r3, 800f3d8 <floor+0xf8>)
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	f7f0 ffa4 	bl	800028c <__adddf3>
 800f344:	2200      	movs	r2, #0
 800f346:	2300      	movs	r3, #0
 800f348:	f7f1 fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d0eb      	beq.n	800f328 <floor+0x48>
 800f350:	2c00      	cmp	r4, #0
 800f352:	bfbe      	ittt	lt
 800f354:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f358:	fa43 f606 	asrlt.w	r6, r3, r6
 800f35c:	19a4      	addlt	r4, r4, r6
 800f35e:	ea24 0407 	bic.w	r4, r4, r7
 800f362:	2500      	movs	r5, #0
 800f364:	e7e0      	b.n	800f328 <floor+0x48>
 800f366:	2e33      	cmp	r6, #51	; 0x33
 800f368:	dd0b      	ble.n	800f382 <floor+0xa2>
 800f36a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f36e:	d104      	bne.n	800f37a <floor+0x9a>
 800f370:	ee10 2a10 	vmov	r2, s0
 800f374:	460b      	mov	r3, r1
 800f376:	f7f0 ff89 	bl	800028c <__adddf3>
 800f37a:	ec41 0b10 	vmov	d0, r0, r1
 800f37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f382:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f386:	f04f 33ff 	mov.w	r3, #4294967295
 800f38a:	fa23 f707 	lsr.w	r7, r3, r7
 800f38e:	4207      	tst	r7, r0
 800f390:	d0f3      	beq.n	800f37a <floor+0x9a>
 800f392:	a311      	add	r3, pc, #68	; (adr r3, 800f3d8 <floor+0xf8>)
 800f394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f398:	f7f0 ff78 	bl	800028c <__adddf3>
 800f39c:	2200      	movs	r2, #0
 800f39e:	2300      	movs	r3, #0
 800f3a0:	f7f1 fbba 	bl	8000b18 <__aeabi_dcmpgt>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d0bf      	beq.n	800f328 <floor+0x48>
 800f3a8:	2c00      	cmp	r4, #0
 800f3aa:	da02      	bge.n	800f3b2 <floor+0xd2>
 800f3ac:	2e14      	cmp	r6, #20
 800f3ae:	d103      	bne.n	800f3b8 <floor+0xd8>
 800f3b0:	3401      	adds	r4, #1
 800f3b2:	ea25 0507 	bic.w	r5, r5, r7
 800f3b6:	e7b7      	b.n	800f328 <floor+0x48>
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f3be:	fa03 f606 	lsl.w	r6, r3, r6
 800f3c2:	4435      	add	r5, r6
 800f3c4:	4545      	cmp	r5, r8
 800f3c6:	bf38      	it	cc
 800f3c8:	18e4      	addcc	r4, r4, r3
 800f3ca:	e7f2      	b.n	800f3b2 <floor+0xd2>
 800f3cc:	2500      	movs	r5, #0
 800f3ce:	462c      	mov	r4, r5
 800f3d0:	e7aa      	b.n	800f328 <floor+0x48>
 800f3d2:	bf00      	nop
 800f3d4:	f3af 8000 	nop.w
 800f3d8:	8800759c 	.word	0x8800759c
 800f3dc:	7e37e43c 	.word	0x7e37e43c
 800f3e0:	bff00000 	.word	0xbff00000
 800f3e4:	000fffff 	.word	0x000fffff

0800f3e8 <matherr>:
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	4770      	bx	lr
 800f3ec:	0000      	movs	r0, r0
	...

0800f3f0 <nan>:
 800f3f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f3f8 <nan+0x8>
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	00000000 	.word	0x00000000
 800f3fc:	7ff80000 	.word	0x7ff80000

0800f400 <scalbn>:
 800f400:	b570      	push	{r4, r5, r6, lr}
 800f402:	ec55 4b10 	vmov	r4, r5, d0
 800f406:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f40a:	4606      	mov	r6, r0
 800f40c:	462b      	mov	r3, r5
 800f40e:	b9aa      	cbnz	r2, 800f43c <scalbn+0x3c>
 800f410:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f414:	4323      	orrs	r3, r4
 800f416:	d03b      	beq.n	800f490 <scalbn+0x90>
 800f418:	4b31      	ldr	r3, [pc, #196]	; (800f4e0 <scalbn+0xe0>)
 800f41a:	4629      	mov	r1, r5
 800f41c:	2200      	movs	r2, #0
 800f41e:	ee10 0a10 	vmov	r0, s0
 800f422:	f7f1 f8e9 	bl	80005f8 <__aeabi_dmul>
 800f426:	4b2f      	ldr	r3, [pc, #188]	; (800f4e4 <scalbn+0xe4>)
 800f428:	429e      	cmp	r6, r3
 800f42a:	4604      	mov	r4, r0
 800f42c:	460d      	mov	r5, r1
 800f42e:	da12      	bge.n	800f456 <scalbn+0x56>
 800f430:	a327      	add	r3, pc, #156	; (adr r3, 800f4d0 <scalbn+0xd0>)
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	f7f1 f8df 	bl	80005f8 <__aeabi_dmul>
 800f43a:	e009      	b.n	800f450 <scalbn+0x50>
 800f43c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f440:	428a      	cmp	r2, r1
 800f442:	d10c      	bne.n	800f45e <scalbn+0x5e>
 800f444:	ee10 2a10 	vmov	r2, s0
 800f448:	4620      	mov	r0, r4
 800f44a:	4629      	mov	r1, r5
 800f44c:	f7f0 ff1e 	bl	800028c <__adddf3>
 800f450:	4604      	mov	r4, r0
 800f452:	460d      	mov	r5, r1
 800f454:	e01c      	b.n	800f490 <scalbn+0x90>
 800f456:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f45a:	460b      	mov	r3, r1
 800f45c:	3a36      	subs	r2, #54	; 0x36
 800f45e:	4432      	add	r2, r6
 800f460:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f464:	428a      	cmp	r2, r1
 800f466:	dd0b      	ble.n	800f480 <scalbn+0x80>
 800f468:	ec45 4b11 	vmov	d1, r4, r5
 800f46c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f4d8 <scalbn+0xd8>
 800f470:	f000 f83c 	bl	800f4ec <copysign>
 800f474:	a318      	add	r3, pc, #96	; (adr r3, 800f4d8 <scalbn+0xd8>)
 800f476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47a:	ec51 0b10 	vmov	r0, r1, d0
 800f47e:	e7da      	b.n	800f436 <scalbn+0x36>
 800f480:	2a00      	cmp	r2, #0
 800f482:	dd08      	ble.n	800f496 <scalbn+0x96>
 800f484:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f488:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f48c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f490:	ec45 4b10 	vmov	d0, r4, r5
 800f494:	bd70      	pop	{r4, r5, r6, pc}
 800f496:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f49a:	da0d      	bge.n	800f4b8 <scalbn+0xb8>
 800f49c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4a0:	429e      	cmp	r6, r3
 800f4a2:	ec45 4b11 	vmov	d1, r4, r5
 800f4a6:	dce1      	bgt.n	800f46c <scalbn+0x6c>
 800f4a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f4d0 <scalbn+0xd0>
 800f4ac:	f000 f81e 	bl	800f4ec <copysign>
 800f4b0:	a307      	add	r3, pc, #28	; (adr r3, 800f4d0 <scalbn+0xd0>)
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	e7e0      	b.n	800f47a <scalbn+0x7a>
 800f4b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4bc:	3236      	adds	r2, #54	; 0x36
 800f4be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	4b06      	ldr	r3, [pc, #24]	; (800f4e8 <scalbn+0xe8>)
 800f4ce:	e7b2      	b.n	800f436 <scalbn+0x36>
 800f4d0:	c2f8f359 	.word	0xc2f8f359
 800f4d4:	01a56e1f 	.word	0x01a56e1f
 800f4d8:	8800759c 	.word	0x8800759c
 800f4dc:	7e37e43c 	.word	0x7e37e43c
 800f4e0:	43500000 	.word	0x43500000
 800f4e4:	ffff3cb0 	.word	0xffff3cb0
 800f4e8:	3c900000 	.word	0x3c900000

0800f4ec <copysign>:
 800f4ec:	ec51 0b10 	vmov	r0, r1, d0
 800f4f0:	ee11 0a90 	vmov	r0, s3
 800f4f4:	ee10 2a10 	vmov	r2, s0
 800f4f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f4fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f500:	ea41 0300 	orr.w	r3, r1, r0
 800f504:	ec43 2b10 	vmov	d0, r2, r3
 800f508:	4770      	bx	lr
	...

0800f50c <_init>:
 800f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f50e:	bf00      	nop
 800f510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f512:	bc08      	pop	{r3}
 800f514:	469e      	mov	lr, r3
 800f516:	4770      	bx	lr

0800f518 <_fini>:
 800f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51a:	bf00      	nop
 800f51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f51e:	bc08      	pop	{r3}
 800f520:	469e      	mov	lr, r3
 800f522:	4770      	bx	lr
