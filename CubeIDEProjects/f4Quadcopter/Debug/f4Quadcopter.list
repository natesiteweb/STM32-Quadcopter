
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c83c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800c9cc  0800c9cc  0001c9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca88  0800ca88  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca88  0800ca88  0001ca88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca90  0800ca90  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca90  0800ca90  0001ca90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca94  0800ca94  0001ca94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ca98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce8  200001ec  0800cc84  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ed4  0800cc84  00021ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d86f  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ea4  00000000  00000000  0003da8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  00041930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  00042ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000241a5  00000000  00000000  00044248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015a41  00000000  00000000  000683ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8fc9  00000000  00000000  0007de2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146df7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd4  00000000  00000000  00146e74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9b4 	.word	0x0800c9b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800c9b4 	.word	0x0800c9b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b972 	b.w	8000da8 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4688      	mov	r8, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14b      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4615      	mov	r5, r2
 8000aee:	d967      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0720 	rsb	r7, r2, #32
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	fa20 f707 	lsr.w	r7, r0, r7
 8000b02:	4095      	lsls	r5, r2
 8000b04:	ea47 0803 	orr.w	r8, r7, r3
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b14:	fa1f fc85 	uxth.w	ip, r5
 8000b18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b20:	fb07 f10c 	mul.w	r1, r7, ip
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18eb      	adds	r3, r5, r3
 8000b2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b2e:	f080 811b 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8118 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b38:	3f02      	subs	r7, #2
 8000b3a:	442b      	add	r3, r5
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b50:	45a4      	cmp	ip, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	192c      	adds	r4, r5, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8107 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b5e:	45a4      	cmp	ip, r4
 8000b60:	f240 8104 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b64:	3802      	subs	r0, #2
 8000b66:	442c      	add	r4, r5
 8000b68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b6c:	eba4 040c 	sub.w	r4, r4, ip
 8000b70:	2700      	movs	r7, #0
 8000b72:	b11e      	cbz	r6, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xbe>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80eb 	beq.w	8000d62 <__udivmoddi4+0x286>
 8000b8c:	2700      	movs	r7, #0
 8000b8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b92:	4638      	mov	r0, r7
 8000b94:	4639      	mov	r1, r7
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f783 	clz	r7, r3
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d147      	bne.n	8000c32 <__udivmoddi4+0x156>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd0>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80fa 	bhi.w	8000da0 <__udivmoddi4+0x2c4>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000bba:	e9c6 4800 	strd	r4, r8, [r6]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xe8>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 808f 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bce:	1b49      	subs	r1, r1, r5
 8000bd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd4:	fa1f f885 	uxth.w	r8, r5
 8000bd8:	2701      	movs	r7, #1
 8000bda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	f200 80cd 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x14c>
 8000c18:	192c      	adds	r4, r5, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x14a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80b6 	bhi.w	8000d92 <__udivmoddi4+0x2b6>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e79f      	b.n	8000b72 <__udivmoddi4+0x96>
 8000c32:	f1c7 0c20 	rsb	ip, r7, #32
 8000c36:	40bb      	lsls	r3, r7
 8000c38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c40:	fa01 f407 	lsl.w	r4, r1, r7
 8000c44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c50:	4325      	orrs	r5, r4
 8000c52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c56:	0c2c      	lsrs	r4, r5, #16
 8000c58:	fb08 3319 	mls	r3, r8, r9, r3
 8000c5c:	fa1f fa8e 	uxth.w	sl, lr
 8000c60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c64:	fb09 f40a 	mul.w	r4, r9, sl
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1e 0303 	adds.w	r3, lr, r3
 8000c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c7c:	f080 8087 	bcs.w	8000d8e <__udivmoddi4+0x2b2>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f240 8084 	bls.w	8000d8e <__udivmoddi4+0x2b2>
 8000c86:	f1a9 0902 	sub.w	r9, r9, #2
 8000c8a:	4473      	add	r3, lr
 8000c8c:	1b1b      	subs	r3, r3, r4
 8000c8e:	b2ad      	uxth	r5, r5
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ca0:	45a2      	cmp	sl, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	d26b      	bcs.n	8000d86 <__udivmoddi4+0x2aa>
 8000cae:	45a2      	cmp	sl, r4
 8000cb0:	d969      	bls.n	8000d86 <__udivmoddi4+0x2aa>
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	4474      	add	r4, lr
 8000cb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cba:	fba0 8902 	umull	r8, r9, r0, r2
 8000cbe:	eba4 040a 	sub.w	r4, r4, sl
 8000cc2:	454c      	cmp	r4, r9
 8000cc4:	46c2      	mov	sl, r8
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	d354      	bcc.n	8000d74 <__udivmoddi4+0x298>
 8000cca:	d051      	beq.n	8000d70 <__udivmoddi4+0x294>
 8000ccc:	2e00      	cmp	r6, #0
 8000cce:	d069      	beq.n	8000da4 <__udivmoddi4+0x2c8>
 8000cd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cdc:	40fd      	lsrs	r5, r7
 8000cde:	40fc      	lsrs	r4, r7
 8000ce0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ce4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e747      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000cec:	f1c2 0320 	rsb	r3, r2, #32
 8000cf0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d02:	4338      	orrs	r0, r7
 8000d04:	0c01      	lsrs	r1, r0, #16
 8000d06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d0a:	fa1f f885 	uxth.w	r8, r5
 8000d0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb07 f308 	mul.w	r3, r7, r8
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d20:	d907      	bls.n	8000d32 <__udivmoddi4+0x256>
 8000d22:	1869      	adds	r1, r5, r1
 8000d24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d28:	d22f      	bcs.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d92d      	bls.n	8000d8a <__udivmoddi4+0x2ae>
 8000d2e:	3f02      	subs	r7, #2
 8000d30:	4429      	add	r1, r5
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	b281      	uxth	r1, r0
 8000d36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d42:	fb00 f308 	mul.w	r3, r0, r8
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x27e>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d50:	d217      	bcs.n	8000d82 <__udivmoddi4+0x2a6>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d915      	bls.n	8000d82 <__udivmoddi4+0x2a6>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1ac9      	subs	r1, r1, r3
 8000d5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d60:	e73b      	b.n	8000bda <__udivmoddi4+0xfe>
 8000d62:	4637      	mov	r7, r6
 8000d64:	4630      	mov	r0, r6
 8000d66:	e709      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d68:	4607      	mov	r7, r0
 8000d6a:	e6e7      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	e6fb      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d70:	4541      	cmp	r1, r8
 8000d72:	d2ab      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d78:	eb69 020e 	sbc.w	r2, r9, lr
 8000d7c:	3801      	subs	r0, #1
 8000d7e:	4613      	mov	r3, r2
 8000d80:	e7a4      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d82:	4660      	mov	r0, ip
 8000d84:	e7e9      	b.n	8000d5a <__udivmoddi4+0x27e>
 8000d86:	4618      	mov	r0, r3
 8000d88:	e795      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8a:	4667      	mov	r7, ip
 8000d8c:	e7d1      	b.n	8000d32 <__udivmoddi4+0x256>
 8000d8e:	4681      	mov	r9, r0
 8000d90:	e77c      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d92:	3802      	subs	r0, #2
 8000d94:	442c      	add	r4, r5
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0x14c>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	442b      	add	r3, r5
 8000d9e:	e72f      	b.n	8000c00 <__udivmoddi4+0x124>
 8000da0:	4638      	mov	r0, r7
 8000da2:	e708      	b.n	8000bb6 <__udivmoddi4+0xda>
 8000da4:	4637      	mov	r7, r6
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0xa0>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_DMA_Init+0x6c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <MX_DMA_Init+0x6c>)
 8000dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_DMA_Init+0x6c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200b      	movs	r0, #11
 8000dd4:	f001 fab1 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dd8:	200b      	movs	r0, #11
 8000dda:	f001 faca 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200e      	movs	r0, #14
 8000de4:	f001 faa9 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000de8:	200e      	movs	r0, #14
 8000dea:	f001 fac2 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2011      	movs	r0, #17
 8000df4:	f001 faa1 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000df8:	2011      	movs	r0, #17
 8000dfa:	f001 faba 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	202f      	movs	r0, #47	; 0x2f
 8000e04:	f001 fa99 	bl	800233a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e08:	202f      	movs	r0, #47	; 0x2f
 8000e0a:	f001 fab2 	bl	8002372 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a30      	ldr	r2, [pc, #192]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a29      	ldr	r2, [pc, #164]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a22      	ldr	r2, [pc, #136]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_GPIO_Init+0xe0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2106      	movs	r1, #6
 8000ea6:	4816      	ldr	r0, [pc, #88]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000ea8:	f001 ffda 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000eb2:	4814      	ldr	r0, [pc, #80]	; (8000f04 <MX_GPIO_Init+0xe8>)
 8000eb4:	f001 ffd4 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000eb8:	2306      	movs	r3, #6
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <MX_GPIO_Init+0xe4>)
 8000ed0:	f001 fe14 	bl	8002afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000ed4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_GPIO_Init+0xe8>)
 8000eee:	f001 fe05 	bl	8002afc <HAL_GPIO_Init>

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020400 	.word	0x40020400

08000f08 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_I2C1_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_I2C1_Init+0x58>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_I2C1_Init+0x50>)
 8000f46:	f001 ffbf 	bl	8002ec8 <HAL_I2C_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f50:	f000 fc6c 	bl	800182c <Error_Handler>
  }

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000290 	.word	0x20000290
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	00061a80 	.word	0x00061a80

08000f64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <MX_I2C2_Init+0x54>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <MX_I2C2_Init+0x58>)
 8000f72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_I2C2_Init+0x50>)
 8000fa2:	f001 ff91 	bl	8002ec8 <HAL_I2C_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fac:	f000 fc3e 	bl	800182c <Error_Handler>
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200002e4 	.word	0x200002e4
 8000fb8:	40005800 	.word	0x40005800
 8000fbc:	00061a80 	.word	0x00061a80

08000fc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a99      	ldr	r2, [pc, #612]	; (8001244 <HAL_I2C_MspInit+0x284>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 8093 	bne.w	800110a <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	4b97      	ldr	r3, [pc, #604]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a96      	ldr	r2, [pc, #600]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b94      	ldr	r3, [pc, #592]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001000:	23c0      	movs	r3, #192	; 0xc0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001004:	2312      	movs	r3, #18
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001010:	2304      	movs	r3, #4
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	488c      	ldr	r0, [pc, #560]	; (800124c <HAL_I2C_MspInit+0x28c>)
 800101c:	f001 fd6e 	bl	8002afc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	4b88      	ldr	r3, [pc, #544]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a87      	ldr	r2, [pc, #540]	; (8001248 <HAL_I2C_MspInit+0x288>)
 800102a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b85      	ldr	r3, [pc, #532]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800103c:	4b84      	ldr	r3, [pc, #528]	; (8001250 <HAL_I2C_MspInit+0x290>)
 800103e:	4a85      	ldr	r2, [pc, #532]	; (8001254 <HAL_I2C_MspInit+0x294>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001042:	4b83      	ldr	r3, [pc, #524]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001048:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104a:	4b81      	ldr	r3, [pc, #516]	; (8001250 <HAL_I2C_MspInit+0x290>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001050:	4b7f      	ldr	r3, [pc, #508]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001056:	4b7e      	ldr	r3, [pc, #504]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800105e:	4b7c      	ldr	r3, [pc, #496]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001064:	4b7a      	ldr	r3, [pc, #488]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800106a:	4b79      	ldr	r3, [pc, #484]	; (8001250 <HAL_I2C_MspInit+0x290>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001070:	4b77      	ldr	r3, [pc, #476]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001072:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001076:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b75      	ldr	r3, [pc, #468]	; (8001250 <HAL_I2C_MspInit+0x290>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800107e:	4874      	ldr	r0, [pc, #464]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001080:	f001 f992 	bl	80023a8 <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800108a:	f000 fbcf 	bl	800182c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a6f      	ldr	r2, [pc, #444]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
 8001094:	4a6e      	ldr	r2, [pc, #440]	; (8001250 <HAL_I2C_MspInit+0x290>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800109a:	4b6f      	ldr	r3, [pc, #444]	; (8001258 <HAL_I2C_MspInit+0x298>)
 800109c:	4a6f      	ldr	r2, [pc, #444]	; (800125c <HAL_I2C_MspInit+0x29c>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80010a0:	4b6d      	ldr	r3, [pc, #436]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b6b      	ldr	r3, [pc, #428]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b68      	ldr	r3, [pc, #416]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010bc:	4b66      	ldr	r3, [pc, #408]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	4b65      	ldr	r3, [pc, #404]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80010c8:	4b63      	ldr	r3, [pc, #396]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010ce:	4b62      	ldr	r3, [pc, #392]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010d4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d6:	4b60      	ldr	r3, [pc, #384]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010dc:	485e      	ldr	r0, [pc, #376]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010de:	f001 f963 	bl	80023a8 <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 80010e8:	f000 fba0 	bl	800182c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a5a      	ldr	r2, [pc, #360]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
 80010f2:	4a59      	ldr	r2, [pc, #356]	; (8001258 <HAL_I2C_MspInit+0x298>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	201f      	movs	r0, #31
 80010fe:	f001 f91c 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001102:	201f      	movs	r0, #31
 8001104:	f001 f935 	bl	8002372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001108:	e098      	b.n	800123c <HAL_I2C_MspInit+0x27c>
  else if(i2cHandle->Instance==I2C2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a54      	ldr	r2, [pc, #336]	; (8001260 <HAL_I2C_MspInit+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	f040 8093 	bne.w	800123c <HAL_I2C_MspInit+0x27c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <HAL_I2C_MspInit+0x288>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a4a      	ldr	r2, [pc, #296]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001132:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	2312      	movs	r3, #18
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800113c:	2301      	movs	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001144:	2304      	movs	r3, #4
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	483f      	ldr	r0, [pc, #252]	; (800124c <HAL_I2C_MspInit+0x28c>)
 8001150:	f001 fcd4 	bl	8002afc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <HAL_I2C_MspInit+0x288>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a3a      	ldr	r2, [pc, #232]	; (8001248 <HAL_I2C_MspInit+0x288>)
 800115e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b38      	ldr	r3, [pc, #224]	; (8001248 <HAL_I2C_MspInit+0x288>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 8001172:	4a3d      	ldr	r2, [pc, #244]	; (8001268 <HAL_I2C_MspInit+0x2a8>)
 8001174:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001176:	4b3b      	ldr	r3, [pc, #236]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 8001178:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800117c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 8001180:	2240      	movs	r2, #64	; 0x40
 8001182:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 800118c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001190:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 80011a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011aa:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80011b2:	482c      	ldr	r0, [pc, #176]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 80011b4:	f001 f8f8 	bl	80023a8 <HAL_DMA_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_I2C_MspInit+0x202>
      Error_Handler();
 80011be:	f000 fb35 	bl	800182c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
 80011c8:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_I2C_MspInit+0x2a4>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_I2C_MspInit+0x2b0>)
 80011d2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011d6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011da:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ee:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 8001204:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001208:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 8001212:	f001 f8c9 	bl	80023a8 <HAL_DMA_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_I2C_MspInit+0x260>
      Error_Handler();
 800121c:	f000 fb06 	bl	800182c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_I2C_MspInit+0x2ac>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2021      	movs	r0, #33	; 0x21
 8001232:	f001 f882 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001236:	2021      	movs	r0, #33	; 0x21
 8001238:	f001 f89b 	bl	8002372 <HAL_NVIC_EnableIRQ>
}
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40005400 	.word	0x40005400
 8001248:	40023800 	.word	0x40023800
 800124c:	40020400 	.word	0x40020400
 8001250:	200003f8 	.word	0x200003f8
 8001254:	40026010 	.word	0x40026010
 8001258:	20000230 	.word	0x20000230
 800125c:	400260a0 	.word	0x400260a0
 8001260:	40005800 	.word	0x40005800
 8001264:	20000398 	.word	0x20000398
 8001268:	400260b8 	.word	0x400260b8
 800126c:	20000338 	.word	0x20000338
 8001270:	40026058 	.word	0x40026058
 8001274:	00000000 	.word	0x00000000

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b085      	sub	sp, #20
 800127c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f000 feed 	bl	800205c <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 8001282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001286:	f000 ff5b 	bl	8002140 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f957 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f7ff fdc5 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001292:	f7ff fd8b 	bl	8000dac <MX_DMA_Init>
  MX_I2C1_Init();
 8001296:	f7ff fe37 	bl	8000f08 <MX_I2C1_Init>
  MX_I2C2_Init();
 800129a:	f7ff fe63 	bl	8000f64 <MX_I2C2_Init>
  MX_RTC_Init();
 800129e:	f000 facd 	bl	800183c <MX_RTC_Init>
  MX_TIM3_Init();
 80012a2:	f000 fbf9 	bl	8001a98 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012a6:	f000 fc71 	bl	8001b8c <MX_TIM5_Init>
  MX_TIM8_Init();
 80012aa:	f000 fcdf 	bl	8001c6c <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 80012ae:	f00a fa5f 	bl	800b770 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80012b2:	2100      	movs	r1, #0
 80012b4:	4890      	ldr	r0, [pc, #576]	; (80014f8 <main+0x280>)
 80012b6:	f006 fabf 	bl	8007838 <HAL_TIM_IC_Start_IT>

  for(int i = 0; i < 32; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	e007      	b.n	80012d0 <main+0x58>
  {
	  send_buffer[i] = '\0';
 80012c0:	4a8e      	ldr	r2, [pc, #568]	; (80014fc <main+0x284>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 32; i++)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b1f      	cmp	r3, #31
 80012d4:	ddf4      	ble.n	80012c0 <main+0x48>
  send_buffer[6] = 'o';
  send_buffer[7] = '\n';*/

  //sprintf((char*)send_buffer, "%l%s", test_capture_value, "\r\n");

  send_buffer[32] = 30;
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <main+0x284>)
 80012d8:	221e      	movs	r2, #30
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  send_buffer[33] = 0;//Unreliable
 80012de:	4b87      	ldr	r3, [pc, #540]	; (80014fc <main+0x284>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  send_buffer[34] = 0;//No data
 80012e6:	4b85      	ldr	r3, [pc, #532]	; (80014fc <main+0x284>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  buf[0] = 0x6B;
 80012ee:	4b84      	ldr	r3, [pc, #528]	; (8001500 <main+0x288>)
 80012f0:	226b      	movs	r2, #107	; 0x6b
 80012f2:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 80012f4:	4b82      	ldr	r3, [pc, #520]	; (8001500 <main+0x288>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 80012fa:	23d0      	movs	r3, #208	; 0xd0
 80012fc:	b299      	uxth	r1, r3
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2302      	movs	r3, #2
 8001306:	4a7e      	ldr	r2, [pc, #504]	; (8001500 <main+0x288>)
 8001308:	487e      	ldr	r0, [pc, #504]	; (8001504 <main+0x28c>)
 800130a:	f001 ff15 	bl	8003138 <HAL_I2C_Master_Transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b7d      	ldr	r3, [pc, #500]	; (8001508 <main+0x290>)
 8001314:	701a      	strb	r2, [r3, #0]
  if(ret != HAL_OK)
 8001316:	4b7c      	ldr	r3, [pc, #496]	; (8001508 <main+0x290>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d008      	beq.n	8001330 <main+0xb8>
  {
	  strcpy((char*)buf, "Error Tx\r\n");
 800131e:	4a78      	ldr	r2, [pc, #480]	; (8001500 <main+0x288>)
 8001320:	4b7a      	ldr	r3, [pc, #488]	; (800150c <main+0x294>)
 8001322:	cb03      	ldmia	r3!, {r0, r1}
 8001324:	6010      	str	r0, [r2, #0]
 8001326:	6051      	str	r1, [r2, #4]
 8001328:	8819      	ldrh	r1, [r3, #0]
 800132a:	789b      	ldrb	r3, [r3, #2]
 800132c:	8111      	strh	r1, [r2, #8]
 800132e:	7293      	strb	r3, [r2, #10]
  }

  HAL_Delay(10);
 8001330:	200a      	movs	r0, #10
 8001332:	f000 ff05 	bl	8002140 <HAL_Delay>

  buf[0] = 0x1B;
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <main+0x288>)
 8001338:	221b      	movs	r2, #27
 800133a:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x08;
 800133c:	4b70      	ldr	r3, [pc, #448]	; (8001500 <main+0x288>)
 800133e:	2208      	movs	r2, #8
 8001340:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 8001342:	23d0      	movs	r3, #208	; 0xd0
 8001344:	b299      	uxth	r1, r3
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2302      	movs	r3, #2
 800134e:	4a6c      	ldr	r2, [pc, #432]	; (8001500 <main+0x288>)
 8001350:	486c      	ldr	r0, [pc, #432]	; (8001504 <main+0x28c>)
 8001352:	f001 fef1 	bl	8003138 <HAL_I2C_Master_Transmit>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <main+0x290>)
 800135c:	701a      	strb	r2, [r3, #0]
  if(ret != HAL_OK)
 800135e:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <main+0x290>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <main+0x100>
  {
	  strcpy((char*)buf, "Error Tx\r\n");
 8001366:	4a66      	ldr	r2, [pc, #408]	; (8001500 <main+0x288>)
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <main+0x294>)
 800136a:	cb03      	ldmia	r3!, {r0, r1}
 800136c:	6010      	str	r0, [r2, #0]
 800136e:	6051      	str	r1, [r2, #4]
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	789b      	ldrb	r3, [r3, #2]
 8001374:	8111      	strh	r1, [r2, #8]
 8001376:	7293      	strb	r3, [r2, #10]
  }

  HAL_Delay(10);
 8001378:	200a      	movs	r0, #10
 800137a:	f000 fee1 	bl	8002140 <HAL_Delay>

  buf[0] = 0x1A;
 800137e:	4b60      	ldr	r3, [pc, #384]	; (8001500 <main+0x288>)
 8001380:	221a      	movs	r2, #26
 8001382:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 8001384:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <main+0x288>)
 8001386:	2203      	movs	r2, #3
 8001388:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 800138a:	23d0      	movs	r3, #208	; 0xd0
 800138c:	b299      	uxth	r1, r3
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2302      	movs	r3, #2
 8001396:	4a5a      	ldr	r2, [pc, #360]	; (8001500 <main+0x288>)
 8001398:	485a      	ldr	r0, [pc, #360]	; (8001504 <main+0x28c>)
 800139a:	f001 fecd 	bl	8003138 <HAL_I2C_Master_Transmit>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b59      	ldr	r3, [pc, #356]	; (8001508 <main+0x290>)
 80013a4:	701a      	strb	r2, [r3, #0]
  if(ret != HAL_OK)
 80013a6:	4b58      	ldr	r3, [pc, #352]	; (8001508 <main+0x290>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <main+0x148>
  {
	  strcpy((char*)buf, "Error Tx\r\n");
 80013ae:	4a54      	ldr	r2, [pc, #336]	; (8001500 <main+0x288>)
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <main+0x294>)
 80013b2:	cb03      	ldmia	r3!, {r0, r1}
 80013b4:	6010      	str	r0, [r2, #0]
 80013b6:	6051      	str	r1, [r2, #4]
 80013b8:	8819      	ldrh	r1, [r3, #0]
 80013ba:	789b      	ldrb	r3, [r3, #2]
 80013bc:	8111      	strh	r1, [r2, #8]
 80013be:	7293      	strb	r3, [r2, #10]
  }

  //CDC_Transmit_FS(buf, strlen((char*)buf));

  HAL_Delay(2000);
 80013c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013c4:	f000 febc 	bl	8002140 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(5);
 80013c8:	2005      	movs	r0, #5
 80013ca:	f000 feb9 	bl	8002140 <HAL_Delay>

	  if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY && send_buffer[34] == 0)
 80013ce:	4850      	ldr	r0, [pc, #320]	; (8001510 <main+0x298>)
 80013d0:	f002 fcd8 	bl	8003d84 <HAL_I2C_GetState>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b20      	cmp	r3, #32
 80013d8:	d14e      	bne.n	8001478 <main+0x200>
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <main+0x284>)
 80013dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d149      	bne.n	8001478 <main+0x200>
	  {
		  if(ack_rate_counter < 0xFF)
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <main+0x29c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2bff      	cmp	r3, #255	; 0xff
 80013ec:	d006      	beq.n	80013fc <main+0x184>
			  ack_rate_counter++;
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <main+0x29c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b46      	ldr	r3, [pc, #280]	; (8001514 <main+0x29c>)
 80013fa:	701a      	strb	r2, [r3, #0]

		  for(int i = 0; i < 32; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	e007      	b.n	8001412 <main+0x19a>
		  {
			  send_buffer[i] = '\0';
 8001402:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <main+0x284>)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 32; i++)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	3301      	adds	r3, #1
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b1f      	cmp	r3, #31
 8001416:	ddf4      	ble.n	8001402 <main+0x18a>
		  }

		  //test_gyro_x =

		  //sprintf((char*)send_buffer, "%ld%s", ppm_channels[2], "\r\n");//int32_t
		  sprintf((char*)send_buffer, "%lu%s%hd%s", ppm_channels[2], ":", test_gyro_x, "\r\n");//uint32_t
 8001418:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <main+0x2a0>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <main+0x2a4>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	4619      	mov	r1, r3
 8001424:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <main+0x2a8>)
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9100      	str	r1, [sp, #0]
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <main+0x2ac>)
 800142c:	493e      	ldr	r1, [pc, #248]	; (8001528 <main+0x2b0>)
 800142e:	4833      	ldr	r0, [pc, #204]	; (80014fc <main+0x284>)
 8001430:	f00a ff72 	bl	800c318 <siprintf>

		  //strcpy((char*)send_buffer, "TEST\r\n");

		  if(ack_rate_counter == ack_rate)
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <main+0x29c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b3c      	ldr	r3, [pc, #240]	; (800152c <main+0x2b4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	429a      	cmp	r2, r3
 8001440:	d104      	bne.n	800144c <main+0x1d4>
		  {
			  //ack_rate_counter = 0;
			  send_buffer[34] = 1;
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <main+0x284>)
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800144a:	e003      	b.n	8001454 <main+0x1dc>
		  }
		  else
		  {
			  send_buffer[34] = 0;
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <main+0x284>)
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  }



		  send_buffer[32] = 30;
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <main+0x284>)
 8001456:	221e      	movs	r2, #30
 8001458:	f883 2020 	strb.w	r2, [r3, #32]
		  send_buffer[33] = 0;//Unreliable
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <main+0x284>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  //send_buffer[34] = 0;//No data

		  HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)send_buffer, 35);
 8001464:	2323      	movs	r3, #35	; 0x23
 8001466:	4a25      	ldr	r2, [pc, #148]	; (80014fc <main+0x284>)
 8001468:	2108      	movs	r1, #8
 800146a:	4829      	ldr	r0, [pc, #164]	; (8001510 <main+0x298>)
 800146c:	f001 ff62 	bl	8003334 <HAL_I2C_Master_Transmit_DMA>
		  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001470:	2104      	movs	r1, #4
 8001472:	482f      	ldr	r0, [pc, #188]	; (8001530 <main+0x2b8>)
 8001474:	f001 fd0d 	bl	8002e92 <HAL_GPIO_TogglePin>

		  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  }

	  if(read_flag == 1)
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <main+0x2bc>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d121      	bne.n	80014c4 <main+0x24c>
	  {
		  read_flag = 0;
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <main+0x2bc>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]

		  test_gyro_x = (int16_t)((buf[0] << 8) | (buf[1]));
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <main+0x288>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <main+0x288>)
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	b21b      	sxth	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <main+0x2a4>)
 800149a:	801a      	strh	r2, [r3, #0]

		  gyro_x = test_gyro_x / 65.5;
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <main+0x2a4>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f836 	bl	8000514 <__aeabi_i2d>
 80014a8:	a311      	add	r3, pc, #68	; (adr r3, 80014f0 <main+0x278>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f9c5 	bl	800083c <__aeabi_ddiv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	f7ff faa7 	bl	8000a0c <__aeabi_d2f>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <main+0x2c0>)
 80014c2:	601a      	str	r2, [r3, #0]
		  //HAL_Delay(10);
		  //i2c_transmit_timer = DWT->CYCCNT * (HAL_RCC_GetHCLKFreq() / 1000000);
		  //HAL_I2C_Master_Receive_IT(hi2c, DevAddress, pData, Size)
	  }

	  if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 80014c4:	480f      	ldr	r0, [pc, #60]	; (8001504 <main+0x28c>)
 80014c6:	f002 fc5d 	bl	8003d84 <HAL_I2C_GetState>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	f47f af7b 	bne.w	80013c8 <main+0x150>
	  {
		  HAL_I2C_Mem_Read_DMA(&hi2c1, GYRO_ADDR, 0x43, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buf, 2);
 80014d2:	23d0      	movs	r3, #208	; 0xd0
 80014d4:	b299      	uxth	r1, r3
 80014d6:	2302      	movs	r3, #2
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <main+0x288>)
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	2243      	movs	r2, #67	; 0x43
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <main+0x28c>)
 80014e4:	f002 f952 	bl	800378c <HAL_I2C_Mem_Read_DMA>
	  HAL_Delay(5);
 80014e8:	e76e      	b.n	80013c8 <main+0x150>
 80014ea:	bf00      	nop
 80014ec:	f3af 8000 	nop.w
 80014f0:	00000000 	.word	0x00000000
 80014f4:	40506000 	.word	0x40506000
 80014f8:	20000574 	.word	0x20000574
 80014fc:	200004c0 	.word	0x200004c0
 8001500:	200004e8 	.word	0x200004e8
 8001504:	20000290 	.word	0x20000290
 8001508:	20000510 	.word	0x20000510
 800150c:	0800c9cc 	.word	0x0800c9cc
 8001510:	200002e4 	.word	0x200002e4
 8001514:	20000209 	.word	0x20000209
 8001518:	200004a4 	.word	0x200004a4
 800151c:	2000021c 	.word	0x2000021c
 8001520:	0800c9e8 	.word	0x0800c9e8
 8001524:	0800c9d8 	.word	0x0800c9d8
 8001528:	0800c9dc 	.word	0x0800c9dc
 800152c:	20000000 	.word	0x20000000
 8001530:	40020800 	.word	0x40020800
 8001534:	20000208 	.word	0x20000208
 8001538:	200004e4 	.word	0x200004e4

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b098      	sub	sp, #96	; 0x60
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f00a fe24 	bl	800c198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <SystemClock_Config+0xfc>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a30      	ldr	r2, [pc, #192]	; (8001638 <SystemClock_Config+0xfc>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <SystemClock_Config+0xfc>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <SystemClock_Config+0x100>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2a      	ldr	r2, [pc, #168]	; (800163c <SystemClock_Config+0x100>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <SystemClock_Config+0x100>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015a6:	2309      	movs	r3, #9
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015be:	2310      	movs	r3, #16
 80015c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015c2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015c6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015cc:	2307      	movs	r3, #7
 80015ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fa91 	bl	8006afc <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80015e0:	f000 f924 	bl	800182c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	2105      	movs	r1, #5
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fcea 	bl	8006fdc <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800160e:	f000 f90d 	bl	800182c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001612:	2302      	movs	r3, #2
 8001614:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4618      	mov	r0, r3
 8001622:	f005 feb7 	bl	8007394 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800162c:	f000 f8fe 	bl	800182c <Error_Handler>
  }
}
 8001630:	bf00      	nop
 8001632:	3760      	adds	r7, #96	; 0x60
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a47      	ldr	r2, [pc, #284]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 800164c:	4293      	cmp	r3, r2
 800164e:	f040 8086 	bne.w	800175e <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8001652:	2100      	movs	r1, #0
 8001654:	4844      	ldr	r0, [pc, #272]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001656:	f006 fc13 	bl	8007e80 <HAL_TIM_ReadCapturedValue>
 800165a:	4602      	mov	r2, r0
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800165e:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001660:	2101      	movs	r1, #1
 8001662:	4843      	ldr	r0, [pc, #268]	; (8001770 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001664:	f001 fbe4 	bl	8002e30 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d014      	beq.n	8001698 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a40      	ldr	r2, [pc, #256]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001674:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 020a 	bic.w	r2, r2, #10
 8001684:	621a      	str	r2, [r3, #32]
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6a1a      	ldr	r2, [r3, #32]
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0202 	orr.w	r2, r2, #2
 8001694:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8001696:	e062      	b.n	800175e <HAL_TIM_IC_CaptureCallback+0x11e>
			if (current_ppm_capture > last_ppm_capture)
 8001698:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d907      	bls.n	80016b4 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 80016a4:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00d      	b.n	80016d0 <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d807      	bhi.n	80016d0 <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_TIM_IC_CaptureCallback+0x134>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	3b01      	subs	r3, #1
 80016cc:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016ce:	6013      	str	r3, [r2, #0]
			frequency_read /= 2;
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016d8:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 80016da:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d903      	bls.n	80016ee <HAL_TIM_IC_CaptureCallback+0xae>
				current_ppm_channel = 0;
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e006      	b.n	80016fc <HAL_TIM_IC_CaptureCallback+0xbc>
				current_ppm_channel++;
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80016fa:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d903      	bls.n	8001710 <HAL_TIM_IC_CaptureCallback+0xd0>
				test_max_frequency = frequency_read;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <HAL_TIM_IC_CaptureCallback+0x140>)
 800170e:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 800171a:	6013      	str	r3, [r2, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00d      	beq.n	8001742 <HAL_TIM_IC_CaptureCallback+0x102>
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b06      	cmp	r3, #6
 800172e:	d808      	bhi.n	8001742 <HAL_TIM_IC_CaptureCallback+0x102>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_TIM_IC_CaptureCallback+0x138>)
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	4911      	ldr	r1, [pc, #68]	; (8001784 <HAL_TIM_IC_CaptureCallback+0x144>)
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 020a 	bic.w	r2, r2, #10
 8001750:	621a      	str	r2, [r3, #32]
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a12      	ldr	r2, [r2, #32]
 800175c:	621a      	str	r2, [r3, #32]
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000574 	.word	0x20000574
 800176c:	2000020c 	.word	0x2000020c
 8001770:	40020000 	.word	0x40020000
 8001774:	20000210 	.word	0x20000210
 8001778:	20000004 	.word	0x20000004
 800177c:	20000214 	.word	0x20000214
 8001780:	20000218 	.word	0x20000218
 8001784:	200004a4 	.word	0x200004a4

08001788 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	read_flag = 1;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_I2C_MemRxCpltCallback+0x20>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001796:	2102      	movs	r1, #2
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <HAL_I2C_MemRxCpltCallback+0x24>)
 800179a:	f001 fb7a 	bl	8002e92 <HAL_GPIO_TogglePin>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000208 	.word	0x20000208
 80017ac:	40020800 	.word	0x40020800

080017b0 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_I2C_MasterTxCpltCallback+0x34>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d10c      	bne.n	80017da <HAL_I2C_MasterTxCpltCallback+0x2a>
	{
		if(ack_rate_counter == ack_rate)
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_I2C_MasterTxCpltCallback+0x38>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_I2C_MasterTxCpltCallback+0x3c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d105      	bne.n	80017da <HAL_I2C_MasterTxCpltCallback+0x2a>
		{
			//ack_rate_counter = 0;
			HAL_I2C_Master_Receive_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)receive_buffer, 34);
 80017ce:	2322      	movs	r3, #34	; 0x22
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_I2C_MasterTxCpltCallback+0x40>)
 80017d2:	2108      	movs	r1, #8
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <HAL_I2C_MasterTxCpltCallback+0x34>)
 80017d6:	f001 fec3 	bl	8003560 <HAL_I2C_Master_Receive_DMA>
		}
	}
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002e4 	.word	0x200002e4
 80017e8:	20000209 	.word	0x20000209
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000480 	.word	0x20000480

080017f4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d106      	bne.n	8001812 <HAL_I2C_MasterRxCpltCallback+0x1e>
	{
		ack_rate_counter = 0;
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);

		send_buffer[34] = 0;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <HAL_I2C_MasterRxCpltCallback+0x34>)
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200002e4 	.word	0x200002e4
 8001824:	20000209 	.word	0x20000209
 8001828:	200004c0 	.word	0x200004c0

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_RTC_Init+0x44>)
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <MX_RTC_Init+0x48>)
 8001844:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_RTC_Init+0x44>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_RTC_Init+0x44>)
 800184e:	227f      	movs	r2, #127	; 0x7f
 8001850:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_RTC_Init+0x44>)
 8001854:	22ff      	movs	r2, #255	; 0xff
 8001856:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_RTC_Init+0x44>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_RTC_Init+0x44>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_RTC_Init+0x44>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_RTC_Init+0x44>)
 800186c:	f005 fe74 	bl	8007558 <HAL_RTC_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001876:	f7ff ffd9 	bl	800182c <Error_Handler>
  }

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000514 	.word	0x20000514
 8001884:	40002800 	.word	0x40002800

08001888 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <HAL_RTC_MspInit+0x24>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d102      	bne.n	80018a0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RTC_MspInit+0x28>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40002800 	.word	0x40002800
 80018b0:	42470e3c 	.word	0x42470e3c

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_MspInit+0x4c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_MspInit+0x4c>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_MspInit+0x4c>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a08      	ldr	r2, [pc, #32]	; (8001900 <HAL_MspInit+0x4c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 fbd2 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <DMA1_Stream0_IRQHandler+0x10>)
 8001966:	f000 fe47 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200003f8 	.word	0x200003f8

08001974 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <DMA1_Stream3_IRQHandler+0x10>)
 800197a:	f000 fe3d 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000338 	.word	0x20000338

08001988 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA1_Stream6_IRQHandler+0x10>)
 800198e:	f000 fe33 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000230 	.word	0x20000230

0800199c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <I2C1_EV_IRQHandler+0x10>)
 80019a2:	f002 f83f 	bl	8003a24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000290 	.word	0x20000290

080019b0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <I2C2_EV_IRQHandler+0x10>)
 80019b6:	f002 f835 	bl	8003a24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200002e4 	.word	0x200002e4

080019c4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <DMA1_Stream7_IRQHandler+0x10>)
 80019ca:	f000 fe15 	bl	80025f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000398 	.word	0x20000398

080019d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM5_IRQHandler+0x10>)
 80019de:	f005 ff93 	bl	8007908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000574 	.word	0x20000574

080019ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <OTG_FS_IRQHandler+0x10>)
 80019f2:	f004 f850 	bl	8005a96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20001ac8 	.word	0x20001ac8

08001a00 <_sbrk>:
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
 8001a30:	f00a fb78 	bl	800c124 <__errno>
 8001a34:	4602      	mov	r2, r0
 8001a36:	230c      	movs	r3, #12
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20020000 	.word	0x20020000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	20000220 	.word	0x20000220
 8001a68:	20001ed8 	.word	0x20001ed8

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <SystemInit+0x28>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <SystemInit+0x28>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SystemInit+0x28>)
 8001a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a86:	609a      	str	r2, [r3, #8]
#endif
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
 8001ab6:	615a      	str	r2, [r3, #20]
 8001ab8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001aba:	4b32      	ldr	r3, [pc, #200]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001abc:	4a32      	ldr	r2, [pc, #200]	; (8001b88 <MX_TIM3_Init+0xf0>)
 8001abe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ac0:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001ae0:	4828      	ldr	r0, [pc, #160]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001ae2:	f005 fe49 	bl	8007778 <HAL_TIM_OC_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001aec:	f7ff fe9e 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	4619      	mov	r1, r3
 8001afe:	4821      	ldr	r0, [pc, #132]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001b00:	f006 fe64 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b0a:	f7ff fe8f 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	2200      	movs	r2, #0
 8001b22:	4619      	mov	r1, r3
 8001b24:	4817      	ldr	r0, [pc, #92]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001b26:	f005 fff7 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b30:	f7ff fe7c 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2204      	movs	r2, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4812      	ldr	r0, [pc, #72]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001b3c:	f005 ffec 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b46:	f7ff fe71 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001b52:	f005 ffe1 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001b5c:	f7ff fe66 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	220c      	movs	r2, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001b68:	f005 ffd6 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001b72:	f7ff fe5b 	bl	800182c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001b76:	4803      	ldr	r0, [pc, #12]	; (8001b84 <MX_TIM3_Init+0xec>)
 8001b78:	f000 f9c4 	bl	8001f04 <HAL_TIM_MspPostInit>

}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200005b4 	.word	0x200005b4
 8001b88:	40000400 	.word	0x40000400

08001b8c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0318 	add.w	r3, r7, #24
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <MX_TIM5_Init+0xdc>)
 8001bba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bbe:	2229      	movs	r2, #41	; 0x29
 8001bc0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001bc8:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bca:	f04f 32ff 	mov.w	r2, #4294967295
 8001bce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bdc:	4821      	ldr	r0, [pc, #132]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bde:	f005 fda0 	bl	8007722 <HAL_TIM_Base_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8001be8:	f7ff fe20 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bf2:	f107 0318 	add.w	r3, r7, #24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481a      	ldr	r0, [pc, #104]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001bfa:	f006 f889 	bl	8007d10 <HAL_TIM_ConfigClockSource>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c04:	f7ff fe12 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001c08:	4816      	ldr	r0, [pc, #88]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001c0a:	f005 fde0 	bl	80077ce <HAL_TIM_IC_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c14:	f7ff fe0a 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	480f      	ldr	r0, [pc, #60]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001c28:	f006 fdd0 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001c32:	f7ff fdfb 	bl	800182c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c46:	463b      	mov	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_TIM5_Init+0xd8>)
 8001c4e:	f005 ffc3 	bl	8007bd8 <HAL_TIM_IC_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001c58:	f7ff fde8 	bl	800182c <Error_Handler>
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3728      	adds	r7, #40	; 0x28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000574 	.word	0x20000574
 8001c68:	40000c00 	.word	0x40000c00

08001c6c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b096      	sub	sp, #88	; 0x58
 8001c70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f00a fa77 	bl	800c198 <memset>

  htim8.Instance = TIM8;
 8001caa:	4b50      	ldr	r3, [pc, #320]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cac:	4a50      	ldr	r2, [pc, #320]	; (8001df0 <MX_TIM8_Init+0x184>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cca:	4b48      	ldr	r3, [pc, #288]	; (8001dec <MX_TIM8_Init+0x180>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cd6:	4845      	ldr	r0, [pc, #276]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cd8:	f005 fd23 	bl	8007722 <HAL_TIM_Base_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001ce2:	f7ff fda3 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	483e      	ldr	r0, [pc, #248]	; (8001dec <MX_TIM8_Init+0x180>)
 8001cf4:	f006 f80c 	bl	8007d10 <HAL_TIM_ConfigClockSource>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001cfe:	f7ff fd95 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001d02:	483a      	ldr	r0, [pc, #232]	; (8001dec <MX_TIM8_Init+0x180>)
 8001d04:	f005 fd38 	bl	8007778 <HAL_TIM_OC_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d0e:	f7ff fd8d 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4832      	ldr	r0, [pc, #200]	; (8001dec <MX_TIM8_Init+0x180>)
 8001d22:	f006 fd53 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d2c:	f7ff fd7e 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	2200      	movs	r2, #0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4825      	ldr	r0, [pc, #148]	; (8001dec <MX_TIM8_Init+0x180>)
 8001d56:	f005 fedf 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d60:	f7ff fd64 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d68:	2204      	movs	r2, #4
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481f      	ldr	r0, [pc, #124]	; (8001dec <MX_TIM8_Init+0x180>)
 8001d6e:	f005 fed3 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d78:	f7ff fd58 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	2208      	movs	r2, #8
 8001d82:	4619      	mov	r1, r3
 8001d84:	4819      	ldr	r0, [pc, #100]	; (8001dec <MX_TIM8_Init+0x180>)
 8001d86:	f005 fec7 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001d90:	f7ff fd4c 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	220c      	movs	r2, #12
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4813      	ldr	r0, [pc, #76]	; (8001dec <MX_TIM8_Init+0x180>)
 8001d9e:	f005 febb 	bl	8007b18 <HAL_TIM_OC_ConfigChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001da8:	f7ff fd40 	bl	800182c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <MX_TIM8_Init+0x180>)
 8001dd0:	f006 fd78 	bl	80088c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001dda:	f7ff fd27 	bl	800182c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001dde:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_TIM8_Init+0x180>)
 8001de0:	f000 f890 	bl	8001f04 <HAL_TIM_MspPostInit>

}
 8001de4:	bf00      	nop
 8001de6:	3758      	adds	r7, #88	; 0x58
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000534 	.word	0x20000534
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_TIM_OC_MspInit+0x3c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10d      	bne.n	8001e22 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_TIM_OC_MspInit+0x40>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <HAL_TIM_OC_MspInit+0x40>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_TIM_OC_MspInit+0x40>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a27      	ldr	r2, [pc, #156]	; (8001ef4 <HAL_TIM_Base_MspInit+0xbc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d134      	bne.n	8001ec4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e92:	2301      	movs	r3, #1
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4813      	ldr	r0, [pc, #76]	; (8001efc <HAL_TIM_Base_MspInit+0xc4>)
 8001eae:	f000 fe25 	bl	8002afc <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2032      	movs	r0, #50	; 0x32
 8001eb8:	f000 fa3f 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ebc:	2032      	movs	r0, #50	; 0x32
 8001ebe:	f000 fa58 	bl	8002372 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001ec2:	e012      	b.n	8001eea <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM8)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_TIM_Base_MspInit+0xc8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d10d      	bne.n	8001eea <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_TIM_Base_MspInit+0xc0>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	; 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a33      	ldr	r2, [pc, #204]	; (8001ff0 <HAL_TIM_MspPostInit+0xec>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d13c      	bne.n	8001fa0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	4b32      	ldr	r3, [pc, #200]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5e:	23c0      	movs	r3, #192	; 0xc0
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <HAL_TIM_MspPostInit+0xf4>)
 8001f7a:	f000 fdbf 	bl	8002afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f107 0314 	add.w	r3, r7, #20
 8001f96:	4619      	mov	r1, r3
 8001f98:	4818      	ldr	r0, [pc, #96]	; (8001ffc <HAL_TIM_MspPostInit+0xf8>)
 8001f9a:	f000 fdaf 	bl	8002afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f9e:	e023      	b.n	8001fe8 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a16      	ldr	r2, [pc, #88]	; (8002000 <HAL_TIM_MspPostInit+0xfc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d11e      	bne.n	8001fe8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_TIM_MspPostInit+0xf0>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001fc6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4808      	ldr	r0, [pc, #32]	; (8002004 <HAL_TIM_MspPostInit+0x100>)
 8001fe4:	f000 fd8a 	bl	8002afc <HAL_GPIO_Init>
}
 8001fe8:	bf00      	nop
 8001fea:	3728      	adds	r7, #40	; 0x28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40010400 	.word	0x40010400
 8002004:	40020800 	.word	0x40020800

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002040 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800200c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800200e:	e003      	b.n	8002018 <LoopCopyDataInit>

08002010 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002012:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002014:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002016:	3104      	adds	r1, #4

08002018 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002018:	480b      	ldr	r0, [pc, #44]	; (8002048 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800201c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800201e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002020:	d3f6      	bcc.n	8002010 <CopyDataInit>
  ldr  r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002024:	e002      	b.n	800202c <LoopFillZerobss>

08002026 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002026:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002028:	f842 3b04 	str.w	r3, [r2], #4

0800202c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800202e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002030:	d3f9      	bcc.n	8002026 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002032:	f7ff fd1b 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f00a f87b 	bl	800c130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7ff f91d 	bl	8001278 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002044:	0800ca98 	.word	0x0800ca98
  ldr  r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800204c:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002050:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8002054:	20001ed4 	.word	0x20001ed4

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_Init+0x40>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_Init+0x40>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_Init+0x40>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002084:	2003      	movs	r0, #3
 8002086:	f000 f94d 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208a:	2000      	movs	r0, #0
 800208c:	f000 f808 	bl	80020a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002090:	f7ff fc10 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_InitTick+0x54>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_InitTick+0x58>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f965 	bl	800238e <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00e      	b.n	80020ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d80a      	bhi.n	80020ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d4:	2200      	movs	r2, #0
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f000 f92d 	bl	800233a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <HAL_InitTick+0x5c>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000010 	.word	0x20000010
 80020fc:	2000000c 	.word	0x2000000c

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000010 	.word	0x20000010
 8002124:	200005f4 	.word	0x200005f4

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200005f4 	.word	0x200005f4

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_Delay+0x40>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000010 	.word	0x20000010

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff29 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff3e 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff8e 	bl	8002278 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff31 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff feb8 	bl	8002128 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e099      	b.n	80024f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	e00f      	b.n	8002406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fe9f 	bl	8002128 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d908      	bls.n	8002406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e078      	b.n	80024f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e8      	bne.n	80023e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_DMA_Init+0x158>)
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2b04      	cmp	r3, #4
 800245e:	d107      	bne.n	8002470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0307 	bic.w	r3, r3, #7
 8002486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	2b04      	cmp	r3, #4
 8002498:	d117      	bne.n	80024ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 faab 	bl	8002a08 <DMA_CheckFifoParam>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c6:	2301      	movs	r3, #1
 80024c8:	e016      	b.n	80024f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa62 	bl	800299c <DMA_CalcBaseAndBitshift>
 80024d8:	4603      	mov	r3, r0
 80024da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	223f      	movs	r2, #63	; 0x3f
 80024e2:	409a      	lsls	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	f010803f 	.word	0xf010803f

08002504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_DMA_Start_IT+0x26>
 8002526:	2302      	movs	r3, #2
 8002528:	e040      	b.n	80025ac <HAL_DMA_Start_IT+0xa8>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d12f      	bne.n	800259e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2202      	movs	r2, #2
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f9f4 	bl	8002940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0216 	orr.w	r2, r2, #22
 8002572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0208 	orr.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e005      	b.n	80025aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00c      	b.n	80025ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002604:	4b92      	ldr	r3, [pc, #584]	; (8002850 <HAL_DMA_IRQHandler+0x258>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a92      	ldr	r2, [pc, #584]	; (8002854 <HAL_DMA_IRQHandler+0x25c>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a9b      	lsrs	r3, r3, #10
 8002610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2208      	movs	r2, #8
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01a      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2208      	movs	r2, #8
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2201      	movs	r2, #1
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2201      	movs	r2, #1
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0202 	orr.w	r2, r3, #2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2204      	movs	r2, #4
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00b      	beq.n	80026d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f043 0204 	orr.w	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2210      	movs	r2, #16
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d043      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d03c      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2210      	movs	r2, #16
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d018      	beq.n	800273a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d024      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
 8002726:	e01f      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01b      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
 8002738:	e016      	b.n	8002768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0208 	bic.w	r2, r2, #8
 8002756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2220      	movs	r2, #32
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 808e 	beq.w	8002896 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8086 	beq.w	8002896 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2220      	movs	r2, #32
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d136      	bne.n	8002810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0216 	bic.w	r2, r2, #22
 80027b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x1da>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0208 	bic.w	r2, r2, #8
 80027e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	223f      	movs	r2, #63	; 0x3f
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	2b00      	cmp	r3, #0
 8002804:	d07d      	beq.n	8002902 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
        }
        return;
 800280e:	e078      	b.n	8002902 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01c      	beq.n	8002858 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	2b00      	cmp	r3, #0
 8002832:	d030      	beq.n	8002896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
 800283c:	e02b      	b.n	8002896 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d027      	beq.n	8002896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
 800284e:	e022      	b.n	8002896 <HAL_DMA_IRQHandler+0x29e>
 8002850:	20000008 	.word	0x20000008
 8002854:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0210 	bic.w	r2, r2, #16
 8002874:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289a:	2b00      	cmp	r3, #0
 800289c:	d032      	beq.n	8002904 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d022      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2205      	movs	r2, #5
 80028ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d307      	bcc.n	80028de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f2      	bne.n	80028c2 <HAL_DMA_IRQHandler+0x2ca>
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	4798      	blx	r3
 8002900:	e000      	b.n	8002904 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002902:	bf00      	nop
    }
  }
}
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop

0800290c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291a:	b2db      	uxtb	r3, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800295c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d108      	bne.n	8002980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800297e:	e007      	b.n	8002990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3b10      	subs	r3, #16
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <DMA_CalcBaseAndBitshift+0x64>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <DMA_CalcBaseAndBitshift+0x68>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d909      	bls.n	80029de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	1d1a      	adds	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	659a      	str	r2, [r3, #88]	; 0x58
 80029dc:	e007      	b.n	80029ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	aaaaaaab 	.word	0xaaaaaaab
 8002a04:	0800ca4c 	.word	0x0800ca4c

08002a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11f      	bne.n	8002a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d855      	bhi.n	8002ad4 <DMA_CheckFifoParam+0xcc>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <DMA_CheckFifoParam+0x28>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a53 	.word	0x08002a53
 8002a38:	08002a41 	.word	0x08002a41
 8002a3c:	08002ad5 	.word	0x08002ad5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d045      	beq.n	8002ad8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e042      	b.n	8002ad8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5a:	d13f      	bne.n	8002adc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a60:	e03c      	b.n	8002adc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	d121      	bne.n	8002ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d836      	bhi.n	8002ae0 <DMA_CheckFifoParam+0xd8>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <DMA_CheckFifoParam+0x70>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a8f 	.word	0x08002a8f
 8002a80:	08002a89 	.word	0x08002a89
 8002a84:	08002aa1 	.word	0x08002aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8c:	e02f      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d024      	beq.n	8002ae4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9e:	e021      	b.n	8002ae4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aa8:	d11e      	bne.n	8002ae8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aae:	e01b      	b.n	8002ae8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d902      	bls.n	8002abc <DMA_CheckFifoParam+0xb4>
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d003      	beq.n	8002ac2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aba:	e018      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac0:	e015      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00e      	beq.n	8002aec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad2:	e00b      	b.n	8002aec <DMA_CheckFifoParam+0xe4>
      break;
 8002ad4:	bf00      	nop
 8002ad6:	e00a      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;
 8002ad8:	bf00      	nop
 8002ada:	e008      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;
 8002adc:	bf00      	nop
 8002ade:	e006      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;
 8002ae0:	bf00      	nop
 8002ae2:	e004      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;
 8002ae4:	bf00      	nop
 8002ae6:	e002      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;   
 8002ae8:	bf00      	nop
 8002aea:	e000      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;
 8002aec:	bf00      	nop
    }
  } 
  
  return status; 
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	e16b      	b.n	8002df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 815a 	bne.w	8002dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d00b      	beq.n	8002b56 <HAL_GPIO_Init+0x5a>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b4a:	2b11      	cmp	r3, #17
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b12      	cmp	r3, #18
 8002b54:	d130      	bne.n	8002bb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 0201 	and.w	r2, r3, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0xfc>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b12      	cmp	r3, #18
 8002bf6:	d123      	bne.n	8002c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	08da      	lsrs	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	08da      	lsrs	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3208      	adds	r2, #8
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0203 	and.w	r2, r3, #3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80b4 	beq.w	8002dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <HAL_GPIO_Init+0x308>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	4a5e      	ldr	r2, [pc, #376]	; (8002e04 <HAL_GPIO_Init+0x308>)
 8002c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c90:	6453      	str	r3, [r2, #68]	; 0x44
 8002c92:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <HAL_GPIO_Init+0x308>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c9e:	4a5a      	ldr	r2, [pc, #360]	; (8002e08 <HAL_GPIO_Init+0x30c>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a51      	ldr	r2, [pc, #324]	; (8002e0c <HAL_GPIO_Init+0x310>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02b      	beq.n	8002d22 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a50      	ldr	r2, [pc, #320]	; (8002e10 <HAL_GPIO_Init+0x314>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d025      	beq.n	8002d1e <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4f      	ldr	r2, [pc, #316]	; (8002e14 <HAL_GPIO_Init+0x318>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d01f      	beq.n	8002d1a <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_GPIO_Init+0x31c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_GPIO_Init+0x21a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_GPIO_Init+0x320>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_GPIO_Init+0x216>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4c      	ldr	r2, [pc, #304]	; (8002e20 <HAL_GPIO_Init+0x324>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <HAL_GPIO_Init+0x212>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_GPIO_Init+0x328>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x20e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <HAL_GPIO_Init+0x32c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_GPIO_Init+0x20a>
 8002d02:	2307      	movs	r3, #7
 8002d04:	e00e      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d06:	2308      	movs	r3, #8
 8002d08:	e00c      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x228>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d34:	4934      	ldr	r1, [pc, #208]	; (8002e08 <HAL_GPIO_Init+0x30c>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d42:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d66:	4a31      	ldr	r2, [pc, #196]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d6c:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dba:	4a1c      	ldr	r2, [pc, #112]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <HAL_GPIO_Init+0x330>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f ae90 	bls.w	8002b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3724      	adds	r7, #36	; 0x24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40021400 	.word	0x40021400
 8002e24:	40021800 	.word	0x40021800
 8002e28:	40021c00 	.word	0x40021c00
 8002e2c:	40013c00 	.word	0x40013c00

08002e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e001      	b.n	8002e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e70:	787b      	ldrb	r3, [r7, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e7c:	e003      	b.n	8002e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e7e:	887b      	ldrh	r3, [r7, #2]
 8002e80:	041a      	lsls	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	619a      	str	r2, [r3, #24]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d104      	bne.n	8002eb6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	041a      	lsls	r2, r3, #16
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	619a      	str	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e11f      	b.n	800311a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe f866 	bl	8000fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f004 fa1e 	bl	800736c <HAL_RCC_GetPCLK1Freq>
 8002f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a7b      	ldr	r2, [pc, #492]	; (8003124 <HAL_I2C_Init+0x25c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d807      	bhi.n	8002f4c <HAL_I2C_Init+0x84>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a7a      	ldr	r2, [pc, #488]	; (8003128 <HAL_I2C_Init+0x260>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bf94      	ite	ls
 8002f44:	2301      	movls	r3, #1
 8002f46:	2300      	movhi	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e006      	b.n	8002f5a <HAL_I2C_Init+0x92>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a77      	ldr	r2, [pc, #476]	; (800312c <HAL_I2C_Init+0x264>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0db      	b.n	800311a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a72      	ldr	r2, [pc, #456]	; (8003130 <HAL_I2C_Init+0x268>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9b      	lsrs	r3, r3, #18
 8002f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a64      	ldr	r2, [pc, #400]	; (8003124 <HAL_I2C_Init+0x25c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d802      	bhi.n	8002f9c <HAL_I2C_Init+0xd4>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	e009      	b.n	8002fb0 <HAL_I2C_Init+0xe8>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	4a63      	ldr	r2, [pc, #396]	; (8003134 <HAL_I2C_Init+0x26c>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	3301      	adds	r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4956      	ldr	r1, [pc, #344]	; (8003124 <HAL_I2C_Init+0x25c>)
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	d80d      	bhi.n	8002fec <HAL_I2C_Init+0x124>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e59      	subs	r1, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	bf38      	it	cc
 8002fe8:	2304      	movcc	r3, #4
 8002fea:	e04f      	b.n	800308c <HAL_I2C_Init+0x1c4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d111      	bne.n	8003018 <HAL_I2C_Init+0x150>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e012      	b.n	800303e <HAL_I2C_Init+0x176>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e58      	subs	r0, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	0099      	lsls	r1, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Init+0x17e>
 8003042:	2301      	movs	r3, #1
 8003044:	e022      	b.n	800308c <HAL_I2C_Init+0x1c4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <HAL_I2C_Init+0x1a4>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e58      	subs	r0, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	440b      	add	r3, r1
 800305c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306a:	e00f      	b.n	800308c <HAL_I2C_Init+0x1c4>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6809      	ldr	r1, [r1, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6911      	ldr	r1, [r2, #16]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	000186a0 	.word	0x000186a0
 8003128:	001e847f 	.word	0x001e847f
 800312c:	003d08ff 	.word	0x003d08ff
 8003130:	431bde83 	.word	0x431bde83
 8003134:	10624dd3 	.word	0x10624dd3

08003138 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	460b      	mov	r3, r1
 8003146:	817b      	strh	r3, [r7, #10]
 8003148:	4613      	mov	r3, r2
 800314a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7fe ffec 	bl	8002128 <HAL_GetTick>
 8003150:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	f040 80e0 	bne.w	8003320 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2319      	movs	r3, #25
 8003166:	2201      	movs	r2, #1
 8003168:	4970      	ldr	r1, [pc, #448]	; (800332c <HAL_I2C_Master_Transmit+0x1f4>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f002 f9a1 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	e0d3      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2C_Master_Transmit+0x50>
 8003184:	2302      	movs	r3, #2
 8003186:	e0cc      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d007      	beq.n	80031ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2221      	movs	r2, #33	; 0x21
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2210      	movs	r2, #16
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	893a      	ldrh	r2, [r7, #8]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_I2C_Master_Transmit+0x1f8>)
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f001 fe62 	bl	8004ec0 <I2C_MasterRequestWrite>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e08d      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800321c:	e066      	b.n	80032ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	6a39      	ldr	r1, [r7, #32]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f002 fa1b 	bl	800565e <I2C_WaitOnTXEFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b04      	cmp	r3, #4
 8003234:	d107      	bne.n	8003246 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06b      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d11b      	bne.n	80032c0 <HAL_I2C_Master_Transmit+0x188>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	2b00      	cmp	r3, #0
 800328e:	d017      	beq.n	80032c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	6a39      	ldr	r1, [r7, #32]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f002 fa0b 	bl	80056e0 <I2C_WaitOnBTFFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00d      	beq.n	80032ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d107      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e01a      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d194      	bne.n	800321e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	00100002 	.word	0x00100002
 8003330:	ffff0000 	.word	0xffff0000

08003334 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	461a      	mov	r2, r3
 8003340:	460b      	mov	r3, r1
 8003342:	817b      	strh	r3, [r7, #10]
 8003344:	4613      	mov	r3, r2
 8003346:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	f040 80f4 	bne.w	8003542 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800335a:	4b7c      	ldr	r3, [pc, #496]	; (800354c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	08db      	lsrs	r3, r3, #3
 8003360:	4a7b      	ldr	r2, [pc, #492]	; (8003550 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	0a1a      	lsrs	r2, r3, #8
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009a      	lsls	r2, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	3b01      	subs	r3, #1
 8003378:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d116      	bne.n	80033ae <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f043 0220 	orr.w	r2, r3, #32
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0ca      	b.n	8003544 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d0db      	beq.n	8003374 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_I2C_Master_Transmit_DMA+0x96>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0bc      	b.n	8003544 <HAL_I2C_Master_Transmit_DMA+0x210>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d007      	beq.n	80033f0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2221      	movs	r2, #33	; 0x21
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2210      	movs	r2, #16
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	893a      	ldrh	r2, [r7, #8]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a49      	ldr	r2, [pc, #292]	; (8003554 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003432:	897a      	ldrh	r2, [r7, #10]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d062      	beq.n	8003506 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003444:	4a44      	ldr	r2, [pc, #272]	; (8003558 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8003446:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	4a43      	ldr	r2, [pc, #268]	; (800355c <HAL_I2C_Master_Transmit_DMA+0x228>)
 800344e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	2200      	movs	r2, #0
 8003456:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345c:	2200      	movs	r2, #0
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	2200      	movs	r2, #0
 8003466:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	2200      	movs	r2, #0
 800346e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	4619      	mov	r1, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3310      	adds	r3, #16
 8003480:	461a      	mov	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	f7ff f83d 	bl	8002504 <HAL_DMA_Start_IT>
 800348a:	4603      	mov	r3, r0
 800348c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d124      	bne.n	80034de <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a2:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b2:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80034ca:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	e02f      	b.n	800353e <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f043 0210 	orr.w	r2, r3, #16
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e01e      	b.n	8003544 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003514:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003524:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800353c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	e000      	b.n	8003544 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8003542:	2302      	movs	r3, #2
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000008 	.word	0x20000008
 8003550:	14f8b589 	.word	0x14f8b589
 8003554:	ffff0000 	.word	0xffff0000
 8003558:	08005191 	.word	0x08005191
 800355c:	0800533b 	.word	0x0800533b

08003560 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	461a      	mov	r2, r3
 800356c:	460b      	mov	r3, r1
 800356e:	817b      	strh	r3, [r7, #10]
 8003570:	4613      	mov	r3, r2
 8003572:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	f040 80f4 	bne.w	800376e <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003586:	4b7c      	ldr	r3, [pc, #496]	; (8003778 <HAL_I2C_Master_Receive_DMA+0x218>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	4a7b      	ldr	r2, [pc, #492]	; (800377c <HAL_I2C_Master_Receive_DMA+0x21c>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0a1a      	lsrs	r2, r3, #8
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009a      	lsls	r2, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d116      	bne.n	80035da <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0ca      	b.n	8003770 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d0db      	beq.n	80035a0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_Master_Receive_DMA+0x96>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e0bc      	b.n	8003770 <HAL_I2C_Master_Receive_DMA+0x210>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d007      	beq.n	800361c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2222      	movs	r2, #34	; 0x22
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2210      	movs	r2, #16
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	893a      	ldrh	r2, [r7, #8]
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a49      	ldr	r2, [pc, #292]	; (8003780 <HAL_I2C_Master_Receive_DMA+0x220>)
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800365e:	897a      	ldrh	r2, [r7, #10]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d062      	beq.n	8003732 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	4a44      	ldr	r2, [pc, #272]	; (8003784 <HAL_I2C_Master_Receive_DMA+0x224>)
 8003672:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	4a43      	ldr	r2, [pc, #268]	; (8003788 <HAL_I2C_Master_Receive_DMA+0x228>)
 800367a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	2200      	movs	r2, #0
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	2200      	movs	r2, #0
 8003692:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	2200      	movs	r2, #0
 800369a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3310      	adds	r3, #16
 80036a6:	4619      	mov	r1, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	461a      	mov	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	f7fe ff27 	bl	8002504 <HAL_DMA_Start_IT>
 80036b6:	4603      	mov	r3, r0
 80036b8:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d124      	bne.n	800370a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ce:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036de:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80036f6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	e02f      	b.n	800376a <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f043 0210 	orr.w	r2, r3, #16
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e01e      	b.n	8003770 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003740:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003750:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003768:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000008 	.word	0x20000008
 800377c:	14f8b589 	.word	0x14f8b589
 8003780:	ffff0000 	.word	0xffff0000
 8003784:	08005191 	.word	0x08005191
 8003788:	0800533b 	.word	0x0800533b

0800378c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08c      	sub	sp, #48	; 0x30
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	461a      	mov	r2, r3
 800379a:	4603      	mov	r3, r0
 800379c:	817b      	strh	r3, [r7, #10]
 800379e:	460b      	mov	r3, r1
 80037a0:	813b      	strh	r3, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a6:	f7fe fcbf 	bl	8002128 <HAL_GetTick>
 80037aa:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	f040 8123 	bne.w	8003a04 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80037be:	4b94      	ldr	r3, [pc, #592]	; (8003a10 <HAL_I2C_Mem_Read_DMA+0x284>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	08db      	lsrs	r3, r3, #3
 80037c4:	4a93      	ldr	r2, [pc, #588]	; (8003a14 <HAL_I2C_Mem_Read_DMA+0x288>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0a1a      	lsrs	r2, r3, #8
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	3b01      	subs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0f9      	b.n	8003a06 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d0db      	beq.n	80037d8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_I2C_Mem_Read_DMA+0xa2>
 800382a:	2302      	movs	r3, #2
 800382c:	e0eb      	b.n	8003a06 <HAL_I2C_Mem_Read_DMA+0x27a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d007      	beq.n	8003854 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003862:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2222      	movs	r2, #34	; 0x22
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2240      	movs	r2, #64	; 0x40
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a61      	ldr	r2, [pc, #388]	; (8003a18 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003894:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8085 	beq.w	80039aa <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_I2C_Mem_Read_DMA+0x290>)
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	4a5c      	ldr	r2, [pc, #368]	; (8003a20 <HAL_I2C_Mem_Read_DMA+0x294>)
 80038ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	2200      	movs	r2, #0
 80038c6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	2200      	movs	r2, #0
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3310      	adds	r3, #16
 80038da:	4619      	mov	r1, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	461a      	mov	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	f7fe fe0d 	bl	8002504 <HAL_DMA_Start_IT>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 80038f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d144      	bne.n	8003982 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80038f8:	88f8      	ldrh	r0, [r7, #6]
 80038fa:	893a      	ldrh	r2, [r7, #8]
 80038fc:	8979      	ldrh	r1, [r7, #10]
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	2323      	movs	r3, #35	; 0x23
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4603      	mov	r3, r0
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f001 fb5b 	bl	8004fc4 <I2C_RequestMemoryRead>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e076      	b.n	8003a06 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391c:	2b01      	cmp	r3, #1
 800391e:	d108      	bne.n	8003932 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	e007      	b.n	8003942 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003940:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	e03e      	b.n	8003a00 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e02d      	b.n	8003a06 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80039aa:	88f8      	ldrh	r0, [r7, #6]
 80039ac:	893a      	ldrh	r2, [r7, #8]
 80039ae:	8979      	ldrh	r1, [r7, #10]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	2323      	movs	r3, #35	; 0x23
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4603      	mov	r3, r0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f001 fb02 	bl	8004fc4 <I2C_RequestMemoryRead>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e01d      	b.n	8003a06 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8003a04:	2302      	movs	r3, #2
  }
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3728      	adds	r7, #40	; 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000008 	.word	0x20000008
 8003a14:	14f8b589 	.word	0x14f8b589
 8003a18:	ffff0000 	.word	0xffff0000
 8003a1c:	08005191 	.word	0x08005191
 8003a20:	0800533b 	.word	0x0800533b

08003a24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d003      	beq.n	8003a5c <HAL_I2C_EV_IRQHandler+0x38>
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	f040 80b6 	bne.w	8003bc8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10d      	bne.n	8003a92 <HAL_I2C_EV_IRQHandler+0x6e>
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a7c:	d003      	beq.n	8003a86 <HAL_I2C_EV_IRQHandler+0x62>
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_EV_IRQHandler+0x66>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_EV_IRQHandler+0x68>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	f000 8127 	beq.w	8003ce0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_I2C_EV_IRQHandler+0x92>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	0a5b      	lsrs	r3, r3, #9
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 fe89 	bl	80057c0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fc65 	bl	800437e <I2C_Master_SB>
 8003ab4:	e087      	b.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	08db      	lsrs	r3, r3, #3
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	0a5b      	lsrs	r3, r3, #9
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fcdb 	bl	800448a <I2C_Master_ADD10>
 8003ad4:	e077      	b.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	0a5b      	lsrs	r3, r3, #9
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fcf5 	bl	80044de <I2C_Master_ADDR>
 8003af4:	e067      	b.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d030      	beq.n	8003b64 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b10:	f000 80e8 	beq.w	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	09db      	lsrs	r3, r3, #7
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00f      	beq.n	8003b40 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	0a9b      	lsrs	r3, r3, #10
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d009      	beq.n	8003b40 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f931 	bl	8003da0 <I2C_MasterTransmit_TXE>
 8003b3e:	e042      	b.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	089b      	lsrs	r3, r3, #2
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80cb 	beq.w	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	0a5b      	lsrs	r3, r3, #9
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80c4 	beq.w	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f9bb 	bl	8003ed8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b62:	e0bf      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b72:	f000 80b7 	beq.w	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00f      	beq.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x17e>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	0a9b      	lsrs	r3, r3, #10
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x17e>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa83 	bl	80040a6 <I2C_MasterReceive_RXNE>
 8003ba0:	e011      	b.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 809a 	beq.w	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	0a5b      	lsrs	r3, r3, #9
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8093 	beq.w	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 faf3 	bl	80041aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc4:	e08e      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003bc6:	e08d      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	e007      	b.n	8003bea <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <HAL_I2C_EV_IRQHandler+0x1f8>
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	0a5b      	lsrs	r3, r3, #9
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c12:	69b9      	ldr	r1, [r7, #24]
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 feb1 	bl	800497c <I2C_Slave_ADDR>
 8003c1a:	e066      	b.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_I2C_EV_IRQHandler+0x218>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	0a5b      	lsrs	r3, r3, #9
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fee5 	bl	8004a04 <I2C_Slave_STOPF>
 8003c3a:	e056      	b.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c3c:	7bbb      	ldrb	r3, [r7, #14]
 8003c3e:	2b21      	cmp	r3, #33	; 0x21
 8003c40:	d002      	beq.n	8003c48 <HAL_I2C_EV_IRQHandler+0x224>
 8003c42:	7bbb      	ldrb	r3, [r7, #14]
 8003c44:	2b29      	cmp	r3, #41	; 0x29
 8003c46:	d125      	bne.n	8003c94 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	09db      	lsrs	r3, r3, #7
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00f      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x250>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	0a9b      	lsrs	r3, r3, #10
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d009      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x250>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fdc7 	bl	8004800 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c72:	e039      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d033      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	0a5b      	lsrs	r3, r3, #9
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02d      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fdf4 	bl	800487a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c92:	e029      	b.n	8003ce8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00f      	beq.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x29c>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	0a9b      	lsrs	r3, r3, #10
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x29c>
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fdff 	bl	80048bc <I2C_SlaveReceive_RXNE>
 8003cbe:	e014      	b.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	089b      	lsrs	r3, r3, #2
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	0a5b      	lsrs	r3, r3, #9
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fe2d 	bl	8004938 <I2C_SlaveReceive_BTF>
 8003cde:	e004      	b.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003ce0:	bf00      	nop
 8003ce2:	e002      	b.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	bf00      	nop
 8003ce6:	e000      	b.n	8003cea <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ce8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003cea:	3720      	adds	r7, #32
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
 8003d24:	4613      	mov	r3, r2
 8003d26:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	b2db      	uxtb	r3, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d150      	bne.n	8003e68 <I2C_MasterTransmit_TXE+0xc8>
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b21      	cmp	r3, #33	; 0x21
 8003dca:	d14d      	bne.n	8003e68 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d01d      	beq.n	8003e0e <I2C_MasterTransmit_TXE+0x6e>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d01a      	beq.n	8003e0e <I2C_MasterTransmit_TXE+0x6e>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dde:	d016      	beq.n	8003e0e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2211      	movs	r2, #17
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fcd2 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e0c:	e060      	b.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e1c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d107      	bne.n	8003e58 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff79 	bl	8003d48 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e56:	e03b      	b.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fd fca5 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e66:	e033      	b.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b21      	cmp	r3, #33	; 0x21
 8003e6c:	d005      	beq.n	8003e7a <I2C_MasterTransmit_TXE+0xda>
 8003e6e:	7bbb      	ldrb	r3, [r7, #14]
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d12d      	bne.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b22      	cmp	r3, #34	; 0x22
 8003e78:	d12a      	bne.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e94:	e01c      	b.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d103      	bne.n	8003eaa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f898 	bl	8003fd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ea8:	e012      	b.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ece:	e7ff      	b.n	8003ed0 <I2C_MasterTransmit_TXE+0x130>
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b21      	cmp	r3, #33	; 0x21
 8003ef0:	d165      	bne.n	8003fbe <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d012      	beq.n	8003f22 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f20:	e056      	b.n	8003fd0 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d01d      	beq.n	8003f64 <I2C_MasterTransmit_BTF+0x8c>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d01a      	beq.n	8003f64 <I2C_MasterTransmit_BTF+0x8c>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f34:	d016      	beq.n	8003f64 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f44:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2211      	movs	r2, #17
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd fc27 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003f62:	e035      	b.n	8003fd0 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f72:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f82:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b40      	cmp	r3, #64	; 0x40
 8003f9c:	d107      	bne.n	8003fae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fece 	bl	8003d48 <HAL_I2C_MemTxCpltCallback>
}
 8003fac:	e010      	b.n	8003fd0 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fbfa 	bl	80017b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003fbc:	e008      	b.n	8003fd0 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d102      	bne.n	8003fd0 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f804 	bl	8003fd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d11d      	bne.n	8004024 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10b      	bne.n	8004008 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004000:	1c9a      	adds	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004006:	e048      	b.n	800409a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400c:	b29b      	uxth	r3, r3
 800400e:	121b      	asrs	r3, r3, #8
 8004010:	b2da      	uxtb	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004022:	e03a      	b.n	800409a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10b      	bne.n	8004044 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004030:	b2da      	uxtb	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004042:	e02a      	b.n	800409a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004048:	2b02      	cmp	r3, #2
 800404a:	d126      	bne.n	800409a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b22      	cmp	r3, #34	; 0x22
 8004056:	d108      	bne.n	800406a <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004066:	601a      	str	r2, [r3, #0]
}
 8004068:	e017      	b.n	800409a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b21      	cmp	r3, #33	; 0x21
 8004074:	d111      	bne.n	800409a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b22      	cmp	r3, #34	; 0x22
 80040b8:	d173      	bne.n	80041a2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d920      	bls.n	800410a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d154      	bne.n	80041a2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004106:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004108:	e04b      	b.n	80041a2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	2b02      	cmp	r3, #2
 8004110:	d047      	beq.n	80041a2 <I2C_MasterReceive_RXNE+0xfc>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d002      	beq.n	800411e <I2C_MasterReceive_RXNE+0x78>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d141      	bne.n	80041a2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800413c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	d10a      	bne.n	800418e <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fafe 	bl	8001788 <HAL_I2C_MemRxCpltCallback>
}
 800418c:	e009      	b.n	80041a2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2212      	movs	r2, #18
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fd fb29 	bl	80017f4 <HAL_I2C_MasterRxCpltCallback>
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d11b      	bne.n	80041fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041f8:	e0bd      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b03      	cmp	r3, #3
 8004202:	d129      	bne.n	8004258 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004212:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b04      	cmp	r3, #4
 8004218:	d00a      	beq.n	8004230 <I2C_MasterReceive_BTF+0x86>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d007      	beq.n	8004230 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004256:	e08e      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d176      	bne.n	8004350 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d002      	beq.n	800426e <I2C_MasterReceive_BTF+0xc4>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b10      	cmp	r3, #16
 800426c:	d108      	bne.n	8004280 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e019      	b.n	80042b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d002      	beq.n	800428c <I2C_MasterReceive_BTF+0xe2>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d108      	bne.n	800429e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e00a      	b.n	80042b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d007      	beq.n	80042b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800430e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b40      	cmp	r3, #64	; 0x40
 8004322:	d10a      	bne.n	800433a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fd fa28 	bl	8001788 <HAL_I2C_MemRxCpltCallback>
}
 8004338:	e01d      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2212      	movs	r2, #18
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fd fa53 	bl	80017f4 <HAL_I2C_MasterRxCpltCallback>
}
 800434e:	e012      	b.n	8004376 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d117      	bne.n	80043c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043ac:	e067      	b.n	800447e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	611a      	str	r2, [r3, #16]
}
 80043c0:	e05d      	b.n	800447e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ca:	d133      	bne.n	8004434 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b21      	cmp	r3, #33	; 0x21
 80043d6:	d109      	bne.n	80043ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e8:	611a      	str	r2, [r3, #16]
 80043ea:	e008      	b.n	80043fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <I2C_Master_SB+0x92>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d108      	bne.n	8004422 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	2b00      	cmp	r3, #0
 8004416:	d032      	beq.n	800447e <I2C_Master_SB+0x100>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d02d      	beq.n	800447e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004430:	605a      	str	r2, [r3, #4]
}
 8004432:	e024      	b.n	800447e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10e      	bne.n	800445a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	b29b      	uxth	r3, r3
 8004442:	11db      	asrs	r3, r3, #7
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 0306 	and.w	r3, r3, #6
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f063 030f 	orn	r3, r3, #15
 8004450:	b2da      	uxtb	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	611a      	str	r2, [r3, #16]
}
 8004458:	e011      	b.n	800447e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10d      	bne.n	800447e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	b29b      	uxth	r3, r3
 8004468:	11db      	asrs	r3, r3, #7
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 0306 	and.w	r3, r3, #6
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f063 030e 	orn	r3, r3, #14
 8004476:	b2da      	uxtb	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	611a      	str	r2, [r3, #16]
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <I2C_Master_ADD10+0x24>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d011      	beq.n	80044d2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <I2C_Master_ADD10+0x38>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044d0:	605a      	str	r2, [r3, #4]
    }
  }
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b091      	sub	sp, #68	; 0x44
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b22      	cmp	r3, #34	; 0x22
 8004506:	f040 8169 	bne.w	80047dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <I2C_Master_ADDR+0x54>
 8004512:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d10b      	bne.n	8004532 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	633b      	str	r3, [r7, #48]	; 0x30
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	633b      	str	r3, [r7, #48]	; 0x30
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	e160      	b.n	80047f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	2b00      	cmp	r3, #0
 8004538:	d11d      	bne.n	8004576 <I2C_Master_ADDR+0x98>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004542:	d118      	bne.n	8004576 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004568:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	651a      	str	r2, [r3, #80]	; 0x50
 8004574:	e13e      	b.n	80047f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d113      	bne.n	80045a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e115      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	f040 808a 	bne.w	80046c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ba:	d137      	bne.n	800462c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045da:	d113      	bne.n	8004604 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ec:	2300      	movs	r3, #0
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	e0e7      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004604:	2300      	movs	r3, #0
 8004606:	623b      	str	r3, [r7, #32]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	623b      	str	r3, [r7, #32]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e0d3      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	2b08      	cmp	r3, #8
 8004630:	d02e      	beq.n	8004690 <I2C_Master_ADDR+0x1b2>
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	2b20      	cmp	r3, #32
 8004636:	d02b      	beq.n	8004690 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	2b12      	cmp	r3, #18
 800463c:	d102      	bne.n	8004644 <I2C_Master_ADDR+0x166>
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b01      	cmp	r3, #1
 8004642:	d125      	bne.n	8004690 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00e      	beq.n	8004668 <I2C_Master_ADDR+0x18a>
 800464a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464c:	2b02      	cmp	r3, #2
 800464e:	d00b      	beq.n	8004668 <I2C_Master_ADDR+0x18a>
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	2b10      	cmp	r3, #16
 8004654:	d008      	beq.n	8004668 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e007      	b.n	8004678 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004676:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	e0a1      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e085      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d14d      	bne.n	800476e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d016      	beq.n	8004706 <I2C_Master_ADDR+0x228>
 80046d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d013      	beq.n	8004706 <I2C_Master_ADDR+0x228>
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d010      	beq.n	8004706 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e007      	b.n	8004716 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004724:	d117      	bne.n	8004756 <I2C_Master_ADDR+0x278>
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800472c:	d00b      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	2b01      	cmp	r3, #1
 8004732:	d008      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 8004734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004736:	2b08      	cmp	r3, #8
 8004738:	d005      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	2b10      	cmp	r3, #16
 800473e:	d002      	beq.n	8004746 <I2C_Master_ADDR+0x268>
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	2b20      	cmp	r3, #32
 8004744:	d107      	bne.n	8004756 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004754:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	e032      	b.n	80047d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800477c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478c:	d117      	bne.n	80047be <I2C_Master_ADDR+0x2e0>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004794:	d00b      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	2b01      	cmp	r3, #1
 800479a:	d008      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d005      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d002      	beq.n	80047ae <I2C_Master_ADDR+0x2d0>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d107      	bne.n	80047be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047da:	e00b      	b.n	80047f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	e7ff      	b.n	80047f4 <I2C_Master_ADDR+0x316>
 80047f4:	bf00      	nop
 80047f6:	3744      	adds	r7, #68	; 0x44
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02b      	beq.n	8004872 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d114      	bne.n	8004872 <I2C_SlaveTransmit_TXE+0x72>
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b29      	cmp	r3, #41	; 0x29
 800484c:	d111      	bne.n	8004872 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2221      	movs	r2, #33	; 0x21
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2228      	movs	r2, #40	; 0x28
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fa3f 	bl	8003cf0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d011      	beq.n	80048b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d02c      	beq.n	8004930 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d114      	bne.n	8004930 <I2C_SlaveReceive_RXNE+0x74>
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b2a      	cmp	r3, #42	; 0x2a
 800490a:	d111      	bne.n	8004930 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2222      	movs	r2, #34	; 0x22
 8004920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2228      	movs	r2, #40	; 0x28
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff f9ea 	bl	8003d04 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d012      	beq.n	8004970 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004986:	2300      	movs	r3, #0
 8004988:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004996:	2b28      	cmp	r3, #40	; 0x28
 8004998:	d127      	bne.n	80049ea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	09db      	lsrs	r3, r3, #7
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	81bb      	strh	r3, [r7, #12]
 80049cc:	e002      	b.n	80049d4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049dc:	89ba      	ldrh	r2, [r7, #12]
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff f998 	bl	8003d18 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049e8:	e008      	b.n	80049fc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0202 	mvn.w	r2, #2
 80049f2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d172      	bne.n	8004b48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b22      	cmp	r3, #34	; 0x22
 8004a66:	d002      	beq.n	8004a6e <I2C_Slave_STOPF+0x6a>
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6c:	d135      	bne.n	8004ada <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f043 0204 	orr.w	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fd ff30 	bl	800290c <HAL_DMA_GetState>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d049      	beq.n	8004b46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	4a69      	ldr	r2, [pc, #420]	; (8004c5c <I2C_Slave_STOPF+0x258>)
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fd fd78 	bl	80025b4 <HAL_DMA_Abort_IT>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03d      	beq.n	8004b46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad8:	e035      	b.n	8004b46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd fefa 	bl	800290c <HAL_DMA_GetState>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d014      	beq.n	8004b48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b22:	4a4e      	ldr	r2, [pc, #312]	; (8004c5c <I2C_Slave_STOPF+0x258>)
 8004b24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd fd42 	bl	80025b4 <HAL_DMA_Abort_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d008      	beq.n	8004b48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
 8004b44:	e000      	b.n	8004b48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d03e      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d112      	bne.n	8004b86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d112      	bne.n	8004bba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f843 	bl	8004c64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bde:	e039      	b.n	8004c54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b2a      	cmp	r3, #42	; 0x2a
 8004be4:	d109      	bne.n	8004bfa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2228      	movs	r2, #40	; 0x28
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff f885 	bl	8003d04 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b28      	cmp	r3, #40	; 0x28
 8004c04:	d111      	bne.n	8004c2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <I2C_Slave_STOPF+0x25c>)
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff f886 	bl	8003d34 <HAL_I2C_ListenCpltCallback>
}
 8004c28:	e014      	b.n	8004c54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	2b22      	cmp	r3, #34	; 0x22
 8004c30:	d002      	beq.n	8004c38 <I2C_Slave_STOPF+0x234>
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b22      	cmp	r3, #34	; 0x22
 8004c36:	d10d      	bne.n	8004c54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff f858 	bl	8003d04 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	080053b5 	.word	0x080053b5
 8004c60:	ffff0000 	.word	0xffff0000

08004c64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d10a      	bne.n	8004c96 <I2C_ITError+0x32>
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b22      	cmp	r3, #34	; 0x22
 8004c84:	d107      	bne.n	8004c96 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c9c:	2b28      	cmp	r3, #40	; 0x28
 8004c9e:	d107      	bne.n	8004cb0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2228      	movs	r2, #40	; 0x28
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cae:	e015      	b.n	8004cdc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbe:	d006      	beq.n	8004cce <I2C_ITError+0x6a>
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b60      	cmp	r3, #96	; 0x60
 8004cc4:	d003      	beq.n	8004cce <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cea:	d162      	bne.n	8004db2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d020      	beq.n	8004d4c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	4a6a      	ldr	r2, [pc, #424]	; (8004eb8 <I2C_ITError+0x254>)
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd fc4c 	bl	80025b4 <HAL_DMA_Abort_IT>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 8089 	beq.w	8004e36 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d46:	4610      	mov	r0, r2
 8004d48:	4798      	blx	r3
 8004d4a:	e074      	b.n	8004e36 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	4a59      	ldr	r2, [pc, #356]	; (8004eb8 <I2C_ITError+0x254>)
 8004d52:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fd fc2b 	bl	80025b4 <HAL_DMA_Abort_IT>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d068      	beq.n	8004e36 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d10b      	bne.n	8004d8a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dac:	4610      	mov	r0, r2
 8004dae:	4798      	blx	r3
 8004db0:	e041      	b.n	8004e36 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b60      	cmp	r3, #96	; 0x60
 8004dbc:	d125      	bne.n	8004e0a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d10b      	bne.n	8004df2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fe ffb4 	bl	8003d70 <HAL_I2C_AbortCpltCallback>
 8004e08:	e015      	b.n	8004e36 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d10b      	bne.n	8004e30 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7fe ff93 	bl	8003d5c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10e      	bne.n	8004e64 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d113      	bne.n	8004eb0 <I2C_ITError+0x24c>
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b28      	cmp	r3, #40	; 0x28
 8004e8c:	d110      	bne.n	8004eb0 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	; (8004ebc <I2C_ITError+0x258>)
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fe ff42 	bl	8003d34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	080053b5 	.word	0x080053b5
 8004ebc:	ffff0000 	.word	0xffff0000

08004ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d006      	beq.n	8004eea <I2C_MasterRequestWrite+0x2a>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d003      	beq.n	8004eea <I2C_MasterRequestWrite+0x2a>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ee8:	d108      	bne.n	8004efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e00b      	b.n	8004f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	2b12      	cmp	r3, #18
 8004f02:	d107      	bne.n	8004f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fac6 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00c      	beq.n	8004f46 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e035      	b.n	8004fb2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4e:	d108      	bne.n	8004f62 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f50:	897b      	ldrh	r3, [r7, #10]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f5e:	611a      	str	r2, [r3, #16]
 8004f60:	e01b      	b.n	8004f9a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f62:	897b      	ldrh	r3, [r7, #10]
 8004f64:	11db      	asrs	r3, r3, #7
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f003 0306 	and.w	r3, r3, #6
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f063 030f 	orn	r3, r3, #15
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	490f      	ldr	r1, [pc, #60]	; (8004fbc <I2C_MasterRequestWrite+0xfc>)
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 faed 	bl	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e010      	b.n	8004fb2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f90:	897b      	ldrh	r3, [r7, #10]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <I2C_MasterRequestWrite+0x100>)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 fadd 	bl	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	00010008 	.word	0x00010008
 8004fc0:	00010002 	.word	0x00010002

08004fc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	817b      	strh	r3, [r7, #10]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	813b      	strh	r3, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2200      	movs	r2, #0
 8005006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 fa51 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00c      	beq.n	8005030 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e0a9      	b.n	8005184 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005030:	897b      	ldrh	r3, [r7, #10]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	4951      	ldr	r1, [pc, #324]	; (800518c <I2C_RequestMemoryRead+0x1c8>)
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 fa8a 	bl	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e096      	b.n	8005184 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	6a39      	ldr	r1, [r7, #32]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 faf4 	bl	800565e <I2C_WaitOnTXEFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2b04      	cmp	r3, #4
 8005082:	d107      	bne.n	8005094 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e075      	b.n	8005184 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800509e:	893b      	ldrh	r3, [r7, #8]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	611a      	str	r2, [r3, #16]
 80050a8:	e021      	b.n	80050ee <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050aa:	893b      	ldrh	r3, [r7, #8]
 80050ac:	0a1b      	lsrs	r3, r3, #8
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ba:	6a39      	ldr	r1, [r7, #32]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 face 	bl	800565e <I2C_WaitOnTXEFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00d      	beq.n	80050e4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d107      	bne.n	80050e0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e04f      	b.n	8005184 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050e4:	893b      	ldrh	r3, [r7, #8]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f0:	6a39      	ldr	r1, [r7, #32]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 fab3 	bl	800565e <I2C_WaitOnTXEFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00d      	beq.n	800511a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2b04      	cmp	r3, #4
 8005104:	d107      	bne.n	8005116 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005114:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e034      	b.n	8005184 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2200      	movs	r2, #0
 8005132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f9bb 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00c      	beq.n	800515c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e013      	b.n	8005184 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800515c:	897b      	ldrh	r3, [r7, #10]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	6a3a      	ldr	r2, [r7, #32]
 8005170:	4906      	ldr	r1, [pc, #24]	; (800518c <I2C_RequestMemoryRead+0x1c8>)
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f9f4 	bl	8005560 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e000      	b.n	8005184 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	00010002 	.word	0x00010002

08005190 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ac:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051c2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	2200      	movs	r2, #0
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2200      	movs	r2, #0
 80051e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80051ea:	2b21      	cmp	r3, #33	; 0x21
 80051ec:	d007      	beq.n	80051fe <I2C_DMAXferCplt+0x6e>
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80051f4:	2b22      	cmp	r3, #34	; 0x22
 80051f6:	d131      	bne.n	800525c <I2C_DMAXferCplt+0xcc>
 80051f8:	7cbb      	ldrb	r3, [r7, #18]
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d12e      	bne.n	800525c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800520c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	2b29      	cmp	r3, #41	; 0x29
 8005218:	d10a      	bne.n	8005230 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2221      	movs	r2, #33	; 0x21
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2228      	movs	r2, #40	; 0x28
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	f7fe fd61 	bl	8003cf0 <HAL_I2C_SlaveTxCpltCallback>
 800522e:	e00c      	b.n	800524a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	2b2a      	cmp	r3, #42	; 0x2a
 8005234:	d109      	bne.n	800524a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2222      	movs	r2, #34	; 0x22
 800523a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2228      	movs	r2, #40	; 0x28
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005244:	6978      	ldr	r0, [r7, #20]
 8005246:	f7fe fd5d 	bl	8003d04 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005258:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800525a:	e06a      	b.n	8005332 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d064      	beq.n	8005332 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	d107      	bne.n	8005282 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005280:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005290:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005298:	d009      	beq.n	80052ae <I2C_DMAXferCplt+0x11e>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d006      	beq.n	80052ae <I2C_DMAXferCplt+0x11e>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052a6:	d002      	beq.n	80052ae <I2C_DMAXferCplt+0x11e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d107      	bne.n	80052be <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052cc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052dc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80052ec:	6978      	ldr	r0, [r7, #20]
 80052ee:	f7fe fd35 	bl	8003d5c <HAL_I2C_ErrorCallback>
}
 80052f2:	e01e      	b.n	8005332 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d10a      	bne.n	800531e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7fc fa36 	bl	8001788 <HAL_I2C_MemRxCpltCallback>
}
 800531c:	e009      	b.n	8005332 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2212      	movs	r2, #18
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800532c:	6978      	ldr	r0, [r7, #20]
 800532e:	f7fc fa61 	bl	80017f4 <HAL_I2C_MasterRxCpltCallback>
}
 8005332:	bf00      	nop
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	2200      	movs	r2, #0
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	2200      	movs	r2, #0
 8005366:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fd fadd 	bl	8002928 <HAL_DMA_GetError>
 800536e:	4603      	mov	r3, r0
 8005370:	2b02      	cmp	r3, #2
 8005372:	d01b      	beq.n	80053ac <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005382:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f043 0210 	orr.w	r2, r3, #16
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f7fe fcd8 	bl	8003d5c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	2200      	movs	r2, #0
 80053d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	2200      	movs	r2, #0
 80053e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540c:	2200      	movs	r2, #0
 800540e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	2200      	movs	r2, #0
 800541e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b60      	cmp	r3, #96	; 0x60
 800543a:	d10e      	bne.n	800545a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7fe fc8c 	bl	8003d70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005458:	e027      	b.n	80054aa <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005460:	2b28      	cmp	r3, #40	; 0x28
 8005462:	d117      	bne.n	8005494 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005482:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2228      	movs	r2, #40	; 0x28
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005492:	e007      	b.n	80054a4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7fe fc59 	bl	8003d5c <HAL_I2C_ErrorCallback>
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c2:	e025      	b.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ca:	d021      	beq.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054cc:	f7fc fe2c 	bl	8002128 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d116      	bne.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e023      	b.n	8005558 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	0c1b      	lsrs	r3, r3, #16
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	d10d      	bne.n	8005536 <I2C_WaitOnFlagUntilTimeout+0x84>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	43da      	mvns	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	e00c      	b.n	8005550 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	43da      	mvns	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4013      	ands	r3, r2
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	bf0c      	ite	eq
 8005548:	2301      	moveq	r3, #1
 800554a:	2300      	movne	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	429a      	cmp	r2, r3
 8005554:	d0b6      	beq.n	80054c4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800556e:	e051      	b.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557e:	d123      	bne.n	80055c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f043 0204 	orr.w	r2, r3, #4
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e046      	b.n	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d021      	beq.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d0:	f7fc fdaa 	bl	8002128 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d302      	bcc.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d116      	bne.n	8005614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e020      	b.n	8005656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d10c      	bne.n	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	43da      	mvns	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e00b      	b.n	8005650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d18d      	bne.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566a:	e02d      	b.n	80056c8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f878 	bl	8005762 <I2C_IsAcknowledgeFailed>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e02d      	b.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d021      	beq.n	80056c8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005684:	f7fc fd50 	bl	8002128 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	429a      	cmp	r2, r3
 8005692:	d302      	bcc.n	800569a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d116      	bne.n	80056c8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f043 0220 	orr.w	r2, r3, #32
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e007      	b.n	80056d8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d1ca      	bne.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056ec:	e02d      	b.n	800574a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f837 	bl	8005762 <I2C_IsAcknowledgeFailed>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e02d      	b.n	800575a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d021      	beq.n	800574a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005706:	f7fc fd0f 	bl	8002128 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e007      	b.n	800575a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b04      	cmp	r3, #4
 8005756:	d1ca      	bne.n	80056ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005778:	d11b      	bne.n	80057b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005782:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f043 0204 	orr.w	r2, r3, #4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057d0:	d103      	bne.n	80057da <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057d8:	e007      	b.n	80057ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057e2:	d102      	bne.n	80057ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2208      	movs	r2, #8
 80057e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f8:	b08f      	sub	sp, #60	; 0x3c
 80057fa:	af0a      	add	r7, sp, #40	; 0x28
 80057fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d101      	bne.n	8005808 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e10f      	b.n	8005a28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f006 f982 	bl	800bb2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2203      	movs	r2, #3
 800582c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d102      	bne.n	8005842 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f003 f9b7 	bl	8008bba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	687e      	ldr	r6, [r7, #4]
 8005854:	466d      	mov	r5, sp
 8005856:	f106 0410 	add.w	r4, r6, #16
 800585a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800585c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800585e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005862:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005866:	e885 0003 	stmia.w	r5, {r0, r1}
 800586a:	1d33      	adds	r3, r6, #4
 800586c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800586e:	6838      	ldr	r0, [r7, #0]
 8005870:	f003 f88e 	bl	8008990 <USB_CoreInit>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e0d0      	b.n	8005a28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f003 f9a5 	bl	8008bdc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
 8005896:	e04a      	b.n	800592e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	333d      	adds	r3, #61	; 0x3d
 80058a8:	2201      	movs	r2, #1
 80058aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	333c      	adds	r3, #60	; 0x3c
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058c0:	7bfa      	ldrb	r2, [r7, #15]
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	b298      	uxth	r0, r3
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	3342      	adds	r3, #66	; 0x42
 80058d4:	4602      	mov	r2, r0
 80058d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058d8:	7bfa      	ldrb	r2, [r7, #15]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	333f      	adds	r3, #63	; 0x3f
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058ec:	7bfa      	ldrb	r2, [r7, #15]
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	3344      	adds	r3, #68	; 0x44
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005900:	7bfa      	ldrb	r2, [r7, #15]
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	3348      	adds	r3, #72	; 0x48
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	3350      	adds	r3, #80	; 0x50
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	3301      	adds	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d3af      	bcc.n	8005898 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e044      	b.n	80059c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005954:	7bfa      	ldrb	r2, [r7, #15]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005966:	7bfa      	ldrb	r2, [r7, #15]
 8005968:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	1a9b      	subs	r3, r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005996:	7bfa      	ldrb	r2, [r7, #15]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	3301      	adds	r3, #1
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	7bfa      	ldrb	r2, [r7, #15]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d3b5      	bcc.n	800593e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	687e      	ldr	r6, [r7, #4]
 80059da:	466d      	mov	r5, sp
 80059dc:	f106 0410 	add.w	r4, r6, #16
 80059e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80059f0:	1d33      	adds	r3, r6, #4
 80059f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f4:	6838      	ldr	r0, [r7, #0]
 80059f6:	f003 f91b 	bl	8008c30 <USB_DevInit>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e00d      	b.n	8005a28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f004 f95a 	bl	8009cda <USB_DevDisconnect>

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_PCD_Start+0x1c>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e020      	b.n	8005a8e <HAL_PCD_Start+0x5e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d109      	bne.n	8005a70 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d005      	beq.n	8005a70 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f004 f918 	bl	8009caa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f003 f88a 	bl	8008b98 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a96:	b590      	push	{r4, r7, lr}
 8005a98:	b08d      	sub	sp, #52	; 0x34
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f004 f9bf 	bl	8009e30 <USB_GetMode>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f040 839d 	bne.w	80061f4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f004 f923 	bl	8009d0a <USB_ReadInterrupts>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 8393 	beq.w	80061f2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f004 f91a 	bl	8009d0a <USB_ReadInterrupts>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d107      	bne.n	8005af0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695a      	ldr	r2, [r3, #20]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f002 0202 	and.w	r2, r2, #2
 8005aee:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f004 f908 	bl	8009d0a <USB_ReadInterrupts>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d161      	bne.n	8005bc8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0210 	bic.w	r2, r2, #16
 8005b12:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	f003 020f 	and.w	r2, r3, #15
 8005b20:	4613      	mov	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	4413      	add	r3, r2
 8005b30:	3304      	adds	r3, #4
 8005b32:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	0c5b      	lsrs	r3, r3, #17
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d124      	bne.n	8005b8a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d035      	beq.n	8005bb8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6a38      	ldr	r0, [r7, #32]
 8005b60:	f003 ff80 	bl	8009a64 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	091b      	lsrs	r3, r3, #4
 8005b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b70:	441a      	add	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b82:	441a      	add	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	619a      	str	r2, [r3, #24]
 8005b88:	e016      	b.n	8005bb8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	0c5b      	lsrs	r3, r3, #17
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d110      	bne.n	8005bb8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6a38      	ldr	r0, [r7, #32]
 8005ba2:	f003 ff5f 	bl	8009a64 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb2:	441a      	add	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0210 	orr.w	r2, r2, #16
 8005bc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f004 f89c 	bl	8009d0a <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bdc:	d16e      	bne.n	8005cbc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f004 f8a2 	bl	8009d30 <USB_ReadDevAllOutEpInterrupt>
 8005bec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005bee:	e062      	b.n	8005cb6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d057      	beq.n	8005caa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f004 f8c7 	bl	8009d98 <USB_ReadDevOutEPInterrupt>
 8005c0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00c      	beq.n	8005c30 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	2301      	movs	r3, #1
 8005c26:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fdb0 	bl	8006790 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00c      	beq.n	8005c54 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	461a      	mov	r2, r3
 8005c48:	2308      	movs	r3, #8
 8005c4a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 feaa 	bl	80069a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	461a      	mov	r2, r3
 8005c88:	2320      	movs	r3, #32
 8005c8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ca8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	3301      	adds	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d199      	bne.n	8005bf0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f004 f822 	bl	8009d0a <USB_ReadInterrupts>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ccc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cd0:	f040 80c0 	bne.w	8005e54 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f004 f843 	bl	8009d64 <USB_ReadDevAllInEpInterrupt>
 8005cde:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ce4:	e0b2      	b.n	8005e4c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80a7 	beq.w	8005e40 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f004 f869 	bl	8009dd4 <USB_ReadDevInEPInterrupt>
 8005d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d057      	beq.n	8005dbe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	2201      	movs	r2, #1
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	43db      	mvns	r3, r3
 8005d28:	69f9      	ldr	r1, [r7, #28]
 8005d2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d2e:	4013      	ands	r3, r2
 8005d30:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2301      	movs	r3, #1
 8005d42:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d132      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	3348      	adds	r3, #72	; 0x48
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	4613      	mov	r3, r2
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4403      	add	r3, r0
 8005d6c:	3344      	adds	r3, #68	; 0x44
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4419      	add	r1, r3
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	4613      	mov	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4403      	add	r3, r0
 8005d80:	3348      	adds	r3, #72	; 0x48
 8005d82:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d113      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x31c>
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	4613      	mov	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	3350      	adds	r3, #80	; 0x50
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d108      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005daa:	461a      	mov	r2, r3
 8005dac:	2101      	movs	r1, #1
 8005dae:	f004 f871 	bl	8009e94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f005 ff38 	bl	800bc2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d008      	beq.n	8005dda <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	461a      	mov	r2, r3
 8005df2:	2310      	movs	r3, #16
 8005df4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2340      	movs	r3, #64	; 0x40
 8005e10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d008      	beq.n	8005e2e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	461a      	mov	r2, r3
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fc1b 	bl	8006676 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	3301      	adds	r3, #1
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f47f af49 	bne.w	8005ce6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f003 ff56 	bl	8009d0a <USB_ReadInterrupts>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e68:	d122      	bne.n	8005eb0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d108      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fe26 	bl	8006ae4 <HAL_PCDEx_LPM_Callback>
 8005e98:	e002      	b.n	8005ea0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f005 ff3e 	bl	800bd1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005eae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f003 ff28 	bl	8009d0a <USB_ReadInterrupts>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec4:	d112      	bne.n	8005eec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d102      	bne.n	8005edc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f005 fefa 	bl	800bcd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005eea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f003 ff0a 	bl	8009d0a <USB_ReadInterrupts>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f00:	f040 80c7 	bne.w	8006092 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2110      	movs	r1, #16
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f002 ffea 	bl	8008ef8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f28:	e056      	b.n	8005fd8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f36:	461a      	mov	r2, r3
 8005f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f5c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d3a3      	bcc.n	8005f2a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ff4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d016      	beq.n	800602c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600e:	f043 030b 	orr.w	r3, r3, #11
 8006012:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006024:	f043 030b 	orr.w	r3, r3, #11
 8006028:	6453      	str	r3, [r2, #68]	; 0x44
 800602a:	e015      	b.n	8006058 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800603a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800603e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006042:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006052:	f043 030b 	orr.w	r3, r3, #11
 8006056:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006066:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800606a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800607c:	461a      	mov	r2, r3
 800607e:	f003 ff09 	bl	8009e94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f003 fe37 	bl	8009d0a <USB_ReadInterrupts>
 800609c:	4603      	mov	r3, r0
 800609e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a6:	d124      	bne.n	80060f2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f003 fecd 	bl	8009e4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f002 ff7f 	bl	8008fba <USB_GetDevSpeed>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681c      	ldr	r4, [r3, #0]
 80060c8:	f001 f944 	bl	8007354 <HAL_RCC_GetHCLKFreq>
 80060cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	4620      	mov	r0, r4
 80060d8:	f002 fcbc 	bl	8008a54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f005 fdce 	bl	800bc7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80060f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f003 fe07 	bl	8009d0a <USB_ReadInterrupts>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b08      	cmp	r3, #8
 8006104:	d10a      	bne.n	800611c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f005 fdab 	bl	800bc62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f002 0208 	and.w	r2, r2, #8
 800611a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f003 fdf2 	bl	8009d0a <USB_ReadInterrupts>
 8006126:	4603      	mov	r3, r0
 8006128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800612c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006130:	d10f      	bne.n	8006152 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	b2db      	uxtb	r3, r3
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f005 fe0d 	bl	800bd5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695a      	ldr	r2, [r3, #20]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f003 fdd7 	bl	8009d0a <USB_ReadInterrupts>
 800615c:	4603      	mov	r3, r0
 800615e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006166:	d10f      	bne.n	8006188 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	b2db      	uxtb	r3, r3
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f005 fde0 	bl	800bd38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f003 fdbc 	bl	8009d0a <USB_ReadInterrupts>
 8006192:	4603      	mov	r3, r0
 8006194:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619c:	d10a      	bne.n	80061b4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f005 fdee 	bl	800bd80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f003 fda6 	bl	8009d0a <USB_ReadInterrupts>
 80061be:	4603      	mov	r3, r0
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d115      	bne.n	80061f4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f005 fdde 	bl	800bd9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6859      	ldr	r1, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	605a      	str	r2, [r3, #4]
 80061f0:	e000      	b.n	80061f4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80061f2:	bf00      	nop
    }
  }
}
 80061f4:	3734      	adds	r7, #52	; 0x34
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd90      	pop	{r4, r7, pc}

080061fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_PCD_SetAddress+0x1a>
 8006210:	2302      	movs	r3, #2
 8006212:	e013      	b.n	800623c <HAL_PCD_SetAddress+0x42>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	78fa      	ldrb	r2, [r7, #3]
 800622a:	4611      	mov	r1, r2
 800622c:	4618      	mov	r0, r3
 800622e:	f003 fd16 	bl	8009c5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	4608      	mov	r0, r1
 800624e:	4611      	mov	r1, r2
 8006250:	461a      	mov	r2, r3
 8006252:	4603      	mov	r3, r0
 8006254:	70fb      	strb	r3, [r7, #3]
 8006256:	460b      	mov	r3, r1
 8006258:	803b      	strh	r3, [r7, #0]
 800625a:	4613      	mov	r3, r2
 800625c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da0f      	bge.n	800628a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	3338      	adds	r3, #56	; 0x38
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	3304      	adds	r3, #4
 8006280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	705a      	strb	r2, [r3, #1]
 8006288:	e00f      	b.n	80062aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	4613      	mov	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	1a9b      	subs	r3, r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4413      	add	r3, r2
 80062a0:	3304      	adds	r3, #4
 80062a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80062b6:	883a      	ldrh	r2, [r7, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	78ba      	ldrb	r2, [r7, #2]
 80062c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062d4:	78bb      	ldrb	r3, [r7, #2]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d102      	bne.n	80062e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_PCD_EP_Open+0xaa>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e00e      	b.n	800630c <HAL_PCD_EP_Open+0xc8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f002 fe81 	bl	8009004 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800630a:	7afb      	ldrb	r3, [r7, #11]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006324:	2b00      	cmp	r3, #0
 8006326:	da0f      	bge.n	8006348 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	3338      	adds	r3, #56	; 0x38
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4413      	add	r3, r2
 800633c:	3304      	adds	r3, #4
 800633e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	705a      	strb	r2, [r3, #1]
 8006346:	e00f      	b.n	8006368 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	4613      	mov	r3, r2
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	3304      	adds	r3, #4
 8006360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_PCD_EP_Close+0x6e>
 800637e:	2302      	movs	r3, #2
 8006380:	e00e      	b.n	80063a0 <HAL_PCD_EP_Close+0x8c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	4618      	mov	r0, r3
 8006392:	f002 febf 	bl	8009114 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	460b      	mov	r3, r1
 80063b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	f003 020f 	and.w	r2, r3, #15
 80063be:	4613      	mov	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	3304      	adds	r3, #4
 80063d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2200      	movs	r2, #0
 80063e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ea:	7afb      	ldrb	r3, [r7, #11]
 80063ec:	f003 030f 	and.w	r3, r3, #15
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d102      	bne.n	8006404 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	6979      	ldr	r1, [r7, #20]
 800641c:	f003 f99a 	bl	8009754 <USB_EP0StartXfer>
 8006420:	e008      	b.n	8006434 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6979      	ldr	r1, [r7, #20]
 8006430:	f002 ff4c 	bl	80092cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4613      	mov	r3, r2
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	1a9b      	subs	r3, r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006460:	681b      	ldr	r3, [r3, #0]
}
 8006462:	4618      	mov	r0, r3
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	460b      	mov	r3, r1
 800647c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800647e:	7afb      	ldrb	r3, [r7, #11]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	4613      	mov	r3, r2
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	3338      	adds	r3, #56	; 0x38
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	3304      	adds	r3, #4
 8006494:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2200      	movs	r2, #0
 80064a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2201      	movs	r2, #1
 80064ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d102      	bne.n	80064c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	6979      	ldr	r1, [r7, #20]
 80064e0:	f003 f938 	bl	8009754 <USB_EP0StartXfer>
 80064e4:	e008      	b.n	80064f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	f002 feea 	bl	80092cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d901      	bls.n	8006520 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e050      	b.n	80065c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006524:	2b00      	cmp	r3, #0
 8006526:	da0f      	bge.n	8006548 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	f003 020f 	and.w	r2, r3, #15
 800652e:	4613      	mov	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	1a9b      	subs	r3, r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	3338      	adds	r3, #56	; 0x38
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	3304      	adds	r3, #4
 800653e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	705a      	strb	r2, [r3, #1]
 8006546:	e00d      	b.n	8006564 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	4613      	mov	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	4413      	add	r3, r2
 800655a:	3304      	adds	r3, #4
 800655c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	b2da      	uxtb	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_PCD_EP_SetStall+0x82>
 8006580:	2302      	movs	r3, #2
 8006582:	e01e      	b.n	80065c2 <HAL_PCD_EP_SetStall+0xc0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68f9      	ldr	r1, [r7, #12]
 8006592:	4618      	mov	r0, r3
 8006594:	f003 fa8f 	bl	8009ab6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	b2d9      	uxtb	r1, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065b2:	461a      	mov	r2, r3
 80065b4:	f003 fc6e 	bl	8009e94 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d901      	bls.n	80065e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e042      	b.n	800666e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da0f      	bge.n	8006610 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	f003 020f 	and.w	r2, r3, #15
 80065f6:	4613      	mov	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	3338      	adds	r3, #56	; 0x38
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	3304      	adds	r3, #4
 8006606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	705a      	strb	r2, [r3, #1]
 800660e:	e00f      	b.n	8006630 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	4613      	mov	r3, r2
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_PCD_EP_ClrStall+0x86>
 800664c:	2302      	movs	r3, #2
 800664e:	e00e      	b.n	800666e <HAL_PCD_EP_ClrStall+0xa4>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68f9      	ldr	r1, [r7, #12]
 800665e:	4618      	mov	r0, r3
 8006660:	f003 fa97 	bl	8009b92 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b08a      	sub	sp, #40	; 0x28
 800667a:	af02      	add	r7, sp, #8
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	3338      	adds	r3, #56	; 0x38
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	3304      	adds	r3, #4
 800669c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d901      	bls.n	80066ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e06c      	b.n	8006788 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	695a      	ldr	r2, [r3, #20]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d902      	bls.n	80066ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3303      	adds	r3, #3
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066d2:	e02b      	b.n	800672c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d902      	bls.n	80066f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3303      	adds	r3, #3
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68d9      	ldr	r1, [r3, #12]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006708:	b2db      	uxtb	r3, r3
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f003 f973 	bl	80099fa <USB_WritePacket>

    ep->xfer_buff  += len;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	441a      	add	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	441a      	add	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	b29b      	uxth	r3, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	429a      	cmp	r2, r3
 8006740:	d809      	bhi.n	8006756 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800674a:	429a      	cmp	r2, r3
 800674c:	d203      	bcs.n	8006756 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1be      	bne.n	80066d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	429a      	cmp	r2, r3
 8006760:	d811      	bhi.n	8006786 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	2201      	movs	r2, #1
 800676a:	fa02 f303 	lsl.w	r3, r2, r3
 800676e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	43db      	mvns	r3, r3
 800677c:	6939      	ldr	r1, [r7, #16]
 800677e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006782:	4013      	ands	r3, r2
 8006784:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3720      	adds	r7, #32
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	333c      	adds	r3, #60	; 0x3c
 80067a8:	3304      	adds	r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	f040 80a0 	bne.w	8006908 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d015      	beq.n	80067fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a72      	ldr	r2, [pc, #456]	; (80069a0 <PCD_EP_OutXfrComplete_int+0x210>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	f240 80dd 	bls.w	8006996 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80d7 	beq.w	8006996 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	461a      	mov	r2, r3
 80067f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067fa:	6093      	str	r3, [r2, #8]
 80067fc:	e0cb      	b.n	8006996 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d009      	beq.n	800681c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	461a      	mov	r2, r3
 8006816:	2320      	movs	r3, #32
 8006818:	6093      	str	r3, [r2, #8]
 800681a:	e0bc      	b.n	8006996 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006822:	2b00      	cmp	r3, #0
 8006824:	f040 80b7 	bne.w	8006996 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a5d      	ldr	r2, [pc, #372]	; (80069a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d90f      	bls.n	8006850 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006846:	461a      	mov	r2, r3
 8006848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800684c:	6093      	str	r3, [r2, #8]
 800684e:	e0a2      	b.n	8006996 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006862:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	0159      	lsls	r1, r3, #5
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	440b      	add	r3, r1
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006876:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4403      	add	r3, r0
 8006886:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800688a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800689e:	6819      	ldr	r1, [r3, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	1a9b      	subs	r3, r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4403      	add	r3, r0
 80068ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4419      	add	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4403      	add	r3, r0
 80068c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d114      	bne.n	80068fa <PCD_EP_OutXfrComplete_int+0x16a>
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d108      	bne.n	80068fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068f2:	461a      	mov	r2, r3
 80068f4:	2101      	movs	r1, #1
 80068f6:	f003 facd 	bl	8009e94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f005 f979 	bl	800bbf8 <HAL_PCD_DataOutStageCallback>
 8006906:	e046      	b.n	8006996 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4a26      	ldr	r2, [pc, #152]	; (80069a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d124      	bne.n	800695a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006926:	461a      	mov	r2, r3
 8006928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692c:	6093      	str	r3, [r2, #8]
 800692e:	e032      	b.n	8006996 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	461a      	mov	r2, r3
 8006948:	2320      	movs	r3, #32
 800694a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f005 f950 	bl	800bbf8 <HAL_PCD_DataOutStageCallback>
 8006958:	e01d      	b.n	8006996 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d114      	bne.n	800698a <PCD_EP_OutXfrComplete_int+0x1fa>
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	1a9b      	subs	r3, r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d108      	bne.n	800698a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006982:	461a      	mov	r2, r3
 8006984:	2100      	movs	r1, #0
 8006986:	f003 fa85 	bl	8009e94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f005 f931 	bl	800bbf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	4f54300a 	.word	0x4f54300a
 80069a4:	4f54310a 	.word	0x4f54310a

080069a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	333c      	adds	r3, #60	; 0x3c
 80069c0:	3304      	adds	r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <PCD_EP_OutSetupPacket_int+0x88>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d90e      	bls.n	80069fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d009      	beq.n	80069fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f4:	461a      	mov	r2, r3
 80069f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f005 f8e9 	bl	800bbd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d90c      	bls.n	8006a24 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d108      	bne.n	8006a24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	2101      	movs	r1, #1
 8006a20:	f003 fa38 	bl	8009e94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	4f54300a 	.word	0x4f54300a

08006a34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
 8006a40:	4613      	mov	r3, r2
 8006a42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d107      	bne.n	8006a62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a52:	883b      	ldrh	r3, [r7, #0]
 8006a54:	0419      	lsls	r1, r3, #16
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a60:	e028      	b.n	8006ab4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
 8006a74:	e00d      	b.n	8006a92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	3340      	adds	r3, #64	; 0x40
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
 8006a92:	7bfa      	ldrb	r2, [r7, #15]
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d3ec      	bcc.n	8006a76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a9c:	883b      	ldrh	r3, [r7, #0]
 8006a9e:	0418      	lsls	r0, r3, #16
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6819      	ldr	r1, [r3, #0]
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	4302      	orrs	r2, r0
 8006aac:	3340      	adds	r3, #64	; 0x40
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	887a      	ldrh	r2, [r7, #2]
 8006ad4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e25b      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d075      	beq.n	8006c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b1a:	4ba3      	ldr	r3, [pc, #652]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d00c      	beq.n	8006b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b26:	4ba0      	ldr	r3, [pc, #640]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d112      	bne.n	8006b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b32:	4b9d      	ldr	r3, [pc, #628]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b3e:	d10b      	bne.n	8006b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b40:	4b99      	ldr	r3, [pc, #612]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d05b      	beq.n	8006c04 <HAL_RCC_OscConfig+0x108>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d157      	bne.n	8006c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e236      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b60:	d106      	bne.n	8006b70 <HAL_RCC_OscConfig+0x74>
 8006b62:	4b91      	ldr	r3, [pc, #580]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a90      	ldr	r2, [pc, #576]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e01d      	b.n	8006bac <HAL_RCC_OscConfig+0xb0>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0x98>
 8006b7a:	4b8b      	ldr	r3, [pc, #556]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a8a      	ldr	r2, [pc, #552]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	4b88      	ldr	r3, [pc, #544]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a87      	ldr	r2, [pc, #540]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_OscConfig+0xb0>
 8006b94:	4b84      	ldr	r3, [pc, #528]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a83      	ldr	r2, [pc, #524]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	4b81      	ldr	r3, [pc, #516]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a80      	ldr	r2, [pc, #512]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb4:	f7fb fab8 	bl	8002128 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fb fab4 	bl	8002128 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	; 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e1fb      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bce:	4b76      	ldr	r3, [pc, #472]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0xc0>
 8006bda:	e014      	b.n	8006c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fb faa4 	bl	8002128 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fb faa0 	bl	8002128 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	; 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e1e7      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf6:	4b6c      	ldr	r3, [pc, #432]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0xe8>
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d063      	beq.n	8006cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c12:	4b65      	ldr	r3, [pc, #404]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c1e:	4b62      	ldr	r3, [pc, #392]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d11c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c2a:	4b5f      	ldr	r3, [pc, #380]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d116      	bne.n	8006c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	4b5c      	ldr	r3, [pc, #368]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_RCC_OscConfig+0x152>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d001      	beq.n	8006c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e1bb      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4e:	4b56      	ldr	r3, [pc, #344]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	4952      	ldr	r1, [pc, #328]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c62:	e03a      	b.n	8006cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c6c:	4b4f      	ldr	r3, [pc, #316]	; (8006dac <HAL_RCC_OscConfig+0x2b0>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c72:	f7fb fa59 	bl	8002128 <HAL_GetTick>
 8006c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c7a:	f7fb fa55 	bl	8002128 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e19c      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c8c:	4b46      	ldr	r3, [pc, #280]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d0f0      	beq.n	8006c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c98:	4b43      	ldr	r3, [pc, #268]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	4940      	ldr	r1, [pc, #256]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	600b      	str	r3, [r1, #0]
 8006cac:	e015      	b.n	8006cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cae:	4b3f      	ldr	r3, [pc, #252]	; (8006dac <HAL_RCC_OscConfig+0x2b0>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fb fa38 	bl	8002128 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cbc:	f7fb fa34 	bl	8002128 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e17b      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cce:	4b36      	ldr	r3, [pc, #216]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d030      	beq.n	8006d48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d016      	beq.n	8006d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cee:	4b30      	ldr	r3, [pc, #192]	; (8006db0 <HAL_RCC_OscConfig+0x2b4>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf4:	f7fb fa18 	bl	8002128 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cfc:	f7fb fa14 	bl	8002128 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e15b      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0e:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0x200>
 8006d1a:	e015      	b.n	8006d48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d1c:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <HAL_RCC_OscConfig+0x2b4>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d22:	f7fb fa01 	bl	8002128 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d2a:	f7fb f9fd 	bl	8002128 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e144      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d3c:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f0      	bne.n	8006d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80a0 	beq.w	8006e96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d5a:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10f      	bne.n	8006d86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	4a0e      	ldr	r2, [pc, #56]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d74:	6413      	str	r3, [r2, #64]	; 0x40
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <HAL_RCC_OscConfig+0x2ac>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_OscConfig+0x2b8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d121      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d92:	4b08      	ldr	r3, [pc, #32]	; (8006db4 <HAL_RCC_OscConfig+0x2b8>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a07      	ldr	r2, [pc, #28]	; (8006db4 <HAL_RCC_OscConfig+0x2b8>)
 8006d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d9e:	f7fb f9c3 	bl	8002128 <HAL_GetTick>
 8006da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da4:	e011      	b.n	8006dca <HAL_RCC_OscConfig+0x2ce>
 8006da6:	bf00      	nop
 8006da8:	40023800 	.word	0x40023800
 8006dac:	42470000 	.word	0x42470000
 8006db0:	42470e80 	.word	0x42470e80
 8006db4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db8:	f7fb f9b6 	bl	8002128 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0fd      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dca:	4b81      	ldr	r3, [pc, #516]	; (8006fd0 <HAL_RCC_OscConfig+0x4d4>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d106      	bne.n	8006dec <HAL_RCC_OscConfig+0x2f0>
 8006dde:	4b7d      	ldr	r3, [pc, #500]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	4a7c      	ldr	r2, [pc, #496]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dea:	e01c      	b.n	8006e26 <HAL_RCC_OscConfig+0x32a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d10c      	bne.n	8006e0e <HAL_RCC_OscConfig+0x312>
 8006df4:	4b77      	ldr	r3, [pc, #476]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df8:	4a76      	ldr	r2, [pc, #472]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006dfa:	f043 0304 	orr.w	r3, r3, #4
 8006dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8006e00:	4b74      	ldr	r3, [pc, #464]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e04:	4a73      	ldr	r2, [pc, #460]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e0c:	e00b      	b.n	8006e26 <HAL_RCC_OscConfig+0x32a>
 8006e0e:	4b71      	ldr	r3, [pc, #452]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	4a70      	ldr	r2, [pc, #448]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e14:	f023 0301 	bic.w	r3, r3, #1
 8006e18:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1a:	4b6e      	ldr	r3, [pc, #440]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	4a6d      	ldr	r2, [pc, #436]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e20:	f023 0304 	bic.w	r3, r3, #4
 8006e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d015      	beq.n	8006e5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2e:	f7fb f97b 	bl	8002128 <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e34:	e00a      	b.n	8006e4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e36:	f7fb f977 	bl	8002128 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e0bc      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4c:	4b61      	ldr	r3, [pc, #388]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ee      	beq.n	8006e36 <HAL_RCC_OscConfig+0x33a>
 8006e58:	e014      	b.n	8006e84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5a:	f7fb f965 	bl	8002128 <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e60:	e00a      	b.n	8006e78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e62:	f7fb f961 	bl	8002128 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e0a6      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e78:	4b56      	ldr	r3, [pc, #344]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ee      	bne.n	8006e62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d105      	bne.n	8006e96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e8a:	4b52      	ldr	r3, [pc, #328]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	4a51      	ldr	r2, [pc, #324]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8092 	beq.w	8006fc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ea0:	4b4c      	ldr	r3, [pc, #304]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 030c 	and.w	r3, r3, #12
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d05c      	beq.n	8006f66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d141      	bne.n	8006f38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb4:	4b48      	ldr	r3, [pc, #288]	; (8006fd8 <HAL_RCC_OscConfig+0x4dc>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eba:	f7fb f935 	bl	8002128 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec2:	f7fb f931 	bl	8002128 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e078      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed4:	4b3f      	ldr	r3, [pc, #252]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	019b      	lsls	r3, r3, #6
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f02:	061b      	lsls	r3, r3, #24
 8006f04:	4933      	ldr	r1, [pc, #204]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f0a:	4b33      	ldr	r3, [pc, #204]	; (8006fd8 <HAL_RCC_OscConfig+0x4dc>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f10:	f7fb f90a 	bl	8002128 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f18:	f7fb f906 	bl	8002128 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e04d      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f2a:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCC_OscConfig+0x41c>
 8006f36:	e045      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f38:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <HAL_RCC_OscConfig+0x4dc>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3e:	f7fb f8f3 	bl	8002128 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f44:	e008      	b.n	8006f58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f46:	f7fb f8ef 	bl	8002128 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e036      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f58:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f0      	bne.n	8006f46 <HAL_RCC_OscConfig+0x44a>
 8006f64:	e02e      	b.n	8006fc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e029      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f72:	4b18      	ldr	r3, [pc, #96]	; (8006fd4 <HAL_RCC_OscConfig+0x4d8>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d11c      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d115      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d10d      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d106      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d001      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40007000 	.word	0x40007000
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	42470060 	.word	0x42470060

08006fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0cc      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff0:	4b68      	ldr	r3, [pc, #416]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d90c      	bls.n	8007018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffe:	4b65      	ldr	r3, [pc, #404]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007006:	4b63      	ldr	r3, [pc, #396]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0b8      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d020      	beq.n	8007066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007030:	4b59      	ldr	r3, [pc, #356]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4a58      	ldr	r2, [pc, #352]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800703a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007048:	4b53      	ldr	r3, [pc, #332]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	4a52      	ldr	r2, [pc, #328]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007054:	4b50      	ldr	r3, [pc, #320]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	494d      	ldr	r1, [pc, #308]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d044      	beq.n	80070fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d107      	bne.n	800708a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d119      	bne.n	80070ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e07f      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d003      	beq.n	800709a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007096:	2b03      	cmp	r3, #3
 8007098:	d107      	bne.n	80070aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800709a:	4b3f      	ldr	r3, [pc, #252]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e06f      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070aa:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e067      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ba:	4b37      	ldr	r3, [pc, #220]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f023 0203 	bic.w	r2, r3, #3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4934      	ldr	r1, [pc, #208]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070cc:	f7fb f82c 	bl	8002128 <HAL_GetTick>
 80070d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d4:	f7fb f828 	bl	8002128 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e04f      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ea:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 020c 	and.w	r2, r3, #12
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d1eb      	bne.n	80070d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d20c      	bcs.n	8007124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e032      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007130:	4b19      	ldr	r3, [pc, #100]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	4916      	ldr	r1, [pc, #88]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	4313      	orrs	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	490e      	ldr	r1, [pc, #56]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800715e:	4313      	orrs	r3, r2
 8007160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007162:	f000 f821 	bl	80071a8 <HAL_RCC_GetSysClockFreq>
 8007166:	4601      	mov	r1, r0
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	091b      	lsrs	r3, r3, #4
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	4a0a      	ldr	r2, [pc, #40]	; (800719c <HAL_RCC_ClockConfig+0x1c0>)
 8007174:	5cd3      	ldrb	r3, [r2, r3]
 8007176:	fa21 f303 	lsr.w	r3, r1, r3
 800717a:	4a09      	ldr	r2, [pc, #36]	; (80071a0 <HAL_RCC_ClockConfig+0x1c4>)
 800717c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800717e:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f7fa ff8c 	bl	80020a0 <HAL_InitTick>

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40023c00 	.word	0x40023c00
 8007198:	40023800 	.word	0x40023800
 800719c:	0800ca34 	.word	0x0800ca34
 80071a0:	20000008 	.word	0x20000008
 80071a4:	2000000c 	.word	0x2000000c

080071a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	2300      	movs	r3, #0
 80071b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071be:	4b63      	ldr	r3, [pc, #396]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 030c 	and.w	r3, r3, #12
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d007      	beq.n	80071da <HAL_RCC_GetSysClockFreq+0x32>
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d008      	beq.n	80071e0 <HAL_RCC_GetSysClockFreq+0x38>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 80b4 	bne.w	800733c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071d4:	4b5e      	ldr	r3, [pc, #376]	; (8007350 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071d6:	60bb      	str	r3, [r7, #8]
       break;
 80071d8:	e0b3      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071da:	4b5d      	ldr	r3, [pc, #372]	; (8007350 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071dc:	60bb      	str	r3, [r7, #8]
      break;
 80071de:	e0b0      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071e0:	4b5a      	ldr	r3, [pc, #360]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071ea:	4b58      	ldr	r3, [pc, #352]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d04a      	beq.n	800728c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071f6:	4b55      	ldr	r3, [pc, #340]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	099b      	lsrs	r3, r3, #6
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	ea03 0501 	and.w	r5, r3, r1
 800720c:	ea04 0602 	and.w	r6, r4, r2
 8007210:	4629      	mov	r1, r5
 8007212:	4632      	mov	r2, r6
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	f04f 0400 	mov.w	r4, #0
 800721c:	0154      	lsls	r4, r2, #5
 800721e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007222:	014b      	lsls	r3, r1, #5
 8007224:	4619      	mov	r1, r3
 8007226:	4622      	mov	r2, r4
 8007228:	1b49      	subs	r1, r1, r5
 800722a:	eb62 0206 	sbc.w	r2, r2, r6
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	f04f 0400 	mov.w	r4, #0
 8007236:	0194      	lsls	r4, r2, #6
 8007238:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800723c:	018b      	lsls	r3, r1, #6
 800723e:	1a5b      	subs	r3, r3, r1
 8007240:	eb64 0402 	sbc.w	r4, r4, r2
 8007244:	f04f 0100 	mov.w	r1, #0
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	00e2      	lsls	r2, r4, #3
 800724e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007252:	00d9      	lsls	r1, r3, #3
 8007254:	460b      	mov	r3, r1
 8007256:	4614      	mov	r4, r2
 8007258:	195b      	adds	r3, r3, r5
 800725a:	eb44 0406 	adc.w	r4, r4, r6
 800725e:	f04f 0100 	mov.w	r1, #0
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	02a2      	lsls	r2, r4, #10
 8007268:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800726c:	0299      	lsls	r1, r3, #10
 800726e:	460b      	mov	r3, r1
 8007270:	4614      	mov	r4, r2
 8007272:	4618      	mov	r0, r3
 8007274:	4621      	mov	r1, r4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f04f 0400 	mov.w	r4, #0
 800727c:	461a      	mov	r2, r3
 800727e:	4623      	mov	r3, r4
 8007280:	f7f9 fc14 	bl	8000aac <__aeabi_uldivmod>
 8007284:	4603      	mov	r3, r0
 8007286:	460c      	mov	r4, r1
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e049      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800728c:	4b2f      	ldr	r3, [pc, #188]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	099b      	lsrs	r3, r3, #6
 8007292:	f04f 0400 	mov.w	r4, #0
 8007296:	f240 11ff 	movw	r1, #511	; 0x1ff
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	ea03 0501 	and.w	r5, r3, r1
 80072a2:	ea04 0602 	and.w	r6, r4, r2
 80072a6:	4629      	mov	r1, r5
 80072a8:	4632      	mov	r2, r6
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	f04f 0400 	mov.w	r4, #0
 80072b2:	0154      	lsls	r4, r2, #5
 80072b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072b8:	014b      	lsls	r3, r1, #5
 80072ba:	4619      	mov	r1, r3
 80072bc:	4622      	mov	r2, r4
 80072be:	1b49      	subs	r1, r1, r5
 80072c0:	eb62 0206 	sbc.w	r2, r2, r6
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	f04f 0400 	mov.w	r4, #0
 80072cc:	0194      	lsls	r4, r2, #6
 80072ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072d2:	018b      	lsls	r3, r1, #6
 80072d4:	1a5b      	subs	r3, r3, r1
 80072d6:	eb64 0402 	sbc.w	r4, r4, r2
 80072da:	f04f 0100 	mov.w	r1, #0
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	00e2      	lsls	r2, r4, #3
 80072e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072e8:	00d9      	lsls	r1, r3, #3
 80072ea:	460b      	mov	r3, r1
 80072ec:	4614      	mov	r4, r2
 80072ee:	195b      	adds	r3, r3, r5
 80072f0:	eb44 0406 	adc.w	r4, r4, r6
 80072f4:	f04f 0100 	mov.w	r1, #0
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	02a2      	lsls	r2, r4, #10
 80072fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007302:	0299      	lsls	r1, r3, #10
 8007304:	460b      	mov	r3, r1
 8007306:	4614      	mov	r4, r2
 8007308:	4618      	mov	r0, r3
 800730a:	4621      	mov	r1, r4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f04f 0400 	mov.w	r4, #0
 8007312:	461a      	mov	r2, r3
 8007314:	4623      	mov	r3, r4
 8007316:	f7f9 fbc9 	bl	8000aac <__aeabi_uldivmod>
 800731a:	4603      	mov	r3, r0
 800731c:	460c      	mov	r4, r1
 800731e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	3301      	adds	r3, #1
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	fbb2 f3f3 	udiv	r3, r2, r3
 8007338:	60bb      	str	r3, [r7, #8]
      break;
 800733a:	e002      	b.n	8007342 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800733e:	60bb      	str	r3, [r7, #8]
      break;
 8007340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007342:	68bb      	ldr	r3, [r7, #8]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734c:	40023800 	.word	0x40023800
 8007350:	00f42400 	.word	0x00f42400

08007354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007358:	4b03      	ldr	r3, [pc, #12]	; (8007368 <HAL_RCC_GetHCLKFreq+0x14>)
 800735a:	681b      	ldr	r3, [r3, #0]
}
 800735c:	4618      	mov	r0, r3
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000008 	.word	0x20000008

0800736c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007370:	f7ff fff0 	bl	8007354 <HAL_RCC_GetHCLKFreq>
 8007374:	4601      	mov	r1, r0
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	0a9b      	lsrs	r3, r3, #10
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	4a03      	ldr	r2, [pc, #12]	; (8007390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007382:	5cd3      	ldrb	r3, [r2, r3]
 8007384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40023800 	.word	0x40023800
 8007390:	0800ca44 	.word	0x0800ca44

08007394 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d105      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d035      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073bc:	4b62      	ldr	r3, [pc, #392]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073c2:	f7fa feb1 	bl	8002128 <HAL_GetTick>
 80073c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073c8:	e008      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073ca:	f7fa fead 	bl	8002128 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e0b0      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073dc:	4b5b      	ldr	r3, [pc, #364]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1f0      	bne.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	019a      	lsls	r2, r3, #6
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	071b      	lsls	r3, r3, #28
 80073f4:	4955      	ldr	r1, [pc, #340]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073fc:	4b52      	ldr	r3, [pc, #328]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073fe:	2201      	movs	r2, #1
 8007400:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007402:	f7fa fe91 	bl	8002128 <HAL_GetTick>
 8007406:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007408:	e008      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800740a:	f7fa fe8d 	bl	8002128 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e090      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800741c:	4b4b      	ldr	r3, [pc, #300]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0f0      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8083 	beq.w	800753c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	4b44      	ldr	r3, [pc, #272]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	4a43      	ldr	r2, [pc, #268]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007444:	6413      	str	r3, [r2, #64]	; 0x40
 8007446:	4b41      	ldr	r3, [pc, #260]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007452:	4b3f      	ldr	r3, [pc, #252]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a3e      	ldr	r2, [pc, #248]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800745e:	f7fa fe63 	bl	8002128 <HAL_GetTick>
 8007462:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007464:	e008      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007466:	f7fa fe5f 	bl	8002128 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e062      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007478:	4b35      	ldr	r3, [pc, #212]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007484:	4b31      	ldr	r3, [pc, #196]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d02f      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d028      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074a2:	4b2a      	ldr	r3, [pc, #168]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074ac:	4b29      	ldr	r3, [pc, #164]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074b2:	4b28      	ldr	r3, [pc, #160]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074b8:	4a24      	ldr	r2, [pc, #144]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074be:	4b23      	ldr	r3, [pc, #140]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d114      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80074ca:	f7fa fe2d 	bl	8002128 <HAL_GetTick>
 80074ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d0:	e00a      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074d2:	f7fa fe29 	bl	8002128 <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e02a      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e8:	4b18      	ldr	r3, [pc, #96]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0ee      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007500:	d10d      	bne.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007516:	490d      	ldr	r1, [pc, #52]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007518:	4313      	orrs	r3, r2
 800751a:	608b      	str	r3, [r1, #8]
 800751c:	e005      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007524:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007528:	6093      	str	r3, [r2, #8]
 800752a:	4b08      	ldr	r3, [pc, #32]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800752c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007536:	4905      	ldr	r1, [pc, #20]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007538:	4313      	orrs	r3, r2
 800753a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	42470068 	.word	0x42470068
 800754c:	40023800 	.word	0x40023800
 8007550:	40007000 	.word	0x40007000
 8007554:	42470e40 	.word	0x42470e40

08007558 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e083      	b.n	8007672 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7f5b      	ldrb	r3, [r3, #29]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d105      	bne.n	8007580 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fa f984 	bl	8001888 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	22ca      	movs	r2, #202	; 0xca
 800758c:	625a      	str	r2, [r3, #36]	; 0x24
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2253      	movs	r2, #83	; 0x53
 8007594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f897 	bl	80076ca <RTC_EnterInitMode>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d008      	beq.n	80075b4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	22ff      	movs	r2, #255	; 0xff
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2204      	movs	r2, #4
 80075ae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e05e      	b.n	8007672 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6899      	ldr	r1, [r3, #8]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68d2      	ldr	r2, [r2, #12]
 80075ee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6919      	ldr	r1, [r3, #16]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	041a      	lsls	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007612:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10e      	bne.n	8007640 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f829 	bl	800767a <HAL_RTC_WaitForSynchro>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d008      	beq.n	8007640 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	22ff      	movs	r2, #255	; 0xff
 8007634:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2204      	movs	r2, #4
 800763a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e018      	b.n	8007672 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800764e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	22ff      	movs	r2, #255	; 0xff
 8007668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007670:	2300      	movs	r3, #0
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007694:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007696:	f7fa fd47 	bl	8002128 <HAL_GetTick>
 800769a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800769c:	e009      	b.n	80076b2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800769e:	f7fa fd43 	bl	8002128 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ac:	d901      	bls.n	80076b2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e007      	b.n	80076c2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0ee      	beq.n	800769e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d119      	bne.n	8007718 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295
 80076ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076ee:	f7fa fd1b 	bl	8002128 <HAL_GetTick>
 80076f2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076f4:	e009      	b.n	800770a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80076f6:	f7fa fd17 	bl	8002128 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007704:	d901      	bls.n	800770a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e007      	b.n	800771a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0ee      	beq.n	80076f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b082      	sub	sp, #8
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e01d      	b.n	8007770 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fa fb75 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3304      	adds	r3, #4
 800775e:	4619      	mov	r1, r3
 8007760:	4610      	mov	r0, r2
 8007762:	f000 fbf9 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e01d      	b.n	80077c6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d106      	bne.n	80077a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7fa fb28 	bl	8001df4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f000 fbce 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e01d      	b.n	800781c <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f815 	bl	8007824 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f000 fba3 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b0c      	cmp	r3, #12
 8007846:	d841      	bhi.n	80078cc <HAL_TIM_IC_Start_IT+0x94>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <HAL_TIM_IC_Start_IT+0x18>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007885 	.word	0x08007885
 8007854:	080078cd 	.word	0x080078cd
 8007858:	080078cd 	.word	0x080078cd
 800785c:	080078cd 	.word	0x080078cd
 8007860:	08007897 	.word	0x08007897
 8007864:	080078cd 	.word	0x080078cd
 8007868:	080078cd 	.word	0x080078cd
 800786c:	080078cd 	.word	0x080078cd
 8007870:	080078a9 	.word	0x080078a9
 8007874:	080078cd 	.word	0x080078cd
 8007878:	080078cd 	.word	0x080078cd
 800787c:	080078cd 	.word	0x080078cd
 8007880:	080078bb 	.word	0x080078bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0202 	orr.w	r2, r2, #2
 8007892:	60da      	str	r2, [r3, #12]
      break;
 8007894:	e01b      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0204 	orr.w	r2, r2, #4
 80078a4:	60da      	str	r2, [r3, #12]
      break;
 80078a6:	e012      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0208 	orr.w	r2, r2, #8
 80078b6:	60da      	str	r2, [r3, #12]
      break;
 80078b8:	e009      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0210 	orr.w	r2, r2, #16
 80078c8:	60da      	str	r2, [r3, #12]
      break;
 80078ca:	e000      	b.n	80078ce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80078cc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2201      	movs	r2, #1
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 ff52 	bl	8008780 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d007      	beq.n	80078fe <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b02      	cmp	r3, #2
 800791c:	d122      	bne.n	8007964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b02      	cmp	r3, #2
 800792a:	d11b      	bne.n	8007964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0202 	mvn.w	r2, #2
 8007934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7f9 fe78 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 8007950:	e005      	b.n	800795e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fae2 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fae9 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0304 	and.w	r3, r3, #4
 800796e:	2b04      	cmp	r3, #4
 8007970:	d122      	bne.n	80079b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0304 	and.w	r3, r3, #4
 800797c:	2b04      	cmp	r3, #4
 800797e:	d11b      	bne.n	80079b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0204 	mvn.w	r2, #4
 8007988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7f9 fe4e 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fab8 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fabf 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d122      	bne.n	8007a0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d11b      	bne.n	8007a0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0208 	mvn.w	r2, #8
 80079dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2204      	movs	r2, #4
 80079e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d003      	beq.n	80079fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f9 fe24 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 80079f8:	e005      	b.n	8007a06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa8e 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fa95 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b10      	cmp	r3, #16
 8007a18:	d122      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b10      	cmp	r3, #16
 8007a26:	d11b      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0210 	mvn.w	r2, #16
 8007a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2208      	movs	r2, #8
 8007a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d003      	beq.n	8007a4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7f9 fdfa 	bl	8001640 <HAL_TIM_IC_CaptureCallback>
 8007a4c:	e005      	b.n	8007a5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa64 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fa6b 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d10e      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d107      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0201 	mvn.w	r2, #1
 8007a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fa3e 	bl	8007f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a96:	2b80      	cmp	r3, #128	; 0x80
 8007a98:	d10e      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa4:	2b80      	cmp	r3, #128	; 0x80
 8007aa6:	d107      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 ff62 	bl	800897c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d10e      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d107      	bne.n	8007ae4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa30 	bl	8007f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	d10e      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0320 	and.w	r3, r3, #32
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d107      	bne.n	8007b10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0220 	mvn.w	r2, #32
 8007b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 ff2c 	bl	8008968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e04e      	b.n	8007bd0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b0c      	cmp	r3, #12
 8007b46:	d839      	bhi.n	8007bbc <HAL_TIM_OC_ConfigChannel+0xa4>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b85 	.word	0x08007b85
 8007b54:	08007bbd 	.word	0x08007bbd
 8007b58:	08007bbd 	.word	0x08007bbd
 8007b5c:	08007bbd 	.word	0x08007bbd
 8007b60:	08007b93 	.word	0x08007b93
 8007b64:	08007bbd 	.word	0x08007bbd
 8007b68:	08007bbd 	.word	0x08007bbd
 8007b6c:	08007bbd 	.word	0x08007bbd
 8007b70:	08007ba1 	.word	0x08007ba1
 8007b74:	08007bbd 	.word	0x08007bbd
 8007b78:	08007bbd 	.word	0x08007bbd
 8007b7c:	08007bbd 	.word	0x08007bbd
 8007b80:	08007baf 	.word	0x08007baf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fa84 	bl	8008098 <TIM_OC1_SetConfig>
      break;
 8007b90:	e015      	b.n	8007bbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68b9      	ldr	r1, [r7, #8]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 faed 	bl	8008178 <TIM_OC2_SetConfig>
      break;
 8007b9e:	e00e      	b.n	8007bbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 fb5c 	bl	8008264 <TIM_OC3_SetConfig>
      break;
 8007bac:	e007      	b.n	8007bbe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fbc9 	bl	800834c <TIM_OC4_SetConfig>
      break;
 8007bba:	e000      	b.n	8007bbe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007bbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e08a      	b.n	8007d08 <HAL_TIM_IC_ConfigChannel+0x130>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d11b      	bne.n	8007c40 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6819      	ldr	r1, [r3, #0]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f000 fbee 	bl	80083f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 020c 	bic.w	r2, r2, #12
 8007c2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6999      	ldr	r1, [r3, #24]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	619a      	str	r2, [r3, #24]
 8007c3e:	e05a      	b.n	8007cf6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d11c      	bne.n	8007c80 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6819      	ldr	r1, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f000 fc72 	bl	800853e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6999      	ldr	r1, [r3, #24]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	021a      	lsls	r2, r3, #8
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	619a      	str	r2, [r3, #24]
 8007c7e:	e03a      	b.n	8007cf6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	d11b      	bne.n	8007cbe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f000 fcbf 	bl	8008618 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 020c 	bic.w	r2, r2, #12
 8007ca8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69d9      	ldr	r1, [r3, #28]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	61da      	str	r2, [r3, #28]
 8007cbc:	e01b      	b.n	8007cf6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6819      	ldr	r1, [r3, #0]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f000 fcdf 	bl	8008690 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ce0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69d9      	ldr	r1, [r3, #28]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	021a      	lsls	r2, r3, #8
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_TIM_ConfigClockSource+0x18>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e0a6      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x166>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b40      	cmp	r3, #64	; 0x40
 8007d5e:	d067      	beq.n	8007e30 <HAL_TIM_ConfigClockSource+0x120>
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d80b      	bhi.n	8007d7c <HAL_TIM_ConfigClockSource+0x6c>
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d073      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0x140>
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d802      	bhi.n	8007d72 <HAL_TIM_ConfigClockSource+0x62>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d06f      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d70:	e078      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d72:	2b20      	cmp	r3, #32
 8007d74:	d06c      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0x140>
 8007d76:	2b30      	cmp	r3, #48	; 0x30
 8007d78:	d06a      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007d7a:	e073      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d7c:	2b70      	cmp	r3, #112	; 0x70
 8007d7e:	d00d      	beq.n	8007d9c <HAL_TIM_ConfigClockSource+0x8c>
 8007d80:	2b70      	cmp	r3, #112	; 0x70
 8007d82:	d804      	bhi.n	8007d8e <HAL_TIM_ConfigClockSource+0x7e>
 8007d84:	2b50      	cmp	r3, #80	; 0x50
 8007d86:	d033      	beq.n	8007df0 <HAL_TIM_ConfigClockSource+0xe0>
 8007d88:	2b60      	cmp	r3, #96	; 0x60
 8007d8a:	d041      	beq.n	8007e10 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d8c:	e06a      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d92:	d066      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x152>
 8007d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d98:	d017      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d9a:	e063      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	6899      	ldr	r1, [r3, #8]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f000 fcc8 	bl	8008740 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	609a      	str	r2, [r3, #8]
      break;
 8007dc8:	e04c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6899      	ldr	r1, [r3, #8]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	f000 fcb1 	bl	8008740 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dec:	609a      	str	r2, [r3, #8]
      break;
 8007dee:	e039      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	6859      	ldr	r1, [r3, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f000 fb6f 	bl	80084e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2150      	movs	r1, #80	; 0x50
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fc7e 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e0e:	e029      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	6859      	ldr	r1, [r3, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f000 fbcb 	bl	80085b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2160      	movs	r1, #96	; 0x60
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fc6e 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e2e:	e019      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6859      	ldr	r1, [r3, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f000 fb4f 	bl	80084e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2140      	movs	r1, #64	; 0x40
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fc5e 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e4e:	e009      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f000 fc55 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e60:	e000      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d831      	bhi.n	8007ef8 <HAL_TIM_ReadCapturedValue+0x78>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007ef9 	.word	0x08007ef9
 8007ea4:	08007ef9 	.word	0x08007ef9
 8007ea8:	08007ef9 	.word	0x08007ef9
 8007eac:	08007edb 	.word	0x08007edb
 8007eb0:	08007ef9 	.word	0x08007ef9
 8007eb4:	08007ef9 	.word	0x08007ef9
 8007eb8:	08007ef9 	.word	0x08007ef9
 8007ebc:	08007ee5 	.word	0x08007ee5
 8007ec0:	08007ef9 	.word	0x08007ef9
 8007ec4:	08007ef9 	.word	0x08007ef9
 8007ec8:	08007ef9 	.word	0x08007ef9
 8007ecc:	08007eef 	.word	0x08007eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	60fb      	str	r3, [r7, #12]

      break;
 8007ed8:	e00f      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	60fb      	str	r3, [r7, #12]

      break;
 8007ee2:	e00a      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eea:	60fb      	str	r3, [r7, #12]

      break;
 8007eec:	e005      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	60fb      	str	r3, [r7, #12]

      break;
 8007ef6:	e000      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007ef8:	bf00      	nop
  }

  return tmpreg;
 8007efa:	68fb      	ldr	r3, [r7, #12]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a40      	ldr	r2, [pc, #256]	; (800806c <TIM_Base_SetConfig+0x114>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d00f      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a3d      	ldr	r2, [pc, #244]	; (8008070 <TIM_Base_SetConfig+0x118>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00b      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a3c      	ldr	r2, [pc, #240]	; (8008074 <TIM_Base_SetConfig+0x11c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a3b      	ldr	r2, [pc, #236]	; (8008078 <TIM_Base_SetConfig+0x120>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a3a      	ldr	r2, [pc, #232]	; (800807c <TIM_Base_SetConfig+0x124>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d108      	bne.n	8007faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a2f      	ldr	r2, [pc, #188]	; (800806c <TIM_Base_SetConfig+0x114>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d02b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb8:	d027      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a2c      	ldr	r2, [pc, #176]	; (8008070 <TIM_Base_SetConfig+0x118>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d023      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a2b      	ldr	r2, [pc, #172]	; (8008074 <TIM_Base_SetConfig+0x11c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2a      	ldr	r2, [pc, #168]	; (8008078 <TIM_Base_SetConfig+0x120>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a29      	ldr	r2, [pc, #164]	; (800807c <TIM_Base_SetConfig+0x124>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d017      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a28      	ldr	r2, [pc, #160]	; (8008080 <TIM_Base_SetConfig+0x128>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a27      	ldr	r2, [pc, #156]	; (8008084 <TIM_Base_SetConfig+0x12c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a26      	ldr	r2, [pc, #152]	; (8008088 <TIM_Base_SetConfig+0x130>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a25      	ldr	r2, [pc, #148]	; (800808c <TIM_Base_SetConfig+0x134>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a24      	ldr	r2, [pc, #144]	; (8008090 <TIM_Base_SetConfig+0x138>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a23      	ldr	r2, [pc, #140]	; (8008094 <TIM_Base_SetConfig+0x13c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d108      	bne.n	800801c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a0a      	ldr	r2, [pc, #40]	; (800806c <TIM_Base_SetConfig+0x114>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0xf8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a0c      	ldr	r2, [pc, #48]	; (800807c <TIM_Base_SetConfig+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d103      	bne.n	8008058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	615a      	str	r2, [r3, #20]
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40010400 	.word	0x40010400
 8008080:	40014000 	.word	0x40014000
 8008084:	40014400 	.word	0x40014400
 8008088:	40014800 	.word	0x40014800
 800808c:	40001800 	.word	0x40001800
 8008090:	40001c00 	.word	0x40001c00
 8008094:	40002000 	.word	0x40002000

08008098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f023 0201 	bic.w	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f023 0302 	bic.w	r3, r3, #2
 80080e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a20      	ldr	r2, [pc, #128]	; (8008170 <TIM_OC1_SetConfig+0xd8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d003      	beq.n	80080fc <TIM_OC1_SetConfig+0x64>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a1f      	ldr	r2, [pc, #124]	; (8008174 <TIM_OC1_SetConfig+0xdc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d10c      	bne.n	8008116 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0308 	bic.w	r3, r3, #8
 8008102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f023 0304 	bic.w	r3, r3, #4
 8008114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a15      	ldr	r2, [pc, #84]	; (8008170 <TIM_OC1_SetConfig+0xd8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_OC1_SetConfig+0x8e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a14      	ldr	r2, [pc, #80]	; (8008174 <TIM_OC1_SetConfig+0xdc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d111      	bne.n	800814a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800812c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	621a      	str	r2, [r3, #32]
}
 8008164:	bf00      	nop
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	40010000 	.word	0x40010000
 8008174:	40010400 	.word	0x40010400

08008178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	f023 0210 	bic.w	r2, r3, #16
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f023 0320 	bic.w	r3, r3, #32
 80081c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a22      	ldr	r2, [pc, #136]	; (800825c <TIM_OC2_SetConfig+0xe4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_OC2_SetConfig+0x68>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a21      	ldr	r2, [pc, #132]	; (8008260 <TIM_OC2_SetConfig+0xe8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10d      	bne.n	80081fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a17      	ldr	r2, [pc, #92]	; (800825c <TIM_OC2_SetConfig+0xe4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_OC2_SetConfig+0x94>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a16      	ldr	r2, [pc, #88]	; (8008260 <TIM_OC2_SetConfig+0xe8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d113      	bne.n	8008234 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800821a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000
 8008260:	40010400 	.word	0x40010400

08008264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a21      	ldr	r2, [pc, #132]	; (8008344 <TIM_OC3_SetConfig+0xe0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_OC3_SetConfig+0x66>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a20      	ldr	r2, [pc, #128]	; (8008348 <TIM_OC3_SetConfig+0xe4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10d      	bne.n	80082e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a16      	ldr	r2, [pc, #88]	; (8008344 <TIM_OC3_SetConfig+0xe0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC3_SetConfig+0x92>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a15      	ldr	r2, [pc, #84]	; (8008348 <TIM_OC3_SetConfig+0xe4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d113      	bne.n	800831e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40010000 	.word	0x40010000
 8008348:	40010400 	.word	0x40010400

0800834c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	021b      	lsls	r3, r3, #8
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	031b      	lsls	r3, r3, #12
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a12      	ldr	r2, [pc, #72]	; (80083f0 <TIM_OC4_SetConfig+0xa4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <TIM_OC4_SetConfig+0x68>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <TIM_OC4_SetConfig+0xa8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d109      	bne.n	80083c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	019b      	lsls	r3, r3, #6
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	621a      	str	r2, [r3, #32]
}
 80083e2:	bf00      	nop
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40010000 	.word	0x40010000
 80083f4:	40010400 	.word	0x40010400

080083f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4a28      	ldr	r2, [pc, #160]	; (80084c4 <TIM_TI1_SetConfig+0xcc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01b      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842c:	d017      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a25      	ldr	r2, [pc, #148]	; (80084c8 <TIM_TI1_SetConfig+0xd0>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4a24      	ldr	r2, [pc, #144]	; (80084cc <TIM_TI1_SetConfig+0xd4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00f      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4a23      	ldr	r2, [pc, #140]	; (80084d0 <TIM_TI1_SetConfig+0xd8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00b      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <TIM_TI1_SetConfig+0xdc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d007      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <TIM_TI1_SetConfig+0xe0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d003      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4a20      	ldr	r2, [pc, #128]	; (80084dc <TIM_TI1_SetConfig+0xe4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <TIM_TI1_SetConfig+0x6a>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <TIM_TI1_SetConfig+0x6c>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e003      	b.n	8008482 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f043 0301 	orr.w	r3, r3, #1
 8008480:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	b2db      	uxtb	r3, r3
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f023 030a 	bic.w	r3, r3, #10
 800849c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f003 030a 	and.w	r3, r3, #10
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40000400 	.word	0x40000400
 80084cc:	40000800 	.word	0x40000800
 80084d0:	40000c00 	.word	0x40000c00
 80084d4:	40010400 	.word	0x40010400
 80084d8:	40014000 	.word	0x40014000
 80084dc:	40001800 	.word	0x40001800

080084e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	f023 0201 	bic.w	r2, r3, #1
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800850a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 030a 	bic.w	r3, r3, #10
 800851c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	f023 0210 	bic.w	r2, r3, #16
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800856a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800857c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	031b      	lsls	r3, r3, #12
 8008582:	b29b      	uxth	r3, r3
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	4313      	orrs	r3, r2
 800859e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	621a      	str	r2, [r3, #32]
}
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f023 0210 	bic.w	r2, r3, #16
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	031b      	lsls	r3, r3, #12
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	621a      	str	r2, [r3, #32]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	b2db      	uxtb	r3, r3
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008668:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	621a      	str	r2, [r3, #32]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	031b      	lsls	r3, r3, #12
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80086e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	031b      	lsls	r3, r3, #12
 80086e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	f043 0307 	orr.w	r3, r3, #7
 800872c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	609a      	str	r2, [r3, #8]
}
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800875a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	021a      	lsls	r2, r3, #8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	431a      	orrs	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4313      	orrs	r3, r2
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	609a      	str	r2, [r3, #8]
}
 8008774:	bf00      	nop
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	2201      	movs	r2, #1
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	401a      	ands	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1a      	ldr	r2, [r3, #32]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	fa01 f303 	lsl.w	r3, r1, r3
 80087b8:	431a      	orrs	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	bf00      	nop
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
	...

080087cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087e0:	2302      	movs	r3, #2
 80087e2:	e05a      	b.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a21      	ldr	r2, [pc, #132]	; (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d022      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008830:	d01d      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d018      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00e      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a18      	ldr	r2, [pc, #96]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d009      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a17      	ldr	r2, [pc, #92]	; (80088bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d004      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a15      	ldr	r2, [pc, #84]	; (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d10c      	bne.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	4313      	orrs	r3, r2
 800887e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40000400 	.word	0x40000400
 80088b0:	40000800 	.word	0x40000800
 80088b4:	40000c00 	.word	0x40000c00
 80088b8:	40010400 	.word	0x40010400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40001800 	.word	0x40001800

080088c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088dc:	2302      	movs	r3, #2
 80088de:	e03d      	b.n	800895c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008990:	b084      	sub	sp, #16
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	f107 001c 	add.w	r0, r7, #28
 800899e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d122      	bne.n	80089ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d105      	bne.n	80089e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f001 fab4 	bl	8009f50 <USB_CoreReset>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]
 80089ec:	e01a      	b.n	8008a24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 faa8 	bl	8009f50 <USB_CoreReset>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
 8008a16:	e005      	b.n	8008a24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d10b      	bne.n	8008a42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f043 0206 	orr.w	r2, r3, #6
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f043 0220 	orr.w	r2, r3, #32
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a4e:	b004      	add	sp, #16
 8008a50:	4770      	bx	lr
	...

08008a54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d165      	bne.n	8008b34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4a41      	ldr	r2, [pc, #260]	; (8008b70 <USB_SetTurnaroundTime+0x11c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d906      	bls.n	8008a7e <USB_SetTurnaroundTime+0x2a>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4a40      	ldr	r2, [pc, #256]	; (8008b74 <USB_SetTurnaroundTime+0x120>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d802      	bhi.n	8008a7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008a78:	230f      	movs	r3, #15
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	e062      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4a3c      	ldr	r2, [pc, #240]	; (8008b74 <USB_SetTurnaroundTime+0x120>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d906      	bls.n	8008a94 <USB_SetTurnaroundTime+0x40>
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	4a3b      	ldr	r2, [pc, #236]	; (8008b78 <USB_SetTurnaroundTime+0x124>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d802      	bhi.n	8008a94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008a8e:	230e      	movs	r3, #14
 8008a90:	617b      	str	r3, [r7, #20]
 8008a92:	e057      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a38      	ldr	r2, [pc, #224]	; (8008b78 <USB_SetTurnaroundTime+0x124>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d906      	bls.n	8008aaa <USB_SetTurnaroundTime+0x56>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4a37      	ldr	r2, [pc, #220]	; (8008b7c <USB_SetTurnaroundTime+0x128>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d802      	bhi.n	8008aaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008aa4:	230d      	movs	r3, #13
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	e04c      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4a33      	ldr	r2, [pc, #204]	; (8008b7c <USB_SetTurnaroundTime+0x128>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d906      	bls.n	8008ac0 <USB_SetTurnaroundTime+0x6c>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4a32      	ldr	r2, [pc, #200]	; (8008b80 <USB_SetTurnaroundTime+0x12c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d802      	bhi.n	8008ac0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008aba:	230c      	movs	r3, #12
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e041      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4a2f      	ldr	r2, [pc, #188]	; (8008b80 <USB_SetTurnaroundTime+0x12c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d906      	bls.n	8008ad6 <USB_SetTurnaroundTime+0x82>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4a2e      	ldr	r2, [pc, #184]	; (8008b84 <USB_SetTurnaroundTime+0x130>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d802      	bhi.n	8008ad6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008ad0:	230b      	movs	r3, #11
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e036      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a2a      	ldr	r2, [pc, #168]	; (8008b84 <USB_SetTurnaroundTime+0x130>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d906      	bls.n	8008aec <USB_SetTurnaroundTime+0x98>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	4a29      	ldr	r2, [pc, #164]	; (8008b88 <USB_SetTurnaroundTime+0x134>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d802      	bhi.n	8008aec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ae6:	230a      	movs	r3, #10
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e02b      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a26      	ldr	r2, [pc, #152]	; (8008b88 <USB_SetTurnaroundTime+0x134>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d906      	bls.n	8008b02 <USB_SetTurnaroundTime+0xae>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4a25      	ldr	r2, [pc, #148]	; (8008b8c <USB_SetTurnaroundTime+0x138>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d802      	bhi.n	8008b02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008afc:	2309      	movs	r3, #9
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	e020      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <USB_SetTurnaroundTime+0x138>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d906      	bls.n	8008b18 <USB_SetTurnaroundTime+0xc4>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a20      	ldr	r2, [pc, #128]	; (8008b90 <USB_SetTurnaroundTime+0x13c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d802      	bhi.n	8008b18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b12:	2308      	movs	r3, #8
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	e015      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a1d      	ldr	r2, [pc, #116]	; (8008b90 <USB_SetTurnaroundTime+0x13c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d906      	bls.n	8008b2e <USB_SetTurnaroundTime+0xda>
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4a1c      	ldr	r2, [pc, #112]	; (8008b94 <USB_SetTurnaroundTime+0x140>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d802      	bhi.n	8008b2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b28:	2307      	movs	r3, #7
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e00a      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b2e:	2306      	movs	r3, #6
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	e007      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d102      	bne.n	8008b40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b3a:	2309      	movs	r3, #9
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e001      	b.n	8008b44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b40:	2309      	movs	r3, #9
 8008b42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	68da      	ldr	r2, [r3, #12]
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	029b      	lsls	r3, r3, #10
 8008b58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	371c      	adds	r7, #28
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	00d8acbf 	.word	0x00d8acbf
 8008b74:	00e4e1bf 	.word	0x00e4e1bf
 8008b78:	00f423ff 	.word	0x00f423ff
 8008b7c:	0106737f 	.word	0x0106737f
 8008b80:	011a499f 	.word	0x011a499f
 8008b84:	01312cff 	.word	0x01312cff
 8008b88:	014ca43f 	.word	0x014ca43f
 8008b8c:	016e35ff 	.word	0x016e35ff
 8008b90:	01a6ab1f 	.word	0x01a6ab1f
 8008b94:	01e847ff 	.word	0x01e847ff

08008b98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f043 0201 	orr.w	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f023 0201 	bic.w	r2, r3, #1
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008bf4:	78fb      	ldrb	r3, [r7, #3]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d106      	bne.n	8008c08 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
 8008c06:	e00b      	b.n	8008c20 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d106      	bne.n	8008c1c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	60da      	str	r2, [r3, #12]
 8008c1a:	e001      	b.n	8008c20 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e003      	b.n	8008c28 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c20:	2032      	movs	r0, #50	; 0x32
 8008c22:	f7f9 fa8d 	bl	8002140 <HAL_Delay>

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c30:	b084      	sub	sp, #16
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b086      	sub	sp, #24
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	e009      	b.n	8008c64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	3340      	adds	r3, #64	; 0x40
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	2b0e      	cmp	r3, #14
 8008c68:	d9f2      	bls.n	8008c50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d11c      	bne.n	8008caa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c7e:	f043 0302 	orr.w	r3, r3, #2
 8008c82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8008ca8:	e00b      	b.n	8008cc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cc8:	461a      	mov	r2, r3
 8008cca:	2300      	movs	r3, #0
 8008ccc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cdc:	461a      	mov	r2, r3
 8008cde:	680b      	ldr	r3, [r1, #0]
 8008ce0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d10c      	bne.n	8008d02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d104      	bne.n	8008cf8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008cee:	2100      	movs	r1, #0
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f949 	bl	8008f88 <USB_SetDevSpeed>
 8008cf6:	e008      	b.n	8008d0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f944 	bl	8008f88 <USB_SetDevSpeed>
 8008d00:	e003      	b.n	8008d0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d02:	2103      	movs	r1, #3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f93f 	bl	8008f88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d0a:	2110      	movs	r1, #16
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8f3 	bl	8008ef8 <USB_FlushTxFifo>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f911 	bl	8008f44 <USB_FlushRxFifo>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d32:	461a      	mov	r2, r3
 8008d34:	2300      	movs	r3, #0
 8008d36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	461a      	mov	r2, r3
 8008d40:	2300      	movs	r3, #0
 8008d42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d50:	2300      	movs	r3, #0
 8008d52:	613b      	str	r3, [r7, #16]
 8008d54:	e043      	b.n	8008dde <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d6c:	d118      	bne.n	8008da0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d80:	461a      	mov	r2, r3
 8008d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	e013      	b.n	8008db2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d96:	461a      	mov	r2, r3
 8008d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	e008      	b.n	8008db2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dac:	461a      	mov	r2, r3
 8008dae:	2300      	movs	r3, #0
 8008db0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3b7      	bcc.n	8008d56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
 8008dea:	e043      	b.n	8008e74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e02:	d118      	bne.n	8008e36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10a      	bne.n	8008e20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e16:	461a      	mov	r2, r3
 8008e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e013      	b.n	8008e48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	e008      	b.n	8008e48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	461a      	mov	r2, r3
 8008e44:	2300      	movs	r3, #0
 8008e46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e54:	461a      	mov	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e66:	461a      	mov	r2, r3
 8008e68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	3301      	adds	r3, #1
 8008e72:	613b      	str	r3, [r7, #16]
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d3b7      	bcc.n	8008dec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	f043 0210 	orr.w	r2, r3, #16
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699a      	ldr	r2, [r3, #24]
 8008eb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ef4 <USB_DevInit+0x2c4>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d005      	beq.n	8008ece <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	f043 0208 	orr.w	r2, r3, #8
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008edc:	f043 0304 	orr.w	r3, r3, #4
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ef0:	b004      	add	sp, #16
 8008ef2:	4770      	bx	lr
 8008ef4:	803c3800 	.word	0x803c3800

08008ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	019b      	lsls	r3, r3, #6
 8008f0a:	f043 0220 	orr.w	r2, r3, #32
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <USB_FlushTxFifo+0x48>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d901      	bls.n	8008f24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e006      	b.n	8008f32 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0320 	and.w	r3, r3, #32
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d0f0      	beq.n	8008f12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	00030d40 	.word	0x00030d40

08008f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2210      	movs	r2, #16
 8008f54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <USB_FlushRxFifo+0x40>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d901      	bls.n	8008f68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e006      	b.n	8008f76 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b10      	cmp	r3, #16
 8008f72:	d0f0      	beq.n	8008f56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	00030d40 	.word	0x00030d40

08008f88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	68f9      	ldr	r1, [r7, #12]
 8008fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b087      	sub	sp, #28
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f003 0306 	and.w	r3, r3, #6
 8008fd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	75fb      	strb	r3, [r7, #23]
 8008fde:	e00a      	b.n	8008ff6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d002      	beq.n	8008fec <USB_GetDevSpeed+0x32>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b06      	cmp	r3, #6
 8008fea:	d102      	bne.n	8008ff2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008fec:	2302      	movs	r3, #2
 8008fee:	75fb      	strb	r3, [r7, #23]
 8008ff0:	e001      	b.n	8008ff6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ff2:	230f      	movs	r3, #15
 8008ff4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	371c      	adds	r7, #28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d13a      	bne.n	8009096 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009026:	69da      	ldr	r2, [r3, #28]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	2101      	movs	r1, #1
 8009032:	fa01 f303 	lsl.w	r3, r1, r3
 8009036:	b29b      	uxth	r3, r3
 8009038:	68f9      	ldr	r1, [r7, #12]
 800903a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800903e:	4313      	orrs	r3, r2
 8009040:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d155      	bne.n	8009104 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	78db      	ldrb	r3, [r3, #3]
 8009072:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009074:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	059b      	lsls	r3, r3, #22
 800907a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800907c:	4313      	orrs	r3, r2
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	440a      	add	r2, r1
 8009086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800908a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800908e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	e036      	b.n	8009104 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909c:	69da      	ldr	r2, [r3, #28]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	f003 030f 	and.w	r3, r3, #15
 80090a6:	2101      	movs	r1, #1
 80090a8:	fa01 f303 	lsl.w	r3, r1, r3
 80090ac:	041b      	lsls	r3, r3, #16
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b4:	4313      	orrs	r3, r2
 80090b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d11a      	bne.n	8009104 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	78db      	ldrb	r3, [r3, #3]
 80090e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090ea:	430b      	orrs	r3, r1
 80090ec:	4313      	orrs	r3, r2
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009102:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
	...

08009114 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	785b      	ldrb	r3, [r3, #1]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d161      	bne.n	80091f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009146:	d11f      	bne.n	8009188 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	0151      	lsls	r1, r2, #5
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	440a      	add	r2, r1
 800915e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009162:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009166:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	440a      	add	r2, r1
 800917e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009186:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	2101      	movs	r1, #1
 800919a:	fa01 f303 	lsl.w	r3, r1, r3
 800919e:	b29b      	uxth	r3, r3
 80091a0:	43db      	mvns	r3, r3
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091a8:	4013      	ands	r3, r2
 80091aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	2101      	movs	r1, #1
 80091be:	fa01 f303 	lsl.w	r3, r1, r3
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	43db      	mvns	r3, r3
 80091c6:	68f9      	ldr	r1, [r7, #12]
 80091c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091cc:	4013      	ands	r3, r2
 80091ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	0159      	lsls	r1, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	440b      	add	r3, r1
 80091e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ea:	4619      	mov	r1, r3
 80091ec:	4b35      	ldr	r3, [pc, #212]	; (80092c4 <USB_DeactivateEndpoint+0x1b0>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	600b      	str	r3, [r1, #0]
 80091f2:	e060      	b.n	80092b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800920a:	d11f      	bne.n	800924c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800922a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800924a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	f003 030f 	and.w	r3, r3, #15
 800925c:	2101      	movs	r1, #1
 800925e:	fa01 f303 	lsl.w	r3, r1, r3
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	43db      	mvns	r3, r3
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800926c:	4013      	ands	r3, r2
 800926e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	2101      	movs	r1, #1
 8009282:	fa01 f303 	lsl.w	r3, r1, r3
 8009286:	041b      	lsls	r3, r3, #16
 8009288:	43db      	mvns	r3, r3
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009290:	4013      	ands	r3, r2
 8009292:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	0159      	lsls	r1, r3, #5
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	440b      	add	r3, r1
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	4619      	mov	r1, r3
 80092b0:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <USB_DeactivateEndpoint+0x1b4>)
 80092b2:	4013      	ands	r3, r2
 80092b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	ec337800 	.word	0xec337800
 80092c8:	eff37800 	.word	0xeff37800

080092cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b08a      	sub	sp, #40	; 0x28
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	f040 815c 	bne.w	80095a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d132      	bne.n	800935c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	69ba      	ldr	r2, [r7, #24]
 8009306:	0151      	lsls	r1, r2, #5
 8009308:	69fa      	ldr	r2, [r7, #28]
 800930a:	440a      	add	r2, r1
 800930c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	0151      	lsls	r1, r2, #5
 800932c:	69fa      	ldr	r2, [r7, #28]
 800932e:	440a      	add	r2, r1
 8009330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	0151      	lsls	r1, r2, #5
 800934c:	69fa      	ldr	r2, [r7, #28]
 800934e:	440a      	add	r2, r1
 8009350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009354:	0cdb      	lsrs	r3, r3, #19
 8009356:	04db      	lsls	r3, r3, #19
 8009358:	6113      	str	r3, [r2, #16]
 800935a:	e074      	b.n	8009446 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	440a      	add	r2, r1
 8009372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009376:	0cdb      	lsrs	r3, r3, #19
 8009378:	04db      	lsls	r3, r3, #19
 800937a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	0151      	lsls	r1, r2, #5
 800938e:	69fa      	ldr	r2, [r7, #28]
 8009390:	440a      	add	r2, r1
 8009392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009396:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800939a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800939e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6959      	ldr	r1, [r3, #20]
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	440b      	add	r3, r1
 80093b8:	1e59      	subs	r1, r3, #1
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	fbb1 f3f3 	udiv	r3, r1, r3
 80093c2:	04d9      	lsls	r1, r3, #19
 80093c4:	4b9d      	ldr	r3, [pc, #628]	; (800963c <USB_EPStartXfer+0x370>)
 80093c6:	400b      	ands	r3, r1
 80093c8:	69b9      	ldr	r1, [r7, #24]
 80093ca:	0148      	lsls	r0, r1, #5
 80093cc:	69f9      	ldr	r1, [r7, #28]
 80093ce:	4401      	add	r1, r0
 80093d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093d4:	4313      	orrs	r3, r2
 80093d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e4:	691a      	ldr	r2, [r3, #16]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ee:	69b9      	ldr	r1, [r7, #24]
 80093f0:	0148      	lsls	r0, r1, #5
 80093f2:	69f9      	ldr	r1, [r7, #28]
 80093f4:	4401      	add	r1, r0
 80093f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093fa:	4313      	orrs	r3, r2
 80093fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	78db      	ldrb	r3, [r3, #3]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d11f      	bne.n	8009446 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	015a      	lsls	r2, r3, #5
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	4413      	add	r3, r2
 800940e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	440a      	add	r2, r1
 800941c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009420:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009424:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009444:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d14b      	bne.n	80094e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d009      	beq.n	8009468 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009460:	461a      	mov	r2, r3
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	78db      	ldrb	r3, [r3, #3]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d128      	bne.n	80094c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947c:	2b00      	cmp	r3, #0
 800947e:	d110      	bne.n	80094a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	0151      	lsls	r1, r2, #5
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	440a      	add	r2, r1
 8009496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800949a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	e00f      	b.n	80094c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69ba      	ldr	r2, [r7, #24]
 80094b2:	0151      	lsls	r1, r2, #5
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	440a      	add	r2, r1
 80094b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	69ba      	ldr	r2, [r7, #24]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	e12f      	b.n	8009744 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	0151      	lsls	r1, r2, #5
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	440a      	add	r2, r1
 80094fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009502:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	78db      	ldrb	r3, [r3, #3]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d015      	beq.n	8009538 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 8117 	beq.w	8009744 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	2101      	movs	r1, #1
 8009528:	fa01 f303 	lsl.w	r3, r1, r3
 800952c:	69f9      	ldr	r1, [r7, #28]
 800952e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009532:	4313      	orrs	r3, r2
 8009534:	634b      	str	r3, [r1, #52]	; 0x34
 8009536:	e105      	b.n	8009744 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009544:	2b00      	cmp	r3, #0
 8009546:	d110      	bne.n	800956a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	4413      	add	r3, r2
 8009550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69ba      	ldr	r2, [r7, #24]
 8009558:	0151      	lsls	r1, r2, #5
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	440a      	add	r2, r1
 800955e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	e00f      	b.n	800958a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	69fa      	ldr	r2, [r7, #28]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009588:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	68d9      	ldr	r1, [r3, #12]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	781a      	ldrb	r2, [r3, #0]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	b298      	uxth	r0, r3
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	4603      	mov	r3, r0
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 fa2b 	bl	80099fa <USB_WritePacket>
 80095a4:	e0ce      	b.n	8009744 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c0:	0cdb      	lsrs	r3, r3, #19
 80095c2:	04db      	lsls	r3, r3, #19
 80095c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	0151      	lsls	r1, r2, #5
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	440a      	add	r2, r1
 80095dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d126      	bne.n	8009640 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fe:	691a      	ldr	r2, [r3, #16]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	0148      	lsls	r0, r1, #5
 800960c:	69f9      	ldr	r1, [r7, #28]
 800960e:	4401      	add	r1, r0
 8009610:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009614:	4313      	orrs	r3, r2
 8009616:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009636:	6113      	str	r3, [r2, #16]
 8009638:	e036      	b.n	80096a8 <USB_EPStartXfer+0x3dc>
 800963a:	bf00      	nop
 800963c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	4413      	add	r3, r2
 800964a:	1e5a      	subs	r2, r3, #1
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	fbb2 f3f3 	udiv	r3, r2, r3
 8009654:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	8afb      	ldrh	r3, [r7, #22]
 8009666:	04d9      	lsls	r1, r3, #19
 8009668:	4b39      	ldr	r3, [pc, #228]	; (8009750 <USB_EPStartXfer+0x484>)
 800966a:	400b      	ands	r3, r1
 800966c:	69b9      	ldr	r1, [r7, #24]
 800966e:	0148      	lsls	r0, r1, #5
 8009670:	69f9      	ldr	r1, [r7, #28]
 8009672:	4401      	add	r1, r0
 8009674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009678:	4313      	orrs	r3, r2
 800967a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009688:	691a      	ldr	r2, [r3, #16]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	8af9      	ldrh	r1, [r7, #22]
 8009690:	fb01 f303 	mul.w	r3, r1, r3
 8009694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009698:	69b9      	ldr	r1, [r7, #24]
 800969a:	0148      	lsls	r0, r1, #5
 800969c:	69f9      	ldr	r1, [r7, #28]
 800969e:	4401      	add	r1, r0
 80096a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096a4:	4313      	orrs	r3, r2
 80096a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d10d      	bne.n	80096ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d009      	beq.n	80096ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	68d9      	ldr	r1, [r3, #12]
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	015a      	lsls	r2, r3, #5
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	4413      	add	r3, r2
 80096c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c6:	460a      	mov	r2, r1
 80096c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	78db      	ldrb	r3, [r3, #3]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d128      	bne.n	8009724 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d110      	bne.n	8009704 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	015a      	lsls	r2, r3, #5
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	0151      	lsls	r1, r2, #5
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	440a      	add	r2, r1
 80096f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	e00f      	b.n	8009724 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	440a      	add	r2, r1
 800971a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800971e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009722:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69ba      	ldr	r2, [r7, #24]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	69fa      	ldr	r2, [r7, #28]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800973e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3720      	adds	r7, #32
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	1ff80000 	.word	0x1ff80000

08009754 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b01      	cmp	r3, #1
 8009772:	f040 80cd 	bne.w	8009910 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d132      	bne.n	80097e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	0151      	lsls	r1, r2, #5
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	440a      	add	r2, r1
 8009794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009798:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800979c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	0151      	lsls	r1, r2, #5
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	440a      	add	r2, r1
 80097b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	0151      	lsls	r1, r2, #5
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	440a      	add	r2, r1
 80097d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097dc:	0cdb      	lsrs	r3, r3, #19
 80097de:	04db      	lsls	r3, r3, #19
 80097e0:	6113      	str	r3, [r2, #16]
 80097e2:	e04e      	b.n	8009882 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097fe:	0cdb      	lsrs	r3, r3, #19
 8009800:	04db      	lsls	r3, r3, #19
 8009802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	693a      	ldr	r2, [r7, #16]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	440a      	add	r2, r1
 800981a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800981e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009822:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009826:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	695a      	ldr	r2, [r3, #20]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800985a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009868:	691a      	ldr	r2, [r3, #16]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009872:	6939      	ldr	r1, [r7, #16]
 8009874:	0148      	lsls	r0, r1, #5
 8009876:	6979      	ldr	r1, [r7, #20]
 8009878:	4401      	add	r1, r0
 800987a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800987e:	4313      	orrs	r3, r2
 8009880:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d11e      	bne.n	80098c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989c:	461a      	mov	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	e092      	b.n	80099ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d07e      	beq.n	80099ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	f003 030f 	and.w	r3, r3, #15
 80098fe:	2101      	movs	r1, #1
 8009900:	fa01 f303 	lsl.w	r3, r1, r3
 8009904:	6979      	ldr	r1, [r7, #20]
 8009906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800990a:	4313      	orrs	r3, r2
 800990c:	634b      	str	r3, [r1, #52]	; 0x34
 800990e:	e06d      	b.n	80099ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800992a:	0cdb      	lsrs	r3, r3, #19
 800992c:	04db      	lsls	r3, r3, #19
 800992e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	0151      	lsls	r1, r2, #5
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	440a      	add	r2, r1
 8009946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800994a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800994e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009952:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	689a      	ldr	r2, [r3, #8]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	0151      	lsls	r1, r2, #5
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	440a      	add	r2, r1
 800997a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009982:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800999a:	6939      	ldr	r1, [r7, #16]
 800999c:	0148      	lsls	r0, r1, #5
 800999e:	6979      	ldr	r1, [r7, #20]
 80099a0:	4401      	add	r1, r0
 80099a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099a6:	4313      	orrs	r3, r2
 80099a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80099aa:	79fb      	ldrb	r3, [r7, #7]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10d      	bne.n	80099cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d009      	beq.n	80099cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	68d9      	ldr	r1, [r3, #12]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c8:	460a      	mov	r2, r1
 80099ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	0151      	lsls	r1, r2, #5
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	440a      	add	r2, r1
 80099e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b089      	sub	sp, #36	; 0x24
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	4611      	mov	r1, r2
 8009a06:	461a      	mov	r2, r3
 8009a08:	460b      	mov	r3, r1
 8009a0a:	71fb      	strb	r3, [r7, #7]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009a18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d11a      	bne.n	8009a56 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a20:	88bb      	ldrh	r3, [r7, #4]
 8009a22:	3303      	adds	r3, #3
 8009a24:	089b      	lsrs	r3, r3, #2
 8009a26:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61bb      	str	r3, [r7, #24]
 8009a2c:	e00f      	b.n	8009a4e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	031a      	lsls	r2, r3, #12
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	3304      	adds	r3, #4
 8009a46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	61bb      	str	r3, [r7, #24]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d3eb      	bcc.n	8009a2e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3724      	adds	r7, #36	; 0x24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b089      	sub	sp, #36	; 0x24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009a7a:	88fb      	ldrh	r3, [r7, #6]
 8009a7c:	3303      	adds	r3, #3
 8009a7e:	089b      	lsrs	r3, r3, #2
 8009a80:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009a82:	2300      	movs	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
 8009a86:	e00b      	b.n	8009aa0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	3304      	adds	r3, #4
 8009a98:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d3ef      	bcc.n	8009a88 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009aa8:	69fb      	ldr	r3, [r7, #28]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3724      	adds	r7, #36	; 0x24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d12c      	bne.n	8009b2c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	db12      	blt.n	8009b0a <USB_EPSetStall+0x54>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00f      	beq.n	8009b0a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	0151      	lsls	r1, r2, #5
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	440a      	add	r2, r1
 8009b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b08:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	0151      	lsls	r1, r2, #5
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	440a      	add	r2, r1
 8009b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	e02b      	b.n	8009b84 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	db12      	blt.n	8009b64 <USB_EPSetStall+0xae>
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d00f      	beq.n	8009b64 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b62:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	015a      	lsls	r2, r3, #5
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	0151      	lsls	r1, r2, #5
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	440a      	add	r2, r1
 8009b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b92:	b480      	push	{r7}
 8009b94:	b085      	sub	sp, #20
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
 8009b9a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d128      	bne.n	8009c00 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	78db      	ldrb	r3, [r3, #3]
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d003      	beq.n	8009bde <USB_EPClearStall+0x4c>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	78db      	ldrb	r3, [r3, #3]
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d138      	bne.n	8009c50 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	0151      	lsls	r1, r2, #5
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	e027      	b.n	8009c50 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	78db      	ldrb	r3, [r3, #3]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d003      	beq.n	8009c30 <USB_EPClearStall+0x9e>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	78db      	ldrb	r3, [r3, #3]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d10f      	bne.n	8009c50 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c4e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3714      	adds	r7, #20
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b085      	sub	sp, #20
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	460b      	mov	r3, r1
 8009c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c80:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	78fb      	ldrb	r3, [r7, #3]
 8009c8c:	011b      	lsls	r3, r3, #4
 8009c8e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c92:	68f9      	ldr	r1, [r7, #12]
 8009c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cc4:	f023 0302 	bic.w	r3, r3, #2
 8009cc8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009cca:	2003      	movs	r0, #3
 8009ccc:	f7f8 fa38 	bl	8002140 <HAL_Delay>

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf4:	f043 0302 	orr.w	r3, r3, #2
 8009cf8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009cfa:	2003      	movs	r0, #3
 8009cfc:	f7f8 fa20 	bl	8002140 <HAL_Delay>

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4013      	ands	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d22:	68fb      	ldr	r3, [r7, #12]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	4013      	ands	r3, r2
 8009d52:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	0c1b      	lsrs	r3, r3, #16
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	4013      	ands	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	b29b      	uxth	r3, r3
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3714      	adds	r7, #20
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009df8:	78fb      	ldrb	r3, [r7, #3]
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	fa22 f303 	lsr.w	r3, r2, r3
 8009e04:	01db      	lsls	r3, r3, #7
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	015a      	lsls	r2, r3, #5
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	4413      	add	r3, r2
 8009e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	4013      	ands	r3, r2
 8009e20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e22:	68bb      	ldr	r3, [r7, #8]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e6a:	f023 0307 	bic.w	r3, r3, #7
 8009e6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
	...

08009e94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	333c      	adds	r3, #60	; 0x3c
 8009eaa:	3304      	adds	r3, #4
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	4a26      	ldr	r2, [pc, #152]	; (8009f4c <USB_EP0_OutStart+0xb8>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d90a      	bls.n	8009ece <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ec8:	d101      	bne.n	8009ece <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e037      	b.n	8009f3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009efc:	f043 0318 	orr.w	r3, r3, #24
 8009f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d10f      	bne.n	8009f3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f22:	461a      	mov	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	4f54300a 	.word	0x4f54300a

08009f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <USB_CoreReset+0x64>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d901      	bls.n	8009f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e01b      	b.n	8009fa6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	daf2      	bge.n	8009f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	f043 0201 	orr.w	r2, r3, #1
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <USB_CoreReset+0x64>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d901      	bls.n	8009f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e006      	b.n	8009fa6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d0f0      	beq.n	8009f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	00030d40 	.word	0x00030d40

08009fb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009fc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009fc8:	f002 f8d6 	bl	800c178 <malloc>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d105      	bne.n	8009fe2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e066      	b.n	800a0b0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	7c1b      	ldrb	r3, [r3, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d119      	bne.n	800a026 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	2181      	movs	r1, #129	; 0x81
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 ff43 	bl	800be86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a00a:	2202      	movs	r2, #2
 800a00c:	2101      	movs	r1, #1
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 ff39 	bl	800be86 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2210      	movs	r2, #16
 800a020:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a024:	e016      	b.n	800a054 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a026:	2340      	movs	r3, #64	; 0x40
 800a028:	2202      	movs	r2, #2
 800a02a:	2181      	movs	r1, #129	; 0x81
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 ff2a 	bl	800be86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a038:	2340      	movs	r3, #64	; 0x40
 800a03a:	2202      	movs	r2, #2
 800a03c:	2101      	movs	r1, #1
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 ff21 	bl	800be86 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2210      	movs	r2, #16
 800a050:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a054:	2308      	movs	r3, #8
 800a056:	2203      	movs	r2, #3
 800a058:	2182      	movs	r1, #130	; 0x82
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 ff13 	bl	800be86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7c1b      	ldrb	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d109      	bne.n	800a09e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a090:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a094:	2101      	movs	r1, #1
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f001 ffe4 	bl	800c064 <USBD_LL_PrepareReceive>
 800a09c:	e007      	b.n	800a0ae <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0a4:	2340      	movs	r3, #64	; 0x40
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 ffdb 	bl	800c064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a0c8:	2181      	movs	r1, #129	; 0x81
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 ff01 	bl	800bed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 fefa 	bl	800bed2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a0e6:	2182      	movs	r1, #130	; 0x82
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 fef2 	bl	800bed2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00e      	beq.n	800a126 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a118:	4618      	mov	r0, r3
 800a11a:	f002 f835 	bl	800c188 <free>
    pdev->pClassData = NULL;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800a126:	7bfb      	ldrb	r3, [r7, #15]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a140:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a146:	2300      	movs	r3, #0
 800a148:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a156:	2b00      	cmp	r3, #0
 800a158:	d03a      	beq.n	800a1d0 <USBD_CDC_Setup+0xa0>
 800a15a:	2b20      	cmp	r3, #32
 800a15c:	f040 8097 	bne.w	800a28e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	88db      	ldrh	r3, [r3, #6]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d029      	beq.n	800a1bc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	b25b      	sxtb	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	da11      	bge.n	800a196 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800a17e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	88d2      	ldrh	r2, [r2, #6]
 800a184:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a186:	6939      	ldr	r1, [r7, #16]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	88db      	ldrh	r3, [r3, #6]
 800a18c:	461a      	mov	r2, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 fa6d 	bl	800b66e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800a194:	e082      	b.n	800a29c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	785a      	ldrb	r2, [r3, #1]
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	88db      	ldrh	r3, [r3, #6]
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a1ac:	6939      	ldr	r1, [r7, #16]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	88db      	ldrh	r3, [r3, #6]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 fa86 	bl	800b6c6 <USBD_CtlPrepareRx>
    break;
 800a1ba:	e06f      	b.n	800a29c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1c2:	689b      	ldr	r3, [r3, #8]
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	7850      	ldrb	r0, [r2, #1]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	4798      	blx	r3
    break;
 800a1ce:	e065      	b.n	800a29c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	785b      	ldrb	r3, [r3, #1]
 800a1d4:	2b0b      	cmp	r3, #11
 800a1d6:	d84f      	bhi.n	800a278 <USBD_CDC_Setup+0x148>
 800a1d8:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <USBD_CDC_Setup+0xb0>)
 800a1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1de:	bf00      	nop
 800a1e0:	0800a211 	.word	0x0800a211
 800a1e4:	0800a287 	.word	0x0800a287
 800a1e8:	0800a279 	.word	0x0800a279
 800a1ec:	0800a279 	.word	0x0800a279
 800a1f0:	0800a279 	.word	0x0800a279
 800a1f4:	0800a279 	.word	0x0800a279
 800a1f8:	0800a279 	.word	0x0800a279
 800a1fc:	0800a279 	.word	0x0800a279
 800a200:	0800a279 	.word	0x0800a279
 800a204:	0800a279 	.word	0x0800a279
 800a208:	0800a239 	.word	0x0800a239
 800a20c:	0800a261 	.word	0x0800a261
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a216:	2b03      	cmp	r3, #3
 800a218:	d107      	bne.n	800a22a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a21a:	f107 030c 	add.w	r3, r7, #12
 800a21e:	2202      	movs	r2, #2
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f001 fa23 	bl	800b66e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a228:	e030      	b.n	800a28c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f001 f9ad 	bl	800b58c <USBD_CtlError>
        ret = USBD_FAIL;
 800a232:	2303      	movs	r3, #3
 800a234:	75fb      	strb	r3, [r7, #23]
      break;
 800a236:	e029      	b.n	800a28c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d107      	bne.n	800a252 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a242:	f107 030f 	add.w	r3, r7, #15
 800a246:	2201      	movs	r2, #1
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 fa0f 	bl	800b66e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a250:	e01c      	b.n	800a28c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 f999 	bl	800b58c <USBD_CtlError>
        ret = USBD_FAIL;
 800a25a:	2303      	movs	r3, #3
 800a25c:	75fb      	strb	r3, [r7, #23]
      break;
 800a25e:	e015      	b.n	800a28c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a266:	2b03      	cmp	r3, #3
 800a268:	d00f      	beq.n	800a28a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800a26a:	6839      	ldr	r1, [r7, #0]
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 f98d 	bl	800b58c <USBD_CtlError>
        ret = USBD_FAIL;
 800a272:	2303      	movs	r3, #3
 800a274:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a276:	e008      	b.n	800a28a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 f986 	bl	800b58c <USBD_CtlError>
      ret = USBD_FAIL;
 800a280:	2303      	movs	r3, #3
 800a282:	75fb      	strb	r3, [r7, #23]
      break;
 800a284:	e002      	b.n	800a28c <USBD_CDC_Setup+0x15c>
      break;
 800a286:	bf00      	nop
 800a288:	e008      	b.n	800a29c <USBD_CDC_Setup+0x16c>
      break;
 800a28a:	bf00      	nop
    }
    break;
 800a28c:	e006      	b.n	800a29c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 f97b 	bl	800b58c <USBD_CtlError>
    ret = USBD_FAIL;
 800a296:	2303      	movs	r3, #3
 800a298:	75fb      	strb	r3, [r7, #23]
    break;
 800a29a:	bf00      	nop
  }

  return (uint8_t)ret;
 800a29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop

0800a2a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e049      	b.n	800a35e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a2d2:	78fa      	ldrb	r2, [r7, #3]
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	440b      	add	r3, r1
 800a2e0:	3318      	adds	r3, #24
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d029      	beq.n	800a33c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a2e8:	78fa      	ldrb	r2, [r7, #3]
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	440b      	add	r3, r1
 800a2f6:	3318      	adds	r3, #24
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	78f9      	ldrb	r1, [r7, #3]
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	460b      	mov	r3, r1
 800a300:	00db      	lsls	r3, r3, #3
 800a302:	1a5b      	subs	r3, r3, r1
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4403      	add	r3, r0
 800a308:	3344      	adds	r3, #68	; 0x44
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a310:	fb03 f301 	mul.w	r3, r3, r1
 800a314:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a316:	2b00      	cmp	r3, #0
 800a318:	d110      	bne.n	800a33c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a31a:	78fa      	ldrb	r2, [r7, #3]
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	440b      	add	r3, r1
 800a328:	3318      	adds	r3, #24
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a32e:	78f9      	ldrb	r1, [r7, #3]
 800a330:	2300      	movs	r3, #0
 800a332:	2200      	movs	r2, #0
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f001 fe74 	bl	800c022 <USBD_LL_Transmit>
 800a33a:	e00f      	b.n	800a35c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a358:	78fa      	ldrb	r2, [r7, #3]
 800a35a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	460b      	mov	r3, r1
 800a370:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a378:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	e015      	b.n	800a3b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 fe8a 	bl	800c0a6 <USBD_LL_GetRxDataSize>
 800a392:	4602      	mov	r2, r0
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3ca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d015      	beq.n	800a402 <USBD_CDC_EP0_RxReady+0x46>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a3dc:	2bff      	cmp	r3, #255	; 0xff
 800a3de:	d010      	beq.n	800a402 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a3ee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3f6:	b292      	uxth	r2, r2
 800a3f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	22ff      	movs	r2, #255	; 0xff
 800a3fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2243      	movs	r2, #67	; 0x43
 800a418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a41a:	4b03      	ldr	r3, [pc, #12]	; (800a428 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	2000009c 	.word	0x2000009c

0800a42c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2243      	movs	r2, #67	; 0x43
 800a438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a43a:	4b03      	ldr	r3, [pc, #12]	; (800a448 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	20000058 	.word	0x20000058

0800a44c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2243      	movs	r2, #67	; 0x43
 800a458:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a45a:	4b03      	ldr	r3, [pc, #12]	; (800a468 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	200000e0 	.word	0x200000e0

0800a46c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	220a      	movs	r2, #10
 800a478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a47a:	4b03      	ldr	r3, [pc, #12]	; (800a488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	20000014 	.word	0x20000014

0800a48c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	e004      	b.n	800a4aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b087      	sub	sp, #28
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b085      	sub	sp, #20
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4f8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a51e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e016      	b.n	800a55c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7c1b      	ldrb	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a53c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a540:	2101      	movs	r1, #1
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fd8e 	bl	800c064 <USBD_LL_PrepareReceive>
 800a548:	e007      	b.n	800a55a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a550:	2340      	movs	r3, #64	; 0x40
 800a552:	2101      	movs	r1, #1
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 fd85 	bl	800c064 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	4613      	mov	r3, r2
 800a570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a578:	2303      	movs	r3, #3
 800a57a:	e025      	b.n	800a5c8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a594:	2b00      	cmp	r3, #0
 800a596:	d003      	beq.n	800a5a0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	79fa      	ldrb	r2, [r7, #7]
 800a5ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f001 fbfb 	bl	800bdb8 <USBD_LL_Init>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3718      	adds	r7, #24
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e010      	b.n	800a60a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f8:	f107 020e 	add.w	r2, r7, #14
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	4798      	blx	r3
 800a600:	4602      	mov	r2, r0
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 fc18 	bl	800be50 <USBD_LL_Start>
 800a620:	4603      	mov	r3, r0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b083      	sub	sp, #12
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	460b      	mov	r3, r1
 800a64a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a64c:	2303      	movs	r3, #3
 800a64e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a656:	2b00      	cmp	r3, #0
 800a658:	d009      	beq.n	800a66e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	78fa      	ldrb	r2, [r7, #3]
 800a664:	4611      	mov	r1, r2
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	4798      	blx	r3
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d007      	beq.n	800a69e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	78fa      	ldrb	r2, [r7, #3]
 800a698:	4611      	mov	r1, r2
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	4798      	blx	r3
  }

  return USBD_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 ff2c 	bl	800b518 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6dc:	f003 031f 	and.w	r3, r3, #31
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d00e      	beq.n	800a702 <USBD_LL_SetupStage+0x5a>
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d302      	bcc.n	800a6ee <USBD_LL_SetupStage+0x46>
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d014      	beq.n	800a716 <USBD_LL_SetupStage+0x6e>
 800a6ec:	e01d      	b.n	800a72a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa18 	bl	800ab2c <USBD_StdDevReq>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a700:	e020      	b.n	800a744 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a708:	4619      	mov	r1, r3
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fa7c 	bl	800ac08 <USBD_StdItfReq>
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]
      break;
 800a714:	e016      	b.n	800a744 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a71c:	4619      	mov	r1, r3
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fab8 	bl	800ac94 <USBD_StdEPReq>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]
      break;
 800a728:	e00c      	b.n	800a744 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a734:	b2db      	uxtb	r3, r3
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 fbe9 	bl	800bf10 <USBD_LL_StallEP>
 800a73e:	4603      	mov	r3, r0
 800a740:	73fb      	strb	r3, [r7, #15]
      break;
 800a742:	bf00      	nop
  }

  return ret;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	460b      	mov	r3, r1
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d137      	bne.n	800a7d2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a768:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a770:	2b03      	cmp	r3, #3
 800a772:	d14a      	bne.n	800a80a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	689a      	ldr	r2, [r3, #8]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d913      	bls.n	800a7a8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	689a      	ldr	r2, [r3, #8]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	1ad2      	subs	r2, r2, r3
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	68da      	ldr	r2, [r3, #12]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	4293      	cmp	r3, r2
 800a798:	bf28      	it	cs
 800a79a:	4613      	movcs	r3, r2
 800a79c:	461a      	mov	r2, r3
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 ffad 	bl	800b700 <USBD_CtlContinueRx>
 800a7a6:	e030      	b.n	800a80a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d105      	bne.n	800a7ca <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 ffa9 	bl	800b722 <USBD_CtlSendStatus>
 800a7d0:	e01b      	b.n	800a80a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d013      	beq.n	800a806 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d10e      	bne.n	800a806 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ee:	699b      	ldr	r3, [r3, #24]
 800a7f0:	7afa      	ldrb	r2, [r7, #11]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	4798      	blx	r3
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	e002      	b.n	800a80c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a806:	2303      	movs	r3, #3
 800a808:	e000      	b.n	800a80c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	460b      	mov	r3, r1
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a822:	7afb      	ldrb	r3, [r7, #11]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d16a      	bne.n	800a8fe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	3314      	adds	r3, #20
 800a82c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a834:	2b02      	cmp	r3, #2
 800a836:	d155      	bne.n	800a8e4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	689a      	ldr	r2, [r3, #8]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	429a      	cmp	r2, r3
 800a842:	d914      	bls.n	800a86e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	1ad2      	subs	r2, r2, r3
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	461a      	mov	r2, r3
 800a858:	6879      	ldr	r1, [r7, #4]
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 ff22 	bl	800b6a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a860:	2300      	movs	r3, #0
 800a862:	2200      	movs	r2, #0
 800a864:	2100      	movs	r1, #0
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f001 fbfc 	bl	800c064 <USBD_LL_PrepareReceive>
 800a86c:	e03a      	b.n	800a8e4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	429a      	cmp	r2, r3
 800a878:	d11c      	bne.n	800a8b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a882:	429a      	cmp	r2, r3
 800a884:	d316      	bcc.n	800a8b4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a890:	429a      	cmp	r2, r3
 800a892:	d20f      	bcs.n	800a8b4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a894:	2200      	movs	r2, #0
 800a896:	2100      	movs	r1, #0
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 ff03 	bl	800b6a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f001 fbd9 	bl	800c064 <USBD_LL_PrepareReceive>
 800a8b2:	e017      	b.n	800a8e4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d105      	bne.n	800a8d6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8d6:	2180      	movs	r1, #128	; 0x80
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f001 fb19 	bl	800bf10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 ff32 	bl	800b748 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8ea:	2b01      	cmp	r3, #1
 800a8ec:	d123      	bne.n	800a936 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f7ff fe9b 	bl	800a62a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a8fc:	e01b      	b.n	800a936 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d013      	beq.n	800a932 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a910:	2b03      	cmp	r3, #3
 800a912:	d10e      	bne.n	800a932 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	7afa      	ldrb	r2, [r7, #11]
 800a91e:	4611      	mov	r1, r2
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	4798      	blx	r3
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	e002      	b.n	800a938 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a932:	2303      	movs	r3, #3
 800a934:	e000      	b.n	800a938 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d009      	beq.n	800a984 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	6852      	ldr	r2, [r2, #4]
 800a97c:	b2d2      	uxtb	r2, r2
 800a97e:	4611      	mov	r1, r2
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a984:	2340      	movs	r3, #64	; 0x40
 800a986:	2200      	movs	r2, #0
 800a988:	2100      	movs	r1, #0
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 fa7b 	bl	800be86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2240      	movs	r2, #64	; 0x40
 800a99c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9a0:	2340      	movs	r3, #64	; 0x40
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2180      	movs	r1, #128	; 0x80
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f001 fa6d 	bl	800be86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2240      	movs	r2, #64	; 0x40
 800a9b6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b083      	sub	sp, #12
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	78fa      	ldrb	r2, [r7, #3]
 800a9d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b083      	sub	sp, #12
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2204      	movs	r2, #4
 800a9fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d105      	bne.n	800aa2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d10b      	bne.n	800aa62 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d005      	beq.n	800aa62 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b082      	sub	sp, #8
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d009      	beq.n	800aae4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6852      	ldr	r2, [r2, #4]
 800aadc:	b2d2      	uxtb	r2, r2
 800aade:	4611      	mov	r1, r2
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	4798      	blx	r3
  }

  return USBD_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}

0800aaee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aaee:	b480      	push	{r7}
 800aaf0:	b087      	sub	sp, #28
 800aaf2:	af00      	add	r7, sp, #0
 800aaf4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	3301      	adds	r3, #1
 800ab04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab0c:	8a3b      	ldrh	r3, [r7, #16]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	b21a      	sxth	r2, r3
 800ab12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	b21b      	sxth	r3, r3
 800ab1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab1c:	89fb      	ldrh	r3, [r7, #14]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	371c      	adds	r7, #28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
	...

0800ab2c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab36:	2300      	movs	r3, #0
 800ab38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab42:	2b20      	cmp	r3, #32
 800ab44:	d004      	beq.n	800ab50 <USBD_StdDevReq+0x24>
 800ab46:	2b40      	cmp	r3, #64	; 0x40
 800ab48:	d002      	beq.n	800ab50 <USBD_StdDevReq+0x24>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <USBD_StdDevReq+0x38>
 800ab4e:	e050      	b.n	800abf2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73fb      	strb	r3, [r7, #15]
    break;
 800ab62:	e04b      	b.n	800abfc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	785b      	ldrb	r3, [r3, #1]
 800ab68:	2b09      	cmp	r3, #9
 800ab6a:	d83c      	bhi.n	800abe6 <USBD_StdDevReq+0xba>
 800ab6c:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <USBD_StdDevReq+0x48>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800abc9 	.word	0x0800abc9
 800ab78:	0800abdd 	.word	0x0800abdd
 800ab7c:	0800abe7 	.word	0x0800abe7
 800ab80:	0800abd3 	.word	0x0800abd3
 800ab84:	0800abe7 	.word	0x0800abe7
 800ab88:	0800aba7 	.word	0x0800aba7
 800ab8c:	0800ab9d 	.word	0x0800ab9d
 800ab90:	0800abe7 	.word	0x0800abe7
 800ab94:	0800abbf 	.word	0x0800abbf
 800ab98:	0800abb1 	.word	0x0800abb1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f9ce 	bl	800af40 <USBD_GetDescriptor>
      break;
 800aba4:	e024      	b.n	800abf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fb33 	bl	800b214 <USBD_SetAddress>
      break;
 800abae:	e01f      	b.n	800abf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fb70 	bl	800b298 <USBD_SetConfig>
 800abb8:	4603      	mov	r3, r0
 800abba:	73fb      	strb	r3, [r7, #15]
      break;
 800abbc:	e018      	b.n	800abf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fc0d 	bl	800b3e0 <USBD_GetConfig>
      break;
 800abc6:	e013      	b.n	800abf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fc3c 	bl	800b448 <USBD_GetStatus>
      break;
 800abd0:	e00e      	b.n	800abf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800abd2:	6839      	ldr	r1, [r7, #0]
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc6a 	bl	800b4ae <USBD_SetFeature>
      break;
 800abda:	e009      	b.n	800abf0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fc79 	bl	800b4d6 <USBD_ClrFeature>
      break;
 800abe4:	e004      	b.n	800abf0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800abe6:	6839      	ldr	r1, [r7, #0]
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fccf 	bl	800b58c <USBD_CtlError>
      break;
 800abee:	bf00      	nop
    }
    break;
 800abf0:	e004      	b.n	800abfc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fcc9 	bl	800b58c <USBD_CtlError>
    break;
 800abfa:	bf00      	nop
  }

  return ret;
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop

0800ac08 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d003      	beq.n	800ac2a <USBD_StdItfReq+0x22>
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	d001      	beq.n	800ac2a <USBD_StdItfReq+0x22>
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d12a      	bne.n	800ac80 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac30:	3b01      	subs	r3, #1
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d81d      	bhi.n	800ac72 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	889b      	ldrh	r3, [r3, #4]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d813      	bhi.n	800ac68 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	4798      	blx	r3
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	88db      	ldrh	r3, [r3, #6]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d110      	bne.n	800ac7c <USBD_StdItfReq+0x74>
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10d      	bne.n	800ac7c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fd5e 	bl	800b722 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ac66:	e009      	b.n	800ac7c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fc8e 	bl	800b58c <USBD_CtlError>
      break;
 800ac70:	e004      	b.n	800ac7c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fc89 	bl	800b58c <USBD_CtlError>
      break;
 800ac7a:	e000      	b.n	800ac7e <USBD_StdItfReq+0x76>
      break;
 800ac7c:	bf00      	nop
    }
    break;
 800ac7e:	e004      	b.n	800ac8a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fc82 	bl	800b58c <USBD_CtlError>
    break;
 800ac88:	bf00      	nop
  }

  return ret;
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	889b      	ldrh	r3, [r3, #4]
 800aca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acb0:	2b20      	cmp	r3, #32
 800acb2:	d004      	beq.n	800acbe <USBD_StdEPReq+0x2a>
 800acb4:	2b40      	cmp	r3, #64	; 0x40
 800acb6:	d002      	beq.n	800acbe <USBD_StdEPReq+0x2a>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00a      	beq.n	800acd2 <USBD_StdEPReq+0x3e>
 800acbc:	e135      	b.n	800af2a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	4798      	blx	r3
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]
    break;
 800acd0:	e130      	b.n	800af34 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	785b      	ldrb	r3, [r3, #1]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d03e      	beq.n	800ad58 <USBD_StdEPReq+0xc4>
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d002      	beq.n	800ace4 <USBD_StdEPReq+0x50>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d077      	beq.n	800add2 <USBD_StdEPReq+0x13e>
 800ace2:	e11c      	b.n	800af1e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acea:	2b02      	cmp	r3, #2
 800acec:	d002      	beq.n	800acf4 <USBD_StdEPReq+0x60>
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d015      	beq.n	800ad1e <USBD_StdEPReq+0x8a>
 800acf2:	e02b      	b.n	800ad4c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00c      	beq.n	800ad14 <USBD_StdEPReq+0x80>
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
 800acfc:	2b80      	cmp	r3, #128	; 0x80
 800acfe:	d009      	beq.n	800ad14 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 f903 	bl	800bf10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad0a:	2180      	movs	r1, #128	; 0x80
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f001 f8ff 	bl	800bf10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ad12:	e020      	b.n	800ad56 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fc38 	bl	800b58c <USBD_CtlError>
        break;
 800ad1c:	e01b      	b.n	800ad56 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	885b      	ldrh	r3, [r3, #2]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10e      	bne.n	800ad44 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <USBD_StdEPReq+0xb0>
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	2b80      	cmp	r3, #128	; 0x80
 800ad30:	d008      	beq.n	800ad44 <USBD_StdEPReq+0xb0>
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	88db      	ldrh	r3, [r3, #6]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d104      	bne.n	800ad44 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f8e6 	bl	800bf10 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fcec 	bl	800b722 <USBD_CtlSendStatus>

        break;
 800ad4a:	e004      	b.n	800ad56 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fc1c 	bl	800b58c <USBD_CtlError>
        break;
 800ad54:	bf00      	nop
      }
      break;
 800ad56:	e0e7      	b.n	800af28 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d002      	beq.n	800ad68 <USBD_StdEPReq+0xd4>
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d015      	beq.n	800ad92 <USBD_StdEPReq+0xfe>
 800ad66:	e02d      	b.n	800adc4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00c      	beq.n	800ad88 <USBD_StdEPReq+0xf4>
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	2b80      	cmp	r3, #128	; 0x80
 800ad72:	d009      	beq.n	800ad88 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f001 f8c9 	bl	800bf10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad7e:	2180      	movs	r1, #128	; 0x80
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 f8c5 	bl	800bf10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ad86:	e023      	b.n	800add0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fbfe 	bl	800b58c <USBD_CtlError>
        break;
 800ad90:	e01e      	b.n	800add0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	885b      	ldrh	r3, [r3, #2]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d119      	bne.n	800adce <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
 800ad9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f001 f8d0 	bl	800bf4e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fcb7 	bl	800b722 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	4798      	blx	r3
        }
        break;
 800adc2:	e004      	b.n	800adce <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fbe0 	bl	800b58c <USBD_CtlError>
        break;
 800adcc:	e000      	b.n	800add0 <USBD_StdEPReq+0x13c>
        break;
 800adce:	bf00      	nop
      }
      break;
 800add0:	e0aa      	b.n	800af28 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add8:	2b02      	cmp	r3, #2
 800adda:	d002      	beq.n	800ade2 <USBD_StdEPReq+0x14e>
 800addc:	2b03      	cmp	r3, #3
 800adde:	d032      	beq.n	800ae46 <USBD_StdEPReq+0x1b2>
 800ade0:	e097      	b.n	800af12 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d007      	beq.n	800adf8 <USBD_StdEPReq+0x164>
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	2b80      	cmp	r3, #128	; 0x80
 800adec:	d004      	beq.n	800adf8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fbcb 	bl	800b58c <USBD_CtlError>
          break;
 800adf6:	e091      	b.n	800af1c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	da0b      	bge.n	800ae18 <USBD_StdEPReq+0x184>
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	3310      	adds	r3, #16
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	4413      	add	r3, r2
 800ae14:	3304      	adds	r3, #4
 800ae16:	e00b      	b.n	800ae30 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	3304      	adds	r3, #4
 800ae30:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fc15 	bl	800b66e <USBD_CtlSendData>
        break;
 800ae44:	e06a      	b.n	800af1c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ae46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	da11      	bge.n	800ae72 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	f003 020f 	and.w	r2, r3, #15
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	440b      	add	r3, r1
 800ae60:	3324      	adds	r3, #36	; 0x24
 800ae62:	881b      	ldrh	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d117      	bne.n	800ae98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fb8e 	bl	800b58c <USBD_CtlError>
            break;
 800ae70:	e054      	b.n	800af1c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	f003 020f 	and.w	r2, r3, #15
 800ae78:	6879      	ldr	r1, [r7, #4]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	440b      	add	r3, r1
 800ae84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ae88:	881b      	ldrh	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d104      	bne.n	800ae98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fb7b 	bl	800b58c <USBD_CtlError>
            break;
 800ae96:	e041      	b.n	800af1c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	da0b      	bge.n	800aeb8 <USBD_StdEPReq+0x224>
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	3310      	adds	r3, #16
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	e00b      	b.n	800aed0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aebe:	4613      	mov	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4413      	add	r3, r2
 800aece:	3304      	adds	r3, #4
 800aed0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <USBD_StdEPReq+0x24a>
 800aed8:	7bbb      	ldrb	r3, [r7, #14]
 800aeda:	2b80      	cmp	r3, #128	; 0x80
 800aedc:	d103      	bne.n	800aee6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2200      	movs	r2, #0
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e00e      	b.n	800af04 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 f84e 	bl	800bf8c <USBD_LL_IsStallEP>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2201      	movs	r2, #1
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	e002      	b.n	800af04 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2200      	movs	r2, #0
 800af02:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2202      	movs	r2, #2
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fbaf 	bl	800b66e <USBD_CtlSendData>
          break;
 800af10:	e004      	b.n	800af1c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fb39 	bl	800b58c <USBD_CtlError>
        break;
 800af1a:	bf00      	nop
      }
      break;
 800af1c:	e004      	b.n	800af28 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fb33 	bl	800b58c <USBD_CtlError>
      break;
 800af26:	bf00      	nop
    }
    break;
 800af28:	e004      	b.n	800af34 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 fb2d 	bl	800b58c <USBD_CtlError>
    break;
 800af32:	bf00      	nop
  }

  return ret;
 800af34:	7bfb      	ldrb	r3, [r7, #15]
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
	...

0800af40 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af52:	2300      	movs	r3, #0
 800af54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	885b      	ldrh	r3, [r3, #2]
 800af5a:	0a1b      	lsrs	r3, r3, #8
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	3b01      	subs	r3, #1
 800af60:	2b06      	cmp	r3, #6
 800af62:	f200 8128 	bhi.w	800b1b6 <USBD_GetDescriptor+0x276>
 800af66:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <USBD_GetDescriptor+0x2c>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800af89 	.word	0x0800af89
 800af70:	0800afa1 	.word	0x0800afa1
 800af74:	0800afe1 	.word	0x0800afe1
 800af78:	0800b1b7 	.word	0x0800b1b7
 800af7c:	0800b1b7 	.word	0x0800b1b7
 800af80:	0800b157 	.word	0x0800b157
 800af84:	0800b183 	.word	0x0800b183
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	7c12      	ldrb	r2, [r2, #16]
 800af94:	f107 0108 	add.w	r1, r7, #8
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
 800af9c:	60f8      	str	r0, [r7, #12]
    break;
 800af9e:	e112      	b.n	800b1c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	7c1b      	ldrb	r3, [r3, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10d      	bne.n	800afc4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb0:	f107 0208 	add.w	r2, r7, #8
 800afb4:	4610      	mov	r0, r2
 800afb6:	4798      	blx	r3
 800afb8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	2202      	movs	r2, #2
 800afc0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800afc2:	e100      	b.n	800b1c6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	f107 0208 	add.w	r2, r7, #8
 800afd0:	4610      	mov	r0, r2
 800afd2:	4798      	blx	r3
 800afd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	3301      	adds	r3, #1
 800afda:	2202      	movs	r2, #2
 800afdc:	701a      	strb	r2, [r3, #0]
    break;
 800afde:	e0f2      	b.n	800b1c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	885b      	ldrh	r3, [r3, #2]
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b05      	cmp	r3, #5
 800afe8:	f200 80ac 	bhi.w	800b144 <USBD_GetDescriptor+0x204>
 800afec:	a201      	add	r2, pc, #4	; (adr r2, 800aff4 <USBD_GetDescriptor+0xb4>)
 800afee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff2:	bf00      	nop
 800aff4:	0800b00d 	.word	0x0800b00d
 800aff8:	0800b041 	.word	0x0800b041
 800affc:	0800b075 	.word	0x0800b075
 800b000:	0800b0a9 	.word	0x0800b0a9
 800b004:	0800b0dd 	.word	0x0800b0dd
 800b008:	0800b111 	.word	0x0800b111
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	7c12      	ldrb	r2, [r2, #16]
 800b024:	f107 0108 	add.w	r1, r7, #8
 800b028:	4610      	mov	r0, r2
 800b02a:	4798      	blx	r3
 800b02c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b02e:	e091      	b.n	800b154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 faaa 	bl	800b58c <USBD_CtlError>
        err++;
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	3301      	adds	r3, #1
 800b03c:	72fb      	strb	r3, [r7, #11]
      break;
 800b03e:	e089      	b.n	800b154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00b      	beq.n	800b064 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	7c12      	ldrb	r2, [r2, #16]
 800b058:	f107 0108 	add.w	r1, r7, #8
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
 800b060:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b062:	e077      	b.n	800b154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa90 	bl	800b58c <USBD_CtlError>
        err++;
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	3301      	adds	r3, #1
 800b070:	72fb      	strb	r3, [r7, #11]
      break;
 800b072:	e06f      	b.n	800b154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	7c12      	ldrb	r2, [r2, #16]
 800b08c:	f107 0108 	add.w	r1, r7, #8
 800b090:	4610      	mov	r0, r2
 800b092:	4798      	blx	r3
 800b094:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b096:	e05d      	b.n	800b154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fa76 	bl	800b58c <USBD_CtlError>
        err++;
 800b0a0:	7afb      	ldrb	r3, [r7, #11]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	72fb      	strb	r3, [r7, #11]
      break;
 800b0a6:	e055      	b.n	800b154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00b      	beq.n	800b0cc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	7c12      	ldrb	r2, [r2, #16]
 800b0c0:	f107 0108 	add.w	r1, r7, #8
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4798      	blx	r3
 800b0c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0ca:	e043      	b.n	800b154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fa5c 	bl	800b58c <USBD_CtlError>
        err++;
 800b0d4:	7afb      	ldrb	r3, [r7, #11]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	72fb      	strb	r3, [r7, #11]
      break;
 800b0da:	e03b      	b.n	800b154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	7c12      	ldrb	r2, [r2, #16]
 800b0f4:	f107 0108 	add.w	r1, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0fe:	e029      	b.n	800b154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fa42 	bl	800b58c <USBD_CtlError>
        err++;
 800b108:	7afb      	ldrb	r3, [r7, #11]
 800b10a:	3301      	adds	r3, #1
 800b10c:	72fb      	strb	r3, [r7, #11]
      break;
 800b10e:	e021      	b.n	800b154 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00b      	beq.n	800b134 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	7c12      	ldrb	r2, [r2, #16]
 800b128:	f107 0108 	add.w	r1, r7, #8
 800b12c:	4610      	mov	r0, r2
 800b12e:	4798      	blx	r3
 800b130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b132:	e00f      	b.n	800b154 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fa28 	bl	800b58c <USBD_CtlError>
        err++;
 800b13c:	7afb      	ldrb	r3, [r7, #11]
 800b13e:	3301      	adds	r3, #1
 800b140:	72fb      	strb	r3, [r7, #11]
      break;
 800b142:	e007      	b.n	800b154 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa20 	bl	800b58c <USBD_CtlError>
      err++;
 800b14c:	7afb      	ldrb	r3, [r7, #11]
 800b14e:	3301      	adds	r3, #1
 800b150:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b152:	bf00      	nop
    }
    break;
 800b154:	e037      	b.n	800b1c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	7c1b      	ldrb	r3, [r3, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b166:	f107 0208 	add.w	r2, r7, #8
 800b16a:	4610      	mov	r0, r2
 800b16c:	4798      	blx	r3
 800b16e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b170:	e029      	b.n	800b1c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fa09 	bl	800b58c <USBD_CtlError>
      err++;
 800b17a:	7afb      	ldrb	r3, [r7, #11]
 800b17c:	3301      	adds	r3, #1
 800b17e:	72fb      	strb	r3, [r7, #11]
    break;
 800b180:	e021      	b.n	800b1c6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7c1b      	ldrb	r3, [r3, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10d      	bne.n	800b1a6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	f107 0208 	add.w	r2, r7, #8
 800b196:	4610      	mov	r0, r2
 800b198:	4798      	blx	r3
 800b19a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	2207      	movs	r2, #7
 800b1a2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b1a4:	e00f      	b.n	800b1c6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f9ef 	bl	800b58c <USBD_CtlError>
      err++;
 800b1ae:	7afb      	ldrb	r3, [r7, #11]
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	72fb      	strb	r3, [r7, #11]
    break;
 800b1b4:	e007      	b.n	800b1c6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f9e7 	bl	800b58c <USBD_CtlError>
    err++;
 800b1be:	7afb      	ldrb	r3, [r7, #11]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	72fb      	strb	r3, [r7, #11]
    break;
 800b1c4:	bf00      	nop
  }

  if (err != 0U)
 800b1c6:	7afb      	ldrb	r3, [r7, #11]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d11e      	bne.n	800b20a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	88db      	ldrh	r3, [r3, #6]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d016      	beq.n	800b202 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b1d4:	893b      	ldrh	r3, [r7, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00e      	beq.n	800b1f8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	88da      	ldrh	r2, [r3, #6]
 800b1de:	893b      	ldrh	r3, [r7, #8]
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	bf28      	it	cs
 800b1e4:	4613      	movcs	r3, r2
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1ea:	893b      	ldrh	r3, [r7, #8]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	68f9      	ldr	r1, [r7, #12]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fa3c 	bl	800b66e <USBD_CtlSendData>
 800b1f6:	e009      	b.n	800b20c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f9c6 	bl	800b58c <USBD_CtlError>
 800b200:	e004      	b.n	800b20c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fa8d 	bl	800b722 <USBD_CtlSendStatus>
 800b208:	e000      	b.n	800b20c <USBD_GetDescriptor+0x2cc>
    return;
 800b20a:	bf00      	nop
    }
  }
}
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop

0800b214 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	889b      	ldrh	r3, [r3, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d130      	bne.n	800b288 <USBD_SetAddress+0x74>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	88db      	ldrh	r3, [r3, #6]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d12c      	bne.n	800b288 <USBD_SetAddress+0x74>
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	885b      	ldrh	r3, [r3, #2]
 800b232:	2b7f      	cmp	r3, #127	; 0x7f
 800b234:	d828      	bhi.n	800b288 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	885b      	ldrh	r3, [r3, #2]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b240:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d104      	bne.n	800b256 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f99c 	bl	800b58c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b254:	e01c      	b.n	800b290 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	7bfa      	ldrb	r2, [r7, #15]
 800b25a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 febe 	bl	800bfe4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fa5a 	bl	800b722 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d004      	beq.n	800b27e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2202      	movs	r2, #2
 800b278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b27c:	e008      	b.n	800b290 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b286:	e003      	b.n	800b290 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f97e 	bl	800b58c <USBD_CtlError>
  }
}
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	885b      	ldrh	r3, [r3, #2]
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	4b4b      	ldr	r3, [pc, #300]	; (800b3dc <USBD_SetConfig+0x144>)
 800b2ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2b0:	4b4a      	ldr	r3, [pc, #296]	; (800b3dc <USBD_SetConfig+0x144>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d905      	bls.n	800b2c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f966 	bl	800b58c <USBD_CtlError>
    return USBD_FAIL;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e087      	b.n	800b3d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d002      	beq.n	800b2d4 <USBD_SetConfig+0x3c>
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d025      	beq.n	800b31e <USBD_SetConfig+0x86>
 800b2d2:	e071      	b.n	800b3b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b2d4:	4b41      	ldr	r3, [pc, #260]	; (800b3dc <USBD_SetConfig+0x144>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d01c      	beq.n	800b316 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b2dc:	4b3f      	ldr	r3, [pc, #252]	; (800b3dc <USBD_SetConfig+0x144>)
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2e6:	4b3d      	ldr	r3, [pc, #244]	; (800b3dc <USBD_SetConfig+0x144>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff f9a7 	bl	800a640 <USBD_SetClassConfig>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d004      	beq.n	800b306 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f944 	bl	800b58c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b304:	e065      	b.n	800b3d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fa0b 	bl	800b722 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2203      	movs	r2, #3
 800b310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b314:	e05d      	b.n	800b3d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fa03 	bl	800b722 <USBD_CtlSendStatus>
    break;
 800b31c:	e059      	b.n	800b3d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b31e:	4b2f      	ldr	r3, [pc, #188]	; (800b3dc <USBD_SetConfig+0x144>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d112      	bne.n	800b34c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2202      	movs	r2, #2
 800b32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b32e:	4b2b      	ldr	r3, [pc, #172]	; (800b3dc <USBD_SetConfig+0x144>)
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b338:	4b28      	ldr	r3, [pc, #160]	; (800b3dc <USBD_SetConfig+0x144>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff f99a 	bl	800a678 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f9ec 	bl	800b722 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b34a:	e042      	b.n	800b3d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b34c:	4b23      	ldr	r3, [pc, #140]	; (800b3dc <USBD_SetConfig+0x144>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	461a      	mov	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	429a      	cmp	r2, r3
 800b358:	d02a      	beq.n	800b3b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	4619      	mov	r1, r3
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7ff f988 	bl	800a678 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b368:	4b1c      	ldr	r3, [pc, #112]	; (800b3dc <USBD_SetConfig+0x144>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	461a      	mov	r2, r3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b372:	4b1a      	ldr	r3, [pc, #104]	; (800b3dc <USBD_SetConfig+0x144>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff f961 	bl	800a640 <USBD_SetClassConfig>
 800b37e:	4603      	mov	r3, r0
 800b380:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00f      	beq.n	800b3a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f8fe 	bl	800b58c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7ff f96d 	bl	800a678 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b3a6:	e014      	b.n	800b3d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f9ba 	bl	800b722 <USBD_CtlSendStatus>
    break;
 800b3ae:	e010      	b.n	800b3d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f9b6 	bl	800b722 <USBD_CtlSendStatus>
    break;
 800b3b6:	e00c      	b.n	800b3d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f8e6 	bl	800b58c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3c0:	4b06      	ldr	r3, [pc, #24]	; (800b3dc <USBD_SetConfig+0x144>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7ff f956 	bl	800a678 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d0:	bf00      	nop
  }

  return ret;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20000224 	.word	0x20000224

0800b3e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	88db      	ldrh	r3, [r3, #6]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d004      	beq.n	800b3fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3f2:	6839      	ldr	r1, [r7, #0]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f8c9 	bl	800b58c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b3fa:	e021      	b.n	800b440 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b402:	2b01      	cmp	r3, #1
 800b404:	db17      	blt.n	800b436 <USBD_GetConfig+0x56>
 800b406:	2b02      	cmp	r3, #2
 800b408:	dd02      	ble.n	800b410 <USBD_GetConfig+0x30>
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d00b      	beq.n	800b426 <USBD_GetConfig+0x46>
 800b40e:	e012      	b.n	800b436 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3308      	adds	r3, #8
 800b41a:	2201      	movs	r2, #1
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f925 	bl	800b66e <USBD_CtlSendData>
      break;
 800b424:	e00c      	b.n	800b440 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3304      	adds	r3, #4
 800b42a:	2201      	movs	r2, #1
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f91d 	bl	800b66e <USBD_CtlSendData>
      break;
 800b434:	e004      	b.n	800b440 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f8a7 	bl	800b58c <USBD_CtlError>
      break;
 800b43e:	bf00      	nop
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b458:	3b01      	subs	r3, #1
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d81e      	bhi.n	800b49c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	88db      	ldrh	r3, [r3, #6]
 800b462:	2b02      	cmp	r3, #2
 800b464:	d004      	beq.n	800b470 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f88f 	bl	800b58c <USBD_CtlError>
      break;
 800b46e:	e01a      	b.n	800b4a6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d005      	beq.n	800b48c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f043 0202 	orr.w	r2, r3, #2
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	330c      	adds	r3, #12
 800b490:	2202      	movs	r2, #2
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f8ea 	bl	800b66e <USBD_CtlSendData>
    break;
 800b49a:	e004      	b.n	800b4a6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f874 	bl	800b58c <USBD_CtlError>
    break;
 800b4a4:	bf00      	nop
  }
}
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b082      	sub	sp, #8
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	885b      	ldrh	r3, [r3, #2]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d106      	bne.n	800b4ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f92a 	bl	800b722 <USBD_CtlSendStatus>
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d80b      	bhi.n	800b504 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	885b      	ldrh	r3, [r3, #2]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d10c      	bne.n	800b50e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f910 	bl	800b722 <USBD_CtlSendStatus>
      }
      break;
 800b502:	e004      	b.n	800b50e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f840 	bl	800b58c <USBD_CtlError>
      break;
 800b50c:	e000      	b.n	800b510 <USBD_ClrFeature+0x3a>
      break;
 800b50e:	bf00      	nop
  }
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3301      	adds	r3, #1
 800b532:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	781a      	ldrb	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3301      	adds	r3, #1
 800b540:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7ff fad3 	bl	800aaee <SWAPBYTE>
 800b548:	4603      	mov	r3, r0
 800b54a:	461a      	mov	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	3301      	adds	r3, #1
 800b554:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3301      	adds	r3, #1
 800b55a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b55c:	68f8      	ldr	r0, [r7, #12]
 800b55e:	f7ff fac6 	bl	800aaee <SWAPBYTE>
 800b562:	4603      	mov	r3, r0
 800b564:	461a      	mov	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3301      	adds	r3, #1
 800b56e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	3301      	adds	r3, #1
 800b574:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7ff fab9 	bl	800aaee <SWAPBYTE>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	80da      	strh	r2, [r3, #6]
}
 800b584:	bf00      	nop
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b596:	2180      	movs	r1, #128	; 0x80
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fcb9 	bl	800bf10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b59e:	2100      	movs	r1, #0
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 fcb5 	bl	800bf10 <USBD_LL_StallEP>
}
 800b5a6:	bf00      	nop
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b086      	sub	sp, #24
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d036      	beq.n	800b632 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b5c8:	6938      	ldr	r0, [r7, #16]
 800b5ca:	f000 f836 	bl	800b63a <USBD_GetLen>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	7812      	ldrb	r2, [r2, #0]
 800b5e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	2203      	movs	r2, #3
 800b5f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b5fe:	e013      	b.n	800b628 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b600:	7dfb      	ldrb	r3, [r7, #23]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	4413      	add	r3, r2
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	7812      	ldrb	r2, [r2, #0]
 800b60a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	3301      	adds	r3, #1
 800b610:	613b      	str	r3, [r7, #16]
    idx++;
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	3301      	adds	r3, #1
 800b616:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4413      	add	r3, r2
 800b61e:	2200      	movs	r2, #0
 800b620:	701a      	strb	r2, [r3, #0]
    idx++;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	3301      	adds	r3, #1
 800b626:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1e7      	bne.n	800b600 <USBD_GetString+0x52>
 800b630:	e000      	b.n	800b634 <USBD_GetString+0x86>
    return;
 800b632:	bf00      	nop
  }
}
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b085      	sub	sp, #20
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b64a:	e005      	b.n	800b658 <USBD_GetLen+0x1e>
  {
    len++;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	3301      	adds	r3, #1
 800b650:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	3301      	adds	r3, #1
 800b656:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f5      	bne.n	800b64c <USBD_GetLen+0x12>
  }

  return len;
 800b660:	7bfb      	ldrb	r3, [r7, #15]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	60f8      	str	r0, [r7, #12]
 800b676:	60b9      	str	r1, [r7, #8]
 800b678:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2202      	movs	r2, #2
 800b67e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	2100      	movs	r1, #0
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 fcc4 	bl	800c022 <USBD_LL_Transmit>

  return USBD_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f000 fcb3 	bl	800c022 <USBD_LL_Transmit>

  return USBD_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	60f8      	str	r0, [r7, #12]
 800b6ce:	60b9      	str	r1, [r7, #8]
 800b6d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2203      	movs	r2, #3
 800b6d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f000 fcb7 	bl	800c064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	2100      	movs	r1, #0
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fca6 	bl	800c064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2204      	movs	r2, #4
 800b72e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b732:	2300      	movs	r3, #0
 800b734:	2200      	movs	r2, #0
 800b736:	2100      	movs	r1, #0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fc72 	bl	800c022 <USBD_LL_Transmit>

  return USBD_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2205      	movs	r2, #5
 800b754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b758:	2300      	movs	r3, #0
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fc80 	bl	800c064 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
	...

0800b770 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b774:	2200      	movs	r2, #0
 800b776:	4912      	ldr	r1, [pc, #72]	; (800b7c0 <MX_USB_DEVICE_Init+0x50>)
 800b778:	4812      	ldr	r0, [pc, #72]	; (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b77a:	f7fe fef3 	bl	800a564 <USBD_Init>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b784:	f7f6 f852 	bl	800182c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b788:	490f      	ldr	r1, [pc, #60]	; (800b7c8 <MX_USB_DEVICE_Init+0x58>)
 800b78a:	480e      	ldr	r0, [pc, #56]	; (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b78c:	f7fe ff20 	bl	800a5d0 <USBD_RegisterClass>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b796:	f7f6 f849 	bl	800182c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b79a:	490c      	ldr	r1, [pc, #48]	; (800b7cc <MX_USB_DEVICE_Init+0x5c>)
 800b79c:	4809      	ldr	r0, [pc, #36]	; (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b79e:	f7fe fe75 	bl	800a48c <USBD_CDC_RegisterInterface>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b7a8:	f7f6 f840 	bl	800182c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b7ac:	4805      	ldr	r0, [pc, #20]	; (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b7ae:	f7fe ff30 	bl	800a612 <USBD_Start>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7b8:	f7f6 f838 	bl	800182c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b7bc:	bf00      	nop
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	20000138 	.word	0x20000138
 800b7c4:	200005f8 	.word	0x200005f8
 800b7c8:	20000020 	.word	0x20000020
 800b7cc:	20000124 	.word	0x20000124

0800b7d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4905      	ldr	r1, [pc, #20]	; (800b7ec <CDC_Init_FS+0x1c>)
 800b7d8:	4805      	ldr	r0, [pc, #20]	; (800b7f0 <CDC_Init_FS+0x20>)
 800b7da:	f7fe fe6c 	bl	800a4b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b7de:	4905      	ldr	r1, [pc, #20]	; (800b7f4 <CDC_Init_FS+0x24>)
 800b7e0:	4803      	ldr	r0, [pc, #12]	; (800b7f0 <CDC_Init_FS+0x20>)
 800b7e2:	f7fe fe81 	bl	800a4e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b7e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	200010c8 	.word	0x200010c8
 800b7f0:	200005f8 	.word	0x200005f8
 800b7f4:	200008c8 	.word	0x200008c8

0800b7f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	6039      	str	r1, [r7, #0]
 800b812:	71fb      	strb	r3, [r7, #7]
 800b814:	4613      	mov	r3, r2
 800b816:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	2b23      	cmp	r3, #35	; 0x23
 800b81c:	d84a      	bhi.n	800b8b4 <CDC_Control_FS+0xac>
 800b81e:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <CDC_Control_FS+0x1c>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b8b5 	.word	0x0800b8b5
 800b828:	0800b8b5 	.word	0x0800b8b5
 800b82c:	0800b8b5 	.word	0x0800b8b5
 800b830:	0800b8b5 	.word	0x0800b8b5
 800b834:	0800b8b5 	.word	0x0800b8b5
 800b838:	0800b8b5 	.word	0x0800b8b5
 800b83c:	0800b8b5 	.word	0x0800b8b5
 800b840:	0800b8b5 	.word	0x0800b8b5
 800b844:	0800b8b5 	.word	0x0800b8b5
 800b848:	0800b8b5 	.word	0x0800b8b5
 800b84c:	0800b8b5 	.word	0x0800b8b5
 800b850:	0800b8b5 	.word	0x0800b8b5
 800b854:	0800b8b5 	.word	0x0800b8b5
 800b858:	0800b8b5 	.word	0x0800b8b5
 800b85c:	0800b8b5 	.word	0x0800b8b5
 800b860:	0800b8b5 	.word	0x0800b8b5
 800b864:	0800b8b5 	.word	0x0800b8b5
 800b868:	0800b8b5 	.word	0x0800b8b5
 800b86c:	0800b8b5 	.word	0x0800b8b5
 800b870:	0800b8b5 	.word	0x0800b8b5
 800b874:	0800b8b5 	.word	0x0800b8b5
 800b878:	0800b8b5 	.word	0x0800b8b5
 800b87c:	0800b8b5 	.word	0x0800b8b5
 800b880:	0800b8b5 	.word	0x0800b8b5
 800b884:	0800b8b5 	.word	0x0800b8b5
 800b888:	0800b8b5 	.word	0x0800b8b5
 800b88c:	0800b8b5 	.word	0x0800b8b5
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b8b5 	.word	0x0800b8b5
 800b898:	0800b8b5 	.word	0x0800b8b5
 800b89c:	0800b8b5 	.word	0x0800b8b5
 800b8a0:	0800b8b5 	.word	0x0800b8b5
 800b8a4:	0800b8b5 	.word	0x0800b8b5
 800b8a8:	0800b8b5 	.word	0x0800b8b5
 800b8ac:	0800b8b5 	.word	0x0800b8b5
 800b8b0:	0800b8b5 	.word	0x0800b8b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b8b4:	bf00      	nop
  }

  return (USBD_OK);
 800b8b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	4805      	ldr	r0, [pc, #20]	; (800b8e8 <CDC_Receive_FS+0x24>)
 800b8d2:	f7fe fe09 	bl	800a4e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b8d6:	4804      	ldr	r0, [pc, #16]	; (800b8e8 <CDC_Receive_FS+0x24>)
 800b8d8:	f7fe fe1a 	bl	800a510 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b8dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	200005f8 	.word	0x200005f8

0800b8ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b8fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b902:	4618      	mov	r0, r3
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
	...

0800b910 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	6039      	str	r1, [r7, #0]
 800b91a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	2212      	movs	r2, #18
 800b920:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b922:	4b03      	ldr	r3, [pc, #12]	; (800b930 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	20000154 	.word	0x20000154

0800b934 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2204      	movs	r2, #4
 800b944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b946:	4b03      	ldr	r3, [pc, #12]	; (800b954 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	20000168 	.word	0x20000168

0800b958 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	4603      	mov	r3, r0
 800b960:	6039      	str	r1, [r7, #0]
 800b962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d105      	bne.n	800b976 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	4907      	ldr	r1, [pc, #28]	; (800b98c <USBD_FS_ProductStrDescriptor+0x34>)
 800b96e:	4808      	ldr	r0, [pc, #32]	; (800b990 <USBD_FS_ProductStrDescriptor+0x38>)
 800b970:	f7ff fe1d 	bl	800b5ae <USBD_GetString>
 800b974:	e004      	b.n	800b980 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	4904      	ldr	r1, [pc, #16]	; (800b98c <USBD_FS_ProductStrDescriptor+0x34>)
 800b97a:	4805      	ldr	r0, [pc, #20]	; (800b990 <USBD_FS_ProductStrDescriptor+0x38>)
 800b97c:	f7ff fe17 	bl	800b5ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b980:	4b02      	ldr	r3, [pc, #8]	; (800b98c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	200018c8 	.word	0x200018c8
 800b990:	0800c9ec 	.word	0x0800c9ec

0800b994 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	6039      	str	r1, [r7, #0]
 800b99e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	4904      	ldr	r1, [pc, #16]	; (800b9b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b9a4:	4804      	ldr	r0, [pc, #16]	; (800b9b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b9a6:	f7ff fe02 	bl	800b5ae <USBD_GetString>
  return USBD_StrDesc;
 800b9aa:	4b02      	ldr	r3, [pc, #8]	; (800b9b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	200018c8 	.word	0x200018c8
 800b9b8:	0800ca04 	.word	0x0800ca04

0800b9bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	6039      	str	r1, [r7, #0]
 800b9c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	221a      	movs	r2, #26
 800b9cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9ce:	f000 f843 	bl	800ba58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b9d2:	4b02      	ldr	r3, [pc, #8]	; (800b9dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	2000016c 	.word	0x2000016c

0800b9e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d105      	bne.n	800b9fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	4907      	ldr	r1, [pc, #28]	; (800ba14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9f6:	4808      	ldr	r0, [pc, #32]	; (800ba18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9f8:	f7ff fdd9 	bl	800b5ae <USBD_GetString>
 800b9fc:	e004      	b.n	800ba08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	4904      	ldr	r1, [pc, #16]	; (800ba14 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba02:	4805      	ldr	r0, [pc, #20]	; (800ba18 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba04:	f7ff fdd3 	bl	800b5ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba08:	4b02      	ldr	r3, [pc, #8]	; (800ba14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	200018c8 	.word	0x200018c8
 800ba18:	0800ca18 	.word	0x0800ca18

0800ba1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	6039      	str	r1, [r7, #0]
 800ba26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d105      	bne.n	800ba3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4907      	ldr	r1, [pc, #28]	; (800ba50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba32:	4808      	ldr	r0, [pc, #32]	; (800ba54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba34:	f7ff fdbb 	bl	800b5ae <USBD_GetString>
 800ba38:	e004      	b.n	800ba44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	4904      	ldr	r1, [pc, #16]	; (800ba50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba3e:	4805      	ldr	r0, [pc, #20]	; (800ba54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba40:	f7ff fdb5 	bl	800b5ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba44:	4b02      	ldr	r3, [pc, #8]	; (800ba50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	200018c8 	.word	0x200018c8
 800ba54:	0800ca24 	.word	0x0800ca24

0800ba58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba5e:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <Get_SerialNum+0x44>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba64:	4b0e      	ldr	r3, [pc, #56]	; (800baa0 <Get_SerialNum+0x48>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba6a:	4b0e      	ldr	r3, [pc, #56]	; (800baa4 <Get_SerialNum+0x4c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	4413      	add	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d009      	beq.n	800ba92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba7e:	2208      	movs	r2, #8
 800ba80:	4909      	ldr	r1, [pc, #36]	; (800baa8 <Get_SerialNum+0x50>)
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 f814 	bl	800bab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba88:	2204      	movs	r2, #4
 800ba8a:	4908      	ldr	r1, [pc, #32]	; (800baac <Get_SerialNum+0x54>)
 800ba8c:	68b8      	ldr	r0, [r7, #8]
 800ba8e:	f000 f80f 	bl	800bab0 <IntToUnicode>
  }
}
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	1fff7a10 	.word	0x1fff7a10
 800baa0:	1fff7a14 	.word	0x1fff7a14
 800baa4:	1fff7a18 	.word	0x1fff7a18
 800baa8:	2000016e 	.word	0x2000016e
 800baac:	2000017e 	.word	0x2000017e

0800bab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	4613      	mov	r3, r2
 800babc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bac2:	2300      	movs	r3, #0
 800bac4:	75fb      	strb	r3, [r7, #23]
 800bac6:	e027      	b.n	800bb18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	0f1b      	lsrs	r3, r3, #28
 800bacc:	2b09      	cmp	r3, #9
 800bace:	d80b      	bhi.n	800bae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	0f1b      	lsrs	r3, r3, #28
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
 800bad8:	005b      	lsls	r3, r3, #1
 800bada:	4619      	mov	r1, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	440b      	add	r3, r1
 800bae0:	3230      	adds	r2, #48	; 0x30
 800bae2:	b2d2      	uxtb	r2, r2
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	e00a      	b.n	800bafe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	0f1b      	lsrs	r3, r3, #28
 800baec:	b2da      	uxtb	r2, r3
 800baee:	7dfb      	ldrb	r3, [r7, #23]
 800baf0:	005b      	lsls	r3, r3, #1
 800baf2:	4619      	mov	r1, r3
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	440b      	add	r3, r1
 800baf8:	3237      	adds	r2, #55	; 0x37
 800bafa:	b2d2      	uxtb	r2, r2
 800bafc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb04:	7dfb      	ldrb	r3, [r7, #23]
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	3301      	adds	r3, #1
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	2200      	movs	r2, #0
 800bb10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb12:	7dfb      	ldrb	r3, [r7, #23]
 800bb14:	3301      	adds	r3, #1
 800bb16:	75fb      	strb	r3, [r7, #23]
 800bb18:	7dfa      	ldrb	r2, [r7, #23]
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d3d3      	bcc.n	800bac8 <IntToUnicode+0x18>
  }
}
 800bb20:	bf00      	nop
 800bb22:	371c      	adds	r7, #28
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb34:	f107 0314 	add.w	r3, r7, #20
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	605a      	str	r2, [r3, #4]
 800bb3e:	609a      	str	r2, [r3, #8]
 800bb40:	60da      	str	r2, [r3, #12]
 800bb42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb4c:	d13a      	bne.n	800bbc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb4e:	2300      	movs	r3, #0
 800bb50:	613b      	str	r3, [r7, #16]
 800bb52:	4b1e      	ldr	r3, [pc, #120]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	4a1d      	ldr	r2, [pc, #116]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bb58:	f043 0301 	orr.w	r3, r3, #1
 800bb5c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb5e:	4b1b      	ldr	r3, [pc, #108]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bb60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb62:	f003 0301 	and.w	r3, r3, #1
 800bb66:	613b      	str	r3, [r7, #16]
 800bb68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bb6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb70:	2302      	movs	r3, #2
 800bb72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb74:	2300      	movs	r3, #0
 800bb76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb7c:	230a      	movs	r3, #10
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb80:	f107 0314 	add.w	r3, r7, #20
 800bb84:	4619      	mov	r1, r3
 800bb86:	4812      	ldr	r0, [pc, #72]	; (800bbd0 <HAL_PCD_MspInit+0xa4>)
 800bb88:	f7f6 ffb8 	bl	8002afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb8c:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb90:	4a0e      	ldr	r2, [pc, #56]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bb92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb96:	6353      	str	r3, [r2, #52]	; 0x34
 800bb98:	2300      	movs	r3, #0
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bb9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba0:	4a0a      	ldr	r2, [pc, #40]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bba6:	6453      	str	r3, [r2, #68]	; 0x44
 800bba8:	4b08      	ldr	r3, [pc, #32]	; (800bbcc <HAL_PCD_MspInit+0xa0>)
 800bbaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbb0:	60fb      	str	r3, [r7, #12]
 800bbb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	2043      	movs	r0, #67	; 0x43
 800bbba:	f7f6 fbbe 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bbbe:	2043      	movs	r0, #67	; 0x43
 800bbc0:	f7f6 fbd7 	bl	8002372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bbc4:	bf00      	nop
 800bbc6:	3728      	adds	r7, #40	; 0x28
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	40023800 	.word	0x40023800
 800bbd0:	40020000 	.word	0x40020000

0800bbd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fe fd5c 	bl	800a6a8 <USBD_LL_SetupStage>
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc0a:	78fa      	ldrb	r2, [r7, #3]
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	00db      	lsls	r3, r3, #3
 800bc12:	1a9b      	subs	r3, r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	440b      	add	r3, r1
 800bc18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	78fb      	ldrb	r3, [r7, #3]
 800bc20:	4619      	mov	r1, r3
 800bc22:	f7fe fd94 	bl	800a74e <USBD_LL_DataOutStage>
}
 800bc26:	bf00      	nop
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b082      	sub	sp, #8
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	460b      	mov	r3, r1
 800bc38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc40:	78fa      	ldrb	r2, [r7, #3]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	1a9b      	subs	r3, r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3348      	adds	r3, #72	; 0x48
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	78fb      	ldrb	r3, [r7, #3]
 800bc54:	4619      	mov	r1, r3
 800bc56:	f7fe fddd 	bl	800a814 <USBD_LL_DataInStage>
}
 800bc5a:	bf00      	nop
 800bc5c:	3708      	adds	r7, #8
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fe fee1 	bl	800aa38 <USBD_LL_SOF>
}
 800bc76:	bf00      	nop
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b084      	sub	sp, #16
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc86:	2301      	movs	r3, #1
 800bc88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d102      	bne.n	800bc98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bc92:	2300      	movs	r3, #0
 800bc94:	73fb      	strb	r3, [r7, #15]
 800bc96:	e008      	b.n	800bcaa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d102      	bne.n	800bca6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bca0:	2301      	movs	r3, #1
 800bca2:	73fb      	strb	r3, [r7, #15]
 800bca4:	e001      	b.n	800bcaa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bca6:	f7f5 fdc1 	bl	800182c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcb0:	7bfa      	ldrb	r2, [r7, #15]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fe fe84 	bl	800a9c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fe fe3d 	bl	800a940 <USBD_LL_Reset>
}
 800bcc6:	bf00      	nop
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe fe7f 	bl	800a9e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	6812      	ldr	r2, [r2, #0]
 800bcf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcf6:	f043 0301 	orr.w	r3, r3, #1
 800bcfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d005      	beq.n	800bd10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd04:	4b04      	ldr	r3, [pc, #16]	; (800bd18 <HAL_PCD_SuspendCallback+0x48>)
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	4a03      	ldr	r2, [pc, #12]	; (800bd18 <HAL_PCD_SuspendCallback+0x48>)
 800bd0a:	f043 0306 	orr.w	r3, r3, #6
 800bd0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	e000ed00 	.word	0xe000ed00

0800bd1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe fe6e 	bl	800aa0c <USBD_LL_Resume>
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd4a:	78fa      	ldrb	r2, [r7, #3]
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe fe99 	bl	800aa86 <USBD_LL_IsoOUTIncomplete>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd6e:	78fa      	ldrb	r2, [r7, #3]
 800bd70:	4611      	mov	r1, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fe fe7a 	bl	800aa6c <USBD_LL_IsoINIncomplete>
}
 800bd78:	bf00      	nop
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fe fe86 	bl	800aaa0 <USBD_LL_DevConnected>
}
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe fe83 	bl	800aab6 <USBD_LL_DevDisconnected>
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d13c      	bne.n	800be42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bdc8:	4a20      	ldr	r2, [pc, #128]	; (800be4c <USBD_LL_Init+0x94>)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a1e      	ldr	r2, [pc, #120]	; (800be4c <USBD_LL_Init+0x94>)
 800bdd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bdd8:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <USBD_LL_Init+0x94>)
 800bdda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bdde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bde0:	4b1a      	ldr	r3, [pc, #104]	; (800be4c <USBD_LL_Init+0x94>)
 800bde2:	2204      	movs	r2, #4
 800bde4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bde6:	4b19      	ldr	r3, [pc, #100]	; (800be4c <USBD_LL_Init+0x94>)
 800bde8:	2202      	movs	r2, #2
 800bdea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bdec:	4b17      	ldr	r3, [pc, #92]	; (800be4c <USBD_LL_Init+0x94>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bdf2:	4b16      	ldr	r3, [pc, #88]	; (800be4c <USBD_LL_Init+0x94>)
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bdf8:	4b14      	ldr	r3, [pc, #80]	; (800be4c <USBD_LL_Init+0x94>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bdfe:	4b13      	ldr	r3, [pc, #76]	; (800be4c <USBD_LL_Init+0x94>)
 800be00:	2200      	movs	r2, #0
 800be02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be04:	4b11      	ldr	r3, [pc, #68]	; (800be4c <USBD_LL_Init+0x94>)
 800be06:	2200      	movs	r2, #0
 800be08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be0a:	4b10      	ldr	r3, [pc, #64]	; (800be4c <USBD_LL_Init+0x94>)
 800be0c:	2200      	movs	r2, #0
 800be0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be10:	4b0e      	ldr	r3, [pc, #56]	; (800be4c <USBD_LL_Init+0x94>)
 800be12:	2200      	movs	r2, #0
 800be14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be16:	480d      	ldr	r0, [pc, #52]	; (800be4c <USBD_LL_Init+0x94>)
 800be18:	f7f9 fced 	bl	80057f6 <HAL_PCD_Init>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800be22:	f7f5 fd03 	bl	800182c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be26:	2180      	movs	r1, #128	; 0x80
 800be28:	4808      	ldr	r0, [pc, #32]	; (800be4c <USBD_LL_Init+0x94>)
 800be2a:	f7fa fe4a 	bl	8006ac2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be2e:	2240      	movs	r2, #64	; 0x40
 800be30:	2100      	movs	r1, #0
 800be32:	4806      	ldr	r0, [pc, #24]	; (800be4c <USBD_LL_Init+0x94>)
 800be34:	f7fa fdfe 	bl	8006a34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be38:	2280      	movs	r2, #128	; 0x80
 800be3a:	2101      	movs	r1, #1
 800be3c:	4803      	ldr	r0, [pc, #12]	; (800be4c <USBD_LL_Init+0x94>)
 800be3e:	f7fa fdf9 	bl	8006a34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	20001ac8 	.word	0x20001ac8

0800be50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be66:	4618      	mov	r0, r3
 800be68:	f7f9 fde2 	bl	8005a30 <HAL_PCD_Start>
 800be6c:	4603      	mov	r3, r0
 800be6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be70:	7bfb      	ldrb	r3, [r7, #15]
 800be72:	4618      	mov	r0, r3
 800be74:	f000 f92a 	bl	800c0cc <USBD_Get_USB_Status>
 800be78:	4603      	mov	r3, r0
 800be7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	4608      	mov	r0, r1
 800be90:	4611      	mov	r1, r2
 800be92:	461a      	mov	r2, r3
 800be94:	4603      	mov	r3, r0
 800be96:	70fb      	strb	r3, [r7, #3]
 800be98:	460b      	mov	r3, r1
 800be9a:	70bb      	strb	r3, [r7, #2]
 800be9c:	4613      	mov	r3, r2
 800be9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800beae:	78bb      	ldrb	r3, [r7, #2]
 800beb0:	883a      	ldrh	r2, [r7, #0]
 800beb2:	78f9      	ldrb	r1, [r7, #3]
 800beb4:	f7fa f9c6 	bl	8006244 <HAL_PCD_EP_Open>
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 f904 	bl	800c0cc <USBD_Get_USB_Status>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	460b      	mov	r3, r1
 800bedc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bede:	2300      	movs	r3, #0
 800bee0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bee2:	2300      	movs	r3, #0
 800bee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800beec:	78fa      	ldrb	r2, [r7, #3]
 800beee:	4611      	mov	r1, r2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fa fa0f 	bl	8006314 <HAL_PCD_EP_Close>
 800bef6:	4603      	mov	r3, r0
 800bef8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	4618      	mov	r0, r3
 800befe:	f000 f8e5 	bl	800c0cc <USBD_Get_USB_Status>
 800bf02:	4603      	mov	r3, r0
 800bf04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf06:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf2a:	78fa      	ldrb	r2, [r7, #3]
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fa fae7 	bl	8006502 <HAL_PCD_EP_SetStall>
 800bf34:	4603      	mov	r3, r0
 800bf36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 f8c6 	bl	800c0cc <USBD_Get_USB_Status>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b084      	sub	sp, #16
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	460b      	mov	r3, r1
 800bf58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf68:	78fa      	ldrb	r2, [r7, #3]
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fa fb2c 	bl	80065ca <HAL_PCD_EP_ClrStall>
 800bf72:	4603      	mov	r3, r0
 800bf74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 f8a7 	bl	800c0cc <USBD_Get_USB_Status>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf82:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	da0b      	bge.n	800bfc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfa8:	78fb      	ldrb	r3, [r7, #3]
 800bfaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfae:	68f9      	ldr	r1, [r7, #12]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	00db      	lsls	r3, r3, #3
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	440b      	add	r3, r1
 800bfba:	333e      	adds	r3, #62	; 0x3e
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	e00b      	b.n	800bfd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bfc0:	78fb      	ldrb	r3, [r7, #3]
 800bfc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfc6:	68f9      	ldr	r1, [r7, #12]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	440b      	add	r3, r1
 800bfd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bffe:	78fa      	ldrb	r2, [r7, #3]
 800c000:	4611      	mov	r1, r2
 800c002:	4618      	mov	r0, r3
 800c004:	f7fa f8f9 	bl	80061fa <HAL_PCD_SetAddress>
 800c008:	4603      	mov	r3, r0
 800c00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
 800c00e:	4618      	mov	r0, r3
 800c010:	f000 f85c 	bl	800c0cc <USBD_Get_USB_Status>
 800c014:	4603      	mov	r3, r0
 800c016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c018:	7bbb      	ldrb	r3, [r7, #14]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b086      	sub	sp, #24
 800c026:	af00      	add	r7, sp, #0
 800c028:	60f8      	str	r0, [r7, #12]
 800c02a:	607a      	str	r2, [r7, #4]
 800c02c:	603b      	str	r3, [r7, #0]
 800c02e:	460b      	mov	r3, r1
 800c030:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c040:	7af9      	ldrb	r1, [r7, #11]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	f7fa fa12 	bl	800646e <HAL_PCD_EP_Transmit>
 800c04a:	4603      	mov	r3, r0
 800c04c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c04e:	7dfb      	ldrb	r3, [r7, #23]
 800c050:	4618      	mov	r0, r3
 800c052:	f000 f83b 	bl	800c0cc <USBD_Get_USB_Status>
 800c056:	4603      	mov	r3, r0
 800c058:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c05a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	607a      	str	r2, [r7, #4]
 800c06e:	603b      	str	r3, [r7, #0]
 800c070:	460b      	mov	r3, r1
 800c072:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c078:	2300      	movs	r3, #0
 800c07a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c082:	7af9      	ldrb	r1, [r7, #11]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	f7fa f98e 	bl	80063a8 <HAL_PCD_EP_Receive>
 800c08c:	4603      	mov	r3, r0
 800c08e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c090:	7dfb      	ldrb	r3, [r7, #23]
 800c092:	4618      	mov	r0, r3
 800c094:	f000 f81a 	bl	800c0cc <USBD_Get_USB_Status>
 800c098:	4603      	mov	r3, r0
 800c09a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c09c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3718      	adds	r7, #24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0b8:	78fa      	ldrb	r2, [r7, #3]
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fa f9be 	bl	800643e <HAL_PCD_EP_GetRxCount>
 800c0c2:	4603      	mov	r3, r0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c0da:	79fb      	ldrb	r3, [r7, #7]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d817      	bhi.n	800c110 <USBD_Get_USB_Status+0x44>
 800c0e0:	a201      	add	r2, pc, #4	; (adr r2, 800c0e8 <USBD_Get_USB_Status+0x1c>)
 800c0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e6:	bf00      	nop
 800c0e8:	0800c0f9 	.word	0x0800c0f9
 800c0ec:	0800c0ff 	.word	0x0800c0ff
 800c0f0:	0800c105 	.word	0x0800c105
 800c0f4:	0800c10b 	.word	0x0800c10b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800c0fc:	e00b      	b.n	800c116 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0fe:	2303      	movs	r3, #3
 800c100:	73fb      	strb	r3, [r7, #15]
    break;
 800c102:	e008      	b.n	800c116 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c104:	2301      	movs	r3, #1
 800c106:	73fb      	strb	r3, [r7, #15]
    break;
 800c108:	e005      	b.n	800c116 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c10a:	2303      	movs	r3, #3
 800c10c:	73fb      	strb	r3, [r7, #15]
    break;
 800c10e:	e002      	b.n	800c116 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c110:	2303      	movs	r3, #3
 800c112:	73fb      	strb	r3, [r7, #15]
    break;
 800c114:	bf00      	nop
  }
  return usb_status;
 800c116:	7bfb      	ldrb	r3, [r7, #15]
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <__errno>:
 800c124:	4b01      	ldr	r3, [pc, #4]	; (800c12c <__errno+0x8>)
 800c126:	6818      	ldr	r0, [r3, #0]
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	20000188 	.word	0x20000188

0800c130 <__libc_init_array>:
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	4e0d      	ldr	r6, [pc, #52]	; (800c168 <__libc_init_array+0x38>)
 800c134:	4c0d      	ldr	r4, [pc, #52]	; (800c16c <__libc_init_array+0x3c>)
 800c136:	1ba4      	subs	r4, r4, r6
 800c138:	10a4      	asrs	r4, r4, #2
 800c13a:	2500      	movs	r5, #0
 800c13c:	42a5      	cmp	r5, r4
 800c13e:	d109      	bne.n	800c154 <__libc_init_array+0x24>
 800c140:	4e0b      	ldr	r6, [pc, #44]	; (800c170 <__libc_init_array+0x40>)
 800c142:	4c0c      	ldr	r4, [pc, #48]	; (800c174 <__libc_init_array+0x44>)
 800c144:	f000 fc36 	bl	800c9b4 <_init>
 800c148:	1ba4      	subs	r4, r4, r6
 800c14a:	10a4      	asrs	r4, r4, #2
 800c14c:	2500      	movs	r5, #0
 800c14e:	42a5      	cmp	r5, r4
 800c150:	d105      	bne.n	800c15e <__libc_init_array+0x2e>
 800c152:	bd70      	pop	{r4, r5, r6, pc}
 800c154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c158:	4798      	blx	r3
 800c15a:	3501      	adds	r5, #1
 800c15c:	e7ee      	b.n	800c13c <__libc_init_array+0xc>
 800c15e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c162:	4798      	blx	r3
 800c164:	3501      	adds	r5, #1
 800c166:	e7f2      	b.n	800c14e <__libc_init_array+0x1e>
 800c168:	0800ca90 	.word	0x0800ca90
 800c16c:	0800ca90 	.word	0x0800ca90
 800c170:	0800ca90 	.word	0x0800ca90
 800c174:	0800ca94 	.word	0x0800ca94

0800c178 <malloc>:
 800c178:	4b02      	ldr	r3, [pc, #8]	; (800c184 <malloc+0xc>)
 800c17a:	4601      	mov	r1, r0
 800c17c:	6818      	ldr	r0, [r3, #0]
 800c17e:	f000 b861 	b.w	800c244 <_malloc_r>
 800c182:	bf00      	nop
 800c184:	20000188 	.word	0x20000188

0800c188 <free>:
 800c188:	4b02      	ldr	r3, [pc, #8]	; (800c194 <free+0xc>)
 800c18a:	4601      	mov	r1, r0
 800c18c:	6818      	ldr	r0, [r3, #0]
 800c18e:	f000 b80b 	b.w	800c1a8 <_free_r>
 800c192:	bf00      	nop
 800c194:	20000188 	.word	0x20000188

0800c198 <memset>:
 800c198:	4402      	add	r2, r0
 800c19a:	4603      	mov	r3, r0
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d100      	bne.n	800c1a2 <memset+0xa>
 800c1a0:	4770      	bx	lr
 800c1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1a6:	e7f9      	b.n	800c19c <memset+0x4>

0800c1a8 <_free_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	2900      	cmp	r1, #0
 800c1ae:	d045      	beq.n	800c23c <_free_r+0x94>
 800c1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1b4:	1f0c      	subs	r4, r1, #4
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	bfb8      	it	lt
 800c1ba:	18e4      	addlt	r4, r4, r3
 800c1bc:	f000 f8cc 	bl	800c358 <__malloc_lock>
 800c1c0:	4a1f      	ldr	r2, [pc, #124]	; (800c240 <_free_r+0x98>)
 800c1c2:	6813      	ldr	r3, [r2, #0]
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	b933      	cbnz	r3, 800c1d6 <_free_r+0x2e>
 800c1c8:	6063      	str	r3, [r4, #4]
 800c1ca:	6014      	str	r4, [r2, #0]
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1d2:	f000 b8c2 	b.w	800c35a <__malloc_unlock>
 800c1d6:	42a3      	cmp	r3, r4
 800c1d8:	d90c      	bls.n	800c1f4 <_free_r+0x4c>
 800c1da:	6821      	ldr	r1, [r4, #0]
 800c1dc:	1862      	adds	r2, r4, r1
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	bf04      	itt	eq
 800c1e2:	681a      	ldreq	r2, [r3, #0]
 800c1e4:	685b      	ldreq	r3, [r3, #4]
 800c1e6:	6063      	str	r3, [r4, #4]
 800c1e8:	bf04      	itt	eq
 800c1ea:	1852      	addeq	r2, r2, r1
 800c1ec:	6022      	streq	r2, [r4, #0]
 800c1ee:	6004      	str	r4, [r0, #0]
 800c1f0:	e7ec      	b.n	800c1cc <_free_r+0x24>
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	b10a      	cbz	r2, 800c1fc <_free_r+0x54>
 800c1f8:	42a2      	cmp	r2, r4
 800c1fa:	d9fa      	bls.n	800c1f2 <_free_r+0x4a>
 800c1fc:	6819      	ldr	r1, [r3, #0]
 800c1fe:	1858      	adds	r0, r3, r1
 800c200:	42a0      	cmp	r0, r4
 800c202:	d10b      	bne.n	800c21c <_free_r+0x74>
 800c204:	6820      	ldr	r0, [r4, #0]
 800c206:	4401      	add	r1, r0
 800c208:	1858      	adds	r0, r3, r1
 800c20a:	4282      	cmp	r2, r0
 800c20c:	6019      	str	r1, [r3, #0]
 800c20e:	d1dd      	bne.n	800c1cc <_free_r+0x24>
 800c210:	6810      	ldr	r0, [r2, #0]
 800c212:	6852      	ldr	r2, [r2, #4]
 800c214:	605a      	str	r2, [r3, #4]
 800c216:	4401      	add	r1, r0
 800c218:	6019      	str	r1, [r3, #0]
 800c21a:	e7d7      	b.n	800c1cc <_free_r+0x24>
 800c21c:	d902      	bls.n	800c224 <_free_r+0x7c>
 800c21e:	230c      	movs	r3, #12
 800c220:	602b      	str	r3, [r5, #0]
 800c222:	e7d3      	b.n	800c1cc <_free_r+0x24>
 800c224:	6820      	ldr	r0, [r4, #0]
 800c226:	1821      	adds	r1, r4, r0
 800c228:	428a      	cmp	r2, r1
 800c22a:	bf04      	itt	eq
 800c22c:	6811      	ldreq	r1, [r2, #0]
 800c22e:	6852      	ldreq	r2, [r2, #4]
 800c230:	6062      	str	r2, [r4, #4]
 800c232:	bf04      	itt	eq
 800c234:	1809      	addeq	r1, r1, r0
 800c236:	6021      	streq	r1, [r4, #0]
 800c238:	605c      	str	r4, [r3, #4]
 800c23a:	e7c7      	b.n	800c1cc <_free_r+0x24>
 800c23c:	bd38      	pop	{r3, r4, r5, pc}
 800c23e:	bf00      	nop
 800c240:	20000228 	.word	0x20000228

0800c244 <_malloc_r>:
 800c244:	b570      	push	{r4, r5, r6, lr}
 800c246:	1ccd      	adds	r5, r1, #3
 800c248:	f025 0503 	bic.w	r5, r5, #3
 800c24c:	3508      	adds	r5, #8
 800c24e:	2d0c      	cmp	r5, #12
 800c250:	bf38      	it	cc
 800c252:	250c      	movcc	r5, #12
 800c254:	2d00      	cmp	r5, #0
 800c256:	4606      	mov	r6, r0
 800c258:	db01      	blt.n	800c25e <_malloc_r+0x1a>
 800c25a:	42a9      	cmp	r1, r5
 800c25c:	d903      	bls.n	800c266 <_malloc_r+0x22>
 800c25e:	230c      	movs	r3, #12
 800c260:	6033      	str	r3, [r6, #0]
 800c262:	2000      	movs	r0, #0
 800c264:	bd70      	pop	{r4, r5, r6, pc}
 800c266:	f000 f877 	bl	800c358 <__malloc_lock>
 800c26a:	4a21      	ldr	r2, [pc, #132]	; (800c2f0 <_malloc_r+0xac>)
 800c26c:	6814      	ldr	r4, [r2, #0]
 800c26e:	4621      	mov	r1, r4
 800c270:	b991      	cbnz	r1, 800c298 <_malloc_r+0x54>
 800c272:	4c20      	ldr	r4, [pc, #128]	; (800c2f4 <_malloc_r+0xb0>)
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	b91b      	cbnz	r3, 800c280 <_malloc_r+0x3c>
 800c278:	4630      	mov	r0, r6
 800c27a:	f000 f83d 	bl	800c2f8 <_sbrk_r>
 800c27e:	6020      	str	r0, [r4, #0]
 800c280:	4629      	mov	r1, r5
 800c282:	4630      	mov	r0, r6
 800c284:	f000 f838 	bl	800c2f8 <_sbrk_r>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d124      	bne.n	800c2d6 <_malloc_r+0x92>
 800c28c:	230c      	movs	r3, #12
 800c28e:	6033      	str	r3, [r6, #0]
 800c290:	4630      	mov	r0, r6
 800c292:	f000 f862 	bl	800c35a <__malloc_unlock>
 800c296:	e7e4      	b.n	800c262 <_malloc_r+0x1e>
 800c298:	680b      	ldr	r3, [r1, #0]
 800c29a:	1b5b      	subs	r3, r3, r5
 800c29c:	d418      	bmi.n	800c2d0 <_malloc_r+0x8c>
 800c29e:	2b0b      	cmp	r3, #11
 800c2a0:	d90f      	bls.n	800c2c2 <_malloc_r+0x7e>
 800c2a2:	600b      	str	r3, [r1, #0]
 800c2a4:	50cd      	str	r5, [r1, r3]
 800c2a6:	18cc      	adds	r4, r1, r3
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f856 	bl	800c35a <__malloc_unlock>
 800c2ae:	f104 000b 	add.w	r0, r4, #11
 800c2b2:	1d23      	adds	r3, r4, #4
 800c2b4:	f020 0007 	bic.w	r0, r0, #7
 800c2b8:	1ac3      	subs	r3, r0, r3
 800c2ba:	d0d3      	beq.n	800c264 <_malloc_r+0x20>
 800c2bc:	425a      	negs	r2, r3
 800c2be:	50e2      	str	r2, [r4, r3]
 800c2c0:	e7d0      	b.n	800c264 <_malloc_r+0x20>
 800c2c2:	428c      	cmp	r4, r1
 800c2c4:	684b      	ldr	r3, [r1, #4]
 800c2c6:	bf16      	itet	ne
 800c2c8:	6063      	strne	r3, [r4, #4]
 800c2ca:	6013      	streq	r3, [r2, #0]
 800c2cc:	460c      	movne	r4, r1
 800c2ce:	e7eb      	b.n	800c2a8 <_malloc_r+0x64>
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	6849      	ldr	r1, [r1, #4]
 800c2d4:	e7cc      	b.n	800c270 <_malloc_r+0x2c>
 800c2d6:	1cc4      	adds	r4, r0, #3
 800c2d8:	f024 0403 	bic.w	r4, r4, #3
 800c2dc:	42a0      	cmp	r0, r4
 800c2de:	d005      	beq.n	800c2ec <_malloc_r+0xa8>
 800c2e0:	1a21      	subs	r1, r4, r0
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f000 f808 	bl	800c2f8 <_sbrk_r>
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d0cf      	beq.n	800c28c <_malloc_r+0x48>
 800c2ec:	6025      	str	r5, [r4, #0]
 800c2ee:	e7db      	b.n	800c2a8 <_malloc_r+0x64>
 800c2f0:	20000228 	.word	0x20000228
 800c2f4:	2000022c 	.word	0x2000022c

0800c2f8 <_sbrk_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4c06      	ldr	r4, [pc, #24]	; (800c314 <_sbrk_r+0x1c>)
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4605      	mov	r5, r0
 800c300:	4608      	mov	r0, r1
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	f7f5 fb7c 	bl	8001a00 <_sbrk>
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d102      	bne.n	800c312 <_sbrk_r+0x1a>
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	b103      	cbz	r3, 800c312 <_sbrk_r+0x1a>
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	20001ed0 	.word	0x20001ed0

0800c318 <siprintf>:
 800c318:	b40e      	push	{r1, r2, r3}
 800c31a:	b500      	push	{lr}
 800c31c:	b09c      	sub	sp, #112	; 0x70
 800c31e:	ab1d      	add	r3, sp, #116	; 0x74
 800c320:	9002      	str	r0, [sp, #8]
 800c322:	9006      	str	r0, [sp, #24]
 800c324:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c328:	4809      	ldr	r0, [pc, #36]	; (800c350 <siprintf+0x38>)
 800c32a:	9107      	str	r1, [sp, #28]
 800c32c:	9104      	str	r1, [sp, #16]
 800c32e:	4909      	ldr	r1, [pc, #36]	; (800c354 <siprintf+0x3c>)
 800c330:	f853 2b04 	ldr.w	r2, [r3], #4
 800c334:	9105      	str	r1, [sp, #20]
 800c336:	6800      	ldr	r0, [r0, #0]
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	a902      	add	r1, sp, #8
 800c33c:	f000 f868 	bl	800c410 <_svfiprintf_r>
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	2200      	movs	r2, #0
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	b01c      	add	sp, #112	; 0x70
 800c348:	f85d eb04 	ldr.w	lr, [sp], #4
 800c34c:	b003      	add	sp, #12
 800c34e:	4770      	bx	lr
 800c350:	20000188 	.word	0x20000188
 800c354:	ffff0208 	.word	0xffff0208

0800c358 <__malloc_lock>:
 800c358:	4770      	bx	lr

0800c35a <__malloc_unlock>:
 800c35a:	4770      	bx	lr

0800c35c <__ssputs_r>:
 800c35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c360:	688e      	ldr	r6, [r1, #8]
 800c362:	429e      	cmp	r6, r3
 800c364:	4682      	mov	sl, r0
 800c366:	460c      	mov	r4, r1
 800c368:	4690      	mov	r8, r2
 800c36a:	4699      	mov	r9, r3
 800c36c:	d837      	bhi.n	800c3de <__ssputs_r+0x82>
 800c36e:	898a      	ldrh	r2, [r1, #12]
 800c370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c374:	d031      	beq.n	800c3da <__ssputs_r+0x7e>
 800c376:	6825      	ldr	r5, [r4, #0]
 800c378:	6909      	ldr	r1, [r1, #16]
 800c37a:	1a6f      	subs	r7, r5, r1
 800c37c:	6965      	ldr	r5, [r4, #20]
 800c37e:	2302      	movs	r3, #2
 800c380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c384:	fb95 f5f3 	sdiv	r5, r5, r3
 800c388:	f109 0301 	add.w	r3, r9, #1
 800c38c:	443b      	add	r3, r7
 800c38e:	429d      	cmp	r5, r3
 800c390:	bf38      	it	cc
 800c392:	461d      	movcc	r5, r3
 800c394:	0553      	lsls	r3, r2, #21
 800c396:	d530      	bpl.n	800c3fa <__ssputs_r+0x9e>
 800c398:	4629      	mov	r1, r5
 800c39a:	f7ff ff53 	bl	800c244 <_malloc_r>
 800c39e:	4606      	mov	r6, r0
 800c3a0:	b950      	cbnz	r0, 800c3b8 <__ssputs_r+0x5c>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	f8ca 3000 	str.w	r3, [sl]
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ae:	81a3      	strh	r3, [r4, #12]
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b8:	463a      	mov	r2, r7
 800c3ba:	6921      	ldr	r1, [r4, #16]
 800c3bc:	f000 faa8 	bl	800c910 <memcpy>
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ca:	81a3      	strh	r3, [r4, #12]
 800c3cc:	6126      	str	r6, [r4, #16]
 800c3ce:	6165      	str	r5, [r4, #20]
 800c3d0:	443e      	add	r6, r7
 800c3d2:	1bed      	subs	r5, r5, r7
 800c3d4:	6026      	str	r6, [r4, #0]
 800c3d6:	60a5      	str	r5, [r4, #8]
 800c3d8:	464e      	mov	r6, r9
 800c3da:	454e      	cmp	r6, r9
 800c3dc:	d900      	bls.n	800c3e0 <__ssputs_r+0x84>
 800c3de:	464e      	mov	r6, r9
 800c3e0:	4632      	mov	r2, r6
 800c3e2:	4641      	mov	r1, r8
 800c3e4:	6820      	ldr	r0, [r4, #0]
 800c3e6:	f000 fa9e 	bl	800c926 <memmove>
 800c3ea:	68a3      	ldr	r3, [r4, #8]
 800c3ec:	1b9b      	subs	r3, r3, r6
 800c3ee:	60a3      	str	r3, [r4, #8]
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	441e      	add	r6, r3
 800c3f4:	6026      	str	r6, [r4, #0]
 800c3f6:	2000      	movs	r0, #0
 800c3f8:	e7dc      	b.n	800c3b4 <__ssputs_r+0x58>
 800c3fa:	462a      	mov	r2, r5
 800c3fc:	f000 faac 	bl	800c958 <_realloc_r>
 800c400:	4606      	mov	r6, r0
 800c402:	2800      	cmp	r0, #0
 800c404:	d1e2      	bne.n	800c3cc <__ssputs_r+0x70>
 800c406:	6921      	ldr	r1, [r4, #16]
 800c408:	4650      	mov	r0, sl
 800c40a:	f7ff fecd 	bl	800c1a8 <_free_r>
 800c40e:	e7c8      	b.n	800c3a2 <__ssputs_r+0x46>

0800c410 <_svfiprintf_r>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	461d      	mov	r5, r3
 800c416:	898b      	ldrh	r3, [r1, #12]
 800c418:	061f      	lsls	r7, r3, #24
 800c41a:	b09d      	sub	sp, #116	; 0x74
 800c41c:	4680      	mov	r8, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	4616      	mov	r6, r2
 800c422:	d50f      	bpl.n	800c444 <_svfiprintf_r+0x34>
 800c424:	690b      	ldr	r3, [r1, #16]
 800c426:	b96b      	cbnz	r3, 800c444 <_svfiprintf_r+0x34>
 800c428:	2140      	movs	r1, #64	; 0x40
 800c42a:	f7ff ff0b 	bl	800c244 <_malloc_r>
 800c42e:	6020      	str	r0, [r4, #0]
 800c430:	6120      	str	r0, [r4, #16]
 800c432:	b928      	cbnz	r0, 800c440 <_svfiprintf_r+0x30>
 800c434:	230c      	movs	r3, #12
 800c436:	f8c8 3000 	str.w	r3, [r8]
 800c43a:	f04f 30ff 	mov.w	r0, #4294967295
 800c43e:	e0c8      	b.n	800c5d2 <_svfiprintf_r+0x1c2>
 800c440:	2340      	movs	r3, #64	; 0x40
 800c442:	6163      	str	r3, [r4, #20]
 800c444:	2300      	movs	r3, #0
 800c446:	9309      	str	r3, [sp, #36]	; 0x24
 800c448:	2320      	movs	r3, #32
 800c44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c44e:	2330      	movs	r3, #48	; 0x30
 800c450:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c454:	9503      	str	r5, [sp, #12]
 800c456:	f04f 0b01 	mov.w	fp, #1
 800c45a:	4637      	mov	r7, r6
 800c45c:	463d      	mov	r5, r7
 800c45e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c462:	b10b      	cbz	r3, 800c468 <_svfiprintf_r+0x58>
 800c464:	2b25      	cmp	r3, #37	; 0x25
 800c466:	d13e      	bne.n	800c4e6 <_svfiprintf_r+0xd6>
 800c468:	ebb7 0a06 	subs.w	sl, r7, r6
 800c46c:	d00b      	beq.n	800c486 <_svfiprintf_r+0x76>
 800c46e:	4653      	mov	r3, sl
 800c470:	4632      	mov	r2, r6
 800c472:	4621      	mov	r1, r4
 800c474:	4640      	mov	r0, r8
 800c476:	f7ff ff71 	bl	800c35c <__ssputs_r>
 800c47a:	3001      	adds	r0, #1
 800c47c:	f000 80a4 	beq.w	800c5c8 <_svfiprintf_r+0x1b8>
 800c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c482:	4453      	add	r3, sl
 800c484:	9309      	str	r3, [sp, #36]	; 0x24
 800c486:	783b      	ldrb	r3, [r7, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f000 809d 	beq.w	800c5c8 <_svfiprintf_r+0x1b8>
 800c48e:	2300      	movs	r3, #0
 800c490:	f04f 32ff 	mov.w	r2, #4294967295
 800c494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c498:	9304      	str	r3, [sp, #16]
 800c49a:	9307      	str	r3, [sp, #28]
 800c49c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4a0:	931a      	str	r3, [sp, #104]	; 0x68
 800c4a2:	462f      	mov	r7, r5
 800c4a4:	2205      	movs	r2, #5
 800c4a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c4aa:	4850      	ldr	r0, [pc, #320]	; (800c5ec <_svfiprintf_r+0x1dc>)
 800c4ac:	f7f3 fe90 	bl	80001d0 <memchr>
 800c4b0:	9b04      	ldr	r3, [sp, #16]
 800c4b2:	b9d0      	cbnz	r0, 800c4ea <_svfiprintf_r+0xda>
 800c4b4:	06d9      	lsls	r1, r3, #27
 800c4b6:	bf44      	itt	mi
 800c4b8:	2220      	movmi	r2, #32
 800c4ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c4be:	071a      	lsls	r2, r3, #28
 800c4c0:	bf44      	itt	mi
 800c4c2:	222b      	movmi	r2, #43	; 0x2b
 800c4c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c4c8:	782a      	ldrb	r2, [r5, #0]
 800c4ca:	2a2a      	cmp	r2, #42	; 0x2a
 800c4cc:	d015      	beq.n	800c4fa <_svfiprintf_r+0xea>
 800c4ce:	9a07      	ldr	r2, [sp, #28]
 800c4d0:	462f      	mov	r7, r5
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	250a      	movs	r5, #10
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4dc:	3b30      	subs	r3, #48	; 0x30
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d94d      	bls.n	800c57e <_svfiprintf_r+0x16e>
 800c4e2:	b1b8      	cbz	r0, 800c514 <_svfiprintf_r+0x104>
 800c4e4:	e00f      	b.n	800c506 <_svfiprintf_r+0xf6>
 800c4e6:	462f      	mov	r7, r5
 800c4e8:	e7b8      	b.n	800c45c <_svfiprintf_r+0x4c>
 800c4ea:	4a40      	ldr	r2, [pc, #256]	; (800c5ec <_svfiprintf_r+0x1dc>)
 800c4ec:	1a80      	subs	r0, r0, r2
 800c4ee:	fa0b f000 	lsl.w	r0, fp, r0
 800c4f2:	4318      	orrs	r0, r3
 800c4f4:	9004      	str	r0, [sp, #16]
 800c4f6:	463d      	mov	r5, r7
 800c4f8:	e7d3      	b.n	800c4a2 <_svfiprintf_r+0x92>
 800c4fa:	9a03      	ldr	r2, [sp, #12]
 800c4fc:	1d11      	adds	r1, r2, #4
 800c4fe:	6812      	ldr	r2, [r2, #0]
 800c500:	9103      	str	r1, [sp, #12]
 800c502:	2a00      	cmp	r2, #0
 800c504:	db01      	blt.n	800c50a <_svfiprintf_r+0xfa>
 800c506:	9207      	str	r2, [sp, #28]
 800c508:	e004      	b.n	800c514 <_svfiprintf_r+0x104>
 800c50a:	4252      	negs	r2, r2
 800c50c:	f043 0302 	orr.w	r3, r3, #2
 800c510:	9207      	str	r2, [sp, #28]
 800c512:	9304      	str	r3, [sp, #16]
 800c514:	783b      	ldrb	r3, [r7, #0]
 800c516:	2b2e      	cmp	r3, #46	; 0x2e
 800c518:	d10c      	bne.n	800c534 <_svfiprintf_r+0x124>
 800c51a:	787b      	ldrb	r3, [r7, #1]
 800c51c:	2b2a      	cmp	r3, #42	; 0x2a
 800c51e:	d133      	bne.n	800c588 <_svfiprintf_r+0x178>
 800c520:	9b03      	ldr	r3, [sp, #12]
 800c522:	1d1a      	adds	r2, r3, #4
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	9203      	str	r2, [sp, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	bfb8      	it	lt
 800c52c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c530:	3702      	adds	r7, #2
 800c532:	9305      	str	r3, [sp, #20]
 800c534:	4d2e      	ldr	r5, [pc, #184]	; (800c5f0 <_svfiprintf_r+0x1e0>)
 800c536:	7839      	ldrb	r1, [r7, #0]
 800c538:	2203      	movs	r2, #3
 800c53a:	4628      	mov	r0, r5
 800c53c:	f7f3 fe48 	bl	80001d0 <memchr>
 800c540:	b138      	cbz	r0, 800c552 <_svfiprintf_r+0x142>
 800c542:	2340      	movs	r3, #64	; 0x40
 800c544:	1b40      	subs	r0, r0, r5
 800c546:	fa03 f000 	lsl.w	r0, r3, r0
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	4303      	orrs	r3, r0
 800c54e:	3701      	adds	r7, #1
 800c550:	9304      	str	r3, [sp, #16]
 800c552:	7839      	ldrb	r1, [r7, #0]
 800c554:	4827      	ldr	r0, [pc, #156]	; (800c5f4 <_svfiprintf_r+0x1e4>)
 800c556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c55a:	2206      	movs	r2, #6
 800c55c:	1c7e      	adds	r6, r7, #1
 800c55e:	f7f3 fe37 	bl	80001d0 <memchr>
 800c562:	2800      	cmp	r0, #0
 800c564:	d038      	beq.n	800c5d8 <_svfiprintf_r+0x1c8>
 800c566:	4b24      	ldr	r3, [pc, #144]	; (800c5f8 <_svfiprintf_r+0x1e8>)
 800c568:	bb13      	cbnz	r3, 800c5b0 <_svfiprintf_r+0x1a0>
 800c56a:	9b03      	ldr	r3, [sp, #12]
 800c56c:	3307      	adds	r3, #7
 800c56e:	f023 0307 	bic.w	r3, r3, #7
 800c572:	3308      	adds	r3, #8
 800c574:	9303      	str	r3, [sp, #12]
 800c576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c578:	444b      	add	r3, r9
 800c57a:	9309      	str	r3, [sp, #36]	; 0x24
 800c57c:	e76d      	b.n	800c45a <_svfiprintf_r+0x4a>
 800c57e:	fb05 3202 	mla	r2, r5, r2, r3
 800c582:	2001      	movs	r0, #1
 800c584:	460f      	mov	r7, r1
 800c586:	e7a6      	b.n	800c4d6 <_svfiprintf_r+0xc6>
 800c588:	2300      	movs	r3, #0
 800c58a:	3701      	adds	r7, #1
 800c58c:	9305      	str	r3, [sp, #20]
 800c58e:	4619      	mov	r1, r3
 800c590:	250a      	movs	r5, #10
 800c592:	4638      	mov	r0, r7
 800c594:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c598:	3a30      	subs	r2, #48	; 0x30
 800c59a:	2a09      	cmp	r2, #9
 800c59c:	d903      	bls.n	800c5a6 <_svfiprintf_r+0x196>
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d0c8      	beq.n	800c534 <_svfiprintf_r+0x124>
 800c5a2:	9105      	str	r1, [sp, #20]
 800c5a4:	e7c6      	b.n	800c534 <_svfiprintf_r+0x124>
 800c5a6:	fb05 2101 	mla	r1, r5, r1, r2
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	e7f0      	b.n	800c592 <_svfiprintf_r+0x182>
 800c5b0:	ab03      	add	r3, sp, #12
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	4b11      	ldr	r3, [pc, #68]	; (800c5fc <_svfiprintf_r+0x1ec>)
 800c5b8:	a904      	add	r1, sp, #16
 800c5ba:	4640      	mov	r0, r8
 800c5bc:	f3af 8000 	nop.w
 800c5c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c5c4:	4681      	mov	r9, r0
 800c5c6:	d1d6      	bne.n	800c576 <_svfiprintf_r+0x166>
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	065b      	lsls	r3, r3, #25
 800c5cc:	f53f af35 	bmi.w	800c43a <_svfiprintf_r+0x2a>
 800c5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5d2:	b01d      	add	sp, #116	; 0x74
 800c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d8:	ab03      	add	r3, sp, #12
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	4622      	mov	r2, r4
 800c5de:	4b07      	ldr	r3, [pc, #28]	; (800c5fc <_svfiprintf_r+0x1ec>)
 800c5e0:	a904      	add	r1, sp, #16
 800c5e2:	4640      	mov	r0, r8
 800c5e4:	f000 f882 	bl	800c6ec <_printf_i>
 800c5e8:	e7ea      	b.n	800c5c0 <_svfiprintf_r+0x1b0>
 800c5ea:	bf00      	nop
 800c5ec:	0800ca54 	.word	0x0800ca54
 800c5f0:	0800ca5a 	.word	0x0800ca5a
 800c5f4:	0800ca5e 	.word	0x0800ca5e
 800c5f8:	00000000 	.word	0x00000000
 800c5fc:	0800c35d 	.word	0x0800c35d

0800c600 <_printf_common>:
 800c600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c604:	4691      	mov	r9, r2
 800c606:	461f      	mov	r7, r3
 800c608:	688a      	ldr	r2, [r1, #8]
 800c60a:	690b      	ldr	r3, [r1, #16]
 800c60c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c610:	4293      	cmp	r3, r2
 800c612:	bfb8      	it	lt
 800c614:	4613      	movlt	r3, r2
 800c616:	f8c9 3000 	str.w	r3, [r9]
 800c61a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c61e:	4606      	mov	r6, r0
 800c620:	460c      	mov	r4, r1
 800c622:	b112      	cbz	r2, 800c62a <_printf_common+0x2a>
 800c624:	3301      	adds	r3, #1
 800c626:	f8c9 3000 	str.w	r3, [r9]
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	0699      	lsls	r1, r3, #26
 800c62e:	bf42      	ittt	mi
 800c630:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c634:	3302      	addmi	r3, #2
 800c636:	f8c9 3000 	strmi.w	r3, [r9]
 800c63a:	6825      	ldr	r5, [r4, #0]
 800c63c:	f015 0506 	ands.w	r5, r5, #6
 800c640:	d107      	bne.n	800c652 <_printf_common+0x52>
 800c642:	f104 0a19 	add.w	sl, r4, #25
 800c646:	68e3      	ldr	r3, [r4, #12]
 800c648:	f8d9 2000 	ldr.w	r2, [r9]
 800c64c:	1a9b      	subs	r3, r3, r2
 800c64e:	42ab      	cmp	r3, r5
 800c650:	dc28      	bgt.n	800c6a4 <_printf_common+0xa4>
 800c652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c656:	6822      	ldr	r2, [r4, #0]
 800c658:	3300      	adds	r3, #0
 800c65a:	bf18      	it	ne
 800c65c:	2301      	movne	r3, #1
 800c65e:	0692      	lsls	r2, r2, #26
 800c660:	d42d      	bmi.n	800c6be <_printf_common+0xbe>
 800c662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c666:	4639      	mov	r1, r7
 800c668:	4630      	mov	r0, r6
 800c66a:	47c0      	blx	r8
 800c66c:	3001      	adds	r0, #1
 800c66e:	d020      	beq.n	800c6b2 <_printf_common+0xb2>
 800c670:	6823      	ldr	r3, [r4, #0]
 800c672:	68e5      	ldr	r5, [r4, #12]
 800c674:	f8d9 2000 	ldr.w	r2, [r9]
 800c678:	f003 0306 	and.w	r3, r3, #6
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	bf08      	it	eq
 800c680:	1aad      	subeq	r5, r5, r2
 800c682:	68a3      	ldr	r3, [r4, #8]
 800c684:	6922      	ldr	r2, [r4, #16]
 800c686:	bf0c      	ite	eq
 800c688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c68c:	2500      	movne	r5, #0
 800c68e:	4293      	cmp	r3, r2
 800c690:	bfc4      	itt	gt
 800c692:	1a9b      	subgt	r3, r3, r2
 800c694:	18ed      	addgt	r5, r5, r3
 800c696:	f04f 0900 	mov.w	r9, #0
 800c69a:	341a      	adds	r4, #26
 800c69c:	454d      	cmp	r5, r9
 800c69e:	d11a      	bne.n	800c6d6 <_printf_common+0xd6>
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	e008      	b.n	800c6b6 <_printf_common+0xb6>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	4652      	mov	r2, sl
 800c6a8:	4639      	mov	r1, r7
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	47c0      	blx	r8
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	d103      	bne.n	800c6ba <_printf_common+0xba>
 800c6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ba:	3501      	adds	r5, #1
 800c6bc:	e7c3      	b.n	800c646 <_printf_common+0x46>
 800c6be:	18e1      	adds	r1, r4, r3
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	2030      	movs	r0, #48	; 0x30
 800c6c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6c8:	4422      	add	r2, r4
 800c6ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6d2:	3302      	adds	r3, #2
 800c6d4:	e7c5      	b.n	800c662 <_printf_common+0x62>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4622      	mov	r2, r4
 800c6da:	4639      	mov	r1, r7
 800c6dc:	4630      	mov	r0, r6
 800c6de:	47c0      	blx	r8
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d0e6      	beq.n	800c6b2 <_printf_common+0xb2>
 800c6e4:	f109 0901 	add.w	r9, r9, #1
 800c6e8:	e7d8      	b.n	800c69c <_printf_common+0x9c>
	...

0800c6ec <_printf_i>:
 800c6ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	7e09      	ldrb	r1, [r1, #24]
 800c6f8:	b085      	sub	sp, #20
 800c6fa:	296e      	cmp	r1, #110	; 0x6e
 800c6fc:	4617      	mov	r7, r2
 800c6fe:	4606      	mov	r6, r0
 800c700:	4698      	mov	r8, r3
 800c702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c704:	f000 80b3 	beq.w	800c86e <_printf_i+0x182>
 800c708:	d822      	bhi.n	800c750 <_printf_i+0x64>
 800c70a:	2963      	cmp	r1, #99	; 0x63
 800c70c:	d036      	beq.n	800c77c <_printf_i+0x90>
 800c70e:	d80a      	bhi.n	800c726 <_printf_i+0x3a>
 800c710:	2900      	cmp	r1, #0
 800c712:	f000 80b9 	beq.w	800c888 <_printf_i+0x19c>
 800c716:	2958      	cmp	r1, #88	; 0x58
 800c718:	f000 8083 	beq.w	800c822 <_printf_i+0x136>
 800c71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c720:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c724:	e032      	b.n	800c78c <_printf_i+0xa0>
 800c726:	2964      	cmp	r1, #100	; 0x64
 800c728:	d001      	beq.n	800c72e <_printf_i+0x42>
 800c72a:	2969      	cmp	r1, #105	; 0x69
 800c72c:	d1f6      	bne.n	800c71c <_printf_i+0x30>
 800c72e:	6820      	ldr	r0, [r4, #0]
 800c730:	6813      	ldr	r3, [r2, #0]
 800c732:	0605      	lsls	r5, r0, #24
 800c734:	f103 0104 	add.w	r1, r3, #4
 800c738:	d52a      	bpl.n	800c790 <_printf_i+0xa4>
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	6011      	str	r1, [r2, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da03      	bge.n	800c74a <_printf_i+0x5e>
 800c742:	222d      	movs	r2, #45	; 0x2d
 800c744:	425b      	negs	r3, r3
 800c746:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c74a:	486f      	ldr	r0, [pc, #444]	; (800c908 <_printf_i+0x21c>)
 800c74c:	220a      	movs	r2, #10
 800c74e:	e039      	b.n	800c7c4 <_printf_i+0xd8>
 800c750:	2973      	cmp	r1, #115	; 0x73
 800c752:	f000 809d 	beq.w	800c890 <_printf_i+0x1a4>
 800c756:	d808      	bhi.n	800c76a <_printf_i+0x7e>
 800c758:	296f      	cmp	r1, #111	; 0x6f
 800c75a:	d020      	beq.n	800c79e <_printf_i+0xb2>
 800c75c:	2970      	cmp	r1, #112	; 0x70
 800c75e:	d1dd      	bne.n	800c71c <_printf_i+0x30>
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	f043 0320 	orr.w	r3, r3, #32
 800c766:	6023      	str	r3, [r4, #0]
 800c768:	e003      	b.n	800c772 <_printf_i+0x86>
 800c76a:	2975      	cmp	r1, #117	; 0x75
 800c76c:	d017      	beq.n	800c79e <_printf_i+0xb2>
 800c76e:	2978      	cmp	r1, #120	; 0x78
 800c770:	d1d4      	bne.n	800c71c <_printf_i+0x30>
 800c772:	2378      	movs	r3, #120	; 0x78
 800c774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c778:	4864      	ldr	r0, [pc, #400]	; (800c90c <_printf_i+0x220>)
 800c77a:	e055      	b.n	800c828 <_printf_i+0x13c>
 800c77c:	6813      	ldr	r3, [r2, #0]
 800c77e:	1d19      	adds	r1, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6011      	str	r1, [r2, #0]
 800c784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c78c:	2301      	movs	r3, #1
 800c78e:	e08c      	b.n	800c8aa <_printf_i+0x1be>
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6011      	str	r1, [r2, #0]
 800c794:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c798:	bf18      	it	ne
 800c79a:	b21b      	sxthne	r3, r3
 800c79c:	e7cf      	b.n	800c73e <_printf_i+0x52>
 800c79e:	6813      	ldr	r3, [r2, #0]
 800c7a0:	6825      	ldr	r5, [r4, #0]
 800c7a2:	1d18      	adds	r0, r3, #4
 800c7a4:	6010      	str	r0, [r2, #0]
 800c7a6:	0628      	lsls	r0, r5, #24
 800c7a8:	d501      	bpl.n	800c7ae <_printf_i+0xc2>
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	e002      	b.n	800c7b4 <_printf_i+0xc8>
 800c7ae:	0668      	lsls	r0, r5, #25
 800c7b0:	d5fb      	bpl.n	800c7aa <_printf_i+0xbe>
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	4854      	ldr	r0, [pc, #336]	; (800c908 <_printf_i+0x21c>)
 800c7b6:	296f      	cmp	r1, #111	; 0x6f
 800c7b8:	bf14      	ite	ne
 800c7ba:	220a      	movne	r2, #10
 800c7bc:	2208      	moveq	r2, #8
 800c7be:	2100      	movs	r1, #0
 800c7c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7c4:	6865      	ldr	r5, [r4, #4]
 800c7c6:	60a5      	str	r5, [r4, #8]
 800c7c8:	2d00      	cmp	r5, #0
 800c7ca:	f2c0 8095 	blt.w	800c8f8 <_printf_i+0x20c>
 800c7ce:	6821      	ldr	r1, [r4, #0]
 800c7d0:	f021 0104 	bic.w	r1, r1, #4
 800c7d4:	6021      	str	r1, [r4, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d13d      	bne.n	800c856 <_printf_i+0x16a>
 800c7da:	2d00      	cmp	r5, #0
 800c7dc:	f040 808e 	bne.w	800c8fc <_printf_i+0x210>
 800c7e0:	4665      	mov	r5, ip
 800c7e2:	2a08      	cmp	r2, #8
 800c7e4:	d10b      	bne.n	800c7fe <_printf_i+0x112>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	07db      	lsls	r3, r3, #31
 800c7ea:	d508      	bpl.n	800c7fe <_printf_i+0x112>
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	6862      	ldr	r2, [r4, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	bfde      	ittt	le
 800c7f4:	2330      	movle	r3, #48	; 0x30
 800c7f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7fe:	ebac 0305 	sub.w	r3, ip, r5
 800c802:	6123      	str	r3, [r4, #16]
 800c804:	f8cd 8000 	str.w	r8, [sp]
 800c808:	463b      	mov	r3, r7
 800c80a:	aa03      	add	r2, sp, #12
 800c80c:	4621      	mov	r1, r4
 800c80e:	4630      	mov	r0, r6
 800c810:	f7ff fef6 	bl	800c600 <_printf_common>
 800c814:	3001      	adds	r0, #1
 800c816:	d14d      	bne.n	800c8b4 <_printf_i+0x1c8>
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	b005      	add	sp, #20
 800c81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c822:	4839      	ldr	r0, [pc, #228]	; (800c908 <_printf_i+0x21c>)
 800c824:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c828:	6813      	ldr	r3, [r2, #0]
 800c82a:	6821      	ldr	r1, [r4, #0]
 800c82c:	1d1d      	adds	r5, r3, #4
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	6015      	str	r5, [r2, #0]
 800c832:	060a      	lsls	r2, r1, #24
 800c834:	d50b      	bpl.n	800c84e <_printf_i+0x162>
 800c836:	07ca      	lsls	r2, r1, #31
 800c838:	bf44      	itt	mi
 800c83a:	f041 0120 	orrmi.w	r1, r1, #32
 800c83e:	6021      	strmi	r1, [r4, #0]
 800c840:	b91b      	cbnz	r3, 800c84a <_printf_i+0x15e>
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	f022 0220 	bic.w	r2, r2, #32
 800c848:	6022      	str	r2, [r4, #0]
 800c84a:	2210      	movs	r2, #16
 800c84c:	e7b7      	b.n	800c7be <_printf_i+0xd2>
 800c84e:	064d      	lsls	r5, r1, #25
 800c850:	bf48      	it	mi
 800c852:	b29b      	uxthmi	r3, r3
 800c854:	e7ef      	b.n	800c836 <_printf_i+0x14a>
 800c856:	4665      	mov	r5, ip
 800c858:	fbb3 f1f2 	udiv	r1, r3, r2
 800c85c:	fb02 3311 	mls	r3, r2, r1, r3
 800c860:	5cc3      	ldrb	r3, [r0, r3]
 800c862:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c866:	460b      	mov	r3, r1
 800c868:	2900      	cmp	r1, #0
 800c86a:	d1f5      	bne.n	800c858 <_printf_i+0x16c>
 800c86c:	e7b9      	b.n	800c7e2 <_printf_i+0xf6>
 800c86e:	6813      	ldr	r3, [r2, #0]
 800c870:	6825      	ldr	r5, [r4, #0]
 800c872:	6961      	ldr	r1, [r4, #20]
 800c874:	1d18      	adds	r0, r3, #4
 800c876:	6010      	str	r0, [r2, #0]
 800c878:	0628      	lsls	r0, r5, #24
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	d501      	bpl.n	800c882 <_printf_i+0x196>
 800c87e:	6019      	str	r1, [r3, #0]
 800c880:	e002      	b.n	800c888 <_printf_i+0x19c>
 800c882:	066a      	lsls	r2, r5, #25
 800c884:	d5fb      	bpl.n	800c87e <_printf_i+0x192>
 800c886:	8019      	strh	r1, [r3, #0]
 800c888:	2300      	movs	r3, #0
 800c88a:	6123      	str	r3, [r4, #16]
 800c88c:	4665      	mov	r5, ip
 800c88e:	e7b9      	b.n	800c804 <_printf_i+0x118>
 800c890:	6813      	ldr	r3, [r2, #0]
 800c892:	1d19      	adds	r1, r3, #4
 800c894:	6011      	str	r1, [r2, #0]
 800c896:	681d      	ldr	r5, [r3, #0]
 800c898:	6862      	ldr	r2, [r4, #4]
 800c89a:	2100      	movs	r1, #0
 800c89c:	4628      	mov	r0, r5
 800c89e:	f7f3 fc97 	bl	80001d0 <memchr>
 800c8a2:	b108      	cbz	r0, 800c8a8 <_printf_i+0x1bc>
 800c8a4:	1b40      	subs	r0, r0, r5
 800c8a6:	6060      	str	r0, [r4, #4]
 800c8a8:	6863      	ldr	r3, [r4, #4]
 800c8aa:	6123      	str	r3, [r4, #16]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8b2:	e7a7      	b.n	800c804 <_printf_i+0x118>
 800c8b4:	6923      	ldr	r3, [r4, #16]
 800c8b6:	462a      	mov	r2, r5
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	47c0      	blx	r8
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d0aa      	beq.n	800c818 <_printf_i+0x12c>
 800c8c2:	6823      	ldr	r3, [r4, #0]
 800c8c4:	079b      	lsls	r3, r3, #30
 800c8c6:	d413      	bmi.n	800c8f0 <_printf_i+0x204>
 800c8c8:	68e0      	ldr	r0, [r4, #12]
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	4298      	cmp	r0, r3
 800c8ce:	bfb8      	it	lt
 800c8d0:	4618      	movlt	r0, r3
 800c8d2:	e7a3      	b.n	800c81c <_printf_i+0x130>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	464a      	mov	r2, r9
 800c8d8:	4639      	mov	r1, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	47c0      	blx	r8
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d09a      	beq.n	800c818 <_printf_i+0x12c>
 800c8e2:	3501      	adds	r5, #1
 800c8e4:	68e3      	ldr	r3, [r4, #12]
 800c8e6:	9a03      	ldr	r2, [sp, #12]
 800c8e8:	1a9b      	subs	r3, r3, r2
 800c8ea:	42ab      	cmp	r3, r5
 800c8ec:	dcf2      	bgt.n	800c8d4 <_printf_i+0x1e8>
 800c8ee:	e7eb      	b.n	800c8c8 <_printf_i+0x1dc>
 800c8f0:	2500      	movs	r5, #0
 800c8f2:	f104 0919 	add.w	r9, r4, #25
 800c8f6:	e7f5      	b.n	800c8e4 <_printf_i+0x1f8>
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1ac      	bne.n	800c856 <_printf_i+0x16a>
 800c8fc:	7803      	ldrb	r3, [r0, #0]
 800c8fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c902:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c906:	e76c      	b.n	800c7e2 <_printf_i+0xf6>
 800c908:	0800ca65 	.word	0x0800ca65
 800c90c:	0800ca76 	.word	0x0800ca76

0800c910 <memcpy>:
 800c910:	b510      	push	{r4, lr}
 800c912:	1e43      	subs	r3, r0, #1
 800c914:	440a      	add	r2, r1
 800c916:	4291      	cmp	r1, r2
 800c918:	d100      	bne.n	800c91c <memcpy+0xc>
 800c91a:	bd10      	pop	{r4, pc}
 800c91c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c920:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c924:	e7f7      	b.n	800c916 <memcpy+0x6>

0800c926 <memmove>:
 800c926:	4288      	cmp	r0, r1
 800c928:	b510      	push	{r4, lr}
 800c92a:	eb01 0302 	add.w	r3, r1, r2
 800c92e:	d807      	bhi.n	800c940 <memmove+0x1a>
 800c930:	1e42      	subs	r2, r0, #1
 800c932:	4299      	cmp	r1, r3
 800c934:	d00a      	beq.n	800c94c <memmove+0x26>
 800c936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c93a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c93e:	e7f8      	b.n	800c932 <memmove+0xc>
 800c940:	4283      	cmp	r3, r0
 800c942:	d9f5      	bls.n	800c930 <memmove+0xa>
 800c944:	1881      	adds	r1, r0, r2
 800c946:	1ad2      	subs	r2, r2, r3
 800c948:	42d3      	cmn	r3, r2
 800c94a:	d100      	bne.n	800c94e <memmove+0x28>
 800c94c:	bd10      	pop	{r4, pc}
 800c94e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c952:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c956:	e7f7      	b.n	800c948 <memmove+0x22>

0800c958 <_realloc_r>:
 800c958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95a:	4607      	mov	r7, r0
 800c95c:	4614      	mov	r4, r2
 800c95e:	460e      	mov	r6, r1
 800c960:	b921      	cbnz	r1, 800c96c <_realloc_r+0x14>
 800c962:	4611      	mov	r1, r2
 800c964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c968:	f7ff bc6c 	b.w	800c244 <_malloc_r>
 800c96c:	b922      	cbnz	r2, 800c978 <_realloc_r+0x20>
 800c96e:	f7ff fc1b 	bl	800c1a8 <_free_r>
 800c972:	4625      	mov	r5, r4
 800c974:	4628      	mov	r0, r5
 800c976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c978:	f000 f814 	bl	800c9a4 <_malloc_usable_size_r>
 800c97c:	42a0      	cmp	r0, r4
 800c97e:	d20f      	bcs.n	800c9a0 <_realloc_r+0x48>
 800c980:	4621      	mov	r1, r4
 800c982:	4638      	mov	r0, r7
 800c984:	f7ff fc5e 	bl	800c244 <_malloc_r>
 800c988:	4605      	mov	r5, r0
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d0f2      	beq.n	800c974 <_realloc_r+0x1c>
 800c98e:	4631      	mov	r1, r6
 800c990:	4622      	mov	r2, r4
 800c992:	f7ff ffbd 	bl	800c910 <memcpy>
 800c996:	4631      	mov	r1, r6
 800c998:	4638      	mov	r0, r7
 800c99a:	f7ff fc05 	bl	800c1a8 <_free_r>
 800c99e:	e7e9      	b.n	800c974 <_realloc_r+0x1c>
 800c9a0:	4635      	mov	r5, r6
 800c9a2:	e7e7      	b.n	800c974 <_realloc_r+0x1c>

0800c9a4 <_malloc_usable_size_r>:
 800c9a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a8:	1f18      	subs	r0, r3, #4
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	bfbc      	itt	lt
 800c9ae:	580b      	ldrlt	r3, [r1, r0]
 800c9b0:	18c0      	addlt	r0, r0, r3
 800c9b2:	4770      	bx	lr

0800c9b4 <_init>:
 800c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b6:	bf00      	nop
 800c9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ba:	bc08      	pop	{r3}
 800c9bc:	469e      	mov	lr, r3
 800c9be:	4770      	bx	lr

0800c9c0 <_fini>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	bf00      	nop
 800c9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9c6:	bc08      	pop	{r3}
 800c9c8:	469e      	mov	lr, r3
 800c9ca:	4770      	bx	lr
