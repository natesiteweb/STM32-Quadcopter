
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013458  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080135e8  080135e8  000235e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013940  08013940  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08013940  08013940  00023940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013948  08013948  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013948  08013948  00023948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801394c  0801394c  0002394c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08013950  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000436c  20000238  08013b84  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200045a4  08013b84  000345a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000251a8  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c39  00000000  00000000  0005540c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001770  00000000  00000000  0005a048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  0005b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255ae  00000000  00000000  0005ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001960c  00000000  00000000  0008229e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000caa2f  00000000  00000000  0009b8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001662d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006abc  00000000  00000000  00166354  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135d0 	.word	0x080135d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	080135d0 	.word	0x080135d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d04:	f1a2 0201 	sub.w	r2, r2, #1
 8000d08:	d1ed      	bne.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_ldivmod>:
 8000e64:	b97b      	cbnz	r3, 8000e86 <__aeabi_ldivmod+0x22>
 8000e66:	b972      	cbnz	r2, 8000e86 <__aeabi_ldivmod+0x22>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bfbe      	ittt	lt
 8000e6c:	2000      	movlt	r0, #0
 8000e6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e72:	e006      	blt.n	8000e82 <__aeabi_ldivmod+0x1e>
 8000e74:	bf08      	it	eq
 8000e76:	2800      	cmpeq	r0, #0
 8000e78:	bf1c      	itt	ne
 8000e7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e82:	f000 b9bd 	b.w	8001200 <__aeabi_idiv0>
 8000e86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	db09      	blt.n	8000ea6 <__aeabi_ldivmod+0x42>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1a      	blt.n	8000ecc <__aeabi_ldivmod+0x68>
 8000e96:	f000 f84d 	bl	8000f34 <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db1b      	blt.n	8000ee8 <__aeabi_ldivmod+0x84>
 8000eb0:	f000 f840 	bl	8000f34 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eca:	4770      	bx	lr
 8000ecc:	4252      	negs	r2, r2
 8000ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed2:	f000 f82f 	bl	8000f34 <__udivmoddi4>
 8000ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ede:	b004      	add	sp, #16
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee6:	4770      	bx	lr
 8000ee8:	4252      	negs	r2, r2
 8000eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eee:	f000 f821 	bl	8000f34 <__udivmoddi4>
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efa:	b004      	add	sp, #16
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_uldivmod>:
 8000f04:	b953      	cbnz	r3, 8000f1c <__aeabi_uldivmod+0x18>
 8000f06:	b94a      	cbnz	r2, 8000f1c <__aeabi_uldivmod+0x18>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bf08      	it	eq
 8000f0c:	2800      	cmpeq	r0, #0
 8000f0e:	bf1c      	itt	ne
 8000f10:	f04f 31ff 	movne.w	r1, #4294967295
 8000f14:	f04f 30ff 	movne.w	r0, #4294967295
 8000f18:	f000 b972 	b.w	8001200 <__aeabi_idiv0>
 8000f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f24:	f000 f806 	bl	8000f34 <__udivmoddi4>
 8000f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr

08000f34 <__udivmoddi4>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	9e08      	ldr	r6, [sp, #32]
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4688      	mov	r8, r1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d14b      	bne.n	8000fda <__udivmoddi4+0xa6>
 8000f42:	428a      	cmp	r2, r1
 8000f44:	4615      	mov	r5, r2
 8000f46:	d967      	bls.n	8001018 <__udivmoddi4+0xe4>
 8000f48:	fab2 f282 	clz	r2, r2
 8000f4c:	b14a      	cbz	r2, 8000f62 <__udivmoddi4+0x2e>
 8000f4e:	f1c2 0720 	rsb	r7, r2, #32
 8000f52:	fa01 f302 	lsl.w	r3, r1, r2
 8000f56:	fa20 f707 	lsr.w	r7, r0, r7
 8000f5a:	4095      	lsls	r5, r2
 8000f5c:	ea47 0803 	orr.w	r8, r7, r3
 8000f60:	4094      	lsls	r4, r2
 8000f62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f66:	0c23      	lsrs	r3, r4, #16
 8000f68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f6c:	fa1f fc85 	uxth.w	ip, r5
 8000f70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f78:	fb07 f10c 	mul.w	r1, r7, ip
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x60>
 8000f80:	18eb      	adds	r3, r5, r3
 8000f82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f86:	f080 811b 	bcs.w	80011c0 <__udivmoddi4+0x28c>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 8118 	bls.w	80011c0 <__udivmoddi4+0x28c>
 8000f90:	3f02      	subs	r7, #2
 8000f92:	442b      	add	r3, r5
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d909      	bls.n	8000fc0 <__udivmoddi4+0x8c>
 8000fac:	192c      	adds	r4, r5, r4
 8000fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb2:	f080 8107 	bcs.w	80011c4 <__udivmoddi4+0x290>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	f240 8104 	bls.w	80011c4 <__udivmoddi4+0x290>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	442c      	add	r4, r5
 8000fc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fc4:	eba4 040c 	sub.w	r4, r4, ip
 8000fc8:	2700      	movs	r7, #0
 8000fca:	b11e      	cbz	r6, 8000fd4 <__udivmoddi4+0xa0>
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0xbe>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	f000 80eb 	beq.w	80011ba <__udivmoddi4+0x286>
 8000fe4:	2700      	movs	r7, #0
 8000fe6:	e9c6 0100 	strd	r0, r1, [r6]
 8000fea:	4638      	mov	r0, r7
 8000fec:	4639      	mov	r1, r7
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f783 	clz	r7, r3
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d147      	bne.n	800108a <__udivmoddi4+0x156>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0xd0>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80fa 	bhi.w	80011f8 <__udivmoddi4+0x2c4>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	4698      	mov	r8, r3
 800100e:	2e00      	cmp	r6, #0
 8001010:	d0e0      	beq.n	8000fd4 <__udivmoddi4+0xa0>
 8001012:	e9c6 4800 	strd	r4, r8, [r6]
 8001016:	e7dd      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001018:	b902      	cbnz	r2, 800101c <__udivmoddi4+0xe8>
 800101a:	deff      	udf	#255	; 0xff
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	2a00      	cmp	r2, #0
 8001022:	f040 808f 	bne.w	8001144 <__udivmoddi4+0x210>
 8001026:	1b49      	subs	r1, r1, r5
 8001028:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800102c:	fa1f f885 	uxth.w	r8, r5
 8001030:	2701      	movs	r7, #1
 8001032:	fbb1 fcfe 	udiv	ip, r1, lr
 8001036:	0c23      	lsrs	r3, r4, #16
 8001038:	fb0e 111c 	mls	r1, lr, ip, r1
 800103c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001040:	fb08 f10c 	mul.w	r1, r8, ip
 8001044:	4299      	cmp	r1, r3
 8001046:	d907      	bls.n	8001058 <__udivmoddi4+0x124>
 8001048:	18eb      	adds	r3, r5, r3
 800104a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800104e:	d202      	bcs.n	8001056 <__udivmoddi4+0x122>
 8001050:	4299      	cmp	r1, r3
 8001052:	f200 80cd 	bhi.w	80011f0 <__udivmoddi4+0x2bc>
 8001056:	4684      	mov	ip, r0
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	b2a3      	uxth	r3, r4
 800105c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001060:	fb0e 1410 	mls	r4, lr, r0, r1
 8001064:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001068:	fb08 f800 	mul.w	r8, r8, r0
 800106c:	45a0      	cmp	r8, r4
 800106e:	d907      	bls.n	8001080 <__udivmoddi4+0x14c>
 8001070:	192c      	adds	r4, r5, r4
 8001072:	f100 33ff 	add.w	r3, r0, #4294967295
 8001076:	d202      	bcs.n	800107e <__udivmoddi4+0x14a>
 8001078:	45a0      	cmp	r8, r4
 800107a:	f200 80b6 	bhi.w	80011ea <__udivmoddi4+0x2b6>
 800107e:	4618      	mov	r0, r3
 8001080:	eba4 0408 	sub.w	r4, r4, r8
 8001084:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001088:	e79f      	b.n	8000fca <__udivmoddi4+0x96>
 800108a:	f1c7 0c20 	rsb	ip, r7, #32
 800108e:	40bb      	lsls	r3, r7
 8001090:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001094:	ea4e 0e03 	orr.w	lr, lr, r3
 8001098:	fa01 f407 	lsl.w	r4, r1, r7
 800109c:	fa20 f50c 	lsr.w	r5, r0, ip
 80010a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80010a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010a8:	4325      	orrs	r5, r4
 80010aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80010ae:	0c2c      	lsrs	r4, r5, #16
 80010b0:	fb08 3319 	mls	r3, r8, r9, r3
 80010b4:	fa1f fa8e 	uxth.w	sl, lr
 80010b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010bc:	fb09 f40a 	mul.w	r4, r9, sl
 80010c0:	429c      	cmp	r4, r3
 80010c2:	fa02 f207 	lsl.w	r2, r2, r7
 80010c6:	fa00 f107 	lsl.w	r1, r0, r7
 80010ca:	d90b      	bls.n	80010e4 <__udivmoddi4+0x1b0>
 80010cc:	eb1e 0303 	adds.w	r3, lr, r3
 80010d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010d4:	f080 8087 	bcs.w	80011e6 <__udivmoddi4+0x2b2>
 80010d8:	429c      	cmp	r4, r3
 80010da:	f240 8084 	bls.w	80011e6 <__udivmoddi4+0x2b2>
 80010de:	f1a9 0902 	sub.w	r9, r9, #2
 80010e2:	4473      	add	r3, lr
 80010e4:	1b1b      	subs	r3, r3, r4
 80010e6:	b2ad      	uxth	r5, r5
 80010e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ec:	fb08 3310 	mls	r3, r8, r0, r3
 80010f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010f8:	45a2      	cmp	sl, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1da>
 80010fc:	eb1e 0404 	adds.w	r4, lr, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	d26b      	bcs.n	80011de <__udivmoddi4+0x2aa>
 8001106:	45a2      	cmp	sl, r4
 8001108:	d969      	bls.n	80011de <__udivmoddi4+0x2aa>
 800110a:	3802      	subs	r0, #2
 800110c:	4474      	add	r4, lr
 800110e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001112:	fba0 8902 	umull	r8, r9, r0, r2
 8001116:	eba4 040a 	sub.w	r4, r4, sl
 800111a:	454c      	cmp	r4, r9
 800111c:	46c2      	mov	sl, r8
 800111e:	464b      	mov	r3, r9
 8001120:	d354      	bcc.n	80011cc <__udivmoddi4+0x298>
 8001122:	d051      	beq.n	80011c8 <__udivmoddi4+0x294>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d069      	beq.n	80011fc <__udivmoddi4+0x2c8>
 8001128:	ebb1 050a 	subs.w	r5, r1, sl
 800112c:	eb64 0403 	sbc.w	r4, r4, r3
 8001130:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001134:	40fd      	lsrs	r5, r7
 8001136:	40fc      	lsrs	r4, r7
 8001138:	ea4c 0505 	orr.w	r5, ip, r5
 800113c:	e9c6 5400 	strd	r5, r4, [r6]
 8001140:	2700      	movs	r7, #0
 8001142:	e747      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f703 	lsr.w	r7, r0, r3
 800114c:	4095      	lsls	r5, r2
 800114e:	fa01 f002 	lsl.w	r0, r1, r2
 8001152:	fa21 f303 	lsr.w	r3, r1, r3
 8001156:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800115a:	4338      	orrs	r0, r7
 800115c:	0c01      	lsrs	r1, r0, #16
 800115e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001162:	fa1f f885 	uxth.w	r8, r5
 8001166:	fb0e 3317 	mls	r3, lr, r7, r3
 800116a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800116e:	fb07 f308 	mul.w	r3, r7, r8
 8001172:	428b      	cmp	r3, r1
 8001174:	fa04 f402 	lsl.w	r4, r4, r2
 8001178:	d907      	bls.n	800118a <__udivmoddi4+0x256>
 800117a:	1869      	adds	r1, r5, r1
 800117c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001180:	d22f      	bcs.n	80011e2 <__udivmoddi4+0x2ae>
 8001182:	428b      	cmp	r3, r1
 8001184:	d92d      	bls.n	80011e2 <__udivmoddi4+0x2ae>
 8001186:	3f02      	subs	r7, #2
 8001188:	4429      	add	r1, r5
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	b281      	uxth	r1, r0
 800118e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001192:	fb0e 3310 	mls	r3, lr, r0, r3
 8001196:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119a:	fb00 f308 	mul.w	r3, r0, r8
 800119e:	428b      	cmp	r3, r1
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0x27e>
 80011a2:	1869      	adds	r1, r5, r1
 80011a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80011a8:	d217      	bcs.n	80011da <__udivmoddi4+0x2a6>
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d915      	bls.n	80011da <__udivmoddi4+0x2a6>
 80011ae:	3802      	subs	r0, #2
 80011b0:	4429      	add	r1, r5
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011b8:	e73b      	b.n	8001032 <__udivmoddi4+0xfe>
 80011ba:	4637      	mov	r7, r6
 80011bc:	4630      	mov	r0, r6
 80011be:	e709      	b.n	8000fd4 <__udivmoddi4+0xa0>
 80011c0:	4607      	mov	r7, r0
 80011c2:	e6e7      	b.n	8000f94 <__udivmoddi4+0x60>
 80011c4:	4618      	mov	r0, r3
 80011c6:	e6fb      	b.n	8000fc0 <__udivmoddi4+0x8c>
 80011c8:	4541      	cmp	r1, r8
 80011ca:	d2ab      	bcs.n	8001124 <__udivmoddi4+0x1f0>
 80011cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80011d0:	eb69 020e 	sbc.w	r2, r9, lr
 80011d4:	3801      	subs	r0, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	e7a4      	b.n	8001124 <__udivmoddi4+0x1f0>
 80011da:	4660      	mov	r0, ip
 80011dc:	e7e9      	b.n	80011b2 <__udivmoddi4+0x27e>
 80011de:	4618      	mov	r0, r3
 80011e0:	e795      	b.n	800110e <__udivmoddi4+0x1da>
 80011e2:	4667      	mov	r7, ip
 80011e4:	e7d1      	b.n	800118a <__udivmoddi4+0x256>
 80011e6:	4681      	mov	r9, r0
 80011e8:	e77c      	b.n	80010e4 <__udivmoddi4+0x1b0>
 80011ea:	3802      	subs	r0, #2
 80011ec:	442c      	add	r4, r5
 80011ee:	e747      	b.n	8001080 <__udivmoddi4+0x14c>
 80011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f4:	442b      	add	r3, r5
 80011f6:	e72f      	b.n	8001058 <__udivmoddi4+0x124>
 80011f8:	4638      	mov	r0, r7
 80011fa:	e708      	b.n	800100e <__udivmoddi4+0xda>
 80011fc:	4637      	mov	r7, r6
 80011fe:	e6e9      	b.n	8000fd4 <__udivmoddi4+0xa0>

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <Setup_BMP280>:

bmp280_calib_data _bmp280_calib;
int32_t t_fine;

void Setup_BMP280()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
	uint8_t setup_data[4];
	setup_data[0] = 0xF5;
 800120a:	23f5      	movs	r3, #245	; 0xf5
 800120c:	713b      	strb	r3, [r7, #4]
	setup_data[1] = 0x10;
 800120e:	2310      	movs	r3, #16
 8001210:	717b      	strb	r3, [r7, #5]
	setup_data[2] = 0xF4;
 8001212:	23f4      	movs	r3, #244	; 0xf4
 8001214:	71bb      	strb	r3, [r7, #6]
	setup_data[3] = 0x57;
 8001216:	2357      	movs	r3, #87	; 0x57
 8001218:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, setup_data, 4, HAL_MAX_DELAY);
 800121a:	23ec      	movs	r3, #236	; 0xec
 800121c:	b299      	uxth	r1, r3
 800121e:	1d3a      	adds	r2, r7, #4
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2304      	movs	r3, #4
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <Setup_BMP280+0x38>)
 800122a:	f005 ff75 	bl	8007118 <HAL_I2C_Master_Transmit>
	Read_BMP280_Calibration_Data();
 800122e:	f000 f807 	bl	8001240 <Read_BMP280_Calibration_Data>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000e14 	.word	0x20000e14

08001240 <Read_BMP280_Calibration_Data>:

void Read_BMP280_Calibration_Data()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&_bmp280_calib, sizeof(bmp280_calib_data), HAL_MAX_DELAY);
 8001246:	23ec      	movs	r3, #236	; 0xec
 8001248:	b299      	uxth	r1, r3
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2318      	movs	r3, #24
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <Read_BMP280_Calibration_Data+0x28>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2288      	movs	r2, #136	; 0x88
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <Read_BMP280_Calibration_Data+0x2c>)
 800125e:	f006 f859 	bl	8007314 <HAL_I2C_Mem_Read>
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000350 	.word	0x20000350
 800126c:	20000e14 	.word	0x20000e14

08001270 <Read_BMP280_PressureTemperature>:

void Read_BMP280_PressureTemperature()
{
 8001270:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&pressure_temperature_buffer, 6, HAL_MAX_DELAY);
 8001278:	23ec      	movs	r3, #236	; 0xec
 800127a:	b299      	uxth	r1, r3
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2306      	movs	r3, #6
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	4bbb      	ldr	r3, [pc, #748]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	22f7      	movs	r2, #247	; 0xf7
 800128e:	48ba      	ldr	r0, [pc, #744]	; (8001578 <Read_BMP280_PressureTemperature+0x308>)
 8001290:	f006 f840 	bl	8007314 <HAL_I2C_Mem_Read>

	adc_P = (pressure_temperature_buffer[0] << 16) | (pressure_temperature_buffer[1] << 8) | (pressure_temperature_buffer[2]);
 8001294:	4bb7      	ldr	r3, [pc, #732]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	4bb6      	ldr	r3, [pc, #728]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	4313      	orrs	r3, r2
 80012a2:	4ab4      	ldr	r2, [pc, #720]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012a4:	7892      	ldrb	r2, [r2, #2]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4ab4      	ldr	r2, [pc, #720]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012aa:	6013      	str	r3, [r2, #0]
	adc_P >>= 4;
 80012ac:	4bb3      	ldr	r3, [pc, #716]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	111b      	asrs	r3, r3, #4
 80012b2:	4ab2      	ldr	r2, [pc, #712]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012b4:	6013      	str	r3, [r2, #0]

	adc_T = (pressure_temperature_buffer[3] << 16) | (pressure_temperature_buffer[4] << 8) | (pressure_temperature_buffer[5]);
 80012b6:	4baf      	ldr	r3, [pc, #700]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	4bad      	ldr	r3, [pc, #692]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	4aab      	ldr	r2, [pc, #684]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012c6:	7952      	ldrb	r2, [r2, #5]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	4aad      	ldr	r2, [pc, #692]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012cc:	6013      	str	r3, [r2, #0]
	adc_T >>= 4;
 80012ce:	4bac      	ldr	r3, [pc, #688]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	111b      	asrs	r3, r3, #4
 80012d4:	4aaa      	ldr	r2, [pc, #680]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d6:	6013      	str	r3, [r2, #0]

	temperatureVar1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	10da      	asrs	r2, r3, #3
 80012de:	4ba9      	ldr	r3, [pc, #676]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4aa7      	ldr	r2, [pc, #668]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	12db      	asrs	r3, r3, #11
 80012f2:	4aa5      	ldr	r2, [pc, #660]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 80012f4:	6013      	str	r3, [r2, #0]
	temperatureVar2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	111b      	asrs	r3, r3, #4
 80012fc:	4aa1      	ldr	r2, [pc, #644]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012fe:	8812      	ldrh	r2, [r2, #0]
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	4a9f      	ldr	r2, [pc, #636]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	1112      	asrs	r2, r2, #4
 8001308:	499e      	ldr	r1, [pc, #632]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800130a:	8809      	ldrh	r1, [r1, #0]
 800130c:	1a52      	subs	r2, r2, r1
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	131b      	asrs	r3, r3, #12
 8001314:	4a9b      	ldr	r2, [pc, #620]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001316:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	139b      	asrs	r3, r3, #14
 8001320:	4a9a      	ldr	r2, [pc, #616]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 8001322:	6013      	str	r3, [r2, #0]

	t_fine = temperatureVar1 + temperatureVar2;
 8001324:	4b98      	ldr	r3, [pc, #608]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b98      	ldr	r3, [pc, #608]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4413      	add	r3, r2
 800132e:	4a98      	ldr	r2, [pc, #608]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001330:	6013      	str	r3, [r2, #0]

	final_temperature = (float)((t_fine * 5 + 128) >> 8) / 100;
 8001332:	4b97      	ldr	r3, [pc, #604]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3380      	adds	r3, #128	; 0x80
 800133e:	121b      	asrs	r3, r3, #8
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001594 <Read_BMP280_PressureTemperature+0x324>
 800134c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001350:	4b91      	ldr	r3, [pc, #580]	; (8001598 <Read_BMP280_PressureTemperature+0x328>)
 8001352:	edc3 7a00 	vstr	s15, [r3]

	pressureVar1 = ((int64_t)t_fine) - 128000;
 8001356:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001360:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001364:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001368:	4a8c      	ldr	r2, [pc, #560]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800136a:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P6;
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001370:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001374:	4b89      	ldr	r3, [pc, #548]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800137a:	fb03 f502 	mul.w	r5, r3, r2
 800137e:	fb01 f004 	mul.w	r0, r1, r4
 8001382:	4428      	add	r0, r5
 8001384:	fba1 3403 	umull	r3, r4, r1, r3
 8001388:	1902      	adds	r2, r0, r4
 800138a:	4614      	mov	r4, r2
 800138c:	4a7d      	ldr	r2, [pc, #500]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800138e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001392:	b211      	sxth	r1, r2
 8001394:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001398:	fb01 f504 	mul.w	r5, r1, r4
 800139c:	fb03 f002 	mul.w	r0, r3, r2
 80013a0:	4428      	add	r0, r5
 80013a2:	fba3 3401 	umull	r3, r4, r3, r1
 80013a6:	1902      	adds	r2, r0, r4
 80013a8:	4614      	mov	r4, r2
 80013aa:	4a7d      	ldr	r2, [pc, #500]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013ac:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 80013b0:	4b74      	ldr	r3, [pc, #464]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b6:	b219      	sxth	r1, r3
 80013b8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013bc:	4b77      	ldr	r3, [pc, #476]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80013be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013c2:	fb03 f502 	mul.w	r5, r3, r2
 80013c6:	fb01 f004 	mul.w	r0, r1, r4
 80013ca:	4428      	add	r0, r5
 80013cc:	fba1 1203 	umull	r1, r2, r1, r3
 80013d0:	1883      	adds	r3, r0, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	f04f 0500 	mov.w	r5, #0
 80013d8:	f04f 0600 	mov.w	r6, #0
 80013dc:	0456      	lsls	r6, r2, #17
 80013de:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80013e2:	044d      	lsls	r5, r1, #17
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80013ea:	186b      	adds	r3, r5, r1
 80013ec:	eb46 0402 	adc.w	r4, r6, r2
 80013f0:	4a6b      	ldr	r2, [pc, #428]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013f2:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013fc:	b219      	sxth	r1, r3
 80013fe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001402:	f04f 0500 	mov.w	r5, #0
 8001406:	f04f 0600 	mov.w	r6, #0
 800140a:	00ce      	lsls	r6, r1, #3
 800140c:	2500      	movs	r5, #0
 800140e:	4a64      	ldr	r2, [pc, #400]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001410:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001414:	186b      	adds	r3, r5, r1
 8001416:	eb46 0402 	adc.w	r4, r6, r2
 800141a:	4a61      	ldr	r2, [pc, #388]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 800141c:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = ((pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P3) >> 8) + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001422:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800142c:	fb03 f502 	mul.w	r5, r3, r2
 8001430:	fb01 f004 	mul.w	r0, r1, r4
 8001434:	4428      	add	r0, r5
 8001436:	fba1 3403 	umull	r3, r4, r1, r3
 800143a:	1902      	adds	r2, r0, r4
 800143c:	4614      	mov	r4, r2
 800143e:	4a51      	ldr	r2, [pc, #324]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001440:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001444:	b211      	sxth	r1, r2
 8001446:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800144a:	fb01 f504 	mul.w	r5, r1, r4
 800144e:	fb03 f002 	mul.w	r0, r3, r2
 8001452:	4428      	add	r0, r5
 8001454:	fba3 3401 	umull	r3, r4, r3, r1
 8001458:	1902      	adds	r2, r0, r4
 800145a:	4614      	mov	r4, r2
 800145c:	f04f 0100 	mov.w	r1, #0
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	0a19      	lsrs	r1, r3, #8
 8001466:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800146a:	1222      	asrs	r2, r4, #8
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800146e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001472:	b21d      	sxth	r5, r3
 8001474:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800147a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800147e:	fb03 fc06 	mul.w	ip, r3, r6
 8001482:	fb05 f004 	mul.w	r0, r5, r4
 8001486:	4460      	add	r0, ip
 8001488:	fba5 5603 	umull	r5, r6, r5, r3
 800148c:	1983      	adds	r3, r0, r6
 800148e:	461e      	mov	r6, r3
 8001490:	f04f 0b00 	mov.w	fp, #0
 8001494:	f04f 0c00 	mov.w	ip, #0
 8001498:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800149c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80014a0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80014a4:	eb1b 0301 	adds.w	r3, fp, r1
 80014a8:	eb4c 0402 	adc.w	r4, ip, r2
 80014ac:	4a3b      	ldr	r2, [pc, #236]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ae:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = (((((int64_t)1) << 47) + pressureVar1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014b8:	1c19      	adds	r1, r3, #0
 80014ba:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f04f 0400 	mov.w	r4, #0
 80014c8:	fb03 f502 	mul.w	r5, r3, r2
 80014cc:	fb01 f004 	mul.w	r0, r1, r4
 80014d0:	4428      	add	r0, r5
 80014d2:	fba1 3403 	umull	r3, r4, r1, r3
 80014d6:	1902      	adds	r2, r0, r4
 80014d8:	4614      	mov	r4, r2
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	1061      	asrs	r1, r4, #1
 80014e4:	17e2      	asrs	r2, r4, #31
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014e8:	e9c3 1200 	strd	r1, r2, [r3]

	if (pressureVar1 != 0)
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014f2:	4323      	orrs	r3, r4
 80014f4:	f000 8156 	beq.w	80017a4 <Read_BMP280_PressureTemperature+0x534>
	{
		pressureVarP = 1048576 - adc_P;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001500:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 8001506:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVarP = (((pressureVarP << 31) - pressureVar2) * 3125) / pressureVar1;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 800150c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f04f 0400 	mov.w	r4, #0
 8001518:	07d4      	lsls	r4, r2, #31
 800151a:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 800151e:	07cb      	lsls	r3, r1, #31
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001522:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001526:	1a5b      	subs	r3, r3, r1
 8001528:	eb64 0402 	sbc.w	r4, r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	4626      	mov	r6, r4
 8001530:	46ab      	mov	fp, r5
 8001532:	46b4      	mov	ip, r6
 8001534:	eb1b 030b 	adds.w	r3, fp, fp
 8001538:	eb4c 040c 	adc.w	r4, ip, ip
 800153c:	469b      	mov	fp, r3
 800153e:	46a4      	mov	ip, r4
 8001540:	eb1b 0b05 	adds.w	fp, fp, r5
 8001544:	eb4c 0c06 	adc.w	ip, ip, r6
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001554:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 8001558:	ea4f 118b 	mov.w	r1, fp, lsl #6
 800155c:	eb1b 0b01 	adds.w	fp, fp, r1
 8001560:	eb4c 0c02 	adc.w	ip, ip, r2
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001570:	e01a      	b.n	80015a8 <Read_BMP280_PressureTemperature+0x338>
 8001572:	bf00      	nop
 8001574:	20000320 	.word	0x20000320
 8001578:	20000e14 	.word	0x20000e14
 800157c:	2000033c 	.word	0x2000033c
 8001580:	20000340 	.word	0x20000340
 8001584:	20000350 	.word	0x20000350
 8001588:	2000034c 	.word	0x2000034c
 800158c:	2000031c 	.word	0x2000031c
 8001590:	20000370 	.word	0x20000370
 8001594:	42c80000 	.word	0x42c80000
 8001598:	20000318 	.word	0x20000318
 800159c:	20000378 	.word	0x20000378
 80015a0:	20000330 	.word	0x20000330
 80015a4:	20000368 	.word	0x20000368
 80015a8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015ac:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015b0:	468b      	mov	fp, r1
 80015b2:	4694      	mov	ip, r2
 80015b4:	eb1b 0b05 	adds.w	fp, fp, r5
 80015b8:	eb4c 0c06 	adc.w	ip, ip, r6
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80015c8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015cc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015d0:	468b      	mov	fp, r1
 80015d2:	4694      	mov	ip, r2
 80015d4:	eb1b 0005 	adds.w	r0, fp, r5
 80015d8:	eb4c 0106 	adc.w	r1, ip, r6
 80015dc:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80015de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4623      	mov	r3, r4
 80015e6:	f7ff fc3d 	bl	8000e64 <__aeabi_ldivmod>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80015f0:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar1 = (((int64_t)_bmp280_calib.dig_P9) * (pressureVarP >> 13) * (pressureVarP >> 13)) >> 25;
 80015f4:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80015f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80015fa:	b219      	sxth	r1, r3
 80015fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001602:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	f04f 0400 	mov.w	r4, #0
 800160e:	0b6b      	lsrs	r3, r5, #13
 8001610:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001614:	1374      	asrs	r4, r6, #13
 8001616:	fb03 f502 	mul.w	r5, r3, r2
 800161a:	fb01 f004 	mul.w	r0, r1, r4
 800161e:	4428      	add	r0, r5
 8001620:	fba1 1203 	umull	r1, r2, r1, r3
 8001624:	1883      	adds	r3, r0, r2
 8001626:	461a      	mov	r2, r3
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 800162a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	f04f 0400 	mov.w	r4, #0
 8001636:	0b6b      	lsrs	r3, r5, #13
 8001638:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800163c:	1374      	asrs	r4, r6, #13
 800163e:	fb03 f502 	mul.w	r5, r3, r2
 8001642:	fb01 f004 	mul.w	r0, r1, r4
 8001646:	4428      	add	r0, r5
 8001648:	fba1 1203 	umull	r1, r2, r1, r3
 800164c:	1883      	adds	r3, r0, r2
 800164e:	461a      	mov	r2, r3
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	0e4b      	lsrs	r3, r1, #25
 800165a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800165e:	1654      	asrs	r4, r2, #25
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 8001662:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar2 = (((int64_t)_bmp280_calib.dig_P8) * pressureVarP) >> 19;
 8001666:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 8001668:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800166c:	b219      	sxth	r1, r3
 800166e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001674:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001678:	fb03 f502 	mul.w	r5, r3, r2
 800167c:	fb01 f004 	mul.w	r0, r1, r4
 8001680:	4428      	add	r0, r5
 8001682:	fba1 1203 	umull	r1, r2, r1, r3
 8001686:	1883      	adds	r3, r0, r2
 8001688:	461a      	mov	r2, r3
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f04f 0400 	mov.w	r4, #0
 8001692:	0ccb      	lsrs	r3, r1, #19
 8001694:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001698:	14d4      	asrs	r4, r2, #19
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 800169c:	e9c2 3400 	strd	r3, r4, [r2]

		pressureVarP = ((pressureVarP + pressureVar1 + pressureVar2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016a2:	e9d3 5600 	ldrd	r5, r6, [r3]
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80016a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016ac:	18e9      	adds	r1, r5, r3
 80016ae:	eb46 0204 	adc.w	r2, r6, r4
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 80016b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016b8:	185d      	adds	r5, r3, r1
 80016ba:	eb44 0602 	adc.w	r6, r4, r2
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	0a29      	lsrs	r1, r5, #8
 80016c8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80016cc:	1232      	asrs	r2, r6, #8
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80016d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016d4:	b21d      	sxth	r5, r3
 80016d6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80016da:	f04f 0b00 	mov.w	fp, #0
 80016de:	f04f 0c00 	mov.w	ip, #0
 80016e2:	ea4f 1c06 	mov.w	ip, r6, lsl #4
 80016e6:	ea4c 7c15 	orr.w	ip, ip, r5, lsr #28
 80016ea:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 80016ee:	eb1b 0301 	adds.w	r3, fp, r1
 80016f2:	eb4c 0402 	adc.w	r4, ip, r2
 80016f6:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016f8:	e9c2 3400 	strd	r3, r4, [r2]

		final_pressure = (float)pressureVarP / 256;
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001702:	4618      	mov	r0, r3
 8001704:	4621      	mov	r1, r4
 8001706:	f7ff fb6f 	bl	8000de8 <__aeabi_l2f>
 800170a:	ee06 0a90 	vmov	s13, r0
 800170e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017d0 <Read_BMP280_PressureTemperature+0x560>
 8001712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
		final_pressure /= 100;
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80017d8 <Read_BMP280_PressureTemperature+0x568>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800172c:	edc3 7a00 	vstr	s15, [r3]

		temp_altitude = (44330 * (1.0 - pow(final_pressure / seaLevelhPa, 0.1903)));
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <Read_BMP280_PressureTemperature+0x56c>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001740:	ee16 0a90 	vmov	r0, s13
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80017b0 <Read_BMP280_PressureTemperature+0x540>
 8001750:	ec44 3b10 	vmov	d0, r3, r4
 8001754:	f00f fbb8 	bl	8010ec8 <pow>
 8001758:	ec54 3b10 	vmov	r3, r4, d0
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	f04f 0000 	mov.w	r0, #0
 8001764:	491e      	ldr	r1, [pc, #120]	; (80017e0 <Read_BMP280_PressureTemperature+0x570>)
 8001766:	f7fe fd8f 	bl	8000288 <__aeabi_dsub>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	a311      	add	r3, pc, #68	; (adr r3, 80017b8 <Read_BMP280_PressureTemperature+0x548>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	f7ff fa10 	bl	8000ba8 <__aeabi_d2f>
 8001788:	4602      	mov	r2, r0
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 800178c:	601a      	str	r2, [r3, #0]
		read_bmp_altitude = temp_altitude - altitude_calibration;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <Read_BMP280_PressureTemperature+0x578>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <Read_BMP280_PressureTemperature+0x57c>)
 80017a0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	1a36e2eb 	.word	0x1a36e2eb
 80017b4:	3fc85bc0 	.word	0x3fc85bc0
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40e5a540 	.word	0x40e5a540
 80017c0:	20000378 	.word	0x20000378
 80017c4:	20000368 	.word	0x20000368
 80017c8:	20000350 	.word	0x20000350
 80017cc:	20000330 	.word	0x20000330
 80017d0:	43800000 	.word	0x43800000
 80017d4:	20000348 	.word	0x20000348
 80017d8:	42c80000 	.word	0x42c80000
 80017dc:	20000000 	.word	0x20000000
 80017e0:	3ff00000 	.word	0x3ff00000
 80017e4:	20000344 	.word	0x20000344
 80017e8:	20000328 	.word	0x20000328
 80017ec:	20000338 	.word	0x20000338

080017f0 <Calibrate_BMP280>:

void Calibrate_BMP280()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	altitude_calibration = 0;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <Calibrate_BMP280+0x5c>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 30; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e012      	b.n	800182a <Calibrate_BMP280+0x3a>
	{
		Read_BMP280_PressureTemperature();
 8001804:	f7ff fd34 	bl	8001270 <Read_BMP280_PressureTemperature>
		altitude_calibration += temp_altitude;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <Calibrate_BMP280+0x5c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <Calibrate_BMP280+0x60>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <Calibrate_BMP280+0x5c>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f004 fd10 	bl	8006244 <HAL_Delay>
	for(int i = 0; i < 30; i++)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b1d      	cmp	r3, #29
 800182e:	dde9      	ble.n	8001804 <Calibrate_BMP280+0x14>
	}

	altitude_calibration /= 30.00;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <Calibrate_BMP280+0x5c>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800183a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <Calibrate_BMP280+0x5c>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000328 	.word	0x20000328
 8001850:	20000344 	.word	0x20000344

08001854 <Setup_Compass>:
float y_scale, z_scale;

float heading_difference_return = 0;

void Setup_Compass()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af02      	add	r7, sp, #8
	uint8_t setup_data[4];
	setup_data[0] = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	713b      	strb	r3, [r7, #4]
	setup_data[1] = 0x78;
 800185e:	2378      	movs	r3, #120	; 0x78
 8001860:	717b      	strb	r3, [r7, #5]
	setup_data[2] = 0x20;
 8001862:	2320      	movs	r3, #32
 8001864:	71bb      	strb	r3, [r7, #6]
	setup_data[3] = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, COMPASS_ADDR, setup_data, 4, HAL_MAX_DELAY);
 800186a:	233c      	movs	r3, #60	; 0x3c
 800186c:	b299      	uxth	r1, r3
 800186e:	1d3a      	adds	r2, r7, #4
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2304      	movs	r3, #4
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <Setup_Compass+0x48>)
 800187a:	f005 fc4d 	bl	8007118 <HAL_I2C_Master_Transmit>
	Calculate_Compass_Calibration();
 800187e:	f000 fbcb 	bl	8002018 <Calculate_Compass_Calibration>

	HAL_Delay(5);
 8001882:	2005      	movs	r0, #5
 8001884:	f004 fcde 	bl	8006244 <HAL_Delay>

	Read_Compass();
 8001888:	f000 f80e 	bl	80018a8 <Read_Compass>

	gyro_z_angle = compass_heading;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <Setup_Compass+0x4c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <Setup_Compass+0x50>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000e14 	.word	0x20000e14
 80018a0:	20000260 	.word	0x20000260
 80018a4:	20001010 	.word	0x20001010

080018a8 <Read_Compass>:

float x_angle_offset = 2.00;
float y_angle_offset = 3.00;

void Read_Compass()
{
 80018a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, COMPASS_ADDR, 0x03, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&raw_compass_data, 6, HAL_MAX_DELAY);
 80018b0:	233c      	movs	r3, #60	; 0x3c
 80018b2:	b299      	uxth	r1, r3
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2306      	movs	r3, #6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	4bd6      	ldr	r3, [pc, #856]	; (8001c18 <Read_Compass+0x370>)
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	48d5      	ldr	r0, [pc, #852]	; (8001c1c <Read_Compass+0x374>)
 80018c8:	f005 fd24 	bl	8007314 <HAL_I2C_Mem_Read>

	compassY = (int16_t)((raw_compass_data[0] << 8) | raw_compass_data[1]);
 80018cc:	4bd2      	ldr	r3, [pc, #840]	; (8001c18 <Read_Compass+0x370>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4bd0      	ldr	r3, [pc, #832]	; (8001c18 <Read_Compass+0x370>)
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	4bd0      	ldr	r3, [pc, #832]	; (8001c20 <Read_Compass+0x378>)
 80018e0:	801a      	strh	r2, [r3, #0]
	compassZ = (int16_t)((raw_compass_data[2] << 8) | raw_compass_data[3]);
 80018e2:	4bcd      	ldr	r3, [pc, #820]	; (8001c18 <Read_Compass+0x370>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4bcb      	ldr	r3, [pc, #812]	; (8001c18 <Read_Compass+0x370>)
 80018ec:	78db      	ldrb	r3, [r3, #3]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	4bcb      	ldr	r3, [pc, #812]	; (8001c24 <Read_Compass+0x37c>)
 80018f6:	801a      	strh	r2, [r3, #0]
	compassX = (int16_t)((raw_compass_data[4] << 8) | raw_compass_data[5]);
 80018f8:	4bc7      	ldr	r3, [pc, #796]	; (8001c18 <Read_Compass+0x370>)
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4bc5      	ldr	r3, [pc, #788]	; (8001c18 <Read_Compass+0x370>)
 8001902:	795b      	ldrb	r3, [r3, #5]
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21a      	sxth	r2, r3
 800190a:	4bc7      	ldr	r3, [pc, #796]	; (8001c28 <Read_Compass+0x380>)
 800190c:	801a      	strh	r2, [r3, #0]

	compassY += compass_offset_y;
 800190e:	4bc4      	ldr	r3, [pc, #784]	; (8001c20 <Read_Compass+0x378>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191c:	4bc3      	ldr	r3, [pc, #780]	; (8001c2c <Read_Compass+0x384>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192a:	ee17 3a90 	vmov	r3, s15
 800192e:	b21a      	sxth	r2, r3
 8001930:	4bbb      	ldr	r3, [pc, #748]	; (8001c20 <Read_Compass+0x378>)
 8001932:	801a      	strh	r2, [r3, #0]
	compassY *= y_scale;
 8001934:	4bba      	ldr	r3, [pc, #744]	; (8001c20 <Read_Compass+0x378>)
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001942:	4bbb      	ldr	r3, [pc, #748]	; (8001c30 <Read_Compass+0x388>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	b21a      	sxth	r2, r3
 8001956:	4bb2      	ldr	r3, [pc, #712]	; (8001c20 <Read_Compass+0x378>)
 8001958:	801a      	strh	r2, [r3, #0]

	compassZ += compass_offset_z;
 800195a:	4bb2      	ldr	r3, [pc, #712]	; (8001c24 <Read_Compass+0x37c>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	4bb2      	ldr	r3, [pc, #712]	; (8001c34 <Read_Compass+0x38c>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	b21a      	sxth	r2, r3
 800197c:	4ba9      	ldr	r3, [pc, #676]	; (8001c24 <Read_Compass+0x37c>)
 800197e:	801a      	strh	r2, [r3, #0]
	compassZ *= z_scale;
 8001980:	4ba8      	ldr	r3, [pc, #672]	; (8001c24 <Read_Compass+0x37c>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	4baa      	ldr	r3, [pc, #680]	; (8001c38 <Read_Compass+0x390>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <Read_Compass+0x37c>)
 80019a4:	801a      	strh	r2, [r3, #0]

	compassX += compass_offset_x;
 80019a6:	4ba0      	ldr	r3, [pc, #640]	; (8001c28 <Read_Compass+0x380>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <Read_Compass+0x394>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <Read_Compass+0x380>)
 80019ca:	801a      	strh	r2, [r3, #0]

	comX = ((float)compassX * cos((gyro_y_angle + y_angle_offset) * 0.0174533)) + ((float)compassY * sin((gyro_x_angle + x_angle_offset) * 0.0174533) * sin((gyro_y_angle + y_angle_offset) * 0.0174533)) - ((float)compassZ * cos((gyro_x_angle + x_angle_offset) * 0.0174533) * sin((gyro_y_angle + y_angle_offset) * 0.0174533));
 80019cc:	4b96      	ldr	r3, [pc, #600]	; (8001c28 <Read_Compass+0x380>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	ee17 0a90 	vmov	r0, s15
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <Read_Compass+0x398>)
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	4b95      	ldr	r3, [pc, #596]	; (8001c44 <Read_Compass+0x39c>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f7fe fda5 	bl	8000548 <__aeabi_f2d>
 80019fe:	a384      	add	r3, pc, #528	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fdf8 	bl	80005f8 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	ec43 2b17 	vmov	d7, r2, r3
 8001a10:	eeb0 0a47 	vmov.f32	s0, s14
 8001a14:	eef0 0a67 	vmov.f32	s1, s15
 8001a18:	f00f f926 	bl	8010c68 <cos>
 8001a1c:	ec53 2b10 	vmov	r2, r3, d0
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fde8 	bl	80005f8 <__aeabi_dmul>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4625      	mov	r5, r4
 8001a2e:	461c      	mov	r4, r3
 8001a30:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <Read_Compass+0x378>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	ee17 0a90 	vmov	r0, s15
 8001a42:	f7fe fd81 	bl	8000548 <__aeabi_f2d>
 8001a46:	4680      	mov	r8, r0
 8001a48:	4689      	mov	r9, r1
 8001a4a:	4b7f      	ldr	r3, [pc, #508]	; (8001c48 <Read_Compass+0x3a0>)
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <Read_Compass+0x3a4>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5a:	ee17 0a90 	vmov	r0, s15
 8001a5e:	f7fe fd73 	bl	8000548 <__aeabi_f2d>
 8001a62:	a36b      	add	r3, pc, #428	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fdc6 	bl	80005f8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ec43 2b17 	vmov	d7, r2, r3
 8001a74:	eeb0 0a47 	vmov.f32	s0, s14
 8001a78:	eef0 0a67 	vmov.f32	s1, s15
 8001a7c:	f00f f984 	bl	8010d88 <sin>
 8001a80:	ec53 2b10 	vmov	r2, r3, d0
 8001a84:	4640      	mov	r0, r8
 8001a86:	4649      	mov	r1, r9
 8001a88:	f7fe fdb6 	bl	80005f8 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4690      	mov	r8, r2
 8001a92:	4699      	mov	r9, r3
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <Read_Compass+0x398>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <Read_Compass+0x39c>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	ee17 0a90 	vmov	r0, s15
 8001aa8:	f7fe fd4e 	bl	8000548 <__aeabi_f2d>
 8001aac:	a358      	add	r3, pc, #352	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fda1 	bl	80005f8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ec43 2b17 	vmov	d7, r2, r3
 8001abe:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac2:	eef0 0a67 	vmov.f32	s1, s15
 8001ac6:	f00f f95f 	bl	8010d88 <sin>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fd91 	bl	80005f8 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbd5 	bl	800028c <__adddf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	4625      	mov	r5, r4
 8001ae8:	461c      	mov	r4, r3
 8001aea:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <Read_Compass+0x37c>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af8:	ee17 0a90 	vmov	r0, s15
 8001afc:	f7fe fd24 	bl	8000548 <__aeabi_f2d>
 8001b00:	4680      	mov	r8, r0
 8001b02:	4689      	mov	r9, r1
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <Read_Compass+0x3a0>)
 8001b06:	ed93 7a00 	vldr	s14, [r3]
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <Read_Compass+0x3a4>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b14:	ee17 0a90 	vmov	r0, s15
 8001b18:	f7fe fd16 	bl	8000548 <__aeabi_f2d>
 8001b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ec43 2b17 	vmov	d7, r2, r3
 8001b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b32:	eef0 0a67 	vmov.f32	s1, s15
 8001b36:	f00f f897 	bl	8010c68 <cos>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4640      	mov	r0, r8
 8001b40:	4649      	mov	r1, r9
 8001b42:	f7fe fd59 	bl	80005f8 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <Read_Compass+0x398>)
 8001b50:	ed93 7a00 	vldr	s14, [r3]
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <Read_Compass+0x39c>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	ee17 0a90 	vmov	r0, s15
 8001b62:	f7fe fcf1 	bl	8000548 <__aeabi_f2d>
 8001b66:	a32a      	add	r3, pc, #168	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ec43 2b17 	vmov	d7, r2, r3
 8001b78:	eeb0 0a47 	vmov.f32	s0, s14
 8001b7c:	eef0 0a67 	vmov.f32	s1, s15
 8001b80:	f00f f902 	bl	8010d88 <sin>
 8001b84:	ec53 2b10 	vmov	r2, r3, d0
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	f7fe fd34 	bl	80005f8 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fb76 	bl	8000288 <__aeabi_dsub>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f7ff f800 	bl	8000ba8 <__aeabi_d2f>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <Read_Compass+0x3a8>)
 8001bac:	601a      	str	r2, [r3, #0]

	comY = ((float)compassY * cos((gyro_x_angle + x_angle_offset) * 0.0174533)) + ((float)compassZ * sin((gyro_x_angle + x_angle_offset) * 0.0174533));
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <Read_Compass+0x378>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	ee17 0a90 	vmov	r0, s15
 8001bc0:	f7fe fcc2 	bl	8000548 <__aeabi_f2d>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <Read_Compass+0x3a0>)
 8001bca:	ed93 7a00 	vldr	s14, [r3]
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <Read_Compass+0x3a4>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	ee17 0a90 	vmov	r0, s15
 8001bdc:	f7fe fcb4 	bl	8000548 <__aeabi_f2d>
 8001be0:	a30b      	add	r3, pc, #44	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	ec43 2b17 	vmov	d7, r2, r3
 8001bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf6:	eef0 0a67 	vmov.f32	s1, s15
 8001bfa:	f00f f835 	bl	8010c68 <cos>
 8001bfe:	ec53 2b10 	vmov	r2, r3, d0
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	e023      	b.n	8001c54 <Read_Compass+0x3ac>
 8001c0c:	f3af 8000 	nop.w
 8001c10:	22d4405f 	.word	0x22d4405f
 8001c14:	3f91df47 	.word	0x3f91df47
 8001c18:	20000380 	.word	0x20000380
 8001c1c:	20000e14 	.word	0x20000e14
 8001c20:	20000390 	.word	0x20000390
 8001c24:	200003ba 	.word	0x200003ba
 8001c28:	200003bc 	.word	0x200003bc
 8001c2c:	20000270 	.word	0x20000270
 8001c30:	2000038c 	.word	0x2000038c
 8001c34:	20000274 	.word	0x20000274
 8001c38:	20000388 	.word	0x20000388
 8001c3c:	2000026c 	.word	0x2000026c
 8001c40:	20000ff0 	.word	0x20000ff0
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000fe4 	.word	0x20000fe4
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	20000264 	.word	0x20000264
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4625      	mov	r5, r4
 8001c5a:	461c      	mov	r4, r3
 8001c5c:	4b6e      	ldr	r3, [pc, #440]	; (8001e18 <Read_Compass+0x570>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	ee17 0a90 	vmov	r0, s15
 8001c6e:	f7fe fc6b 	bl	8000548 <__aeabi_f2d>
 8001c72:	4680      	mov	r8, r0
 8001c74:	4689      	mov	r9, r1
 8001c76:	4b69      	ldr	r3, [pc, #420]	; (8001e1c <Read_Compass+0x574>)
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <Read_Compass+0x578>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc5d 	bl	8000548 <__aeabi_f2d>
 8001c8e:	a35e      	add	r3, pc, #376	; (adr r3, 8001e08 <Read_Compass+0x560>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcb0 	bl	80005f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ec43 2b17 	vmov	d7, r2, r3
 8001ca0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca4:	eef0 0a67 	vmov.f32	s1, s15
 8001ca8:	f00f f86e 	bl	8010d88 <sin>
 8001cac:	ec53 2b10 	vmov	r2, r3, d0
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	f7fe fca0 	bl	80005f8 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fae4 	bl	800028c <__adddf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4621      	mov	r1, r4
 8001ccc:	f7fe ff6c 	bl	8000ba8 <__aeabi_d2f>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <Read_Compass+0x57c>)
 8001cd4:	601a      	str	r2, [r3, #0]

	if (comY < 0)
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <Read_Compass+0x57c>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d531      	bpl.n	8001d4a <Read_Compass+0x4a2>
		compass_heading = 180 + (180 + ((atan2f((float)comY, (float)comX)) * 57.29577));
 8001ce6:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <Read_Compass+0x57c>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	4b4e      	ldr	r3, [pc, #312]	; (8001e28 <Read_Compass+0x580>)
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	eef0 0a47 	vmov.f32	s1, s14
 8001cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfa:	f00f faaf 	bl	801125c <atan2f>
 8001cfe:	ee10 3a10 	vmov	r3, s0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc20 	bl	8000548 <__aeabi_f2d>
 8001d08:	a341      	add	r3, pc, #260	; (adr r3, 8001e10 <Read_Compass+0x568>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fc73 	bl	80005f8 <__aeabi_dmul>
 8001d12:	4603      	mov	r3, r0
 8001d14:	460c      	mov	r4, r1
 8001d16:	4618      	mov	r0, r3
 8001d18:	4621      	mov	r1, r4
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <Read_Compass+0x584>)
 8001d20:	f7fe fab4 	bl	800028c <__adddf3>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <Read_Compass+0x584>)
 8001d32:	f7fe faab 	bl	800028c <__adddf3>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	f7fe ff33 	bl	8000ba8 <__aeabi_d2f>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <Read_Compass+0x588>)
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e01e      	b.n	8001d88 <Read_Compass+0x4e0>
	else
		compass_heading = atan2f((float)comY, (float)comX) * 57.29577;
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <Read_Compass+0x57c>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <Read_Compass+0x580>)
 8001d52:	ed93 7a00 	vldr	s14, [r3]
 8001d56:	eef0 0a47 	vmov.f32	s1, s14
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	f00f fa7d 	bl	801125c <atan2f>
 8001d62:	ee10 3a10 	vmov	r3, s0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	a328      	add	r3, pc, #160	; (adr r3, 8001e10 <Read_Compass+0x568>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc41 	bl	80005f8 <__aeabi_dmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	f7fe ff13 	bl	8000ba8 <__aeabi_d2f>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <Read_Compass+0x588>)
 8001d86:	601a      	str	r2, [r3, #0]

	compass_heading = -compass_heading;
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <Read_Compass+0x588>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	eef1 7a67 	vneg.f32	s15, s15
 8001d92:	4b27      	ldr	r3, [pc, #156]	; (8001e30 <Read_Compass+0x588>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
	compass_heading -= 5;
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <Read_Compass+0x588>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <Read_Compass+0x588>)
 8001da8:	edc3 7a00 	vstr	s15, [r3]

	if (compass_heading < 0)
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <Read_Compass+0x588>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	d50a      	bpl.n	8001dd2 <Read_Compass+0x52a>
		compass_heading += 360;
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <Read_Compass+0x588>)
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001e34 <Read_Compass+0x58c>
 8001dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <Read_Compass+0x588>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
	else if (compass_heading >= 360)
		compass_heading -= 360;
}
 8001dd0:	e014      	b.n	8001dfc <Read_Compass+0x554>
	else if (compass_heading >= 360)
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <Read_Compass+0x588>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001e34 <Read_Compass+0x58c>
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	da00      	bge.n	8001de8 <Read_Compass+0x540>
}
 8001de6:	e009      	b.n	8001dfc <Read_Compass+0x554>
		compass_heading -= 360;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <Read_Compass+0x588>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001e34 <Read_Compass+0x58c>
 8001df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <Read_Compass+0x588>)
 8001df8:	edc3 7a00 	vstr	s15, [r3]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e04:	f3af 8000 	nop.w
 8001e08:	22d4405f 	.word	0x22d4405f
 8001e0c:	3f91df47 	.word	0x3f91df47
 8001e10:	ca9691a7 	.word	0xca9691a7
 8001e14:	404ca5db 	.word	0x404ca5db
 8001e18:	200003ba 	.word	0x200003ba
 8001e1c:	20000fe4 	.word	0x20000fe4
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000268 	.word	0x20000268
 8001e28:	20000264 	.word	0x20000264
 8001e2c:	40668000 	.word	0x40668000
 8001e30:	20000260 	.word	0x20000260
 8001e34:	43b40000 	.word	0x43b40000

08001e38 <Calibrate_Compass>:

void Calibrate_Compass()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af04      	add	r7, sp, #16
	compass_x_min = 0;
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <Calibrate_Compass+0x1a4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	801a      	strh	r2, [r3, #0]
	compass_x_max = 0;
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <Calibrate_Compass+0x1a8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	801a      	strh	r2, [r3, #0]
	compass_y_min = 0;
 8001e4a:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <Calibrate_Compass+0x1ac>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	801a      	strh	r2, [r3, #0]
	compass_y_max = 0;
 8001e50:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <Calibrate_Compass+0x1b0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	801a      	strh	r2, [r3, #0]
	compass_z_min = 0;
 8001e56:	4b65      	ldr	r3, [pc, #404]	; (8001fec <Calibrate_Compass+0x1b4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	801a      	strh	r2, [r3, #0]
	compass_z_max = 0;
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <Calibrate_Compass+0x1b8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	801a      	strh	r2, [r3, #0]

	calibrate_compass_timer = GetMillis();
 8001e62:	f002 ff03 	bl	8004c6c <GetMillis>
 8001e66:	4602      	mov	r2, r0
 8001e68:	4b62      	ldr	r3, [pc, #392]	; (8001ff4 <Calibrate_Compass+0x1bc>)
 8001e6a:	601a      	str	r2, [r3, #0]

	while(GetMillisDifference(&calibrate_compass_timer) < 8000)
 8001e6c:	e082      	b.n	8001f74 <Calibrate_Compass+0x13c>
	{
		HAL_I2C_Mem_Read(&hi2c1, COMPASS_ADDR, 0x03, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&raw_compass_data, 6, HAL_MAX_DELAY);
 8001e6e:	233c      	movs	r3, #60	; 0x3c
 8001e70:	b299      	uxth	r1, r3
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2306      	movs	r3, #6
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <Calibrate_Compass+0x1c0>)
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	485d      	ldr	r0, [pc, #372]	; (8001ffc <Calibrate_Compass+0x1c4>)
 8001e86:	f005 fa45 	bl	8007314 <HAL_I2C_Mem_Read>

		compassY = (int16_t)((raw_compass_data[0] << 8) | raw_compass_data[1]);
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <Calibrate_Compass+0x1c0>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <Calibrate_Compass+0x1c0>)
 8001e94:	785b      	ldrb	r3, [r3, #1]
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b58      	ldr	r3, [pc, #352]	; (8002000 <Calibrate_Compass+0x1c8>)
 8001e9e:	801a      	strh	r2, [r3, #0]
		compassZ = (int16_t)((raw_compass_data[2] << 8) | raw_compass_data[3]);
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <Calibrate_Compass+0x1c0>)
 8001ea2:	789b      	ldrb	r3, [r3, #2]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <Calibrate_Compass+0x1c0>)
 8001eaa:	78db      	ldrb	r3, [r3, #3]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <Calibrate_Compass+0x1cc>)
 8001eb4:	801a      	strh	r2, [r3, #0]
		compassX = (int16_t)((raw_compass_data[4] << 8) | raw_compass_data[5]);
 8001eb6:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <Calibrate_Compass+0x1c0>)
 8001eb8:	791b      	ldrb	r3, [r3, #4]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	4b4e      	ldr	r3, [pc, #312]	; (8001ff8 <Calibrate_Compass+0x1c0>)
 8001ec0:	795b      	ldrb	r3, [r3, #5]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <Calibrate_Compass+0x1d0>)
 8001eca:	801a      	strh	r2, [r3, #0]

		if (compassX > compass_x_max)
 8001ecc:	4b4e      	ldr	r3, [pc, #312]	; (8002008 <Calibrate_Compass+0x1d0>)
 8001ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ed2:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <Calibrate_Compass+0x1a8>)
 8001ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	dd05      	ble.n	8001ee8 <Calibrate_Compass+0xb0>
			compass_x_max = compassX;
 8001edc:	4b4a      	ldr	r3, [pc, #296]	; (8002008 <Calibrate_Compass+0x1d0>)
 8001ede:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <Calibrate_Compass+0x1a8>)
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	e00c      	b.n	8001f02 <Calibrate_Compass+0xca>
		else if (compassX < compass_x_min)
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <Calibrate_Compass+0x1d0>)
 8001eea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eee:	4b3b      	ldr	r3, [pc, #236]	; (8001fdc <Calibrate_Compass+0x1a4>)
 8001ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	da04      	bge.n	8001f02 <Calibrate_Compass+0xca>
			compass_x_min = compassX;
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <Calibrate_Compass+0x1d0>)
 8001efa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001efe:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <Calibrate_Compass+0x1a4>)
 8001f00:	801a      	strh	r2, [r3, #0]

		if (compassZ > compass_z_max)
 8001f02:	4b40      	ldr	r3, [pc, #256]	; (8002004 <Calibrate_Compass+0x1cc>)
 8001f04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <Calibrate_Compass+0x1b8>)
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dd05      	ble.n	8001f1e <Calibrate_Compass+0xe6>
			compass_z_max = compassZ;
 8001f12:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <Calibrate_Compass+0x1cc>)
 8001f14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <Calibrate_Compass+0x1b8>)
 8001f1a:	801a      	strh	r2, [r3, #0]
 8001f1c:	e00c      	b.n	8001f38 <Calibrate_Compass+0x100>
		else if (compassZ < compass_z_min)
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <Calibrate_Compass+0x1cc>)
 8001f20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <Calibrate_Compass+0x1b4>)
 8001f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	da04      	bge.n	8001f38 <Calibrate_Compass+0x100>
			compass_z_min = compassZ;
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <Calibrate_Compass+0x1cc>)
 8001f30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <Calibrate_Compass+0x1b4>)
 8001f36:	801a      	strh	r2, [r3, #0]

		if (compassY > compass_y_max)
 8001f38:	4b31      	ldr	r3, [pc, #196]	; (8002000 <Calibrate_Compass+0x1c8>)
 8001f3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <Calibrate_Compass+0x1b0>)
 8001f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dd05      	ble.n	8001f54 <Calibrate_Compass+0x11c>
			compass_y_max = compassY;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <Calibrate_Compass+0x1c8>)
 8001f4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <Calibrate_Compass+0x1b0>)
 8001f50:	801a      	strh	r2, [r3, #0]
 8001f52:	e00c      	b.n	8001f6e <Calibrate_Compass+0x136>
		else if (compassY < compass_y_min)
 8001f54:	4b2a      	ldr	r3, [pc, #168]	; (8002000 <Calibrate_Compass+0x1c8>)
 8001f56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f5a:	4b22      	ldr	r3, [pc, #136]	; (8001fe4 <Calibrate_Compass+0x1ac>)
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	da04      	bge.n	8001f6e <Calibrate_Compass+0x136>
			compass_y_min = compassY;
 8001f64:	4b26      	ldr	r3, [pc, #152]	; (8002000 <Calibrate_Compass+0x1c8>)
 8001f66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <Calibrate_Compass+0x1ac>)
 8001f6c:	801a      	strh	r2, [r3, #0]

		HAL_Delay(5);
 8001f6e:	2005      	movs	r0, #5
 8001f70:	f004 f968 	bl	8006244 <HAL_Delay>
	while(GetMillisDifference(&calibrate_compass_timer) < 8000)
 8001f74:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <Calibrate_Compass+0x1bc>)
 8001f76:	f002 fe8b 	bl	8004c90 <GetMillisDifference>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001f80:	f4ff af75 	bcc.w	8001e6e <Calibrate_Compass+0x36>
	}

	EEPROM_Clear_Buffer();
 8001f84:	f001 fd20 	bl	80039c8 <EEPROM_Clear_Buffer>
	eeprom_write_buffer_width = 2;
 8001f88:	4b20      	ldr	r3, [pc, #128]	; (800200c <Calibrate_Compass+0x1d4>)
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	701a      	strb	r2, [r3, #0]
	EEPROM_Write_Buffer((uint8_t *)&compass_x_min, 2);
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4812      	ldr	r0, [pc, #72]	; (8001fdc <Calibrate_Compass+0x1a4>)
 8001f92:	f001 fd79 	bl	8003a88 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_x_max, 2);
 8001f96:	2102      	movs	r1, #2
 8001f98:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <Calibrate_Compass+0x1a8>)
 8001f9a:	f001 fd75 	bl	8003a88 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_y_min, 2);
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4810      	ldr	r0, [pc, #64]	; (8001fe4 <Calibrate_Compass+0x1ac>)
 8001fa2:	f001 fd71 	bl	8003a88 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_y_max, 2);
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	480f      	ldr	r0, [pc, #60]	; (8001fe8 <Calibrate_Compass+0x1b0>)
 8001faa:	f001 fd6d 	bl	8003a88 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_z_min, 2);
 8001fae:	2102      	movs	r1, #2
 8001fb0:	480e      	ldr	r0, [pc, #56]	; (8001fec <Calibrate_Compass+0x1b4>)
 8001fb2:	f001 fd69 	bl	8003a88 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_z_max, 2);
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <Calibrate_Compass+0x1b8>)
 8001fba:	f001 fd65 	bl	8003a88 <EEPROM_Write_Buffer>
	EEPROM_Save_Page(64);
 8001fbe:	2040      	movs	r0, #64	; 0x40
 8001fc0:	f001 fd1c 	bl	80039fc <EEPROM_Save_Page>

	Calculate_Compass_Calibration();
 8001fc4:	f000 f828 	bl	8002018 <Calculate_Compass_Calibration>

	Read_Compass();
 8001fc8:	f7ff fc6e 	bl	80018a8 <Read_Compass>

	gyro_z_angle = compass_heading;
 8001fcc:	4b10      	ldr	r3, [pc, #64]	; (8002010 <Calibrate_Compass+0x1d8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a10      	ldr	r2, [pc, #64]	; (8002014 <Calibrate_Compass+0x1dc>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000254 	.word	0x20000254
 8001fe0:	20000256 	.word	0x20000256
 8001fe4:	20000258 	.word	0x20000258
 8001fe8:	2000025a 	.word	0x2000025a
 8001fec:	2000025c 	.word	0x2000025c
 8001ff0:	2000025e 	.word	0x2000025e
 8001ff4:	20000394 	.word	0x20000394
 8001ff8:	20000380 	.word	0x20000380
 8001ffc:	20000e14 	.word	0x20000e14
 8002000:	20000390 	.word	0x20000390
 8002004:	200003ba 	.word	0x200003ba
 8002008:	200003bc 	.word	0x200003bc
 800200c:	20000030 	.word	0x20000030
 8002010:	20000260 	.word	0x20000260
 8002014:	20001010 	.word	0x20001010

08002018 <Calculate_Compass_Calibration>:

void Calculate_Compass_Calibration()
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
    y_scale = (float)(compass_x_max - compass_x_min) / (float)(compass_y_max - compass_y_min);
 800201c:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <Calculate_Compass_Calibration+0x140>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	461a      	mov	r2, r3
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <Calculate_Compass_Calibration+0x144>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002034:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <Calculate_Compass_Calibration+0x148>)
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	461a      	mov	r2, r3
 800203c:	4b49      	ldr	r3, [pc, #292]	; (8002164 <Calculate_Compass_Calibration+0x14c>)
 800203e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002050:	4b45      	ldr	r3, [pc, #276]	; (8002168 <Calculate_Compass_Calibration+0x150>)
 8002052:	edc3 7a00 	vstr	s15, [r3]
    z_scale = (float)(compass_x_max - compass_x_min) / (float)(compass_z_max - compass_z_min);
 8002056:	4b40      	ldr	r3, [pc, #256]	; (8002158 <Calculate_Compass_Calibration+0x140>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	461a      	mov	r2, r3
 800205e:	4b3f      	ldr	r3, [pc, #252]	; (800215c <Calculate_Compass_Calibration+0x144>)
 8002060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <Calculate_Compass_Calibration+0x154>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	461a      	mov	r2, r3
 8002076:	4b3e      	ldr	r3, [pc, #248]	; (8002170 <Calculate_Compass_Calibration+0x158>)
 8002078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <Calculate_Compass_Calibration+0x15c>)
 800208c:	edc3 7a00 	vstr	s15, [r3]

    compass_offset_x = (float)(compass_x_max - compass_x_min) / 2 - compass_x_max;
 8002090:	4b31      	ldr	r3, [pc, #196]	; (8002158 <Calculate_Compass_Calibration+0x140>)
 8002092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002096:	461a      	mov	r2, r3
 8002098:	4b30      	ldr	r3, [pc, #192]	; (800215c <Calculate_Compass_Calibration+0x144>)
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <Calculate_Compass_Calibration+0x140>)
 80020b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <Calculate_Compass_Calibration+0x160>)
 80020c4:	edc3 7a00 	vstr	s15, [r3]
    compass_offset_y = ((float)(compass_y_max - compass_y_min) / 2 - compass_y_max) * y_scale;
 80020c8:	4b25      	ldr	r3, [pc, #148]	; (8002160 <Calculate_Compass_Calibration+0x148>)
 80020ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <Calculate_Compass_Calibration+0x14c>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <Calculate_Compass_Calibration+0x148>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <Calculate_Compass_Calibration+0x150>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <Calculate_Compass_Calibration+0x164>)
 8002106:	edc3 7a00 	vstr	s15, [r3]
    compass_offset_z = ((float)(compass_z_max - compass_z_min) / 2 - compass_z_max) * z_scale;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <Calculate_Compass_Calibration+0x154>)
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	461a      	mov	r2, r3
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <Calculate_Compass_Calibration+0x158>)
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002122:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002126:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <Calculate_Compass_Calibration+0x154>)
 800212c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <Calculate_Compass_Calibration+0x15c>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <Calculate_Compass_Calibration+0x168>)
 8002148:	edc3 7a00 	vstr	s15, [r3]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000256 	.word	0x20000256
 800215c:	20000254 	.word	0x20000254
 8002160:	2000025a 	.word	0x2000025a
 8002164:	20000258 	.word	0x20000258
 8002168:	2000038c 	.word	0x2000038c
 800216c:	2000025e 	.word	0x2000025e
 8002170:	2000025c 	.word	0x2000025c
 8002174:	20000388 	.word	0x20000388
 8002178:	2000026c 	.word	0x2000026c
 800217c:	20000270 	.word	0x20000270
 8002180:	20000274 	.word	0x20000274

08002184 <CalculateHeadingDifference>:

void CalculateHeadingDifference(float ang1, float ang2) //ang1 is setpoint, ang2 is current
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	ed87 0a01 	vstr	s0, [r7, #4]
 800218e:	edc7 0a00 	vstr	s1, [r7]
    heading_difference_return = ang1 - ang2;
 8002192:	ed97 7a01 	vldr	s14, [r7, #4]
 8002196:	edd7 7a00 	vldr	s15, [r7]
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <CalculateHeadingDifference+0xd0>)
 80021a0:	edc3 7a00 	vstr	s15, [r3]

    if (heading_difference_return < -180 || heading_difference_return > 180)
 80021a4:	4b2b      	ldr	r3, [pc, #172]	; (8002254 <CalculateHeadingDifference+0xd0>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002258 <CalculateHeadingDifference+0xd4>
 80021ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b6:	d40a      	bmi.n	80021ce <CalculateHeadingDifference+0x4a>
 80021b8:	4b26      	ldr	r3, [pc, #152]	; (8002254 <CalculateHeadingDifference+0xd0>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800225c <CalculateHeadingDifference+0xd8>
 80021c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	dc00      	bgt.n	80021ce <CalculateHeadingDifference+0x4a>
        else
            ang1 += 180;

        heading_difference_return = ang1 - ang2;
    }
}
 80021cc:	e03c      	b.n	8002248 <CalculateHeadingDifference+0xc4>
        if (ang2 > 180)
 80021ce:	edd7 7a00 	vldr	s15, [r7]
 80021d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800225c <CalculateHeadingDifference+0xd8>
 80021d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021de:	dd08      	ble.n	80021f2 <CalculateHeadingDifference+0x6e>
            ang2 -= 180;
 80021e0:	edd7 7a00 	vldr	s15, [r7]
 80021e4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800225c <CalculateHeadingDifference+0xd8>
 80021e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021ec:	edc7 7a00 	vstr	s15, [r7]
 80021f0:	e007      	b.n	8002202 <CalculateHeadingDifference+0x7e>
            ang2 += 180;
 80021f2:	edd7 7a00 	vldr	s15, [r7]
 80021f6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800225c <CalculateHeadingDifference+0xd8>
 80021fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021fe:	edc7 7a00 	vstr	s15, [r7]
        if (ang1 > 180)
 8002202:	edd7 7a01 	vldr	s15, [r7, #4]
 8002206:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800225c <CalculateHeadingDifference+0xd8>
 800220a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	dd08      	ble.n	8002226 <CalculateHeadingDifference+0xa2>
            ang1 -= 180;
 8002214:	edd7 7a01 	vldr	s15, [r7, #4]
 8002218:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800225c <CalculateHeadingDifference+0xd8>
 800221c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002220:	edc7 7a01 	vstr	s15, [r7, #4]
 8002224:	e007      	b.n	8002236 <CalculateHeadingDifference+0xb2>
            ang1 += 180;
 8002226:	edd7 7a01 	vldr	s15, [r7, #4]
 800222a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800225c <CalculateHeadingDifference+0xd8>
 800222e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002232:	edc7 7a01 	vstr	s15, [r7, #4]
        heading_difference_return = ang1 - ang2;
 8002236:	ed97 7a01 	vldr	s14, [r7, #4]
 800223a:	edd7 7a00 	vldr	s15, [r7]
 800223e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <CalculateHeadingDifference+0xd0>)
 8002244:	edc3 7a00 	vstr	s15, [r3]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	20000278 	.word	0x20000278
 8002258:	c3340000 	.word	0xc3340000
 800225c:	43340000 	.word	0x43340000

08002260 <Calculate_Attitude>:
float pid_error_temp;
float pid_roll_last_error, pid_pitch_last_error, pid_yaw_last_error;
int32_t max_motor_pid_output = 45;

void Calculate_Attitude()
{
 8002260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002264:	af00      	add	r7, sp, #0
	gyro_x = (float)raw_gyro_acc_data[0] / 65.5;
 8002266:	4bd6      	ldr	r3, [pc, #856]	; (80025c0 <Calculate_Attitude+0x360>)
 8002268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002274:	eddf 6ad3 	vldr	s13, [pc, #844]	; 80025c4 <Calculate_Attitude+0x364>
 8002278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800227c:	4bd2      	ldr	r3, [pc, #840]	; (80025c8 <Calculate_Attitude+0x368>)
 800227e:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)raw_gyro_acc_data[1] / -65.5;
 8002282:	4bcf      	ldr	r3, [pc, #828]	; (80025c0 <Calculate_Attitude+0x360>)
 8002284:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002288:	ee07 3a90 	vmov	s15, r3
 800228c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002290:	eddf 6ace 	vldr	s13, [pc, #824]	; 80025cc <Calculate_Attitude+0x36c>
 8002294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002298:	4bcd      	ldr	r3, [pc, #820]	; (80025d0 <Calculate_Attitude+0x370>)
 800229a:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)raw_gyro_acc_data[2] / -65.5;
 800229e:	4bc8      	ldr	r3, [pc, #800]	; (80025c0 <Calculate_Attitude+0x360>)
 80022a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022a4:	ee07 3a90 	vmov	s15, r3
 80022a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ac:	eddf 6ac7 	vldr	s13, [pc, #796]	; 80025cc <Calculate_Attitude+0x36c>
 80022b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b4:	4bc7      	ldr	r3, [pc, #796]	; (80025d4 <Calculate_Attitude+0x374>)
 80022b6:	edc3 7a00 	vstr	s15, [r3]

	acc_magnitude = sqrt(((float)raw_gyro_acc_data[3] * (float)raw_gyro_acc_data[3]) + ((float)raw_gyro_acc_data[4] * (float)raw_gyro_acc_data[4]) + ((float)raw_gyro_acc_data[5] * (float)raw_gyro_acc_data[5]));
 80022ba:	4bc1      	ldr	r3, [pc, #772]	; (80025c0 <Calculate_Attitude+0x360>)
 80022bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c8:	4bbd      	ldr	r3, [pc, #756]	; (80025c0 <Calculate_Attitude+0x360>)
 80022ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022da:	4bb9      	ldr	r3, [pc, #740]	; (80025c0 <Calculate_Attitude+0x360>)
 80022dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022e8:	4bb5      	ldr	r3, [pc, #724]	; (80025c0 <Calculate_Attitude+0x360>)
 80022ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022fe:	4bb0      	ldr	r3, [pc, #704]	; (80025c0 <Calculate_Attitude+0x360>)
 8002300:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800230c:	4bac      	ldr	r3, [pc, #688]	; (80025c0 <Calculate_Attitude+0x360>)
 800230e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002322:	ee17 0a90 	vmov	r0, s15
 8002326:	f7fe f90f 	bl	8000548 <__aeabi_f2d>
 800232a:	4603      	mov	r3, r0
 800232c:	460c      	mov	r4, r1
 800232e:	ec44 3b10 	vmov	d0, r3, r4
 8002332:	f00e ff39 	bl	80111a8 <sqrt>
 8002336:	ec54 3b10 	vmov	r3, r4, d0
 800233a:	4618      	mov	r0, r3
 800233c:	4621      	mov	r1, r4
 800233e:	f7fe fc33 	bl	8000ba8 <__aeabi_d2f>
 8002342:	4602      	mov	r2, r0
 8002344:	4ba4      	ldr	r3, [pc, #656]	; (80025d8 <Calculate_Attitude+0x378>)
 8002346:	601a      	str	r2, [r3, #0]

	if(acc_magnitude != 0)
 8002348:	4ba3      	ldr	r3, [pc, #652]	; (80025d8 <Calculate_Attitude+0x378>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	d06f      	beq.n	8002438 <Calculate_Attitude+0x1d8>
	{
		if(abs(raw_gyro_acc_data[4]) < acc_magnitude)
 8002358:	4b99      	ldr	r3, [pc, #612]	; (80025c0 <Calculate_Attitude+0x360>)
 800235a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	bfb8      	it	lt
 8002362:	425b      	neglt	r3, r3
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236c:	4b9a      	ldr	r3, [pc, #616]	; (80025d8 <Calculate_Attitude+0x378>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d525      	bpl.n	80023c8 <Calculate_Attitude+0x168>
		{
			acc_x = asin((float)raw_gyro_acc_data[4] / acc_magnitude) * 57.296;
 800237c:	4b90      	ldr	r3, [pc, #576]	; (80025c0 <Calculate_Attitude+0x360>)
 800237e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238a:	4b93      	ldr	r3, [pc, #588]	; (80025d8 <Calculate_Attitude+0x378>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002394:	ee16 0a90 	vmov	r0, s13
 8002398:	f7fe f8d6 	bl	8000548 <__aeabi_f2d>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	ec44 3b10 	vmov	d0, r3, r4
 80023a4:	f00e fd38 	bl	8010e18 <asin>
 80023a8:	ec51 0b10 	vmov	r0, r1, d0
 80023ac:	a380      	add	r3, pc, #512	; (adr r3, 80025b0 <Calculate_Attitude+0x350>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe f921 	bl	80005f8 <__aeabi_dmul>
 80023b6:	4603      	mov	r3, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	4618      	mov	r0, r3
 80023bc:	4621      	mov	r1, r4
 80023be:	f7fe fbf3 	bl	8000ba8 <__aeabi_d2f>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b85      	ldr	r3, [pc, #532]	; (80025dc <Calculate_Attitude+0x37c>)
 80023c6:	601a      	str	r2, [r3, #0]
		}

		if(abs(raw_gyro_acc_data[3]) < acc_magnitude)
 80023c8:	4b7d      	ldr	r3, [pc, #500]	; (80025c0 <Calculate_Attitude+0x360>)
 80023ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bfb8      	it	lt
 80023d2:	425b      	neglt	r3, r3
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023dc:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <Calculate_Attitude+0x378>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	d525      	bpl.n	8002438 <Calculate_Attitude+0x1d8>
		{
			acc_y = asin((float)raw_gyro_acc_data[3] / acc_magnitude) * 57.296;
 80023ec:	4b74      	ldr	r3, [pc, #464]	; (80025c0 <Calculate_Attitude+0x360>)
 80023ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fa:	4b77      	ldr	r3, [pc, #476]	; (80025d8 <Calculate_Attitude+0x378>)
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002404:	ee16 0a90 	vmov	r0, s13
 8002408:	f7fe f89e 	bl	8000548 <__aeabi_f2d>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	ec44 3b10 	vmov	d0, r3, r4
 8002414:	f00e fd00 	bl	8010e18 <asin>
 8002418:	ec51 0b10 	vmov	r0, r1, d0
 800241c:	a364      	add	r3, pc, #400	; (adr r3, 80025b0 <Calculate_Attitude+0x350>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f7fe f8e9 	bl	80005f8 <__aeabi_dmul>
 8002426:	4603      	mov	r3, r0
 8002428:	460c      	mov	r4, r1
 800242a:	4618      	mov	r0, r3
 800242c:	4621      	mov	r1, r4
 800242e:	f7fe fbbb 	bl	8000ba8 <__aeabi_d2f>
 8002432:	4602      	mov	r2, r0
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <Calculate_Attitude+0x380>)
 8002436:	601a      	str	r2, [r3, #0]
		}
	}

	gyro_x_angle += (gyro_x) * ((float)how_long_to_loop_main / 1000000);
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <Calculate_Attitude+0x384>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002444:	eddf 6a68 	vldr	s13, [pc, #416]	; 80025e8 <Calculate_Attitude+0x388>
 8002448:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800244c:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <Calculate_Attitude+0x368>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <Calculate_Attitude+0x38c>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002460:	4b62      	ldr	r3, [pc, #392]	; (80025ec <Calculate_Attitude+0x38c>)
 8002462:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_angle += (gyro_y) * ((float)how_long_to_loop_main / 1000000);
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <Calculate_Attitude+0x384>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002472:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80025e8 <Calculate_Attitude+0x388>
 8002476:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800247a:	4b55      	ldr	r3, [pc, #340]	; (80025d0 <Calculate_Attitude+0x370>)
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002484:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <Calculate_Attitude+0x390>)
 8002486:	edd3 7a00 	vldr	s15, [r3]
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <Calculate_Attitude+0x390>)
 8002490:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_angle += (gyro_z) * ((float)how_long_to_loop_main / 1000000);
 8002494:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <Calculate_Attitude+0x384>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a0:	eddf 6a51 	vldr	s13, [pc, #324]	; 80025e8 <Calculate_Attitude+0x388>
 80024a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <Calculate_Attitude+0x374>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <Calculate_Attitude+0x394>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024bc:	4b4d      	ldr	r3, [pc, #308]	; (80025f4 <Calculate_Attitude+0x394>)
 80024be:	edc3 7a00 	vstr	s15, [r3]

	gyro_x_angle += (gyro_y_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 80024c2:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <Calculate_Attitude+0x38c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f83e 	bl	8000548 <__aeabi_f2d>
 80024cc:	4604      	mov	r4, r0
 80024ce:	460d      	mov	r5, r1
 80024d0:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <Calculate_Attitude+0x390>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f837 	bl	8000548 <__aeabi_f2d>
 80024da:	4680      	mov	r8, r0
 80024dc:	4689      	mov	r9, r1
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <Calculate_Attitude+0x374>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe f830 	bl	8000548 <__aeabi_f2d>
 80024e8:	a333      	add	r3, pc, #204	; (adr r3, 80025b8 <Calculate_Attitude+0x358>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe f883 	bl	80005f8 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4692      	mov	sl, r2
 80024f8:	469b      	mov	fp, r3
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <Calculate_Attitude+0x384>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80025e8 <Calculate_Attitude+0x388>
 800250a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800250e:	ee16 0a90 	vmov	r0, s13
 8002512:	f7fe f819 	bl	8000548 <__aeabi_f2d>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4650      	mov	r0, sl
 800251c:	4659      	mov	r1, fp
 800251e:	f7fe f86b 	bl	80005f8 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	ec43 2b17 	vmov	d7, r2, r3
 800252a:	eeb0 0a47 	vmov.f32	s0, s14
 800252e:	eef0 0a67 	vmov.f32	s1, s15
 8002532:	f00e fc29 	bl	8010d88 <sin>
 8002536:	ec53 2b10 	vmov	r2, r3, d0
 800253a:	4640      	mov	r0, r8
 800253c:	4649      	mov	r1, r9
 800253e:	f7fe f85b 	bl	80005f8 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4620      	mov	r0, r4
 8002548:	4629      	mov	r1, r5
 800254a:	f7fd fe9f 	bl	800028c <__adddf3>
 800254e:	4603      	mov	r3, r0
 8002550:	460c      	mov	r4, r1
 8002552:	4618      	mov	r0, r3
 8002554:	4621      	mov	r1, r4
 8002556:	f7fe fb27 	bl	8000ba8 <__aeabi_d2f>
 800255a:	4602      	mov	r2, r0
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <Calculate_Attitude+0x38c>)
 800255e:	601a      	str	r2, [r3, #0]
	gyro_y_angle -= (gyro_x_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <Calculate_Attitude+0x390>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ffef 	bl	8000548 <__aeabi_f2d>
 800256a:	4604      	mov	r4, r0
 800256c:	460d      	mov	r5, r1
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <Calculate_Attitude+0x38c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd ffe8 	bl	8000548 <__aeabi_f2d>
 8002578:	4680      	mov	r8, r0
 800257a:	4689      	mov	r9, r1
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <Calculate_Attitude+0x374>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ffe1 	bl	8000548 <__aeabi_f2d>
 8002586:	a30c      	add	r3, pc, #48	; (adr r3, 80025b8 <Calculate_Attitude+0x358>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	f7fe f834 	bl	80005f8 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4692      	mov	sl, r2
 8002596:	469b      	mov	fp, r3
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <Calculate_Attitude+0x384>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80025e8 <Calculate_Attitude+0x388>
 80025a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025ac:	e024      	b.n	80025f8 <Calculate_Attitude+0x398>
 80025ae:	bf00      	nop
 80025b0:	53f7ced9 	.word	0x53f7ced9
 80025b4:	404ca5e3 	.word	0x404ca5e3
 80025b8:	ad42c3ca 	.word	0xad42c3ca
 80025bc:	3f91de69 	.word	0x3f91de69
 80025c0:	20001000 	.word	0x20001000
 80025c4:	42830000 	.word	0x42830000
 80025c8:	2000100c 	.word	0x2000100c
 80025cc:	c2830000 	.word	0xc2830000
 80025d0:	20000fe8 	.word	0x20000fe8
 80025d4:	2000103c 	.word	0x2000103c
 80025d8:	20001014 	.word	0x20001014
 80025dc:	20001018 	.word	0x20001018
 80025e0:	20000fdc 	.word	0x20000fdc
 80025e4:	20001080 	.word	0x20001080
 80025e8:	49742400 	.word	0x49742400
 80025ec:	20000fe4 	.word	0x20000fe4
 80025f0:	20000ff0 	.word	0x20000ff0
 80025f4:	20001010 	.word	0x20001010
 80025f8:	ee16 0a90 	vmov	r0, s13
 80025fc:	f7fd ffa4 	bl	8000548 <__aeabi_f2d>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4650      	mov	r0, sl
 8002606:	4659      	mov	r1, fp
 8002608:	f7fd fff6 	bl	80005f8 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	ec43 2b17 	vmov	d7, r2, r3
 8002614:	eeb0 0a47 	vmov.f32	s0, s14
 8002618:	eef0 0a67 	vmov.f32	s1, s15
 800261c:	f00e fbb4 	bl	8010d88 <sin>
 8002620:	ec53 2b10 	vmov	r2, r3, d0
 8002624:	4640      	mov	r0, r8
 8002626:	4649      	mov	r1, r9
 8002628:	f7fd ffe6 	bl	80005f8 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd fe28 	bl	8000288 <__aeabi_dsub>
 8002638:	4603      	mov	r3, r0
 800263a:	460c      	mov	r4, r1
 800263c:	4618      	mov	r0, r3
 800263e:	4621      	mov	r1, r4
 8002640:	f7fe fab2 	bl	8000ba8 <__aeabi_d2f>
 8002644:	4602      	mov	r2, r0
 8002646:	4b54      	ldr	r3, [pc, #336]	; (8002798 <Calculate_Attitude+0x538>)
 8002648:	601a      	str	r2, [r3, #0]

	gyro_x_angle = (gyro_x_angle * 0.9985) + (acc_x * (1.0000 - 0.9985));
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <Calculate_Attitude+0x53c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff7a 	bl	8000548 <__aeabi_f2d>
 8002654:	a34c      	add	r3, pc, #304	; (adr r3, 8002788 <Calculate_Attitude+0x528>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffcd 	bl	80005f8 <__aeabi_dmul>
 800265e:	4603      	mov	r3, r0
 8002660:	460c      	mov	r4, r1
 8002662:	4625      	mov	r5, r4
 8002664:	461c      	mov	r4, r3
 8002666:	4b4e      	ldr	r3, [pc, #312]	; (80027a0 <Calculate_Attitude+0x540>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff6c 	bl	8000548 <__aeabi_f2d>
 8002670:	a347      	add	r3, pc, #284	; (adr r3, 8002790 <Calculate_Attitude+0x530>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ffbf 	bl	80005f8 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4620      	mov	r0, r4
 8002680:	4629      	mov	r1, r5
 8002682:	f7fd fe03 	bl	800028c <__adddf3>
 8002686:	4603      	mov	r3, r0
 8002688:	460c      	mov	r4, r1
 800268a:	4618      	mov	r0, r3
 800268c:	4621      	mov	r1, r4
 800268e:	f7fe fa8b 	bl	8000ba8 <__aeabi_d2f>
 8002692:	4602      	mov	r2, r0
 8002694:	4b41      	ldr	r3, [pc, #260]	; (800279c <Calculate_Attitude+0x53c>)
 8002696:	601a      	str	r2, [r3, #0]
	gyro_y_angle = (gyro_y_angle * 0.9985) + (acc_y * (1.0000 - 0.9985));
 8002698:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <Calculate_Attitude+0x538>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd ff53 	bl	8000548 <__aeabi_f2d>
 80026a2:	a339      	add	r3, pc, #228	; (adr r3, 8002788 <Calculate_Attitude+0x528>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd ffa6 	bl	80005f8 <__aeabi_dmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	4625      	mov	r5, r4
 80026b2:	461c      	mov	r4, r3
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <Calculate_Attitude+0x544>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd ff45 	bl	8000548 <__aeabi_f2d>
 80026be:	a334      	add	r3, pc, #208	; (adr r3, 8002790 <Calculate_Attitude+0x530>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd ff98 	bl	80005f8 <__aeabi_dmul>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4620      	mov	r0, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	f7fd fddc 	bl	800028c <__adddf3>
 80026d4:	4603      	mov	r3, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	4618      	mov	r0, r3
 80026da:	4621      	mov	r1, r4
 80026dc:	f7fe fa64 	bl	8000ba8 <__aeabi_d2f>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <Calculate_Attitude+0x538>)
 80026e4:	601a      	str	r2, [r3, #0]

	if(gyro_z_angle < 0)
 80026e6:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <Calculate_Attitude+0x548>)
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f4:	d509      	bpl.n	800270a <Calculate_Attitude+0x4aa>
		gyro_z_angle += 360;
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <Calculate_Attitude+0x548>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80027ac <Calculate_Attitude+0x54c>
 8002700:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002704:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <Calculate_Attitude+0x548>)
 8002706:	edc3 7a00 	vstr	s15, [r3]
	if(gyro_z_angle >= 360)
 800270a:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <Calculate_Attitude+0x548>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80027ac <Calculate_Attitude+0x54c>
 8002714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	db09      	blt.n	8002732 <Calculate_Attitude+0x4d2>
		gyro_z_angle -= 360;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <Calculate_Attitude+0x548>)
 8002720:	edd3 7a00 	vldr	s15, [r3]
 8002724:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80027ac <Calculate_Attitude+0x54c>
 8002728:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <Calculate_Attitude+0x548>)
 800272e:	edc3 7a00 	vstr	s15, [r3]

	CalculateHeadingDifference(gyro_z_angle, compass_heading);
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <Calculate_Attitude+0x548>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <Calculate_Attitude+0x550>)
 800273a:	ed93 7a00 	vldr	s14, [r3]
 800273e:	eef0 0a47 	vmov.f32	s1, s14
 8002742:	eeb0 0a67 	vmov.f32	s0, s15
 8002746:	f7ff fd1d 	bl	8002184 <CalculateHeadingDifference>

	if (heading_difference_return > 5 || heading_difference_return < -5)
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <Calculate_Attitude+0x554>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275c:	dc0a      	bgt.n	8002774 <Calculate_Attitude+0x514>
 800275e:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <Calculate_Attitude+0x554>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	d400      	bmi.n	8002774 <Calculate_Attitude+0x514>
		gyro_z_angle = compass_heading;
}
 8002772:	e003      	b.n	800277c <Calculate_Attitude+0x51c>
		gyro_z_angle = compass_heading;
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <Calculate_Attitude+0x550>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <Calculate_Attitude+0x548>)
 800277a:	6013      	str	r3, [r2, #0]
}
 800277c:	bf00      	nop
 800277e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	f3af 8000 	nop.w
 8002788:	45a1cac1 	.word	0x45a1cac1
 800278c:	3feff3b6 	.word	0x3feff3b6
 8002790:	bc6a7e00 	.word	0xbc6a7e00
 8002794:	3f589374 	.word	0x3f589374
 8002798:	20000ff0 	.word	0x20000ff0
 800279c:	20000fe4 	.word	0x20000fe4
 80027a0:	20001018 	.word	0x20001018
 80027a4:	20000fdc 	.word	0x20000fdc
 80027a8:	20001010 	.word	0x20001010
 80027ac:	43b40000 	.word	0x43b40000
 80027b0:	20000260 	.word	0x20000260
 80027b4:	20000278 	.word	0x20000278

080027b8 <Motor_PID>:

void Motor_PID()
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
	pid_roll_setpoint = 0;
 80027bc:	4b9e      	ldr	r3, [pc, #632]	; (8002a38 <Motor_PID+0x280>)
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
	pid_pitch_setpoint = 0;
 80027c4:	4b9d      	ldr	r3, [pc, #628]	; (8002a3c <Motor_PID+0x284>)
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
	pid_yaw_setpoint = 0;
 80027cc:	4b9c      	ldr	r3, [pc, #624]	; (8002a40 <Motor_PID+0x288>)
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

	//Temp motor control
	if(ppm_channels[0] > 1505)
 80027d4:	4b9b      	ldr	r3, [pc, #620]	; (8002a44 <Motor_PID+0x28c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f240 52e1 	movw	r2, #1505	; 0x5e1
 80027dc:	4293      	cmp	r3, r2
 80027de:	dd0b      	ble.n	80027f8 <Motor_PID+0x40>
		pid_roll_setpoint = ppm_channels[0] - 1505;
 80027e0:	4b98      	ldr	r3, [pc, #608]	; (8002a44 <Motor_PID+0x28c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027f0:	4b91      	ldr	r3, [pc, #580]	; (8002a38 <Motor_PID+0x280>)
 80027f2:	edc3 7a00 	vstr	s15, [r3]
 80027f6:	e010      	b.n	800281a <Motor_PID+0x62>
	else if(ppm_channels[0] < 1495)
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <Motor_PID+0x28c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8002800:	4293      	cmp	r3, r2
 8002802:	dc0a      	bgt.n	800281a <Motor_PID+0x62>
		pid_roll_setpoint = ppm_channels[0] - 1495;
 8002804:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <Motor_PID+0x28c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002814:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <Motor_PID+0x280>)
 8002816:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[1] > 1505)
 800281a:	4b8a      	ldr	r3, [pc, #552]	; (8002a44 <Motor_PID+0x28c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002822:	4293      	cmp	r3, r2
 8002824:	dd0b      	ble.n	800283e <Motor_PID+0x86>
		pid_pitch_setpoint = ppm_channels[1] - 1505;
 8002826:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <Motor_PID+0x28c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002836:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <Motor_PID+0x284>)
 8002838:	edc3 7a00 	vstr	s15, [r3]
 800283c:	e010      	b.n	8002860 <Motor_PID+0xa8>
	else if(ppm_channels[1] < 1495)
 800283e:	4b81      	ldr	r3, [pc, #516]	; (8002a44 <Motor_PID+0x28c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8002846:	4293      	cmp	r3, r2
 8002848:	dc0a      	bgt.n	8002860 <Motor_PID+0xa8>
		pid_pitch_setpoint = ppm_channels[1] - 1495;
 800284a:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <Motor_PID+0x28c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285a:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <Motor_PID+0x284>)
 800285c:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[3] > 1505)
 8002860:	4b78      	ldr	r3, [pc, #480]	; (8002a44 <Motor_PID+0x28c>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002868:	4293      	cmp	r3, r2
 800286a:	dd0b      	ble.n	8002884 <Motor_PID+0xcc>
		pid_yaw_setpoint = ppm_channels[3] - 1505;
 800286c:	4b75      	ldr	r3, [pc, #468]	; (8002a44 <Motor_PID+0x28c>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8002874:	ee07 3a90 	vmov	s15, r3
 8002878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287c:	4b70      	ldr	r3, [pc, #448]	; (8002a40 <Motor_PID+0x288>)
 800287e:	edc3 7a00 	vstr	s15, [r3]
 8002882:	e010      	b.n	80028a6 <Motor_PID+0xee>
	else if(ppm_channels[3] < 1495)
 8002884:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <Motor_PID+0x28c>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f240 52d6 	movw	r2, #1494	; 0x5d6
 800288c:	4293      	cmp	r3, r2
 800288e:	dc0a      	bgt.n	80028a6 <Motor_PID+0xee>
		pid_yaw_setpoint = ppm_channels[3] - 1495;
 8002890:	4b6c      	ldr	r3, [pc, #432]	; (8002a44 <Motor_PID+0x28c>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8002898:	ee07 3a90 	vmov	s15, r3
 800289c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a0:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <Motor_PID+0x288>)
 80028a2:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_setpoint -= (gyro_x_angle * 15);
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <Motor_PID+0x280>)
 80028a8:	ed93 7a00 	vldr	s14, [r3]
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <Motor_PID+0x290>)
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80028b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028be:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <Motor_PID+0x280>)
 80028c0:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint -= (gyro_y_angle * 15);
 80028c4:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <Motor_PID+0x284>)
 80028c6:	ed93 7a00 	vldr	s14, [r3]
 80028ca:	4b60      	ldr	r3, [pc, #384]	; (8002a4c <Motor_PID+0x294>)
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80028d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028dc:	4b57      	ldr	r3, [pc, #348]	; (8002a3c <Motor_PID+0x284>)
 80028de:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_setpoint /= 3.0;
 80028e2:	4b55      	ldr	r3, [pc, #340]	; (8002a38 <Motor_PID+0x280>)
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80028ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f0:	4b51      	ldr	r3, [pc, #324]	; (8002a38 <Motor_PID+0x280>)
 80028f2:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint /= 3.0;
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <Motor_PID+0x284>)
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002904:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <Motor_PID+0x284>)
 8002906:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_setpoint /= 3.0;
 800290a:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <Motor_PID+0x288>)
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002918:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <Motor_PID+0x288>)
 800291a:	edc3 7a00 	vstr	s15, [r3]

	pid_error_temp = pid_roll_setpoint - gyro_x;
 800291e:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <Motor_PID+0x280>)
 8002920:	ed93 7a00 	vldr	s14, [r3]
 8002924:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <Motor_PID+0x298>)
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <Motor_PID+0x29c>)
 8002930:	edc3 7a00 	vstr	s15, [r3]
	pid_roll_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 8002934:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <Motor_PID+0x29c>)
 8002936:	ed93 7a00 	vldr	s14, [r3]
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <Motor_PID+0x2a0>)
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	4b45      	ldr	r3, [pc, #276]	; (8002a5c <Motor_PID+0x2a4>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800294e:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <Motor_PID+0x2a8>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <Motor_PID+0x2a8>)
 800295a:	edc3 7a00 	vstr	s15, [r3]

	if(pid_roll_i > max_motor_pid_output)
 800295e:	4b41      	ldr	r3, [pc, #260]	; (8002a64 <Motor_PID+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <Motor_PID+0x2a8>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	d509      	bpl.n	800298e <Motor_PID+0x1d6>
		pid_roll_i = max_motor_pid_output;
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <Motor_PID+0x2ac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <Motor_PID+0x2a8>)
 8002988:	edc3 7a00 	vstr	s15, [r3]
 800298c:	e018      	b.n	80029c0 <Motor_PID+0x208>
	else if(pid_roll_i < (max_motor_pid_output * -1))
 800298e:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <Motor_PID+0x2ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	425b      	negs	r3, r3
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800299c:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <Motor_PID+0x2a8>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	dd09      	ble.n	80029c0 <Motor_PID+0x208>
		pid_roll_i = (max_motor_pid_output * -1);
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <Motor_PID+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	425b      	negs	r3, r3
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <Motor_PID+0x2a8>)
 80029bc:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_roll_i + ((pid_error_temp - pid_roll_last_error) * kd_roll * how_long_to_loop_modifier);
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <Motor_PID+0x29c>)
 80029c2:	ed93 7a00 	vldr	s14, [r3]
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <Motor_PID+0x2b0>)
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <Motor_PID+0x2a4>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <Motor_PID+0x2a8>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <Motor_PID+0x29c>)
 80029e6:	edd3 6a00 	vldr	s13, [r3]
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <Motor_PID+0x2b4>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <Motor_PID+0x2b8>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029fe:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <Motor_PID+0x2a4>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a10:	ee17 2a90 	vmov	r2, s15
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <Motor_PID+0x2bc>)
 8002a16:	601a      	str	r2, [r3, #0]

	pid_roll_last_error = pid_error_temp;
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <Motor_PID+0x29c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <Motor_PID+0x2b4>)
 8002a1e:	6013      	str	r3, [r2, #0]

	if(pid_roll_output > max_motor_pid_output)
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <Motor_PID+0x2bc>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <Motor_PID+0x2ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dd25      	ble.n	8002a78 <Motor_PID+0x2c0>
		pid_roll_output = max_motor_pid_output;
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <Motor_PID+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <Motor_PID+0x2bc>)
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e02c      	b.n	8002a90 <Motor_PID+0x2d8>
 8002a36:	bf00      	nop
 8002a38:	20000d9c 	.word	0x20000d9c
 8002a3c:	20000da0 	.word	0x20000da0
 8002a40:	20000b94 	.word	0x20000b94
 8002a44:	200010b0 	.word	0x200010b0
 8002a48:	20000fe4 	.word	0x20000fe4
 8002a4c:	20000ff0 	.word	0x20000ff0
 8002a50:	2000100c 	.word	0x2000100c
 8002a54:	20000dac 	.word	0x20000dac
 8002a58:	20000284 	.word	0x20000284
 8002a5c:	20000038 	.word	0x20000038
 8002a60:	20000444 	.word	0x20000444
 8002a64:	2000001c 	.word	0x2000001c
 8002a68:	2000027c 	.word	0x2000027c
 8002a6c:	2000084c 	.word	0x2000084c
 8002a70:	2000028c 	.word	0x2000028c
 8002a74:	20000a58 	.word	0x20000a58
	else if(pid_roll_output < (max_motor_pid_output * -1))
 8002a78:	4ba0      	ldr	r3, [pc, #640]	; (8002cfc <Motor_PID+0x544>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	425a      	negs	r2, r3
 8002a7e:	4ba0      	ldr	r3, [pc, #640]	; (8002d00 <Motor_PID+0x548>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	dd04      	ble.n	8002a90 <Motor_PID+0x2d8>
		pid_roll_output = (max_motor_pid_output * -1);
 8002a86:	4b9d      	ldr	r3, [pc, #628]	; (8002cfc <Motor_PID+0x544>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	4a9c      	ldr	r2, [pc, #624]	; (8002d00 <Motor_PID+0x548>)
 8002a8e:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_pitch_setpoint - gyro_y;
 8002a90:	4b9c      	ldr	r3, [pc, #624]	; (8002d04 <Motor_PID+0x54c>)
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <Motor_PID+0x550>)
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa0:	4b9a      	ldr	r3, [pc, #616]	; (8002d0c <Motor_PID+0x554>)
 8002aa2:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 8002aa6:	4b99      	ldr	r3, [pc, #612]	; (8002d0c <Motor_PID+0x554>)
 8002aa8:	ed93 7a00 	vldr	s14, [r3]
 8002aac:	4b98      	ldr	r3, [pc, #608]	; (8002d10 <Motor_PID+0x558>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab6:	4b97      	ldr	r3, [pc, #604]	; (8002d14 <Motor_PID+0x55c>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac0:	4b95      	ldr	r3, [pc, #596]	; (8002d18 <Motor_PID+0x560>)
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aca:	4b93      	ldr	r3, [pc, #588]	; (8002d18 <Motor_PID+0x560>)
 8002acc:	edc3 7a00 	vstr	s15, [r3]

	if(pid_pitch_i > max_motor_pid_output)
 8002ad0:	4b8a      	ldr	r3, [pc, #552]	; (8002cfc <Motor_PID+0x544>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002adc:	4b8e      	ldr	r3, [pc, #568]	; (8002d18 <Motor_PID+0x560>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	d509      	bpl.n	8002b00 <Motor_PID+0x348>
		pid_pitch_i = max_motor_pid_output;
 8002aec:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <Motor_PID+0x544>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af8:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <Motor_PID+0x560>)
 8002afa:	edc3 7a00 	vstr	s15, [r3]
 8002afe:	e018      	b.n	8002b32 <Motor_PID+0x37a>
	else if(pid_pitch_i < (max_motor_pid_output * -1))
 8002b00:	4b7e      	ldr	r3, [pc, #504]	; (8002cfc <Motor_PID+0x544>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	425b      	negs	r3, r3
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b0e:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <Motor_PID+0x560>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	dd09      	ble.n	8002b32 <Motor_PID+0x37a>
		pid_pitch_i = (max_motor_pid_output * -1);
 8002b1e:	4b77      	ldr	r3, [pc, #476]	; (8002cfc <Motor_PID+0x544>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	425b      	negs	r3, r3
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b2c:	4b7a      	ldr	r3, [pc, #488]	; (8002d18 <Motor_PID+0x560>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]

	pid_pitch_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_pitch_i + ((pid_error_temp - pid_pitch_last_error) * kd_roll * how_long_to_loop_modifier);
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <Motor_PID+0x554>)
 8002b34:	ed93 7a00 	vldr	s14, [r3]
 8002b38:	4b78      	ldr	r3, [pc, #480]	; (8002d1c <Motor_PID+0x564>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b42:	4b74      	ldr	r3, [pc, #464]	; (8002d14 <Motor_PID+0x55c>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4c:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <Motor_PID+0x560>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b56:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <Motor_PID+0x554>)
 8002b58:	edd3 6a00 	vldr	s13, [r3]
 8002b5c:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <Motor_PID+0x568>)
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b66:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <Motor_PID+0x56c>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <Motor_PID+0x55c>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b82:	ee17 2a90 	vmov	r2, s15
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <Motor_PID+0x570>)
 8002b88:	601a      	str	r2, [r3, #0]

	pid_pitch_last_error = pid_error_temp;
 8002b8a:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <Motor_PID+0x554>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a64      	ldr	r2, [pc, #400]	; (8002d20 <Motor_PID+0x568>)
 8002b90:	6013      	str	r3, [r2, #0]

	if(pid_pitch_output > max_motor_pid_output)
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <Motor_PID+0x570>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <Motor_PID+0x544>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	dd04      	ble.n	8002ba8 <Motor_PID+0x3f0>
		pid_pitch_output = max_motor_pid_output;
 8002b9e:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <Motor_PID+0x544>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <Motor_PID+0x570>)
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <Motor_PID+0x408>
	else if(pid_pitch_output < (max_motor_pid_output * -1))
 8002ba8:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <Motor_PID+0x544>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	425a      	negs	r2, r3
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <Motor_PID+0x570>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	dd04      	ble.n	8002bc0 <Motor_PID+0x408>
		pid_pitch_output = (max_motor_pid_output * -1);
 8002bb6:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <Motor_PID+0x544>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	425b      	negs	r3, r3
 8002bbc:	4a5a      	ldr	r2, [pc, #360]	; (8002d28 <Motor_PID+0x570>)
 8002bbe:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_yaw_setpoint - gyro_z;
 8002bc0:	4b5a      	ldr	r3, [pc, #360]	; (8002d2c <Motor_PID+0x574>)
 8002bc2:	ed93 7a00 	vldr	s14, [r3]
 8002bc6:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <Motor_PID+0x578>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd0:	4b4e      	ldr	r3, [pc, #312]	; (8002d0c <Motor_PID+0x554>)
 8002bd2:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_i += (pid_error_temp * ki_yaw * how_long_to_loop_modifier);
 8002bd6:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <Motor_PID+0x554>)
 8002bd8:	ed93 7a00 	vldr	s14, [r3]
 8002bdc:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <Motor_PID+0x57c>)
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be6:	4b4b      	ldr	r3, [pc, #300]	; (8002d14 <Motor_PID+0x55c>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf0:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <Motor_PID+0x580>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfa:	4b4f      	ldr	r3, [pc, #316]	; (8002d38 <Motor_PID+0x580>)
 8002bfc:	edc3 7a00 	vstr	s15, [r3]

	if(pid_yaw_i > max_motor_pid_output)
 8002c00:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <Motor_PID+0x544>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <Motor_PID+0x580>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d509      	bpl.n	8002c30 <Motor_PID+0x478>
		pid_yaw_i = max_motor_pid_output;
 8002c1c:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <Motor_PID+0x544>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c28:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <Motor_PID+0x580>)
 8002c2a:	edc3 7a00 	vstr	s15, [r3]
 8002c2e:	e018      	b.n	8002c62 <Motor_PID+0x4aa>
	else if(pid_yaw_i < (max_motor_pid_output * -1))
 8002c30:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <Motor_PID+0x544>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	425b      	negs	r3, r3
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <Motor_PID+0x580>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	dd09      	ble.n	8002c62 <Motor_PID+0x4aa>
		pid_yaw_i = (max_motor_pid_output * -1);
 8002c4e:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <Motor_PID+0x544>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	425b      	negs	r3, r3
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <Motor_PID+0x580>)
 8002c5e:	edc3 7a00 	vstr	s15, [r3]

	pid_yaw_output = (pid_error_temp * kp_yaw * how_long_to_loop_modifier) + pid_yaw_i + ((pid_error_temp - pid_yaw_last_error) * kd_yaw * how_long_to_loop_modifier);
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <Motor_PID+0x554>)
 8002c64:	ed93 7a00 	vldr	s14, [r3]
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <Motor_PID+0x584>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c72:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <Motor_PID+0x55c>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <Motor_PID+0x580>)
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <Motor_PID+0x554>)
 8002c88:	edd3 6a00 	vldr	s13, [r3]
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <Motor_PID+0x588>)
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c96:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <Motor_PID+0x58c>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <Motor_PID+0x55c>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cb2:	ee17 2a90 	vmov	r2, s15
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <Motor_PID+0x590>)
 8002cb8:	601a      	str	r2, [r3, #0]

	pid_yaw_last_error = pid_error_temp;
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <Motor_PID+0x554>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a20      	ldr	r2, [pc, #128]	; (8002d40 <Motor_PID+0x588>)
 8002cc0:	6013      	str	r3, [r2, #0]

	if(pid_yaw_output > max_motor_pid_output)
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <Motor_PID+0x590>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <Motor_PID+0x544>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	dd04      	ble.n	8002cd8 <Motor_PID+0x520>
		pid_yaw_output = max_motor_pid_output;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <Motor_PID+0x544>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <Motor_PID+0x590>)
 8002cd4:	6013      	str	r3, [r2, #0]
	else if(pid_yaw_output < (max_motor_pid_output * -1))
		pid_yaw_output = (max_motor_pid_output * -1);
}
 8002cd6:	e00b      	b.n	8002cf0 <Motor_PID+0x538>
	else if(pid_yaw_output < (max_motor_pid_output * -1))
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <Motor_PID+0x544>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	425a      	negs	r2, r3
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <Motor_PID+0x590>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	dd04      	ble.n	8002cf0 <Motor_PID+0x538>
		pid_yaw_output = (max_motor_pid_output * -1);
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <Motor_PID+0x544>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	425b      	negs	r3, r3
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <Motor_PID+0x590>)
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	2000001c 	.word	0x2000001c
 8002d00:	20000a58 	.word	0x20000a58
 8002d04:	20000da0 	.word	0x20000da0
 8002d08:	20000fe8 	.word	0x20000fe8
 8002d0c:	20000dac 	.word	0x20000dac
 8002d10:	20000284 	.word	0x20000284
 8002d14:	20000038 	.word	0x20000038
 8002d18:	20000a50 	.word	0x20000a50
 8002d1c:	2000027c 	.word	0x2000027c
 8002d20:	20000b98 	.word	0x20000b98
 8002d24:	2000028c 	.word	0x2000028c
 8002d28:	20000a5c 	.word	0x20000a5c
 8002d2c:	20000b94 	.word	0x20000b94
 8002d30:	2000103c 	.word	0x2000103c
 8002d34:	20000288 	.word	0x20000288
 8002d38:	20000a54 	.word	0x20000a54
 8002d3c:	20000280 	.word	0x20000280
 8002d40:	20000a80 	.word	0x20000a80
 8002d44:	20000290 	.word	0x20000290
 8002d48:	20000440 	.word	0x20000440

08002d4c <Calculate_Motor_Outputs>:

int32_t manual_throttle;
int32_t throttle_output;

void Calculate_Motor_Outputs()
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
	if(ppm_channels[2] < 1008)
 8002d50:	4b68      	ldr	r3, [pc, #416]	; (8002ef4 <Calculate_Motor_Outputs+0x1a8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8002d58:	da03      	bge.n	8002d62 <Calculate_Motor_Outputs+0x16>
		manual_throttle = 125;
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <Calculate_Motor_Outputs+0x1ac>)
 8002d5c:	227d      	movs	r2, #125	; 0x7d
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e008      	b.n	8002d74 <Calculate_Motor_Outputs+0x28>
	else
		manual_throttle = (ppm_channels[2] / 8);
 8002d62:	4b64      	ldr	r3, [pc, #400]	; (8002ef4 <Calculate_Motor_Outputs+0x1a8>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	da00      	bge.n	8002d6c <Calculate_Motor_Outputs+0x20>
 8002d6a:	3307      	adds	r3, #7
 8002d6c:	10db      	asrs	r3, r3, #3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <Calculate_Motor_Outputs+0x1ac>)
 8002d72:	601a      	str	r2, [r3, #0]

	throttle_output = idle_throttle;
 8002d74:	4b61      	ldr	r3, [pc, #388]	; (8002efc <Calculate_Motor_Outputs+0x1b0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a61      	ldr	r2, [pc, #388]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002d7a:	6013      	str	r3, [r2, #0]

	if(altitude_hold_flag)
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <Calculate_Motor_Outputs+0x1b8>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <Calculate_Motor_Outputs+0x46>
		throttle_output += altitude_pid_output;
 8002d84:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <Calculate_Motor_Outputs+0x1bc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4a5c      	ldr	r2, [pc, #368]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002d90:	6013      	str	r3, [r2, #0]

	if(manual_mode)
 8002d92:	4b5e      	ldr	r3, [pc, #376]	; (8002f0c <Calculate_Motor_Outputs+0x1c0>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <Calculate_Motor_Outputs+0x56>
	{
		throttle_output = manual_throttle;
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <Calculate_Motor_Outputs+0x1ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002da0:	6013      	str	r3, [r2, #0]
	}

	if(ppm_channels[5] > 1300)
 8002da2:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <Calculate_Motor_Outputs+0x1a8>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f240 5214 	movw	r2, #1300	; 0x514
 8002daa:	4293      	cmp	r3, r2
 8002dac:	dd70      	ble.n	8002e90 <Calculate_Motor_Outputs+0x144>
	{
		esc1_output = throttle_output + pid_roll_output + pid_pitch_output - pid_yaw_output;
 8002dae:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b57      	ldr	r3, [pc, #348]	; (8002f10 <Calculate_Motor_Outputs+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	441a      	add	r2, r3
 8002db8:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <Calculate_Motor_Outputs+0x1c8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <Calculate_Motor_Outputs+0x1cc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	4a55      	ldr	r2, [pc, #340]	; (8002f1c <Calculate_Motor_Outputs+0x1d0>)
 8002dc6:	6013      	str	r3, [r2, #0]
		esc2_output = throttle_output - pid_roll_output + pid_pitch_output + pid_yaw_output;
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <Calculate_Motor_Outputs+0x1c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	1ad2      	subs	r2, r2, r3
 8002dd2:	4b50      	ldr	r3, [pc, #320]	; (8002f14 <Calculate_Motor_Outputs+0x1c8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <Calculate_Motor_Outputs+0x1cc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a50      	ldr	r2, [pc, #320]	; (8002f20 <Calculate_Motor_Outputs+0x1d4>)
 8002de0:	6013      	str	r3, [r2, #0]
		esc3_output = throttle_output - pid_roll_output - pid_pitch_output - pid_yaw_output;
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <Calculate_Motor_Outputs+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	1ad2      	subs	r2, r2, r3
 8002dec:	4b49      	ldr	r3, [pc, #292]	; (8002f14 <Calculate_Motor_Outputs+0x1c8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1ad2      	subs	r2, r2, r3
 8002df2:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <Calculate_Motor_Outputs+0x1cc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	4a4a      	ldr	r2, [pc, #296]	; (8002f24 <Calculate_Motor_Outputs+0x1d8>)
 8002dfa:	6013      	str	r3, [r2, #0]
		esc4_output = throttle_output + pid_roll_output - pid_pitch_output + pid_yaw_output;
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <Calculate_Motor_Outputs+0x1b4>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <Calculate_Motor_Outputs+0x1c4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	441a      	add	r2, r3
 8002e06:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <Calculate_Motor_Outputs+0x1c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <Calculate_Motor_Outputs+0x1cc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	4a45      	ldr	r2, [pc, #276]	; (8002f28 <Calculate_Motor_Outputs+0x1dc>)
 8002e14:	6013      	str	r3, [r2, #0]

		if(esc1_output > 250)
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <Calculate_Motor_Outputs+0x1d0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2bfa      	cmp	r3, #250	; 0xfa
 8002e1c:	dd03      	ble.n	8002e26 <Calculate_Motor_Outputs+0xda>
			esc1_output = 250;
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	; (8002f1c <Calculate_Motor_Outputs+0x1d0>)
 8002e20:	22fa      	movs	r2, #250	; 0xfa
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e006      	b.n	8002e34 <Calculate_Motor_Outputs+0xe8>
		else if(esc1_output < 125)
 8002e26:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <Calculate_Motor_Outputs+0x1d0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b7c      	cmp	r3, #124	; 0x7c
 8002e2c:	dc02      	bgt.n	8002e34 <Calculate_Motor_Outputs+0xe8>
			esc1_output = 125;
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <Calculate_Motor_Outputs+0x1d0>)
 8002e30:	227d      	movs	r2, #125	; 0x7d
 8002e32:	601a      	str	r2, [r3, #0]

		if(esc2_output > 250)
 8002e34:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <Calculate_Motor_Outputs+0x1d4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2bfa      	cmp	r3, #250	; 0xfa
 8002e3a:	dd03      	ble.n	8002e44 <Calculate_Motor_Outputs+0xf8>
			esc2_output = 250;
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <Calculate_Motor_Outputs+0x1d4>)
 8002e3e:	22fa      	movs	r2, #250	; 0xfa
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e006      	b.n	8002e52 <Calculate_Motor_Outputs+0x106>
		else if(esc2_output < 125)
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <Calculate_Motor_Outputs+0x1d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b7c      	cmp	r3, #124	; 0x7c
 8002e4a:	dc02      	bgt.n	8002e52 <Calculate_Motor_Outputs+0x106>
			esc2_output = 125;
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <Calculate_Motor_Outputs+0x1d4>)
 8002e4e:	227d      	movs	r2, #125	; 0x7d
 8002e50:	601a      	str	r2, [r3, #0]

		if(esc3_output > 250)
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <Calculate_Motor_Outputs+0x1d8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2bfa      	cmp	r3, #250	; 0xfa
 8002e58:	dd03      	ble.n	8002e62 <Calculate_Motor_Outputs+0x116>
			esc3_output = 250;
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <Calculate_Motor_Outputs+0x1d8>)
 8002e5c:	22fa      	movs	r2, #250	; 0xfa
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e006      	b.n	8002e70 <Calculate_Motor_Outputs+0x124>
		else if(esc3_output < 125)
 8002e62:	4b30      	ldr	r3, [pc, #192]	; (8002f24 <Calculate_Motor_Outputs+0x1d8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b7c      	cmp	r3, #124	; 0x7c
 8002e68:	dc02      	bgt.n	8002e70 <Calculate_Motor_Outputs+0x124>
			esc3_output = 125;
 8002e6a:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <Calculate_Motor_Outputs+0x1d8>)
 8002e6c:	227d      	movs	r2, #125	; 0x7d
 8002e6e:	601a      	str	r2, [r3, #0]

		if(esc4_output > 250)
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <Calculate_Motor_Outputs+0x1dc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2bfa      	cmp	r3, #250	; 0xfa
 8002e76:	dd03      	ble.n	8002e80 <Calculate_Motor_Outputs+0x134>
			esc4_output = 250;
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <Calculate_Motor_Outputs+0x1dc>)
 8002e7a:	22fa      	movs	r2, #250	; 0xfa
 8002e7c:	601a      	str	r2, [r3, #0]
		esc1_output = 125;
		esc2_output = 125;
		esc3_output = 125;
		esc4_output = 125;
	}
}
 8002e7e:	e034      	b.n	8002eea <Calculate_Motor_Outputs+0x19e>
		else if(esc4_output < 125)
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <Calculate_Motor_Outputs+0x1dc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b7c      	cmp	r3, #124	; 0x7c
 8002e86:	dc30      	bgt.n	8002eea <Calculate_Motor_Outputs+0x19e>
			esc4_output = 125;
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <Calculate_Motor_Outputs+0x1dc>)
 8002e8a:	227d      	movs	r2, #125	; 0x7d
 8002e8c:	601a      	str	r2, [r3, #0]
}
 8002e8e:	e02c      	b.n	8002eea <Calculate_Motor_Outputs+0x19e>
		pid_roll_setpoint = 0;
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <Calculate_Motor_Outputs+0x1e0>)
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
		pid_pitch_setpoint = 0;
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <Calculate_Motor_Outputs+0x1e4>)
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
		pid_yaw_setpoint = 0;
 8002ea0:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <Calculate_Motor_Outputs+0x1e8>)
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
		pid_roll_output = 0;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <Calculate_Motor_Outputs+0x1c4>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
		pid_pitch_output = 0;
 8002eae:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <Calculate_Motor_Outputs+0x1c8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
		pid_yaw_output = 0;
 8002eb4:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <Calculate_Motor_Outputs+0x1cc>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
		pid_roll_i = 0;
 8002eba:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <Calculate_Motor_Outputs+0x1ec>)
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
		pid_pitch_i = 0;
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <Calculate_Motor_Outputs+0x1f0>)
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
		pid_yaw_i = 0;
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <Calculate_Motor_Outputs+0x1f4>)
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
		esc1_output = 125;
 8002ed2:	4b12      	ldr	r3, [pc, #72]	; (8002f1c <Calculate_Motor_Outputs+0x1d0>)
 8002ed4:	227d      	movs	r2, #125	; 0x7d
 8002ed6:	601a      	str	r2, [r3, #0]
		esc2_output = 125;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <Calculate_Motor_Outputs+0x1d4>)
 8002eda:	227d      	movs	r2, #125	; 0x7d
 8002edc:	601a      	str	r2, [r3, #0]
		esc3_output = 125;
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <Calculate_Motor_Outputs+0x1d8>)
 8002ee0:	227d      	movs	r2, #125	; 0x7d
 8002ee2:	601a      	str	r2, [r3, #0]
		esc4_output = 125;
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <Calculate_Motor_Outputs+0x1dc>)
 8002ee6:	227d      	movs	r2, #125	; 0x7d
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	200010b0 	.word	0x200010b0
 8002ef8:	200003c4 	.word	0x200003c4
 8002efc:	2000002c 	.word	0x2000002c
 8002f00:	20000afc 	.word	0x20000afc
 8002f04:	200002f9 	.word	0x200002f9
 8002f08:	200002a8 	.word	0x200002a8
 8002f0c:	200002d7 	.word	0x200002d7
 8002f10:	20000a58 	.word	0x20000a58
 8002f14:	20000a5c 	.word	0x20000a5c
 8002f18:	20000440 	.word	0x20000440
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	20000010 	.word	0x20000010
 8002f24:	20000014 	.word	0x20000014
 8002f28:	20000018 	.word	0x20000018
 8002f2c:	20000d9c 	.word	0x20000d9c
 8002f30:	20000da0 	.word	0x20000da0
 8002f34:	20000b94 	.word	0x20000b94
 8002f38:	20000444 	.word	0x20000444
 8002f3c:	20000a50 	.word	0x20000a50
 8002f40:	20000a54 	.word	0x20000a54
 8002f44:	00000000 	.word	0x00000000

08002f48 <Calculate_Altitude_PID>:

float pid_altitude_over_time_total = 0, pid_altitude_over_time[10];
uint8_t pid_altitude_over_time_reading_index = 0;

void Calculate_Altitude_PID()
{
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	total_bmp_altitude -= bmp_over_time[bmp_reading_index];
 8002f4c:	4b96      	ldr	r3, [pc, #600]	; (80031a8 <Calculate_Altitude_PID+0x260>)
 8002f4e:	ed93 7a00 	vldr	s14, [r3]
 8002f52:	4b96      	ldr	r3, [pc, #600]	; (80031ac <Calculate_Altitude_PID+0x264>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4a96      	ldr	r2, [pc, #600]	; (80031b0 <Calculate_Altitude_PID+0x268>)
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f64:	4b90      	ldr	r3, [pc, #576]	; (80031a8 <Calculate_Altitude_PID+0x260>)
 8002f66:	edc3 7a00 	vstr	s15, [r3]
	bmp_over_time[bmp_reading_index] = read_bmp_altitude;
 8002f6a:	4b90      	ldr	r3, [pc, #576]	; (80031ac <Calculate_Altitude_PID+0x264>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4b90      	ldr	r3, [pc, #576]	; (80031b4 <Calculate_Altitude_PID+0x26c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	498e      	ldr	r1, [pc, #568]	; (80031b0 <Calculate_Altitude_PID+0x268>)
 8002f76:	0083      	lsls	r3, r0, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	601a      	str	r2, [r3, #0]
	total_bmp_altitude += bmp_over_time[bmp_reading_index];
 8002f7c:	4b8b      	ldr	r3, [pc, #556]	; (80031ac <Calculate_Altitude_PID+0x264>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4a8b      	ldr	r2, [pc, #556]	; (80031b0 <Calculate_Altitude_PID+0x268>)
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	ed93 7a00 	vldr	s14, [r3]
 8002f8a:	4b87      	ldr	r3, [pc, #540]	; (80031a8 <Calculate_Altitude_PID+0x260>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <Calculate_Altitude_PID+0x260>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]

	fast_bmp_altitude = (total_bmp_altitude / 4.00);
 8002f9a:	4b83      	ldr	r3, [pc, #524]	; (80031a8 <Calculate_Altitude_PID+0x260>)
 8002f9c:	ed93 7a00 	vldr	s14, [r3]
 8002fa0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fa8:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <Calculate_Altitude_PID+0x270>)
 8002faa:	edc3 7a00 	vstr	s15, [r3]
	slow_bmp_altitude = (slow_bmp_altitude * 0.900) + (fast_bmp_altitude * 0.100);
 8002fae:	4b83      	ldr	r3, [pc, #524]	; (80031bc <Calculate_Altitude_PID+0x274>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fac8 	bl	8000548 <__aeabi_f2d>
 8002fb8:	a36b      	add	r3, pc, #428	; (adr r3, 8003168 <Calculate_Altitude_PID+0x220>)
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	f7fd fb1b 	bl	80005f8 <__aeabi_dmul>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460c      	mov	r4, r1
 8002fc6:	4625      	mov	r5, r4
 8002fc8:	461c      	mov	r4, r3
 8002fca:	4b7b      	ldr	r3, [pc, #492]	; (80031b8 <Calculate_Altitude_PID+0x270>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd faba 	bl	8000548 <__aeabi_f2d>
 8002fd4:	a366      	add	r3, pc, #408	; (adr r3, 8003170 <Calculate_Altitude_PID+0x228>)
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f7fd fb0d 	bl	80005f8 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	f7fd f951 	bl	800028c <__adddf3>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	f7fd fdd9 	bl	8000ba8 <__aeabi_d2f>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b70      	ldr	r3, [pc, #448]	; (80031bc <Calculate_Altitude_PID+0x274>)
 8002ffa:	601a      	str	r2, [r3, #0]

	pressure_difference = slow_bmp_altitude - fast_bmp_altitude;
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <Calculate_Altitude_PID+0x274>)
 8002ffe:	ed93 7a00 	vldr	s14, [r3]
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <Calculate_Altitude_PID+0x270>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 800300e:	edc3 7a00 	vstr	s15, [r3]

	if(pressure_difference > 0.400)
 8003012:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa96 	bl	8000548 <__aeabi_f2d>
 800301c:	a356      	add	r3, pc, #344	; (adr r3, 8003178 <Calculate_Altitude_PID+0x230>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd fd79 	bl	8000b18 <__aeabi_dcmpgt>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <Calculate_Altitude_PID+0xec>
		pressure_difference = 0.400;
 800302c:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 800302e:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <Calculate_Altitude_PID+0x27c>)
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	e00f      	b.n	8003054 <Calculate_Altitude_PID+0x10c>
	else if(pressure_difference < -0.400)
 8003034:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7fd fa85 	bl	8000548 <__aeabi_f2d>
 800303e:	a350      	add	r3, pc, #320	; (adr r3, 8003180 <Calculate_Altitude_PID+0x238>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	f7fd fd4a 	bl	8000adc <__aeabi_dcmplt>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <Calculate_Altitude_PID+0x10c>
		pressure_difference = -0.400;
 800304e:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 8003050:	4a5d      	ldr	r2, [pc, #372]	; (80031c8 <Calculate_Altitude_PID+0x280>)
 8003052:	601a      	str	r2, [r3, #0]

	if(pressure_difference > 0.120 || pressure_difference < -0.120)
 8003054:	4b5a      	ldr	r3, [pc, #360]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fa75 	bl	8000548 <__aeabi_f2d>
 800305e:	a34a      	add	r3, pc, #296	; (adr r3, 8003188 <Calculate_Altitude_PID+0x240>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd fd58 	bl	8000b18 <__aeabi_dcmpgt>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <Calculate_Altitude_PID+0x140>
 800306e:	4b54      	ldr	r3, [pc, #336]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa68 	bl	8000548 <__aeabi_f2d>
 8003078:	a345      	add	r3, pc, #276	; (adr r3, 8003190 <Calculate_Altitude_PID+0x248>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fd2d 	bl	8000adc <__aeabi_dcmplt>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <Calculate_Altitude_PID+0x182>
		slow_bmp_altitude -= pressure_difference / 2.00;
 8003088:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <Calculate_Altitude_PID+0x274>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa5b 	bl	8000548 <__aeabi_f2d>
 8003092:	4604      	mov	r4, r0
 8003094:	460d      	mov	r5, r1
 8003096:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <Calculate_Altitude_PID+0x278>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fa54 	bl	8000548 <__aeabi_f2d>
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a8:	f7fd fbd0 	bl	800084c <__aeabi_ddiv>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4620      	mov	r0, r4
 80030b2:	4629      	mov	r1, r5
 80030b4:	f7fd f8e8 	bl	8000288 <__aeabi_dsub>
 80030b8:	4603      	mov	r3, r0
 80030ba:	460c      	mov	r4, r1
 80030bc:	4618      	mov	r0, r3
 80030be:	4621      	mov	r1, r4
 80030c0:	f7fd fd72 	bl	8000ba8 <__aeabi_d2f>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <Calculate_Altitude_PID+0x274>)
 80030c8:	601a      	str	r2, [r3, #0]

	bmp_reading_index++;
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <Calculate_Altitude_PID+0x264>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4b36      	ldr	r3, [pc, #216]	; (80031ac <Calculate_Altitude_PID+0x264>)
 80030d4:	701a      	strb	r2, [r3, #0]

	if(bmp_reading_index == 4)
 80030d6:	4b35      	ldr	r3, [pc, #212]	; (80031ac <Calculate_Altitude_PID+0x264>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d102      	bne.n	80030e4 <Calculate_Altitude_PID+0x19c>
		bmp_reading_index = 0;
 80030de:	4b33      	ldr	r3, [pc, #204]	; (80031ac <Calculate_Altitude_PID+0x264>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]

	pid_error_temp = pid_altitude_setpoint - slow_bmp_altitude;
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <Calculate_Altitude_PID+0x284>)
 80030e6:	ed93 7a00 	vldr	s14, [r3]
 80030ea:	4b34      	ldr	r3, [pc, #208]	; (80031bc <Calculate_Altitude_PID+0x274>)
 80030ec:	edd3 7a00 	vldr	s15, [r3]
 80030f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <Calculate_Altitude_PID+0x288>)
 80030f6:	edc3 7a00 	vstr	s15, [r3]
	pid_alt_i += ki_alt * pid_error_temp;
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <Calculate_Altitude_PID+0x28c>)
 80030fc:	ed93 7a00 	vldr	s14, [r3]
 8003100:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <Calculate_Altitude_PID+0x288>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800310a:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <Calculate_Altitude_PID+0x290>)
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003114:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <Calculate_Altitude_PID+0x290>)
 8003116:	edc3 7a00 	vstr	s15, [r3]

	if (pid_error_temp > 1.60 || pid_error_temp < -1.60)
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <Calculate_Altitude_PID+0x288>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fa12 	bl	8000548 <__aeabi_f2d>
 8003124:	a31c      	add	r3, pc, #112	; (adr r3, 8003198 <Calculate_Altitude_PID+0x250>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f7fd fcf5 	bl	8000b18 <__aeabi_dcmpgt>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10c      	bne.n	800314e <Calculate_Altitude_PID+0x206>
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <Calculate_Altitude_PID+0x288>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fa05 	bl	8000548 <__aeabi_f2d>
 800313e:	a318      	add	r3, pc, #96	; (adr r3, 80031a0 <Calculate_Altitude_PID+0x258>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd fcca 	bl	8000adc <__aeabi_dcmplt>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d04a      	beq.n	80031e4 <Calculate_Altitude_PID+0x29c>
	{
		kp_alt_actual = kp_alt * 2.5;
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <Calculate_Altitude_PID+0x294>)
 8003150:	edd3 7a00 	vldr	s15, [r3]
 8003154:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8003158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <Calculate_Altitude_PID+0x298>)
 800315e:	edc3 7a00 	vstr	s15, [r3]
 8003162:	e043      	b.n	80031ec <Calculate_Altitude_PID+0x2a4>
 8003164:	f3af 8000 	nop.w
 8003168:	cccccccd 	.word	0xcccccccd
 800316c:	3feccccc 	.word	0x3feccccc
 8003170:	9999999a 	.word	0x9999999a
 8003174:	3fb99999 	.word	0x3fb99999
 8003178:	9999999a 	.word	0x9999999a
 800317c:	3fd99999 	.word	0x3fd99999
 8003180:	9999999a 	.word	0x9999999a
 8003184:	bfd99999 	.word	0xbfd99999
 8003188:	eb851eb8 	.word	0xeb851eb8
 800318c:	3fbeb851 	.word	0x3fbeb851
 8003190:	eb851eb8 	.word	0xeb851eb8
 8003194:	bfbeb851 	.word	0xbfbeb851
 8003198:	9999999a 	.word	0x9999999a
 800319c:	3ff99999 	.word	0x3ff99999
 80031a0:	9999999a 	.word	0x9999999a
 80031a4:	bff99999 	.word	0xbff99999
 80031a8:	20000da8 	.word	0x20000da8
 80031ac:	20000294 	.word	0x20000294
 80031b0:	200003f0 	.word	0x200003f0
 80031b4:	20000338 	.word	0x20000338
 80031b8:	2000029c 	.word	0x2000029c
 80031bc:	200002a0 	.word	0x200002a0
 80031c0:	20000298 	.word	0x20000298
 80031c4:	3ecccccd 	.word	0x3ecccccd
 80031c8:	becccccd 	.word	0xbecccccd
 80031cc:	20000020 	.word	0x20000020
 80031d0:	20000dac 	.word	0x20000dac
 80031d4:	200002b4 	.word	0x200002b4
 80031d8:	200002bc 	.word	0x200002bc
 80031dc:	200002ac 	.word	0x200002ac
 80031e0:	200002b0 	.word	0x200002b0
	}
	else
		kp_alt_actual = kp_alt;
 80031e4:	4b46      	ldr	r3, [pc, #280]	; (8003300 <Calculate_Altitude_PID+0x3b8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a46      	ldr	r2, [pc, #280]	; (8003304 <Calculate_Altitude_PID+0x3bc>)
 80031ea:	6013      	str	r3, [r2, #0]

	pid_altitude_over_time_total -= pid_altitude_over_time[pid_altitude_over_time_reading_index];
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <Calculate_Altitude_PID+0x3c0>)
 80031ee:	ed93 7a00 	vldr	s14, [r3]
 80031f2:	4b46      	ldr	r3, [pc, #280]	; (800330c <Calculate_Altitude_PID+0x3c4>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	4a46      	ldr	r2, [pc, #280]	; (8003310 <Calculate_Altitude_PID+0x3c8>)
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003204:	4b40      	ldr	r3, [pc, #256]	; (8003308 <Calculate_Altitude_PID+0x3c0>)
 8003206:	edc3 7a00 	vstr	s15, [r3]
	pid_altitude_over_time[pid_altitude_over_time_reading_index] = (pid_error_temp - pid_alt_last_error) * kd_alt;
 800320a:	4b42      	ldr	r3, [pc, #264]	; (8003314 <Calculate_Altitude_PID+0x3cc>)
 800320c:	ed93 7a00 	vldr	s14, [r3]
 8003210:	4b41      	ldr	r3, [pc, #260]	; (8003318 <Calculate_Altitude_PID+0x3d0>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee37 7a67 	vsub.f32	s14, s14, s15
 800321a:	4b40      	ldr	r3, [pc, #256]	; (800331c <Calculate_Altitude_PID+0x3d4>)
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	4b3a      	ldr	r3, [pc, #232]	; (800330c <Calculate_Altitude_PID+0x3c4>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003228:	4a39      	ldr	r2, [pc, #228]	; (8003310 <Calculate_Altitude_PID+0x3c8>)
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	edc3 7a00 	vstr	s15, [r3]
	pid_altitude_over_time_total += pid_altitude_over_time[pid_altitude_over_time_reading_index];
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <Calculate_Altitude_PID+0x3c4>)
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4a36      	ldr	r2, [pc, #216]	; (8003310 <Calculate_Altitude_PID+0x3c8>)
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	ed93 7a00 	vldr	s14, [r3]
 8003240:	4b31      	ldr	r3, [pc, #196]	; (8003308 <Calculate_Altitude_PID+0x3c0>)
 8003242:	edd3 7a00 	vldr	s15, [r3]
 8003246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <Calculate_Altitude_PID+0x3c0>)
 800324c:	edc3 7a00 	vstr	s15, [r3]

	pid_altitude_over_time_reading_index++;
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <Calculate_Altitude_PID+0x3c4>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	b2da      	uxtb	r2, r3
 8003258:	4b2c      	ldr	r3, [pc, #176]	; (800330c <Calculate_Altitude_PID+0x3c4>)
 800325a:	701a      	strb	r2, [r3, #0]

	if(pid_altitude_over_time_reading_index == 10)
 800325c:	4b2b      	ldr	r3, [pc, #172]	; (800330c <Calculate_Altitude_PID+0x3c4>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b0a      	cmp	r3, #10
 8003262:	d102      	bne.n	800326a <Calculate_Altitude_PID+0x322>
		pid_altitude_over_time_reading_index = 0;
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <Calculate_Altitude_PID+0x3c4>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]

	if(pid_alt_i > 50)
 800326a:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <Calculate_Altitude_PID+0x3d8>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003324 <Calculate_Altitude_PID+0x3dc>
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	dd03      	ble.n	8003286 <Calculate_Altitude_PID+0x33e>
		pid_alt_i = 50;
 800327e:	4b28      	ldr	r3, [pc, #160]	; (8003320 <Calculate_Altitude_PID+0x3d8>)
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <Calculate_Altitude_PID+0x3e0>)
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	e00c      	b.n	80032a0 <Calculate_Altitude_PID+0x358>
	else if(pid_alt_i < -50)
 8003286:	4b26      	ldr	r3, [pc, #152]	; (8003320 <Calculate_Altitude_PID+0x3d8>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800332c <Calculate_Altitude_PID+0x3e4>
 8003290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	d502      	bpl.n	80032a0 <Calculate_Altitude_PID+0x358>
		pid_alt_i = -50;
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <Calculate_Altitude_PID+0x3d8>)
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <Calculate_Altitude_PID+0x3e8>)
 800329e:	601a      	str	r2, [r3, #0]

	altitude_pid_output = (pid_error_temp * kp_alt_actual) + pid_alt_i + pid_altitude_over_time_total;
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <Calculate_Altitude_PID+0x3cc>)
 80032a2:	ed93 7a00 	vldr	s14, [r3]
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <Calculate_Altitude_PID+0x3bc>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <Calculate_Altitude_PID+0x3d8>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <Calculate_Altitude_PID+0x3c0>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032c8:	ee17 2a90 	vmov	r2, s15
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <Calculate_Altitude_PID+0x3ec>)
 80032ce:	601a      	str	r2, [r3, #0]

	pid_alt_last_error = pid_error_temp;
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <Calculate_Altitude_PID+0x3cc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a10      	ldr	r2, [pc, #64]	; (8003318 <Calculate_Altitude_PID+0x3d0>)
 80032d6:	6013      	str	r3, [r2, #0]

	if(altitude_pid_output > 110)
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <Calculate_Altitude_PID+0x3ec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b6e      	cmp	r3, #110	; 0x6e
 80032de:	dd03      	ble.n	80032e8 <Calculate_Altitude_PID+0x3a0>
		altitude_pid_output = 110;
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <Calculate_Altitude_PID+0x3ec>)
 80032e2:	226e      	movs	r2, #110	; 0x6e
 80032e4:	601a      	str	r2, [r3, #0]
	else if(altitude_pid_output < -110)
		altitude_pid_output = -110;
}
 80032e6:	e008      	b.n	80032fa <Calculate_Altitude_PID+0x3b2>
	else if(altitude_pid_output < -110)
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <Calculate_Altitude_PID+0x3ec>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80032f0:	da03      	bge.n	80032fa <Calculate_Altitude_PID+0x3b2>
		altitude_pid_output = -110;
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <Calculate_Altitude_PID+0x3ec>)
 80032f4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	bdb0      	pop	{r4, r5, r7, pc}
 80032fe:	bf00      	nop
 8003300:	200002ac 	.word	0x200002ac
 8003304:	200002b0 	.word	0x200002b0
 8003308:	200002c0 	.word	0x200002c0
 800330c:	200002c4 	.word	0x200002c4
 8003310:	200003c8 	.word	0x200003c8
 8003314:	20000dac 	.word	0x20000dac
 8003318:	200002a4 	.word	0x200002a4
 800331c:	200002b8 	.word	0x200002b8
 8003320:	200002bc 	.word	0x200002bc
 8003324:	42480000 	.word	0x42480000
 8003328:	42480000 	.word	0x42480000
 800332c:	c2480000 	.word	0xc2480000
 8003330:	c2480000 	.word	0xc2480000
 8003334:	200002a8 	.word	0x200002a8

08003338 <Control_Loop>:
uint8_t launched = 0, launching = 0, landing = 0;
uint8_t ready_for_next_command = 1, ready_for_next_command_high_priority = 1;
uint8_t manual_mode = 0;

void Control_Loop()
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
	if(high_priority_program_width > 0 && ready_for_next_command_high_priority)
 800333e:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <Control_Loop+0xa8>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d026      	beq.n	8003394 <Control_Loop+0x5c>
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <Control_Loop+0xac>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d022      	beq.n	8003394 <Control_Loop+0x5c>
	{
		if(GetMillisDifference(&high_priority_control_loop_wait_timer) >= high_priority_control_loop_wait_time)
 800334e:	4826      	ldr	r0, [pc, #152]	; (80033e8 <Control_Loop+0xb0>)
 8003350:	f001 fc9e 	bl	8004c90 <GetMillisDifference>
 8003354:	4602      	mov	r2, r0
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <Control_Loop+0xb4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d33c      	bcc.n	80033d8 <Control_Loop+0xa0>
		{
			uint16_t increment_index = Parse_Command((uint8_t *)&high_priority_program_buffer, high_priority_program_counter, 1);
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <Control_Loop+0xb8>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	2201      	movs	r2, #1
 8003366:	4619      	mov	r1, r3
 8003368:	4822      	ldr	r0, [pc, #136]	; (80033f4 <Control_Loop+0xbc>)
 800336a:	f000 f84f 	bl	800340c <Parse_Command>
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
			high_priority_program_width -= increment_index;
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <Control_Loop+0xa8>)
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <Control_Loop+0xa8>)
 8003380:	701a      	strb	r2, [r3, #0]
			high_priority_program_counter += increment_index;
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <Control_Loop+0xb8>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	4413      	add	r3, r2
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <Control_Loop+0xb8>)
 8003390:	701a      	strb	r2, [r3, #0]
		if(GetMillisDifference(&high_priority_control_loop_wait_timer) >= high_priority_control_loop_wait_time)
 8003392:	e021      	b.n	80033d8 <Control_Loop+0xa0>
		}
	}
	else if(program_counter < 512 && ready_for_next_command)
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <Control_Loop+0xc0>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d21c      	bcs.n	80033d8 <Control_Loop+0xa0>
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <Control_Loop+0xc4>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d018      	beq.n	80033d8 <Control_Loop+0xa0>
	{
		if(GetMillisDifference(&control_loop_wait_timer) >= control_loop_wait_time)
 80033a6:	4816      	ldr	r0, [pc, #88]	; (8003400 <Control_Loop+0xc8>)
 80033a8:	f001 fc72 	bl	8004c90 <GetMillisDifference>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <Control_Loop+0xcc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d310      	bcc.n	80033d8 <Control_Loop+0xa0>
		{
			uint16_t increment_index = Parse_Command((uint8_t *)&program_buffer, program_counter, 0);
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <Control_Loop+0xc0>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	4619      	mov	r1, r3
 80033be:	4812      	ldr	r0, [pc, #72]	; (8003408 <Control_Loop+0xd0>)
 80033c0:	f000 f824 	bl	800340c <Parse_Command>
 80033c4:	4603      	mov	r3, r0
 80033c6:	80bb      	strh	r3, [r7, #4]
			program_counter += increment_index;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <Control_Loop+0xc0>)
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	88bb      	ldrh	r3, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <Control_Loop+0xc0>)
 80033d4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80033d6:	e7ff      	b.n	80033d8 <Control_Loop+0xa0>
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200002c9 	.word	0x200002c9
 80033e4:	20000025 	.word	0x20000025
 80033e8:	20000b00 	.word	0x20000b00
 80033ec:	200002d0 	.word	0x200002d0
 80033f0:	200002c8 	.word	0x200002c8
 80033f4:	20000a60 	.word	0x20000a60
 80033f8:	200002c6 	.word	0x200002c6
 80033fc:	20000024 	.word	0x20000024
 8003400:	20000b14 	.word	0x20000b14
 8003404:	200002cc 	.word	0x200002cc
 8003408:	20000850 	.word	0x20000850

0800340c <Parse_Command>:

uint16_t Parse_Command(uint8_t *cmd_array, uint16_t cmd_index, uint8_t high_priority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
	uint16_t output_index = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	81fb      	strh	r3, [r7, #14]

	switch(cmd_array[cmd_index])
 8003420:	887b      	ldrh	r3, [r7, #2]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b05      	cmp	r3, #5
 800342a:	d85f      	bhi.n	80034ec <Parse_Command+0xe0>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <Parse_Command+0x28>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	0800344d 	.word	0x0800344d
 8003438:	08003455 	.word	0x08003455
 800343c:	0800348b 	.word	0x0800348b
 8003440:	080034cb 	.word	0x080034cb
 8003444:	080034d1 	.word	0x080034d1
 8003448:	080034df 	.word	0x080034df
	{
	case 0x00:	//No OP
		output_index++;
 800344c:	89fb      	ldrh	r3, [r7, #14]
 800344e:	3301      	adds	r3, #1
 8003450:	81fb      	strh	r3, [r7, #14]
		break;
 8003452:	e04b      	b.n	80034ec <Parse_Command+0xe0>
	case 0x01:	//Toggle LED: uint8_t
		if(cmd_array[cmd_index + 1] == 0x01)
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	3301      	adds	r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d104      	bne.n	800346c <Parse_Command+0x60>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003462:	2102      	movs	r1, #2
 8003464:	4824      	ldr	r0, [pc, #144]	; (80034f8 <Parse_Command+0xec>)
 8003466:	f003 fd04 	bl	8006e72 <HAL_GPIO_TogglePin>
 800346a:	e00a      	b.n	8003482 <Parse_Command+0x76>
		}
		else if(cmd_array[cmd_index + 1] == 0x02)
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	3301      	adds	r3, #1
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d103      	bne.n	8003482 <Parse_Command+0x76>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800347a:	2104      	movs	r1, #4
 800347c:	481e      	ldr	r0, [pc, #120]	; (80034f8 <Parse_Command+0xec>)
 800347e:	f003 fcf8 	bl	8006e72 <HAL_GPIO_TogglePin>
		}

		output_index += 2;
 8003482:	89fb      	ldrh	r3, [r7, #14]
 8003484:	3302      	adds	r3, #2
 8003486:	81fb      	strh	r3, [r7, #14]
		break;
 8003488:	e030      	b.n	80034ec <Parse_Command+0xe0>
	case 0x02:	//Wait: uint32_t
		if(high_priority)
 800348a:	787b      	ldrb	r3, [r7, #1]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00c      	beq.n	80034aa <Parse_Command+0x9e>
		{
			high_priority_control_loop_wait_timer = GetMillis();
 8003490:	f001 fbec 	bl	8004c6c <GetMillis>
 8003494:	4602      	mov	r2, r0
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <Parse_Command+0xf0>)
 8003498:	601a      	str	r2, [r3, #0]
			high_priority_control_loop_wait_time = *((uint32_t *)&cmd_array[cmd_index + 1]);
 800349a:	887b      	ldrh	r3, [r7, #2]
 800349c:	3301      	adds	r3, #1
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a16      	ldr	r2, [pc, #88]	; (8003500 <Parse_Command+0xf4>)
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	e00b      	b.n	80034c2 <Parse_Command+0xb6>
		}
		else
		{
			control_loop_wait_timer = GetMillis();
 80034aa:	f001 fbdf 	bl	8004c6c <GetMillis>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <Parse_Command+0xf8>)
 80034b2:	601a      	str	r2, [r3, #0]
			control_loop_wait_time = *((uint32_t *)&cmd_array[cmd_index + 1]);
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	3301      	adds	r3, #1
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <Parse_Command+0xfc>)
 80034c0:	6013      	str	r3, [r2, #0]
		}
		output_index += 5;
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	3305      	adds	r3, #5
 80034c6:	81fb      	strh	r3, [r7, #14]
		break;
 80034c8:	e010      	b.n	80034ec <Parse_Command+0xe0>
	case 0x03:	//Restart program
		output_index = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	81fb      	strh	r3, [r7, #14]
		break;
 80034ce:	e00d      	b.n	80034ec <Parse_Command+0xe0>
	case 0x04:	//Launch
		Parse_Requested_State(LAUNCHED);
 80034d0:	2001      	movs	r0, #1
 80034d2:	f000 f81b 	bl	800350c <Parse_Requested_State>
		output_index++;
 80034d6:	89fb      	ldrh	r3, [r7, #14]
 80034d8:	3301      	adds	r3, #1
 80034da:	81fb      	strh	r3, [r7, #14]
		break;
 80034dc:	e006      	b.n	80034ec <Parse_Command+0xe0>
	case 0x05:	//Land
		Parse_Requested_State(LANDED);
 80034de:	2000      	movs	r0, #0
 80034e0:	f000 f814 	bl	800350c <Parse_Requested_State>
		output_index++;
 80034e4:	89fb      	ldrh	r3, [r7, #14]
 80034e6:	3301      	adds	r3, #1
 80034e8:	81fb      	strh	r3, [r7, #14]
		break;
 80034ea:	bf00      	nop
	}

	return output_index;
 80034ec:	89fb      	ldrh	r3, [r7, #14]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40020800 	.word	0x40020800
 80034fc:	20000b00 	.word	0x20000b00
 8003500:	200002d0 	.word	0x200002d0
 8003504:	20000b14 	.word	0x20000b14
 8003508:	200002cc 	.word	0x200002cc

0800350c <Parse_Requested_State>:

void Parse_Requested_State(int32_t requested_state)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	switch(requested_state)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <Parse_Requested_State+0x14>
 800351a:	2b01      	cmp	r3, #1
 800351c:	d022      	beq.n	8003564 <Parse_Requested_State+0x58>
			sprintf((char *)print_text_buffer, "%s", "Launching...\n");
			PrintManualPacket();
		}
		break;
	}
}
 800351e:	e04c      	b.n	80035ba <Parse_Requested_State+0xae>
		if(launched && !landing)
 8003520:	4b28      	ldr	r3, [pc, #160]	; (80035c4 <Parse_Requested_State+0xb8>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d045      	beq.n	80035b4 <Parse_Requested_State+0xa8>
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <Parse_Requested_State+0xbc>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d141      	bne.n	80035b4 <Parse_Requested_State+0xa8>
			landing = 1;
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <Parse_Requested_State+0xbc>)
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 0;
 8003536:	4b25      	ldr	r3, [pc, #148]	; (80035cc <Parse_Requested_State+0xc0>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 0;
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <Parse_Requested_State+0xc4>)
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
			launch_timer = GetMillis();
 8003542:	f001 fb93 	bl	8004c6c <GetMillis>
 8003546:	4602      	mov	r2, r0
 8003548:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <Parse_Requested_State+0xc8>)
 800354a:	601a      	str	r2, [r3, #0]
			ClearPrintBuffer();
 800354c:	f002 f94e 	bl	80057ec <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Landing...\n");
 8003550:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <Parse_Requested_State+0xcc>)
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <Parse_Requested_State+0xd0>)
 8003554:	4614      	mov	r4, r2
 8003556:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003558:	6020      	str	r0, [r4, #0]
 800355a:	6061      	str	r1, [r4, #4]
 800355c:	60a2      	str	r2, [r4, #8]
			PrintManualPacket();
 800355e:	f002 f95f 	bl	8005820 <PrintManualPacket>
		break;
 8003562:	e027      	b.n	80035b4 <Parse_Requested_State+0xa8>
		if(!launched && !launching)
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <Parse_Requested_State+0xb8>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d125      	bne.n	80035b8 <Parse_Requested_State+0xac>
 800356c:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <Parse_Requested_State+0xd4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d121      	bne.n	80035b8 <Parse_Requested_State+0xac>
			launching = 1;
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <Parse_Requested_State+0xd4>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
			acc_magnitude_at_start = acc_magnitude;
 800357a:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <Parse_Requested_State+0xd8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <Parse_Requested_State+0xdc>)
 8003580:	6013      	str	r3, [r2, #0]
			ready_for_next_command = 0;
 8003582:	4b12      	ldr	r3, [pc, #72]	; (80035cc <Parse_Requested_State+0xc0>)
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 0;
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <Parse_Requested_State+0xc4>)
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
			launch_timer = GetMillis();
 800358e:	f001 fb6d 	bl	8004c6c <GetMillis>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <Parse_Requested_State+0xc8>)
 8003596:	601a      	str	r2, [r3, #0]
			ClearPrintBuffer();
 8003598:	f002 f928 	bl	80057ec <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Launching...\n");
 800359c:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <Parse_Requested_State+0xcc>)
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <Parse_Requested_State+0xe0>)
 80035a0:	4614      	mov	r4, r2
 80035a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80035a4:	6020      	str	r0, [r4, #0]
 80035a6:	6061      	str	r1, [r4, #4]
 80035a8:	60a2      	str	r2, [r4, #8]
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	81a3      	strh	r3, [r4, #12]
			PrintManualPacket();
 80035ae:	f002 f937 	bl	8005820 <PrintManualPacket>
		break;
 80035b2:	e001      	b.n	80035b8 <Parse_Requested_State+0xac>
		break;
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <Parse_Requested_State+0xae>
		break;
 80035b8:	bf00      	nop
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	200002d4 	.word	0x200002d4
 80035c8:	200002d6 	.word	0x200002d6
 80035cc:	20000024 	.word	0x20000024
 80035d0:	20000025 	.word	0x20000025
 80035d4:	20000b90 	.word	0x20000b90
 80035d8:	200010fc 	.word	0x200010fc
 80035dc:	080135e8 	.word	0x080135e8
 80035e0:	200002d5 	.word	0x200002d5
 80035e4:	20001014 	.word	0x20001014
 80035e8:	20000ff8 	.word	0x20000ff8
 80035ec:	080135f4 	.word	0x080135f4

080035f0 <Launch_Behavior>:
int32_t idle_throttle = 125;
uint8_t z_acc_fast_reading_index = 0, z_acc_slow_reading_index = 0;
uint32_t launch_timer;

void Launch_Behavior()
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af02      	add	r7, sp, #8
	z_acc_fast_total -= z_acc_fast[z_acc_fast_reading_index];
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <Launch_Behavior+0x12c>)
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	4b48      	ldr	r3, [pc, #288]	; (8003720 <Launch_Behavior+0x130>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4a48      	ldr	r2, [pc, #288]	; (8003724 <Launch_Behavior+0x134>)
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800360e:	4b43      	ldr	r3, [pc, #268]	; (800371c <Launch_Behavior+0x12c>)
 8003610:	edc3 7a00 	vstr	s15, [r3]
	z_acc_fast[z_acc_fast_reading_index] = acc_magnitude;
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <Launch_Behavior+0x130>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	4b43      	ldr	r3, [pc, #268]	; (8003728 <Launch_Behavior+0x138>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4941      	ldr	r1, [pc, #260]	; (8003724 <Launch_Behavior+0x134>)
 8003620:	0083      	lsls	r3, r0, #2
 8003622:	440b      	add	r3, r1
 8003624:	601a      	str	r2, [r3, #0]
	z_acc_fast_total += z_acc_fast[z_acc_fast_reading_index];
 8003626:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <Launch_Behavior+0x130>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	4a3e      	ldr	r2, [pc, #248]	; (8003724 <Launch_Behavior+0x134>)
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	ed93 7a00 	vldr	s14, [r3]
 8003634:	4b39      	ldr	r3, [pc, #228]	; (800371c <Launch_Behavior+0x12c>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <Launch_Behavior+0x12c>)
 8003640:	edc3 7a00 	vstr	s15, [r3]

	z_acc_fast_reading_index++;
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <Launch_Behavior+0x130>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <Launch_Behavior+0x130>)
 800364e:	701a      	strb	r2, [r3, #0]

	if(z_acc_fast_reading_index == 25)
 8003650:	4b33      	ldr	r3, [pc, #204]	; (8003720 <Launch_Behavior+0x130>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b19      	cmp	r3, #25
 8003656:	d102      	bne.n	800365e <Launch_Behavior+0x6e>
	{
		z_acc_fast_reading_index = 0;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <Launch_Behavior+0x130>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
	}

	if(GetMillisDifference(&launch_timer) >= 1000)
 800365e:	4833      	ldr	r0, [pc, #204]	; (800372c <Launch_Behavior+0x13c>)
 8003660:	f001 fb16 	bl	8004c90 <GetMillisDifference>
 8003664:	4603      	mov	r3, r0
 8003666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800366a:	d353      	bcc.n	8003714 <Launch_Behavior+0x124>
	{
		hover_throttle += 0.075;
 800366c:	4b30      	ldr	r3, [pc, #192]	; (8003730 <Launch_Behavior+0x140>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc ff69 	bl	8000548 <__aeabi_f2d>
 8003676:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <Launch_Behavior+0x144>)
 800367c:	f7fc fe06 	bl	800028c <__adddf3>
 8003680:	4603      	mov	r3, r0
 8003682:	460c      	mov	r4, r1
 8003684:	4618      	mov	r0, r3
 8003686:	4621      	mov	r1, r4
 8003688:	f7fd fa8e 	bl	8000ba8 <__aeabi_d2f>
 800368c:	4602      	mov	r2, r0
 800368e:	4b28      	ldr	r3, [pc, #160]	; (8003730 <Launch_Behavior+0x140>)
 8003690:	601a      	str	r2, [r3, #0]
		idle_throttle = (int32_t)hover_throttle;
 8003692:	4b27      	ldr	r3, [pc, #156]	; (8003730 <Launch_Behavior+0x140>)
 8003694:	edd3 7a00 	vldr	s15, [r3]
 8003698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800369c:	ee17 2a90 	vmov	r2, s15
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <Launch_Behavior+0x148>)
 80036a2:	601a      	str	r2, [r3, #0]

		if((z_acc_fast_total / 25) - acc_magnitude_at_start > 700)
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <Launch_Behavior+0x12c>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80036ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <Launch_Behavior+0x14c>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036bc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003740 <Launch_Behavior+0x150>
 80036c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c8:	dc00      	bgt.n	80036cc <Launch_Behavior+0xdc>
			ClearPrintBuffer();
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
			PrintManualPacket();
		}
	}
}
 80036ca:	e023      	b.n	8003714 <Launch_Behavior+0x124>
			launched = 1;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <Launch_Behavior+0x154>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
			launching = 0;
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <Launch_Behavior+0x158>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
			landing = 0;
 80036d8:	4b1c      	ldr	r3, [pc, #112]	; (800374c <Launch_Behavior+0x15c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	701a      	strb	r2, [r3, #0]
			pid_altitude_setpoint = 1.5;
 80036de:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <Launch_Behavior+0x160>)
 80036e0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80036e4:	601a      	str	r2, [r3, #0]
			ready_for_next_command = 1;
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <Launch_Behavior+0x164>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 1;
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <Launch_Behavior+0x168>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
			altitude_hold_flag = 1;
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <Launch_Behavior+0x16c>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
			ClearPrintBuffer();
 80036f8:	f002 f878 	bl	80057ec <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
 80036fc:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <Launch_Behavior+0x148>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <Launch_Behavior+0x170>)
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	4a17      	ldr	r2, [pc, #92]	; (8003764 <Launch_Behavior+0x174>)
 8003708:	4917      	ldr	r1, [pc, #92]	; (8003768 <Launch_Behavior+0x178>)
 800370a:	4818      	ldr	r0, [pc, #96]	; (800376c <Launch_Behavior+0x17c>)
 800370c:	f00c ff54 	bl	80105b8 <siprintf>
			PrintManualPacket();
 8003710:	f002 f886 	bl	8005820 <PrintManualPacket>
}
 8003714:	bf00      	nop
 8003716:	3704      	adds	r7, #4
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}
 800371c:	20000da4 	.word	0x20000da4
 8003720:	200002d8 	.word	0x200002d8
 8003724:	20000a84 	.word	0x20000a84
 8003728:	20001014 	.word	0x20001014
 800372c:	20000b90 	.word	0x20000b90
 8003730:	20000028 	.word	0x20000028
 8003734:	3fb33333 	.word	0x3fb33333
 8003738:	2000002c 	.word	0x2000002c
 800373c:	20000ff8 	.word	0x20000ff8
 8003740:	442f0000 	.word	0x442f0000
 8003744:	200002d4 	.word	0x200002d4
 8003748:	200002d5 	.word	0x200002d5
 800374c:	200002d6 	.word	0x200002d6
 8003750:	20000020 	.word	0x20000020
 8003754:	20000024 	.word	0x20000024
 8003758:	20000025 	.word	0x20000025
 800375c:	200002f9 	.word	0x200002f9
 8003760:	08013618 	.word	0x08013618
 8003764:	08013604 	.word	0x08013604
 8003768:	08013610 	.word	0x08013610
 800376c:	200010fc 	.word	0x200010fc

08003770 <Land_Behavior>:

float temp_max_acc = 0;

void Land_Behavior()
{
 8003770:	b598      	push	{r3, r4, r7, lr}
 8003772:	af00      	add	r7, sp, #0
	z_acc_fast_total -= z_acc_fast[z_acc_fast_reading_index];
 8003774:	4b64      	ldr	r3, [pc, #400]	; (8003908 <Land_Behavior+0x198>)
 8003776:	ed93 7a00 	vldr	s14, [r3]
 800377a:	4b64      	ldr	r3, [pc, #400]	; (800390c <Land_Behavior+0x19c>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	4a64      	ldr	r2, [pc, #400]	; (8003910 <Land_Behavior+0x1a0>)
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	4b5e      	ldr	r3, [pc, #376]	; (8003908 <Land_Behavior+0x198>)
 800378e:	edc3 7a00 	vstr	s15, [r3]
	z_acc_fast[z_acc_fast_reading_index] = acc_magnitude;
 8003792:	4b5e      	ldr	r3, [pc, #376]	; (800390c <Land_Behavior+0x19c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	4b5e      	ldr	r3, [pc, #376]	; (8003914 <Land_Behavior+0x1a4>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	495c      	ldr	r1, [pc, #368]	; (8003910 <Land_Behavior+0x1a0>)
 800379e:	0083      	lsls	r3, r0, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	601a      	str	r2, [r3, #0]
	z_acc_fast_total += z_acc_fast[z_acc_fast_reading_index];
 80037a4:	4b59      	ldr	r3, [pc, #356]	; (800390c <Land_Behavior+0x19c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4a59      	ldr	r2, [pc, #356]	; (8003910 <Land_Behavior+0x1a0>)
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	ed93 7a00 	vldr	s14, [r3]
 80037b2:	4b55      	ldr	r3, [pc, #340]	; (8003908 <Land_Behavior+0x198>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037bc:	4b52      	ldr	r3, [pc, #328]	; (8003908 <Land_Behavior+0x198>)
 80037be:	edc3 7a00 	vstr	s15, [r3]

	z_acc_fast_reading_index++;
 80037c2:	4b52      	ldr	r3, [pc, #328]	; (800390c <Land_Behavior+0x19c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4b50      	ldr	r3, [pc, #320]	; (800390c <Land_Behavior+0x19c>)
 80037cc:	701a      	strb	r2, [r3, #0]

	if(z_acc_fast_reading_index == 25)
 80037ce:	4b4f      	ldr	r3, [pc, #316]	; (800390c <Land_Behavior+0x19c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b19      	cmp	r3, #25
 80037d4:	d102      	bne.n	80037dc <Land_Behavior+0x6c>
	{
		z_acc_fast_reading_index = 0;
 80037d6:	4b4d      	ldr	r3, [pc, #308]	; (800390c <Land_Behavior+0x19c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
	}

	if(GetMillisDifference(&launch_timer) >= 1000)
 80037dc:	484e      	ldr	r0, [pc, #312]	; (8003918 <Land_Behavior+0x1a8>)
 80037de:	f001 fa57 	bl	8004c90 <GetMillisDifference>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e8:	f0c0 8087 	bcc.w	80038fa <Land_Behavior+0x18a>
	{
		pid_altitude_setpoint -= 0.002;
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <Land_Behavior+0x1ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fea9 	bl	8000548 <__aeabi_f2d>
 80037f6:	a342      	add	r3, pc, #264	; (adr r3, 8003900 <Land_Behavior+0x190>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f7fc fd44 	bl	8000288 <__aeabi_dsub>
 8003800:	4603      	mov	r3, r0
 8003802:	460c      	mov	r4, r1
 8003804:	4618      	mov	r0, r3
 8003806:	4621      	mov	r1, r4
 8003808:	f7fd f9ce 	bl	8000ba8 <__aeabi_d2f>
 800380c:	4602      	mov	r2, r0
 800380e:	4b43      	ldr	r3, [pc, #268]	; (800391c <Land_Behavior+0x1ac>)
 8003810:	601a      	str	r2, [r3, #0]

		if(abs((z_acc_fast_total / 25) - acc_magnitude_at_start) > temp_max_acc)
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <Land_Behavior+0x198>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800381c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003820:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <Land_Behavior+0x1b0>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800382a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800382e:	ee17 3a90 	vmov	r3, s15
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfb8      	it	lt
 8003836:	425b      	neglt	r3, r3
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003840:	4b38      	ldr	r3, [pc, #224]	; (8003924 <Land_Behavior+0x1b4>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	dd19      	ble.n	8003884 <Land_Behavior+0x114>
		{
			temp_max_acc = abs((z_acc_fast_total / 25) - acc_magnitude_at_start);
 8003850:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <Land_Behavior+0x198>)
 8003852:	edd3 7a00 	vldr	s15, [r3]
 8003856:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800385a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <Land_Behavior+0x1b0>)
 8003860:	edd3 7a00 	vldr	s15, [r3]
 8003864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800386c:	ee17 3a90 	vmov	r3, s15
 8003870:	2b00      	cmp	r3, #0
 8003872:	bfb8      	it	lt
 8003874:	425b      	neglt	r3, r3
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387e:	4b29      	ldr	r3, [pc, #164]	; (8003924 <Land_Behavior+0x1b4>)
 8003880:	edc3 7a00 	vstr	s15, [r3]
		}

		if((z_acc_fast_total / 25) - acc_magnitude_at_start > 4000)
 8003884:	4b20      	ldr	r3, [pc, #128]	; (8003908 <Land_Behavior+0x198>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800388e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003892:	4b23      	ldr	r3, [pc, #140]	; (8003920 <Land_Behavior+0x1b0>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800389c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003928 <Land_Behavior+0x1b8>
 80038a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a8:	dc00      	bgt.n	80038ac <Land_Behavior+0x13c>
			//sprintf((char *)print_text_buffer, "%s%ld%s", "Landed: ", (int32_t)temp_max_acc, "\n");
			sprintf((char *)print_text_buffer, "%s", "Landed.\n");
			PrintManualPacket();
		}
	}
}
 80038aa:	e026      	b.n	80038fa <Land_Behavior+0x18a>
			launched = 0;
 80038ac:	4b1f      	ldr	r3, [pc, #124]	; (800392c <Land_Behavior+0x1bc>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
			launching = 0;
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <Land_Behavior+0x1c0>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
			landing = 0;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <Land_Behavior+0x1c4>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	701a      	strb	r2, [r3, #0]
			pid_altitude_setpoint = 1.5;
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <Land_Behavior+0x1ac>)
 80038c0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80038c4:	601a      	str	r2, [r3, #0]
			hover_throttle = 125;
 80038c6:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <Land_Behavior+0x1c8>)
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <Land_Behavior+0x1cc>)
 80038ca:	601a      	str	r2, [r3, #0]
			idle_throttle = 125;
 80038cc:	4b1c      	ldr	r3, [pc, #112]	; (8003940 <Land_Behavior+0x1d0>)
 80038ce:	227d      	movs	r2, #125	; 0x7d
 80038d0:	601a      	str	r2, [r3, #0]
			altitude_hold_flag = 0;
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <Land_Behavior+0x1d4>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 1;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <Land_Behavior+0x1d8>)
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 1;
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <Land_Behavior+0x1dc>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
			ClearPrintBuffer();
 80038e4:	f001 ff82 	bl	80057ec <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Landed.\n");
 80038e8:	4a19      	ldr	r2, [pc, #100]	; (8003950 <Land_Behavior+0x1e0>)
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <Land_Behavior+0x1e4>)
 80038ec:	cb03      	ldmia	r3!, {r0, r1}
 80038ee:	6010      	str	r0, [r2, #0]
 80038f0:	6051      	str	r1, [r2, #4]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	7213      	strb	r3, [r2, #8]
			PrintManualPacket();
 80038f6:	f001 ff93 	bl	8005820 <PrintManualPacket>
}
 80038fa:	bf00      	nop
 80038fc:	bd98      	pop	{r3, r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	d2f1a9fc 	.word	0xd2f1a9fc
 8003904:	3f60624d 	.word	0x3f60624d
 8003908:	20000da4 	.word	0x20000da4
 800390c:	200002d8 	.word	0x200002d8
 8003910:	20000a84 	.word	0x20000a84
 8003914:	20001014 	.word	0x20001014
 8003918:	20000b90 	.word	0x20000b90
 800391c:	20000020 	.word	0x20000020
 8003920:	20000ff8 	.word	0x20000ff8
 8003924:	200002dc 	.word	0x200002dc
 8003928:	457a0000 	.word	0x457a0000
 800392c:	200002d4 	.word	0x200002d4
 8003930:	200002d5 	.word	0x200002d5
 8003934:	200002d6 	.word	0x200002d6
 8003938:	20000028 	.word	0x20000028
 800393c:	42fa0000 	.word	0x42fa0000
 8003940:	2000002c 	.word	0x2000002c
 8003944:	200002f9 	.word	0x200002f9
 8003948:	20000024 	.word	0x20000024
 800394c:	20000025 	.word	0x20000025
 8003950:	200010fc 	.word	0x200010fc
 8003954:	0801361c 	.word	0x0801361c

08003958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <MX_DMA_Init+0x6c>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <MX_DMA_Init+0x6c>)
 8003968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <MX_DMA_Init+0x6c>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800397a:	2200      	movs	r2, #0
 800397c:	2100      	movs	r1, #0
 800397e:	200b      	movs	r0, #11
 8003980:	f002 fd5d 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003984:	200b      	movs	r0, #11
 8003986:	f002 fd76 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	200e      	movs	r0, #14
 8003990:	f002 fd55 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003994:	200e      	movs	r0, #14
 8003996:	f002 fd6e 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800399a:	2200      	movs	r2, #0
 800399c:	2100      	movs	r1, #0
 800399e:	2011      	movs	r0, #17
 80039a0:	f002 fd4d 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80039a4:	2011      	movs	r0, #17
 80039a6:	f002 fd66 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	202f      	movs	r0, #47	; 0x2f
 80039b0:	f002 fd45 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80039b4:	202f      	movs	r0, #47	; 0x2f
 80039b6:	f002 fd5e 	bl	8006476 <HAL_NVIC_EnableIRQ>

}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <EEPROM_Clear_Buffer>:
uint8_t eeprom_write_buffer_width = 2;
uint8_t eeprom_read_write_buffer[34];
uint8_t eeprom_read_buffer_index = 0;

void EEPROM_Clear_Buffer()
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	e007      	b.n	80039e4 <EEPROM_Clear_Buffer+0x1c>
	{
		eeprom_read_write_buffer[i] = 0x00;
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <EEPROM_Clear_Buffer+0x30>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3301      	adds	r3, #1
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b21      	cmp	r3, #33	; 0x21
 80039e8:	ddf4      	ble.n	80039d4 <EEPROM_Clear_Buffer+0xc>
	}
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000398 	.word	0x20000398

080039fc <EEPROM_Save_Page>:

//This also works with single bytes
void EEPROM_Save_Page(uint16_t address)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
	eeprom_read_write_buffer[0] = (uint8_t)((address >> 8) & 0xFF);
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <EEPROM_Save_Page+0x40>)
 8003a10:	701a      	strb	r2, [r3, #0]
	eeprom_read_write_buffer[1] = (uint8_t)(address & 0xFF);
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <EEPROM_Save_Page+0x40>)
 8003a18:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR, (uint8_t *)eeprom_read_write_buffer, eeprom_write_buffer_width, 50);
 8003a1a:	23a0      	movs	r3, #160	; 0xa0
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <EEPROM_Save_Page+0x44>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	2332      	movs	r3, #50	; 0x32
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <EEPROM_Save_Page+0x40>)
 8003a2c:	4805      	ldr	r0, [pc, #20]	; (8003a44 <EEPROM_Save_Page+0x48>)
 8003a2e:	f003 fb73 	bl	8007118 <HAL_I2C_Master_Transmit>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000398 	.word	0x20000398
 8003a40:	20000030 	.word	0x20000030
 8003a44:	20000e14 	.word	0x20000e14

08003a48 <EEPROM_Read_Page>:

//This also works with single bytes(set size to 1)
void EEPROM_Read_Page(uint16_t address, uint8_t size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af04      	add	r7, sp, #16
 8003a4e:	4603      	mov	r3, r0
 8003a50:	460a      	mov	r2, r1
 8003a52:	80fb      	strh	r3, [r7, #6]
 8003a54:	4613      	mov	r3, r2
 8003a56:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *)eeprom_read_write_buffer, size, 50);
 8003a58:	23a0      	movs	r3, #160	; 0xa0
 8003a5a:	b299      	uxth	r1, r3
 8003a5c:	797b      	ldrb	r3, [r7, #5]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	88f8      	ldrh	r0, [r7, #6]
 8003a62:	2232      	movs	r2, #50	; 0x32
 8003a64:	9202      	str	r2, [sp, #8]
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <EEPROM_Read_Page+0x38>)
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4804      	ldr	r0, [pc, #16]	; (8003a84 <EEPROM_Read_Page+0x3c>)
 8003a72:	f003 fc4f 	bl	8007314 <HAL_I2C_Mem_Read>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000398 	.word	0x20000398
 8003a84:	20000e14 	.word	0x20000e14

08003a88 <EEPROM_Write_Buffer>:

void EEPROM_Write_Buffer(uint8_t *num, uint8_t size)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e00d      	b.n	8003ab6 <EEPROM_Write_Buffer+0x2e>
	{
		eeprom_read_write_buffer[eeprom_write_buffer_width + i] = *((uint8_t *)num + i);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	441a      	add	r2, r3
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <EEPROM_Write_Buffer+0x50>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	440b      	add	r3, r1
 8003aaa:	7811      	ldrb	r1, [r2, #0]
 8003aac:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <EEPROM_Write_Buffer+0x54>)
 8003aae:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < size; i++)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dbed      	blt.n	8003a9a <EEPROM_Write_Buffer+0x12>
	}

	eeprom_write_buffer_width += size;
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <EEPROM_Write_Buffer+0x50>)
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <EEPROM_Write_Buffer+0x50>)
 8003aca:	701a      	strb	r2, [r3, #0]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	20000030 	.word	0x20000030
 8003adc:	20000398 	.word	0x20000398

08003ae0 <EEPROM_Read_Buffer>:

void EEPROM_Read_Buffer(uint8_t *output, uint8_t size)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e00d      	b.n	8003b0e <EEPROM_Read_Buffer+0x2e>
	{
		*(((uint8_t *)output) + i) = eeprom_read_write_buffer[eeprom_read_buffer_index + i];
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <EEPROM_Read_Buffer+0x50>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	441a      	add	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	440b      	add	r3, r1
 8003b02:	490c      	ldr	r1, [pc, #48]	; (8003b34 <EEPROM_Read_Buffer+0x54>)
 8003b04:	5c8a      	ldrb	r2, [r1, r2]
 8003b06:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	dbed      	blt.n	8003af2 <EEPROM_Read_Buffer+0x12>
	}

	eeprom_read_buffer_index += size;
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <EEPROM_Read_Buffer+0x50>)
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <EEPROM_Read_Buffer+0x50>)
 8003b22:	701a      	strb	r2, [r3, #0]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	200002e0 	.word	0x200002e0
 8003b34:	20000398 	.word	0x20000398

08003b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	609a      	str	r2, [r3, #8]
 8003b4a:	60da      	str	r2, [r3, #12]
 8003b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a22      	ldr	r2, [pc, #136]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <MX_GPIO_Init+0xe0>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2106      	movs	r1, #6
 8003bc2:	4816      	ldr	r0, [pc, #88]	; (8003c1c <MX_GPIO_Init+0xe4>)
 8003bc4:	f003 f93c 	bl	8006e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003bce:	4814      	ldr	r0, [pc, #80]	; (8003c20 <MX_GPIO_Init+0xe8>)
 8003bd0:	f003 f936 	bl	8006e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8003bd4:	2306      	movs	r3, #6
 8003bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be4:	f107 0314 	add.w	r3, r7, #20
 8003be8:	4619      	mov	r1, r3
 8003bea:	480c      	ldr	r0, [pc, #48]	; (8003c1c <MX_GPIO_Init+0xe4>)
 8003bec:	f002 ff76 	bl	8006adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003bf0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c02:	f107 0314 	add.w	r3, r7, #20
 8003c06:	4619      	mov	r1, r3
 8003c08:	4805      	ldr	r0, [pc, #20]	; (8003c20 <MX_GPIO_Init+0xe8>)
 8003c0a:	f002 ff67 	bl	8006adc <HAL_GPIO_Init>

}
 8003c0e:	bf00      	nop
 8003c10:	3728      	adds	r7, #40	; 0x28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020400 	.word	0x40020400

08003c24 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <MX_I2C1_Init+0x54>)
 8003c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c30:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <MX_I2C1_Init+0x58>)
 8003c32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c60:	4804      	ldr	r0, [pc, #16]	; (8003c74 <MX_I2C1_Init+0x50>)
 8003c62:	f003 f921 	bl	8006ea8 <HAL_I2C_Init>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c6c:	f001 f89e 	bl	8004dac <Error_Handler>
  }

}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000e14 	.word	0x20000e14
 8003c78:	40005400 	.word	0x40005400
 8003c7c:	00061a80 	.word	0x00061a80

08003c80 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003c86:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <MX_I2C2_Init+0x54>)
 8003c88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <MX_I2C2_Init+0x58>)
 8003c8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ca2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003caa:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003cbc:	4804      	ldr	r0, [pc, #16]	; (8003cd0 <MX_I2C2_Init+0x50>)
 8003cbe:	f003 f8f3 	bl	8006ea8 <HAL_I2C_Init>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003cc8:	f001 f870 	bl	8004dac <Error_Handler>
  }

}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000e68 	.word	0x20000e68
 8003cd4:	40005800 	.word	0x40005800
 8003cd8:	00061a80 	.word	0x00061a80

08003cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a9d      	ldr	r2, [pc, #628]	; (8003f70 <HAL_I2C_MspInit+0x294>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	f040 8093 	bne.w	8003e26 <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	4b9b      	ldr	r3, [pc, #620]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	4a9a      	ldr	r2, [pc, #616]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d10:	4b98      	ldr	r3, [pc, #608]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d1c:	23c0      	movs	r3, #192	; 0xc0
 8003d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d20:	2312      	movs	r3, #18
 8003d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d24:	2301      	movs	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	4619      	mov	r1, r3
 8003d36:	4890      	ldr	r0, [pc, #576]	; (8003f78 <HAL_I2C_MspInit+0x29c>)
 8003d38:	f002 fed0 	bl	8006adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	4b8c      	ldr	r3, [pc, #560]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4a8b      	ldr	r2, [pc, #556]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003d46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4c:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003d58:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d5a:	4a89      	ldr	r2, [pc, #548]	; (8003f80 <HAL_I2C_MspInit+0x2a4>)
 8003d5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003d5e:	4b87      	ldr	r3, [pc, #540]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d66:	4b85      	ldr	r3, [pc, #532]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6c:	4b83      	ldr	r3, [pc, #524]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d72:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d7a:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d80:	4b7e      	ldr	r3, [pc, #504]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003d86:	4b7d      	ldr	r3, [pc, #500]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d8e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d92:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d94:	4b79      	ldr	r3, [pc, #484]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003d9a:	4878      	ldr	r0, [pc, #480]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003d9c:	f002 fb86 	bl	80064ac <HAL_DMA_Init>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003da6:	f001 f801 	bl	8004dac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a73      	ldr	r2, [pc, #460]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
 8003db0:	4a72      	ldr	r2, [pc, #456]	; (8003f7c <HAL_I2C_MspInit+0x2a0>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003db6:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003db8:	4a73      	ldr	r2, [pc, #460]	; (8003f88 <HAL_I2C_MspInit+0x2ac>)
 8003dba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003dbc:	4b71      	ldr	r3, [pc, #452]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dc4:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dca:	4b6e      	ldr	r3, [pc, #440]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dd0:	4b6c      	ldr	r3, [pc, #432]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dd6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd8:	4b6a      	ldr	r3, [pc, #424]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dde:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003de4:	4b67      	ldr	r3, [pc, #412]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dea:	4b66      	ldr	r3, [pc, #408]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003dec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003df0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df2:	4b64      	ldr	r3, [pc, #400]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003df8:	4862      	ldr	r0, [pc, #392]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003dfa:	f002 fb57 	bl	80064ac <HAL_DMA_Init>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8003e04:	f000 ffd2 	bl	8004dac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a5e      	ldr	r2, [pc, #376]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0e:	4a5d      	ldr	r2, [pc, #372]	; (8003f84 <HAL_I2C_MspInit+0x2a8>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	201f      	movs	r0, #31
 8003e1a:	f002 fb10 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003e1e:	201f      	movs	r0, #31
 8003e20:	f002 fb29 	bl	8006476 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003e24:	e0a0      	b.n	8003f68 <HAL_I2C_MspInit+0x28c>
  else if(i2cHandle->Instance==I2C2)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <HAL_I2C_MspInit+0x2b0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	f040 809b 	bne.w	8003f68 <HAL_I2C_MspInit+0x28c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a4e      	ldr	r2, [pc, #312]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e54:	2312      	movs	r3, #18
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e60:	2304      	movs	r3, #4
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e64:	f107 031c 	add.w	r3, r7, #28
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4843      	ldr	r0, [pc, #268]	; (8003f78 <HAL_I2C_MspInit+0x29c>)
 8003e6c:	f002 fe36 	bl	8006adc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	4a3e      	ldr	r2, [pc, #248]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8003e80:	4b3c      	ldr	r3, [pc, #240]	; (8003f74 <HAL_I2C_MspInit+0x298>)
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8003e8c:	4b40      	ldr	r3, [pc, #256]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003e8e:	4a41      	ldr	r2, [pc, #260]	; (8003f94 <HAL_I2C_MspInit+0x2b8>)
 8003e90:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8003e92:	4b3f      	ldr	r3, [pc, #252]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003e94:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003e98:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e9a:	4b3d      	ldr	r3, [pc, #244]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003e9c:	2240      	movs	r2, #64	; 0x40
 8003e9e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ea6:	4b3a      	ldr	r3, [pc, #232]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eac:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8003eba:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003ec2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ec6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003ece:	4830      	ldr	r0, [pc, #192]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003ed0:	f002 faec 	bl	80064ac <HAL_DMA_Init>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_MspInit+0x202>
      Error_Handler();
 8003eda:	f000 ff67 	bl	8004dac <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2b      	ldr	r2, [pc, #172]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_I2C_MspInit+0x2b4>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8003eea:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003eec:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <HAL_I2C_MspInit+0x2c0>)
 8003eee:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003ef2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003ef6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ef8:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f0a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f0c:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f12:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003f18:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f24:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8003f2c:	481a      	ldr	r0, [pc, #104]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f2e:	f002 fabd 	bl	80064ac <HAL_DMA_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_MspInit+0x260>
      Error_Handler();
 8003f38:	f000 ff38 	bl	8004dac <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <HAL_I2C_MspInit+0x2bc>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	2021      	movs	r0, #33	; 0x21
 8003f4e:	f002 fa76 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003f52:	2021      	movs	r0, #33	; 0x21
 8003f54:	f002 fa8f 	bl	8006476 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	2022      	movs	r0, #34	; 0x22
 8003f5e:	f002 fa6e 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003f62:	2022      	movs	r0, #34	; 0x22
 8003f64:	f002 fa87 	bl	8006476 <HAL_NVIC_EnableIRQ>
}
 8003f68:	bf00      	nop
 8003f6a:	3730      	adds	r7, #48	; 0x30
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40005400 	.word	0x40005400
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020400 	.word	0x40020400
 8003f7c:	20000f7c 	.word	0x20000f7c
 8003f80:	40026010 	.word	0x40026010
 8003f84:	20000db4 	.word	0x20000db4
 8003f88:	400260a0 	.word	0x400260a0
 8003f8c:	40005800 	.word	0x40005800
 8003f90:	20000f1c 	.word	0x20000f1c
 8003f94:	400260b8 	.word	0x400260b8
 8003f98:	20000ebc 	.word	0x20000ebc
 8003f9c:	40026058 	.word	0x40026058

08003fa0 <Setup_IMU>:
float acc_magnitude, acc_x, acc_y, acc_z, acc_magnitude_at_start;
float gyro_x_angle, gyro_y_angle, gyro_z_angle;
float gyro_x_calibration, gyro_y_calibration, gyro_z_calibration;

void Setup_IMU()
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af02      	add	r7, sp, #8
	imu_setup_buffer[0] = 0x6B;
 8003fa6:	4b22      	ldr	r3, [pc, #136]	; (8004030 <Setup_IMU+0x90>)
 8003fa8:	226b      	movs	r2, #107	; 0x6b
 8003faa:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x00;
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <Setup_IMU+0x90>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003fb2:	23d0      	movs	r3, #208	; 0xd0
 8003fb4:	b299      	uxth	r1, r3
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <Setup_IMU+0x90>)
 8003fc0:	481c      	ldr	r0, [pc, #112]	; (8004034 <Setup_IMU+0x94>)
 8003fc2:	f003 f8a9 	bl	8007118 <HAL_I2C_Master_Transmit>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <Setup_IMU+0x98>)
 8003fcc:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8003fce:	200a      	movs	r0, #10
 8003fd0:	f002 f938 	bl	8006244 <HAL_Delay>

	imu_setup_buffer[0] = 0x1B;
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <Setup_IMU+0x90>)
 8003fd6:	221b      	movs	r2, #27
 8003fd8:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x08;
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <Setup_IMU+0x90>)
 8003fdc:	2208      	movs	r2, #8
 8003fde:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003fe0:	23d0      	movs	r3, #208	; 0xd0
 8003fe2:	b299      	uxth	r1, r3
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2302      	movs	r3, #2
 8003fec:	4a10      	ldr	r2, [pc, #64]	; (8004030 <Setup_IMU+0x90>)
 8003fee:	4811      	ldr	r0, [pc, #68]	; (8004034 <Setup_IMU+0x94>)
 8003ff0:	f003 f892 	bl	8007118 <HAL_I2C_Master_Transmit>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <Setup_IMU+0x98>)
 8003ffa:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f002 f921 	bl	8006244 <HAL_Delay>

	imu_setup_buffer[0] = 0x1A;
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <Setup_IMU+0x90>)
 8004004:	221a      	movs	r2, #26
 8004006:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x03;
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <Setup_IMU+0x90>)
 800400a:	2203      	movs	r2, #3
 800400c:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 800400e:	23d0      	movs	r3, #208	; 0xd0
 8004010:	b299      	uxth	r1, r3
 8004012:	f04f 33ff 	mov.w	r3, #4294967295
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	2302      	movs	r3, #2
 800401a:	4a05      	ldr	r2, [pc, #20]	; (8004030 <Setup_IMU+0x90>)
 800401c:	4805      	ldr	r0, [pc, #20]	; (8004034 <Setup_IMU+0x94>)
 800401e:	f003 f87b 	bl	8007118 <HAL_I2C_Master_Transmit>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	4b04      	ldr	r3, [pc, #16]	; (8004038 <Setup_IMU+0x98>)
 8004028:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	2000101c 	.word	0x2000101c
 8004034:	20000e14 	.word	0x20000e14
 8004038:	2000103a 	.word	0x2000103a

0800403c <Calibrate_IMU>:

void Calibrate_IMU()
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2000; i++)
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	e035      	b.n	80040b4 <Calibrate_IMU+0x78>
	{
		Read_IMU(1);
 8004048:	2001      	movs	r0, #1
 800404a:	f000 f875 	bl	8004138 <Read_IMU>
		gyro_x_calibration += raw_gyro_acc_data[0];
 800404e:	4b32      	ldr	r3, [pc, #200]	; (8004118 <Calibrate_IMU+0xdc>)
 8004050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800405c:	4b2f      	ldr	r3, [pc, #188]	; (800411c <Calibrate_IMU+0xe0>)
 800405e:	edd3 7a00 	vldr	s15, [r3]
 8004062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <Calibrate_IMU+0xe0>)
 8004068:	edc3 7a00 	vstr	s15, [r3]
		gyro_y_calibration += raw_gyro_acc_data[1];
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <Calibrate_IMU+0xdc>)
 800406e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800407a:	4b29      	ldr	r3, [pc, #164]	; (8004120 <Calibrate_IMU+0xe4>)
 800407c:	edd3 7a00 	vldr	s15, [r3]
 8004080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004084:	4b26      	ldr	r3, [pc, #152]	; (8004120 <Calibrate_IMU+0xe4>)
 8004086:	edc3 7a00 	vstr	s15, [r3]
		gyro_z_calibration += raw_gyro_acc_data[2];
 800408a:	4b23      	ldr	r3, [pc, #140]	; (8004118 <Calibrate_IMU+0xdc>)
 800408c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004098:	4b22      	ldr	r3, [pc, #136]	; (8004124 <Calibrate_IMU+0xe8>)
 800409a:	edd3 7a00 	vldr	s15, [r3]
 800409e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <Calibrate_IMU+0xe8>)
 80040a4:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 80040a8:	2002      	movs	r0, #2
 80040aa:	f002 f8cb 	bl	8006244 <HAL_Delay>
	for(int i = 0; i < 2000; i++)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3301      	adds	r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80040ba:	dbc5      	blt.n	8004048 <Calibrate_IMU+0xc>
	}

	gyro_x_angle = 0;
 80040bc:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <Calibrate_IMU+0xec>)
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
	gyro_y_angle = 0;
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <Calibrate_IMU+0xf0>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
	gyro_z_angle = 0;
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <Calibrate_IMU+0xf4>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

	gyro_x_calibration /= 2000;
 80040d4:	4b11      	ldr	r3, [pc, #68]	; (800411c <Calibrate_IMU+0xe0>)
 80040d6:	ed93 7a00 	vldr	s14, [r3]
 80040da:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004134 <Calibrate_IMU+0xf8>
 80040de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <Calibrate_IMU+0xe0>)
 80040e4:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_calibration /= 2000;
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <Calibrate_IMU+0xe4>)
 80040ea:	ed93 7a00 	vldr	s14, [r3]
 80040ee:	eddf 6a11 	vldr	s13, [pc, #68]	; 8004134 <Calibrate_IMU+0xf8>
 80040f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <Calibrate_IMU+0xe4>)
 80040f8:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_calibration /= 2000;
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <Calibrate_IMU+0xe8>)
 80040fe:	ed93 7a00 	vldr	s14, [r3]
 8004102:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8004134 <Calibrate_IMU+0xf8>
 8004106:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <Calibrate_IMU+0xe8>)
 800410c:	edc3 7a00 	vstr	s15, [r3]
}
 8004110:	bf00      	nop
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20001000 	.word	0x20001000
 800411c:	20000fec 	.word	0x20000fec
 8004120:	20000ffc 	.word	0x20000ffc
 8004124:	20000ff4 	.word	0x20000ff4
 8004128:	20000fe4 	.word	0x20000fe4
 800412c:	20000ff0 	.word	0x20000ff0
 8004130:	20001010 	.word	0x20001010
 8004134:	44fa0000 	.word	0x44fa0000

08004138 <Read_IMU>:

void Read_IMU(uint8_t is_calibrating)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af04      	add	r7, sp, #16
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&raw_gyro_acc_buffer, 14, HAL_MAX_DELAY);//Implement failure logic later
 8004142:	23d0      	movs	r3, #208	; 0xd0
 8004144:	b299      	uxth	r1, r3
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	230e      	movs	r3, #14
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	4b49      	ldr	r3, [pc, #292]	; (8004278 <Read_IMU+0x140>)
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2301      	movs	r3, #1
 8004156:	223b      	movs	r2, #59	; 0x3b
 8004158:	4848      	ldr	r0, [pc, #288]	; (800427c <Read_IMU+0x144>)
 800415a:	f003 f8db 	bl	8007314 <HAL_I2C_Mem_Read>
	raw_gyro_acc_data[3] = (int16_t)((raw_gyro_acc_buffer[0] << 8) | (raw_gyro_acc_buffer[1]));	//Acc X
 800415e:	4b46      	ldr	r3, [pc, #280]	; (8004278 <Read_IMU+0x140>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	b21a      	sxth	r2, r3
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <Read_IMU+0x140>)
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	b21b      	sxth	r3, r3
 800416c:	4313      	orrs	r3, r2
 800416e:	b21a      	sxth	r2, r3
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <Read_IMU+0x148>)
 8004172:	80da      	strh	r2, [r3, #6]
	raw_gyro_acc_data[4] = (int16_t)((raw_gyro_acc_buffer[2] << 8) | (raw_gyro_acc_buffer[3]));	//Acc Y
 8004174:	4b40      	ldr	r3, [pc, #256]	; (8004278 <Read_IMU+0x140>)
 8004176:	789b      	ldrb	r3, [r3, #2]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	b21a      	sxth	r2, r3
 800417c:	4b3e      	ldr	r3, [pc, #248]	; (8004278 <Read_IMU+0x140>)
 800417e:	78db      	ldrb	r3, [r3, #3]
 8004180:	b21b      	sxth	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b21a      	sxth	r2, r3
 8004186:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <Read_IMU+0x148>)
 8004188:	811a      	strh	r2, [r3, #8]
	raw_gyro_acc_data[5] = (int16_t)((raw_gyro_acc_buffer[4] << 8) | (raw_gyro_acc_buffer[5]));	//Acc Z
 800418a:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <Read_IMU+0x140>)
 800418c:	791b      	ldrb	r3, [r3, #4]
 800418e:	021b      	lsls	r3, r3, #8
 8004190:	b21a      	sxth	r2, r3
 8004192:	4b39      	ldr	r3, [pc, #228]	; (8004278 <Read_IMU+0x140>)
 8004194:	795b      	ldrb	r3, [r3, #5]
 8004196:	b21b      	sxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b21a      	sxth	r2, r3
 800419c:	4b38      	ldr	r3, [pc, #224]	; (8004280 <Read_IMU+0x148>)
 800419e:	815a      	strh	r2, [r3, #10]
	raw_imu_temp = (int16_t)((raw_gyro_acc_buffer[6] << 8) | (raw_gyro_acc_buffer[7]));
 80041a0:	4b35      	ldr	r3, [pc, #212]	; (8004278 <Read_IMU+0x140>)
 80041a2:	799b      	ldrb	r3, [r3, #6]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	b21a      	sxth	r2, r3
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <Read_IMU+0x140>)
 80041aa:	79db      	ldrb	r3, [r3, #7]
 80041ac:	b21b      	sxth	r3, r3
 80041ae:	4313      	orrs	r3, r2
 80041b0:	b21a      	sxth	r2, r3
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <Read_IMU+0x14c>)
 80041b4:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[0] = (int16_t)((raw_gyro_acc_buffer[8] << 8) | (raw_gyro_acc_buffer[9]));	//Gyro X
 80041b6:	4b30      	ldr	r3, [pc, #192]	; (8004278 <Read_IMU+0x140>)
 80041b8:	7a1b      	ldrb	r3, [r3, #8]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	b21a      	sxth	r2, r3
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <Read_IMU+0x140>)
 80041c0:	7a5b      	ldrb	r3, [r3, #9]
 80041c2:	b21b      	sxth	r3, r3
 80041c4:	4313      	orrs	r3, r2
 80041c6:	b21a      	sxth	r2, r3
 80041c8:	4b2d      	ldr	r3, [pc, #180]	; (8004280 <Read_IMU+0x148>)
 80041ca:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[1] = (int16_t)((raw_gyro_acc_buffer[10] << 8) | (raw_gyro_acc_buffer[11]));	//Gyro Y
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <Read_IMU+0x140>)
 80041ce:	7a9b      	ldrb	r3, [r3, #10]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	b21a      	sxth	r2, r3
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <Read_IMU+0x140>)
 80041d6:	7adb      	ldrb	r3, [r3, #11]
 80041d8:	b21b      	sxth	r3, r3
 80041da:	4313      	orrs	r3, r2
 80041dc:	b21a      	sxth	r2, r3
 80041de:	4b28      	ldr	r3, [pc, #160]	; (8004280 <Read_IMU+0x148>)
 80041e0:	805a      	strh	r2, [r3, #2]
	raw_gyro_acc_data[2] = (int16_t)((raw_gyro_acc_buffer[12] << 8) | (raw_gyro_acc_buffer[13]));	//Gyro Z
 80041e2:	4b25      	ldr	r3, [pc, #148]	; (8004278 <Read_IMU+0x140>)
 80041e4:	7b1b      	ldrb	r3, [r3, #12]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	b21a      	sxth	r2, r3
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <Read_IMU+0x140>)
 80041ec:	7b5b      	ldrb	r3, [r3, #13]
 80041ee:	b21b      	sxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b21a      	sxth	r2, r3
 80041f4:	4b22      	ldr	r3, [pc, #136]	; (8004280 <Read_IMU+0x148>)
 80041f6:	809a      	strh	r2, [r3, #4]

	if(!is_calibrating)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d138      	bne.n	8004270 <Read_IMU+0x138>
	{
		raw_gyro_acc_data[0] -= gyro_x_calibration;
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <Read_IMU+0x148>)
 8004200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <Read_IMU+0x150>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800421a:	ee17 3a90 	vmov	r3, s15
 800421e:	b21a      	sxth	r2, r3
 8004220:	4b17      	ldr	r3, [pc, #92]	; (8004280 <Read_IMU+0x148>)
 8004222:	801a      	strh	r2, [r3, #0]
		raw_gyro_acc_data[1] -= gyro_y_calibration;
 8004224:	4b16      	ldr	r3, [pc, #88]	; (8004280 <Read_IMU+0x148>)
 8004226:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <Read_IMU+0x154>)
 8004234:	edd3 7a00 	vldr	s15, [r3]
 8004238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800423c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004240:	ee17 3a90 	vmov	r3, s15
 8004244:	b21a      	sxth	r2, r3
 8004246:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <Read_IMU+0x148>)
 8004248:	805a      	strh	r2, [r3, #2]
		raw_gyro_acc_data[2] -= gyro_z_calibration;
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <Read_IMU+0x148>)
 800424c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <Read_IMU+0x158>)
 800425a:	edd3 7a00 	vldr	s15, [r3]
 800425e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004266:	ee17 3a90 	vmov	r3, s15
 800426a:	b21a      	sxth	r2, r3
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <Read_IMU+0x148>)
 800426e:	809a      	strh	r2, [r3, #4]
	}
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20001044 	.word	0x20001044
 800427c:	20000e14 	.word	0x20000e14
 8004280:	20001000 	.word	0x20001000
 8004284:	20000fe0 	.word	0x20000fe0
 8004288:	20000fec 	.word	0x20000fec
 800428c:	20000ffc 	.word	0x20000ffc
 8004290:	20000ff4 	.word	0x20000ff4

08004294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800429a:	f001 ff61 	bl	8006160 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 800429e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042a2:	f001 ffcf 	bl	8006244 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042a6:	f000 fb89 	bl	80049bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042aa:	f7ff fc45 	bl	8003b38 <MX_GPIO_Init>
  MX_DMA_Init();
 80042ae:	f7ff fb53 	bl	8003958 <MX_DMA_Init>
  MX_I2C1_Init();
 80042b2:	f7ff fcb7 	bl	8003c24 <MX_I2C1_Init>
  MX_I2C2_Init();
 80042b6:	f7ff fce3 	bl	8003c80 <MX_I2C2_Init>
  MX_RTC_Init();
 80042ba:	f000 fd7f 	bl	8004dbc <MX_RTC_Init>
  MX_TIM3_Init();
 80042be:	f001 fc13 	bl	8005ae8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80042c2:	f001 fc8d 	bl	8005be0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80042c6:	f001 fcfb 	bl	8005cc0 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 80042ca:	f00b fba1 	bl	800fa10 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 80042ce:	f001 fdbb 	bl	8005e48 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80042d2:	2100      	movs	r1, #0
 80042d4:	488e      	ldr	r0, [pc, #568]	; (8004510 <main+0x27c>)
 80042d6:	f007 fbad 	bl	800ba34 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80042da:	488e      	ldr	r0, [pc, #568]	; (8004514 <main+0x280>)
 80042dc:	f007 fae6 	bl	800b8ac <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);//Motor 1 - FL
 80042e0:	210c      	movs	r1, #12
 80042e2:	488d      	ldr	r0, [pc, #564]	; (8004518 <main+0x284>)
 80042e4:	f007 fb32 	bl	800b94c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);//Motor 2 - FR
 80042e8:	2108      	movs	r1, #8
 80042ea:	488b      	ldr	r0, [pc, #556]	; (8004518 <main+0x284>)
 80042ec:	f007 fb2e 	bl	800b94c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);//Motor 3 - BR
 80042f0:	2104      	movs	r1, #4
 80042f2:	4889      	ldr	r0, [pc, #548]	; (8004518 <main+0x284>)
 80042f4:	f007 fb2a 	bl	800b94c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//Motor 4 - BL
 80042f8:	2100      	movs	r1, #0
 80042fa:	4887      	ldr	r0, [pc, #540]	; (8004518 <main+0x284>)
 80042fc:	f007 fb26 	bl	800b94c <HAL_TIM_PWM_Start>

  auto_packet_buffer[0].total_width = 0;
 8004300:	4b86      	ldr	r3, [pc, #536]	; (800451c <main+0x288>)
 8004302:	2200      	movs	r2, #0
 8004304:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  auto_packet_buffer[0].var_count = 0;
 8004308:	4b84      	ldr	r3, [pc, #528]	; (800451c <main+0x288>)
 800430a:	2200      	movs	r2, #0
 800430c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  auto_packet_buffer[0].id = GYRO_PACKET;
 8004310:	4b82      	ldr	r3, [pc, #520]	; (800451c <main+0x288>)
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
  auto_packet_buffer[0].send_rate = 1;
 8004316:	4b81      	ldr	r3, [pc, #516]	; (800451c <main+0x288>)
 8004318:	2201      	movs	r2, #1
 800431a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[0]), 2);
 800431e:	2202      	movs	r2, #2
 8004320:	497f      	ldr	r1, [pc, #508]	; (8004520 <main+0x28c>)
 8004322:	2000      	movs	r0, #0
 8004324:	f001 fae2 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[1]), 2);
 8004328:	2202      	movs	r2, #2
 800432a:	497e      	ldr	r1, [pc, #504]	; (8004524 <main+0x290>)
 800432c:	2000      	movs	r0, #0
 800432e:	f001 fadd 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[2]), 2);
 8004332:	2202      	movs	r2, #2
 8004334:	497c      	ldr	r1, [pc, #496]	; (8004528 <main+0x294>)
 8004336:	2000      	movs	r0, #0
 8004338:	f001 fad8 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_x_angle, 4);
 800433c:	2204      	movs	r2, #4
 800433e:	497b      	ldr	r1, [pc, #492]	; (800452c <main+0x298>)
 8004340:	2000      	movs	r0, #0
 8004342:	f001 fad3 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_y_angle, 4);
 8004346:	2204      	movs	r2, #4
 8004348:	4979      	ldr	r1, [pc, #484]	; (8004530 <main+0x29c>)
 800434a:	2000      	movs	r0, #0
 800434c:	f001 face 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&compass_heading, 4);
 8004350:	2204      	movs	r2, #4
 8004352:	4978      	ldr	r1, [pc, #480]	; (8004534 <main+0x2a0>)
 8004354:	2000      	movs	r0, #0
 8004356:	f001 fac9 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&how_long_to_loop_main, 4);
 800435a:	2204      	movs	r2, #4
 800435c:	4976      	ldr	r1, [pc, #472]	; (8004538 <main+0x2a4>)
 800435e:	2000      	movs	r0, #0
 8004360:	f001 fac4 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(ppm_channels[2]), 4);
 8004364:	2204      	movs	r2, #4
 8004366:	4975      	ldr	r1, [pc, #468]	; (800453c <main+0x2a8>)
 8004368:	2000      	movs	r0, #0
 800436a:	f001 fabf 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(0, &status_first, 1);
 800436e:	2201      	movs	r2, #1
 8004370:	4973      	ldr	r1, [pc, #460]	; (8004540 <main+0x2ac>)
 8004372:	2000      	movs	r0, #0
 8004374:	f001 faba 	bl	80058ec <AddToAutoBuffer>
  auto_packet_count++;
 8004378:	4b72      	ldr	r3, [pc, #456]	; (8004544 <main+0x2b0>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	b2da      	uxtb	r2, r3
 8004380:	4b70      	ldr	r3, [pc, #448]	; (8004544 <main+0x2b0>)
 8004382:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[1].total_width = 0;
 8004384:	4b65      	ldr	r3, [pc, #404]	; (800451c <main+0x288>)
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  auto_packet_buffer[1].var_count = 0;
 800438c:	4b63      	ldr	r3, [pc, #396]	; (800451c <main+0x288>)
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  auto_packet_buffer[1].id = PID_OUTPUT_PACKET;
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <main+0x288>)
 8004396:	2202      	movs	r2, #2
 8004398:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  auto_packet_buffer[1].send_rate = 1;
 800439c:	4b5f      	ldr	r3, [pc, #380]	; (800451c <main+0x288>)
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  AddToAutoBuffer(1, (uint8_t *)&pid_roll_output, 4);
 80043a4:	2204      	movs	r2, #4
 80043a6:	4968      	ldr	r1, [pc, #416]	; (8004548 <main+0x2b4>)
 80043a8:	2001      	movs	r0, #1
 80043aa:	f001 fa9f 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&pid_pitch_output, 4);
 80043ae:	2204      	movs	r2, #4
 80043b0:	4966      	ldr	r1, [pc, #408]	; (800454c <main+0x2b8>)
 80043b2:	2001      	movs	r0, #1
 80043b4:	f001 fa9a 	bl	80058ec <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&altitude_pid_output, 4);
 80043b8:	2204      	movs	r2, #4
 80043ba:	4965      	ldr	r1, [pc, #404]	; (8004550 <main+0x2bc>)
 80043bc:	2001      	movs	r0, #1
 80043be:	f001 fa95 	bl	80058ec <AddToAutoBuffer>
  //AddToAutoBuffer(1, &pid_pitch_output, 4);
  auto_packet_count++;
 80043c2:	4b60      	ldr	r3, [pc, #384]	; (8004544 <main+0x2b0>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4b5e      	ldr	r3, [pc, #376]	; (8004544 <main+0x2b0>)
 80043cc:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[2].total_width = 0;
 80043ce:	4b53      	ldr	r3, [pc, #332]	; (800451c <main+0x288>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
  auto_packet_buffer[2].var_count = 0;
 80043d6:	4b51      	ldr	r3, [pc, #324]	; (800451c <main+0x288>)
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  auto_packet_buffer[2].id = ALTITUDE_PACKET;
 80043de:	4b4f      	ldr	r3, [pc, #316]	; (800451c <main+0x288>)
 80043e0:	2206      	movs	r2, #6
 80043e2:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  auto_packet_buffer[2].send_rate = 5;
 80043e6:	4b4d      	ldr	r3, [pc, #308]	; (800451c <main+0x288>)
 80043e8:	2205      	movs	r2, #5
 80043ea:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
  AddToAutoBuffer(2, (uint8_t *)&slow_bmp_altitude, 4);
 80043ee:	2204      	movs	r2, #4
 80043f0:	4958      	ldr	r1, [pc, #352]	; (8004554 <main+0x2c0>)
 80043f2:	2002      	movs	r0, #2
 80043f4:	f001 fa7a 	bl	80058ec <AddToAutoBuffer>
  auto_packet_count++;
 80043f8:	4b52      	ldr	r3, [pc, #328]	; (8004544 <main+0x2b0>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <main+0x2b0>)
 8004402:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < 6; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e008      	b.n	800441c <main+0x188>
  {
	  ppm_channels[i] = 1000;
 800440a:	4a53      	ldr	r2, [pc, #332]	; (8004558 <main+0x2c4>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 6; i++)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b05      	cmp	r3, #5
 8004420:	ddf3      	ble.n	800440a <main+0x176>
  }

  ppm_channels[4] = 2000;
 8004422:	4b4d      	ldr	r3, [pc, #308]	; (8004558 <main+0x2c4>)
 8004424:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004428:	611a      	str	r2, [r3, #16]

  for(int i = 0; i < 35; i++)
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
 800442e:	e007      	b.n	8004440 <main+0x1ac>
  {
	  empty_data_packet.payload[i] = '\0';
 8004430:	4a4a      	ldr	r2, [pc, #296]	; (800455c <main+0x2c8>)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4413      	add	r3, r2
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	3301      	adds	r3, #1
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b22      	cmp	r3, #34	; 0x22
 8004444:	ddf4      	ble.n	8004430 <main+0x19c>
  }

  Setup_IMU();
 8004446:	f7ff fdab 	bl	8003fa0 <Setup_IMU>
  Setup_BMP280();
 800444a:	f7fc fedb 	bl	8001204 <Setup_BMP280>

  //Motor PID Gains
  EEPROM_Clear_Buffer();
 800444e:	f7ff fabb 	bl	80039c8 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(0, 24);
 8004452:	2118      	movs	r1, #24
 8004454:	2000      	movs	r0, #0
 8004456:	f7ff faf7 	bl	8003a48 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 800445a:	4b41      	ldr	r3, [pc, #260]	; (8004560 <main+0x2cc>)
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_roll, 4);
 8004460:	2104      	movs	r1, #4
 8004462:	4840      	ldr	r0, [pc, #256]	; (8004564 <main+0x2d0>)
 8004464:	f7ff fb3c 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_roll, 4);
 8004468:	2104      	movs	r1, #4
 800446a:	483f      	ldr	r0, [pc, #252]	; (8004568 <main+0x2d4>)
 800446c:	f7ff fb38 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_roll, 4);
 8004470:	2104      	movs	r1, #4
 8004472:	483e      	ldr	r0, [pc, #248]	; (800456c <main+0x2d8>)
 8004474:	f7ff fb34 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kp_yaw, 4);
 8004478:	2104      	movs	r1, #4
 800447a:	483d      	ldr	r0, [pc, #244]	; (8004570 <main+0x2dc>)
 800447c:	f7ff fb30 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_yaw, 4);
 8004480:	2104      	movs	r1, #4
 8004482:	483c      	ldr	r0, [pc, #240]	; (8004574 <main+0x2e0>)
 8004484:	f7ff fb2c 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_yaw, 4);
 8004488:	2104      	movs	r1, #4
 800448a:	483b      	ldr	r0, [pc, #236]	; (8004578 <main+0x2e4>)
 800448c:	f7ff fb28 	bl	8003ae0 <EEPROM_Read_Buffer>

  //Altitude and GPS PID Gains
  EEPROM_Clear_Buffer();
 8004490:	f7ff fa9a 	bl	80039c8 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(32, 12);
 8004494:	210c      	movs	r1, #12
 8004496:	2020      	movs	r0, #32
 8004498:	f7ff fad6 	bl	8003a48 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 800449c:	4b30      	ldr	r3, [pc, #192]	; (8004560 <main+0x2cc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_alt, 4);
 80044a2:	2104      	movs	r1, #4
 80044a4:	4835      	ldr	r0, [pc, #212]	; (800457c <main+0x2e8>)
 80044a6:	f7ff fb1b 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_alt, 4);
 80044aa:	2104      	movs	r1, #4
 80044ac:	4834      	ldr	r0, [pc, #208]	; (8004580 <main+0x2ec>)
 80044ae:	f7ff fb17 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_alt, 4);
 80044b2:	2104      	movs	r1, #4
 80044b4:	4833      	ldr	r0, [pc, #204]	; (8004584 <main+0x2f0>)
 80044b6:	f7ff fb13 	bl	8003ae0 <EEPROM_Read_Buffer>

  //Compass Calibration Values
  EEPROM_Clear_Buffer();
 80044ba:	f7ff fa85 	bl	80039c8 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(64, 12);
 80044be:	210c      	movs	r1, #12
 80044c0:	2040      	movs	r0, #64	; 0x40
 80044c2:	f7ff fac1 	bl	8003a48 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <main+0x2cc>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&compass_x_min, 2);
 80044cc:	2102      	movs	r1, #2
 80044ce:	482e      	ldr	r0, [pc, #184]	; (8004588 <main+0x2f4>)
 80044d0:	f7ff fb06 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_x_max, 2);
 80044d4:	2102      	movs	r1, #2
 80044d6:	482d      	ldr	r0, [pc, #180]	; (800458c <main+0x2f8>)
 80044d8:	f7ff fb02 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_y_min, 2);
 80044dc:	2102      	movs	r1, #2
 80044de:	482c      	ldr	r0, [pc, #176]	; (8004590 <main+0x2fc>)
 80044e0:	f7ff fafe 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_y_max, 2);
 80044e4:	2102      	movs	r1, #2
 80044e6:	482b      	ldr	r0, [pc, #172]	; (8004594 <main+0x300>)
 80044e8:	f7ff fafa 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_z_min, 2);
 80044ec:	2102      	movs	r1, #2
 80044ee:	482a      	ldr	r0, [pc, #168]	; (8004598 <main+0x304>)
 80044f0:	f7ff faf6 	bl	8003ae0 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_z_max, 2);
 80044f4:	2102      	movs	r1, #2
 80044f6:	4829      	ldr	r0, [pc, #164]	; (800459c <main+0x308>)
 80044f8:	f7ff faf2 	bl	8003ae0 <EEPROM_Read_Buffer>

  Setup_Compass();
 80044fc:	f7fd f9aa 	bl	8001854 <Setup_Compass>
  }

  //program_buffer[14] = 0x03;//Restart Program
  program_buffer[14] = 0x04;*/

  HAL_Delay(2000);
 8004500:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004504:	f001 fe9e 	bl	8006244 <HAL_Delay>

  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 8004508:	e0c2      	b.n	8004690 <main+0x3fc>
  {
	  for(int i = 0; i < 200; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	e09e      	b.n	800464e <main+0x3ba>
 8004510:	20002c04 	.word	0x20002c04
 8004514:	20002c84 	.word	0x20002c84
 8004518:	20002bc4 	.word	0x20002bc4
 800451c:	200015ec 	.word	0x200015ec
 8004520:	20001000 	.word	0x20001000
 8004524:	20001002 	.word	0x20001002
 8004528:	20001004 	.word	0x20001004
 800452c:	20000fe4 	.word	0x20000fe4
 8004530:	20000ff0 	.word	0x20000ff0
 8004534:	20000260 	.word	0x20000260
 8004538:	20001080 	.word	0x20001080
 800453c:	200010b8 	.word	0x200010b8
 8004540:	200002f8 	.word	0x200002f8
 8004544:	20000301 	.word	0x20000301
 8004548:	20000a58 	.word	0x20000a58
 800454c:	20000a5c 	.word	0x20000a5c
 8004550:	200002a8 	.word	0x200002a8
 8004554:	200002a0 	.word	0x200002a0
 8004558:	200010b0 	.word	0x200010b0
 800455c:	20002b70 	.word	0x20002b70
 8004560:	200002e0 	.word	0x200002e0
 8004564:	2000027c 	.word	0x2000027c
 8004568:	20000284 	.word	0x20000284
 800456c:	2000028c 	.word	0x2000028c
 8004570:	20000280 	.word	0x20000280
 8004574:	20000288 	.word	0x20000288
 8004578:	20000290 	.word	0x20000290
 800457c:	200002ac 	.word	0x200002ac
 8004580:	200002b4 	.word	0x200002b4
 8004584:	200002b8 	.word	0x200002b8
 8004588:	20000254 	.word	0x20000254
 800458c:	20000256 	.word	0x20000256
 8004590:	20000258 	.word	0x20000258
 8004594:	2000025a 	.word	0x2000025a
 8004598:	2000025c 	.word	0x2000025c
 800459c:	2000025e 	.word	0x2000025e
	  {
		  if(i == 0)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <main+0x324>
		  {
			  x_deviation_sum = 0;
 80045a6:	4b61      	ldr	r3, [pc, #388]	; (800472c <main+0x498>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
			  y_deviation_sum = 0;
 80045ac:	4b60      	ldr	r3, [pc, #384]	; (8004730 <main+0x49c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
			  z_deviation_sum = 0;
 80045b2:	4b60      	ldr	r3, [pc, #384]	; (8004734 <main+0x4a0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
		  }

		  Read_IMU(0);
 80045b8:	2000      	movs	r0, #0
 80045ba:	f7ff fdbd 	bl	8004138 <Read_IMU>

		  x_deviation_sum += abs(raw_gyro_acc_data[0] - last_x_value);
 80045be:	4b5e      	ldr	r3, [pc, #376]	; (8004738 <main+0x4a4>)
 80045c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c4:	461a      	mov	r2, r3
 80045c6:	4b5d      	ldr	r3, [pc, #372]	; (800473c <main+0x4a8>)
 80045c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80045d2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80045d6:	4b55      	ldr	r3, [pc, #340]	; (800472c <main+0x498>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4413      	add	r3, r2
 80045dc:	4a53      	ldr	r2, [pc, #332]	; (800472c <main+0x498>)
 80045de:	6013      	str	r3, [r2, #0]
		  y_deviation_sum += abs(raw_gyro_acc_data[1] - last_y_value);
 80045e0:	4b55      	ldr	r3, [pc, #340]	; (8004738 <main+0x4a4>)
 80045e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045e6:	461a      	mov	r2, r3
 80045e8:	4b55      	ldr	r3, [pc, #340]	; (8004740 <main+0x4ac>)
 80045ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80045f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80045f8:	4b4d      	ldr	r3, [pc, #308]	; (8004730 <main+0x49c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	4a4c      	ldr	r2, [pc, #304]	; (8004730 <main+0x49c>)
 8004600:	6013      	str	r3, [r2, #0]
		  z_deviation_sum += abs(raw_gyro_acc_data[2] - last_z_value);
 8004602:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <main+0x4a4>)
 8004604:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004608:	461a      	mov	r2, r3
 800460a:	4b4e      	ldr	r3, [pc, #312]	; (8004744 <main+0x4b0>)
 800460c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004616:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800461a:	4b46      	ldr	r3, [pc, #280]	; (8004734 <main+0x4a0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4413      	add	r3, r2
 8004620:	4a44      	ldr	r2, [pc, #272]	; (8004734 <main+0x4a0>)
 8004622:	6013      	str	r3, [r2, #0]

		  last_x_value = raw_gyro_acc_data[0];
 8004624:	4b44      	ldr	r3, [pc, #272]	; (8004738 <main+0x4a4>)
 8004626:	f9b3 2000 	ldrsh.w	r2, [r3]
 800462a:	4b44      	ldr	r3, [pc, #272]	; (800473c <main+0x4a8>)
 800462c:	801a      	strh	r2, [r3, #0]
		  last_y_value = raw_gyro_acc_data[1];
 800462e:	4b42      	ldr	r3, [pc, #264]	; (8004738 <main+0x4a4>)
 8004630:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004634:	4b42      	ldr	r3, [pc, #264]	; (8004740 <main+0x4ac>)
 8004636:	801a      	strh	r2, [r3, #0]
		  last_z_value = raw_gyro_acc_data[2];
 8004638:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <main+0x4a4>)
 800463a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <main+0x4b0>)
 8004640:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(5);
 8004642:	2005      	movs	r0, #5
 8004644:	f001 fdfe 	bl	8006244 <HAL_Delay>
	  for(int i = 0; i < 200; i++)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3301      	adds	r3, #1
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2bc7      	cmp	r3, #199	; 0xc7
 8004652:	dda5      	ble.n	80045a0 <main+0x30c>
	  }

	  x_deviation_sum /= 200;
 8004654:	4b35      	ldr	r3, [pc, #212]	; (800472c <main+0x498>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3b      	ldr	r2, [pc, #236]	; (8004748 <main+0x4b4>)
 800465a:	fb82 1203 	smull	r1, r2, r2, r3
 800465e:	1192      	asrs	r2, r2, #6
 8004660:	17db      	asrs	r3, r3, #31
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	4a31      	ldr	r2, [pc, #196]	; (800472c <main+0x498>)
 8004666:	6013      	str	r3, [r2, #0]
	  y_deviation_sum /= 200;
 8004668:	4b31      	ldr	r3, [pc, #196]	; (8004730 <main+0x49c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a36      	ldr	r2, [pc, #216]	; (8004748 <main+0x4b4>)
 800466e:	fb82 1203 	smull	r1, r2, r2, r3
 8004672:	1192      	asrs	r2, r2, #6
 8004674:	17db      	asrs	r3, r3, #31
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	4a2d      	ldr	r2, [pc, #180]	; (8004730 <main+0x49c>)
 800467a:	6013      	str	r3, [r2, #0]
	  z_deviation_sum /= 200;
 800467c:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <main+0x4a0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a31      	ldr	r2, [pc, #196]	; (8004748 <main+0x4b4>)
 8004682:	fb82 1203 	smull	r1, r2, r2, r3
 8004686:	1192      	asrs	r2, r2, #6
 8004688:	17db      	asrs	r3, r3, #31
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <main+0x4a0>)
 800468e:	6013      	str	r3, [r2, #0]
  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 8004690:	4b26      	ldr	r3, [pc, #152]	; (800472c <main+0x498>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	bfb8      	it	lt
 8004698:	425b      	neglt	r3, r3
 800469a:	2b14      	cmp	r3, #20
 800469c:	f73f af35 	bgt.w	800450a <main+0x276>
 80046a0:	4b23      	ldr	r3, [pc, #140]	; (8004730 <main+0x49c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	bfb8      	it	lt
 80046a8:	425b      	neglt	r3, r3
 80046aa:	2b14      	cmp	r3, #20
 80046ac:	f73f af2d 	bgt.w	800450a <main+0x276>
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <main+0x4a0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bfb8      	it	lt
 80046b8:	425b      	neglt	r3, r3
 80046ba:	2b14      	cmp	r3, #20
 80046bc:	f73f af25 	bgt.w	800450a <main+0x276>
  }

  Calibrate_BMP280();
 80046c0:	f7fd f896 	bl	80017f0 <Calibrate_BMP280>
  Calibrate_IMU();
 80046c4:	f7ff fcba 	bl	800403c <Calibrate_IMU>
  ClearPrintBuffer();
 80046c8:	f001 f890 	bl	80057ec <ClearPrintBuffer>
  sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 80046cc:	4a1f      	ldr	r2, [pc, #124]	; (800474c <main+0x4b8>)
 80046ce:	4b20      	ldr	r3, [pc, #128]	; (8004750 <main+0x4bc>)
 80046d0:	4615      	mov	r5, r2
 80046d2:	461c      	mov	r4, r3
 80046d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d6:	6028      	str	r0, [r5, #0]
 80046d8:	6069      	str	r1, [r5, #4]
 80046da:	60aa      	str	r2, [r5, #8]
 80046dc:	60eb      	str	r3, [r5, #12]
 80046de:	8823      	ldrh	r3, [r4, #0]
 80046e0:	822b      	strh	r3, [r5, #16]
  PrintManualPacket();
 80046e2:	f001 f89d 	bl	8005820 <PrintManualPacket>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ppm_channels[4] < 1600)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <main+0x4c0>)
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80046ee:	da45      	bge.n	800477c <main+0x4e8>
	  {
		  manual_mode = 1;
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <main+0x4c4>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
		  status_first |= 1 << 1;
 80046f6:	4b19      	ldr	r3, [pc, #100]	; (800475c <main+0x4c8>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	4b16      	ldr	r3, [pc, #88]	; (800475c <main+0x4c8>)
 8004702:	701a      	strb	r2, [r3, #0]

		  launched = 0;
 8004704:	4b16      	ldr	r3, [pc, #88]	; (8004760 <main+0x4cc>)
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
		  landing = 0;
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <main+0x4d0>)
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
		  launching = 0;
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <main+0x4d4>)
 8004712:	2200      	movs	r2, #0
 8004714:	701a      	strb	r2, [r3, #0]
		  altitude_hold_flag = 0;
 8004716:	4b15      	ldr	r3, [pc, #84]	; (800476c <main+0x4d8>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]

		  hover_throttle = 125;
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <main+0x4dc>)
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <main+0x4e0>)
 8004720:	601a      	str	r2, [r3, #0]
		  idle_throttle = 125;
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <main+0x4e4>)
 8004724:	227d      	movs	r2, #125	; 0x7d
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	e034      	b.n	8004794 <main+0x500>
 800472a:	bf00      	nop
 800472c:	2000003c 	.word	0x2000003c
 8004730:	20000040 	.word	0x20000040
 8004734:	20000044 	.word	0x20000044
 8004738:	20001000 	.word	0x20001000
 800473c:	200010d8 	.word	0x200010d8
 8004740:	2000107c 	.word	0x2000107c
 8004744:	200010d0 	.word	0x200010d0
 8004748:	51eb851f 	.word	0x51eb851f
 800474c:	200010fc 	.word	0x200010fc
 8004750:	08013628 	.word	0x08013628
 8004754:	200010b0 	.word	0x200010b0
 8004758:	200002d7 	.word	0x200002d7
 800475c:	200002f8 	.word	0x200002f8
 8004760:	200002d4 	.word	0x200002d4
 8004764:	200002d6 	.word	0x200002d6
 8004768:	200002d5 	.word	0x200002d5
 800476c:	200002f9 	.word	0x200002f9
 8004770:	20000028 	.word	0x20000028
 8004774:	42fa0000 	.word	0x42fa0000
 8004778:	2000002c 	.word	0x2000002c
	  }
	  else
	  {
		  manual_mode = 0;
 800477c:	4b78      	ldr	r3, [pc, #480]	; (8004960 <main+0x6cc>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
		  status_first &= ~(1 << 1);
 8004782:	4b78      	ldr	r3, [pc, #480]	; (8004964 <main+0x6d0>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f023 0302 	bic.w	r3, r3, #2
 800478a:	b2da      	uxtb	r2, r3
 800478c:	4b75      	ldr	r3, [pc, #468]	; (8004964 <main+0x6d0>)
 800478e:	701a      	strb	r2, [r3, #0]

		  Control_Loop();
 8004790:	f7fe fdd2 	bl	8003338 <Control_Loop>
	  }

	  status_first = ((status_first | 0x01) * launched) + ((status_first & ~(0x01)) * (launched ^ 0x01));
 8004794:	4b73      	ldr	r3, [pc, #460]	; (8004964 <main+0x6d0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	b2da      	uxtb	r2, r3
 800479e:	4b72      	ldr	r3, [pc, #456]	; (8004968 <main+0x6d4>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	fb12 f303 	smulbb	r3, r2, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	4b6e      	ldr	r3, [pc, #440]	; (8004964 <main+0x6d0>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	b2d9      	uxtb	r1, r3
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <main+0x6d4>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f083 0301 	eor.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	fb11 f303 	smulbb	r3, r1, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <main+0x6d0>)
 80047c8:	701a      	strb	r2, [r3, #0]

	  if(GetMillisDifference(&temp_led_timer) > 500)
 80047ca:	4868      	ldr	r0, [pc, #416]	; (800496c <main+0x6d8>)
 80047cc:	f000 fa60 	bl	8004c90 <GetMillisDifference>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047d6:	d904      	bls.n	80047e2 <main+0x54e>
	  {
		  temp_led_timer = GetMillis();
 80047d8:	f000 fa48 	bl	8004c6c <GetMillis>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b63      	ldr	r3, [pc, #396]	; (800496c <main+0x6d8>)
 80047e0:	601a      	str	r2, [r3, #0]

		  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  }

	  if(GetMicrosDifference(&pwm_output_timer) >= 4000)
 80047e2:	4863      	ldr	r0, [pc, #396]	; (8004970 <main+0x6dc>)
 80047e4:	f000 fa62 	bl	8004cac <GetMicrosDifference>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80047ee:	d304      	bcc.n	80047fa <main+0x566>
	  {
		  pwm_output_timer = GetMicros();
 80047f0:	f000 fa30 	bl	8004c54 <GetMicros>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b5e      	ldr	r3, [pc, #376]	; (8004970 <main+0x6dc>)
 80047f8:	601a      	str	r2, [r3, #0]
		  //__HAL_TIM_SET_COUNTER(&htim8, 4999); //Reset motor PWN counter for fast response time(probably makes esc refresh rate faster)
	  }

	  if(GetMicrosDifference(&main_loop_timer) >= 2000)
 80047fa:	485e      	ldr	r0, [pc, #376]	; (8004974 <main+0x6e0>)
 80047fc:	f000 fa56 	bl	8004cac <GetMicrosDifference>
 8004800:	4603      	mov	r3, r0
 8004802:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004806:	f0c0 80a8 	bcc.w	800495a <main+0x6c6>
	  {
		  if(main_cycle_counter > 399)
 800480a:	4b5b      	ldr	r3, [pc, #364]	; (8004978 <main+0x6e4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004812:	d302      	bcc.n	800481a <main+0x586>
			  main_cycle_counter = 0;
 8004814:	4b58      	ldr	r3, [pc, #352]	; (8004978 <main+0x6e4>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
		  if((main_cycle_counter + 1) % 4 == 0)//Every 4 clock cycles(500uS * 4 = 2000uS) NOT IN USE RIGHT NOW
		  {

		  }

		  how_long_to_loop_main = GetMicrosDifference(&main_loop_timer);
 800481a:	4856      	ldr	r0, [pc, #344]	; (8004974 <main+0x6e0>)
 800481c:	f000 fa46 	bl	8004cac <GetMicrosDifference>
 8004820:	4602      	mov	r2, r0
 8004822:	4b56      	ldr	r3, [pc, #344]	; (800497c <main+0x6e8>)
 8004824:	601a      	str	r2, [r3, #0]
		  if(how_long_to_loop_main > 4000)
 8004826:	4b55      	ldr	r3, [pc, #340]	; (800497c <main+0x6e8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800482e:	d903      	bls.n	8004838 <main+0x5a4>
			  how_long_to_loop_main = 3000;
 8004830:	4b52      	ldr	r3, [pc, #328]	; (800497c <main+0x6e8>)
 8004832:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004836:	601a      	str	r2, [r3, #0]
		  how_long_to_loop_modifier = (float)(round(((float)((float)how_long_to_loop_main / 2000)) * 100.0) / 100.0);
 8004838:	4b50      	ldr	r3, [pc, #320]	; (800497c <main+0x6e8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	ee07 3a90 	vmov	s15, r3
 8004840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004844:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004980 <main+0x6ec>
 8004848:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800484c:	ee16 0a90 	vmov	r0, s13
 8004850:	f7fb fe7a 	bl	8000548 <__aeabi_f2d>
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <main+0x6f0>)
 800485a:	f7fb fecd 	bl	80005f8 <__aeabi_dmul>
 800485e:	4603      	mov	r3, r0
 8004860:	460c      	mov	r4, r1
 8004862:	ec44 3b17 	vmov	d7, r3, r4
 8004866:	eeb0 0a47 	vmov.f32	s0, s14
 800486a:	eef0 0a67 	vmov.f32	s1, s15
 800486e:	f00c fa3f 	bl	8010cf0 <round>
 8004872:	ec51 0b10 	vmov	r0, r1, d0
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	4b42      	ldr	r3, [pc, #264]	; (8004984 <main+0x6f0>)
 800487c:	f7fb ffe6 	bl	800084c <__aeabi_ddiv>
 8004880:	4603      	mov	r3, r0
 8004882:	460c      	mov	r4, r1
 8004884:	4618      	mov	r0, r3
 8004886:	4621      	mov	r1, r4
 8004888:	f7fc f98e 	bl	8000ba8 <__aeabi_d2f>
 800488c:	4602      	mov	r2, r0
 800488e:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <main+0x6f4>)
 8004890:	601a      	str	r2, [r3, #0]
		  main_loop_timer = GetMicros();
 8004892:	f000 f9df 	bl	8004c54 <GetMicros>
 8004896:	4602      	mov	r2, r0
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <main+0x6e0>)
 800489a:	601a      	str	r2, [r3, #0]

		  if(launching && !launched)
 800489c:	4b3b      	ldr	r3, [pc, #236]	; (800498c <main+0x6f8>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <main+0x61c>
 80048a4:	4b30      	ldr	r3, [pc, #192]	; (8004968 <main+0x6d4>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <main+0x61c>
		  {
			  //Launch logic here
			  Launch_Behavior();
 80048ac:	f7fe fea0 	bl	80035f0 <Launch_Behavior>
		  }

		  if(landing && launched)
 80048b0:	4b37      	ldr	r3, [pc, #220]	; (8004990 <main+0x6fc>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <main+0x630>
 80048b8:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <main+0x6d4>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <main+0x630>
		  {
			  //Landing logic here
			  Land_Behavior();
 80048c0:	f7fe ff56 	bl	8003770 <Land_Behavior>
		  }

		  if((main_cycle_counter + 1) % 10)
 80048c4:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <main+0x6e4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1c59      	adds	r1, r3, #1
 80048ca:	4b32      	ldr	r3, [pc, #200]	; (8004994 <main+0x700>)
 80048cc:	fba3 2301 	umull	r2, r3, r3, r1
 80048d0:	08da      	lsrs	r2, r3, #3
 80048d2:	4613      	mov	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	1aca      	subs	r2, r1, r3
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d015      	beq.n	800490c <main+0x678>
		  {
			  Read_Compass();
 80048e0:	f7fc ffe2 	bl	80018a8 <Read_Compass>
			  Read_BMP280_PressureTemperature();
 80048e4:	f7fc fcc4 	bl	8001270 <Read_BMP280_PressureTemperature>
			  if(altitude_hold_flag)
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <main+0x704>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <main+0x662>
				  Calculate_Altitude_PID();
 80048f0:	f7fe fb2a 	bl	8002f48 <Calculate_Altitude_PID>
 80048f4:	e00a      	b.n	800490c <main+0x678>
			  else
			  {
				  altitude_pid_output = 0;
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <main+0x708>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
				  pid_alt_last_error = 0;
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <main+0x70c>)
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
				  pid_alt_i = 0;
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <main+0x710>)
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
			  }
		  }

		  Read_IMU(0);
 800490c:	2000      	movs	r0, #0
 800490e:	f7ff fc13 	bl	8004138 <Read_IMU>
		  Calculate_Attitude();
 8004912:	f7fd fca5 	bl	8002260 <Calculate_Attitude>
		  //Calculate all motors values, then immediately output them using oneshot125
		  Motor_PID();
 8004916:	f7fd ff4f 	bl	80027b8 <Motor_PID>
		  Calculate_Motor_Outputs();
 800491a:	f7fe fa17 	bl	8002d4c <Calculate_Motor_Outputs>

		  __HAL_TIM_SET_COUNTER(&htim8, 3999);
 800491e:	4b22      	ldr	r3, [pc, #136]	; (80049a8 <main+0x714>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004926:	625a      	str	r2, [r3, #36]	; 0x24

		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, esc1_output);
 8004928:	4b20      	ldr	r3, [pc, #128]	; (80049ac <main+0x718>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <main+0x714>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, esc2_output);
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <main+0x71c>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b1c      	ldr	r3, [pc, #112]	; (80049a8 <main+0x714>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, esc3_output);
 800493c:	4b1d      	ldr	r3, [pc, #116]	; (80049b4 <main+0x720>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b19      	ldr	r3, [pc, #100]	; (80049a8 <main+0x714>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, esc4_output);
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <main+0x724>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <main+0x714>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	635a      	str	r2, [r3, #52]	; 0x34

		  main_cycle_counter++;
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <main+0x6e4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	4a08      	ldr	r2, [pc, #32]	; (8004978 <main+0x6e4>)
 8004958:	6013      	str	r3, [r2, #0]
	  }

	  telem_loop();
 800495a:	f000 fb71 	bl	8005040 <telem_loop>
	  if(ppm_channels[4] < 1600)
 800495e:	e6c2      	b.n	80046e6 <main+0x452>
 8004960:	200002d7 	.word	0x200002d7
 8004964:	200002f8 	.word	0x200002f8
 8004968:	200002d4 	.word	0x200002d4
 800496c:	200010ac 	.word	0x200010ac
 8004970:	20001078 	.word	0x20001078
 8004974:	200010d4 	.word	0x200010d4
 8004978:	200002f4 	.word	0x200002f4
 800497c:	20001080 	.word	0x20001080
 8004980:	44fa0000 	.word	0x44fa0000
 8004984:	40590000 	.word	0x40590000
 8004988:	20000038 	.word	0x20000038
 800498c:	200002d5 	.word	0x200002d5
 8004990:	200002d6 	.word	0x200002d6
 8004994:	cccccccd 	.word	0xcccccccd
 8004998:	200002f9 	.word	0x200002f9
 800499c:	200002a8 	.word	0x200002a8
 80049a0:	200002a4 	.word	0x200002a4
 80049a4:	200002bc 	.word	0x200002bc
 80049a8:	20002bc4 	.word	0x20002bc4
 80049ac:	2000000c 	.word	0x2000000c
 80049b0:	20000010 	.word	0x20000010
 80049b4:	20000014 	.word	0x20000014
 80049b8:	20000018 	.word	0x20000018

080049bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b098      	sub	sp, #96	; 0x60
 80049c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049c6:	2230      	movs	r2, #48	; 0x30
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f00b fd34 	bl	8010438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049d0:	f107 031c 	add.w	r3, r7, #28
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	4b31      	ldr	r3, [pc, #196]	; (8004ab8 <SystemClock_Config+0xfc>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a30      	ldr	r2, [pc, #192]	; (8004ab8 <SystemClock_Config+0xfc>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <SystemClock_Config+0xfc>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	60bb      	str	r3, [r7, #8]
 8004a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <SystemClock_Config+0x100>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2a      	ldr	r2, [pc, #168]	; (8004abc <SystemClock_Config+0x100>)
 8004a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <SystemClock_Config+0x100>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a22:	607b      	str	r3, [r7, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004a26:	2309      	movs	r3, #9
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004a30:	2301      	movs	r3, #1
 8004a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a34:	2302      	movs	r3, #2
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004a3e:	2310      	movs	r3, #16
 8004a40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004a42:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004a46:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004a4c:	2307      	movs	r3, #7
 8004a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a54:	4618      	mov	r0, r3
 8004a56:	f006 f8eb 	bl	800ac30 <HAL_RCC_OscConfig>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8004a60:	f000 f9a4 	bl	8004dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a64:	230f      	movs	r3, #15
 8004a66:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004a7c:	f107 031c 	add.w	r3, r7, #28
 8004a80:	2105      	movs	r1, #5
 8004a82:	4618      	mov	r0, r3
 8004a84:	f006 fb44 	bl	800b110 <HAL_RCC_ClockConfig>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8004a8e:	f000 f98d 	bl	8004dac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a92:	2302      	movs	r3, #2
 8004a94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a9a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f006 fd11 	bl	800b4c8 <HAL_RCCEx_PeriphCLKConfig>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004aac:	f000 f97e 	bl	8004dac <Error_Handler>
  }
}
 8004ab0:	bf00      	nop
 8004ab2:	3760      	adds	r7, #96	; 0x60
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40007000 	.word	0x40007000

08004ac0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a4e      	ldr	r2, [pc, #312]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	f040 8095 	bne.w	8004bfc <HAL_TIM_IC_CaptureCallback+0x13c>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	484b      	ldr	r0, [pc, #300]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004ad6:	f007 fb37 	bl	800c148 <HAL_TIM_ReadCapturedValue>
 8004ada:	4602      	mov	r2, r0
 8004adc:	4b4a      	ldr	r3, [pc, #296]	; (8004c08 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004ade:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	484a      	ldr	r0, [pc, #296]	; (8004c0c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8004ae4:	f002 f994 	bl	8006e10 <HAL_GPIO_ReadPin>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d014      	beq.n	8004b18 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 8004aee:	4b46      	ldr	r3, [pc, #280]	; (8004c08 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a47      	ldr	r2, [pc, #284]	; (8004c10 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004af4:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8004af6:	4b43      	ldr	r3, [pc, #268]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 020a 	bic.w	r2, r2, #10
 8004b04:	621a      	str	r2, [r3, #32]
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	4b3d      	ldr	r3, [pc, #244]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0202 	orr.w	r2, r2, #2
 8004b14:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8004b16:	e071      	b.n	8004bfc <HAL_TIM_IC_CaptureCallback+0x13c>
			if (current_ppm_capture > last_ppm_capture)
 8004b18:	4b3b      	ldr	r3, [pc, #236]	; (8004c08 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4b3c      	ldr	r3, [pc, #240]	; (8004c10 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d907      	bls.n	8004b34 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 8004b24:	4b38      	ldr	r3, [pc, #224]	; (8004c08 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	4a39      	ldr	r2, [pc, #228]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00d      	b.n	8004b50 <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 8004b34:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d807      	bhi.n	8004b50 <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 8004b40:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b32      	ldr	r3, [pc, #200]	; (8004c10 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4a31      	ldr	r2, [pc, #196]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b4e:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 8004b50:	4b30      	ldr	r3, [pc, #192]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d903      	bls.n	8004b64 <HAL_TIM_IC_CaptureCallback+0xa4>
				current_ppm_channel = 0;
 8004b5c:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e006      	b.n	8004b72 <HAL_TIM_IC_CaptureCallback+0xb2>
				current_ppm_channel++;
 8004b64:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004b70:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 8004b72:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d903      	bls.n	8004b86 <HAL_TIM_IC_CaptureCallback+0xc6>
				test_max_frequency = frequency_read;
 8004b7e:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004b84:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 8004b86:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004b8e:	4a21      	ldr	r2, [pc, #132]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b90:	6013      	str	r3, [r2, #0]
			if(frequency_read < 1000)
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b9a:	d204      	bcs.n	8004ba6 <HAL_TIM_IC_CaptureCallback+0xe6>
				frequency_read = 1000;
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e008      	b.n	8004bb8 <HAL_TIM_IC_CaptureCallback+0xf8>
			else if(frequency_read > 2000)
 8004ba6:	4b1b      	ldr	r3, [pc, #108]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004bae:	d903      	bls.n	8004bb8 <HAL_TIM_IC_CaptureCallback+0xf8>
				frequency_read = 2000;
 8004bb0:	4b18      	ldr	r3, [pc, #96]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004bb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bb6:	601a      	str	r2, [r3, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 8004bb8:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00e      	beq.n	8004be0 <HAL_TIM_IC_CaptureCallback+0x120>
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b06      	cmp	r3, #6
 8004bca:	d809      	bhi.n	8004be0 <HAL_TIM_IC_CaptureCallback+0x120>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 8004bcc:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004bdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a1a      	ldr	r2, [r3, #32]
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 020a 	bic.w	r2, r2, #10
 8004bee:	621a      	str	r2, [r3, #32]
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6a12      	ldr	r2, [r2, #32]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20002c04 	.word	0x20002c04
 8004c08:	200002e4 	.word	0x200002e4
 8004c0c:	40020000 	.word	0x40020000
 8004c10:	200002e8 	.word	0x200002e8
 8004c14:	20000034 	.word	0x20000034
 8004c18:	200002ec 	.word	0x200002ec
 8004c1c:	200002f0 	.word	0x200002f0
 8004c20:	200010b0 	.word	0x200010b0

08004c24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//micros_timer_base += 65000;//65536;
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3341      	adds	r3, #65	; 0x41
 8004c3a:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004c3c:	6013      	str	r3, [r2, #0]
	}
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20002c84 	.word	0x20002c84
 8004c50:	200010cc 	.word	0x200010cc

08004c54 <GetMicros>:

uint32_t GetMicros()
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim9);
 8004c58:	4b03      	ldr	r3, [pc, #12]	; (8004c68 <GetMicros+0x14>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	20002c84 	.word	0x20002c84

08004c6c <GetMillis>:

uint32_t GetMillis()
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 8004c70:	f7ff fff0 	bl	8004c54 <GetMicros>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <GetMillis+0x1c>)
 8004c78:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7c:	099a      	lsrs	r2, r3, #6
 8004c7e:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <GetMillis+0x20>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4413      	add	r3, r2
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	10624dd3 	.word	0x10624dd3
 8004c8c:	200010cc 	.word	0x200010cc

08004c90 <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 8004c98:	f7ff ffe8 	bl	8004c6c <GetMillis>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	1ad3      	subs	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8004cb4:	f7ff ffce 	bl	8004c54 <GetMicros>
 8004cb8:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d905      	bls.n	8004cd4 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e00c      	b.n	8004cee <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d207      	bcs.n	8004cee <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8004cea:	33e8      	adds	r3, #232	; 0xe8
 8004cec:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a06      	ldr	r2, [pc, #24]	; (8004d30 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d102      	bne.n	8004d22 <HAL_I2C_MasterTxCpltCallback+0x16>
	{
		tx_done = 1;
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
	}
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000e68 	.word	0x20000e68
 8004d34:	20000308 	.word	0x20000308

08004d38 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d107      	bne.n	8004d58 <HAL_I2C_MasterRxCpltCallback+0x20>
	{
		rx_done = 1;
 8004d48:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
		acks_counted++;
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_I2C_MasterRxCpltCallback+0x34>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a05      	ldr	r2, [pc, #20]	; (8004d6c <HAL_I2C_MasterRxCpltCallback+0x34>)
 8004d56:	6013      	str	r3, [r2, #0]
	}
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	20000e68 	.word	0x20000e68
 8004d68:	20000307 	.word	0x20000307
 8004d6c:	2000111c 	.word	0x2000111c

08004d70 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <MX_RTC_Init+0x44>)
 8004dc2:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <MX_RTC_Init+0x48>)
 8004dc4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <MX_RTC_Init+0x44>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <MX_RTC_Init+0x44>)
 8004dce:	227f      	movs	r2, #127	; 0x7f
 8004dd0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <MX_RTC_Init+0x44>)
 8004dd4:	22ff      	movs	r2, #255	; 0xff
 8004dd6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <MX_RTC_Init+0x44>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <MX_RTC_Init+0x44>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <MX_RTC_Init+0x44>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004dea:	4805      	ldr	r0, [pc, #20]	; (8004e00 <MX_RTC_Init+0x44>)
 8004dec:	f006 fc4e 	bl	800b68c <HAL_RTC_Init>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004df6:	f7ff ffd9 	bl	8004dac <Error_Handler>
  }

}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200010dc 	.word	0x200010dc
 8004e04:	40002800 	.word	0x40002800

08004e08 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a05      	ldr	r2, [pc, #20]	; (8004e2c <HAL_RTC_MspInit+0x24>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d102      	bne.n	8004e20 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e1a:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RTC_MspInit+0x28>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40002800 	.word	0x40002800
 8004e30:	42470e3c 	.word	0x42470e3c

08004e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <HAL_MspInit+0x4c>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	4a0f      	ldr	r2, [pc, #60]	; (8004e80 <HAL_MspInit+0x4c>)
 8004e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e48:	6453      	str	r3, [r2, #68]	; 0x44
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <HAL_MspInit+0x4c>)
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_MspInit+0x4c>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <HAL_MspInit+0x4c>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6413      	str	r3, [r2, #64]	; 0x40
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_MspInit+0x4c>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40023800 	.word	0x40023800

08004e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <HardFault_Handler+0x4>

08004e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <MemManage_Handler+0x4>

08004e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ea2:	e7fe      	b.n	8004ea2 <BusFault_Handler+0x4>

08004ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ea8:	e7fe      	b.n	8004ea8 <UsageFault_Handler+0x4>

08004eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ebc:	bf00      	nop
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ed8:	f001 f994 	bl	8006204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004edc:	bf00      	nop
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <DMA1_Stream0_IRQHandler+0x10>)
 8004ee6:	f001 fbb1 	bl	800664c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000f7c 	.word	0x20000f7c

08004ef4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <DMA1_Stream3_IRQHandler+0x10>)
 8004efa:	f001 fba7 	bl	800664c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000ebc 	.word	0x20000ebc

08004f08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004f0c:	4802      	ldr	r0, [pc, #8]	; (8004f18 <DMA1_Stream6_IRQHandler+0x10>)
 8004f0e:	f001 fb9d 	bl	800664c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000db4 	.word	0x20000db4

08004f1c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004f22:	f006 fdef 	bl	800bb04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20002c84 	.word	0x20002c84

08004f30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <I2C1_EV_IRQHandler+0x10>)
 8004f36:	f002 fdc7 	bl	8007ac8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000e14 	.word	0x20000e14

08004f44 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <I2C2_EV_IRQHandler+0x10>)
 8004f4a:	f002 fdbd 	bl	8007ac8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000e68 	.word	0x20000e68

08004f58 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004f5c:	4802      	ldr	r0, [pc, #8]	; (8004f68 <I2C2_ER_IRQHandler+0x10>)
 8004f5e:	f002 ff19 	bl	8007d94 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000e68 	.word	0x20000e68

08004f6c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004f70:	4802      	ldr	r0, [pc, #8]	; (8004f7c <DMA1_Stream7_IRQHandler+0x10>)
 8004f72:	f001 fb6b 	bl	800664c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000f1c 	.word	0x20000f1c

08004f80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004f84:	4802      	ldr	r0, [pc, #8]	; (8004f90 <TIM5_IRQHandler+0x10>)
 8004f86:	f006 fdbd 	bl	800bb04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20002c04 	.word	0x20002c04

08004f94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f98:	4802      	ldr	r0, [pc, #8]	; (8004fa4 <OTG_FS_IRQHandler+0x10>)
 8004f9a:	f004 fe16 	bl	8009bca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20004198 	.word	0x20004198

08004fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fb0:	4a14      	ldr	r2, [pc, #80]	; (8005004 <_sbrk+0x5c>)
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <_sbrk+0x60>)
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fbc:	4b13      	ldr	r3, [pc, #76]	; (800500c <_sbrk+0x64>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fc4:	4b11      	ldr	r3, [pc, #68]	; (800500c <_sbrk+0x64>)
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <_sbrk+0x68>)
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <_sbrk+0x64>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d207      	bcs.n	8004fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fd8:	f00b f9f4 	bl	80103c4 <__errno>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	230c      	movs	r3, #12
 8004fe0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe6:	e009      	b.n	8004ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <_sbrk+0x64>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fee:	4b07      	ldr	r3, [pc, #28]	; (800500c <_sbrk+0x64>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	4a05      	ldr	r2, [pc, #20]	; (800500c <_sbrk+0x64>)
 8004ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20020000 	.word	0x20020000
 8005008:	00000400 	.word	0x00000400
 800500c:	200002fc 	.word	0x200002fc
 8005010:	200045a8 	.word	0x200045a8

08005014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <SystemInit+0x28>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	4a07      	ldr	r2, [pc, #28]	; (800503c <SystemInit+0x28>)
 8005020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <SystemInit+0x28>)
 800502a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800502e:	609a      	str	r2, [r3, #8]
#endif
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000ed00 	.word	0xe000ed00

08005040 <telem_loop>:
uint32_t acks_per_second;

uint32_t time_to_telem_timer, time_to_telem;

void telem_loop()
{
 8005040:	b5b0      	push	{r4, r5, r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af02      	add	r7, sp, #8
	if(GetMillisDifference(&acks_per_second_timer) >= 1000)
 8005046:	48ab      	ldr	r0, [pc, #684]	; (80052f4 <telem_loop+0x2b4>)
 8005048:	f7ff fe22 	bl	8004c90 <GetMillisDifference>
 800504c:	4603      	mov	r3, r0
 800504e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005052:	d30b      	bcc.n	800506c <telem_loop+0x2c>
	{
		acks_per_second_timer = GetMillis();
 8005054:	f7ff fe0a 	bl	8004c6c <GetMillis>
 8005058:	4602      	mov	r2, r0
 800505a:	4ba6      	ldr	r3, [pc, #664]	; (80052f4 <telem_loop+0x2b4>)
 800505c:	601a      	str	r2, [r3, #0]
		acks_per_second = acks_counted;
 800505e:	4ba6      	ldr	r3, [pc, #664]	; (80052f8 <telem_loop+0x2b8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4aa6      	ldr	r2, [pc, #664]	; (80052fc <telem_loop+0x2bc>)
 8005064:	6013      	str	r3, [r2, #0]
		acks_counted = 0;
 8005066:	4ba4      	ldr	r3, [pc, #656]	; (80052f8 <telem_loop+0x2b8>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
	}

	if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY)
 800506c:	48a4      	ldr	r0, [pc, #656]	; (8005300 <telem_loop+0x2c0>)
 800506e:	f002 ff6e 	bl	8007f4e <HAL_I2C_GetState>
 8005072:	4603      	mov	r3, r0
 8005074:	2b20      	cmp	r3, #32
 8005076:	f040 836f 	bne.w	8005758 <telem_loop+0x718>
	{
		if(rx_done)
 800507a:	4ba2      	ldr	r3, [pc, #648]	; (8005304 <telem_loop+0x2c4>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 81dd 	beq.w	8005440 <telem_loop+0x400>
		{
			rx_done = 0;
 8005086:	4b9f      	ldr	r3, [pc, #636]	; (8005304 <telem_loop+0x2c4>)
 8005088:	2200      	movs	r2, #0
 800508a:	701a      	strb	r2, [r3, #0]
			ack_rate_counter = 0;
 800508c:	4b9e      	ldr	r3, [pc, #632]	; (8005308 <telem_loop+0x2c8>)
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]

			switch(telem_receive_buffer[0])
 8005092:	4b9e      	ldr	r3, [pc, #632]	; (800530c <telem_loop+0x2cc>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2bf4      	cmp	r3, #244	; 0xf4
 800509a:	d076      	beq.n	800518a <telem_loop+0x14a>
 800509c:	2bf4      	cmp	r3, #244	; 0xf4
 800509e:	dc0c      	bgt.n	80050ba <telem_loop+0x7a>
 80050a0:	2be1      	cmp	r3, #225	; 0xe1
 80050a2:	f000 81c2 	beq.w	800542a <telem_loop+0x3ea>
 80050a6:	2be1      	cmp	r3, #225	; 0xe1
 80050a8:	dc01      	bgt.n	80050ae <telem_loop+0x6e>
 80050aa:	2b00      	cmp	r3, #0
			{
			case 0x00:
				break;
 80050ac:	e1c8      	b.n	8005440 <telem_loop+0x400>
			switch(telem_receive_buffer[0])
 80050ae:	2be2      	cmp	r3, #226	; 0xe2
 80050b0:	f000 81aa 	beq.w	8005408 <telem_loop+0x3c8>
 80050b4:	2bf3      	cmp	r3, #243	; 0xf3
 80050b6:	d025      	beq.n	8005104 <telem_loop+0xc4>
 80050b8:	e1c2      	b.n	8005440 <telem_loop+0x400>
 80050ba:	2bf6      	cmp	r3, #246	; 0xf6
 80050bc:	f000 8148 	beq.w	8005350 <telem_loop+0x310>
 80050c0:	2bf6      	cmp	r3, #246	; 0xf6
 80050c2:	f2c0 8099 	blt.w	80051f8 <telem_loop+0x1b8>
 80050c6:	2bf7      	cmp	r3, #247	; 0xf7
 80050c8:	d003      	beq.n	80050d2 <telem_loop+0x92>
 80050ca:	2bfa      	cmp	r3, #250	; 0xfa
 80050cc:	f000 8199 	beq.w	8005402 <telem_loop+0x3c2>
 80050d0:	e1b6      	b.n	8005440 <telem_loop+0x400>
			case CALIBRATE_GYRO_REQUEST:
				if(!launched)
 80050d2:	4b8f      	ldr	r3, [pc, #572]	; (8005310 <telem_loop+0x2d0>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f040 81a9 	bne.w	800542e <telem_loop+0x3ee>
				{
					Calibrate_BMP280();
 80050dc:	f7fc fb88 	bl	80017f0 <Calibrate_BMP280>
					Calibrate_IMU();
 80050e0:	f7fe ffac 	bl	800403c <Calibrate_IMU>
					ClearPrintBuffer();
 80050e4:	f000 fb82 	bl	80057ec <ClearPrintBuffer>
					sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 80050e8:	4a8a      	ldr	r2, [pc, #552]	; (8005314 <telem_loop+0x2d4>)
 80050ea:	4b8b      	ldr	r3, [pc, #556]	; (8005318 <telem_loop+0x2d8>)
 80050ec:	4615      	mov	r5, r2
 80050ee:	461c      	mov	r4, r3
 80050f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f2:	6028      	str	r0, [r5, #0]
 80050f4:	6069      	str	r1, [r5, #4]
 80050f6:	60aa      	str	r2, [r5, #8]
 80050f8:	60eb      	str	r3, [r5, #12]
 80050fa:	8823      	ldrh	r3, [r4, #0]
 80050fc:	822b      	strh	r3, [r5, #16]
					PrintManualPacket();
 80050fe:	f000 fb8f 	bl	8005820 <PrintManualPacket>
				}
				break;
 8005102:	e194      	b.n	800542e <telem_loop+0x3ee>
			case PID_GAIN_FIRST_REQUEST:
				ClearManualBuffer();
 8005104:	f000 fb40 	bl	8005788 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 8005108:	4b84      	ldr	r3, [pc, #528]	; (800531c <telem_loop+0x2dc>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	4984      	ldr	r1, [pc, #528]	; (8005320 <telem_loop+0x2e0>)
 8005110:	4613      	mov	r3, r2
 8005112:	00db      	lsls	r3, r3, #3
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	440b      	add	r3, r1
 800511c:	3323      	adds	r3, #35	; 0x23
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 8005122:	4b7e      	ldr	r3, [pc, #504]	; (800531c <telem_loop+0x2dc>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	497d      	ldr	r1, [pc, #500]	; (8005320 <telem_loop+0x2e0>)
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	440b      	add	r3, r1
 8005136:	3324      	adds	r3, #36	; 0x24
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 800513c:	2003      	movs	r0, #3
 800513e:	f000 fc33 	bl	80059a8 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_roll, 4);
 8005142:	2104      	movs	r1, #4
 8005144:	4877      	ldr	r0, [pc, #476]	; (8005324 <telem_loop+0x2e4>)
 8005146:	f000 fc4b 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_roll, 4);
 800514a:	2104      	movs	r1, #4
 800514c:	4876      	ldr	r0, [pc, #472]	; (8005328 <telem_loop+0x2e8>)
 800514e:	f000 fc47 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_roll, 4);
 8005152:	2104      	movs	r1, #4
 8005154:	4875      	ldr	r0, [pc, #468]	; (800532c <telem_loop+0x2ec>)
 8005156:	f000 fc43 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 800515a:	2104      	movs	r1, #4
 800515c:	4874      	ldr	r0, [pc, #464]	; (8005330 <telem_loop+0x2f0>)
 800515e:	f000 fc3f 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 8005162:	2104      	movs	r1, #4
 8005164:	4873      	ldr	r0, [pc, #460]	; (8005334 <telem_loop+0x2f4>)
 8005166:	f000 fc3b 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 800516a:	2104      	movs	r1, #4
 800516c:	4872      	ldr	r0, [pc, #456]	; (8005338 <telem_loop+0x2f8>)
 800516e:	f000 fc37 	bl	80059e0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 8005172:	4b6a      	ldr	r3, [pc, #424]	; (800531c <telem_loop+0x2dc>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b1e      	cmp	r3, #30
 8005178:	f200 815b 	bhi.w	8005432 <telem_loop+0x3f2>
					manual_packet_count++;
 800517c:	4b67      	ldr	r3, [pc, #412]	; (800531c <telem_loop+0x2dc>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	b2da      	uxtb	r2, r3
 8005184:	4b65      	ldr	r3, [pc, #404]	; (800531c <telem_loop+0x2dc>)
 8005186:	701a      	strb	r2, [r3, #0]
				break;
 8005188:	e153      	b.n	8005432 <telem_loop+0x3f2>
			case PID_GAIN_SECOND_REQUEST:
				ClearManualBuffer();
 800518a:	f000 fafd 	bl	8005788 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 800518e:	4b63      	ldr	r3, [pc, #396]	; (800531c <telem_loop+0x2dc>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	4962      	ldr	r1, [pc, #392]	; (8005320 <telem_loop+0x2e0>)
 8005196:	4613      	mov	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	440b      	add	r3, r1
 80051a2:	3323      	adds	r3, #35	; 0x23
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 80051a8:	4b5c      	ldr	r3, [pc, #368]	; (800531c <telem_loop+0x2dc>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	495c      	ldr	r1, [pc, #368]	; (8005320 <telem_loop+0x2e0>)
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	440b      	add	r3, r1
 80051bc:	3324      	adds	r3, #36	; 0x24
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 80051c2:	2004      	movs	r0, #4
 80051c4:	f000 fbf0 	bl	80059a8 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_alt, 4);
 80051c8:	2104      	movs	r1, #4
 80051ca:	485c      	ldr	r0, [pc, #368]	; (800533c <telem_loop+0x2fc>)
 80051cc:	f000 fc08 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_alt, 4);
 80051d0:	2104      	movs	r1, #4
 80051d2:	485b      	ldr	r0, [pc, #364]	; (8005340 <telem_loop+0x300>)
 80051d4:	f000 fc04 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_alt, 4);
 80051d8:	2104      	movs	r1, #4
 80051da:	485a      	ldr	r0, [pc, #360]	; (8005344 <telem_loop+0x304>)
 80051dc:	f000 fc00 	bl	80059e0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 80051e0:	4b4e      	ldr	r3, [pc, #312]	; (800531c <telem_loop+0x2dc>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b1e      	cmp	r3, #30
 80051e6:	f200 8126 	bhi.w	8005436 <telem_loop+0x3f6>
					manual_packet_count++;
 80051ea:	4b4c      	ldr	r3, [pc, #304]	; (800531c <telem_loop+0x2dc>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	4b4a      	ldr	r3, [pc, #296]	; (800531c <telem_loop+0x2dc>)
 80051f4:	701a      	strb	r2, [r3, #0]
				break;
 80051f6:	e11e      	b.n	8005436 <telem_loop+0x3f6>
			case PID_GAIN_FIRST_UPDATE_REQUEST:
				telem_receive_read_index = 1;
 80051f8:	4b53      	ldr	r3, [pc, #332]	; (8005348 <telem_loop+0x308>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer((uint8_t *)&kp_roll, 4);
 80051fe:	2104      	movs	r1, #4
 8005200:	4848      	ldr	r0, [pc, #288]	; (8005324 <telem_loop+0x2e4>)
 8005202:	f000 fc43 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_roll, 4);
 8005206:	2104      	movs	r1, #4
 8005208:	4847      	ldr	r0, [pc, #284]	; (8005328 <telem_loop+0x2e8>)
 800520a:	f000 fc3f 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_roll, 4);
 800520e:	2104      	movs	r1, #4
 8005210:	4846      	ldr	r0, [pc, #280]	; (800532c <telem_loop+0x2ec>)
 8005212:	f000 fc3b 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kp_yaw, 4);
 8005216:	2104      	movs	r1, #4
 8005218:	4845      	ldr	r0, [pc, #276]	; (8005330 <telem_loop+0x2f0>)
 800521a:	f000 fc37 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_yaw, 4);
 800521e:	2104      	movs	r1, #4
 8005220:	4844      	ldr	r0, [pc, #272]	; (8005334 <telem_loop+0x2f4>)
 8005222:	f000 fc33 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_yaw, 4);
 8005226:	2104      	movs	r1, #4
 8005228:	4843      	ldr	r0, [pc, #268]	; (8005338 <telem_loop+0x2f8>)
 800522a:	f000 fc2f 	bl	8005a8c <ReadReceiveBuffer>

				EEPROM_Clear_Buffer();
 800522e:	f7fe fbcb 	bl	80039c8 <EEPROM_Clear_Buffer>
				eeprom_write_buffer_width = 2;
 8005232:	4b46      	ldr	r3, [pc, #280]	; (800534c <telem_loop+0x30c>)
 8005234:	2202      	movs	r2, #2
 8005236:	701a      	strb	r2, [r3, #0]
				EEPROM_Write_Buffer((uint8_t *)&kp_roll, 4);
 8005238:	2104      	movs	r1, #4
 800523a:	483a      	ldr	r0, [pc, #232]	; (8005324 <telem_loop+0x2e4>)
 800523c:	f7fe fc24 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_roll, 4);
 8005240:	2104      	movs	r1, #4
 8005242:	4839      	ldr	r0, [pc, #228]	; (8005328 <telem_loop+0x2e8>)
 8005244:	f7fe fc20 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_roll, 4);
 8005248:	2104      	movs	r1, #4
 800524a:	4838      	ldr	r0, [pc, #224]	; (800532c <telem_loop+0x2ec>)
 800524c:	f7fe fc1c 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kp_yaw, 4);
 8005250:	2104      	movs	r1, #4
 8005252:	4837      	ldr	r0, [pc, #220]	; (8005330 <telem_loop+0x2f0>)
 8005254:	f7fe fc18 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_yaw, 4);
 8005258:	2104      	movs	r1, #4
 800525a:	4836      	ldr	r0, [pc, #216]	; (8005334 <telem_loop+0x2f4>)
 800525c:	f7fe fc14 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_yaw, 4);
 8005260:	2104      	movs	r1, #4
 8005262:	4835      	ldr	r0, [pc, #212]	; (8005338 <telem_loop+0x2f8>)
 8005264:	f7fe fc10 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Save_Page(0);
 8005268:	2000      	movs	r0, #0
 800526a:	f7fe fbc7 	bl	80039fc <EEPROM_Save_Page>

				ClearManualBuffer();
 800526e:	f000 fa8b 	bl	8005788 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 8005272:	4b2a      	ldr	r3, [pc, #168]	; (800531c <telem_loop+0x2dc>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	4929      	ldr	r1, [pc, #164]	; (8005320 <telem_loop+0x2e0>)
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	440b      	add	r3, r1
 8005286:	3323      	adds	r3, #35	; 0x23
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 800528c:	4b23      	ldr	r3, [pc, #140]	; (800531c <telem_loop+0x2dc>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	4923      	ldr	r1, [pc, #140]	; (8005320 <telem_loop+0x2e0>)
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	440b      	add	r3, r1
 80052a0:	3324      	adds	r3, #36	; 0x24
 80052a2:	2201      	movs	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 80052a6:	2003      	movs	r0, #3
 80052a8:	f000 fb7e 	bl	80059a8 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_roll, 4);
 80052ac:	2104      	movs	r1, #4
 80052ae:	481d      	ldr	r0, [pc, #116]	; (8005324 <telem_loop+0x2e4>)
 80052b0:	f000 fb96 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_roll, 4);
 80052b4:	2104      	movs	r1, #4
 80052b6:	481c      	ldr	r0, [pc, #112]	; (8005328 <telem_loop+0x2e8>)
 80052b8:	f000 fb92 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_roll, 4);
 80052bc:	2104      	movs	r1, #4
 80052be:	481b      	ldr	r0, [pc, #108]	; (800532c <telem_loop+0x2ec>)
 80052c0:	f000 fb8e 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 80052c4:	2104      	movs	r1, #4
 80052c6:	481a      	ldr	r0, [pc, #104]	; (8005330 <telem_loop+0x2f0>)
 80052c8:	f000 fb8a 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 80052cc:	2104      	movs	r1, #4
 80052ce:	4819      	ldr	r0, [pc, #100]	; (8005334 <telem_loop+0x2f4>)
 80052d0:	f000 fb86 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 80052d4:	2104      	movs	r1, #4
 80052d6:	4818      	ldr	r0, [pc, #96]	; (8005338 <telem_loop+0x2f8>)
 80052d8:	f000 fb82 	bl	80059e0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <telem_loop+0x2dc>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b1e      	cmp	r3, #30
 80052e2:	f200 80aa 	bhi.w	800543a <telem_loop+0x3fa>
					manual_packet_count++;
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <telem_loop+0x2dc>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	3301      	adds	r3, #1
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <telem_loop+0x2dc>)
 80052f0:	701a      	strb	r2, [r3, #0]
				break;
 80052f2:	e0a2      	b.n	800543a <telem_loop+0x3fa>
 80052f4:	20002bc0 	.word	0x20002bc0
 80052f8:	2000111c 	.word	0x2000111c
 80052fc:	20002b6c 	.word	0x20002b6c
 8005300:	20000e68 	.word	0x20000e68
 8005304:	20000307 	.word	0x20000307
 8005308:	20000304 	.word	0x20000304
 800530c:	20002b9c 	.word	0x20002b9c
 8005310:	200002d4 	.word	0x200002d4
 8005314:	200010fc 	.word	0x200010fc
 8005318:	0801363c 	.word	0x0801363c
 800531c:	20000300 	.word	0x20000300
 8005320:	20001120 	.word	0x20001120
 8005324:	2000027c 	.word	0x2000027c
 8005328:	20000284 	.word	0x20000284
 800532c:	2000028c 	.word	0x2000028c
 8005330:	20000280 	.word	0x20000280
 8005334:	20000288 	.word	0x20000288
 8005338:	20000290 	.word	0x20000290
 800533c:	200002ac 	.word	0x200002ac
 8005340:	200002b4 	.word	0x200002b4
 8005344:	200002b8 	.word	0x200002b8
 8005348:	20000303 	.word	0x20000303
 800534c:	20000030 	.word	0x20000030
			case PID_GAIN_SECOND_UPDATE_REQUEST:
				telem_receive_read_index = 1;
 8005350:	4b9c      	ldr	r3, [pc, #624]	; (80055c4 <telem_loop+0x584>)
 8005352:	2201      	movs	r2, #1
 8005354:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer((uint8_t *)&kp_alt, 4);
 8005356:	2104      	movs	r1, #4
 8005358:	489b      	ldr	r0, [pc, #620]	; (80055c8 <telem_loop+0x588>)
 800535a:	f000 fb97 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_alt, 4);
 800535e:	2104      	movs	r1, #4
 8005360:	489a      	ldr	r0, [pc, #616]	; (80055cc <telem_loop+0x58c>)
 8005362:	f000 fb93 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_alt, 4);
 8005366:	2104      	movs	r1, #4
 8005368:	4899      	ldr	r0, [pc, #612]	; (80055d0 <telem_loop+0x590>)
 800536a:	f000 fb8f 	bl	8005a8c <ReadReceiveBuffer>

				EEPROM_Clear_Buffer();
 800536e:	f7fe fb2b 	bl	80039c8 <EEPROM_Clear_Buffer>
				eeprom_write_buffer_width = 2;
 8005372:	4b98      	ldr	r3, [pc, #608]	; (80055d4 <telem_loop+0x594>)
 8005374:	2202      	movs	r2, #2
 8005376:	701a      	strb	r2, [r3, #0]
				EEPROM_Write_Buffer((uint8_t *)&kp_alt, 4);
 8005378:	2104      	movs	r1, #4
 800537a:	4893      	ldr	r0, [pc, #588]	; (80055c8 <telem_loop+0x588>)
 800537c:	f7fe fb84 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_alt, 4);
 8005380:	2104      	movs	r1, #4
 8005382:	4892      	ldr	r0, [pc, #584]	; (80055cc <telem_loop+0x58c>)
 8005384:	f7fe fb80 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_alt, 4);
 8005388:	2104      	movs	r1, #4
 800538a:	4891      	ldr	r0, [pc, #580]	; (80055d0 <telem_loop+0x590>)
 800538c:	f7fe fb7c 	bl	8003a88 <EEPROM_Write_Buffer>
				EEPROM_Save_Page(32);
 8005390:	2020      	movs	r0, #32
 8005392:	f7fe fb33 	bl	80039fc <EEPROM_Save_Page>

				ClearManualBuffer();
 8005396:	f000 f9f7 	bl	8005788 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 800539a:	4b8f      	ldr	r3, [pc, #572]	; (80055d8 <telem_loop+0x598>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	498e      	ldr	r1, [pc, #568]	; (80055dc <telem_loop+0x59c>)
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	440b      	add	r3, r1
 80053ae:	3323      	adds	r3, #35	; 0x23
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 80053b4:	4b88      	ldr	r3, [pc, #544]	; (80055d8 <telem_loop+0x598>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	4988      	ldr	r1, [pc, #544]	; (80055dc <telem_loop+0x59c>)
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	440b      	add	r3, r1
 80053c8:	3324      	adds	r3, #36	; 0x24
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 80053ce:	2004      	movs	r0, #4
 80053d0:	f000 faea 	bl	80059a8 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_alt, 4);
 80053d4:	2104      	movs	r1, #4
 80053d6:	487c      	ldr	r0, [pc, #496]	; (80055c8 <telem_loop+0x588>)
 80053d8:	f000 fb02 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_alt, 4);
 80053dc:	2104      	movs	r1, #4
 80053de:	487b      	ldr	r0, [pc, #492]	; (80055cc <telem_loop+0x58c>)
 80053e0:	f000 fafe 	bl	80059e0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_alt, 4);
 80053e4:	2104      	movs	r1, #4
 80053e6:	487a      	ldr	r0, [pc, #488]	; (80055d0 <telem_loop+0x590>)
 80053e8:	f000 fafa 	bl	80059e0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 80053ec:	4b7a      	ldr	r3, [pc, #488]	; (80055d8 <telem_loop+0x598>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b1e      	cmp	r3, #30
 80053f2:	d824      	bhi.n	800543e <telem_loop+0x3fe>
					manual_packet_count++;
 80053f4:	4b78      	ldr	r3, [pc, #480]	; (80055d8 <telem_loop+0x598>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	3301      	adds	r3, #1
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	4b76      	ldr	r3, [pc, #472]	; (80055d8 <telem_loop+0x598>)
 80053fe:	701a      	strb	r2, [r3, #0]
				break;
 8005400:	e01d      	b.n	800543e <telem_loop+0x3fe>
			case CALIBRATE_COMPASS_REQUEST:
				Calibrate_Compass();
 8005402:	f7fc fd19 	bl	8001e38 <Calibrate_Compass>
				break;
 8005406:	e01b      	b.n	8005440 <telem_loop+0x400>
			case DO_CMD_PACKET:
				telem_receive_read_index = 1;
 8005408:	4b6e      	ldr	r3, [pc, #440]	; (80055c4 <telem_loop+0x584>)
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer(&high_priority_program_width, 1);
 800540e:	2101      	movs	r1, #1
 8005410:	4873      	ldr	r0, [pc, #460]	; (80055e0 <telem_loop+0x5a0>)
 8005412:	f000 fb3b 	bl	8005a8c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&high_priority_program_buffer, high_priority_program_width);
 8005416:	4b72      	ldr	r3, [pc, #456]	; (80055e0 <telem_loop+0x5a0>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	4871      	ldr	r0, [pc, #452]	; (80055e4 <telem_loop+0x5a4>)
 800541e:	f000 fb35 	bl	8005a8c <ReadReceiveBuffer>
				high_priority_program_counter = 0;
 8005422:	4b71      	ldr	r3, [pc, #452]	; (80055e8 <telem_loop+0x5a8>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
				break;
 8005428:	e00a      	b.n	8005440 <telem_loop+0x400>
			case UPLOAD_CMD_PACKET:
				break;
 800542a:	bf00      	nop
 800542c:	e008      	b.n	8005440 <telem_loop+0x400>
				break;
 800542e:	bf00      	nop
 8005430:	e006      	b.n	8005440 <telem_loop+0x400>
				break;
 8005432:	bf00      	nop
 8005434:	e004      	b.n	8005440 <telem_loop+0x400>
				break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <telem_loop+0x400>
				break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <telem_loop+0x400>
				break;
 800543e:	bf00      	nop
			}
		}

		if(tx_done)
 8005440:	4b6a      	ldr	r3, [pc, #424]	; (80055ec <telem_loop+0x5ac>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d03d      	beq.n	80054c6 <telem_loop+0x486>
		{
			tx_done = 0;
 800544a:	4b68      	ldr	r3, [pc, #416]	; (80055ec <telem_loop+0x5ac>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]

			if(last_tx_type == 2 && manual_packet_count > 0)
 8005450:	4b67      	ldr	r3, [pc, #412]	; (80055f0 <telem_loop+0x5b0>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d136      	bne.n	80054c6 <telem_loop+0x486>
 8005458:	4b5f      	ldr	r3, [pc, #380]	; (80055d8 <telem_loop+0x598>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d032      	beq.n	80054c6 <telem_loop+0x486>
			{
				for(int i = 0; i < manual_packet_count - 1; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
 8005464:	e023      	b.n	80054ae <telem_loop+0x46e>
				{
					for(int j = 0; j < 35; j++)
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e01a      	b.n	80054a2 <telem_loop+0x462>
					{
						manual_packet_buffer[i].payload[j] = manual_packet_buffer[i + 1].payload[j];
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	495a      	ldr	r1, [pc, #360]	; (80055dc <telem_loop+0x59c>)
 8005472:	4613      	mov	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	4413      	add	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	18ca      	adds	r2, r1, r3
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	4413      	add	r3, r2
 8005482:	7818      	ldrb	r0, [r3, #0]
 8005484:	4955      	ldr	r1, [pc, #340]	; (80055dc <telem_loop+0x59c>)
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	4613      	mov	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	18ca      	adds	r2, r1, r3
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4413      	add	r3, r2
 8005498:	4602      	mov	r2, r0
 800549a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 35; j++)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	3301      	adds	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b22      	cmp	r3, #34	; 0x22
 80054a6:	dde1      	ble.n	800546c <telem_loop+0x42c>
				for(int i = 0; i < manual_packet_count - 1; i++)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	4b4a      	ldr	r3, [pc, #296]	; (80055d8 <telem_loop+0x598>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	dbd5      	blt.n	8005466 <telem_loop+0x426>
					}
				}

				manual_packet_count--;
 80054ba:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <telem_loop+0x598>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	3b01      	subs	r3, #1
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <telem_loop+0x598>)
 80054c4:	701a      	strb	r2, [r3, #0]
			}
		}

		if(waiting_to_rx)
 80054c6:	4b4b      	ldr	r3, [pc, #300]	; (80055f4 <telem_loop+0x5b4>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d017      	beq.n	8005500 <telem_loop+0x4c0>
		{
			if(HAL_I2C_Master_Seq_Receive_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_receive_buffer, 34, I2C_LAST_FRAME) != HAL_OK)
 80054d0:	2320      	movs	r3, #32
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2322      	movs	r3, #34	; 0x22
 80054d6:	4a48      	ldr	r2, [pc, #288]	; (80055f8 <telem_loop+0x5b8>)
 80054d8:	2108      	movs	r1, #8
 80054da:	4848      	ldr	r0, [pc, #288]	; (80055fc <telem_loop+0x5bc>)
 80054dc:	f002 f9fe 	bl	80078dc <HAL_I2C_Master_Seq_Receive_IT>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <telem_loop+0x4ba>
			{
				transmit_fail_flag = 1;
 80054e6:	4b46      	ldr	r3, [pc, #280]	; (8005600 <telem_loop+0x5c0>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
				ack_rate_counter = 0;
 80054ec:	4b45      	ldr	r3, [pc, #276]	; (8005604 <telem_loop+0x5c4>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
				waiting_to_rx = 0;
 80054f2:	4b40      	ldr	r3, [pc, #256]	; (80055f4 <telem_loop+0x5b4>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	e002      	b.n	8005500 <telem_loop+0x4c0>
			}
			else
			{
				waiting_to_rx = 0;
 80054fa:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <telem_loop+0x5b4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
				//ack_rate_counter = 0;
			}
		}

		if(!waiting_to_rx && GetMicrosDifference(&telem_min_transmit_timer) >= 2500)
 8005500:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <telem_loop+0x5b4>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 8126 	bne.w	8005758 <telem_loop+0x718>
 800550c:	483e      	ldr	r0, [pc, #248]	; (8005608 <telem_loop+0x5c8>)
 800550e:	f7ff fbcd 	bl	8004cac <GetMicrosDifference>
 8005512:	4602      	mov	r2, r0
 8005514:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8005518:	429a      	cmp	r2, r3
 800551a:	f240 811d 	bls.w	8005758 <telem_loop+0x718>
		{
			for(int i = 0; i < 35; i++)
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e007      	b.n	8005534 <telem_loop+0x4f4>
			{
				telem_send_buffer[i] = '\0';
 8005524:	4a39      	ldr	r2, [pc, #228]	; (800560c <telem_loop+0x5cc>)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	4413      	add	r3, r2
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 35; i++)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3301      	adds	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b22      	cmp	r3, #34	; 0x22
 8005538:	ddf4      	ble.n	8005524 <telem_loop+0x4e4>
			}

			if(manual_packet_count > 0)
 800553a:	4b27      	ldr	r3, [pc, #156]	; (80055d8 <telem_loop+0x598>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d029      	beq.n	8005596 <telem_loop+0x556>
			{
				last_tx_type = 2;
 8005542:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <telem_loop+0x5b0>)
 8005544:	2202      	movs	r2, #2
 8005546:	701a      	strb	r2, [r3, #0]

				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e00b      	b.n	8005566 <telem_loop+0x526>
				{
					telem_send_buffer[i] = manual_packet_buffer[0].payload[i];
 800554e:	4a23      	ldr	r2, [pc, #140]	; (80055dc <telem_loop+0x59c>)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	7819      	ldrb	r1, [r3, #0]
 8005556:	4a2d      	ldr	r2, [pc, #180]	; (800560c <telem_loop+0x5cc>)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	460a      	mov	r2, r1
 800555e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3301      	adds	r3, #1
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <telem_loop+0x59c>)
 8005568:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800556c:	461a      	mov	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4293      	cmp	r3, r2
 8005572:	dbec      	blt.n	800554e <telem_loop+0x50e>
				}

				telem_send_buffer[32] = manual_packet_buffer[0].width;
 8005574:	4b19      	ldr	r3, [pc, #100]	; (80055dc <telem_loop+0x59c>)
 8005576:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <telem_loop+0x5cc>)
 800557c:	f883 2020 	strb.w	r2, [r3, #32]
				telem_send_buffer[33] = manual_packet_buffer[0].reliable;//Unreliable
 8005580:	4b16      	ldr	r3, [pc, #88]	; (80055dc <telem_loop+0x59c>)
 8005582:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <telem_loop+0x5cc>)
 8005588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				telem_send_buffer[34] = 0;//No data
 800558c:	4b1f      	ldr	r3, [pc, #124]	; (800560c <telem_loop+0x5cc>)
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005594:	e099      	b.n	80056ca <telem_loop+0x68a>
			}
			else
			{
				last_tx_type = 1;
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <telem_loop+0x5b0>)
 8005598:	2201      	movs	r2, #1
 800559a:	701a      	strb	r2, [r3, #0]

				telem_send_buffer[0] = auto_packet_buffer[auto_packet_counter].id;
 800559c:	4b1c      	ldr	r3, [pc, #112]	; (8005610 <telem_loop+0x5d0>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4a1c      	ldr	r2, [pc, #112]	; (8005614 <telem_loop+0x5d4>)
 80055a4:	23ac      	movs	r3, #172	; 0xac
 80055a6:	fb03 f301 	mul.w	r3, r3, r1
 80055aa:	4413      	add	r3, r2
 80055ac:	781a      	ldrb	r2, [r3, #0]
 80055ae:	4b17      	ldr	r3, [pc, #92]	; (800560c <telem_loop+0x5cc>)
 80055b0:	701a      	strb	r2, [r3, #0]
				uint8_t var_index = 1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]

				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	e058      	b.n	800566e <telem_loop+0x62e>
				{
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 80055bc:	2300      	movs	r3, #0
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	e042      	b.n	8005648 <telem_loop+0x608>
 80055c2:	bf00      	nop
 80055c4:	20000303 	.word	0x20000303
 80055c8:	200002ac 	.word	0x200002ac
 80055cc:	200002b4 	.word	0x200002b4
 80055d0:	200002b8 	.word	0x200002b8
 80055d4:	20000030 	.word	0x20000030
 80055d8:	20000300 	.word	0x20000300
 80055dc:	20001120 	.word	0x20001120
 80055e0:	200002c9 	.word	0x200002c9
 80055e4:	20000a60 	.word	0x20000a60
 80055e8:	200002c8 	.word	0x200002c8
 80055ec:	20000308 	.word	0x20000308
 80055f0:	20000309 	.word	0x20000309
 80055f4:	20000306 	.word	0x20000306
 80055f8:	20002b9c 	.word	0x20002b9c
 80055fc:	20000e68 	.word	0x20000e68
 8005600:	20000305 	.word	0x20000305
 8005604:	20000304 	.word	0x20000304
 8005608:	200015c0 	.word	0x200015c0
 800560c:	200015c4 	.word	0x200015c4
 8005610:	20000302 	.word	0x20000302
 8005614:	200015ec 	.word	0x200015ec
					{
						telem_send_buffer[var_index] = *((uint8_t *)(auto_packet_buffer[auto_packet_counter].payload[i]) + j);
 8005618:	4b51      	ldr	r3, [pc, #324]	; (8005760 <telem_loop+0x720>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	4951      	ldr	r1, [pc, #324]	; (8005764 <telem_loop+0x724>)
 8005620:	232b      	movs	r3, #43	; 0x2b
 8005622:	fb03 f202 	mul.w	r2, r3, r2
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	441a      	add	r2, r3
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	7811      	ldrb	r1, [r2, #0]
 8005638:	4a4b      	ldr	r2, [pc, #300]	; (8005768 <telem_loop+0x728>)
 800563a:	54d1      	strb	r1, [r2, r3]

						var_index++;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	3301      	adds	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3301      	adds	r3, #1
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	4b45      	ldr	r3, [pc, #276]	; (8005760 <telem_loop+0x720>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4619      	mov	r1, r3
 800564e:	4a45      	ldr	r2, [pc, #276]	; (8005764 <telem_loop+0x724>)
 8005650:	23ac      	movs	r3, #172	; 0xac
 8005652:	fb03 f301 	mul.w	r3, r3, r1
 8005656:	441a      	add	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4413      	add	r3, r2
 800565c:	3384      	adds	r3, #132	; 0x84
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4293      	cmp	r3, r2
 8005666:	dbd7      	blt.n	8005618 <telem_loop+0x5d8>
				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	3301      	adds	r3, #1
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	4b3c      	ldr	r3, [pc, #240]	; (8005760 <telem_loop+0x720>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	4619      	mov	r1, r3
 8005674:	4a3b      	ldr	r2, [pc, #236]	; (8005764 <telem_loop+0x724>)
 8005676:	23ac      	movs	r3, #172	; 0xac
 8005678:	fb03 f301 	mul.w	r3, r3, r1
 800567c:	4413      	add	r3, r2
 800567e:	33a5      	adds	r3, #165	; 0xa5
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4293      	cmp	r3, r2
 8005688:	db98      	blt.n	80055bc <telem_loop+0x57c>
					}
				}

				telem_send_buffer[32] = var_index;
 800568a:	4a37      	ldr	r2, [pc, #220]	; (8005768 <telem_loop+0x728>)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	f882 3020 	strb.w	r3, [r2, #32]
				telem_send_buffer[33] = auto_packet_buffer[auto_packet_counter].reliable;
 8005692:	4b33      	ldr	r3, [pc, #204]	; (8005760 <telem_loop+0x720>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	4a32      	ldr	r2, [pc, #200]	; (8005764 <telem_loop+0x724>)
 800569a:	23ac      	movs	r3, #172	; 0xac
 800569c:	fb03 f301 	mul.w	r3, r3, r1
 80056a0:	4413      	add	r3, r2
 80056a2:	33a4      	adds	r3, #164	; 0xa4
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	4b30      	ldr	r3, [pc, #192]	; (8005768 <telem_loop+0x728>)
 80056a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				auto_packet_counter++;
 80056ac:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <telem_loop+0x720>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4b2a      	ldr	r3, [pc, #168]	; (8005760 <telem_loop+0x720>)
 80056b6:	701a      	strb	r2, [r3, #0]

				if(auto_packet_counter >= auto_packet_count)
 80056b8:	4b29      	ldr	r3, [pc, #164]	; (8005760 <telem_loop+0x720>)
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	4b2b      	ldr	r3, [pc, #172]	; (800576c <telem_loop+0x72c>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <telem_loop+0x68a>
					auto_packet_counter = 0;
 80056c4:	4b26      	ldr	r3, [pc, #152]	; (8005760 <telem_loop+0x720>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]

			//sprintf((char*)telem_send_buffer, "%lu%s%ld%lu%s", how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t
			//sprintf((char*)telem_send_buffer, "%c%c%lu%s%ld%lu%s", 0x09 , strlen((char*)telem_send_buffer), how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t


			if(ack_rate_counter < 0xFF)
 80056ca:	4b29      	ldr	r3, [pc, #164]	; (8005770 <telem_loop+0x730>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2bff      	cmp	r3, #255	; 0xff
 80056d2:	d006      	beq.n	80056e2 <telem_loop+0x6a2>
				ack_rate_counter++;
 80056d4:	4b26      	ldr	r3, [pc, #152]	; (8005770 <telem_loop+0x730>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	3301      	adds	r3, #1
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	4b24      	ldr	r3, [pc, #144]	; (8005770 <telem_loop+0x730>)
 80056e0:	701a      	strb	r2, [r3, #0]

			telem_send_buffer[33] = 0;//Unreliable
 80056e2:	4b21      	ldr	r3, [pc, #132]	; (8005768 <telem_loop+0x728>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			telem_send_buffer[34] = 0;//No data
 80056ea:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <telem_loop+0x728>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			//ack_rate_counter = 0;

			if(ack_rate_counter == ack_rate)
 80056f2:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <telem_loop+0x730>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <telem_loop+0x734>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d115      	bne.n	800572c <telem_loop+0x6ec>
			{
				//telem_send_buffer[34] = 1;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_FRAME) != HAL_OK)
 8005700:	2301      	movs	r3, #1
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	2323      	movs	r3, #35	; 0x23
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <telem_loop+0x728>)
 8005708:	2108      	movs	r1, #8
 800570a:	481b      	ldr	r0, [pc, #108]	; (8005778 <telem_loop+0x738>)
 800570c:	f002 f828 	bl	8007760 <HAL_I2C_Master_Seq_Transmit_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d006      	beq.n	8005724 <telem_loop+0x6e4>
				{
					transmit_fail_flag = 1;
 8005716:	4b19      	ldr	r3, [pc, #100]	; (800577c <telem_loop+0x73c>)
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 800571c:	4b14      	ldr	r3, [pc, #80]	; (8005770 <telem_loop+0x730>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e014      	b.n	800574e <telem_loop+0x70e>
				}
				else
				{
					waiting_to_rx = 1;
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <telem_loop+0x740>)
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e010      	b.n	800574e <telem_loop+0x70e>
			}
			else
			{
				//telem_send_buffer[34] = 0;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 800572c:	2308      	movs	r3, #8
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	2323      	movs	r3, #35	; 0x23
 8005732:	4a0d      	ldr	r2, [pc, #52]	; (8005768 <telem_loop+0x728>)
 8005734:	2108      	movs	r1, #8
 8005736:	4810      	ldr	r0, [pc, #64]	; (8005778 <telem_loop+0x738>)
 8005738:	f002 f812 	bl	8007760 <HAL_I2C_Master_Seq_Transmit_IT>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <telem_loop+0x70e>
				{
					transmit_fail_flag = 1;
 8005742:	4b0e      	ldr	r3, [pc, #56]	; (800577c <telem_loop+0x73c>)
 8005744:	2201      	movs	r2, #1
 8005746:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 8005748:	4b09      	ldr	r3, [pc, #36]	; (8005770 <telem_loop+0x730>)
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]
				}
			}

			telem_min_transmit_timer = GetMicros();
 800574e:	f7ff fa81 	bl	8004c54 <GetMicros>
 8005752:	4602      	mov	r2, r0
 8005754:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <telem_loop+0x744>)
 8005756:	601a      	str	r2, [r3, #0]

			//HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35);
		}
	}
}
 8005758:	bf00      	nop
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bdb0      	pop	{r4, r5, r7, pc}
 8005760:	20000302 	.word	0x20000302
 8005764:	200015ec 	.word	0x200015ec
 8005768:	200015c4 	.word	0x200015c4
 800576c:	20000301 	.word	0x20000301
 8005770:	20000304 	.word	0x20000304
 8005774:	2000004c 	.word	0x2000004c
 8005778:	20000e68 	.word	0x20000e68
 800577c:	20000305 	.word	0x20000305
 8005780:	20000306 	.word	0x20000306
 8005784:	200015c0 	.word	0x200015c0

08005788 <ClearManualBuffer>:

void ClearManualBuffer()
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
	manual_packet_buffer[manual_packet_count].reliable = 0;
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <ClearManualBuffer+0x5c>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	4914      	ldr	r1, [pc, #80]	; (80057e8 <ClearManualBuffer+0x60>)
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	3324      	adds	r3, #36	; 0x24
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	607b      	str	r3, [r7, #4]
 80057ac:	e010      	b.n	80057d0 <ClearManualBuffer+0x48>
	{
		manual_packet_buffer[manual_packet_count].payload[i] = '\0';
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <ClearManualBuffer+0x5c>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	490c      	ldr	r1, [pc, #48]	; (80057e8 <ClearManualBuffer+0x60>)
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	18ca      	adds	r2, r1, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4413      	add	r3, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3301      	adds	r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b22      	cmp	r3, #34	; 0x22
 80057d4:	ddeb      	ble.n	80057ae <ClearManualBuffer+0x26>
	}
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000300 	.word	0x20000300
 80057e8:	20001120 	.word	0x20001120

080057ec <ClearPrintBuffer>:

void ClearPrintBuffer()
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 32; i++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	e007      	b.n	8005808 <ClearPrintBuffer+0x1c>
	{
		print_text_buffer[i] = '\0';
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <ClearPrintBuffer+0x30>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4413      	add	r3, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3301      	adds	r3, #1
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b1f      	cmp	r3, #31
 800580c:	ddf4      	ble.n	80057f8 <ClearPrintBuffer+0xc>
	}
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	200010fc 	.word	0x200010fc

08005820 <PrintManualPacket>:

//Used to write text to console
void PrintManualPacket()
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b083      	sub	sp, #12
 8005824:	af02      	add	r7, sp, #8
	ClearManualBuffer();
 8005826:	f7ff ffaf 	bl	8005788 <ClearManualBuffer>

	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%s", print_text_buffer);//uint32_t
 800582a:	4b2c      	ldr	r3, [pc, #176]	; (80058dc <PrintManualPacket+0xbc>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	4613      	mov	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <PrintManualPacket+0xc0>)
 800583c:	4413      	add	r3, r2
 800583e:	4929      	ldr	r1, [pc, #164]	; (80058e4 <PrintManualPacket+0xc4>)
 8005840:	4618      	mov	r0, r3
 8005842:	f00a fed9 	bl	80105f8 <strcpy>
	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%c%c%s", 0x09 , strlen((char*)(manual_packet_buffer[manual_packet_count].payload)), print_text_buffer);
 8005846:	4b25      	ldr	r3, [pc, #148]	; (80058dc <PrintManualPacket+0xbc>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	4a22      	ldr	r2, [pc, #136]	; (80058e0 <PrintManualPacket+0xc0>)
 8005858:	189c      	adds	r4, r3, r2
 800585a:	4b20      	ldr	r3, [pc, #128]	; (80058dc <PrintManualPacket+0xbc>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <PrintManualPacket+0xc0>)
 800586c:	4413      	add	r3, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f7fa fcae 	bl	80001d0 <strlen>
 8005874:	4602      	mov	r2, r0
 8005876:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <PrintManualPacket+0xc4>)
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	2209      	movs	r2, #9
 800587e:	491a      	ldr	r1, [pc, #104]	; (80058e8 <PrintManualPacket+0xc8>)
 8005880:	4620      	mov	r0, r4
 8005882:	f00a fe99 	bl	80105b8 <siprintf>

	manual_packet_buffer[manual_packet_count].width = strlen((char *)(manual_packet_buffer[manual_packet_count].payload));
 8005886:	4b15      	ldr	r3, [pc, #84]	; (80058dc <PrintManualPacket+0xbc>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	4a12      	ldr	r2, [pc, #72]	; (80058e0 <PrintManualPacket+0xc0>)
 8005898:	4413      	add	r3, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fa fc98 	bl	80001d0 <strlen>
 80058a0:	4601      	mov	r1, r0
 80058a2:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <PrintManualPacket+0xbc>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	b2c8      	uxtb	r0, r1
 80058aa:	490d      	ldr	r1, [pc, #52]	; (80058e0 <PrintManualPacket+0xc0>)
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	440b      	add	r3, r1
 80058b8:	3323      	adds	r3, #35	; 0x23
 80058ba:	4602      	mov	r2, r0
 80058bc:	701a      	strb	r2, [r3, #0]

	if(manual_packet_count < 31)
 80058be:	4b07      	ldr	r3, [pc, #28]	; (80058dc <PrintManualPacket+0xbc>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b1e      	cmp	r3, #30
 80058c4:	d805      	bhi.n	80058d2 <PrintManualPacket+0xb2>
		manual_packet_count++;
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <PrintManualPacket+0xbc>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	4b03      	ldr	r3, [pc, #12]	; (80058dc <PrintManualPacket+0xbc>)
 80058d0:	701a      	strb	r2, [r3, #0]
}
 80058d2:	bf00      	nop
 80058d4:	3704      	adds	r7, #4
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd90      	pop	{r4, r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000300 	.word	0x20000300
 80058e0:	20001120 	.word	0x20001120
 80058e4:	200010fc 	.word	0x200010fc
 80058e8:	08013650 	.word	0x08013650

080058ec <AddToAutoBuffer>:

void AddToAutoBuffer(uint8_t buf_index, uint8_t *num, uint8_t size)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	71fb      	strb	r3, [r7, #7]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71bb      	strb	r3, [r7, #6]
	auto_packet_buffer[buf_index].payload[auto_packet_buffer[buf_index].var_count] = (uint8_t *)num;
 80058fc:	79fb      	ldrb	r3, [r7, #7]
 80058fe:	79fa      	ldrb	r2, [r7, #7]
 8005900:	4928      	ldr	r1, [pc, #160]	; (80059a4 <AddToAutoBuffer+0xb8>)
 8005902:	20ac      	movs	r0, #172	; 0xac
 8005904:	fb00 f202 	mul.w	r2, r0, r2
 8005908:	440a      	add	r2, r1
 800590a:	32a5      	adds	r2, #165	; 0xa5
 800590c:	7812      	ldrb	r2, [r2, #0]
 800590e:	4610      	mov	r0, r2
 8005910:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <AddToAutoBuffer+0xb8>)
 8005912:	212b      	movs	r1, #43	; 0x2b
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4403      	add	r3, r0
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	605a      	str	r2, [r3, #4]
	auto_packet_buffer[buf_index].width[auto_packet_buffer[buf_index].var_count] = size;
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	79fa      	ldrb	r2, [r7, #7]
 8005926:	491f      	ldr	r1, [pc, #124]	; (80059a4 <AddToAutoBuffer+0xb8>)
 8005928:	20ac      	movs	r0, #172	; 0xac
 800592a:	fb00 f202 	mul.w	r2, r0, r2
 800592e:	440a      	add	r2, r1
 8005930:	32a5      	adds	r2, #165	; 0xa5
 8005932:	7812      	ldrb	r2, [r2, #0]
 8005934:	4610      	mov	r0, r2
 8005936:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <AddToAutoBuffer+0xb8>)
 8005938:	21ac      	movs	r1, #172	; 0xac
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	4403      	add	r3, r0
 8005942:	3384      	adds	r3, #132	; 0x84
 8005944:	79ba      	ldrb	r2, [r7, #6]
 8005946:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].total_width += size;
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <AddToAutoBuffer+0xb8>)
 800594c:	21ac      	movs	r1, #172	; 0xac
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	33a6      	adds	r3, #166	; 0xa6
 8005956:	7819      	ldrb	r1, [r3, #0]
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	79ba      	ldrb	r2, [r7, #6]
 800595c:	440a      	add	r2, r1
 800595e:	b2d0      	uxtb	r0, r2
 8005960:	4a10      	ldr	r2, [pc, #64]	; (80059a4 <AddToAutoBuffer+0xb8>)
 8005962:	21ac      	movs	r1, #172	; 0xac
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	4413      	add	r3, r2
 800596a:	33a6      	adds	r3, #166	; 0xa6
 800596c:	4602      	mov	r2, r0
 800596e:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].var_count += 1;
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <AddToAutoBuffer+0xb8>)
 8005974:	21ac      	movs	r1, #172	; 0xac
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	4413      	add	r3, r2
 800597c:	33a5      	adds	r3, #165	; 0xa5
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	3201      	adds	r2, #1
 8005984:	b2d0      	uxtb	r0, r2
 8005986:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <AddToAutoBuffer+0xb8>)
 8005988:	21ac      	movs	r1, #172	; 0xac
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	4413      	add	r3, r2
 8005990:	33a5      	adds	r3, #165	; 0xa5
 8005992:	4602      	mov	r2, r0
 8005994:	701a      	strb	r2, [r3, #0]
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	200015ec 	.word	0x200015ec

080059a8 <AddIDToManualBuffer>:

void AddIDToManualBuffer(uint8_t packet_id)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
	manual_packet_buffer[manual_packet_count].payload[0] = packet_id;
 80059b2:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <AddIDToManualBuffer+0x30>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	4908      	ldr	r1, [pc, #32]	; (80059dc <AddIDToManualBuffer+0x34>)
 80059ba:	4613      	mov	r3, r2
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	440b      	add	r3, r1
 80059c6:	79fa      	ldrb	r2, [r7, #7]
 80059c8:	701a      	strb	r2, [r3, #0]
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000300 	.word	0x20000300
 80059dc:	20001120 	.word	0x20001120

080059e0 <AddToManualBuffer>:

void AddToManualBuffer(uint8_t *num, uint8_t size)
{
 80059e0:	b490      	push	{r4, r7}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e022      	b.n	8005a38 <AddToManualBuffer+0x58>
	{
		manual_packet_buffer[manual_packet_count].payload[manual_packet_buffer[manual_packet_count].width + i] = *(((uint8_t *)num) + i);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	18d0      	adds	r0, r2, r3
 80059f8:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <AddToManualBuffer+0xa4>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <AddToManualBuffer+0xa4>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	4c20      	ldr	r4, [pc, #128]	; (8005a88 <AddToManualBuffer+0xa8>)
 8005a06:	460b      	mov	r3, r1
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	4423      	add	r3, r4
 8005a12:	3323      	adds	r3, #35	; 0x23
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4419      	add	r1, r3
 8005a1c:	7804      	ldrb	r4, [r0, #0]
 8005a1e:	481a      	ldr	r0, [pc, #104]	; (8005a88 <AddToManualBuffer+0xa8>)
 8005a20:	4613      	mov	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	4403      	add	r3, r0
 8005a2c:	440b      	add	r3, r1
 8005a2e:	4622      	mov	r2, r4
 8005a30:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3301      	adds	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	dbd8      	blt.n	80059f2 <AddToManualBuffer+0x12>
	}

	manual_packet_buffer[manual_packet_count].width += size;
 8005a40:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <AddToManualBuffer+0xa4>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	4910      	ldr	r1, [pc, #64]	; (8005a88 <AddToManualBuffer+0xa8>)
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	440b      	add	r3, r1
 8005a54:	3323      	adds	r3, #35	; 0x23
 8005a56:	7819      	ldrb	r1, [r3, #0]
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <AddToManualBuffer+0xa4>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	440b      	add	r3, r1
 8005a62:	b2d8      	uxtb	r0, r3
 8005a64:	4908      	ldr	r1, [pc, #32]	; (8005a88 <AddToManualBuffer+0xa8>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	440b      	add	r3, r1
 8005a72:	3323      	adds	r3, #35	; 0x23
 8005a74:	4602      	mov	r2, r0
 8005a76:	701a      	strb	r2, [r3, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc90      	pop	{r4, r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000300 	.word	0x20000300
 8005a88:	20001120 	.word	0x20001120

08005a8c <ReadReceiveBuffer>:

void ReadReceiveBuffer(uint8_t *output, uint8_t size)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e00e      	b.n	8005abc <ReadReceiveBuffer+0x30>
	{
		*(((uint8_t *)output) + i) = telem_receive_buffer[telem_receive_read_index + i];
 8005a9e:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <ReadReceiveBuffer+0x54>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	440b      	add	r3, r1
 8005aae:	490d      	ldr	r1, [pc, #52]	; (8005ae4 <ReadReceiveBuffer+0x58>)
 8005ab0:	5c8a      	ldrb	r2, [r1, r2]
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	dbec      	blt.n	8005a9e <ReadReceiveBuffer+0x12>
	}

	telem_receive_read_index += size;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <ReadReceiveBuffer+0x54>)
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	4413      	add	r3, r2
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <ReadReceiveBuffer+0x54>)
 8005ad0:	701a      	strb	r2, [r3, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000303 	.word	0x20000303
 8005ae4:	20002b9c 	.word	0x20002b9c

08005ae8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005aee:	f107 0320 	add.w	r3, r7, #32
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005af8:	1d3b      	adds	r3, r7, #4
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	605a      	str	r2, [r3, #4]
 8005b00:	609a      	str	r2, [r3, #8]
 8005b02:	60da      	str	r2, [r3, #12]
 8005b04:	611a      	str	r2, [r3, #16]
 8005b06:	615a      	str	r2, [r3, #20]
 8005b08:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005b0a:	4b33      	ldr	r3, [pc, #204]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b0c:	4a33      	ldr	r2, [pc, #204]	; (8005bdc <MX_TIM3_Init+0xf4>)
 8005b0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8005b10:	4b31      	ldr	r3, [pc, #196]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b12:	2253      	movs	r2, #83	; 0x53
 8005b14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b16:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8005b1c:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b1e:	f241 3287 	movw	r2, #4999	; 0x1387
 8005b22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b24:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005b30:	4829      	ldr	r0, [pc, #164]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b32:	f005 fedf 	bl	800b8f4 <HAL_TIM_PWM_Init>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005b3c:	f7ff f936 	bl	8004dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b48:	f107 0320 	add.w	r3, r7, #32
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4822      	ldr	r0, [pc, #136]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b50:	f006 ff8c 	bl	800ca6c <HAL_TIMEx_MasterConfigSynchronization>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005b5a:	f7ff f927 	bl	8004dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b5e:	2360      	movs	r3, #96	; 0x60
 8005b60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8005b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	2200      	movs	r2, #0
 8005b74:	4619      	mov	r1, r3
 8005b76:	4818      	ldr	r0, [pc, #96]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b78:	f006 f968 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005b82:	f7ff f913 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	2204      	movs	r2, #4
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4812      	ldr	r0, [pc, #72]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005b8e:	f006 f95d 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005b98:	f7ff f908 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	480d      	ldr	r0, [pc, #52]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005ba4:	f006 f952 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8005bae:	f7ff f8fd 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005bb2:	1d3b      	adds	r3, r7, #4
 8005bb4:	220c      	movs	r2, #12
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4807      	ldr	r0, [pc, #28]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005bba:	f006 f947 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8005bc4:	f7ff f8f2 	bl	8004dac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005bc8:	4803      	ldr	r0, [pc, #12]	; (8005bd8 <MX_TIM3_Init+0xf0>)
 8005bca:	f000 fa1d 	bl	8006008 <HAL_TIM_MspPostInit>

}
 8005bce:	bf00      	nop
 8005bd0:	3728      	adds	r7, #40	; 0x28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20002c44 	.word	0x20002c44
 8005bdc:	40000400 	.word	0x40000400

08005be0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005be6:	f107 0318 	add.w	r3, r7, #24
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf4:	f107 0310 	add.w	r3, r7, #16
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005bfe:	463b      	mov	r3, r7
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8005c0a:	4b2b      	ldr	r3, [pc, #172]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c0c:	4a2b      	ldr	r2, [pc, #172]	; (8005cbc <MX_TIM5_Init+0xdc>)
 8005c0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8005c10:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c12:	2253      	movs	r2, #83	; 0x53
 8005c14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c16:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005c1c:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c24:	4b24      	ldr	r3, [pc, #144]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c2a:	4b23      	ldr	r3, [pc, #140]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c30:	4821      	ldr	r0, [pc, #132]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c32:	f005 fe10 	bl	800b856 <HAL_TIM_Base_Init>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8005c3c:	f7ff f8b6 	bl	8004dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c44:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005c46:	f107 0318 	add.w	r3, r7, #24
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	481a      	ldr	r0, [pc, #104]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c4e:	f006 f9c3 	bl	800bfd8 <HAL_TIM_ConfigClockSource>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8005c58:	f7ff f8a8 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8005c5c:	4816      	ldr	r0, [pc, #88]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c5e:	f005 feb3 	bl	800b9c8 <HAL_TIM_IC_Init>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005c68:	f7ff f8a0 	bl	8004dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005c74:	f107 0310 	add.w	r3, r7, #16
 8005c78:	4619      	mov	r1, r3
 8005c7a:	480f      	ldr	r0, [pc, #60]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005c7c:	f006 fef6 	bl	800ca6c <HAL_TIMEx_MasterConfigSynchronization>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8005c86:	f7ff f891 	bl	8004dac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <MX_TIM5_Init+0xd8>)
 8005ca2:	f006 f837 	bl	800bd14 <HAL_TIM_IC_ConfigChannel>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8005cac:	f7ff f87e 	bl	8004dac <Error_Handler>
  }

}
 8005cb0:	bf00      	nop
 8005cb2:	3728      	adds	r7, #40	; 0x28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	20002c04 	.word	0x20002c04
 8005cbc:	40000c00 	.word	0x40000c00

08005cc0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b096      	sub	sp, #88	; 0x58
 8005cc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	605a      	str	r2, [r3, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
 8005cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	609a      	str	r2, [r3, #8]
 8005cea:	60da      	str	r2, [r3, #12]
 8005cec:	611a      	str	r2, [r3, #16]
 8005cee:	615a      	str	r2, [r3, #20]
 8005cf0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f00a fb9d 	bl	8010438 <memset>

  htim8.Instance = TIM8;
 8005cfe:	4b50      	ldr	r3, [pc, #320]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d00:	4a50      	ldr	r2, [pc, #320]	; (8005e44 <MX_TIM8_Init+0x184>)
 8005d02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8005d04:	4b4e      	ldr	r3, [pc, #312]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d06:	22a7      	movs	r2, #167	; 0xa7
 8005d08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d0a:	4b4d      	ldr	r3, [pc, #308]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3999;
 8005d10:	4b4b      	ldr	r3, [pc, #300]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d12:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005d16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d18:	4b49      	ldr	r3, [pc, #292]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005d1e:	4b48      	ldr	r3, [pc, #288]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d24:	4b46      	ldr	r3, [pc, #280]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005d2a:	4845      	ldr	r0, [pc, #276]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d2c:	f005 fd93 	bl	800b856 <HAL_TIM_Base_Init>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8005d36:	f7ff f839 	bl	8004dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d44:	4619      	mov	r1, r3
 8005d46:	483e      	ldr	r0, [pc, #248]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d48:	f006 f946 	bl	800bfd8 <HAL_TIM_ConfigClockSource>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8005d52:	f7ff f82b 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005d56:	483a      	ldr	r0, [pc, #232]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d58:	f005 fdcc 	bl	800b8f4 <HAL_TIM_PWM_Init>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8005d62:	f7ff f823 	bl	8004dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005d6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d72:	4619      	mov	r1, r3
 8005d74:	4832      	ldr	r0, [pc, #200]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005d76:	f006 fe79 	bl	800ca6c <HAL_TIMEx_MasterConfigSynchronization>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d001      	beq.n	8005d84 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8005d80:	f7ff f814 	bl	8004dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d84:	2360      	movs	r3, #96	; 0x60
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 125;
 8005d88:	237d      	movs	r3, #125	; 0x7d
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d90:	2300      	movs	r3, #0
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005da4:	2200      	movs	r2, #0
 8005da6:	4619      	mov	r1, r3
 8005da8:	4825      	ldr	r0, [pc, #148]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005daa:	f006 f84f 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8005db4:	f7fe fffa 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	481f      	ldr	r0, [pc, #124]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005dc2:	f006 f843 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8005dcc:	f7fe ffee 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4819      	ldr	r0, [pc, #100]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005dda:	f006 f837 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8005de4:	f7fe ffe2 	bl	8004dac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dec:	220c      	movs	r2, #12
 8005dee:	4619      	mov	r1, r3
 8005df0:	4813      	ldr	r0, [pc, #76]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005df2:	f006 f82b 	bl	800be4c <HAL_TIM_PWM_ConfigChannel>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8005dfc:	f7fe ffd6 	bl	8004dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005e1e:	1d3b      	adds	r3, r7, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4807      	ldr	r0, [pc, #28]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005e24:	f006 fe9e 	bl	800cb64 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8005e2e:	f7fe ffbd 	bl	8004dac <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8005e32:	4803      	ldr	r0, [pc, #12]	; (8005e40 <MX_TIM8_Init+0x180>)
 8005e34:	f000 f8e8 	bl	8006008 <HAL_TIM_MspPostInit>

}
 8005e38:	bf00      	nop
 8005e3a:	3758      	adds	r7, #88	; 0x58
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20002bc4 	.word	0x20002bc4
 8005e44:	40010400 	.word	0x40010400

08005e48 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e4e:	463b      	mov	r3, r7
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	609a      	str	r2, [r3, #8]
 8005e58:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e5c:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <MX_TIM9_Init+0x70>)
 8005e5e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8005e60:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e62:	22a7      	movs	r2, #167	; 0xa7
 8005e64:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e66:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64999;
 8005e6c:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e6e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8005e72:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e74:	4b0f      	ldr	r3, [pc, #60]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005e80:	480c      	ldr	r0, [pc, #48]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e82:	f005 fce8 	bl	800b856 <HAL_TIM_Base_Init>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8005e8c:	f7fe ff8e 	bl	8004dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e94:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005e96:	463b      	mov	r3, r7
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4806      	ldr	r0, [pc, #24]	; (8005eb4 <MX_TIM9_Init+0x6c>)
 8005e9c:	f006 f89c 	bl	800bfd8 <HAL_TIM_ConfigClockSource>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8005ea6:	f7fe ff81 	bl	8004dac <Error_Handler>
  }

}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20002c84 	.word	0x20002c84
 8005eb8:	40014000 	.word	0x40014000

08005ebc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a0b      	ldr	r2, [pc, #44]	; (8005ef8 <HAL_TIM_PWM_MspInit+0x3c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10d      	bne.n	8005eea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <HAL_TIM_PWM_MspInit+0x40>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <HAL_TIM_PWM_MspInit+0x40>)
 8005ed8:	f043 0302 	orr.w	r3, r3, #2
 8005edc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ede:	4b07      	ldr	r3, [pc, #28]	; (8005efc <HAL_TIM_PWM_MspInit+0x40>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40023800 	.word	0x40023800

08005f00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08c      	sub	sp, #48	; 0x30
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f08:	f107 031c 	add.w	r3, r7, #28
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a35      	ldr	r2, [pc, #212]	; (8005ff4 <HAL_TIM_Base_MspInit+0xf4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d134      	bne.n	8005f8c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	4a33      	ldr	r2, [pc, #204]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005f2c:	f043 0308 	orr.w	r3, r3, #8
 8005f30:	6413      	str	r3, [r2, #64]	; 0x40
 8005f32:	4b31      	ldr	r3, [pc, #196]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	61bb      	str	r3, [r7, #24]
 8005f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	4b2d      	ldr	r3, [pc, #180]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	4a2c      	ldr	r2, [pc, #176]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f66:	2300      	movs	r3, #0
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f6e:	f107 031c 	add.w	r3, r7, #28
 8005f72:	4619      	mov	r1, r3
 8005f74:	4821      	ldr	r0, [pc, #132]	; (8005ffc <HAL_TIM_Base_MspInit+0xfc>)
 8005f76:	f000 fdb1 	bl	8006adc <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	2032      	movs	r0, #50	; 0x32
 8005f80:	f000 fa5d 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005f84:	2032      	movs	r0, #50	; 0x32
 8005f86:	f000 fa76 	bl	8006476 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8005f8a:	e02e      	b.n	8005fea <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1b      	ldr	r2, [pc, #108]	; (8006000 <HAL_TIM_Base_MspInit+0x100>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d10e      	bne.n	8005fb4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	4a16      	ldr	r2, [pc, #88]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005fa0:	f043 0302 	orr.w	r3, r3, #2
 8005fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	693b      	ldr	r3, [r7, #16]
}
 8005fb2:	e01a      	b.n	8005fea <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a12      	ldr	r2, [pc, #72]	; (8006004 <HAL_TIM_Base_MspInit+0x104>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d115      	bne.n	8005fea <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc6:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fce:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <HAL_TIM_Base_MspInit+0xf8>)
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	2018      	movs	r0, #24
 8005fe0:	f000 fa2d 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005fe4:	2018      	movs	r0, #24
 8005fe6:	f000 fa46 	bl	8006476 <HAL_NVIC_EnableIRQ>
}
 8005fea:	bf00      	nop
 8005fec:	3730      	adds	r7, #48	; 0x30
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40000c00 	.word	0x40000c00
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40020000 	.word	0x40020000
 8006000:	40010400 	.word	0x40010400
 8006004:	40014000 	.word	0x40014000

08006008 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	60da      	str	r2, [r3, #12]
 800601e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a33      	ldr	r2, [pc, #204]	; (80060f4 <HAL_TIM_MspPostInit+0xec>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d13c      	bne.n	80060a4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800602a:	2300      	movs	r3, #0
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	4b32      	ldr	r3, [pc, #200]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	4a31      	ldr	r2, [pc, #196]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	6313      	str	r3, [r2, #48]	; 0x30
 800603a:	4b2f      	ldr	r3, [pc, #188]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	4b2b      	ldr	r3, [pc, #172]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	4a2a      	ldr	r2, [pc, #168]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 8006050:	f043 0302 	orr.w	r3, r3, #2
 8006054:	6313      	str	r3, [r2, #48]	; 0x30
 8006056:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006062:	23c0      	movs	r3, #192	; 0xc0
 8006064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006066:	2302      	movs	r3, #2
 8006068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800606e:	2300      	movs	r3, #0
 8006070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006072:	2302      	movs	r3, #2
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006076:	f107 0314 	add.w	r3, r7, #20
 800607a:	4619      	mov	r1, r3
 800607c:	481f      	ldr	r0, [pc, #124]	; (80060fc <HAL_TIM_MspPostInit+0xf4>)
 800607e:	f000 fd2d 	bl	8006adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006082:	2303      	movs	r3, #3
 8006084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006086:	2302      	movs	r3, #2
 8006088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608e:	2300      	movs	r3, #0
 8006090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006092:	2302      	movs	r3, #2
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006096:	f107 0314 	add.w	r3, r7, #20
 800609a:	4619      	mov	r1, r3
 800609c:	4818      	ldr	r0, [pc, #96]	; (8006100 <HAL_TIM_MspPostInit+0xf8>)
 800609e:	f000 fd1d 	bl	8006adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80060a2:	e023      	b.n	80060ec <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a16      	ldr	r2, [pc, #88]	; (8006104 <HAL_TIM_MspPostInit+0xfc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d11e      	bne.n	80060ec <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 80060b8:	f043 0304 	orr.w	r3, r3, #4
 80060bc:	6313      	str	r3, [r2, #48]	; 0x30
 80060be:	4b0e      	ldr	r3, [pc, #56]	; (80060f8 <HAL_TIM_MspPostInit+0xf0>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80060ca:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80060ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d0:	2302      	movs	r3, #2
 80060d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060d8:	2300      	movs	r3, #0
 80060da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80060dc:	2303      	movs	r3, #3
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	4619      	mov	r1, r3
 80060e6:	4808      	ldr	r0, [pc, #32]	; (8006108 <HAL_TIM_MspPostInit+0x100>)
 80060e8:	f000 fcf8 	bl	8006adc <HAL_GPIO_Init>
}
 80060ec:	bf00      	nop
 80060ee:	3728      	adds	r7, #40	; 0x28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40000400 	.word	0x40000400
 80060f8:	40023800 	.word	0x40023800
 80060fc:	40020000 	.word	0x40020000
 8006100:	40020400 	.word	0x40020400
 8006104:	40010400 	.word	0x40010400
 8006108:	40020800 	.word	0x40020800

0800610c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800610c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006144 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006110:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006112:	e003      	b.n	800611c <LoopCopyDataInit>

08006114 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006116:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006118:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800611a:	3104      	adds	r1, #4

0800611c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800611c:	480b      	ldr	r0, [pc, #44]	; (800614c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800611e:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006120:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006122:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006124:	d3f6      	bcc.n	8006114 <CopyDataInit>
  ldr  r2, =_sbss
 8006126:	4a0b      	ldr	r2, [pc, #44]	; (8006154 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006128:	e002      	b.n	8006130 <LoopFillZerobss>

0800612a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800612a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800612c:	f842 3b04 	str.w	r3, [r2], #4

08006130 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006132:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006134:	d3f9      	bcc.n	800612a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006136:	f7fe ff6d 	bl	8005014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800613a:	f00a f949 	bl	80103d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800613e:	f7fe f8a9 	bl	8004294 <main>
  bx  lr    
 8006142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006144:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006148:	08013950 	.word	0x08013950
  ldr  r0, =_sdata
 800614c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006150:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8006154:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8006158:	200045a4 	.word	0x200045a4

0800615c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800615c:	e7fe      	b.n	800615c <ADC_IRQHandler>
	...

08006160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <HAL_Init+0x40>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a0d      	ldr	r2, [pc, #52]	; (80061a0 <HAL_Init+0x40>)
 800616a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800616e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006170:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_Init+0x40>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <HAL_Init+0x40>)
 8006176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800617a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800617c:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <HAL_Init+0x40>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a07      	ldr	r2, [pc, #28]	; (80061a0 <HAL_Init+0x40>)
 8006182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006188:	2003      	movs	r0, #3
 800618a:	f000 f94d 	bl	8006428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800618e:	2000      	movs	r0, #0
 8006190:	f000 f808 	bl	80061a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006194:	f7fe fe4e 	bl	8004e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40023c00 	.word	0x40023c00

080061a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_InitTick+0x54>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <HAL_InitTick+0x58>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80061be:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f965 	bl	8006492 <HAL_SYSTICK_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e00e      	b.n	80061f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b0f      	cmp	r3, #15
 80061d6:	d80a      	bhi.n	80061ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061d8:	2200      	movs	r2, #0
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	f000 f92d 	bl	800643e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061e4:	4a06      	ldr	r2, [pc, #24]	; (8006200 <HAL_InitTick+0x5c>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20000048 	.word	0x20000048
 80061fc:	20000054 	.word	0x20000054
 8006200:	20000050 	.word	0x20000050

08006204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <HAL_IncTick+0x20>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	4b06      	ldr	r3, [pc, #24]	; (8006228 <HAL_IncTick+0x24>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4413      	add	r3, r2
 8006214:	4a04      	ldr	r2, [pc, #16]	; (8006228 <HAL_IncTick+0x24>)
 8006216:	6013      	str	r3, [r2, #0]
}
 8006218:	bf00      	nop
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000054 	.word	0x20000054
 8006228:	20002cc4 	.word	0x20002cc4

0800622c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return uwTick;
 8006230:	4b03      	ldr	r3, [pc, #12]	; (8006240 <HAL_GetTick+0x14>)
 8006232:	681b      	ldr	r3, [r3, #0]
}
 8006234:	4618      	mov	r0, r3
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20002cc4 	.word	0x20002cc4

08006244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800624c:	f7ff ffee 	bl	800622c <HAL_GetTick>
 8006250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d005      	beq.n	800626a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <HAL_Delay+0x40>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800626a:	bf00      	nop
 800626c:	f7ff ffde 	bl	800622c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	429a      	cmp	r2, r3
 800627a:	d8f7      	bhi.n	800626c <HAL_Delay+0x28>
  {
  }
}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000054 	.word	0x20000054

08006288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <__NVIC_SetPriorityGrouping+0x44>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062a4:	4013      	ands	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062ba:	4a04      	ldr	r2, [pc, #16]	; (80062cc <__NVIC_SetPriorityGrouping+0x44>)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	60d3      	str	r3, [r2, #12]
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <__NVIC_GetPriorityGrouping+0x18>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	0a1b      	lsrs	r3, r3, #8
 80062da:	f003 0307 	and.w	r3, r3, #7
}
 80062de:	4618      	mov	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	e000ed00 	.word	0xe000ed00

080062ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db0b      	blt.n	8006316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	f003 021f 	and.w	r2, r3, #31
 8006304:	4907      	ldr	r1, [pc, #28]	; (8006324 <__NVIC_EnableIRQ+0x38>)
 8006306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2001      	movs	r0, #1
 800630e:	fa00 f202 	lsl.w	r2, r0, r2
 8006312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000e100 	.word	0xe000e100

08006328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	6039      	str	r1, [r7, #0]
 8006332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006338:	2b00      	cmp	r3, #0
 800633a:	db0a      	blt.n	8006352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	490c      	ldr	r1, [pc, #48]	; (8006374 <__NVIC_SetPriority+0x4c>)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	440b      	add	r3, r1
 800634c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006350:	e00a      	b.n	8006368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	4908      	ldr	r1, [pc, #32]	; (8006378 <__NVIC_SetPriority+0x50>)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	3b04      	subs	r3, #4
 8006360:	0112      	lsls	r2, r2, #4
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	440b      	add	r3, r1
 8006366:	761a      	strb	r2, [r3, #24]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000e100 	.word	0xe000e100
 8006378:	e000ed00 	.word	0xe000ed00

0800637c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800637c:	b480      	push	{r7}
 800637e:	b089      	sub	sp, #36	; 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f1c3 0307 	rsb	r3, r3, #7
 8006396:	2b04      	cmp	r3, #4
 8006398:	bf28      	it	cs
 800639a:	2304      	movcs	r3, #4
 800639c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3304      	adds	r3, #4
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d902      	bls.n	80063ac <NVIC_EncodePriority+0x30>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3b03      	subs	r3, #3
 80063aa:	e000      	b.n	80063ae <NVIC_EncodePriority+0x32>
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43da      	mvns	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	401a      	ands	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063c4:	f04f 31ff 	mov.w	r1, #4294967295
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	43d9      	mvns	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d4:	4313      	orrs	r3, r2
         );
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3724      	adds	r7, #36	; 0x24
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063f4:	d301      	bcc.n	80063fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063f6:	2301      	movs	r3, #1
 80063f8:	e00f      	b.n	800641a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063fa:	4a0a      	ldr	r2, [pc, #40]	; (8006424 <SysTick_Config+0x40>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006402:	210f      	movs	r1, #15
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	f7ff ff8e 	bl	8006328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <SysTick_Config+0x40>)
 800640e:	2200      	movs	r2, #0
 8006410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006412:	4b04      	ldr	r3, [pc, #16]	; (8006424 <SysTick_Config+0x40>)
 8006414:	2207      	movs	r2, #7
 8006416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	e000e010 	.word	0xe000e010

08006428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ff29 	bl	8006288 <__NVIC_SetPriorityGrouping>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006450:	f7ff ff3e 	bl	80062d0 <__NVIC_GetPriorityGrouping>
 8006454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	6978      	ldr	r0, [r7, #20]
 800645c:	f7ff ff8e 	bl	800637c <NVIC_EncodePriority>
 8006460:	4602      	mov	r2, r0
 8006462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff ff5d 	bl	8006328 <__NVIC_SetPriority>
}
 800646e:	bf00      	nop
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	4603      	mov	r3, r0
 800647e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff ff31 	bl	80062ec <__NVIC_EnableIRQ>
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ffa2 	bl	80063e4 <SysTick_Config>
 80064a0:	4603      	mov	r3, r0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80064b8:	f7ff feb8 	bl	800622c <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e099      	b.n	80065fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064e8:	e00f      	b.n	800650a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064ea:	f7ff fe9f 	bl	800622c <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b05      	cmp	r3, #5
 80064f6:	d908      	bls.n	800650a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2203      	movs	r2, #3
 8006502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e078      	b.n	80065fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e8      	bne.n	80064ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <HAL_DMA_Init+0x158>)
 8006524:	4013      	ands	r3, r2
 8006526:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006536:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800654e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b04      	cmp	r3, #4
 8006562:	d107      	bne.n	8006574 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4313      	orrs	r3, r2
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0307 	bic.w	r3, r3, #7
 800658a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	2b04      	cmp	r3, #4
 800659c:	d117      	bne.n	80065ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00e      	beq.n	80065ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa19 	bl	80069e8 <DMA_CheckFifoParam>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d008      	beq.n	80065ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80065ca:	2301      	movs	r3, #1
 80065cc:	e016      	b.n	80065fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f9d0 	bl	800697c <DMA_CalcBaseAndBitshift>
 80065dc:	4603      	mov	r3, r0
 80065de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e4:	223f      	movs	r2, #63	; 0x3f
 80065e6:	409a      	lsls	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	f010803f 	.word	0xf010803f

08006608 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d004      	beq.n	8006626 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2280      	movs	r2, #128	; 0x80
 8006620:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e00c      	b.n	8006640 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2205      	movs	r2, #5
 800662a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006658:	4b92      	ldr	r3, [pc, #584]	; (80068a4 <HAL_DMA_IRQHandler+0x258>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a92      	ldr	r2, [pc, #584]	; (80068a8 <HAL_DMA_IRQHandler+0x25c>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	0a9b      	lsrs	r3, r3, #10
 8006664:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	2208      	movs	r2, #8
 8006678:	409a      	lsls	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01a      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d013      	beq.n	80066b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0204 	bic.w	r2, r2, #4
 800669e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a4:	2208      	movs	r2, #8
 80066a6:	409a      	lsls	r2, r3
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	f043 0201 	orr.w	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	2201      	movs	r2, #1
 80066be:	409a      	lsls	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d012      	beq.n	80066ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066da:	2201      	movs	r2, #1
 80066dc:	409a      	lsls	r2, r3
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e6:	f043 0202 	orr.w	r2, r3, #2
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	2204      	movs	r2, #4
 80066f4:	409a      	lsls	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d012      	beq.n	8006724 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006710:	2204      	movs	r2, #4
 8006712:	409a      	lsls	r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671c:	f043 0204 	orr.w	r2, r3, #4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006728:	2210      	movs	r2, #16
 800672a:	409a      	lsls	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4013      	ands	r3, r2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d043      	beq.n	80067bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d03c      	beq.n	80067bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006746:	2210      	movs	r2, #16
 8006748:	409a      	lsls	r2, r3
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d018      	beq.n	800678e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d108      	bne.n	800677c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d024      	beq.n	80067bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
 800677a:	e01f      	b.n	80067bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01b      	beq.n	80067bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4798      	blx	r3
 800678c:	e016      	b.n	80067bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d107      	bne.n	80067ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0208 	bic.w	r2, r2, #8
 80067aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c0:	2220      	movs	r2, #32
 80067c2:	409a      	lsls	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 808e 	beq.w	80068ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8086 	beq.w	80068ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	2220      	movs	r2, #32
 80067e4:	409a      	lsls	r2, r3
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d136      	bne.n	8006864 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0216 	bic.w	r2, r2, #22
 8006804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695a      	ldr	r2, [r3, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006814:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <HAL_DMA_IRQHandler+0x1da>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0208 	bic.w	r2, r2, #8
 8006834:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683a:	223f      	movs	r2, #63	; 0x3f
 800683c:	409a      	lsls	r2, r3
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006856:	2b00      	cmp	r3, #0
 8006858:	d07d      	beq.n	8006956 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
        }
        return;
 8006862:	e078      	b.n	8006956 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d01c      	beq.n	80068ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d108      	bne.n	8006892 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	2b00      	cmp	r3, #0
 8006886:	d030      	beq.n	80068ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
 8006890:	e02b      	b.n	80068ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d027      	beq.n	80068ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
 80068a2:	e022      	b.n	80068ea <HAL_DMA_IRQHandler+0x29e>
 80068a4:	20000048 	.word	0x20000048
 80068a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10f      	bne.n	80068da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0210 	bic.w	r2, r2, #16
 80068c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d032      	beq.n	8006958 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d022      	beq.n	8006944 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2205      	movs	r2, #5
 8006902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	3301      	adds	r3, #1
 800691a:	60bb      	str	r3, [r7, #8]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	429a      	cmp	r2, r3
 8006920:	d307      	bcc.n	8006932 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1f2      	bne.n	8006916 <HAL_DMA_IRQHandler+0x2ca>
 8006930:	e000      	b.n	8006934 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006932:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
 8006954:	e000      	b.n	8006958 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006956:	bf00      	nop
    }
  }
}
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop

08006960 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800696e:	b2db      	uxtb	r3, r3
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	3b10      	subs	r3, #16
 800698c:	4a14      	ldr	r2, [pc, #80]	; (80069e0 <DMA_CalcBaseAndBitshift+0x64>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	091b      	lsrs	r3, r3, #4
 8006994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006996:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <DMA_CalcBaseAndBitshift+0x68>)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d909      	bls.n	80069be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	1d1a      	adds	r2, r3, #4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	659a      	str	r2, [r3, #88]	; 0x58
 80069bc:	e007      	b.n	80069ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	aaaaaaab 	.word	0xaaaaaaab
 80069e4:	080136b8 	.word	0x080136b8

080069e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d11f      	bne.n	8006a42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d855      	bhi.n	8006ab4 <DMA_CheckFifoParam+0xcc>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <DMA_CheckFifoParam+0x28>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a33 	.word	0x08006a33
 8006a18:	08006a21 	.word	0x08006a21
 8006a1c:	08006ab5 	.word	0x08006ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d045      	beq.n	8006ab8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a30:	e042      	b.n	8006ab8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a3a:	d13f      	bne.n	8006abc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a40:	e03c      	b.n	8006abc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4a:	d121      	bne.n	8006a90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b03      	cmp	r3, #3
 8006a50:	d836      	bhi.n	8006ac0 <DMA_CheckFifoParam+0xd8>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <DMA_CheckFifoParam+0x70>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a6f 	.word	0x08006a6f
 8006a60:	08006a69 	.word	0x08006a69
 8006a64:	08006a81 	.word	0x08006a81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a6c:	e02f      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d024      	beq.n	8006ac4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a7e:	e021      	b.n	8006ac4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a88:	d11e      	bne.n	8006ac8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a8e:	e01b      	b.n	8006ac8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d902      	bls.n	8006a9c <DMA_CheckFifoParam+0xb4>
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d003      	beq.n	8006aa2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a9a:	e018      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa0:	e015      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab2:	e00b      	b.n	8006acc <DMA_CheckFifoParam+0xe4>
      break;
 8006ab4:	bf00      	nop
 8006ab6:	e00a      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      break;
 8006ab8:	bf00      	nop
 8006aba:	e008      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      break;
 8006abc:	bf00      	nop
 8006abe:	e006      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      break;
 8006ac0:	bf00      	nop
 8006ac2:	e004      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      break;
 8006ac4:	bf00      	nop
 8006ac6:	e002      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      break;   
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <DMA_CheckFifoParam+0xe6>
      break;
 8006acc:	bf00      	nop
    }
  } 
  
  return status; 
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b089      	sub	sp, #36	; 0x24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	e16b      	b.n	8006dd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006af8:	2201      	movs	r2, #1
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	f040 815a 	bne.w	8006dca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d00b      	beq.n	8006b36 <HAL_GPIO_Init+0x5a>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d007      	beq.n	8006b36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b2a:	2b11      	cmp	r3, #17
 8006b2c:	d003      	beq.n	8006b36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b12      	cmp	r3, #18
 8006b34:	d130      	bne.n	8006b98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	2203      	movs	r2, #3
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 0201 	and.w	r2, r3, #1
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69ba      	ldr	r2, [r7, #24]
 8006bc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d003      	beq.n	8006bd8 <HAL_GPIO_Init+0xfc>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b12      	cmp	r3, #18
 8006bd6:	d123      	bne.n	8006c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	08da      	lsrs	r2, r3, #3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3208      	adds	r2, #8
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	220f      	movs	r2, #15
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	08da      	lsrs	r2, r3, #3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3208      	adds	r2, #8
 8006c1a:	69b9      	ldr	r1, [r7, #24]
 8006c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	43db      	mvns	r3, r3
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4013      	ands	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 0203 	and.w	r2, r3, #3
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	fa02 f303 	lsl.w	r3, r2, r3
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80b4 	beq.w	8006dca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	4b5f      	ldr	r3, [pc, #380]	; (8006de4 <HAL_GPIO_Init+0x308>)
 8006c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6a:	4a5e      	ldr	r2, [pc, #376]	; (8006de4 <HAL_GPIO_Init+0x308>)
 8006c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c70:	6453      	str	r3, [r2, #68]	; 0x44
 8006c72:	4b5c      	ldr	r3, [pc, #368]	; (8006de4 <HAL_GPIO_Init+0x308>)
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c7e:	4a5a      	ldr	r2, [pc, #360]	; (8006de8 <HAL_GPIO_Init+0x30c>)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	089b      	lsrs	r3, r3, #2
 8006c84:	3302      	adds	r3, #2
 8006c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	220f      	movs	r2, #15
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a51      	ldr	r2, [pc, #324]	; (8006dec <HAL_GPIO_Init+0x310>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d02b      	beq.n	8006d02 <HAL_GPIO_Init+0x226>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a50      	ldr	r2, [pc, #320]	; (8006df0 <HAL_GPIO_Init+0x314>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d025      	beq.n	8006cfe <HAL_GPIO_Init+0x222>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a4f      	ldr	r2, [pc, #316]	; (8006df4 <HAL_GPIO_Init+0x318>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d01f      	beq.n	8006cfa <HAL_GPIO_Init+0x21e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a4e      	ldr	r2, [pc, #312]	; (8006df8 <HAL_GPIO_Init+0x31c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d019      	beq.n	8006cf6 <HAL_GPIO_Init+0x21a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a4d      	ldr	r2, [pc, #308]	; (8006dfc <HAL_GPIO_Init+0x320>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <HAL_GPIO_Init+0x216>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a4c      	ldr	r2, [pc, #304]	; (8006e00 <HAL_GPIO_Init+0x324>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00d      	beq.n	8006cee <HAL_GPIO_Init+0x212>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a4b      	ldr	r2, [pc, #300]	; (8006e04 <HAL_GPIO_Init+0x328>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d007      	beq.n	8006cea <HAL_GPIO_Init+0x20e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a4a      	ldr	r2, [pc, #296]	; (8006e08 <HAL_GPIO_Init+0x32c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d101      	bne.n	8006ce6 <HAL_GPIO_Init+0x20a>
 8006ce2:	2307      	movs	r3, #7
 8006ce4:	e00e      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006ce6:	2308      	movs	r3, #8
 8006ce8:	e00c      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cea:	2306      	movs	r3, #6
 8006cec:	e00a      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cee:	2305      	movs	r3, #5
 8006cf0:	e008      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cf2:	2304      	movs	r3, #4
 8006cf4:	e006      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e004      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e002      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <HAL_GPIO_Init+0x228>
 8006d02:	2300      	movs	r3, #0
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	f002 0203 	and.w	r2, r2, #3
 8006d0a:	0092      	lsls	r2, r2, #2
 8006d0c:	4093      	lsls	r3, r2
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d14:	4934      	ldr	r1, [pc, #208]	; (8006de8 <HAL_GPIO_Init+0x30c>)
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	089b      	lsrs	r3, r3, #2
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d22:	4b3a      	ldr	r3, [pc, #232]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d46:	4a31      	ldr	r2, [pc, #196]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d4c:	4b2f      	ldr	r3, [pc, #188]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d70:	4a26      	ldr	r2, [pc, #152]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d76:	4b25      	ldr	r3, [pc, #148]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4013      	ands	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006da0:	4b1a      	ldr	r3, [pc, #104]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	43db      	mvns	r3, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006dc4:	4a11      	ldr	r2, [pc, #68]	; (8006e0c <HAL_GPIO_Init+0x330>)
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b0f      	cmp	r3, #15
 8006dd4:	f67f ae90 	bls.w	8006af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006dd8:	bf00      	nop
 8006dda:	3724      	adds	r7, #36	; 0x24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	40023800 	.word	0x40023800
 8006de8:	40013800 	.word	0x40013800
 8006dec:	40020000 	.word	0x40020000
 8006df0:	40020400 	.word	0x40020400
 8006df4:	40020800 	.word	0x40020800
 8006df8:	40020c00 	.word	0x40020c00
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	40021400 	.word	0x40021400
 8006e04:	40021800 	.word	0x40021800
 8006e08:	40021c00 	.word	0x40021c00
 8006e0c:	40013c00 	.word	0x40013c00

08006e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	887b      	ldrh	r3, [r7, #2]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]
 8006e2c:	e001      	b.n	8006e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	807b      	strh	r3, [r7, #2]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e50:	787b      	ldrb	r3, [r7, #1]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e56:	887a      	ldrh	r2, [r7, #2]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e5c:	e003      	b.n	8006e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e5e:	887b      	ldrh	r3, [r7, #2]
 8006e60:	041a      	lsls	r2, r3, #16
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	619a      	str	r2, [r3, #24]
}
 8006e66:	bf00      	nop
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	887b      	ldrh	r3, [r7, #2]
 8006e84:	401a      	ands	r2, r3
 8006e86:	887b      	ldrh	r3, [r7, #2]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d104      	bne.n	8006e96 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	041a      	lsls	r2, r3, #16
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006e94:	e002      	b.n	8006e9c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006e96:	887a      	ldrh	r2, [r7, #2]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	619a      	str	r2, [r3, #24]
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e11f      	b.n	80070fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fc ff04 	bl	8003cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2224      	movs	r2, #36	; 0x24
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0201 	bic.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f0c:	f004 fac8 	bl	800b4a0 <HAL_RCC_GetPCLK1Freq>
 8006f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	4a7b      	ldr	r2, [pc, #492]	; (8007104 <HAL_I2C_Init+0x25c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d807      	bhi.n	8006f2c <HAL_I2C_Init+0x84>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4a7a      	ldr	r2, [pc, #488]	; (8007108 <HAL_I2C_Init+0x260>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	bf94      	ite	ls
 8006f24:	2301      	movls	r3, #1
 8006f26:	2300      	movhi	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e006      	b.n	8006f3a <HAL_I2C_Init+0x92>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4a77      	ldr	r2, [pc, #476]	; (800710c <HAL_I2C_Init+0x264>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	bf94      	ite	ls
 8006f34:	2301      	movls	r3, #1
 8006f36:	2300      	movhi	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e0db      	b.n	80070fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4a72      	ldr	r2, [pc, #456]	; (8007110 <HAL_I2C_Init+0x268>)
 8006f46:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4a:	0c9b      	lsrs	r3, r3, #18
 8006f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a64      	ldr	r2, [pc, #400]	; (8007104 <HAL_I2C_Init+0x25c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d802      	bhi.n	8006f7c <HAL_I2C_Init+0xd4>
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	e009      	b.n	8006f90 <HAL_I2C_Init+0xe8>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	4a63      	ldr	r2, [pc, #396]	; (8007114 <HAL_I2C_Init+0x26c>)
 8006f88:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8c:	099b      	lsrs	r3, r3, #6
 8006f8e:	3301      	adds	r3, #1
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4956      	ldr	r1, [pc, #344]	; (8007104 <HAL_I2C_Init+0x25c>)
 8006fac:	428b      	cmp	r3, r1
 8006fae:	d80d      	bhi.n	8006fcc <HAL_I2C_Init+0x124>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	1e59      	subs	r1, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	bf38      	it	cc
 8006fc8:	2304      	movcc	r3, #4
 8006fca:	e04f      	b.n	800706c <HAL_I2C_Init+0x1c4>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d111      	bne.n	8006ff8 <HAL_I2C_Init+0x150>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	1e58      	subs	r0, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6859      	ldr	r1, [r3, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	440b      	add	r3, r1
 8006fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e012      	b.n	800701e <HAL_I2C_Init+0x176>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	1e58      	subs	r0, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6859      	ldr	r1, [r3, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	0099      	lsls	r1, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	fbb0 f3f3 	udiv	r3, r0, r3
 800700e:	3301      	adds	r3, #1
 8007010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007014:	2b00      	cmp	r3, #0
 8007016:	bf0c      	ite	eq
 8007018:	2301      	moveq	r3, #1
 800701a:	2300      	movne	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <HAL_I2C_Init+0x17e>
 8007022:	2301      	movs	r3, #1
 8007024:	e022      	b.n	800706c <HAL_I2C_Init+0x1c4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10e      	bne.n	800704c <HAL_I2C_Init+0x1a4>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1e58      	subs	r0, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6859      	ldr	r1, [r3, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	440b      	add	r3, r1
 800703c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007040:	3301      	adds	r3, #1
 8007042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800704a:	e00f      	b.n	800706c <HAL_I2C_Init+0x1c4>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	1e58      	subs	r0, r3, #1
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6859      	ldr	r1, [r3, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	440b      	add	r3, r1
 800705a:	0099      	lsls	r1, r3, #2
 800705c:	440b      	add	r3, r1
 800705e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007062:	3301      	adds	r3, #1
 8007064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	6809      	ldr	r1, [r1, #0]
 8007070:	4313      	orrs	r3, r2
 8007072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800709a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6911      	ldr	r1, [r2, #16]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68d2      	ldr	r2, [r2, #12]
 80070a6:	4311      	orrs	r1, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	430b      	orrs	r3, r1
 80070ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	000186a0 	.word	0x000186a0
 8007108:	001e847f 	.word	0x001e847f
 800710c:	003d08ff 	.word	0x003d08ff
 8007110:	431bde83 	.word	0x431bde83
 8007114:	10624dd3 	.word	0x10624dd3

08007118 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af02      	add	r7, sp, #8
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	461a      	mov	r2, r3
 8007124:	460b      	mov	r3, r1
 8007126:	817b      	strh	r3, [r7, #10]
 8007128:	4613      	mov	r3, r2
 800712a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800712c:	f7ff f87e 	bl	800622c <HAL_GetTick>
 8007130:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b20      	cmp	r3, #32
 800713c:	f040 80e0 	bne.w	8007300 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	2319      	movs	r3, #25
 8007146:	2201      	movs	r2, #1
 8007148:	4970      	ldr	r1, [pc, #448]	; (800730c <HAL_I2C_Master_Transmit+0x1f4>)
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f002 f9f5 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007156:	2302      	movs	r3, #2
 8007158:	e0d3      	b.n	8007302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <HAL_I2C_Master_Transmit+0x50>
 8007164:	2302      	movs	r3, #2
 8007166:	e0cc      	b.n	8007302 <HAL_I2C_Master_Transmit+0x1ea>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b01      	cmp	r3, #1
 800717c:	d007      	beq.n	800718e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0201 	orr.w	r2, r2, #1
 800718c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800719c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2221      	movs	r2, #33	; 0x21
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2210      	movs	r2, #16
 80071aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	893a      	ldrh	r2, [r7, #8]
 80071be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a50      	ldr	r2, [pc, #320]	; (8007310 <HAL_I2C_Master_Transmit+0x1f8>)
 80071ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80071d0:	8979      	ldrh	r1, [r7, #10]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f001 ffc8 	bl	800916c <I2C_MasterRequestWrite>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e08d      	b.n	8007302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80071fc:	e066      	b.n	80072cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	6a39      	ldr	r1, [r7, #32]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f002 fa6f 	bl	80096e6 <I2C_WaitOnTXEFlagUntilTimeout>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b04      	cmp	r3, #4
 8007214:	d107      	bne.n	8007226 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e06b      	b.n	8007302 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b04      	cmp	r3, #4
 8007266:	d11b      	bne.n	80072a0 <HAL_I2C_Master_Transmit+0x188>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726c:	2b00      	cmp	r3, #0
 800726e:	d017      	beq.n	80072a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	6a39      	ldr	r1, [r7, #32]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f002 fa5f 	bl	8009768 <I2C_WaitOnBTFFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d107      	bne.n	80072c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e01a      	b.n	8007302 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d194      	bne.n	80071fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007300:	2302      	movs	r3, #2
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	00100002 	.word	0x00100002
 8007310:	ffff0000 	.word	0xffff0000

08007314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08c      	sub	sp, #48	; 0x30
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	461a      	mov	r2, r3
 8007322:	4603      	mov	r3, r0
 8007324:	817b      	strh	r3, [r7, #10]
 8007326:	460b      	mov	r3, r1
 8007328:	813b      	strh	r3, [r7, #8]
 800732a:	4613      	mov	r3, r2
 800732c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800732e:	f7fe ff7d 	bl	800622c <HAL_GetTick>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b20      	cmp	r3, #32
 800733e:	f040 8208 	bne.w	8007752 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	2319      	movs	r3, #25
 8007348:	2201      	movs	r2, #1
 800734a:	497b      	ldr	r1, [pc, #492]	; (8007538 <HAL_I2C_Mem_Read+0x224>)
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f002 f8f4 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007358:	2302      	movs	r3, #2
 800735a:	e1fb      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_I2C_Mem_Read+0x56>
 8007366:	2302      	movs	r3, #2
 8007368:	e1f4      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d007      	beq.n	8007390 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800739e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2222      	movs	r2, #34	; 0x22
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2240      	movs	r2, #64	; 0x40
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80073c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a5b      	ldr	r2, [pc, #364]	; (800753c <HAL_I2C_Mem_Read+0x228>)
 80073d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073d2:	88f8      	ldrh	r0, [r7, #6]
 80073d4:	893a      	ldrh	r2, [r7, #8]
 80073d6:	8979      	ldrh	r1, [r7, #10]
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	4603      	mov	r3, r0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f001 ff44 	bl	8009270 <I2C_RequestMemoryRead>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e1b0      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d113      	bne.n	8007422 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073fa:	2300      	movs	r3, #0
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	623b      	str	r3, [r7, #32]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e184      	b.n	800772c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007426:	2b01      	cmp	r3, #1
 8007428:	d11b      	bne.n	8007462 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e164      	b.n	800772c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007466:	2b02      	cmp	r3, #2
 8007468:	d11b      	bne.n	80074a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007478:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800748a:	2300      	movs	r3, #0
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	e144      	b.n	800772c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80074b8:	e138      	b.n	800772c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f200 80f1 	bhi.w	80076a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d123      	bne.n	8007514 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f002 f98a 	bl	80097ea <I2C_WaitOnRXNEFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e139      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691a      	ldr	r2, [r3, #16]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29a      	uxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007512:	e10b      	b.n	800772c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007518:	2b02      	cmp	r3, #2
 800751a:	d14e      	bne.n	80075ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	2200      	movs	r2, #0
 8007524:	4906      	ldr	r1, [pc, #24]	; (8007540 <HAL_I2C_Mem_Read+0x22c>)
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f002 f807 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e10e      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
 8007536:	bf00      	nop
 8007538:	00100002 	.word	0x00100002
 800753c:	ffff0000 	.word	0xffff0000
 8007540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691a      	ldr	r2, [r3, #16]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075b8:	e0b8      	b.n	800772c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	2200      	movs	r2, #0
 80075c2:	4966      	ldr	r1, [pc, #408]	; (800775c <HAL_I2C_Mem_Read+0x448>)
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f001 ffb8 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0bf      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2200      	movs	r2, #0
 800761e:	494f      	ldr	r1, [pc, #316]	; (800775c <HAL_I2C_Mem_Read+0x448>)
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f001 ff8a 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e091      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800763e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691a      	ldr	r2, [r3, #16]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768e:	3b01      	subs	r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769a:	b29b      	uxth	r3, r3
 800769c:	3b01      	subs	r3, #1
 800769e:	b29a      	uxth	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076a4:	e042      	b.n	800772c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f002 f89d 	bl	80097ea <I2C_WaitOnRXNEFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e04c      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	b2d2      	uxtb	r2, r2
 80076c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d6:	3b01      	subs	r3, #1
 80076d8:	b29a      	uxth	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d118      	bne.n	800772c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007730:	2b00      	cmp	r3, #0
 8007732:	f47f aec2 	bne.w	80074ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	e000      	b.n	8007754 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007752:	2302      	movs	r3, #2
  }
}
 8007754:	4618      	mov	r0, r3
 8007756:	3728      	adds	r7, #40	; 0x28
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	00010004 	.word	0x00010004

08007760 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	461a      	mov	r2, r3
 800776c:	460b      	mov	r3, r1
 800776e:	817b      	strh	r3, [r7, #10]
 8007770:	4613      	mov	r3, r2
 8007772:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b20      	cmp	r3, #32
 8007786:	f040 809e 	bne.w	80078c6 <HAL_I2C_Master_Seq_Transmit_IT+0x166>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	2b08      	cmp	r3, #8
 800778e:	d002      	beq.n	8007796 <HAL_I2C_Master_Seq_Transmit_IT+0x36>
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d130      	bne.n	80077f8 <HAL_I2C_Master_Seq_Transmit_IT+0x98>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007796:	4b4f      	ldr	r3, [pc, #316]	; (80078d4 <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	4a4e      	ldr	r2, [pc, #312]	; (80078d8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	0a1a      	lsrs	r2, r3, #8
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009a      	lsls	r2, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d116      	bne.n	80077ea <HAL_I2C_Master_Seq_Transmit_IT+0x8a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	f043 0220 	orr.w	r2, r3, #32
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e06e      	b.n	80078c8 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d0db      	beq.n	80077b0 <HAL_I2C_Master_Seq_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d101      	bne.n	8007806 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8007802:	2302      	movs	r3, #2
 8007804:	e060      	b.n	80078c8 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b01      	cmp	r3, #1
 800781a:	d007      	beq.n	800782c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800783a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2221      	movs	r2, #33	; 0x21
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2210      	movs	r2, #16
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	893a      	ldrh	r2, [r7, #8]
 800785c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a3a      	ldr	r2, [r7, #32]
 800786c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800786e:	897a      	ldrh	r2, [r7, #10]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b11      	cmp	r3, #17
 800787e:	d10c      	bne.n	800789a <HAL_I2C_Master_Seq_Transmit_IT+0x13a>
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007886:	d003      	beq.n	8007890 <HAL_I2C_Master_Seq_Transmit_IT+0x130>
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800788e:	d101      	bne.n	8007894 <HAL_I2C_Master_Seq_Transmit_IT+0x134>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <HAL_I2C_Master_Seq_Transmit_IT+0x136>
 8007894:	2300      	movs	r3, #0
 8007896:	2b01      	cmp	r3, #1
 8007898:	d107      	bne.n	80078aa <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078a8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80078c0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	e000      	b.n	80078c8 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  }
  else
  {
    return HAL_BUSY;
 80078c6:	2302      	movs	r3, #2
  }
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	20000048 	.word	0x20000048
 80078d8:	14f8b589 	.word	0x14f8b589

080078dc <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80078dc:	b480      	push	{r7}
 80078de:	b089      	sub	sp, #36	; 0x24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	461a      	mov	r2, r3
 80078e8:	460b      	mov	r3, r1
 80078ea:	817b      	strh	r3, [r7, #10]
 80078ec:	4613      	mov	r3, r2
 80078ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80078fc:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b20      	cmp	r3, #32
 8007908:	f040 80d2 	bne.w	8007ab0 <HAL_I2C_Master_Seq_Receive_IT+0x1d4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	2b08      	cmp	r3, #8
 8007910:	d002      	beq.n	8007918 <HAL_I2C_Master_Seq_Receive_IT+0x3c>
 8007912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007914:	2b01      	cmp	r3, #1
 8007916:	d130      	bne.n	800797a <HAL_I2C_Master_Seq_Receive_IT+0x9e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007918:	4b69      	ldr	r3, [pc, #420]	; (8007ac0 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	08db      	lsrs	r3, r3, #3
 800791e:	4a69      	ldr	r2, [pc, #420]	; (8007ac4 <HAL_I2C_Master_Seq_Receive_IT+0x1e8>)
 8007920:	fba2 2303 	umull	r2, r3, r2, r3
 8007924:	0a1a      	lsrs	r2, r3, #8
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009a      	lsls	r2, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	3b01      	subs	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d116      	bne.n	800796c <HAL_I2C_Master_Seq_Receive_IT+0x90>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	f043 0220 	orr.w	r2, r3, #32
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e0a2      	b.n	8007ab2 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b02      	cmp	r3, #2
 8007978:	d0db      	beq.n	8007932 <HAL_I2C_Master_Seq_Receive_IT+0x56>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8007984:	2302      	movs	r3, #2
 8007986:	e094      	b.n	8007ab2 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b01      	cmp	r3, #1
 800799c:	d007      	beq.n	80079ae <HAL_I2C_Master_Seq_Receive_IT+0xd2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0201 	orr.w	r2, r2, #1
 80079ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2222      	movs	r2, #34	; 0x22
 80079c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2210      	movs	r2, #16
 80079ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	893a      	ldrh	r2, [r7, #8]
 80079de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80079f0:	897a      	ldrh	r2, [r7, #10]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fa:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d126      	bne.n	8007a54 <HAL_I2C_Master_Seq_Receive_IT+0x178>
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d002      	beq.n	8007a12 <HAL_I2C_Master_Seq_Receive_IT+0x136>
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b10      	cmp	r3, #16
 8007a10:	d120      	bne.n	8007a54 <HAL_I2C_Master_Seq_Receive_IT+0x178>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b12      	cmp	r3, #18
 8007a16:	d114      	bne.n	8007a42 <HAL_I2C_Master_Seq_Receive_IT+0x166>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a26:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a36:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a3e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8007a40:	e010      	b.n	8007a64 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a50:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8007a52:	e007      	b.n	8007a64 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a62:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	2b12      	cmp	r3, #18
 8007a68:	d10c      	bne.n	8007a84 <HAL_I2C_Master_Seq_Receive_IT+0x1a8>
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007a70:	d003      	beq.n	8007a7a <HAL_I2C_Master_Seq_Receive_IT+0x19e>
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007a78:	d101      	bne.n	8007a7e <HAL_I2C_Master_Seq_Receive_IT+0x1a2>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <HAL_I2C_Master_Seq_Receive_IT+0x1a4>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d107      	bne.n	8007a94 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a92:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6859      	ldr	r1, [r3, #4]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20000048 	.word	0x20000048
 8007ac4:	14f8b589 	.word	0x14f8b589

08007ac8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ae8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	2b10      	cmp	r3, #16
 8007af6:	d003      	beq.n	8007b00 <HAL_I2C_EV_IRQHandler+0x38>
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	f040 80b6 	bne.w	8007c6c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10d      	bne.n	8007b36 <HAL_I2C_EV_IRQHandler+0x6e>
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b20:	d003      	beq.n	8007b2a <HAL_I2C_EV_IRQHandler+0x62>
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b28:	d101      	bne.n	8007b2e <HAL_I2C_EV_IRQHandler+0x66>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_I2C_EV_IRQHandler+0x68>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	f000 8127 	beq.w	8007d84 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00c      	beq.n	8007b5a <HAL_I2C_EV_IRQHandler+0x92>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	0a5b      	lsrs	r3, r3, #9
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d006      	beq.n	8007b5a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f001 fed1 	bl	80098f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fcf8 	bl	8008548 <I2C_Master_SB>
 8007b58:	e087      	b.n	8007c6a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	08db      	lsrs	r3, r3, #3
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <HAL_I2C_EV_IRQHandler+0xb2>
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	0a5b      	lsrs	r3, r3, #9
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fd6e 	bl	8008654 <I2C_Master_ADD10>
 8007b78:	e077      	b.n	8007c6a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <HAL_I2C_EV_IRQHandler+0xd2>
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	0a5b      	lsrs	r3, r3, #9
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fd88 	bl	80086a8 <I2C_Master_ADDR>
 8007b98:	e067      	b.n	8007c6a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	089b      	lsrs	r3, r3, #2
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d030      	beq.n	8007c08 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb4:	f000 80e8 	beq.w	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	09db      	lsrs	r3, r3, #7
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00f      	beq.n	8007be4 <HAL_I2C_EV_IRQHandler+0x11c>
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	0a9b      	lsrs	r3, r3, #10
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d009      	beq.n	8007be4 <HAL_I2C_EV_IRQHandler+0x11c>
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	089b      	lsrs	r3, r3, #2
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d103      	bne.n	8007be4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f9c4 	bl	8007f6a <I2C_MasterTransmit_TXE>
 8007be2:	e042      	b.n	8007c6a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	089b      	lsrs	r3, r3, #2
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80cb 	beq.w	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	0a5b      	lsrs	r3, r3, #9
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 80c4 	beq.w	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fa4e 	bl	80080a2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c06:	e0bf      	b.n	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c16:	f000 80b7 	beq.w	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	099b      	lsrs	r3, r3, #6
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00f      	beq.n	8007c46 <HAL_I2C_EV_IRQHandler+0x17e>
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	0a9b      	lsrs	r3, r3, #10
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d009      	beq.n	8007c46 <HAL_I2C_EV_IRQHandler+0x17e>
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	089b      	lsrs	r3, r3, #2
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d103      	bne.n	8007c46 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb16 	bl	8008270 <I2C_MasterReceive_RXNE>
 8007c44:	e011      	b.n	8007c6a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	089b      	lsrs	r3, r3, #2
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 809a 	beq.w	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	0a5b      	lsrs	r3, r3, #9
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 8093 	beq.w	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb86 	bl	8008374 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c68:	e08e      	b.n	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007c6a:	e08d      	b.n	8007d88 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	61fb      	str	r3, [r7, #28]
 8007c7c:	e007      	b.n	8007c8e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d012      	beq.n	8007cc0 <HAL_I2C_EV_IRQHandler+0x1f8>
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	0a5b      	lsrs	r3, r3, #9
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00c      	beq.n	8007cc0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007cb6:	69b9      	ldr	r1, [r7, #24]
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 ff44 	bl	8008b46 <I2C_Slave_ADDR>
 8007cbe:	e066      	b.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	091b      	lsrs	r3, r3, #4
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d009      	beq.n	8007ce0 <HAL_I2C_EV_IRQHandler+0x218>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	0a5b      	lsrs	r3, r3, #9
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 ff79 	bl	8008bd0 <I2C_Slave_STOPF>
 8007cde:	e056      	b.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	2b21      	cmp	r3, #33	; 0x21
 8007ce4:	d002      	beq.n	8007cec <HAL_I2C_EV_IRQHandler+0x224>
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	2b29      	cmp	r3, #41	; 0x29
 8007cea:	d125      	bne.n	8007d38 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	09db      	lsrs	r3, r3, #7
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00f      	beq.n	8007d18 <HAL_I2C_EV_IRQHandler+0x250>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	0a9b      	lsrs	r3, r3, #10
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d009      	beq.n	8007d18 <HAL_I2C_EV_IRQHandler+0x250>
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	089b      	lsrs	r3, r3, #2
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fe5a 	bl	80089ca <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d16:	e039      	b.n	8007d8c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	089b      	lsrs	r3, r3, #2
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d033      	beq.n	8007d8c <HAL_I2C_EV_IRQHandler+0x2c4>
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	0a5b      	lsrs	r3, r3, #9
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d02d      	beq.n	8007d8c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fe87 	bl	8008a44 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d36:	e029      	b.n	8007d8c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	099b      	lsrs	r3, r3, #6
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00f      	beq.n	8007d64 <HAL_I2C_EV_IRQHandler+0x29c>
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	0a9b      	lsrs	r3, r3, #10
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d009      	beq.n	8007d64 <HAL_I2C_EV_IRQHandler+0x29c>
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	089b      	lsrs	r3, r3, #2
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d103      	bne.n	8007d64 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fe92 	bl	8008a86 <I2C_SlaveReceive_RXNE>
 8007d62:	e014      	b.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	089b      	lsrs	r3, r3, #2
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	0a5b      	lsrs	r3, r3, #9
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d008      	beq.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fec0 	bl	8008b02 <I2C_SlaveReceive_BTF>
 8007d82:	e004      	b.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8007d84:	bf00      	nop
 8007d86:	e002      	b.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d88:	bf00      	nop
 8007d8a:	e000      	b.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d8c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007d8e:	3720      	adds	r7, #32
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08a      	sub	sp, #40	; 0x28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007db6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	0a1b      	lsrs	r3, r3, #8
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00e      	beq.n	8007de2 <HAL_I2C_ER_IRQHandler+0x4e>
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	0a1b      	lsrs	r3, r3, #8
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	f043 0301 	orr.w	r3, r3, #1
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007de0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	0a5b      	lsrs	r3, r3, #9
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <HAL_I2C_ER_IRQHandler+0x78>
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	0a1b      	lsrs	r3, r3, #8
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	f043 0302 	orr.w	r3, r3, #2
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007e0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	0a9b      	lsrs	r3, r3, #10
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d03f      	beq.n	8007e98 <HAL_I2C_ER_IRQHandler+0x104>
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d039      	beq.n	8007e98 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007e24:	7efb      	ldrb	r3, [r7, #27]
 8007e26:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e36:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007e3e:	7ebb      	ldrb	r3, [r7, #26]
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d112      	bne.n	8007e6a <HAL_I2C_ER_IRQHandler+0xd6>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10f      	bne.n	8007e6a <HAL_I2C_ER_IRQHandler+0xd6>
 8007e4a:	7cfb      	ldrb	r3, [r7, #19]
 8007e4c:	2b21      	cmp	r3, #33	; 0x21
 8007e4e:	d008      	beq.n	8007e62 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007e50:	7cfb      	ldrb	r3, [r7, #19]
 8007e52:	2b29      	cmp	r3, #41	; 0x29
 8007e54:	d005      	beq.n	8007e62 <HAL_I2C_ER_IRQHandler+0xce>
 8007e56:	7cfb      	ldrb	r3, [r7, #19]
 8007e58:	2b28      	cmp	r3, #40	; 0x28
 8007e5a:	d106      	bne.n	8007e6a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b21      	cmp	r3, #33	; 0x21
 8007e60:	d103      	bne.n	8007e6a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 ffe4 	bl	8008e30 <I2C_Slave_AF>
 8007e68:	e016      	b.n	8007e98 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e72:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	f043 0304 	orr.w	r3, r3, #4
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007e7c:	7efb      	ldrb	r3, [r7, #27]
 8007e7e:	2b10      	cmp	r3, #16
 8007e80:	d002      	beq.n	8007e88 <HAL_I2C_ER_IRQHandler+0xf4>
 8007e82:	7efb      	ldrb	r3, [r7, #27]
 8007e84:	2b40      	cmp	r3, #64	; 0x40
 8007e86:	d107      	bne.n	8007e98 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e96:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	0adb      	lsrs	r3, r3, #11
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <HAL_I2C_ER_IRQHandler+0x12e>
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	0a1b      	lsrs	r3, r3, #8
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d008      	beq.n	8007ec2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	f043 0308 	orr.w	r3, r3, #8
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007ec0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f81b 	bl	8008f10 <I2C_ITError>
  }
}
 8007eda:	bf00      	nop
 8007edc:	3728      	adds	r7, #40	; 0x28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
 8007f16:	4613      	mov	r3, r2
 8007f18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f80:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d150      	bne.n	8008032 <I2C_MasterTransmit_TXE+0xc8>
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b21      	cmp	r3, #33	; 0x21
 8007f94:	d14d      	bne.n	8008032 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b08      	cmp	r3, #8
 8007f9a:	d01d      	beq.n	8007fd8 <I2C_MasterTransmit_TXE+0x6e>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d01a      	beq.n	8007fd8 <I2C_MasterTransmit_TXE+0x6e>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fa8:	d016      	beq.n	8007fd8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fb8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2211      	movs	r2, #17
 8007fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7fc fe9b 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007fd6:	e060      	b.n	800809a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fe6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b40      	cmp	r3, #64	; 0x40
 8008010:	d107      	bne.n	8008022 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7ff ff8d 	bl	8007f3a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008020:	e03b      	b.n	800809a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7fc fe6e 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008030:	e033      	b.n	800809a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	2b21      	cmp	r3, #33	; 0x21
 8008036:	d005      	beq.n	8008044 <I2C_MasterTransmit_TXE+0xda>
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b40      	cmp	r3, #64	; 0x40
 800803c:	d12d      	bne.n	800809a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b22      	cmp	r3, #34	; 0x22
 8008042:	d12a      	bne.n	800809a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d108      	bne.n	8008060 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800805e:	e01c      	b.n	800809a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b40      	cmp	r3, #64	; 0x40
 800806a:	d103      	bne.n	8008074 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f898 	bl	80081a2 <I2C_MemoryTransmit_TXE_BTF>
}
 8008072:	e012      	b.n	800809a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	781a      	ldrb	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008098:	e7ff      	b.n	800809a <I2C_MasterTransmit_TXE+0x130>
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b21      	cmp	r3, #33	; 0x21
 80080ba:	d165      	bne.n	8008188 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d012      	beq.n	80080ec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80080ea:	e056      	b.n	800819a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d01d      	beq.n	800812e <I2C_MasterTransmit_BTF+0x8c>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d01a      	beq.n	800812e <I2C_MasterTransmit_BTF+0x8c>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080fe:	d016      	beq.n	800812e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800810e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2211      	movs	r2, #17
 8008114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fc fdf0 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
}
 800812c:	e035      	b.n	800819a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800813c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800814c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d107      	bne.n	8008178 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff fee2 	bl	8007f3a <HAL_I2C_MemTxCpltCallback>
}
 8008176:	e010      	b.n	800819a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f7fc fdc3 	bl	8004d0c <HAL_I2C_MasterTxCpltCallback>
}
 8008186:	e008      	b.n	800819a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	d102      	bne.n	800819a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f804 	bl	80081a2 <I2C_MemoryTransmit_TXE_BTF>
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d11d      	bne.n	80081ee <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d10b      	bne.n	80081d2 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ca:	1c9a      	adds	r2, r3, #2
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80081d0:	e048      	b.n	8008264 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	121b      	asrs	r3, r3, #8
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80081ec:	e03a      	b.n	8008264 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d10b      	bne.n	800820e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800820c:	e02a      	b.n	8008264 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008212:	2b02      	cmp	r3, #2
 8008214:	d126      	bne.n	8008264 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b22      	cmp	r3, #34	; 0x22
 8008220:	d108      	bne.n	8008234 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008230:	601a      	str	r2, [r3, #0]
}
 8008232:	e017      	b.n	8008264 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b21      	cmp	r3, #33	; 0x21
 800823e:	d111      	bne.n	8008264 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b22      	cmp	r3, #34	; 0x22
 8008282:	d173      	bne.n	800836c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008288:	b29b      	uxth	r3, r3
 800828a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d920      	bls.n	80082d4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	3b01      	subs	r3, #1
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d154      	bne.n	800836c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80082d2:	e04b      	b.n	800836c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d047      	beq.n	800836c <I2C_MasterReceive_RXNE+0xfc>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d002      	beq.n	80082e8 <I2C_MasterReceive_RXNE+0x78>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d141      	bne.n	800836c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082f6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008306:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d10a      	bne.n	8008358 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fc fcd1 	bl	8004cf8 <HAL_I2C_MemRxCpltCallback>
}
 8008356:	e009      	b.n	800836c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2212      	movs	r2, #18
 8008364:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7fc fce6 	bl	8004d38 <HAL_I2C_MasterRxCpltCallback>
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b04      	cmp	r3, #4
 800838a:	d11b      	bne.n	80083c4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800839a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691a      	ldr	r2, [r3, #16]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80083c2:	e0bd      	b.n	8008540 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d129      	bne.n	8008422 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083dc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d00a      	beq.n	80083fa <I2C_MasterReceive_BTF+0x86>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d007      	beq.n	80083fa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691a      	ldr	r2, [r3, #16]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	b2d2      	uxtb	r2, r2
 8008406:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008420:	e08e      	b.n	8008540 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008426:	b29b      	uxth	r3, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d176      	bne.n	800851a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d002      	beq.n	8008438 <I2C_MasterReceive_BTF+0xc4>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b10      	cmp	r3, #16
 8008436:	d108      	bne.n	800844a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	e019      	b.n	800847e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d002      	beq.n	8008456 <I2C_MasterReceive_BTF+0xe2>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d108      	bne.n	8008468 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e00a      	b.n	800847e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b10      	cmp	r3, #16
 800846c:	d007      	beq.n	800847e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800847c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691a      	ldr	r2, [r3, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	b2d2      	uxtb	r2, r2
 800848a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	691a      	ldr	r2, [r3, #16]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80084d8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	d10a      	bne.n	8008504 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fc fbfb 	bl	8004cf8 <HAL_I2C_MemRxCpltCallback>
}
 8008502:	e01d      	b.n	8008540 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2212      	movs	r2, #18
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7fc fc10 	bl	8004d38 <HAL_I2C_MasterRxCpltCallback>
}
 8008518:	e012      	b.n	8008540 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008536:	b29b      	uxth	r3, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008540:	bf00      	nop
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d117      	bne.n	800858c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	2b00      	cmp	r3, #0
 8008562:	d109      	bne.n	8008578 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008568:	b2db      	uxtb	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008574:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008576:	e067      	b.n	8008648 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f043 0301 	orr.w	r3, r3, #1
 8008582:	b2da      	uxtb	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	611a      	str	r2, [r3, #16]
}
 800858a:	e05d      	b.n	8008648 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008594:	d133      	bne.n	80085fe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b21      	cmp	r3, #33	; 0x21
 80085a0:	d109      	bne.n	80085b6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	461a      	mov	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085b2:	611a      	str	r2, [r3, #16]
 80085b4:	e008      	b.n	80085c8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f043 0301 	orr.w	r3, r3, #1
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d004      	beq.n	80085da <I2C_Master_SB+0x92>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d108      	bne.n	80085ec <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d032      	beq.n	8008648 <I2C_Master_SB+0x100>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d02d      	beq.n	8008648 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085fa:	605a      	str	r2, [r3, #4]
}
 80085fc:	e024      	b.n	8008648 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10e      	bne.n	8008624 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	b29b      	uxth	r3, r3
 800860c:	11db      	asrs	r3, r3, #7
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0306 	and.w	r3, r3, #6
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f063 030f 	orn	r3, r3, #15
 800861a:	b2da      	uxtb	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	611a      	str	r2, [r3, #16]
}
 8008622:	e011      	b.n	8008648 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008628:	2b01      	cmp	r3, #1
 800862a:	d10d      	bne.n	8008648 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008630:	b29b      	uxth	r3, r3
 8008632:	11db      	asrs	r3, r3, #7
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0306 	and.w	r3, r3, #6
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f063 030e 	orn	r3, r3, #14
 8008640:	b2da      	uxtb	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	611a      	str	r2, [r3, #16]
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008660:	b2da      	uxtb	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <I2C_Master_ADD10+0x24>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	d011      	beq.n	800869c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d104      	bne.n	800868c <I2C_Master_ADD10+0x38>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800869a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b091      	sub	sp, #68	; 0x44
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b22      	cmp	r3, #34	; 0x22
 80086d0:	f040 8169 	bne.w	80089a6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10f      	bne.n	80086fc <I2C_Master_ADDR+0x54>
 80086dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	d10b      	bne.n	80086fc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086e4:	2300      	movs	r3, #0
 80086e6:	633b      	str	r3, [r7, #48]	; 0x30
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	633b      	str	r3, [r7, #48]	; 0x30
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	633b      	str	r3, [r7, #48]	; 0x30
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	e160      	b.n	80089be <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008700:	2b00      	cmp	r3, #0
 8008702:	d11d      	bne.n	8008740 <I2C_Master_ADDR+0x98>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800870c:	d118      	bne.n	8008740 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800870e:	2300      	movs	r3, #0
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008732:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	651a      	str	r2, [r3, #80]	; 0x50
 800873e:	e13e      	b.n	80089be <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008744:	b29b      	uxth	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d113      	bne.n	8008772 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800874a:	2300      	movs	r3, #0
 800874c:	62bb      	str	r3, [r7, #40]	; 0x28
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	695b      	ldr	r3, [r3, #20]
 8008754:	62bb      	str	r3, [r7, #40]	; 0x28
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	e115      	b.n	800899e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008776:	b29b      	uxth	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	f040 808a 	bne.w	8008892 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008784:	d137      	bne.n	80087f6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008794:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a4:	d113      	bne.n	80087ce <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087b4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087b6:	2300      	movs	r3, #0
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	e0e7      	b.n	800899e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087ce:	2300      	movs	r3, #0
 80087d0:	623b      	str	r3, [r7, #32]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	623b      	str	r3, [r7, #32]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	623b      	str	r3, [r7, #32]
 80087e2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	e0d3      	b.n	800899e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d02e      	beq.n	800885a <I2C_Master_ADDR+0x1b2>
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d02b      	beq.n	800885a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	2b12      	cmp	r3, #18
 8008806:	d102      	bne.n	800880e <I2C_Master_ADDR+0x166>
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	2b01      	cmp	r3, #1
 800880c:	d125      	bne.n	800885a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	2b04      	cmp	r3, #4
 8008812:	d00e      	beq.n	8008832 <I2C_Master_ADDR+0x18a>
 8008814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008816:	2b02      	cmp	r3, #2
 8008818:	d00b      	beq.n	8008832 <I2C_Master_ADDR+0x18a>
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	2b10      	cmp	r3, #16
 800881e:	d008      	beq.n	8008832 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e007      	b.n	8008842 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008840:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	e0a1      	b.n	800899e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008868:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800886a:	2300      	movs	r3, #0
 800886c:	61bb      	str	r3, [r7, #24]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	61bb      	str	r3, [r7, #24]
 800887e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	e085      	b.n	800899e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008896:	b29b      	uxth	r3, r3
 8008898:	2b02      	cmp	r3, #2
 800889a:	d14d      	bne.n	8008938 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d016      	beq.n	80088d0 <I2C_Master_ADDR+0x228>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d013      	beq.n	80088d0 <I2C_Master_ADDR+0x228>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	2b10      	cmp	r3, #16
 80088ac:	d010      	beq.n	80088d0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088bc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	e007      	b.n	80088e0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088de:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ee:	d117      	bne.n	8008920 <I2C_Master_ADDR+0x278>
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088f6:	d00b      	beq.n	8008910 <I2C_Master_ADDR+0x268>
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d008      	beq.n	8008910 <I2C_Master_ADDR+0x268>
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	2b08      	cmp	r3, #8
 8008902:	d005      	beq.n	8008910 <I2C_Master_ADDR+0x268>
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	2b10      	cmp	r3, #16
 8008908:	d002      	beq.n	8008910 <I2C_Master_ADDR+0x268>
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	2b20      	cmp	r3, #32
 800890e:	d107      	bne.n	8008920 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800891e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	617b      	str	r3, [r7, #20]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	e032      	b.n	800899e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008946:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008956:	d117      	bne.n	8008988 <I2C_Master_ADDR+0x2e0>
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800895e:	d00b      	beq.n	8008978 <I2C_Master_ADDR+0x2d0>
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	2b01      	cmp	r3, #1
 8008964:	d008      	beq.n	8008978 <I2C_Master_ADDR+0x2d0>
 8008966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008968:	2b08      	cmp	r3, #8
 800896a:	d005      	beq.n	8008978 <I2C_Master_ADDR+0x2d0>
 800896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896e:	2b10      	cmp	r3, #16
 8008970:	d002      	beq.n	8008978 <I2C_Master_ADDR+0x2d0>
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	2b20      	cmp	r3, #32
 8008976:	d107      	bne.n	8008988 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008986:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008988:	2300      	movs	r3, #0
 800898a:	613b      	str	r3, [r7, #16]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	613b      	str	r3, [r7, #16]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80089a4:	e00b      	b.n	80089be <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	e7ff      	b.n	80089be <I2C_Master_ADDR+0x316>
 80089be:	bf00      	nop
 80089c0:	3744      	adds	r7, #68	; 0x44
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d02b      	beq.n	8008a3c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	781a      	ldrb	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d114      	bne.n	8008a3c <I2C_SlaveTransmit_TXE+0x72>
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	2b29      	cmp	r3, #41	; 0x29
 8008a16:	d111      	bne.n	8008a3c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a26:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2221      	movs	r2, #33	; 0x21
 8008a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2228      	movs	r2, #40	; 0x28
 8008a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f7ff fa53 	bl	8007ee2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d011      	beq.n	8008a7a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d02c      	beq.n	8008afa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d114      	bne.n	8008afa <I2C_SlaveReceive_RXNE+0x74>
 8008ad0:	7bfb      	ldrb	r3, [r7, #15]
 8008ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad4:	d111      	bne.n	8008afa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ae4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2222      	movs	r2, #34	; 0x22
 8008aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2228      	movs	r2, #40	; 0x28
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7ff f9fe 	bl	8007ef6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d012      	beq.n	8008b3a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	b2d2      	uxtb	r2, r2
 8008b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b60:	2b28      	cmp	r3, #40	; 0x28
 8008b62:	d127      	bne.n	8008bb4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685a      	ldr	r2, [r3, #4]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b72:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	089b      	lsrs	r3, r3, #2
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	09db      	lsrs	r3, r3, #7
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d103      	bne.n	8008b98 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	81bb      	strh	r3, [r7, #12]
 8008b96:	e002      	b.n	8008b9e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008ba6:	89ba      	ldrh	r2, [r7, #12]
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff f9ac 	bl	8007f0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008bb2:	e008      	b.n	8008bc6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f06f 0202 	mvn.w	r2, #2
 8008bbc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
	...

08008bd0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bde:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008bee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60bb      	str	r3, [r7, #8]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	60bb      	str	r3, [r7, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f042 0201 	orr.w	r2, r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c1c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c2c:	d172      	bne.n	8008d14 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	2b22      	cmp	r3, #34	; 0x22
 8008c32:	d002      	beq.n	8008c3a <I2C_Slave_STOPF+0x6a>
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b2a      	cmp	r3, #42	; 0x2a
 8008c38:	d135      	bne.n	8008ca6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c56:	f043 0204 	orr.w	r2, r3, #4
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fd fe74 	bl	8006960 <HAL_DMA_GetState>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d049      	beq.n	8008d12 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c82:	4a69      	ldr	r2, [pc, #420]	; (8008e28 <I2C_Slave_STOPF+0x258>)
 8008c84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fd fcbc 	bl	8006608 <HAL_DMA_Abort_IT>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d03d      	beq.n	8008d12 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008ca4:	e035      	b.n	8008d12 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f043 0204 	orr.w	r2, r3, #4
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fd fe3e 	bl	8006960 <HAL_DMA_GetState>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d014      	beq.n	8008d14 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cee:	4a4e      	ldr	r2, [pc, #312]	; (8008e28 <I2C_Slave_STOPF+0x258>)
 8008cf0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fd fc86 	bl	8006608 <HAL_DMA_Abort_IT>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d008      	beq.n	8008d14 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	e000      	b.n	8008d14 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d12:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d03e      	beq.n	8008d9c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d112      	bne.n	8008d52 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691a      	ldr	r2, [r3, #16]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	d112      	bne.n	8008d86 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691a      	ldr	r2, [r3, #16]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	b2d2      	uxtb	r2, r2
 8008d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	f043 0204 	orr.w	r2, r3, #4
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f8b3 	bl	8008f10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008daa:	e039      	b.n	8008e20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	2b2a      	cmp	r3, #42	; 0x2a
 8008db0:	d109      	bne.n	8008dc6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2228      	movs	r2, #40	; 0x28
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff f898 	bl	8007ef6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b28      	cmp	r3, #40	; 0x28
 8008dd0:	d111      	bne.n	8008df6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a15      	ldr	r2, [pc, #84]	; (8008e2c <I2C_Slave_STOPF+0x25c>)
 8008dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7ff f899 	bl	8007f26 <HAL_I2C_ListenCpltCallback>
}
 8008df4:	e014      	b.n	8008e20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	2b22      	cmp	r3, #34	; 0x22
 8008dfc:	d002      	beq.n	8008e04 <I2C_Slave_STOPF+0x234>
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b22      	cmp	r3, #34	; 0x22
 8008e02:	d10d      	bne.n	8008e20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7ff f86b 	bl	8007ef6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008e20:	bf00      	nop
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	0800943d 	.word	0x0800943d
 8008e2c:	ffff0000 	.word	0xffff0000

08008e30 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2b08      	cmp	r3, #8
 8008e4a:	d002      	beq.n	8008e52 <I2C_Slave_AF+0x22>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d129      	bne.n	8008ea6 <I2C_Slave_AF+0x76>
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	2b28      	cmp	r3, #40	; 0x28
 8008e56:	d126      	bne.n	8008ea6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a2c      	ldr	r2, [pc, #176]	; (8008f0c <I2C_Slave_AF+0xdc>)
 8008e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685a      	ldr	r2, [r3, #4]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008e6c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e76:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e86:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff f841 	bl	8007f26 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008ea4:	e02e      	b.n	8008f04 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	2b21      	cmp	r3, #33	; 0x21
 8008eaa:	d126      	bne.n	8008efa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a17      	ldr	r2, [pc, #92]	; (8008f0c <I2C_Slave_AF+0xdc>)
 8008eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2221      	movs	r2, #33	; 0x21
 8008eb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ed6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ee0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ef0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fe fff5 	bl	8007ee2 <HAL_I2C_SlaveTxCpltCallback>
}
 8008ef8:	e004      	b.n	8008f04 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f02:	615a      	str	r2, [r3, #20]
}
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	ffff0000 	.word	0xffff0000

08008f10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	d10a      	bne.n	8008f42 <I2C_ITError+0x32>
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	2b22      	cmp	r3, #34	; 0x22
 8008f30:	d107      	bne.n	8008f42 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f48:	2b28      	cmp	r3, #40	; 0x28
 8008f4a:	d107      	bne.n	8008f5c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2228      	movs	r2, #40	; 0x28
 8008f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008f5a:	e015      	b.n	8008f88 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f6a:	d006      	beq.n	8008f7a <I2C_ITError+0x6a>
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b60      	cmp	r3, #96	; 0x60
 8008f70:	d003      	beq.n	8008f7a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f96:	d162      	bne.n	800905e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fa6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d020      	beq.n	8008ff8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fba:	4a6a      	ldr	r2, [pc, #424]	; (8009164 <I2C_ITError+0x254>)
 8008fbc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fd fb20 	bl	8006608 <HAL_DMA_Abort_IT>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8089 	beq.w	80090e2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0201 	bic.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2220      	movs	r2, #32
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	4798      	blx	r3
 8008ff6:	e074      	b.n	80090e2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffc:	4a59      	ldr	r2, [pc, #356]	; (8009164 <I2C_ITError+0x254>)
 8008ffe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	4618      	mov	r0, r3
 8009006:	f7fd faff 	bl	8006608 <HAL_DMA_Abort_IT>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d068      	beq.n	80090e2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901a:	2b40      	cmp	r3, #64	; 0x40
 800901c:	d10b      	bne.n	8009036 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	691a      	ldr	r2, [r3, #16]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f022 0201 	bic.w	r2, r2, #1
 8009044:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	e041      	b.n	80090e2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b60      	cmp	r3, #96	; 0x60
 8009068:	d125      	bne.n	80090b6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009082:	2b40      	cmp	r3, #64	; 0x40
 8009084:	d10b      	bne.n	800909e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	691a      	ldr	r2, [r3, #16]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	b2d2      	uxtb	r2, r2
 8009092:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0201 	bic.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fb fe5e 	bl	8004d70 <HAL_I2C_AbortCpltCallback>
 80090b4:	e015      	b.n	80090e2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	d10b      	bne.n	80090dc <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	b2d2      	uxtb	r2, r2
 80090d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	1c5a      	adds	r2, r3, #1
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7fb fe51 	bl	8004d84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10e      	bne.n	8009110 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d109      	bne.n	8009110 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009102:	2b00      	cmp	r3, #0
 8009104:	d104      	bne.n	8009110 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800911e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009126:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b04      	cmp	r3, #4
 8009132:	d113      	bne.n	800915c <I2C_ITError+0x24c>
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	2b28      	cmp	r3, #40	; 0x28
 8009138:	d110      	bne.n	800915c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a0a      	ldr	r2, [pc, #40]	; (8009168 <I2C_ITError+0x258>)
 800913e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2220      	movs	r2, #32
 800914a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7fe fee5 	bl	8007f26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	0800943d 	.word	0x0800943d
 8009168:	ffff0000 	.word	0xffff0000

0800916c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af02      	add	r7, sp, #8
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	607a      	str	r2, [r7, #4]
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	460b      	mov	r3, r1
 800917a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b08      	cmp	r3, #8
 8009186:	d006      	beq.n	8009196 <I2C_MasterRequestWrite+0x2a>
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d003      	beq.n	8009196 <I2C_MasterRequestWrite+0x2a>
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009194:	d108      	bne.n	80091a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	e00b      	b.n	80091c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ac:	2b12      	cmp	r3, #18
 80091ae:	d107      	bne.n	80091c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 f9b4 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00c      	beq.n	80091f2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e035      	b.n	800925e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091fa:	d108      	bne.n	800920e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091fc:	897b      	ldrh	r3, [r7, #10]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	461a      	mov	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800920a:	611a      	str	r2, [r3, #16]
 800920c:	e01b      	b.n	8009246 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800920e:	897b      	ldrh	r3, [r7, #10]
 8009210:	11db      	asrs	r3, r3, #7
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 0306 	and.w	r3, r3, #6
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f063 030f 	orn	r3, r3, #15
 800921e:	b2da      	uxtb	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	490f      	ldr	r1, [pc, #60]	; (8009268 <I2C_MasterRequestWrite+0xfc>)
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f9db 	bl	80095e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e010      	b.n	800925e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800923c:	897b      	ldrh	r3, [r7, #10]
 800923e:	b2da      	uxtb	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	4908      	ldr	r1, [pc, #32]	; (800926c <I2C_MasterRequestWrite+0x100>)
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f9cb 	bl	80095e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e000      	b.n	800925e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	00010008 	.word	0x00010008
 800926c:	00010002 	.word	0x00010002

08009270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af02      	add	r7, sp, #8
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	461a      	mov	r2, r3
 800927e:	4603      	mov	r3, r0
 8009280:	817b      	strh	r3, [r7, #10]
 8009282:	460b      	mov	r3, r1
 8009284:	813b      	strh	r3, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	6a3b      	ldr	r3, [r7, #32]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 f93f 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00c      	beq.n	80092dc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e0a9      	b.n	8009430 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80092dc:	897b      	ldrh	r3, [r7, #10]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80092ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ee:	6a3a      	ldr	r2, [r7, #32]
 80092f0:	4951      	ldr	r1, [pc, #324]	; (8009438 <I2C_RequestMemoryRead+0x1c8>)
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 f978 	bl	80095e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d001      	beq.n	8009302 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e096      	b.n	8009430 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009302:	2300      	movs	r3, #0
 8009304:	617b      	str	r3, [r7, #20]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	695b      	ldr	r3, [r3, #20]
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931a:	6a39      	ldr	r1, [r7, #32]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f9e2 	bl	80096e6 <I2C_WaitOnTXEFlagUntilTimeout>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00d      	beq.n	8009344 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932c:	2b04      	cmp	r3, #4
 800932e:	d107      	bne.n	8009340 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800933e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	e075      	b.n	8009430 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009344:	88fb      	ldrh	r3, [r7, #6]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d105      	bne.n	8009356 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800934a:	893b      	ldrh	r3, [r7, #8]
 800934c:	b2da      	uxtb	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	611a      	str	r2, [r3, #16]
 8009354:	e021      	b.n	800939a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009356:	893b      	ldrh	r3, [r7, #8]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	b29b      	uxth	r3, r3
 800935c:	b2da      	uxtb	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009366:	6a39      	ldr	r1, [r7, #32]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f9bc 	bl	80096e6 <I2C_WaitOnTXEFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00d      	beq.n	8009390 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	2b04      	cmp	r3, #4
 800937a:	d107      	bne.n	800938c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800938a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e04f      	b.n	8009430 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009390:	893b      	ldrh	r3, [r7, #8]
 8009392:	b2da      	uxtb	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800939a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800939c:	6a39      	ldr	r1, [r7, #32]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f9a1 	bl	80096e6 <I2C_WaitOnTXEFlagUntilTimeout>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00d      	beq.n	80093c6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d107      	bne.n	80093c2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e034      	b.n	8009430 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	2200      	movs	r2, #0
 80093de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f8a9 	bl	800953a <I2C_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00c      	beq.n	8009408 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e013      	b.n	8009430 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009408:	897b      	ldrh	r3, [r7, #10]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	b2da      	uxtb	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	4906      	ldr	r1, [pc, #24]	; (8009438 <I2C_RequestMemoryRead+0x1c8>)
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 f8e2 	bl	80095e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e000      	b.n	8009430 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	00010002 	.word	0x00010002

0800943c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009448:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009450:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945e:	2200      	movs	r2, #0
 8009460:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	2200      	movs	r2, #0
 8009470:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009480:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009494:	2200      	movs	r2, #0
 8009496:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a4:	2200      	movs	r2, #0
 80094a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0201 	bic.w	r2, r2, #1
 80094b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	2b60      	cmp	r3, #96	; 0x60
 80094c2:	d10e      	bne.n	80094e2 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7fb fc48 	bl	8004d70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094e0:	e027      	b.n	8009532 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80094e8:	2b28      	cmp	r3, #40	; 0x28
 80094ea:	d117      	bne.n	800951c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0201 	orr.w	r2, r2, #1
 80094fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800950a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2228      	movs	r2, #40	; 0x28
 8009516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800951a:	e007      	b.n	800952c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7fb fc29 	bl	8004d84 <HAL_I2C_ErrorCallback>
}
 8009532:	bf00      	nop
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	603b      	str	r3, [r7, #0]
 8009546:	4613      	mov	r3, r2
 8009548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800954a:	e025      	b.n	8009598 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d021      	beq.n	8009598 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009554:	f7fc fe6a 	bl	800622c <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d302      	bcc.n	800956a <I2C_WaitOnFlagUntilTimeout+0x30>
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d116      	bne.n	8009598 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2220      	movs	r2, #32
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	f043 0220 	orr.w	r2, r3, #32
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e023      	b.n	80095e0 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	0c1b      	lsrs	r3, r3, #16
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d10d      	bne.n	80095be <I2C_WaitOnFlagUntilTimeout+0x84>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	43da      	mvns	r2, r3
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4013      	ands	r3, r2
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	e00c      	b.n	80095d8 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	43da      	mvns	r2, r3
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	4013      	ands	r3, r2
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bf0c      	ite	eq
 80095d0:	2301      	moveq	r3, #1
 80095d2:	2300      	movne	r3, #0
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	461a      	mov	r2, r3
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d0b6      	beq.n	800954c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095f6:	e051      	b.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009606:	d123      	bne.n	8009650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009616:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963c:	f043 0204 	orr.w	r2, r3, #4
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e046      	b.n	80096de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009656:	d021      	beq.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009658:	f7fc fde8 	bl	800622c <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	429a      	cmp	r2, r3
 8009666:	d302      	bcc.n	800966e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d116      	bne.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009688:	f043 0220 	orr.w	r2, r3, #32
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e020      	b.n	80096de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	0c1b      	lsrs	r3, r3, #16
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d10c      	bne.n	80096c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	43da      	mvns	r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4013      	ands	r3, r2
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bf14      	ite	ne
 80096b8:	2301      	movne	r3, #1
 80096ba:	2300      	moveq	r3, #0
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	e00b      	b.n	80096d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	43da      	mvns	r2, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4013      	ands	r3, r2
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bf14      	ite	ne
 80096d2:	2301      	movne	r3, #1
 80096d4:	2300      	moveq	r3, #0
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d18d      	bne.n	80095f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096f2:	e02d      	b.n	8009750 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f8ce 	bl	8009896 <I2C_IsAcknowledgeFailed>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e02d      	b.n	8009760 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970a:	d021      	beq.n	8009750 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800970c:	f7fc fd8e 	bl	800622c <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	429a      	cmp	r2, r3
 800971a:	d302      	bcc.n	8009722 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d116      	bne.n	8009750 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2220      	movs	r2, #32
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	f043 0220 	orr.w	r2, r3, #32
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e007      	b.n	8009760 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	695b      	ldr	r3, [r3, #20]
 8009756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975a:	2b80      	cmp	r3, #128	; 0x80
 800975c:	d1ca      	bne.n	80096f4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009774:	e02d      	b.n	80097d2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 f88d 	bl	8009896 <I2C_IsAcknowledgeFailed>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e02d      	b.n	80097e2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978c:	d021      	beq.n	80097d2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800978e:	f7fc fd4d 	bl	800622c <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	429a      	cmp	r2, r3
 800979c:	d302      	bcc.n	80097a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d116      	bne.n	80097d2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	f043 0220 	orr.w	r2, r3, #32
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e007      	b.n	80097e2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b04      	cmp	r3, #4
 80097de:	d1ca      	bne.n	8009776 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097f6:	e042      	b.n	800987e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f003 0310 	and.w	r3, r3, #16
 8009802:	2b10      	cmp	r3, #16
 8009804:	d119      	bne.n	800983a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f06f 0210 	mvn.w	r2, #16
 800980e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2200      	movs	r2, #0
 8009814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2220      	movs	r2, #32
 800981a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e029      	b.n	800988e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800983a:	f7fc fcf7 	bl	800622c <HAL_GetTick>
 800983e:	4602      	mov	r2, r0
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	d302      	bcc.n	8009850 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d116      	bne.n	800987e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2220      	movs	r2, #32
 800985a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	f043 0220 	orr.w	r2, r3, #32
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e007      	b.n	800988e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009888:	2b40      	cmp	r3, #64	; 0x40
 800988a:	d1b5      	bne.n	80097f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ac:	d11b      	bne.n	80098e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	f043 0204 	orr.w	r2, r3, #4
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e000      	b.n	80098e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009904:	d103      	bne.n	800990e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800990c:	e007      	b.n	800991e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009916:	d102      	bne.n	800991e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2208      	movs	r2, #8
 800991c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800992a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992c:	b08f      	sub	sp, #60	; 0x3c
 800992e:	af0a      	add	r7, sp, #40	; 0x28
 8009930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e10f      	b.n	8009b5c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f006 fa38 	bl	800fdcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2203      	movs	r2, #3
 8009960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f003 fa6d 	bl	800ce5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	603b      	str	r3, [r7, #0]
 8009986:	687e      	ldr	r6, [r7, #4]
 8009988:	466d      	mov	r5, sp
 800998a:	f106 0410 	add.w	r4, r6, #16
 800998e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009996:	e894 0003 	ldmia.w	r4, {r0, r1}
 800999a:	e885 0003 	stmia.w	r5, {r0, r1}
 800999e:	1d33      	adds	r3, r6, #4
 80099a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099a2:	6838      	ldr	r0, [r7, #0]
 80099a4:	f003 f944 	bl	800cc30 <USB_CoreInit>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d005      	beq.n	80099ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2202      	movs	r2, #2
 80099b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e0d0      	b.n	8009b5c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2100      	movs	r1, #0
 80099c0:	4618      	mov	r0, r3
 80099c2:	f003 fa5b 	bl	800ce7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
 80099ca:	e04a      	b.n	8009a62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80099cc:	7bfa      	ldrb	r2, [r7, #15]
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	4613      	mov	r3, r2
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	333d      	adds	r3, #61	; 0x3d
 80099dc:	2201      	movs	r2, #1
 80099de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80099e0:	7bfa      	ldrb	r2, [r7, #15]
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	4613      	mov	r3, r2
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	440b      	add	r3, r1
 80099ee:	333c      	adds	r3, #60	; 0x3c
 80099f0:	7bfa      	ldrb	r2, [r7, #15]
 80099f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80099f4:	7bfa      	ldrb	r2, [r7, #15]
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	b298      	uxth	r0, r3
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	4613      	mov	r3, r2
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	3342      	adds	r3, #66	; 0x42
 8009a08:	4602      	mov	r2, r0
 8009a0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009a0c:	7bfa      	ldrb	r2, [r7, #15]
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	4613      	mov	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	1a9b      	subs	r3, r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	333f      	adds	r3, #63	; 0x3f
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009a20:	7bfa      	ldrb	r2, [r7, #15]
 8009a22:	6879      	ldr	r1, [r7, #4]
 8009a24:	4613      	mov	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	1a9b      	subs	r3, r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	3344      	adds	r3, #68	; 0x44
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009a34:	7bfa      	ldrb	r2, [r7, #15]
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	00db      	lsls	r3, r3, #3
 8009a3c:	1a9b      	subs	r3, r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	440b      	add	r3, r1
 8009a42:	3348      	adds	r3, #72	; 0x48
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a48:	7bfa      	ldrb	r2, [r7, #15]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	3350      	adds	r3, #80	; 0x50
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	73fb      	strb	r3, [r7, #15]
 8009a62:	7bfa      	ldrb	r2, [r7, #15]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d3af      	bcc.n	80099cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
 8009a70:	e044      	b.n	8009afc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a72:	7bfa      	ldrb	r2, [r7, #15]
 8009a74:	6879      	ldr	r1, [r7, #4]
 8009a76:	4613      	mov	r3, r2
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009a84:	2200      	movs	r2, #0
 8009a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a88:	7bfa      	ldrb	r2, [r7, #15]
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	1a9b      	subs	r3, r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	440b      	add	r3, r1
 8009a96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009a9a:	7bfa      	ldrb	r2, [r7, #15]
 8009a9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a9e:	7bfa      	ldrb	r2, [r7, #15]
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	1a9b      	subs	r3, r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	440b      	add	r3, r1
 8009aac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009ab4:	7bfa      	ldrb	r2, [r7, #15]
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	1a9b      	subs	r3, r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009aca:	7bfa      	ldrb	r2, [r7, #15]
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	1a9b      	subs	r3, r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	440b      	add	r3, r1
 8009ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009ae0:	7bfa      	ldrb	r2, [r7, #15]
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	1a9b      	subs	r3, r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	440b      	add	r3, r1
 8009aee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	3301      	adds	r3, #1
 8009afa:	73fb      	strb	r3, [r7, #15]
 8009afc:	7bfa      	ldrb	r2, [r7, #15]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d3b5      	bcc.n	8009a72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	687e      	ldr	r6, [r7, #4]
 8009b0e:	466d      	mov	r5, sp
 8009b10:	f106 0410 	add.w	r4, r6, #16
 8009b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b20:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b24:	1d33      	adds	r3, r6, #4
 8009b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b28:	6838      	ldr	r0, [r7, #0]
 8009b2a:	f003 f9d1 	bl	800ced0 <USB_DevInit>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2202      	movs	r2, #2
 8009b38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e00d      	b.n	8009b5c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f004 fa10 	bl	800df7a <USB_DevDisconnect>

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_PCD_Start+0x1c>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e020      	b.n	8009bc2 <HAL_PCD_Start+0x5e>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d109      	bne.n	8009ba4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d005      	beq.n	8009ba4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f004 f9ce 	bl	800df4a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f003 f940 	bl	800ce38 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009bca:	b590      	push	{r4, r7, lr}
 8009bcc:	b08d      	sub	sp, #52	; 0x34
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f004 fa75 	bl	800e0d0 <USB_GetMode>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 839d 	bne.w	800a328 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f004 f9d9 	bl	800dfaa <USB_ReadInterrupts>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 8393 	beq.w	800a326 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f004 f9d0 	bl	800dfaa <USB_ReadInterrupts>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d107      	bne.n	8009c24 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	695a      	ldr	r2, [r3, #20]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f002 0202 	and.w	r2, r2, #2
 8009c22:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f004 f9be 	bl	800dfaa <USB_ReadInterrupts>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b10      	cmp	r3, #16
 8009c36:	d161      	bne.n	8009cfc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0210 	bic.w	r2, r2, #16
 8009c46:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	4613      	mov	r3, r2
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	1a9b      	subs	r3, r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	4413      	add	r3, r2
 8009c64:	3304      	adds	r3, #4
 8009c66:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	0c5b      	lsrs	r3, r3, #17
 8009c6c:	f003 030f 	and.w	r3, r3, #15
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d124      	bne.n	8009cbe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d035      	beq.n	8009cec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	091b      	lsrs	r3, r3, #4
 8009c88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	461a      	mov	r2, r3
 8009c92:	6a38      	ldr	r0, [r7, #32]
 8009c94:	f004 f836 	bl	800dd04 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	68da      	ldr	r2, [r3, #12]
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	091b      	lsrs	r3, r3, #4
 8009ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ca4:	441a      	add	r2, r3
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	699a      	ldr	r2, [r3, #24]
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	091b      	lsrs	r3, r3, #4
 8009cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cb6:	441a      	add	r2, r3
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	619a      	str	r2, [r3, #24]
 8009cbc:	e016      	b.n	8009cec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	0c5b      	lsrs	r3, r3, #17
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	2b06      	cmp	r3, #6
 8009cc8:	d110      	bne.n	8009cec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009cd0:	2208      	movs	r2, #8
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6a38      	ldr	r0, [r7, #32]
 8009cd6:	f004 f815 	bl	800dd04 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	699a      	ldr	r2, [r3, #24]
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	091b      	lsrs	r3, r3, #4
 8009ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ce6:	441a      	add	r2, r3
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f042 0210 	orr.w	r2, r2, #16
 8009cfa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f004 f952 	bl	800dfaa <USB_ReadInterrupts>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d10:	d16e      	bne.n	8009df0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009d12:	2300      	movs	r3, #0
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f004 f958 	bl	800dfd0 <USB_ReadDevAllOutEpInterrupt>
 8009d20:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009d22:	e062      	b.n	8009dea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d057      	beq.n	8009dde <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f004 f97d 	bl	800e038 <USB_ReadDevOutEPInterrupt>
 8009d3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00c      	beq.n	8009d64 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d56:	461a      	mov	r2, r3
 8009d58:	2301      	movs	r3, #1
 8009d5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fdb0 	bl	800a8c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	015a      	lsls	r2, r3, #5
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	4413      	add	r3, r2
 8009d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 feaa 	bl	800aadc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f003 0310 	and.w	r3, r3, #16
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d008      	beq.n	8009da4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	015a      	lsls	r2, r3, #5
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9e:	461a      	mov	r2, r3
 8009da0:	2310      	movs	r3, #16
 8009da2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d008      	beq.n	8009dc0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dba:	461a      	mov	r2, r3
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	015a      	lsls	r2, r3, #5
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ddc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	3301      	adds	r3, #1
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d199      	bne.n	8009d24 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f004 f8d8 	bl	800dfaa <USB_ReadInterrupts>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e04:	f040 80c0 	bne.w	8009f88 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f004 f8f9 	bl	800e004 <USB_ReadDevAllInEpInterrupt>
 8009e12:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009e18:	e0b2      	b.n	8009f80 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 80a7 	beq.w	8009f74 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2c:	b2d2      	uxtb	r2, r2
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f004 f91f 	bl	800e074 <USB_ReadDevInEPInterrupt>
 8009e36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d057      	beq.n	8009ef2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	2201      	movs	r2, #1
 8009e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	43db      	mvns	r3, r3
 8009e5c:	69f9      	ldr	r1, [r7, #28]
 8009e5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e62:	4013      	ands	r3, r2
 8009e64:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e72:	461a      	mov	r2, r3
 8009e74:	2301      	movs	r3, #1
 8009e76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d132      	bne.n	8009ee6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e84:	4613      	mov	r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	1a9b      	subs	r3, r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	3348      	adds	r3, #72	; 0x48
 8009e90:	6819      	ldr	r1, [r3, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e96:	4613      	mov	r3, r2
 8009e98:	00db      	lsls	r3, r3, #3
 8009e9a:	1a9b      	subs	r3, r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4403      	add	r3, r0
 8009ea0:	3344      	adds	r3, #68	; 0x44
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4419      	add	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eaa:	4613      	mov	r3, r2
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	1a9b      	subs	r3, r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4403      	add	r3, r0
 8009eb4:	3348      	adds	r3, #72	; 0x48
 8009eb6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d113      	bne.n	8009ee6 <HAL_PCD_IRQHandler+0x31c>
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	440b      	add	r3, r1
 8009ecc:	3350      	adds	r3, #80	; 0x50
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d108      	bne.n	8009ee6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ede:	461a      	mov	r2, r3
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	f004 f927 	bl	800e134 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f005 ffee 	bl	800fece <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f003 0308 	and.w	r3, r3, #8
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d008      	beq.n	8009f0e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f08:	461a      	mov	r2, r3
 8009f0a:	2308      	movs	r3, #8
 8009f0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d008      	beq.n	8009f2a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f24:	461a      	mov	r2, r3
 8009f26:	2310      	movs	r3, #16
 8009f28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d008      	beq.n	8009f46 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f40:	461a      	mov	r2, r3
 8009f42:	2340      	movs	r3, #64	; 0x40
 8009f44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d008      	beq.n	8009f62 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	2302      	movs	r3, #2
 8009f60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fc1b 	bl	800a7aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	3301      	adds	r3, #1
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7c:	085b      	lsrs	r3, r3, #1
 8009f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f47f af49 	bne.w	8009e1a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f004 f80c 	bl	800dfaa <USB_ReadInterrupts>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f9c:	d122      	bne.n	8009fe4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fac:	f023 0301 	bic.w	r3, r3, #1
 8009fb0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d108      	bne.n	8009fce <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fe26 	bl	800ac18 <HAL_PCDEx_LPM_Callback>
 8009fcc:	e002      	b.n	8009fd4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f005 fff4 	bl	800ffbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	695a      	ldr	r2, [r3, #20]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f003 ffde 	bl	800dfaa <USB_ReadInterrupts>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ff8:	d112      	bne.n	800a020 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b01      	cmp	r3, #1
 800a008:	d102      	bne.n	800a010 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f005 ffb0 	bl	800ff70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	695a      	ldr	r2, [r3, #20]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a01e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4618      	mov	r0, r3
 800a026:	f003 ffc0 	bl	800dfaa <USB_ReadInterrupts>
 800a02a:	4603      	mov	r3, r0
 800a02c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a034:	f040 80c7 	bne.w	800a1c6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a046:	f023 0301 	bic.w	r3, r3, #1
 800a04a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2110      	movs	r1, #16
 800a052:	4618      	mov	r0, r3
 800a054:	f003 f8a0 	bl	800d198 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a058:	2300      	movs	r3, #0
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a05c:	e056      	b.n	800a10c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06a:	461a      	mov	r2, r3
 800a06c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a070:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a082:	0151      	lsls	r1, r2, #5
 800a084:	69fa      	ldr	r2, [r7, #28]
 800a086:	440a      	add	r2, r1
 800a088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a08c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a090:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0a2:	0151      	lsls	r1, r2, #5
 800a0a4:	69fa      	ldr	r2, [r7, #28]
 800a0a6:	440a      	add	r2, r1
 800a0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	015a      	lsls	r2, r3, #5
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0d6:	0151      	lsls	r1, r2, #5
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	440a      	add	r2, r1
 800a0dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f6:	0151      	lsls	r1, r2, #5
 800a0f8:	69fa      	ldr	r2, [r7, #28]
 800a0fa:	440a      	add	r2, r1
 800a0fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a100:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a104:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a108:	3301      	adds	r3, #1
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a112:	429a      	cmp	r2, r3
 800a114:	d3a3      	bcc.n	800a05e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	69fa      	ldr	r2, [r7, #28]
 800a120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a124:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a128:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d016      	beq.n	800a160 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a142:	f043 030b 	orr.w	r3, r3, #11
 800a146:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a158:	f043 030b 	orr.w	r3, r3, #11
 800a15c:	6453      	str	r3, [r2, #68]	; 0x44
 800a15e:	e015      	b.n	800a18c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a16e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a172:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a176:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a186:	f043 030b 	orr.w	r3, r3, #11
 800a18a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a19a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a19e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f003 ffbf 	bl	800e134 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	695a      	ldr	r2, [r3, #20]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a1c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f003 feed 	bl	800dfaa <USB_ReadInterrupts>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1da:	d124      	bne.n	800a226 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f003 ff83 	bl	800e0ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f003 f835 	bl	800d25a <USB_GetDevSpeed>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681c      	ldr	r4, [r3, #0]
 800a1fc:	f001 f944 	bl	800b488 <HAL_RCC_GetHCLKFreq>
 800a200:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a206:	b2db      	uxtb	r3, r3
 800a208:	461a      	mov	r2, r3
 800a20a:	4620      	mov	r0, r4
 800a20c:	f002 fd72 	bl	800ccf4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f005 fe84 	bl	800ff1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	695a      	ldr	r2, [r3, #20]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a224:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f003 febd 	bl	800dfaa <USB_ReadInterrupts>
 800a230:	4603      	mov	r3, r0
 800a232:	f003 0308 	and.w	r3, r3, #8
 800a236:	2b08      	cmp	r3, #8
 800a238:	d10a      	bne.n	800a250 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f005 fe61 	bl	800ff02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695a      	ldr	r2, [r3, #20]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f002 0208 	and.w	r2, r2, #8
 800a24e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4618      	mov	r0, r3
 800a256:	f003 fea8 	bl	800dfaa <USB_ReadInterrupts>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a264:	d10f      	bne.n	800a286 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f005 fec3 	bl	800fffc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695a      	ldr	r2, [r3, #20]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f003 fe8d 	bl	800dfaa <USB_ReadInterrupts>
 800a290:	4603      	mov	r3, r0
 800a292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a29a:	d10f      	bne.n	800a2bc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f005 fe96 	bl	800ffd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695a      	ldr	r2, [r3, #20]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a2ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f003 fe72 	bl	800dfaa <USB_ReadInterrupts>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d0:	d10a      	bne.n	800a2e8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f005 fea4 	bl	8010020 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a2e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f003 fe5c 	bl	800dfaa <USB_ReadInterrupts>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d115      	bne.n	800a328 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f005 fe94 	bl	801003c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6859      	ldr	r1, [r3, #4]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	430a      	orrs	r2, r1
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	e000      	b.n	800a328 <HAL_PCD_IRQHandler+0x75e>
      return;
 800a326:	bf00      	nop
    }
  }
}
 800a328:	3734      	adds	r7, #52	; 0x34
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd90      	pop	{r4, r7, pc}

0800a32e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a340:	2b01      	cmp	r3, #1
 800a342:	d101      	bne.n	800a348 <HAL_PCD_SetAddress+0x1a>
 800a344:	2302      	movs	r3, #2
 800a346:	e013      	b.n	800a370 <HAL_PCD_SetAddress+0x42>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	4618      	mov	r0, r3
 800a362:	f003 fdcc 	bl	800defe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	461a      	mov	r2, r3
 800a386:	4603      	mov	r3, r0
 800a388:	70fb      	strb	r3, [r7, #3]
 800a38a:	460b      	mov	r3, r1
 800a38c:	803b      	strh	r3, [r7, #0]
 800a38e:	4613      	mov	r3, r2
 800a390:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da0f      	bge.n	800a3be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	f003 020f 	and.w	r2, r3, #15
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	3338      	adds	r3, #56	; 0x38
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	705a      	strb	r2, [r3, #1]
 800a3bc:	e00f      	b.n	800a3de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3be:	78fb      	ldrb	r3, [r7, #3]
 800a3c0:	f003 020f 	and.w	r2, r3, #15
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	1a9b      	subs	r3, r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a3de:	78fb      	ldrb	r3, [r7, #3]
 800a3e0:	f003 030f 	and.w	r3, r3, #15
 800a3e4:	b2da      	uxtb	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a3ea:	883a      	ldrh	r2, [r7, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	78ba      	ldrb	r2, [r7, #2]
 800a3f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	785b      	ldrb	r3, [r3, #1]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d004      	beq.n	800a408 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	b29a      	uxth	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a408:	78bb      	ldrb	r3, [r7, #2]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d102      	bne.n	800a414 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_PCD_EP_Open+0xaa>
 800a41e:	2302      	movs	r3, #2
 800a420:	e00e      	b.n	800a440 <HAL_PCD_EP_Open+0xc8>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	4618      	mov	r0, r3
 800a432:	f002 ff37 	bl	800d2a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a43e:	7afb      	ldrb	r3, [r7, #11]
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	da0f      	bge.n	800a47c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	f003 020f 	and.w	r2, r3, #15
 800a462:	4613      	mov	r3, r2
 800a464:	00db      	lsls	r3, r3, #3
 800a466:	1a9b      	subs	r3, r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	3338      	adds	r3, #56	; 0x38
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4413      	add	r3, r2
 800a470:	3304      	adds	r3, #4
 800a472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	705a      	strb	r2, [r3, #1]
 800a47a:	e00f      	b.n	800a49c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	f003 020f 	and.w	r2, r3, #15
 800a482:	4613      	mov	r3, r2
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	1a9b      	subs	r3, r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	4413      	add	r3, r2
 800a492:	3304      	adds	r3, #4
 800a494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_PCD_EP_Close+0x6e>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e00e      	b.n	800a4d4 <HAL_PCD_EP_Close+0x8c>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68f9      	ldr	r1, [r7, #12]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f002 ff75 	bl	800d3b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	f003 020f 	and.w	r2, r3, #15
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	3304      	adds	r3, #4
 800a504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	2200      	movs	r2, #0
 800a516:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	f003 030f 	and.w	r3, r3, #15
 800a524:	b2da      	uxtb	r2, r3
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d102      	bne.n	800a538 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a538:	7afb      	ldrb	r3, [r7, #11]
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	461a      	mov	r2, r3
 800a54e:	6979      	ldr	r1, [r7, #20]
 800a550:	f003 fa50 	bl	800d9f4 <USB_EP0StartXfer>
 800a554:	e008      	b.n	800a568 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	461a      	mov	r2, r3
 800a562:	6979      	ldr	r1, [r7, #20]
 800a564:	f003 f802 	bl	800d56c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a57e:	78fb      	ldrb	r3, [r7, #3]
 800a580:	f003 020f 	and.w	r2, r3, #15
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	4613      	mov	r3, r2
 800a588:	00db      	lsls	r3, r3, #3
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	440b      	add	r3, r1
 800a590:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a594:	681b      	ldr	r3, [r3, #0]
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b086      	sub	sp, #24
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	603b      	str	r3, [r7, #0]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	f003 020f 	and.w	r2, r3, #15
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	3338      	adds	r3, #56	; 0x38
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5e2:	7afb      	ldrb	r3, [r7, #11]
 800a5e4:	f003 030f 	and.w	r3, r3, #15
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d102      	bne.n	800a5fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5fc:	7afb      	ldrb	r3, [r7, #11]
 800a5fe:	f003 030f 	and.w	r3, r3, #15
 800a602:	2b00      	cmp	r3, #0
 800a604:	d109      	bne.n	800a61a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	6979      	ldr	r1, [r7, #20]
 800a614:	f003 f9ee 	bl	800d9f4 <USB_EP0StartXfer>
 800a618:	e008      	b.n	800a62c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	461a      	mov	r2, r3
 800a626:	6979      	ldr	r1, [r7, #20]
 800a628:	f002 ffa0 	bl	800d56c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	460b      	mov	r3, r1
 800a640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a642:	78fb      	ldrb	r3, [r7, #3]
 800a644:	f003 020f 	and.w	r2, r3, #15
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d901      	bls.n	800a654 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e050      	b.n	800a6f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	da0f      	bge.n	800a67c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	f003 020f 	and.w	r2, r3, #15
 800a662:	4613      	mov	r3, r2
 800a664:	00db      	lsls	r3, r3, #3
 800a666:	1a9b      	subs	r3, r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	3338      	adds	r3, #56	; 0x38
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	4413      	add	r3, r2
 800a670:	3304      	adds	r3, #4
 800a672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	705a      	strb	r2, [r3, #1]
 800a67a:	e00d      	b.n	800a698 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a67c:	78fa      	ldrb	r2, [r7, #3]
 800a67e:	4613      	mov	r3, r2
 800a680:	00db      	lsls	r3, r3, #3
 800a682:	1a9b      	subs	r3, r3, r2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	4413      	add	r3, r2
 800a68e:	3304      	adds	r3, #4
 800a690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2201      	movs	r2, #1
 800a69c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	f003 030f 	and.w	r3, r3, #15
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_PCD_EP_SetStall+0x82>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e01e      	b.n	800a6f6 <HAL_PCD_EP_SetStall+0xc0>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	68f9      	ldr	r1, [r7, #12]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f003 fb45 	bl	800dd56 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	f003 030f 	and.w	r3, r3, #15
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	b2d9      	uxtb	r1, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	f003 fd24 	bl	800e134 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	429a      	cmp	r2, r3
 800a716:	d901      	bls.n	800a71c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e042      	b.n	800a7a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a71c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	da0f      	bge.n	800a744 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a724:	78fb      	ldrb	r3, [r7, #3]
 800a726:	f003 020f 	and.w	r2, r3, #15
 800a72a:	4613      	mov	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	3338      	adds	r3, #56	; 0x38
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	4413      	add	r3, r2
 800a738:	3304      	adds	r3, #4
 800a73a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	705a      	strb	r2, [r3, #1]
 800a742:	e00f      	b.n	800a764 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	f003 020f 	and.w	r2, r3, #15
 800a74a:	4613      	mov	r3, r2
 800a74c:	00db      	lsls	r3, r3, #3
 800a74e:	1a9b      	subs	r3, r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	4413      	add	r3, r2
 800a75a:	3304      	adds	r3, #4
 800a75c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2200      	movs	r2, #0
 800a768:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	b2da      	uxtb	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_PCD_EP_ClrStall+0x86>
 800a780:	2302      	movs	r3, #2
 800a782:	e00e      	b.n	800a7a2 <HAL_PCD_EP_ClrStall+0xa4>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	4618      	mov	r0, r3
 800a794:	f003 fb4d 	bl	800de32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b08a      	sub	sp, #40	; 0x28
 800a7ae:	af02      	add	r7, sp, #8
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	00db      	lsls	r3, r3, #3
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	3338      	adds	r3, #56	; 0x38
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d901      	bls.n	800a7e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e06c      	b.n	800a8bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	695a      	ldr	r2, [r3, #20]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d902      	bls.n	800a7fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	3303      	adds	r3, #3
 800a802:	089b      	lsrs	r3, r3, #2
 800a804:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a806:	e02b      	b.n	800a860 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	695a      	ldr	r2, [r3, #20]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d902      	bls.n	800a824 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	3303      	adds	r3, #3
 800a828:	089b      	lsrs	r3, r3, #2
 800a82a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	68d9      	ldr	r1, [r3, #12]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	b2da      	uxtb	r2, r3
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	4603      	mov	r3, r0
 800a842:	6978      	ldr	r0, [r7, #20]
 800a844:	f003 fa29 	bl	800dc9a <USB_WritePacket>

    ep->xfer_buff  += len;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68da      	ldr	r2, [r3, #12]
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	441a      	add	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	699a      	ldr	r2, [r3, #24]
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	441a      	add	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	015a      	lsls	r2, r3, #5
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	4413      	add	r3, r2
 800a868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	b29b      	uxth	r3, r3
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	429a      	cmp	r2, r3
 800a874:	d809      	bhi.n	800a88a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	699a      	ldr	r2, [r3, #24]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a87e:	429a      	cmp	r2, r3
 800a880:	d203      	bcs.n	800a88a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1be      	bne.n	800a808 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	695a      	ldr	r2, [r3, #20]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	429a      	cmp	r2, r3
 800a894:	d811      	bhi.n	800a8ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	2201      	movs	r2, #1
 800a89e:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	6939      	ldr	r1, [r7, #16]
 800a8b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	333c      	adds	r3, #60	; 0x3c
 800a8dc:	3304      	adds	r3, #4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	f040 80a0 	bne.w	800aa3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d015      	beq.n	800a932 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a72      	ldr	r2, [pc, #456]	; (800aad4 <PCD_EP_OutXfrComplete_int+0x210>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f240 80dd 	bls.w	800aaca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80d7 	beq.w	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	461a      	mov	r2, r3
 800a92a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92e:	6093      	str	r3, [r2, #8]
 800a930:	e0cb      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a948:	461a      	mov	r2, r3
 800a94a:	2320      	movs	r3, #32
 800a94c:	6093      	str	r3, [r2, #8]
 800a94e:	e0bc      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 80b7 	bne.w	800aaca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a5d      	ldr	r2, [pc, #372]	; (800aad4 <PCD_EP_OutXfrComplete_int+0x210>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d90f      	bls.n	800a984 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	461a      	mov	r2, r3
 800a97c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a980:	6093      	str	r3, [r2, #8]
 800a982:	e0a2      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4613      	mov	r3, r2
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	440b      	add	r3, r1
 800a992:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a996:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	0159      	lsls	r1, r3, #5
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	440b      	add	r3, r1
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a9aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	1a9b      	subs	r3, r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4403      	add	r3, r0
 800a9ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a9be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a9c0:	6879      	ldr	r1, [r7, #4]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	1a9b      	subs	r3, r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	440b      	add	r3, r1
 800a9ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	1a9b      	subs	r3, r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4403      	add	r3, r0
 800a9e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4419      	add	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	1a9b      	subs	r3, r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4403      	add	r3, r0
 800a9f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d114      	bne.n	800aa2e <PCD_EP_OutXfrComplete_int+0x16a>
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	1a9b      	subs	r3, r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	440b      	add	r3, r1
 800aa12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d108      	bne.n	800aa2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa26:	461a      	mov	r2, r3
 800aa28:	2101      	movs	r1, #1
 800aa2a:	f003 fb83 	bl	800e134 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f005 fa2f 	bl	800fe98 <HAL_PCD_DataOutStageCallback>
 800aa3a:	e046      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4a26      	ldr	r2, [pc, #152]	; (800aad8 <PCD_EP_OutXfrComplete_int+0x214>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d124      	bne.n	800aa8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa60:	6093      	str	r3, [r2, #8]
 800aa62:	e032      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d008      	beq.n	800aa80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f005 fa06 	bl	800fe98 <HAL_PCD_DataOutStageCallback>
 800aa8c:	e01d      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d114      	bne.n	800aabe <PCD_EP_OutXfrComplete_int+0x1fa>
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d108      	bne.n	800aabe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aab6:	461a      	mov	r2, r3
 800aab8:	2100      	movs	r1, #0
 800aaba:	f003 fb3b 	bl	800e134 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f005 f9e7 	bl	800fe98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	4f54300a 	.word	0x4f54300a
 800aad8:	4f54310a 	.word	0x4f54310a

0800aadc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	333c      	adds	r3, #60	; 0x3c
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4a15      	ldr	r2, [pc, #84]	; (800ab64 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d90e      	bls.n	800ab30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d009      	beq.n	800ab30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f005 f99f 	bl	800fe74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	4a0a      	ldr	r2, [pc, #40]	; (800ab64 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d90c      	bls.n	800ab58 <PCD_EP_OutSetupPacket_int+0x7c>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d108      	bne.n	800ab58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab50:	461a      	mov	r2, r3
 800ab52:	2101      	movs	r1, #1
 800ab54:	f003 faee 	bl	800e134 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	4f54300a 	.word	0x4f54300a

0800ab68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
 800ab74:	4613      	mov	r3, r2
 800ab76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d107      	bne.n	800ab96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ab86:	883b      	ldrh	r3, [r7, #0]
 800ab88:	0419      	lsls	r1, r3, #16
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	430a      	orrs	r2, r1
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28
 800ab94:	e028      	b.n	800abe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	0c1b      	lsrs	r3, r3, #16
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	4413      	add	r3, r2
 800aba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
 800aba8:	e00d      	b.n	800abc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	3340      	adds	r3, #64	; 0x40
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4413      	add	r3, r2
 800abbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	3301      	adds	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]
 800abc6:	7bfa      	ldrb	r2, [r7, #15]
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	3b01      	subs	r3, #1
 800abcc:	429a      	cmp	r2, r3
 800abce:	d3ec      	bcc.n	800abaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800abd0:	883b      	ldrh	r3, [r7, #0]
 800abd2:	0418      	lsls	r0, r3, #16
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6819      	ldr	r1, [r3, #0]
 800abd8:	78fb      	ldrb	r3, [r7, #3]
 800abda:	3b01      	subs	r3, #1
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	4302      	orrs	r2, r0
 800abe0:	3340      	adds	r3, #64	; 0x40
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	887a      	ldrh	r2, [r7, #2]
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e25b      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d075      	beq.n	800ad3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac4e:	4ba3      	ldr	r3, [pc, #652]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f003 030c 	and.w	r3, r3, #12
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d00c      	beq.n	800ac74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac5a:	4ba0      	ldr	r3, [pc, #640]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d112      	bne.n	800ac8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac66:	4b9d      	ldr	r3, [pc, #628]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac72:	d10b      	bne.n	800ac8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac74:	4b99      	ldr	r3, [pc, #612]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d05b      	beq.n	800ad38 <HAL_RCC_OscConfig+0x108>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d157      	bne.n	800ad38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e236      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac94:	d106      	bne.n	800aca4 <HAL_RCC_OscConfig+0x74>
 800ac96:	4b91      	ldr	r3, [pc, #580]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a90      	ldr	r2, [pc, #576]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ac9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	e01d      	b.n	800ace0 <HAL_RCC_OscConfig+0xb0>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acac:	d10c      	bne.n	800acc8 <HAL_RCC_OscConfig+0x98>
 800acae:	4b8b      	ldr	r3, [pc, #556]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a8a      	ldr	r2, [pc, #552]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	4b88      	ldr	r3, [pc, #544]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a87      	ldr	r2, [pc, #540]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acc4:	6013      	str	r3, [r2, #0]
 800acc6:	e00b      	b.n	800ace0 <HAL_RCC_OscConfig+0xb0>
 800acc8:	4b84      	ldr	r3, [pc, #528]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a83      	ldr	r2, [pc, #524]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	4b81      	ldr	r3, [pc, #516]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a80      	ldr	r2, [pc, #512]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800acda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d013      	beq.n	800ad10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ace8:	f7fb faa0 	bl	800622c <HAL_GetTick>
 800acec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800acee:	e008      	b.n	800ad02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800acf0:	f7fb fa9c 	bl	800622c <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b64      	cmp	r3, #100	; 0x64
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e1fb      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad02:	4b76      	ldr	r3, [pc, #472]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0f0      	beq.n	800acf0 <HAL_RCC_OscConfig+0xc0>
 800ad0e:	e014      	b.n	800ad3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad10:	f7fb fa8c 	bl	800622c <HAL_GetTick>
 800ad14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad16:	e008      	b.n	800ad2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad18:	f7fb fa88 	bl	800622c <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b64      	cmp	r3, #100	; 0x64
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e1e7      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad2a:	4b6c      	ldr	r3, [pc, #432]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1f0      	bne.n	800ad18 <HAL_RCC_OscConfig+0xe8>
 800ad36:	e000      	b.n	800ad3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d063      	beq.n	800ae0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad46:	4b65      	ldr	r3, [pc, #404]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f003 030c 	and.w	r3, r3, #12
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00b      	beq.n	800ad6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad52:	4b62      	ldr	r3, [pc, #392]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad5a:	2b08      	cmp	r3, #8
 800ad5c:	d11c      	bne.n	800ad98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad5e:	4b5f      	ldr	r3, [pc, #380]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d116      	bne.n	800ad98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad6a:	4b5c      	ldr	r3, [pc, #368]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <HAL_RCC_OscConfig+0x152>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d001      	beq.n	800ad82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e1bb      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad82:	4b56      	ldr	r3, [pc, #344]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	4952      	ldr	r1, [pc, #328]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad96:	e03a      	b.n	800ae0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d020      	beq.n	800ade2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ada0:	4b4f      	ldr	r3, [pc, #316]	; (800aee0 <HAL_RCC_OscConfig+0x2b0>)
 800ada2:	2201      	movs	r2, #1
 800ada4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada6:	f7fb fa41 	bl	800622c <HAL_GetTick>
 800adaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adac:	e008      	b.n	800adc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adae:	f7fb fa3d 	bl	800622c <HAL_GetTick>
 800adb2:	4602      	mov	r2, r0
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	1ad3      	subs	r3, r2, r3
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d901      	bls.n	800adc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e19c      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adc0:	4b46      	ldr	r3, [pc, #280]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0302 	and.w	r3, r3, #2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d0f0      	beq.n	800adae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adcc:	4b43      	ldr	r3, [pc, #268]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	691b      	ldr	r3, [r3, #16]
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	4940      	ldr	r1, [pc, #256]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800addc:	4313      	orrs	r3, r2
 800adde:	600b      	str	r3, [r1, #0]
 800ade0:	e015      	b.n	800ae0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ade2:	4b3f      	ldr	r3, [pc, #252]	; (800aee0 <HAL_RCC_OscConfig+0x2b0>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade8:	f7fb fa20 	bl	800622c <HAL_GetTick>
 800adec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800adee:	e008      	b.n	800ae02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adf0:	f7fb fa1c 	bl	800622c <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	2b02      	cmp	r3, #2
 800adfc:	d901      	bls.n	800ae02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e17b      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae02:	4b36      	ldr	r3, [pc, #216]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 0302 	and.w	r3, r3, #2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f0      	bne.n	800adf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 0308 	and.w	r3, r3, #8
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d030      	beq.n	800ae7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d016      	beq.n	800ae50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae22:	4b30      	ldr	r3, [pc, #192]	; (800aee4 <HAL_RCC_OscConfig+0x2b4>)
 800ae24:	2201      	movs	r2, #1
 800ae26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae28:	f7fb fa00 	bl	800622c <HAL_GetTick>
 800ae2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae2e:	e008      	b.n	800ae42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae30:	f7fb f9fc 	bl	800622c <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e15b      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae42:	4b26      	ldr	r3, [pc, #152]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ae44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f0      	beq.n	800ae30 <HAL_RCC_OscConfig+0x200>
 800ae4e:	e015      	b.n	800ae7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae50:	4b24      	ldr	r3, [pc, #144]	; (800aee4 <HAL_RCC_OscConfig+0x2b4>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae56:	f7fb f9e9 	bl	800622c <HAL_GetTick>
 800ae5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae5c:	e008      	b.n	800ae70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae5e:	f7fb f9e5 	bl	800622c <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d901      	bls.n	800ae70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e144      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae70:	4b1a      	ldr	r3, [pc, #104]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ae72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae74:	f003 0302 	and.w	r3, r3, #2
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1f0      	bne.n	800ae5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f000 80a0 	beq.w	800afca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae8e:	4b13      	ldr	r3, [pc, #76]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10f      	bne.n	800aeba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60bb      	str	r3, [r7, #8]
 800ae9e:	4b0f      	ldr	r3, [pc, #60]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	4a0e      	ldr	r2, [pc, #56]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800aea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aea8:	6413      	str	r3, [r2, #64]	; 0x40
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <HAL_RCC_OscConfig+0x2ac>)
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeb2:	60bb      	str	r3, [r7, #8]
 800aeb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aeba:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <HAL_RCC_OscConfig+0x2b8>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d121      	bne.n	800af0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <HAL_RCC_OscConfig+0x2b8>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a07      	ldr	r2, [pc, #28]	; (800aee8 <HAL_RCC_OscConfig+0x2b8>)
 800aecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aed2:	f7fb f9ab 	bl	800622c <HAL_GetTick>
 800aed6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aed8:	e011      	b.n	800aefe <HAL_RCC_OscConfig+0x2ce>
 800aeda:	bf00      	nop
 800aedc:	40023800 	.word	0x40023800
 800aee0:	42470000 	.word	0x42470000
 800aee4:	42470e80 	.word	0x42470e80
 800aee8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aeec:	f7fb f99e 	bl	800622c <HAL_GetTick>
 800aef0:	4602      	mov	r2, r0
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d901      	bls.n	800aefe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e0fd      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aefe:	4b81      	ldr	r3, [pc, #516]	; (800b104 <HAL_RCC_OscConfig+0x4d4>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0f0      	beq.n	800aeec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d106      	bne.n	800af20 <HAL_RCC_OscConfig+0x2f0>
 800af12:	4b7d      	ldr	r3, [pc, #500]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af16:	4a7c      	ldr	r2, [pc, #496]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af18:	f043 0301 	orr.w	r3, r3, #1
 800af1c:	6713      	str	r3, [r2, #112]	; 0x70
 800af1e:	e01c      	b.n	800af5a <HAL_RCC_OscConfig+0x32a>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	2b05      	cmp	r3, #5
 800af26:	d10c      	bne.n	800af42 <HAL_RCC_OscConfig+0x312>
 800af28:	4b77      	ldr	r3, [pc, #476]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2c:	4a76      	ldr	r2, [pc, #472]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af2e:	f043 0304 	orr.w	r3, r3, #4
 800af32:	6713      	str	r3, [r2, #112]	; 0x70
 800af34:	4b74      	ldr	r3, [pc, #464]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af38:	4a73      	ldr	r2, [pc, #460]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af3a:	f043 0301 	orr.w	r3, r3, #1
 800af3e:	6713      	str	r3, [r2, #112]	; 0x70
 800af40:	e00b      	b.n	800af5a <HAL_RCC_OscConfig+0x32a>
 800af42:	4b71      	ldr	r3, [pc, #452]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af46:	4a70      	ldr	r2, [pc, #448]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	6713      	str	r3, [r2, #112]	; 0x70
 800af4e:	4b6e      	ldr	r3, [pc, #440]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af52:	4a6d      	ldr	r2, [pc, #436]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af54:	f023 0304 	bic.w	r3, r3, #4
 800af58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d015      	beq.n	800af8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af62:	f7fb f963 	bl	800622c <HAL_GetTick>
 800af66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af68:	e00a      	b.n	800af80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af6a:	f7fb f95f 	bl	800622c <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	f241 3288 	movw	r2, #5000	; 0x1388
 800af78:	4293      	cmp	r3, r2
 800af7a:	d901      	bls.n	800af80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e0bc      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af80:	4b61      	ldr	r3, [pc, #388]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800af82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af84:	f003 0302 	and.w	r3, r3, #2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0ee      	beq.n	800af6a <HAL_RCC_OscConfig+0x33a>
 800af8c:	e014      	b.n	800afb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af8e:	f7fb f94d 	bl	800622c <HAL_GetTick>
 800af92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af94:	e00a      	b.n	800afac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af96:	f7fb f949 	bl	800622c <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d901      	bls.n	800afac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e0a6      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afac:	4b56      	ldr	r3, [pc, #344]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800afae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1ee      	bne.n	800af96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d105      	bne.n	800afca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afbe:	4b52      	ldr	r3, [pc, #328]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	4a51      	ldr	r2, [pc, #324]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800afc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8092 	beq.w	800b0f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800afd4:	4b4c      	ldr	r3, [pc, #304]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f003 030c 	and.w	r3, r3, #12
 800afdc:	2b08      	cmp	r3, #8
 800afde:	d05c      	beq.n	800b09a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d141      	bne.n	800b06c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afe8:	4b48      	ldr	r3, [pc, #288]	; (800b10c <HAL_RCC_OscConfig+0x4dc>)
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afee:	f7fb f91d 	bl	800622c <HAL_GetTick>
 800aff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aff4:	e008      	b.n	800b008 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aff6:	f7fb f919 	bl	800622c <HAL_GetTick>
 800affa:	4602      	mov	r2, r0
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	2b02      	cmp	r3, #2
 800b002:	d901      	bls.n	800b008 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e078      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b008:	4b3f      	ldr	r3, [pc, #252]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1f0      	bne.n	800aff6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	431a      	orrs	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	019b      	lsls	r3, r3, #6
 800b024:	431a      	orrs	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b02a:	085b      	lsrs	r3, r3, #1
 800b02c:	3b01      	subs	r3, #1
 800b02e:	041b      	lsls	r3, r3, #16
 800b030:	431a      	orrs	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	061b      	lsls	r3, r3, #24
 800b038:	4933      	ldr	r1, [pc, #204]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b03e:	4b33      	ldr	r3, [pc, #204]	; (800b10c <HAL_RCC_OscConfig+0x4dc>)
 800b040:	2201      	movs	r2, #1
 800b042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b044:	f7fb f8f2 	bl	800622c <HAL_GetTick>
 800b048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b04a:	e008      	b.n	800b05e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b04c:	f7fb f8ee 	bl	800622c <HAL_GetTick>
 800b050:	4602      	mov	r2, r0
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	2b02      	cmp	r3, #2
 800b058:	d901      	bls.n	800b05e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e04d      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b05e:	4b2a      	ldr	r3, [pc, #168]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0f0      	beq.n	800b04c <HAL_RCC_OscConfig+0x41c>
 800b06a:	e045      	b.n	800b0f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b06c:	4b27      	ldr	r3, [pc, #156]	; (800b10c <HAL_RCC_OscConfig+0x4dc>)
 800b06e:	2200      	movs	r2, #0
 800b070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b072:	f7fb f8db 	bl	800622c <HAL_GetTick>
 800b076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b078:	e008      	b.n	800b08c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b07a:	f7fb f8d7 	bl	800622c <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	2b02      	cmp	r3, #2
 800b086:	d901      	bls.n	800b08c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e036      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b08c:	4b1e      	ldr	r3, [pc, #120]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1f0      	bne.n	800b07a <HAL_RCC_OscConfig+0x44a>
 800b098:	e02e      	b.n	800b0f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d101      	bne.n	800b0a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e029      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b0a6:	4b18      	ldr	r3, [pc, #96]	; (800b108 <HAL_RCC_OscConfig+0x4d8>)
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	69db      	ldr	r3, [r3, #28]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d11c      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d115      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d10d      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d106      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d001      	beq.n	800b0f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e000      	b.n	800b0fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	40007000 	.word	0x40007000
 800b108:	40023800 	.word	0x40023800
 800b10c:	42470060 	.word	0x42470060

0800b110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e0cc      	b.n	800b2be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b124:	4b68      	ldr	r3, [pc, #416]	; (800b2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 030f 	and.w	r3, r3, #15
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d90c      	bls.n	800b14c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b132:	4b65      	ldr	r3, [pc, #404]	; (800b2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	b2d2      	uxtb	r2, r2
 800b138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b13a:	4b63      	ldr	r3, [pc, #396]	; (800b2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d001      	beq.n	800b14c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e0b8      	b.n	800b2be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0302 	and.w	r3, r3, #2
 800b154:	2b00      	cmp	r3, #0
 800b156:	d020      	beq.n	800b19a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0304 	and.w	r3, r3, #4
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b164:	4b59      	ldr	r3, [pc, #356]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	4a58      	ldr	r2, [pc, #352]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b16a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b16e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0308 	and.w	r3, r3, #8
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b17c:	4b53      	ldr	r3, [pc, #332]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	4a52      	ldr	r2, [pc, #328]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b188:	4b50      	ldr	r3, [pc, #320]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	494d      	ldr	r1, [pc, #308]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b196:	4313      	orrs	r3, r2
 800b198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d044      	beq.n	800b230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d107      	bne.n	800b1be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1ae:	4b47      	ldr	r3, [pc, #284]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d119      	bne.n	800b1ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e07f      	b.n	800b2be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d003      	beq.n	800b1ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d107      	bne.n	800b1de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1ce:	4b3f      	ldr	r3, [pc, #252]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d109      	bne.n	800b1ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e06f      	b.n	800b2be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1de:	4b3b      	ldr	r3, [pc, #236]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 0302 	and.w	r3, r3, #2
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e067      	b.n	800b2be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b1ee:	4b37      	ldr	r3, [pc, #220]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f023 0203 	bic.w	r2, r3, #3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	4934      	ldr	r1, [pc, #208]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b200:	f7fb f814 	bl	800622c <HAL_GetTick>
 800b204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b206:	e00a      	b.n	800b21e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b208:	f7fb f810 	bl	800622c <HAL_GetTick>
 800b20c:	4602      	mov	r2, r0
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	f241 3288 	movw	r2, #5000	; 0x1388
 800b216:	4293      	cmp	r3, r2
 800b218:	d901      	bls.n	800b21e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e04f      	b.n	800b2be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b21e:	4b2b      	ldr	r3, [pc, #172]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f003 020c 	and.w	r2, r3, #12
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d1eb      	bne.n	800b208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b230:	4b25      	ldr	r3, [pc, #148]	; (800b2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 030f 	and.w	r3, r3, #15
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d20c      	bcs.n	800b258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b23e:	4b22      	ldr	r3, [pc, #136]	; (800b2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	b2d2      	uxtb	r2, r2
 800b244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b246:	4b20      	ldr	r3, [pc, #128]	; (800b2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 030f 	and.w	r3, r3, #15
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d001      	beq.n	800b258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e032      	b.n	800b2be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d008      	beq.n	800b276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b264:	4b19      	ldr	r3, [pc, #100]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	4916      	ldr	r1, [pc, #88]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b272:	4313      	orrs	r3, r2
 800b274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0308 	and.w	r3, r3, #8
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d009      	beq.n	800b296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b282:	4b12      	ldr	r3, [pc, #72]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	00db      	lsls	r3, r3, #3
 800b290:	490e      	ldr	r1, [pc, #56]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b292:	4313      	orrs	r3, r2
 800b294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b296:	f000 f821 	bl	800b2dc <HAL_RCC_GetSysClockFreq>
 800b29a:	4601      	mov	r1, r0
 800b29c:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <HAL_RCC_ClockConfig+0x1bc>)
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	091b      	lsrs	r3, r3, #4
 800b2a2:	f003 030f 	and.w	r3, r3, #15
 800b2a6:	4a0a      	ldr	r2, [pc, #40]	; (800b2d0 <HAL_RCC_ClockConfig+0x1c0>)
 800b2a8:	5cd3      	ldrb	r3, [r2, r3]
 800b2aa:	fa21 f303 	lsr.w	r3, r1, r3
 800b2ae:	4a09      	ldr	r2, [pc, #36]	; (800b2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800b2b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b2b2:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fa ff74 	bl	80061a4 <HAL_InitTick>

  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	40023c00 	.word	0x40023c00
 800b2cc:	40023800 	.word	0x40023800
 800b2d0:	080136a0 	.word	0x080136a0
 800b2d4:	20000048 	.word	0x20000048
 800b2d8:	20000050 	.word	0x20000050

0800b2dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	607b      	str	r3, [r7, #4]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2f2:	4b63      	ldr	r3, [pc, #396]	; (800b480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f003 030c 	and.w	r3, r3, #12
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	d007      	beq.n	800b30e <HAL_RCC_GetSysClockFreq+0x32>
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	d008      	beq.n	800b314 <HAL_RCC_GetSysClockFreq+0x38>
 800b302:	2b00      	cmp	r3, #0
 800b304:	f040 80b4 	bne.w	800b470 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b308:	4b5e      	ldr	r3, [pc, #376]	; (800b484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b30a:	60bb      	str	r3, [r7, #8]
       break;
 800b30c:	e0b3      	b.n	800b476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b30e:	4b5d      	ldr	r3, [pc, #372]	; (800b484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b310:	60bb      	str	r3, [r7, #8]
      break;
 800b312:	e0b0      	b.n	800b476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b314:	4b5a      	ldr	r3, [pc, #360]	; (800b480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b31c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b31e:	4b58      	ldr	r3, [pc, #352]	; (800b480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d04a      	beq.n	800b3c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b32a:	4b55      	ldr	r3, [pc, #340]	; (800b480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	099b      	lsrs	r3, r3, #6
 800b330:	f04f 0400 	mov.w	r4, #0
 800b334:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b338:	f04f 0200 	mov.w	r2, #0
 800b33c:	ea03 0501 	and.w	r5, r3, r1
 800b340:	ea04 0602 	and.w	r6, r4, r2
 800b344:	4629      	mov	r1, r5
 800b346:	4632      	mov	r2, r6
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	f04f 0400 	mov.w	r4, #0
 800b350:	0154      	lsls	r4, r2, #5
 800b352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b356:	014b      	lsls	r3, r1, #5
 800b358:	4619      	mov	r1, r3
 800b35a:	4622      	mov	r2, r4
 800b35c:	1b49      	subs	r1, r1, r5
 800b35e:	eb62 0206 	sbc.w	r2, r2, r6
 800b362:	f04f 0300 	mov.w	r3, #0
 800b366:	f04f 0400 	mov.w	r4, #0
 800b36a:	0194      	lsls	r4, r2, #6
 800b36c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b370:	018b      	lsls	r3, r1, #6
 800b372:	1a5b      	subs	r3, r3, r1
 800b374:	eb64 0402 	sbc.w	r4, r4, r2
 800b378:	f04f 0100 	mov.w	r1, #0
 800b37c:	f04f 0200 	mov.w	r2, #0
 800b380:	00e2      	lsls	r2, r4, #3
 800b382:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b386:	00d9      	lsls	r1, r3, #3
 800b388:	460b      	mov	r3, r1
 800b38a:	4614      	mov	r4, r2
 800b38c:	195b      	adds	r3, r3, r5
 800b38e:	eb44 0406 	adc.w	r4, r4, r6
 800b392:	f04f 0100 	mov.w	r1, #0
 800b396:	f04f 0200 	mov.w	r2, #0
 800b39a:	02a2      	lsls	r2, r4, #10
 800b39c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b3a0:	0299      	lsls	r1, r3, #10
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4614      	mov	r4, r2
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f04f 0400 	mov.w	r4, #0
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4623      	mov	r3, r4
 800b3b4:	f7f5 fda6 	bl	8000f04 <__aeabi_uldivmod>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	e049      	b.n	800b454 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3c0:	4b2f      	ldr	r3, [pc, #188]	; (800b480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	099b      	lsrs	r3, r3, #6
 800b3c6:	f04f 0400 	mov.w	r4, #0
 800b3ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b3ce:	f04f 0200 	mov.w	r2, #0
 800b3d2:	ea03 0501 	and.w	r5, r3, r1
 800b3d6:	ea04 0602 	and.w	r6, r4, r2
 800b3da:	4629      	mov	r1, r5
 800b3dc:	4632      	mov	r2, r6
 800b3de:	f04f 0300 	mov.w	r3, #0
 800b3e2:	f04f 0400 	mov.w	r4, #0
 800b3e6:	0154      	lsls	r4, r2, #5
 800b3e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b3ec:	014b      	lsls	r3, r1, #5
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	1b49      	subs	r1, r1, r5
 800b3f4:	eb62 0206 	sbc.w	r2, r2, r6
 800b3f8:	f04f 0300 	mov.w	r3, #0
 800b3fc:	f04f 0400 	mov.w	r4, #0
 800b400:	0194      	lsls	r4, r2, #6
 800b402:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b406:	018b      	lsls	r3, r1, #6
 800b408:	1a5b      	subs	r3, r3, r1
 800b40a:	eb64 0402 	sbc.w	r4, r4, r2
 800b40e:	f04f 0100 	mov.w	r1, #0
 800b412:	f04f 0200 	mov.w	r2, #0
 800b416:	00e2      	lsls	r2, r4, #3
 800b418:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b41c:	00d9      	lsls	r1, r3, #3
 800b41e:	460b      	mov	r3, r1
 800b420:	4614      	mov	r4, r2
 800b422:	195b      	adds	r3, r3, r5
 800b424:	eb44 0406 	adc.w	r4, r4, r6
 800b428:	f04f 0100 	mov.w	r1, #0
 800b42c:	f04f 0200 	mov.w	r2, #0
 800b430:	02a2      	lsls	r2, r4, #10
 800b432:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b436:	0299      	lsls	r1, r3, #10
 800b438:	460b      	mov	r3, r1
 800b43a:	4614      	mov	r4, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	4621      	mov	r1, r4
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f04f 0400 	mov.w	r4, #0
 800b446:	461a      	mov	r2, r3
 800b448:	4623      	mov	r3, r4
 800b44a:	f7f5 fd5b 	bl	8000f04 <__aeabi_uldivmod>
 800b44e:	4603      	mov	r3, r0
 800b450:	460c      	mov	r4, r1
 800b452:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	0c1b      	lsrs	r3, r3, #16
 800b45a:	f003 0303 	and.w	r3, r3, #3
 800b45e:	3301      	adds	r3, #1
 800b460:	005b      	lsls	r3, r3, #1
 800b462:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	fbb2 f3f3 	udiv	r3, r2, r3
 800b46c:	60bb      	str	r3, [r7, #8]
      break;
 800b46e:	e002      	b.n	800b476 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b470:	4b04      	ldr	r3, [pc, #16]	; (800b484 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b472:	60bb      	str	r3, [r7, #8]
      break;
 800b474:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b476:	68bb      	ldr	r3, [r7, #8]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b480:	40023800 	.word	0x40023800
 800b484:	00f42400 	.word	0x00f42400

0800b488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b488:	b480      	push	{r7}
 800b48a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b48c:	4b03      	ldr	r3, [pc, #12]	; (800b49c <HAL_RCC_GetHCLKFreq+0x14>)
 800b48e:	681b      	ldr	r3, [r3, #0]
}
 800b490:	4618      	mov	r0, r3
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20000048 	.word	0x20000048

0800b4a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b4a4:	f7ff fff0 	bl	800b488 <HAL_RCC_GetHCLKFreq>
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	0a9b      	lsrs	r3, r3, #10
 800b4b0:	f003 0307 	and.w	r3, r3, #7
 800b4b4:	4a03      	ldr	r2, [pc, #12]	; (800b4c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4b6:	5cd3      	ldrb	r3, [r2, r3]
 800b4b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	40023800 	.word	0x40023800
 800b4c4:	080136b0 	.word	0x080136b0

0800b4c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d105      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d035      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b4f0:	4b62      	ldr	r3, [pc, #392]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b4f6:	f7fa fe99 	bl	800622c <HAL_GetTick>
 800b4fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b4fc:	e008      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b4fe:	f7fa fe95 	bl	800622c <HAL_GetTick>
 800b502:	4602      	mov	r2, r0
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	1ad3      	subs	r3, r2, r3
 800b508:	2b02      	cmp	r3, #2
 800b50a:	d901      	bls.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e0b0      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b510:	4b5b      	ldr	r3, [pc, #364]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1f0      	bne.n	800b4fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	019a      	lsls	r2, r3, #6
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	071b      	lsls	r3, r3, #28
 800b528:	4955      	ldr	r1, [pc, #340]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b530:	4b52      	ldr	r3, [pc, #328]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b532:	2201      	movs	r2, #1
 800b534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b536:	f7fa fe79 	bl	800622c <HAL_GetTick>
 800b53a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b53c:	e008      	b.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b53e:	f7fa fe75 	bl	800622c <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d901      	bls.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e090      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b550:	4b4b      	ldr	r3, [pc, #300]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d0f0      	beq.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 8083 	beq.w	800b670 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
 800b56e:	4b44      	ldr	r3, [pc, #272]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	4a43      	ldr	r2, [pc, #268]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b578:	6413      	str	r3, [r2, #64]	; 0x40
 800b57a:	4b41      	ldr	r3, [pc, #260]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b582:	60fb      	str	r3, [r7, #12]
 800b584:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b586:	4b3f      	ldr	r3, [pc, #252]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a3e      	ldr	r2, [pc, #248]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b58c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b590:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b592:	f7fa fe4b 	bl	800622c <HAL_GetTick>
 800b596:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b598:	e008      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b59a:	f7fa fe47 	bl	800622c <HAL_GetTick>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d901      	bls.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b5a8:	2303      	movs	r3, #3
 800b5aa:	e062      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b5ac:	4b35      	ldr	r3, [pc, #212]	; (800b684 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0f0      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b5b8:	4b31      	ldr	r3, [pc, #196]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02f      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d028      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b5d6:	4b2a      	ldr	r3, [pc, #168]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b5e0:	4b29      	ldr	r3, [pc, #164]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b5e6:	4b28      	ldr	r3, [pc, #160]	; (800b688 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b5ec:	4a24      	ldr	r2, [pc, #144]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b5f2:	4b23      	ldr	r3, [pc, #140]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d114      	bne.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b5fe:	f7fa fe15 	bl	800622c <HAL_GetTick>
 800b602:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b604:	e00a      	b.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b606:	f7fa fe11 	bl	800622c <HAL_GetTick>
 800b60a:	4602      	mov	r2, r0
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	f241 3288 	movw	r2, #5000	; 0x1388
 800b614:	4293      	cmp	r3, r2
 800b616:	d901      	bls.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e02a      	b.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b61c:	4b18      	ldr	r3, [pc, #96]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b620:	f003 0302 	and.w	r3, r3, #2
 800b624:	2b00      	cmp	r3, #0
 800b626:	d0ee      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b634:	d10d      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b636:	4b12      	ldr	r3, [pc, #72]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b64a:	490d      	ldr	r1, [pc, #52]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b64c:	4313      	orrs	r3, r2
 800b64e:	608b      	str	r3, [r1, #8]
 800b650:	e005      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b652:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	4a0a      	ldr	r2, [pc, #40]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b658:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b65c:	6093      	str	r3, [r2, #8]
 800b65e:	4b08      	ldr	r3, [pc, #32]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b660:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b66a:	4905      	ldr	r1, [pc, #20]	; (800b680 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b66c:	4313      	orrs	r3, r2
 800b66e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3718      	adds	r7, #24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	42470068 	.word	0x42470068
 800b680:	40023800 	.word	0x40023800
 800b684:	40007000 	.word	0x40007000
 800b688:	42470e40 	.word	0x42470e40

0800b68c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d101      	bne.n	800b69e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e083      	b.n	800b7a6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7f5b      	ldrb	r3, [r3, #29]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d105      	bne.n	800b6b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7f9 fbaa 	bl	8004e08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	22ca      	movs	r2, #202	; 0xca
 800b6c0:	625a      	str	r2, [r3, #36]	; 0x24
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2253      	movs	r2, #83	; 0x53
 800b6c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f897 	bl	800b7fe <RTC_EnterInitMode>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d008      	beq.n	800b6e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	22ff      	movs	r2, #255	; 0xff
 800b6dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e05e      	b.n	800b7a6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	6812      	ldr	r2, [r2, #0]
 800b6f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6899      	ldr	r1, [r3, #8]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	431a      	orrs	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	431a      	orrs	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	430a      	orrs	r2, r1
 800b718:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	68d2      	ldr	r2, [r2, #12]
 800b722:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6919      	ldr	r1, [r3, #16]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	041a      	lsls	r2, r3, #16
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	430a      	orrs	r2, r1
 800b736:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b746:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f003 0320 	and.w	r3, r3, #32
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10e      	bne.n	800b774 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f829 	bl	800b7ae <HAL_RTC_WaitForSynchro>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d008      	beq.n	800b774 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	22ff      	movs	r2, #255	; 0xff
 800b768:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2204      	movs	r2, #4
 800b76e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e018      	b.n	800b7a6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b782:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	699a      	ldr	r2, [r3, #24]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	430a      	orrs	r2, r1
 800b794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	22ff      	movs	r2, #255	; 0xff
 800b79c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
  }
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b084      	sub	sp, #16
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68da      	ldr	r2, [r3, #12]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b7c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b7ca:	f7fa fd2f 	bl	800622c <HAL_GetTick>
 800b7ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b7d0:	e009      	b.n	800b7e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b7d2:	f7fa fd2b 	bl	800622c <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7e0:	d901      	bls.n	800b7e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	e007      	b.n	800b7f6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	f003 0320 	and.w	r3, r3, #32
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d0ee      	beq.n	800b7d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b814:	2b00      	cmp	r3, #0
 800b816:	d119      	bne.n	800b84c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f04f 32ff 	mov.w	r2, #4294967295
 800b820:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b822:	f7fa fd03 	bl	800622c <HAL_GetTick>
 800b826:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b828:	e009      	b.n	800b83e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b82a:	f7fa fcff 	bl	800622c <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b838:	d901      	bls.n	800b83e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e007      	b.n	800b84e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0ee      	beq.n	800b82a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e01d      	b.n	800b8a4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b00      	cmp	r3, #0
 800b872:	d106      	bne.n	800b882 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7fa fb3f 	bl	8005f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2202      	movs	r2, #2
 800b886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	3304      	adds	r3, #4
 800b892:	4619      	mov	r1, r3
 800b894:	4610      	mov	r0, r2
 800b896:	f000 fcaf 	bl	800c1f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0201 	orr.w	r2, r2, #1
 800b8c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f003 0307 	and.w	r3, r3, #7
 800b8ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2b06      	cmp	r3, #6
 800b8d4:	d007      	beq.n	800b8e6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f042 0201 	orr.w	r2, r2, #1
 800b8e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e01d      	b.n	800b942 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d106      	bne.n	800b920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7fa face 	bl	8005ebc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2202      	movs	r2, #2
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3304      	adds	r3, #4
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f000 fc60 	bl	800c1f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2201      	movs	r2, #1
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 f85e 	bl	800ca20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a15      	ldr	r2, [pc, #84]	; (800b9c0 <HAL_TIM_PWM_Start+0x74>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d004      	beq.n	800b978 <HAL_TIM_PWM_Start+0x2c>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a14      	ldr	r2, [pc, #80]	; (800b9c4 <HAL_TIM_PWM_Start+0x78>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d101      	bne.n	800b97c <HAL_TIM_PWM_Start+0x30>
 800b978:	2301      	movs	r3, #1
 800b97a:	e000      	b.n	800b97e <HAL_TIM_PWM_Start+0x32>
 800b97c:	2300      	movs	r3, #0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d007      	beq.n	800b992 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f003 0307 	and.w	r3, r3, #7
 800b99c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b06      	cmp	r3, #6
 800b9a2:	d007      	beq.n	800b9b4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f042 0201 	orr.w	r2, r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	40010000 	.word	0x40010000
 800b9c4:	40010400 	.word	0x40010400

0800b9c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e01d      	b.n	800ba16 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f815 	bl	800ba1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f000 fbf6 	bl	800c1f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3708      	adds	r7, #8
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
	...

0800ba34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	2b0c      	cmp	r3, #12
 800ba42:	d841      	bhi.n	800bac8 <HAL_TIM_IC_Start_IT+0x94>
 800ba44:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <HAL_TIM_IC_Start_IT+0x18>)
 800ba46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4a:	bf00      	nop
 800ba4c:	0800ba81 	.word	0x0800ba81
 800ba50:	0800bac9 	.word	0x0800bac9
 800ba54:	0800bac9 	.word	0x0800bac9
 800ba58:	0800bac9 	.word	0x0800bac9
 800ba5c:	0800ba93 	.word	0x0800ba93
 800ba60:	0800bac9 	.word	0x0800bac9
 800ba64:	0800bac9 	.word	0x0800bac9
 800ba68:	0800bac9 	.word	0x0800bac9
 800ba6c:	0800baa5 	.word	0x0800baa5
 800ba70:	0800bac9 	.word	0x0800bac9
 800ba74:	0800bac9 	.word	0x0800bac9
 800ba78:	0800bac9 	.word	0x0800bac9
 800ba7c:	0800bab7 	.word	0x0800bab7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f042 0202 	orr.w	r2, r2, #2
 800ba8e:	60da      	str	r2, [r3, #12]
      break;
 800ba90:	e01b      	b.n	800baca <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68da      	ldr	r2, [r3, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f042 0204 	orr.w	r2, r2, #4
 800baa0:	60da      	str	r2, [r3, #12]
      break;
 800baa2:	e012      	b.n	800baca <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	68da      	ldr	r2, [r3, #12]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f042 0208 	orr.w	r2, r2, #8
 800bab2:	60da      	str	r2, [r3, #12]
      break;
 800bab4:	e009      	b.n	800baca <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68da      	ldr	r2, [r3, #12]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f042 0210 	orr.w	r2, r2, #16
 800bac4:	60da      	str	r2, [r3, #12]
      break;
 800bac6:	e000      	b.n	800baca <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800bac8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2201      	movs	r2, #1
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 ffa4 	bl	800ca20 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f003 0307 	and.w	r3, r3, #7
 800bae2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b06      	cmp	r3, #6
 800bae8:	d007      	beq.n	800bafa <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f042 0201 	orr.w	r2, r2, #1
 800baf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	f003 0302 	and.w	r3, r3, #2
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d122      	bne.n	800bb60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	f003 0302 	and.w	r3, r3, #2
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d11b      	bne.n	800bb60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f06f 0202 	mvn.w	r2, #2
 800bb30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7f8 ffba 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 800bb4c:	e005      	b.n	800bb5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fb3e 	bl	800c1d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7f9 f91f 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	f003 0304 	and.w	r3, r3, #4
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	d122      	bne.n	800bbb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	f003 0304 	and.w	r3, r3, #4
 800bb78:	2b04      	cmp	r3, #4
 800bb7a:	d11b      	bne.n	800bbb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f06f 0204 	mvn.w	r2, #4
 800bb84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2202      	movs	r2, #2
 800bb8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d003      	beq.n	800bba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7f8 ff90 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 800bba0:	e005      	b.n	800bbae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fb14 	bl	800c1d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7f9 f8f5 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	f003 0308 	and.w	r3, r3, #8
 800bbbe:	2b08      	cmp	r3, #8
 800bbc0:	d122      	bne.n	800bc08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	f003 0308 	and.w	r3, r3, #8
 800bbcc:	2b08      	cmp	r3, #8
 800bbce:	d11b      	bne.n	800bc08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f06f 0208 	mvn.w	r2, #8
 800bbd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2204      	movs	r2, #4
 800bbde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	f003 0303 	and.w	r3, r3, #3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7f8 ff66 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 800bbf4:	e005      	b.n	800bc02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 faea 	bl	800c1d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7f9 f8cb 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	f003 0310 	and.w	r3, r3, #16
 800bc12:	2b10      	cmp	r3, #16
 800bc14:	d122      	bne.n	800bc5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	f003 0310 	and.w	r3, r3, #16
 800bc20:	2b10      	cmp	r3, #16
 800bc22:	d11b      	bne.n	800bc5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f06f 0210 	mvn.w	r2, #16
 800bc2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2208      	movs	r2, #8
 800bc32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	69db      	ldr	r3, [r3, #28]
 800bc3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7f8 ff3c 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 800bc48:	e005      	b.n	800bc56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 fac0 	bl	800c1d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f7f9 f8a1 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d10e      	bne.n	800bc88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d107      	bne.n	800bc88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f06f 0201 	mvn.w	r2, #1
 800bc80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7f8 ffce 	bl	8004c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc92:	2b80      	cmp	r3, #128	; 0x80
 800bc94:	d10e      	bne.n	800bcb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bca0:	2b80      	cmp	r3, #128	; 0x80
 800bca2:	d107      	bne.n	800bcb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bcac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 ffb4 	bl	800cc1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbe:	2b40      	cmp	r3, #64	; 0x40
 800bcc0:	d10e      	bne.n	800bce0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bccc:	2b40      	cmp	r3, #64	; 0x40
 800bcce:	d107      	bne.n	800bce0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fa82 	bl	800c1e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	f003 0320 	and.w	r3, r3, #32
 800bcea:	2b20      	cmp	r3, #32
 800bcec:	d10e      	bne.n	800bd0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	f003 0320 	and.w	r3, r3, #32
 800bcf8:	2b20      	cmp	r3, #32
 800bcfa:	d107      	bne.n	800bd0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f06f 0220 	mvn.w	r2, #32
 800bd04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 ff7e 	bl	800cc08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d101      	bne.n	800bd2e <HAL_TIM_IC_ConfigChannel+0x1a>
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e08a      	b.n	800be44 <HAL_TIM_IC_ConfigChannel+0x130>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2202      	movs	r2, #2
 800bd3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d11b      	bne.n	800bd7c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6818      	ldr	r0, [r3, #0]
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	6819      	ldr	r1, [r3, #0]
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	f000 fca0 	bl	800c698 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	699a      	ldr	r2, [r3, #24]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f022 020c 	bic.w	r2, r2, #12
 800bd66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6999      	ldr	r1, [r3, #24]
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	689a      	ldr	r2, [r3, #8]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	619a      	str	r2, [r3, #24]
 800bd7a:	e05a      	b.n	800be32 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d11c      	bne.n	800bdbc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	6819      	ldr	r1, [r3, #0]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	f000 fd24 	bl	800c7de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	699a      	ldr	r2, [r3, #24]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bda4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6999      	ldr	r1, [r3, #24]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	021a      	lsls	r2, r3, #8
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	619a      	str	r2, [r3, #24]
 800bdba:	e03a      	b.n	800be32 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b08      	cmp	r3, #8
 800bdc0:	d11b      	bne.n	800bdfa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6818      	ldr	r0, [r3, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	6819      	ldr	r1, [r3, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	f000 fd71 	bl	800c8b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	69da      	ldr	r2, [r3, #28]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 020c 	bic.w	r2, r2, #12
 800bde4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	69d9      	ldr	r1, [r3, #28]
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	61da      	str	r2, [r3, #28]
 800bdf8:	e01b      	b.n	800be32 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	6819      	ldr	r1, [r3, #0]
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	f000 fd91 	bl	800c930 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	69da      	ldr	r2, [r3, #28]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800be1c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	69d9      	ldr	r1, [r3, #28]
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	021a      	lsls	r2, r3, #8
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d101      	bne.n	800be66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800be62:	2302      	movs	r3, #2
 800be64:	e0b4      	b.n	800bfd0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2202      	movs	r2, #2
 800be72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b0c      	cmp	r3, #12
 800be7a:	f200 809f 	bhi.w	800bfbc <HAL_TIM_PWM_ConfigChannel+0x170>
 800be7e:	a201      	add	r2, pc, #4	; (adr r2, 800be84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800be80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be84:	0800beb9 	.word	0x0800beb9
 800be88:	0800bfbd 	.word	0x0800bfbd
 800be8c:	0800bfbd 	.word	0x0800bfbd
 800be90:	0800bfbd 	.word	0x0800bfbd
 800be94:	0800bef9 	.word	0x0800bef9
 800be98:	0800bfbd 	.word	0x0800bfbd
 800be9c:	0800bfbd 	.word	0x0800bfbd
 800bea0:	0800bfbd 	.word	0x0800bfbd
 800bea4:	0800bf3b 	.word	0x0800bf3b
 800bea8:	0800bfbd 	.word	0x0800bfbd
 800beac:	0800bfbd 	.word	0x0800bfbd
 800beb0:	0800bfbd 	.word	0x0800bfbd
 800beb4:	0800bf7b 	.word	0x0800bf7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68b9      	ldr	r1, [r7, #8]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f000 fa3a 	bl	800c338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	699a      	ldr	r2, [r3, #24]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f042 0208 	orr.w	r2, r2, #8
 800bed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	699a      	ldr	r2, [r3, #24]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f022 0204 	bic.w	r2, r2, #4
 800bee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6999      	ldr	r1, [r3, #24]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	691a      	ldr	r2, [r3, #16]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	619a      	str	r2, [r3, #24]
      break;
 800bef6:	e062      	b.n	800bfbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68b9      	ldr	r1, [r7, #8]
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fa8a 	bl	800c418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	699a      	ldr	r2, [r3, #24]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	699a      	ldr	r2, [r3, #24]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6999      	ldr	r1, [r3, #24]
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	021a      	lsls	r2, r3, #8
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	430a      	orrs	r2, r1
 800bf36:	619a      	str	r2, [r3, #24]
      break;
 800bf38:	e041      	b.n	800bfbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 fadf 	bl	800c504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	69da      	ldr	r2, [r3, #28]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f042 0208 	orr.w	r2, r2, #8
 800bf54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	69da      	ldr	r2, [r3, #28]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f022 0204 	bic.w	r2, r2, #4
 800bf64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	69d9      	ldr	r1, [r3, #28]
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	691a      	ldr	r2, [r3, #16]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	430a      	orrs	r2, r1
 800bf76:	61da      	str	r2, [r3, #28]
      break;
 800bf78:	e021      	b.n	800bfbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68b9      	ldr	r1, [r7, #8]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fb33 	bl	800c5ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	69da      	ldr	r2, [r3, #28]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	69da      	ldr	r2, [r3, #28]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	69d9      	ldr	r1, [r3, #28]
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	021a      	lsls	r2, r3, #8
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	430a      	orrs	r2, r1
 800bfb8:	61da      	str	r2, [r3, #28]
      break;
 800bfba:	e000      	b.n	800bfbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bfbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d101      	bne.n	800bff0 <HAL_TIM_ConfigClockSource+0x18>
 800bfec:	2302      	movs	r3, #2
 800bfee:	e0a6      	b.n	800c13e <HAL_TIM_ConfigClockSource+0x166>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2202      	movs	r2, #2
 800bffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c00e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c016:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b40      	cmp	r3, #64	; 0x40
 800c026:	d067      	beq.n	800c0f8 <HAL_TIM_ConfigClockSource+0x120>
 800c028:	2b40      	cmp	r3, #64	; 0x40
 800c02a:	d80b      	bhi.n	800c044 <HAL_TIM_ConfigClockSource+0x6c>
 800c02c:	2b10      	cmp	r3, #16
 800c02e:	d073      	beq.n	800c118 <HAL_TIM_ConfigClockSource+0x140>
 800c030:	2b10      	cmp	r3, #16
 800c032:	d802      	bhi.n	800c03a <HAL_TIM_ConfigClockSource+0x62>
 800c034:	2b00      	cmp	r3, #0
 800c036:	d06f      	beq.n	800c118 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c038:	e078      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c03a:	2b20      	cmp	r3, #32
 800c03c:	d06c      	beq.n	800c118 <HAL_TIM_ConfigClockSource+0x140>
 800c03e:	2b30      	cmp	r3, #48	; 0x30
 800c040:	d06a      	beq.n	800c118 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c042:	e073      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c044:	2b70      	cmp	r3, #112	; 0x70
 800c046:	d00d      	beq.n	800c064 <HAL_TIM_ConfigClockSource+0x8c>
 800c048:	2b70      	cmp	r3, #112	; 0x70
 800c04a:	d804      	bhi.n	800c056 <HAL_TIM_ConfigClockSource+0x7e>
 800c04c:	2b50      	cmp	r3, #80	; 0x50
 800c04e:	d033      	beq.n	800c0b8 <HAL_TIM_ConfigClockSource+0xe0>
 800c050:	2b60      	cmp	r3, #96	; 0x60
 800c052:	d041      	beq.n	800c0d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c054:	e06a      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c05a:	d066      	beq.n	800c12a <HAL_TIM_ConfigClockSource+0x152>
 800c05c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c060:	d017      	beq.n	800c092 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c062:	e063      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6818      	ldr	r0, [r3, #0]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	6899      	ldr	r1, [r3, #8]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	685a      	ldr	r2, [r3, #4]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	f000 fcb4 	bl	800c9e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c086:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	609a      	str	r2, [r3, #8]
      break;
 800c090:	e04c      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6818      	ldr	r0, [r3, #0]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	6899      	ldr	r1, [r3, #8]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	f000 fc9d 	bl	800c9e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0b4:	609a      	str	r2, [r3, #8]
      break;
 800c0b6:	e039      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	6859      	ldr	r1, [r3, #4]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	f000 fb5b 	bl	800c780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2150      	movs	r1, #80	; 0x50
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 fc6a 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c0d6:	e029      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6818      	ldr	r0, [r3, #0]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	6859      	ldr	r1, [r3, #4]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	f000 fbb7 	bl	800c858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2160      	movs	r1, #96	; 0x60
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 fc5a 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c0f6:	e019      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6818      	ldr	r0, [r3, #0]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	6859      	ldr	r1, [r3, #4]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
 800c104:	461a      	mov	r2, r3
 800c106:	f000 fb3b 	bl	800c780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2140      	movs	r1, #64	; 0x40
 800c110:	4618      	mov	r0, r3
 800c112:	f000 fc4a 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c116:	e009      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4619      	mov	r1, r3
 800c122:	4610      	mov	r0, r2
 800c124:	f000 fc41 	bl	800c9aa <TIM_ITRx_SetConfig>
      break;
 800c128:	e000      	b.n	800c12c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c12a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	2b0c      	cmp	r3, #12
 800c15a:	d831      	bhi.n	800c1c0 <HAL_TIM_ReadCapturedValue+0x78>
 800c15c:	a201      	add	r2, pc, #4	; (adr r2, 800c164 <HAL_TIM_ReadCapturedValue+0x1c>)
 800c15e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c162:	bf00      	nop
 800c164:	0800c199 	.word	0x0800c199
 800c168:	0800c1c1 	.word	0x0800c1c1
 800c16c:	0800c1c1 	.word	0x0800c1c1
 800c170:	0800c1c1 	.word	0x0800c1c1
 800c174:	0800c1a3 	.word	0x0800c1a3
 800c178:	0800c1c1 	.word	0x0800c1c1
 800c17c:	0800c1c1 	.word	0x0800c1c1
 800c180:	0800c1c1 	.word	0x0800c1c1
 800c184:	0800c1ad 	.word	0x0800c1ad
 800c188:	0800c1c1 	.word	0x0800c1c1
 800c18c:	0800c1c1 	.word	0x0800c1c1
 800c190:	0800c1c1 	.word	0x0800c1c1
 800c194:	0800c1b7 	.word	0x0800c1b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c19e:	60fb      	str	r3, [r7, #12]

      break;
 800c1a0:	e00f      	b.n	800c1c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a8:	60fb      	str	r3, [r7, #12]

      break;
 800c1aa:	e00a      	b.n	800c1c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b2:	60fb      	str	r3, [r7, #12]

      break;
 800c1b4:	e005      	b.n	800c1c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1bc:	60fb      	str	r3, [r7, #12]

      break;
 800c1be:	e000      	b.n	800c1c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c1c0:	bf00      	nop
  }

  return tmpreg;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3714      	adds	r7, #20
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a40      	ldr	r2, [pc, #256]	; (800c30c <TIM_Base_SetConfig+0x114>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d013      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c216:	d00f      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a3d      	ldr	r2, [pc, #244]	; (800c310 <TIM_Base_SetConfig+0x118>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d00b      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a3c      	ldr	r2, [pc, #240]	; (800c314 <TIM_Base_SetConfig+0x11c>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d007      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a3b      	ldr	r2, [pc, #236]	; (800c318 <TIM_Base_SetConfig+0x120>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d003      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a3a      	ldr	r2, [pc, #232]	; (800c31c <TIM_Base_SetConfig+0x124>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d108      	bne.n	800c24a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c23e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4313      	orrs	r3, r2
 800c248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a2f      	ldr	r2, [pc, #188]	; (800c30c <TIM_Base_SetConfig+0x114>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d02b      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c258:	d027      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a2c      	ldr	r2, [pc, #176]	; (800c310 <TIM_Base_SetConfig+0x118>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d023      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a2b      	ldr	r2, [pc, #172]	; (800c314 <TIM_Base_SetConfig+0x11c>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d01f      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a2a      	ldr	r2, [pc, #168]	; (800c318 <TIM_Base_SetConfig+0x120>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d01b      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a29      	ldr	r2, [pc, #164]	; (800c31c <TIM_Base_SetConfig+0x124>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d017      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a28      	ldr	r2, [pc, #160]	; (800c320 <TIM_Base_SetConfig+0x128>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d013      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a27      	ldr	r2, [pc, #156]	; (800c324 <TIM_Base_SetConfig+0x12c>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d00f      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a26      	ldr	r2, [pc, #152]	; (800c328 <TIM_Base_SetConfig+0x130>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d00b      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a25      	ldr	r2, [pc, #148]	; (800c32c <TIM_Base_SetConfig+0x134>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d007      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a24      	ldr	r2, [pc, #144]	; (800c330 <TIM_Base_SetConfig+0x138>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d003      	beq.n	800c2aa <TIM_Base_SetConfig+0xb2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a23      	ldr	r2, [pc, #140]	; (800c334 <TIM_Base_SetConfig+0x13c>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d108      	bne.n	800c2bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	695b      	ldr	r3, [r3, #20]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	689a      	ldr	r2, [r3, #8]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <TIM_Base_SetConfig+0x114>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d003      	beq.n	800c2f0 <TIM_Base_SetConfig+0xf8>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a0c      	ldr	r2, [pc, #48]	; (800c31c <TIM_Base_SetConfig+0x124>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d103      	bne.n	800c2f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	691a      	ldr	r2, [r3, #16]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	615a      	str	r2, [r3, #20]
}
 800c2fe:	bf00      	nop
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	40010000 	.word	0x40010000
 800c310:	40000400 	.word	0x40000400
 800c314:	40000800 	.word	0x40000800
 800c318:	40000c00 	.word	0x40000c00
 800c31c:	40010400 	.word	0x40010400
 800c320:	40014000 	.word	0x40014000
 800c324:	40014400 	.word	0x40014400
 800c328:	40014800 	.word	0x40014800
 800c32c:	40001800 	.word	0x40001800
 800c330:	40001c00 	.word	0x40001c00
 800c334:	40002000 	.word	0x40002000

0800c338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c338:	b480      	push	{r7}
 800c33a:	b087      	sub	sp, #28
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	f023 0201 	bic.w	r2, r3, #1
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f023 0303 	bic.w	r3, r3, #3
 800c36e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4313      	orrs	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f023 0302 	bic.w	r3, r3, #2
 800c380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	4313      	orrs	r3, r2
 800c38a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a20      	ldr	r2, [pc, #128]	; (800c410 <TIM_OC1_SetConfig+0xd8>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d003      	beq.n	800c39c <TIM_OC1_SetConfig+0x64>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a1f      	ldr	r2, [pc, #124]	; (800c414 <TIM_OC1_SetConfig+0xdc>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d10c      	bne.n	800c3b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f023 0308 	bic.w	r3, r3, #8
 800c3a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f023 0304 	bic.w	r3, r3, #4
 800c3b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a15      	ldr	r2, [pc, #84]	; (800c410 <TIM_OC1_SetConfig+0xd8>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d003      	beq.n	800c3c6 <TIM_OC1_SetConfig+0x8e>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a14      	ldr	r2, [pc, #80]	; (800c414 <TIM_OC1_SetConfig+0xdc>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d111      	bne.n	800c3ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	685a      	ldr	r2, [r3, #4]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	621a      	str	r2, [r3, #32]
}
 800c404:	bf00      	nop
 800c406:	371c      	adds	r7, #28
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	40010000 	.word	0x40010000
 800c414:	40010400 	.word	0x40010400

0800c418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	f023 0210 	bic.w	r2, r3, #16
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c44e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	021b      	lsls	r3, r3, #8
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	f023 0320 	bic.w	r3, r3, #32
 800c462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	011b      	lsls	r3, r3, #4
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	4a22      	ldr	r2, [pc, #136]	; (800c4fc <TIM_OC2_SetConfig+0xe4>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d003      	beq.n	800c480 <TIM_OC2_SetConfig+0x68>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a21      	ldr	r2, [pc, #132]	; (800c500 <TIM_OC2_SetConfig+0xe8>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d10d      	bne.n	800c49c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	011b      	lsls	r3, r3, #4
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	4313      	orrs	r3, r2
 800c492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c49a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a17      	ldr	r2, [pc, #92]	; (800c4fc <TIM_OC2_SetConfig+0xe4>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d003      	beq.n	800c4ac <TIM_OC2_SetConfig+0x94>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a16      	ldr	r2, [pc, #88]	; (800c500 <TIM_OC2_SetConfig+0xe8>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d113      	bne.n	800c4d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	699b      	ldr	r3, [r3, #24]
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	685a      	ldr	r2, [r3, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	621a      	str	r2, [r3, #32]
}
 800c4ee:	bf00      	nop
 800c4f0:	371c      	adds	r7, #28
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	40010000 	.word	0x40010000
 800c500:	40010400 	.word	0x40010400

0800c504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f023 0303 	bic.w	r3, r3, #3
 800c53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4313      	orrs	r3, r2
 800c544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c54c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	021b      	lsls	r3, r3, #8
 800c554:	697a      	ldr	r2, [r7, #20]
 800c556:	4313      	orrs	r3, r2
 800c558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a21      	ldr	r2, [pc, #132]	; (800c5e4 <TIM_OC3_SetConfig+0xe0>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d003      	beq.n	800c56a <TIM_OC3_SetConfig+0x66>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a20      	ldr	r2, [pc, #128]	; (800c5e8 <TIM_OC3_SetConfig+0xe4>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d10d      	bne.n	800c586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	021b      	lsls	r3, r3, #8
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a16      	ldr	r2, [pc, #88]	; (800c5e4 <TIM_OC3_SetConfig+0xe0>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d003      	beq.n	800c596 <TIM_OC3_SetConfig+0x92>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a15      	ldr	r2, [pc, #84]	; (800c5e8 <TIM_OC3_SetConfig+0xe4>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d113      	bne.n	800c5be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c59c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	695b      	ldr	r3, [r3, #20]
 800c5aa:	011b      	lsls	r3, r3, #4
 800c5ac:	693a      	ldr	r2, [r7, #16]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	699b      	ldr	r3, [r3, #24]
 800c5b6:	011b      	lsls	r3, r3, #4
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	621a      	str	r2, [r3, #32]
}
 800c5d8:	bf00      	nop
 800c5da:	371c      	adds	r7, #28
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	40010000 	.word	0x40010000
 800c5e8:	40010400 	.word	0x40010400

0800c5ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b087      	sub	sp, #28
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c61a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	021b      	lsls	r3, r3, #8
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	031b      	lsls	r3, r3, #12
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4313      	orrs	r3, r2
 800c642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a12      	ldr	r2, [pc, #72]	; (800c690 <TIM_OC4_SetConfig+0xa4>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d003      	beq.n	800c654 <TIM_OC4_SetConfig+0x68>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a11      	ldr	r2, [pc, #68]	; (800c694 <TIM_OC4_SetConfig+0xa8>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d109      	bne.n	800c668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c65a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	019b      	lsls	r3, r3, #6
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	4313      	orrs	r3, r2
 800c666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	621a      	str	r2, [r3, #32]
}
 800c682:	bf00      	nop
 800c684:	371c      	adds	r7, #28
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	40010000 	.word	0x40010000
 800c694:	40010400 	.word	0x40010400

0800c698 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c698:	b480      	push	{r7}
 800c69a:	b087      	sub	sp, #28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
 800c6a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	f023 0201 	bic.w	r2, r3, #1
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6a1b      	ldr	r3, [r3, #32]
 800c6bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4a28      	ldr	r2, [pc, #160]	; (800c764 <TIM_TI1_SetConfig+0xcc>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d01b      	beq.n	800c6fe <TIM_TI1_SetConfig+0x66>
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6cc:	d017      	beq.n	800c6fe <TIM_TI1_SetConfig+0x66>
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	4a25      	ldr	r2, [pc, #148]	; (800c768 <TIM_TI1_SetConfig+0xd0>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d013      	beq.n	800c6fe <TIM_TI1_SetConfig+0x66>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	4a24      	ldr	r2, [pc, #144]	; (800c76c <TIM_TI1_SetConfig+0xd4>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d00f      	beq.n	800c6fe <TIM_TI1_SetConfig+0x66>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	4a23      	ldr	r2, [pc, #140]	; (800c770 <TIM_TI1_SetConfig+0xd8>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d00b      	beq.n	800c6fe <TIM_TI1_SetConfig+0x66>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	4a22      	ldr	r2, [pc, #136]	; (800c774 <TIM_TI1_SetConfig+0xdc>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d007      	beq.n	800c6fe <TIM_TI1_SetConfig+0x66>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	4a21      	ldr	r2, [pc, #132]	; (800c778 <TIM_TI1_SetConfig+0xe0>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d003      	beq.n	800c6fe <TIM_TI1_SetConfig+0x66>
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	4a20      	ldr	r2, [pc, #128]	; (800c77c <TIM_TI1_SetConfig+0xe4>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d101      	bne.n	800c702 <TIM_TI1_SetConfig+0x6a>
 800c6fe:	2301      	movs	r3, #1
 800c700:	e000      	b.n	800c704 <TIM_TI1_SetConfig+0x6c>
 800c702:	2300      	movs	r3, #0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d008      	beq.n	800c71a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4313      	orrs	r3, r2
 800c716:	617b      	str	r3, [r7, #20]
 800c718:	e003      	b.n	800c722 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f043 0301 	orr.w	r3, r3, #1
 800c720:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	011b      	lsls	r3, r3, #4
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	4313      	orrs	r3, r2
 800c734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f023 030a 	bic.w	r3, r3, #10
 800c73c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	f003 030a 	and.w	r3, r3, #10
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	4313      	orrs	r3, r2
 800c748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	621a      	str	r2, [r3, #32]
}
 800c756:	bf00      	nop
 800c758:	371c      	adds	r7, #28
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	40010000 	.word	0x40010000
 800c768:	40000400 	.word	0x40000400
 800c76c:	40000800 	.word	0x40000800
 800c770:	40000c00 	.word	0x40000c00
 800c774:	40010400 	.word	0x40010400
 800c778:	40014000 	.word	0x40014000
 800c77c:	40001800 	.word	0x40001800

0800c780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c780:	b480      	push	{r7}
 800c782:	b087      	sub	sp, #28
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
 800c790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6a1b      	ldr	r3, [r3, #32]
 800c796:	f023 0201 	bic.w	r2, r3, #1
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	011b      	lsls	r3, r3, #4
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f023 030a 	bic.w	r3, r3, #10
 800c7bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	621a      	str	r2, [r3, #32]
}
 800c7d2:	bf00      	nop
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c7de:	b480      	push	{r7}
 800c7e0:	b087      	sub	sp, #28
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	60f8      	str	r0, [r7, #12]
 800c7e6:	60b9      	str	r1, [r7, #8]
 800c7e8:	607a      	str	r2, [r7, #4]
 800c7ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	f023 0210 	bic.w	r2, r3, #16
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c80a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	4313      	orrs	r3, r2
 800c814:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c81c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	031b      	lsls	r3, r3, #12
 800c822:	b29b      	uxth	r3, r3
 800c824:	697a      	ldr	r2, [r7, #20]
 800c826:	4313      	orrs	r3, r2
 800c828:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c830:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	011b      	lsls	r3, r3, #4
 800c836:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	697a      	ldr	r2, [r7, #20]
 800c844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	693a      	ldr	r2, [r7, #16]
 800c84a:	621a      	str	r2, [r3, #32]
}
 800c84c:	bf00      	nop
 800c84e:	371c      	adds	r7, #28
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	f023 0210 	bic.w	r2, r3, #16
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	031b      	lsls	r3, r3, #12
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	621a      	str	r2, [r3, #32]
}
 800c8ac:	bf00      	nop
 800c8ae:	371c      	adds	r7, #28
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6a1b      	ldr	r3, [r3, #32]
 800c8dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f023 0303 	bic.w	r3, r3, #3
 800c8e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	011b      	lsls	r3, r3, #4
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	697a      	ldr	r2, [r7, #20]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c908:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	021b      	lsls	r3, r3, #8
 800c90e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	4313      	orrs	r3, r2
 800c916:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	621a      	str	r2, [r3, #32]
}
 800c924:	bf00      	nop
 800c926:	371c      	adds	r7, #28
 800c928:	46bd      	mov	sp, r7
 800c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92e:	4770      	bx	lr

0800c930 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c930:	b480      	push	{r7}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6a1b      	ldr	r3, [r3, #32]
 800c942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	69db      	ldr	r3, [r3, #28]
 800c94e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c95c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	021b      	lsls	r3, r3, #8
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	4313      	orrs	r3, r2
 800c966:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c96e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	031b      	lsls	r3, r3, #12
 800c974:	b29b      	uxth	r3, r3
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	4313      	orrs	r3, r2
 800c97a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c982:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	031b      	lsls	r3, r3, #12
 800c988:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	4313      	orrs	r3, r2
 800c990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	697a      	ldr	r2, [r7, #20]
 800c996:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	621a      	str	r2, [r3, #32]
}
 800c99e:	bf00      	nop
 800c9a0:	371c      	adds	r7, #28
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b085      	sub	sp, #20
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	f043 0307 	orr.w	r3, r3, #7
 800c9cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	609a      	str	r2, [r3, #8]
}
 800c9d4:	bf00      	nop
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	021a      	lsls	r2, r3, #8
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	431a      	orrs	r2, r3
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	609a      	str	r2, [r3, #8]
}
 800ca14:	bf00      	nop
 800ca16:	371c      	adds	r7, #28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b087      	sub	sp, #28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	f003 031f 	and.w	r3, r3, #31
 800ca32:	2201      	movs	r2, #1
 800ca34:	fa02 f303 	lsl.w	r3, r2, r3
 800ca38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6a1a      	ldr	r2, [r3, #32]
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	43db      	mvns	r3, r3
 800ca42:	401a      	ands	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	6a1a      	ldr	r2, [r3, #32]
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	f003 031f 	and.w	r3, r3, #31
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	fa01 f303 	lsl.w	r3, r1, r3
 800ca58:	431a      	orrs	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	621a      	str	r2, [r3, #32]
}
 800ca5e:	bf00      	nop
 800ca60:	371c      	adds	r7, #28
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
	...

0800ca6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d101      	bne.n	800ca84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca80:	2302      	movs	r3, #2
 800ca82:	e05a      	b.n	800cb3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a21      	ldr	r2, [pc, #132]	; (800cb48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d022      	beq.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cad0:	d01d      	beq.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a1d      	ldr	r2, [pc, #116]	; (800cb4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d018      	beq.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a1b      	ldr	r2, [pc, #108]	; (800cb50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d013      	beq.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a1a      	ldr	r2, [pc, #104]	; (800cb54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d00e      	beq.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a18      	ldr	r2, [pc, #96]	; (800cb58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d009      	beq.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a17      	ldr	r2, [pc, #92]	; (800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d004      	beq.n	800cb0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a15      	ldr	r2, [pc, #84]	; (800cb60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d10c      	bne.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	40010000 	.word	0x40010000
 800cb4c:	40000400 	.word	0x40000400
 800cb50:	40000800 	.word	0x40000800
 800cb54:	40000c00 	.word	0x40000c00
 800cb58:	40010400 	.word	0x40010400
 800cb5c:	40014000 	.word	0x40014000
 800cb60:	40001800 	.word	0x40001800

0800cb64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d101      	bne.n	800cb80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb7c:	2302      	movs	r3, #2
 800cb7e:	e03d      	b.n	800cbfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	69db      	ldr	r3, [r3, #28]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc10:	bf00      	nop
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc30:	b084      	sub	sp, #16
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	f107 001c 	add.w	r0, r7, #28
 800cc3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d122      	bne.n	800cc8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cc5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68db      	ldr	r3, [r3, #12]
 800cc68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cc70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d105      	bne.n	800cc82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 fab4 	bl	800e1f0 <USB_CoreReset>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73fb      	strb	r3, [r7, #15]
 800cc8c:	e01a      	b.n	800ccc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f001 faa8 	bl	800e1f0 <USB_CoreReset>
 800cca0:	4603      	mov	r3, r0
 800cca2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d106      	bne.n	800ccb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	639a      	str	r2, [r3, #56]	; 0x38
 800ccb6:	e005      	b.n	800ccc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ccc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d10b      	bne.n	800cce2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f043 0206 	orr.w	r2, r3, #6
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f043 0220 	orr.w	r2, r3, #32
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccee:	b004      	add	sp, #16
 800ccf0:	4770      	bx	lr
	...

0800ccf4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d165      	bne.n	800cdd4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	4a41      	ldr	r2, [pc, #260]	; (800ce10 <USB_SetTurnaroundTime+0x11c>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d906      	bls.n	800cd1e <USB_SetTurnaroundTime+0x2a>
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	4a40      	ldr	r2, [pc, #256]	; (800ce14 <USB_SetTurnaroundTime+0x120>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d802      	bhi.n	800cd1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cd18:	230f      	movs	r3, #15
 800cd1a:	617b      	str	r3, [r7, #20]
 800cd1c:	e062      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	4a3c      	ldr	r2, [pc, #240]	; (800ce14 <USB_SetTurnaroundTime+0x120>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d906      	bls.n	800cd34 <USB_SetTurnaroundTime+0x40>
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	4a3b      	ldr	r2, [pc, #236]	; (800ce18 <USB_SetTurnaroundTime+0x124>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d802      	bhi.n	800cd34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cd2e:	230e      	movs	r3, #14
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	e057      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	4a38      	ldr	r2, [pc, #224]	; (800ce18 <USB_SetTurnaroundTime+0x124>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d906      	bls.n	800cd4a <USB_SetTurnaroundTime+0x56>
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	4a37      	ldr	r2, [pc, #220]	; (800ce1c <USB_SetTurnaroundTime+0x128>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d802      	bhi.n	800cd4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cd44:	230d      	movs	r3, #13
 800cd46:	617b      	str	r3, [r7, #20]
 800cd48:	e04c      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	4a33      	ldr	r2, [pc, #204]	; (800ce1c <USB_SetTurnaroundTime+0x128>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d906      	bls.n	800cd60 <USB_SetTurnaroundTime+0x6c>
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	4a32      	ldr	r2, [pc, #200]	; (800ce20 <USB_SetTurnaroundTime+0x12c>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d802      	bhi.n	800cd60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cd5a:	230c      	movs	r3, #12
 800cd5c:	617b      	str	r3, [r7, #20]
 800cd5e:	e041      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	4a2f      	ldr	r2, [pc, #188]	; (800ce20 <USB_SetTurnaroundTime+0x12c>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d906      	bls.n	800cd76 <USB_SetTurnaroundTime+0x82>
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	4a2e      	ldr	r2, [pc, #184]	; (800ce24 <USB_SetTurnaroundTime+0x130>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d802      	bhi.n	800cd76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cd70:	230b      	movs	r3, #11
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	e036      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	4a2a      	ldr	r2, [pc, #168]	; (800ce24 <USB_SetTurnaroundTime+0x130>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d906      	bls.n	800cd8c <USB_SetTurnaroundTime+0x98>
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	4a29      	ldr	r2, [pc, #164]	; (800ce28 <USB_SetTurnaroundTime+0x134>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d802      	bhi.n	800cd8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cd86:	230a      	movs	r3, #10
 800cd88:	617b      	str	r3, [r7, #20]
 800cd8a:	e02b      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	4a26      	ldr	r2, [pc, #152]	; (800ce28 <USB_SetTurnaroundTime+0x134>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d906      	bls.n	800cda2 <USB_SetTurnaroundTime+0xae>
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	4a25      	ldr	r2, [pc, #148]	; (800ce2c <USB_SetTurnaroundTime+0x138>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d802      	bhi.n	800cda2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cd9c:	2309      	movs	r3, #9
 800cd9e:	617b      	str	r3, [r7, #20]
 800cda0:	e020      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	4a21      	ldr	r2, [pc, #132]	; (800ce2c <USB_SetTurnaroundTime+0x138>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d906      	bls.n	800cdb8 <USB_SetTurnaroundTime+0xc4>
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	4a20      	ldr	r2, [pc, #128]	; (800ce30 <USB_SetTurnaroundTime+0x13c>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d802      	bhi.n	800cdb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	617b      	str	r3, [r7, #20]
 800cdb6:	e015      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	4a1d      	ldr	r2, [pc, #116]	; (800ce30 <USB_SetTurnaroundTime+0x13c>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d906      	bls.n	800cdce <USB_SetTurnaroundTime+0xda>
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	4a1c      	ldr	r2, [pc, #112]	; (800ce34 <USB_SetTurnaroundTime+0x140>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d802      	bhi.n	800cdce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cdc8:	2307      	movs	r3, #7
 800cdca:	617b      	str	r3, [r7, #20]
 800cdcc:	e00a      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cdce:	2306      	movs	r3, #6
 800cdd0:	617b      	str	r3, [r7, #20]
 800cdd2:	e007      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d102      	bne.n	800cde0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cdda:	2309      	movs	r3, #9
 800cddc:	617b      	str	r3, [r7, #20]
 800cdde:	e001      	b.n	800cde4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cde0:	2309      	movs	r3, #9
 800cde2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	68da      	ldr	r2, [r3, #12]
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	029b      	lsls	r3, r3, #10
 800cdf8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cdfc:	431a      	orrs	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	371c      	adds	r7, #28
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	00d8acbf 	.word	0x00d8acbf
 800ce14:	00e4e1bf 	.word	0x00e4e1bf
 800ce18:	00f423ff 	.word	0x00f423ff
 800ce1c:	0106737f 	.word	0x0106737f
 800ce20:	011a499f 	.word	0x011a499f
 800ce24:	01312cff 	.word	0x01312cff
 800ce28:	014ca43f 	.word	0x014ca43f
 800ce2c:	016e35ff 	.word	0x016e35ff
 800ce30:	01a6ab1f 	.word	0x01a6ab1f
 800ce34:	01e847ff 	.word	0x01e847ff

0800ce38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	689b      	ldr	r3, [r3, #8]
 800ce44:	f043 0201 	orr.w	r2, r3, #1
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	370c      	adds	r7, #12
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b083      	sub	sp, #12
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f023 0201 	bic.w	r2, r3, #1
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	370c      	adds	r7, #12
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d106      	bne.n	800cea8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	60da      	str	r2, [r3, #12]
 800cea6:	e00b      	b.n	800cec0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	60da      	str	r2, [r3, #12]
 800ceba:	e001      	b.n	800cec0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	e003      	b.n	800cec8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cec0:	2032      	movs	r0, #50	; 0x32
 800cec2:	f7f9 f9bf 	bl	8006244 <HAL_Delay>

  return HAL_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3708      	adds	r7, #8
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ced0:	b084      	sub	sp, #16
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b086      	sub	sp, #24
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ceea:	2300      	movs	r3, #0
 800ceec:	613b      	str	r3, [r7, #16]
 800ceee:	e009      	b.n	800cf04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	3340      	adds	r3, #64	; 0x40
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	2200      	movs	r2, #0
 800cefc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	3301      	adds	r3, #1
 800cf02:	613b      	str	r3, [r7, #16]
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	2b0e      	cmp	r3, #14
 800cf08:	d9f2      	bls.n	800cef0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cf0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d11c      	bne.n	800cf4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cf1e:	f043 0302 	orr.w	r3, r3, #2
 800cf22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	639a      	str	r2, [r3, #56]	; 0x38
 800cf48:	e00b      	b.n	800cf62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf68:	461a      	mov	r2, r3
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf74:	4619      	mov	r1, r3
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	680b      	ldr	r3, [r1, #0]
 800cf80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d10c      	bne.n	800cfa2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d104      	bne.n	800cf98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cf8e:	2100      	movs	r1, #0
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 f949 	bl	800d228 <USB_SetDevSpeed>
 800cf96:	e008      	b.n	800cfaa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cf98:	2101      	movs	r1, #1
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 f944 	bl	800d228 <USB_SetDevSpeed>
 800cfa0:	e003      	b.n	800cfaa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cfa2:	2103      	movs	r1, #3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 f93f 	bl	800d228 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cfaa:	2110      	movs	r1, #16
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f8f3 	bl	800d198 <USB_FlushTxFifo>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f911 	bl	800d1e4 <USB_FlushRxFifo>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfde:	461a      	mov	r2, r3
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfea:	461a      	mov	r2, r3
 800cfec:	2300      	movs	r3, #0
 800cfee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cff0:	2300      	movs	r3, #0
 800cff2:	613b      	str	r3, [r7, #16]
 800cff4:	e043      	b.n	800d07e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	015a      	lsls	r2, r3, #5
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	4413      	add	r3, r2
 800cffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d008:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d00c:	d118      	bne.n	800d040 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10a      	bne.n	800d02a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	015a      	lsls	r2, r3, #5
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d020:	461a      	mov	r2, r3
 800d022:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d026:	6013      	str	r3, [r2, #0]
 800d028:	e013      	b.n	800d052 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	015a      	lsls	r2, r3, #5
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	4413      	add	r3, r2
 800d032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d036:	461a      	mov	r2, r3
 800d038:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	e008      	b.n	800d052 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04c:	461a      	mov	r2, r3
 800d04e:	2300      	movs	r3, #0
 800d050:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	015a      	lsls	r2, r3, #5
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4413      	add	r3, r2
 800d05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d05e:	461a      	mov	r2, r3
 800d060:	2300      	movs	r3, #0
 800d062:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d070:	461a      	mov	r2, r3
 800d072:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d076:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	3301      	adds	r3, #1
 800d07c:	613b      	str	r3, [r7, #16]
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	693a      	ldr	r2, [r7, #16]
 800d082:	429a      	cmp	r2, r3
 800d084:	d3b7      	bcc.n	800cff6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d086:	2300      	movs	r3, #0
 800d088:	613b      	str	r3, [r7, #16]
 800d08a:	e043      	b.n	800d114 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	4413      	add	r3, r2
 800d094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d09e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0a2:	d118      	bne.n	800d0d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d10a      	bne.n	800d0c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	015a      	lsls	r2, r3, #5
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	e013      	b.n	800d0e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	015a      	lsls	r2, r3, #5
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	4413      	add	r3, r2
 800d0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d0d2:	6013      	str	r3, [r2, #0]
 800d0d4:	e008      	b.n	800d0e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	015a      	lsls	r2, r3, #5
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	4413      	add	r3, r2
 800d0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	015a      	lsls	r2, r3, #5
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	015a      	lsls	r2, r3, #5
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	4413      	add	r3, r2
 800d102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d106:	461a      	mov	r2, r3
 800d108:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d10c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	3301      	adds	r3, #1
 800d112:	613b      	str	r3, [r7, #16]
 800d114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d116:	693a      	ldr	r2, [r7, #16]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d3b7      	bcc.n	800d08c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d12a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d12e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d13c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	2b00      	cmp	r3, #0
 800d142:	d105      	bne.n	800d150 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	f043 0210 	orr.w	r2, r3, #16
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	699a      	ldr	r2, [r3, #24]
 800d154:	4b0f      	ldr	r3, [pc, #60]	; (800d194 <USB_DevInit+0x2c4>)
 800d156:	4313      	orrs	r3, r2
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d005      	beq.n	800d16e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	f043 0208 	orr.w	r2, r3, #8
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d170:	2b01      	cmp	r3, #1
 800d172:	d107      	bne.n	800d184 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d17c:	f043 0304 	orr.w	r3, r3, #4
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d184:	7dfb      	ldrb	r3, [r7, #23]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3718      	adds	r7, #24
 800d18a:	46bd      	mov	sp, r7
 800d18c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d190:	b004      	add	sp, #16
 800d192:	4770      	bx	lr
 800d194:	803c3800 	.word	0x803c3800

0800d198 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	019b      	lsls	r3, r3, #6
 800d1aa:	f043 0220 	orr.w	r2, r3, #32
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	60fb      	str	r3, [r7, #12]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	4a09      	ldr	r2, [pc, #36]	; (800d1e0 <USB_FlushTxFifo+0x48>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d901      	bls.n	800d1c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d1c0:	2303      	movs	r3, #3
 800d1c2:	e006      	b.n	800d1d2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	f003 0320 	and.w	r3, r3, #32
 800d1cc:	2b20      	cmp	r3, #32
 800d1ce:	d0f0      	beq.n	800d1b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	00030d40 	.word	0x00030d40

0800d1e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2210      	movs	r2, #16
 800d1f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4a09      	ldr	r2, [pc, #36]	; (800d224 <USB_FlushRxFifo+0x40>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d901      	bls.n	800d208 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d204:	2303      	movs	r3, #3
 800d206:	e006      	b.n	800d216 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	f003 0310 	and.w	r3, r3, #16
 800d210:	2b10      	cmp	r3, #16
 800d212:	d0f0      	beq.n	800d1f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	00030d40 	.word	0x00030d40

0800d228 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	78fb      	ldrb	r3, [r7, #3]
 800d242:	68f9      	ldr	r1, [r7, #12]
 800d244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d248:	4313      	orrs	r3, r2
 800d24a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3714      	adds	r7, #20
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d25a:	b480      	push	{r7}
 800d25c:	b087      	sub	sp, #28
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f003 0306 	and.w	r3, r3, #6
 800d272:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d102      	bne.n	800d280 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d27a:	2300      	movs	r3, #0
 800d27c:	75fb      	strb	r3, [r7, #23]
 800d27e:	e00a      	b.n	800d296 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2b02      	cmp	r3, #2
 800d284:	d002      	beq.n	800d28c <USB_GetDevSpeed+0x32>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b06      	cmp	r3, #6
 800d28a:	d102      	bne.n	800d292 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d28c:	2302      	movs	r3, #2
 800d28e:	75fb      	strb	r3, [r7, #23]
 800d290:	e001      	b.n	800d296 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d292:	230f      	movs	r3, #15
 800d294:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d296:	7dfb      	ldrb	r3, [r7, #23]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	371c      	adds	r7, #28
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr

0800d2a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	785b      	ldrb	r3, [r3, #1]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d13a      	bne.n	800d336 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c6:	69da      	ldr	r2, [r3, #28]
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 030f 	and.w	r3, r3, #15
 800d2d0:	2101      	movs	r1, #1
 800d2d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	68f9      	ldr	r1, [r7, #12]
 800d2da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d155      	bne.n	800d3a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	015a      	lsls	r2, r3, #5
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	4413      	add	r3, r2
 800d300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	78db      	ldrb	r3, [r3, #3]
 800d312:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d314:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	059b      	lsls	r3, r3, #22
 800d31a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d31c:	4313      	orrs	r3, r2
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	0151      	lsls	r1, r2, #5
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	440a      	add	r2, r1
 800d326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d32a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d32e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	e036      	b.n	800d3a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d33c:	69da      	ldr	r2, [r3, #28]
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	f003 030f 	and.w	r3, r3, #15
 800d346:	2101      	movs	r1, #1
 800d348:	fa01 f303 	lsl.w	r3, r1, r3
 800d34c:	041b      	lsls	r3, r3, #16
 800d34e:	68f9      	ldr	r1, [r7, #12]
 800d350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d354:	4313      	orrs	r3, r2
 800d356:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	015a      	lsls	r2, r3, #5
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4413      	add	r3, r2
 800d360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d11a      	bne.n	800d3a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	4413      	add	r3, r2
 800d376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	78db      	ldrb	r3, [r3, #3]
 800d388:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d38a:	430b      	orrs	r3, r1
 800d38c:	4313      	orrs	r3, r2
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	0151      	lsls	r1, r2, #5
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	440a      	add	r2, r1
 800d396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d39a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d39e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3714      	adds	r7, #20
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
	...

0800d3b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	785b      	ldrb	r3, [r3, #1]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d161      	bne.n	800d494 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	015a      	lsls	r2, r3, #5
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3e6:	d11f      	bne.n	800d428 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	015a      	lsls	r2, r3, #5
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	0151      	lsls	r1, r2, #5
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	440a      	add	r2, r1
 800d3fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d406:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	0151      	lsls	r1, r2, #5
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	440a      	add	r2, r1
 800d41e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d42e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	f003 030f 	and.w	r3, r3, #15
 800d438:	2101      	movs	r1, #1
 800d43a:	fa01 f303 	lsl.w	r3, r1, r3
 800d43e:	b29b      	uxth	r3, r3
 800d440:	43db      	mvns	r3, r3
 800d442:	68f9      	ldr	r1, [r7, #12]
 800d444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d448:	4013      	ands	r3, r2
 800d44a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d452:	69da      	ldr	r2, [r3, #28]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	f003 030f 	and.w	r3, r3, #15
 800d45c:	2101      	movs	r1, #1
 800d45e:	fa01 f303 	lsl.w	r3, r1, r3
 800d462:	b29b      	uxth	r3, r3
 800d464:	43db      	mvns	r3, r3
 800d466:	68f9      	ldr	r1, [r7, #12]
 800d468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d46c:	4013      	ands	r3, r2
 800d46e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	015a      	lsls	r2, r3, #5
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	4413      	add	r3, r2
 800d478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	0159      	lsls	r1, r3, #5
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	440b      	add	r3, r1
 800d486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d48a:	4619      	mov	r1, r3
 800d48c:	4b35      	ldr	r3, [pc, #212]	; (800d564 <USB_DeactivateEndpoint+0x1b0>)
 800d48e:	4013      	ands	r3, r2
 800d490:	600b      	str	r3, [r1, #0]
 800d492:	e060      	b.n	800d556 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	015a      	lsls	r2, r3, #5
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	4413      	add	r3, r2
 800d49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4aa:	d11f      	bne.n	800d4ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	015a      	lsls	r2, r3, #5
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	68ba      	ldr	r2, [r7, #8]
 800d4bc:	0151      	lsls	r1, r2, #5
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	440a      	add	r2, r1
 800d4c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	015a      	lsls	r2, r3, #5
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	0151      	lsls	r1, r2, #5
 800d4de:	68fa      	ldr	r2, [r7, #12]
 800d4e0:	440a      	add	r2, r1
 800d4e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	fa01 f303 	lsl.w	r3, r1, r3
 800d502:	041b      	lsls	r3, r3, #16
 800d504:	43db      	mvns	r3, r3
 800d506:	68f9      	ldr	r1, [r7, #12]
 800d508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d50c:	4013      	ands	r3, r2
 800d50e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d516:	69da      	ldr	r2, [r3, #28]
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	f003 030f 	and.w	r3, r3, #15
 800d520:	2101      	movs	r1, #1
 800d522:	fa01 f303 	lsl.w	r3, r1, r3
 800d526:	041b      	lsls	r3, r3, #16
 800d528:	43db      	mvns	r3, r3
 800d52a:	68f9      	ldr	r1, [r7, #12]
 800d52c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d530:	4013      	ands	r3, r2
 800d532:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	015a      	lsls	r2, r3, #5
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	4413      	add	r3, r2
 800d53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	0159      	lsls	r1, r3, #5
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	440b      	add	r3, r1
 800d54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d54e:	4619      	mov	r1, r3
 800d550:	4b05      	ldr	r3, [pc, #20]	; (800d568 <USB_DeactivateEndpoint+0x1b4>)
 800d552:	4013      	ands	r3, r2
 800d554:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3714      	adds	r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	ec337800 	.word	0xec337800
 800d568:	eff37800 	.word	0xeff37800

0800d56c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b08a      	sub	sp, #40	; 0x28
 800d570:	af02      	add	r7, sp, #8
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	4613      	mov	r3, r2
 800d578:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	785b      	ldrb	r3, [r3, #1]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	f040 815c 	bne.w	800d846 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	695b      	ldr	r3, [r3, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d132      	bne.n	800d5fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	0151      	lsls	r1, r2, #5
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d5b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d5b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	015a      	lsls	r2, r3, #5
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	69ba      	ldr	r2, [r7, #24]
 800d5ca:	0151      	lsls	r1, r2, #5
 800d5cc:	69fa      	ldr	r2, [r7, #28]
 800d5ce:	440a      	add	r2, r1
 800d5d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	015a      	lsls	r2, r3, #5
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	69ba      	ldr	r2, [r7, #24]
 800d5ea:	0151      	lsls	r1, r2, #5
 800d5ec:	69fa      	ldr	r2, [r7, #28]
 800d5ee:	440a      	add	r2, r1
 800d5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5f4:	0cdb      	lsrs	r3, r3, #19
 800d5f6:	04db      	lsls	r3, r3, #19
 800d5f8:	6113      	str	r3, [r2, #16]
 800d5fa:	e074      	b.n	800d6e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d5fc:	69bb      	ldr	r3, [r7, #24]
 800d5fe:	015a      	lsls	r2, r3, #5
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	4413      	add	r3, r2
 800d604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	69ba      	ldr	r2, [r7, #24]
 800d60c:	0151      	lsls	r1, r2, #5
 800d60e:	69fa      	ldr	r2, [r7, #28]
 800d610:	440a      	add	r2, r1
 800d612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d616:	0cdb      	lsrs	r3, r3, #19
 800d618:	04db      	lsls	r3, r3, #19
 800d61a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	69ba      	ldr	r2, [r7, #24]
 800d62c:	0151      	lsls	r1, r2, #5
 800d62e:	69fa      	ldr	r2, [r7, #28]
 800d630:	440a      	add	r2, r1
 800d632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d636:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d63a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d63e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d64c:	691a      	ldr	r2, [r3, #16]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	6959      	ldr	r1, [r3, #20]
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	440b      	add	r3, r1
 800d658:	1e59      	subs	r1, r3, #1
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d662:	04d9      	lsls	r1, r3, #19
 800d664:	4b9d      	ldr	r3, [pc, #628]	; (800d8dc <USB_EPStartXfer+0x370>)
 800d666:	400b      	ands	r3, r1
 800d668:	69b9      	ldr	r1, [r7, #24]
 800d66a:	0148      	lsls	r0, r1, #5
 800d66c:	69f9      	ldr	r1, [r7, #28]
 800d66e:	4401      	add	r1, r0
 800d670:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d674:	4313      	orrs	r3, r2
 800d676:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	015a      	lsls	r2, r3, #5
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	4413      	add	r3, r2
 800d680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d684:	691a      	ldr	r2, [r3, #16]
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	695b      	ldr	r3, [r3, #20]
 800d68a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d68e:	69b9      	ldr	r1, [r7, #24]
 800d690:	0148      	lsls	r0, r1, #5
 800d692:	69f9      	ldr	r1, [r7, #28]
 800d694:	4401      	add	r1, r0
 800d696:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d69a:	4313      	orrs	r3, r2
 800d69c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	78db      	ldrb	r3, [r3, #3]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d11f      	bne.n	800d6e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	015a      	lsls	r2, r3, #5
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	69ba      	ldr	r2, [r7, #24]
 800d6b6:	0151      	lsls	r1, r2, #5
 800d6b8:	69fa      	ldr	r2, [r7, #28]
 800d6ba:	440a      	add	r2, r1
 800d6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d6c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	015a      	lsls	r2, r3, #5
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	69ba      	ldr	r2, [r7, #24]
 800d6d6:	0151      	lsls	r1, r2, #5
 800d6d8:	69fa      	ldr	r2, [r7, #28]
 800d6da:	440a      	add	r2, r1
 800d6dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d6e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d6e6:	79fb      	ldrb	r3, [r7, #7]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d14b      	bne.n	800d784 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d009      	beq.n	800d708 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d700:	461a      	mov	r2, r3
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	78db      	ldrb	r3, [r3, #3]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d128      	bne.n	800d762 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d110      	bne.n	800d742 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	015a      	lsls	r2, r3, #5
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	4413      	add	r3, r2
 800d728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	69ba      	ldr	r2, [r7, #24]
 800d730:	0151      	lsls	r1, r2, #5
 800d732:	69fa      	ldr	r2, [r7, #28]
 800d734:	440a      	add	r2, r1
 800d736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d73a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	e00f      	b.n	800d762 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	015a      	lsls	r2, r3, #5
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	4413      	add	r3, r2
 800d74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	69ba      	ldr	r2, [r7, #24]
 800d752:	0151      	lsls	r1, r2, #5
 800d754:	69fa      	ldr	r2, [r7, #28]
 800d756:	440a      	add	r2, r1
 800d758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d75c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d760:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	015a      	lsls	r2, r3, #5
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	4413      	add	r3, r2
 800d76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	69ba      	ldr	r2, [r7, #24]
 800d772:	0151      	lsls	r1, r2, #5
 800d774:	69fa      	ldr	r2, [r7, #28]
 800d776:	440a      	add	r2, r1
 800d778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d77c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d780:	6013      	str	r3, [r2, #0]
 800d782:	e12f      	b.n	800d9e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	015a      	lsls	r2, r3, #5
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	4413      	add	r3, r2
 800d78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	69ba      	ldr	r2, [r7, #24]
 800d794:	0151      	lsls	r1, r2, #5
 800d796:	69fa      	ldr	r2, [r7, #28]
 800d798:	440a      	add	r2, r1
 800d79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d79e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d7a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	78db      	ldrb	r3, [r3, #3]
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d015      	beq.n	800d7d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	695b      	ldr	r3, [r3, #20]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f000 8117 	beq.w	800d9e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	f003 030f 	and.w	r3, r3, #15
 800d7c6:	2101      	movs	r1, #1
 800d7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d7cc:	69f9      	ldr	r1, [r7, #28]
 800d7ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	634b      	str	r3, [r1, #52]	; 0x34
 800d7d6:	e105      	b.n	800d9e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d110      	bne.n	800d80a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	015a      	lsls	r2, r3, #5
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	69ba      	ldr	r2, [r7, #24]
 800d7f8:	0151      	lsls	r1, r2, #5
 800d7fa:	69fa      	ldr	r2, [r7, #28]
 800d7fc:	440a      	add	r2, r1
 800d7fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d802:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d806:	6013      	str	r3, [r2, #0]
 800d808:	e00f      	b.n	800d82a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	015a      	lsls	r2, r3, #5
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	4413      	add	r3, r2
 800d812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	69ba      	ldr	r2, [r7, #24]
 800d81a:	0151      	lsls	r1, r2, #5
 800d81c:	69fa      	ldr	r2, [r7, #28]
 800d81e:	440a      	add	r2, r1
 800d820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d828:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	68d9      	ldr	r1, [r3, #12]
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	781a      	ldrb	r2, [r3, #0]
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	695b      	ldr	r3, [r3, #20]
 800d836:	b298      	uxth	r0, r3
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	4603      	mov	r3, r0
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 fa2b 	bl	800dc9a <USB_WritePacket>
 800d844:	e0ce      	b.n	800d9e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	015a      	lsls	r2, r3, #5
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	0151      	lsls	r1, r2, #5
 800d858:	69fa      	ldr	r2, [r7, #28]
 800d85a:	440a      	add	r2, r1
 800d85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d860:	0cdb      	lsrs	r3, r3, #19
 800d862:	04db      	lsls	r3, r3, #19
 800d864:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	015a      	lsls	r2, r3, #5
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	4413      	add	r3, r2
 800d86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	69ba      	ldr	r2, [r7, #24]
 800d876:	0151      	lsls	r1, r2, #5
 800d878:	69fa      	ldr	r2, [r7, #28]
 800d87a:	440a      	add	r2, r1
 800d87c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d880:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d884:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d888:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	695b      	ldr	r3, [r3, #20]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d126      	bne.n	800d8e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	015a      	lsls	r2, r3, #5
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d89e:	691a      	ldr	r2, [r3, #16]
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8a8:	69b9      	ldr	r1, [r7, #24]
 800d8aa:	0148      	lsls	r0, r1, #5
 800d8ac:	69f9      	ldr	r1, [r7, #28]
 800d8ae:	4401      	add	r1, r0
 800d8b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	015a      	lsls	r2, r3, #5
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	4413      	add	r3, r2
 800d8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	69ba      	ldr	r2, [r7, #24]
 800d8c8:	0151      	lsls	r1, r2, #5
 800d8ca:	69fa      	ldr	r2, [r7, #28]
 800d8cc:	440a      	add	r2, r1
 800d8ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8d6:	6113      	str	r3, [r2, #16]
 800d8d8:	e036      	b.n	800d948 <USB_EPStartXfer+0x3dc>
 800d8da:	bf00      	nop
 800d8dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	695a      	ldr	r2, [r3, #20]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	1e5a      	subs	r2, r3, #1
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d902:	691a      	ldr	r2, [r3, #16]
 800d904:	8afb      	ldrh	r3, [r7, #22]
 800d906:	04d9      	lsls	r1, r3, #19
 800d908:	4b39      	ldr	r3, [pc, #228]	; (800d9f0 <USB_EPStartXfer+0x484>)
 800d90a:	400b      	ands	r3, r1
 800d90c:	69b9      	ldr	r1, [r7, #24]
 800d90e:	0148      	lsls	r0, r1, #5
 800d910:	69f9      	ldr	r1, [r7, #28]
 800d912:	4401      	add	r1, r0
 800d914:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d918:	4313      	orrs	r3, r2
 800d91a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	015a      	lsls	r2, r3, #5
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	4413      	add	r3, r2
 800d924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d928:	691a      	ldr	r2, [r3, #16]
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	8af9      	ldrh	r1, [r7, #22]
 800d930:	fb01 f303 	mul.w	r3, r1, r3
 800d934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d938:	69b9      	ldr	r1, [r7, #24]
 800d93a:	0148      	lsls	r0, r1, #5
 800d93c:	69f9      	ldr	r1, [r7, #28]
 800d93e:	4401      	add	r1, r0
 800d940:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d944:	4313      	orrs	r3, r2
 800d946:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d948:	79fb      	ldrb	r3, [r7, #7]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d10d      	bne.n	800d96a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d009      	beq.n	800d96a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	68d9      	ldr	r1, [r3, #12]
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	015a      	lsls	r2, r3, #5
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	4413      	add	r3, r2
 800d962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d966:	460a      	mov	r2, r1
 800d968:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	78db      	ldrb	r3, [r3, #3]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d128      	bne.n	800d9c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d110      	bne.n	800d9a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	015a      	lsls	r2, r3, #5
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	4413      	add	r3, r2
 800d98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	69ba      	ldr	r2, [r7, #24]
 800d992:	0151      	lsls	r1, r2, #5
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	440a      	add	r2, r1
 800d998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d99c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9a0:	6013      	str	r3, [r2, #0]
 800d9a2:	e00f      	b.n	800d9c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	015a      	lsls	r2, r3, #5
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	69ba      	ldr	r2, [r7, #24]
 800d9b4:	0151      	lsls	r1, r2, #5
 800d9b6:	69fa      	ldr	r2, [r7, #28]
 800d9b8:	440a      	add	r2, r1
 800d9ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	015a      	lsls	r2, r3, #5
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	69ba      	ldr	r2, [r7, #24]
 800d9d4:	0151      	lsls	r1, r2, #5
 800d9d6:	69fa      	ldr	r2, [r7, #28]
 800d9d8:	440a      	add	r2, r1
 800d9da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d9e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9e4:	2300      	movs	r3, #0
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3720      	adds	r7, #32
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	1ff80000 	.word	0x1ff80000

0800d9f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b087      	sub	sp, #28
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	4613      	mov	r3, r2
 800da00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	785b      	ldrb	r3, [r3, #1]
 800da10:	2b01      	cmp	r3, #1
 800da12:	f040 80cd 	bne.w	800dbb0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d132      	bne.n	800da84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	015a      	lsls	r2, r3, #5
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	4413      	add	r3, r2
 800da26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	0151      	lsls	r1, r2, #5
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	440a      	add	r2, r1
 800da34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	015a      	lsls	r2, r3, #5
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	4413      	add	r3, r2
 800da4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	0151      	lsls	r1, r2, #5
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	440a      	add	r2, r1
 800da58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	015a      	lsls	r2, r3, #5
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	4413      	add	r3, r2
 800da6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da6e:	691b      	ldr	r3, [r3, #16]
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	0151      	lsls	r1, r2, #5
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	440a      	add	r2, r1
 800da78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da7c:	0cdb      	lsrs	r3, r3, #19
 800da7e:	04db      	lsls	r3, r3, #19
 800da80:	6113      	str	r3, [r2, #16]
 800da82:	e04e      	b.n	800db22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da90:	691b      	ldr	r3, [r3, #16]
 800da92:	693a      	ldr	r2, [r7, #16]
 800da94:	0151      	lsls	r1, r2, #5
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	440a      	add	r2, r1
 800da9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da9e:	0cdb      	lsrs	r3, r3, #19
 800daa0:	04db      	lsls	r3, r3, #19
 800daa2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	015a      	lsls	r2, r3, #5
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	4413      	add	r3, r2
 800daac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	0151      	lsls	r1, r2, #5
 800dab6:	697a      	ldr	r2, [r7, #20]
 800dab8:	440a      	add	r2, r1
 800daba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dabe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dac2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dac6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	695a      	ldr	r2, [r3, #20]
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d903      	bls.n	800dadc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	689a      	ldr	r2, [r3, #8]
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	015a      	lsls	r2, r3, #5
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	4413      	add	r3, r2
 800dae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dae8:	691b      	ldr	r3, [r3, #16]
 800daea:	693a      	ldr	r2, [r7, #16]
 800daec:	0151      	lsls	r1, r2, #5
 800daee:	697a      	ldr	r2, [r7, #20]
 800daf0:	440a      	add	r2, r1
 800daf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800daf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dafa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	015a      	lsls	r2, r3, #5
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	4413      	add	r3, r2
 800db04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db08:	691a      	ldr	r2, [r3, #16]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db12:	6939      	ldr	r1, [r7, #16]
 800db14:	0148      	lsls	r0, r1, #5
 800db16:	6979      	ldr	r1, [r7, #20]
 800db18:	4401      	add	r1, r0
 800db1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800db1e:	4313      	orrs	r3, r2
 800db20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800db22:	79fb      	ldrb	r3, [r7, #7]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d11e      	bne.n	800db66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d009      	beq.n	800db44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	015a      	lsls	r2, r3, #5
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	4413      	add	r3, r2
 800db38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db3c:	461a      	mov	r2, r3
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	015a      	lsls	r2, r3, #5
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	4413      	add	r3, r2
 800db4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	0151      	lsls	r1, r2, #5
 800db56:	697a      	ldr	r2, [r7, #20]
 800db58:	440a      	add	r2, r1
 800db5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db62:	6013      	str	r3, [r2, #0]
 800db64:	e092      	b.n	800dc8c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	015a      	lsls	r2, r3, #5
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	4413      	add	r3, r2
 800db6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	0151      	lsls	r1, r2, #5
 800db78:	697a      	ldr	r2, [r7, #20]
 800db7a:	440a      	add	r2, r1
 800db7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d07e      	beq.n	800dc8c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	f003 030f 	and.w	r3, r3, #15
 800db9e:	2101      	movs	r1, #1
 800dba0:	fa01 f303 	lsl.w	r3, r1, r3
 800dba4:	6979      	ldr	r1, [r7, #20]
 800dba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	634b      	str	r3, [r1, #52]	; 0x34
 800dbae:	e06d      	b.n	800dc8c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	015a      	lsls	r2, r3, #5
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	693a      	ldr	r2, [r7, #16]
 800dbc0:	0151      	lsls	r1, r2, #5
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	440a      	add	r2, r1
 800dbc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbca:	0cdb      	lsrs	r3, r3, #19
 800dbcc:	04db      	lsls	r3, r3, #19
 800dbce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	015a      	lsls	r2, r3, #5
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	0151      	lsls	r1, r2, #5
 800dbe2:	697a      	ldr	r2, [r7, #20]
 800dbe4:	440a      	add	r2, r1
 800dbe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dbee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dbf2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	695b      	ldr	r3, [r3, #20]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d003      	beq.n	800dc04 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	689a      	ldr	r2, [r3, #8]
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	015a      	lsls	r2, r3, #5
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc10:	691b      	ldr	r3, [r3, #16]
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	0151      	lsls	r1, r2, #5
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	440a      	add	r2, r1
 800dc1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc30:	691a      	ldr	r2, [r3, #16]
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc3a:	6939      	ldr	r1, [r7, #16]
 800dc3c:	0148      	lsls	r0, r1, #5
 800dc3e:	6979      	ldr	r1, [r7, #20]
 800dc40:	4401      	add	r1, r0
 800dc42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc46:	4313      	orrs	r3, r2
 800dc48:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d10d      	bne.n	800dc6c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d009      	beq.n	800dc6c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	68d9      	ldr	r1, [r3, #12]
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	015a      	lsls	r2, r3, #5
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	4413      	add	r3, r2
 800dc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc68:	460a      	mov	r2, r1
 800dc6a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	015a      	lsls	r2, r3, #5
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	4413      	add	r3, r2
 800dc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	693a      	ldr	r2, [r7, #16]
 800dc7c:	0151      	lsls	r1, r2, #5
 800dc7e:	697a      	ldr	r2, [r7, #20]
 800dc80:	440a      	add	r2, r1
 800dc82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	371c      	adds	r7, #28
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b089      	sub	sp, #36	; 0x24
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	60f8      	str	r0, [r7, #12]
 800dca2:	60b9      	str	r1, [r7, #8]
 800dca4:	4611      	mov	r1, r2
 800dca6:	461a      	mov	r2, r3
 800dca8:	460b      	mov	r3, r1
 800dcaa:	71fb      	strb	r3, [r7, #7]
 800dcac:	4613      	mov	r3, r2
 800dcae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800dcb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d11a      	bne.n	800dcf6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dcc0:	88bb      	ldrh	r3, [r7, #4]
 800dcc2:	3303      	adds	r3, #3
 800dcc4:	089b      	lsrs	r3, r3, #2
 800dcc6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	61bb      	str	r3, [r7, #24]
 800dccc:	e00f      	b.n	800dcee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dcce:	79fb      	ldrb	r3, [r7, #7]
 800dcd0:	031a      	lsls	r2, r3, #12
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcda:	461a      	mov	r2, r3
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	3304      	adds	r3, #4
 800dce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dce8:	69bb      	ldr	r3, [r7, #24]
 800dcea:	3301      	adds	r3, #1
 800dcec:	61bb      	str	r3, [r7, #24]
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d3eb      	bcc.n	800dcce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3724      	adds	r7, #36	; 0x24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b089      	sub	sp, #36	; 0x24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dd1a:	88fb      	ldrh	r3, [r7, #6]
 800dd1c:	3303      	adds	r3, #3
 800dd1e:	089b      	lsrs	r3, r3, #2
 800dd20:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dd22:	2300      	movs	r3, #0
 800dd24:	61bb      	str	r3, [r7, #24]
 800dd26:	e00b      	b.n	800dd40 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	601a      	str	r2, [r3, #0]
    pDest++;
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	3304      	adds	r3, #4
 800dd38:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	61bb      	str	r3, [r7, #24]
 800dd40:	69ba      	ldr	r2, [r7, #24]
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d3ef      	bcc.n	800dd28 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800dd48:	69fb      	ldr	r3, [r7, #28]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3724      	adds	r7, #36	; 0x24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b085      	sub	sp, #20
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	785b      	ldrb	r3, [r3, #1]
 800dd6e:	2b01      	cmp	r3, #1
 800dd70:	d12c      	bne.n	800ddcc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	015a      	lsls	r2, r3, #5
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	4413      	add	r3, r2
 800dd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	db12      	blt.n	800ddaa <USB_EPSetStall+0x54>
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d00f      	beq.n	800ddaa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	015a      	lsls	r2, r3, #5
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	4413      	add	r3, r2
 800dd92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	0151      	lsls	r1, r2, #5
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	440a      	add	r2, r1
 800dda0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dda4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dda8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	015a      	lsls	r2, r3, #5
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	0151      	lsls	r1, r2, #5
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	440a      	add	r2, r1
 800ddc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	e02b      	b.n	800de24 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	015a      	lsls	r2, r3, #5
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	db12      	blt.n	800de04 <USB_EPSetStall+0xae>
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00f      	beq.n	800de04 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	0151      	lsls	r1, r2, #5
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	440a      	add	r2, r1
 800ddfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800de02:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	015a      	lsls	r2, r3, #5
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	4413      	add	r3, r2
 800de0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68ba      	ldr	r2, [r7, #8]
 800de14:	0151      	lsls	r1, r2, #5
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	440a      	add	r2, r1
 800de1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800de22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de32:	b480      	push	{r7}
 800de34:	b085      	sub	sp, #20
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
 800de3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d128      	bne.n	800dea0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	4413      	add	r3, r2
 800de56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	0151      	lsls	r1, r2, #5
 800de60:	68fa      	ldr	r2, [r7, #12]
 800de62:	440a      	add	r2, r1
 800de64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800de6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	78db      	ldrb	r3, [r3, #3]
 800de72:	2b03      	cmp	r3, #3
 800de74:	d003      	beq.n	800de7e <USB_EPClearStall+0x4c>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	78db      	ldrb	r3, [r3, #3]
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d138      	bne.n	800def0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	015a      	lsls	r2, r3, #5
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	4413      	add	r3, r2
 800de86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68ba      	ldr	r2, [r7, #8]
 800de8e:	0151      	lsls	r1, r2, #5
 800de90:	68fa      	ldr	r2, [r7, #12]
 800de92:	440a      	add	r2, r1
 800de94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de9c:	6013      	str	r3, [r2, #0]
 800de9e:	e027      	b.n	800def0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	015a      	lsls	r2, r3, #5
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	4413      	add	r3, r2
 800dea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	0151      	lsls	r1, r2, #5
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	440a      	add	r2, r1
 800deb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800debe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	78db      	ldrb	r3, [r3, #3]
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d003      	beq.n	800ded0 <USB_EPClearStall+0x9e>
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	78db      	ldrb	r3, [r3, #3]
 800decc:	2b02      	cmp	r3, #2
 800dece:	d10f      	bne.n	800def0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	015a      	lsls	r2, r3, #5
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	4413      	add	r3, r2
 800ded8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	0151      	lsls	r1, r2, #5
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	440a      	add	r2, r1
 800dee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800deee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3714      	adds	r7, #20
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr

0800defe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800defe:	b480      	push	{r7}
 800df00:	b085      	sub	sp, #20
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	460b      	mov	r3, r1
 800df08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800df20:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	78fb      	ldrb	r3, [r7, #3]
 800df2c:	011b      	lsls	r3, r3, #4
 800df2e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800df32:	68f9      	ldr	r1, [r7, #12]
 800df34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df38:	4313      	orrs	r3, r2
 800df3a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3714      	adds	r7, #20
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr

0800df4a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b084      	sub	sp, #16
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df64:	f023 0302 	bic.w	r3, r3, #2
 800df68:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800df6a:	2003      	movs	r0, #3
 800df6c:	f7f8 f96a 	bl	8006244 <HAL_Delay>

  return HAL_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b084      	sub	sp, #16
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df94:	f043 0302 	orr.w	r3, r3, #2
 800df98:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800df9a:	2003      	movs	r0, #3
 800df9c:	f7f8 f952 	bl	8006244 <HAL_Delay>

  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dfaa:	b480      	push	{r7}
 800dfac:	b085      	sub	sp, #20
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	68fa      	ldr	r2, [r7, #12]
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3714      	adds	r7, #20
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfe2:	699b      	ldr	r3, [r3, #24]
 800dfe4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfec:	69db      	ldr	r3, [r3, #28]
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	4013      	ands	r3, r2
 800dff2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	0c1b      	lsrs	r3, r3, #16
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e016:	699b      	ldr	r3, [r3, #24]
 800e018:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e020:	69db      	ldr	r3, [r3, #28]
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	4013      	ands	r3, r2
 800e026:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	b29b      	uxth	r3, r3
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3714      	adds	r7, #20
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e038:	b480      	push	{r7}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	460b      	mov	r3, r1
 800e042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e048:	78fb      	ldrb	r3, [r7, #3]
 800e04a:	015a      	lsls	r2, r3, #5
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	4413      	add	r3, r2
 800e050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e05e:	695b      	ldr	r3, [r3, #20]
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	4013      	ands	r3, r2
 800e064:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e066:	68bb      	ldr	r3, [r7, #8]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e074:	b480      	push	{r7}
 800e076:	b087      	sub	sp, #28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	460b      	mov	r3, r1
 800e07e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e098:	78fb      	ldrb	r3, [r7, #3]
 800e09a:	f003 030f 	and.w	r3, r3, #15
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	fa22 f303 	lsr.w	r3, r2, r3
 800e0a4:	01db      	lsls	r3, r3, #7
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e0ae:	78fb      	ldrb	r3, [r7, #3]
 800e0b0:	015a      	lsls	r2, r3, #5
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	4013      	ands	r3, r2
 800e0c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e0c2:	68bb      	ldr	r3, [r7, #8]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	371c      	adds	r7, #28
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	695b      	ldr	r3, [r3, #20]
 800e0dc:	f003 0301 	and.w	r3, r3, #1
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e106:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e10a:	f023 0307 	bic.w	r3, r3, #7
 800e10e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e11e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e122:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
	...

0800e134 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e134:	b480      	push	{r7}
 800e136:	b087      	sub	sp, #28
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	460b      	mov	r3, r1
 800e13e:	607a      	str	r2, [r7, #4]
 800e140:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	333c      	adds	r3, #60	; 0x3c
 800e14a:	3304      	adds	r3, #4
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	4a26      	ldr	r2, [pc, #152]	; (800e1ec <USB_EP0_OutStart+0xb8>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d90a      	bls.n	800e16e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e168:	d101      	bne.n	800e16e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	e037      	b.n	800e1de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e174:	461a      	mov	r2, r3
 800e176:	2300      	movs	r3, #0
 800e178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e180:	691b      	ldr	r3, [r3, #16]
 800e182:	697a      	ldr	r2, [r7, #20]
 800e184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e18c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e194:	691b      	ldr	r3, [r3, #16]
 800e196:	697a      	ldr	r2, [r7, #20]
 800e198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e19c:	f043 0318 	orr.w	r3, r3, #24
 800e1a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	697a      	ldr	r2, [r7, #20]
 800e1ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e1b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e1b6:	7afb      	ldrb	r3, [r7, #11]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d10f      	bne.n	800e1dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	697a      	ldr	r2, [r7, #20]
 800e1d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e1da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	371c      	adds	r7, #28
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop
 800e1ec:	4f54300a 	.word	0x4f54300a

0800e1f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	3301      	adds	r3, #1
 800e200:	60fb      	str	r3, [r7, #12]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	4a13      	ldr	r2, [pc, #76]	; (800e254 <USB_CoreReset+0x64>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d901      	bls.n	800e20e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e01b      	b.n	800e246 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	daf2      	bge.n	800e1fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e216:	2300      	movs	r3, #0
 800e218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	f043 0201 	orr.w	r2, r3, #1
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3301      	adds	r3, #1
 800e22a:	60fb      	str	r3, [r7, #12]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	4a09      	ldr	r2, [pc, #36]	; (800e254 <USB_CoreReset+0x64>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d901      	bls.n	800e238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e234:	2303      	movs	r3, #3
 800e236:	e006      	b.n	800e246 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	691b      	ldr	r3, [r3, #16]
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	2b01      	cmp	r3, #1
 800e242:	d0f0      	beq.n	800e226 <USB_CoreReset+0x36>

  return HAL_OK;
 800e244:	2300      	movs	r3, #0
}
 800e246:	4618      	mov	r0, r3
 800e248:	3714      	adds	r7, #20
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	00030d40 	.word	0x00030d40

0800e258 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e264:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e268:	f002 f8d6 	bl	8010418 <malloc>
 800e26c:	4603      	mov	r3, r0
 800e26e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d105      	bne.n	800e282 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e27e:	2302      	movs	r3, #2
 800e280:	e066      	b.n	800e350 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	68fa      	ldr	r2, [r7, #12]
 800e286:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7c1b      	ldrb	r3, [r3, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d119      	bne.n	800e2c6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e292:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e296:	2202      	movs	r2, #2
 800e298:	2181      	movs	r1, #129	; 0x81
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f001 ff43 	bl	8010126 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f001 ff39 	bl	8010126 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2210      	movs	r2, #16
 800e2c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e2c4:	e016      	b.n	800e2f4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e2c6:	2340      	movs	r3, #64	; 0x40
 800e2c8:	2202      	movs	r2, #2
 800e2ca:	2181      	movs	r1, #129	; 0x81
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 ff2a 	bl	8010126 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e2d8:	2340      	movs	r3, #64	; 0x40
 800e2da:	2202      	movs	r2, #2
 800e2dc:	2101      	movs	r1, #1
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f001 ff21 	bl	8010126 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2210      	movs	r2, #16
 800e2f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e2f4:	2308      	movs	r3, #8
 800e2f6:	2203      	movs	r2, #3
 800e2f8:	2182      	movs	r1, #130	; 0x82
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f001 ff13 	bl	8010126 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	7c1b      	ldrb	r3, [r3, #16]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d109      	bne.n	800e33e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e330:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e334:	2101      	movs	r1, #1
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f001 ffe4 	bl	8010304 <USBD_LL_PrepareReceive>
 800e33c:	e007      	b.n	800e34e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e344:	2340      	movs	r3, #64	; 0x40
 800e346:	2101      	movs	r1, #1
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 ffdb 	bl	8010304 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	460b      	mov	r3, r1
 800e362:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e368:	2181      	movs	r1, #129	; 0x81
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f001 ff01 	bl	8010172 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e376:	2101      	movs	r1, #1
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f001 fefa 	bl	8010172 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e386:	2182      	movs	r1, #130	; 0x82
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f001 fef2 	bl	8010172 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00e      	beq.n	800e3c6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f002 f835 	bl	8010428 <free>
    pdev->pClassData = NULL;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3e0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d03a      	beq.n	800e470 <USBD_CDC_Setup+0xa0>
 800e3fa:	2b20      	cmp	r3, #32
 800e3fc:	f040 8097 	bne.w	800e52e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	88db      	ldrh	r3, [r3, #6]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d029      	beq.n	800e45c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	b25b      	sxtb	r3, r3
 800e40e:	2b00      	cmp	r3, #0
 800e410:	da11      	bge.n	800e436 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e41e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	88d2      	ldrh	r2, [r2, #6]
 800e424:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e426:	6939      	ldr	r1, [r7, #16]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	88db      	ldrh	r3, [r3, #6]
 800e42c:	461a      	mov	r2, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f001 fa6d 	bl	800f90e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e434:	e082      	b.n	800e53c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	785a      	ldrb	r2, [r3, #1]
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	88db      	ldrh	r3, [r3, #6]
 800e444:	b2da      	uxtb	r2, r3
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e44c:	6939      	ldr	r1, [r7, #16]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	88db      	ldrh	r3, [r3, #6]
 800e452:	461a      	mov	r2, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f001 fa86 	bl	800f966 <USBD_CtlPrepareRx>
    break;
 800e45a:	e06f      	b.n	800e53c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	7850      	ldrb	r0, [r2, #1]
 800e468:	2200      	movs	r2, #0
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	4798      	blx	r3
    break;
 800e46e:	e065      	b.n	800e53c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	785b      	ldrb	r3, [r3, #1]
 800e474:	2b0b      	cmp	r3, #11
 800e476:	d84f      	bhi.n	800e518 <USBD_CDC_Setup+0x148>
 800e478:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <USBD_CDC_Setup+0xb0>)
 800e47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47e:	bf00      	nop
 800e480:	0800e4b1 	.word	0x0800e4b1
 800e484:	0800e527 	.word	0x0800e527
 800e488:	0800e519 	.word	0x0800e519
 800e48c:	0800e519 	.word	0x0800e519
 800e490:	0800e519 	.word	0x0800e519
 800e494:	0800e519 	.word	0x0800e519
 800e498:	0800e519 	.word	0x0800e519
 800e49c:	0800e519 	.word	0x0800e519
 800e4a0:	0800e519 	.word	0x0800e519
 800e4a4:	0800e519 	.word	0x0800e519
 800e4a8:	0800e4d9 	.word	0x0800e4d9
 800e4ac:	0800e501 	.word	0x0800e501
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d107      	bne.n	800e4ca <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e4ba:	f107 030c 	add.w	r3, r7, #12
 800e4be:	2202      	movs	r2, #2
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 fa23 	bl	800f90e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e4c8:	e030      	b.n	800e52c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f001 f9ad 	bl	800f82c <USBD_CtlError>
        ret = USBD_FAIL;
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800e4d6:	e029      	b.n	800e52c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4de:	2b03      	cmp	r3, #3
 800e4e0:	d107      	bne.n	800e4f2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e4e2:	f107 030f 	add.w	r3, r7, #15
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f001 fa0f 	bl	800f90e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e4f0:	e01c      	b.n	800e52c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e4f2:	6839      	ldr	r1, [r7, #0]
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f001 f999 	bl	800f82c <USBD_CtlError>
        ret = USBD_FAIL;
 800e4fa:	2303      	movs	r3, #3
 800e4fc:	75fb      	strb	r3, [r7, #23]
      break;
 800e4fe:	e015      	b.n	800e52c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e506:	2b03      	cmp	r3, #3
 800e508:	d00f      	beq.n	800e52a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f001 f98d 	bl	800f82c <USBD_CtlError>
        ret = USBD_FAIL;
 800e512:	2303      	movs	r3, #3
 800e514:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e516:	e008      	b.n	800e52a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f001 f986 	bl	800f82c <USBD_CtlError>
      ret = USBD_FAIL;
 800e520:	2303      	movs	r3, #3
 800e522:	75fb      	strb	r3, [r7, #23]
      break;
 800e524:	e002      	b.n	800e52c <USBD_CDC_Setup+0x15c>
      break;
 800e526:	bf00      	nop
 800e528:	e008      	b.n	800e53c <USBD_CDC_Setup+0x16c>
      break;
 800e52a:	bf00      	nop
    }
    break;
 800e52c:	e006      	b.n	800e53c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e52e:	6839      	ldr	r1, [r7, #0]
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f001 f97b 	bl	800f82c <USBD_CtlError>
    ret = USBD_FAIL;
 800e536:	2303      	movs	r3, #3
 800e538:	75fb      	strb	r3, [r7, #23]
    break;
 800e53a:	bf00      	nop
  }

  return (uint8_t)ret;
 800e53c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop

0800e548 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	460b      	mov	r3, r1
 800e552:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e55a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e566:	2303      	movs	r3, #3
 800e568:	e049      	b.n	800e5fe <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e570:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e572:	78fa      	ldrb	r2, [r7, #3]
 800e574:	6879      	ldr	r1, [r7, #4]
 800e576:	4613      	mov	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	4413      	add	r3, r2
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	440b      	add	r3, r1
 800e580:	3318      	adds	r3, #24
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d029      	beq.n	800e5dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e588:	78fa      	ldrb	r2, [r7, #3]
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	4613      	mov	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	440b      	add	r3, r1
 800e596:	3318      	adds	r3, #24
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	78f9      	ldrb	r1, [r7, #3]
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	460b      	mov	r3, r1
 800e5a0:	00db      	lsls	r3, r3, #3
 800e5a2:	1a5b      	subs	r3, r3, r1
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4403      	add	r3, r0
 800e5a8:	3344      	adds	r3, #68	; 0x44
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800e5b0:	fb03 f301 	mul.w	r3, r3, r1
 800e5b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d110      	bne.n	800e5dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e5ba:	78fa      	ldrb	r2, [r7, #3]
 800e5bc:	6879      	ldr	r1, [r7, #4]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	440b      	add	r3, r1
 800e5c8:	3318      	adds	r3, #24
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e5ce:	78f9      	ldrb	r1, [r7, #3]
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f001 fe74 	bl	80102c2 <USBD_LL_Transmit>
 800e5da:	e00f      	b.n	800e5fc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e5f8:	78fa      	ldrb	r2, [r7, #3]
 800e5fa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e5fc:	2300      	movs	r3, #0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e606:	b580      	push	{r7, lr}
 800e608:	b084      	sub	sp, #16
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
 800e60e:	460b      	mov	r3, r1
 800e610:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e618:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e624:	2303      	movs	r3, #3
 800e626:	e015      	b.n	800e654 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e628:	78fb      	ldrb	r3, [r7, #3]
 800e62a:	4619      	mov	r1, r3
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f001 fe8a 	bl	8010346 <USBD_LL_GetRxDataSize>
 800e632:	4602      	mov	r2, r0
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e64e:	4611      	mov	r1, r2
 800e650:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e66a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d015      	beq.n	800e6a2 <USBD_CDC_EP0_RxReady+0x46>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e67c:	2bff      	cmp	r3, #255	; 0xff
 800e67e:	d010      	beq.n	800e6a2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	68fa      	ldr	r2, [r7, #12]
 800e68a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e68e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e690:	68fa      	ldr	r2, [r7, #12]
 800e692:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e696:	b292      	uxth	r2, r2
 800e698:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	22ff      	movs	r2, #255	; 0xff
 800e69e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3710      	adds	r7, #16
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2243      	movs	r2, #67	; 0x43
 800e6b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e6ba:	4b03      	ldr	r3, [pc, #12]	; (800e6c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr
 800e6c8:	200000e0 	.word	0x200000e0

0800e6cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2243      	movs	r2, #67	; 0x43
 800e6d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e6da:	4b03      	ldr	r3, [pc, #12]	; (800e6e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	2000009c 	.word	0x2000009c

0800e6ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2243      	movs	r2, #67	; 0x43
 800e6f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e6fa:	4b03      	ldr	r3, [pc, #12]	; (800e708 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr
 800e708:	20000124 	.word	0x20000124

0800e70c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	220a      	movs	r2, #10
 800e718:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e71a:	4b03      	ldr	r3, [pc, #12]	; (800e728 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr
 800e728:	20000058 	.word	0x20000058

0800e72c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d101      	bne.n	800e740 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e73c:	2303      	movs	r3, #3
 800e73e:	e004      	b.n	800e74a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	370c      	adds	r7, #12
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr

0800e756 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e756:	b480      	push	{r7}
 800e758:	b087      	sub	sp, #28
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	60f8      	str	r0, [r7, #12]
 800e75e:	60b9      	str	r1, [r7, #8]
 800e760:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e768:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	68ba      	ldr	r2, [r7, #8]
 800e76e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	371c      	adds	r7, #28
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e788:	b480      	push	{r7}
 800e78a:	b085      	sub	sp, #20
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e798:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	683a      	ldr	r2, [r7, #0]
 800e79e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3714      	adds	r7, #20
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	e016      	b.n	800e7fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	7c1b      	ldrb	r3, [r3, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d109      	bne.n	800e7ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f001 fd8e 	bl	8010304 <USBD_LL_PrepareReceive>
 800e7e8:	e007      	b.n	800e7fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7f0:	2340      	movs	r3, #64	; 0x40
 800e7f2:	2101      	movs	r1, #1
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f001 fd85 	bl	8010304 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7fa:	2300      	movs	r3, #0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3710      	adds	r7, #16
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b086      	sub	sp, #24
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	4613      	mov	r3, r2
 800e810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d101      	bne.n	800e81c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e818:	2303      	movs	r3, #3
 800e81a:	e025      	b.n	800e868 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e822:	2b00      	cmp	r3, #0
 800e824:	d003      	beq.n	800e82e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e834:	2b00      	cmp	r3, #0
 800e836:	d003      	beq.n	800e840 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d003      	beq.n	800e84e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	79fa      	ldrb	r2, [r7, #7]
 800e85a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e85c:	68f8      	ldr	r0, [r7, #12]
 800e85e:	f001 fbfb 	bl	8010058 <USBD_LL_Init>
 800e862:	4603      	mov	r3, r0
 800e864:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e866:	7dfb      	ldrb	r3, [r7, #23]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e87a:	2300      	movs	r3, #0
 800e87c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d101      	bne.n	800e888 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e884:	2303      	movs	r3, #3
 800e886:	e010      	b.n	800e8aa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e898:	f107 020e 	add.w	r2, r7, #14
 800e89c:	4610      	mov	r0, r2
 800e89e:	4798      	blx	r3
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f001 fc18 	bl	80100f0 <USBD_LL_Start>
 800e8c0:	4603      	mov	r3, r0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3708      	adds	r7, #8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e8ec:	2303      	movs	r3, #3
 800e8ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d009      	beq.n	800e90e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	78fa      	ldrb	r2, [r7, #3]
 800e904:	4611      	mov	r1, r2
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	4798      	blx	r3
 800e90a:	4603      	mov	r3, r0
 800e90c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	460b      	mov	r3, r1
 800e922:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d007      	beq.n	800e93e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e934:	685b      	ldr	r3, [r3, #4]
 800e936:	78fa      	ldrb	r2, [r7, #3]
 800e938:	4611      	mov	r1, r2
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	4798      	blx	r3
  }

  return USBD_OK;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e958:	6839      	ldr	r1, [r7, #0]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 ff2c 	bl	800f7b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e96e:	461a      	mov	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e97c:	f003 031f 	and.w	r3, r3, #31
 800e980:	2b01      	cmp	r3, #1
 800e982:	d00e      	beq.n	800e9a2 <USBD_LL_SetupStage+0x5a>
 800e984:	2b01      	cmp	r3, #1
 800e986:	d302      	bcc.n	800e98e <USBD_LL_SetupStage+0x46>
 800e988:	2b02      	cmp	r3, #2
 800e98a:	d014      	beq.n	800e9b6 <USBD_LL_SetupStage+0x6e>
 800e98c:	e01d      	b.n	800e9ca <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 fa18 	bl	800edcc <USBD_StdDevReq>
 800e99c:	4603      	mov	r3, r0
 800e99e:	73fb      	strb	r3, [r7, #15]
      break;
 800e9a0:	e020      	b.n	800e9e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 fa7c 	bl	800eea8 <USBD_StdItfReq>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9b4:	e016      	b.n	800e9e4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fab8 	bl	800ef34 <USBD_StdEPReq>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c8:	e00c      	b.n	800e9e4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e9d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f001 fbe9 	bl	80101b0 <USBD_LL_StallEP>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e9e2:	bf00      	nop
  }

  return ret;
 800e9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b086      	sub	sp, #24
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	60f8      	str	r0, [r7, #12]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	607a      	str	r2, [r7, #4]
 800e9fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e9fc:	7afb      	ldrb	r3, [r7, #11]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d137      	bne.n	800ea72 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ea08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d14a      	bne.n	800eaaa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	689a      	ldr	r2, [r3, #8]
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d913      	bls.n	800ea48 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	689a      	ldr	r2, [r3, #8]
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	1ad2      	subs	r2, r2, r3
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	68da      	ldr	r2, [r3, #12]
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	4293      	cmp	r3, r2
 800ea38:	bf28      	it	cs
 800ea3a:	4613      	movcs	r3, r2
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	6879      	ldr	r1, [r7, #4]
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f000 ffad 	bl	800f9a0 <USBD_CtlContinueRx>
 800ea46:	e030      	b.n	800eaaa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea4e:	691b      	ldr	r3, [r3, #16]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00a      	beq.n	800ea6a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ea5a:	2b03      	cmp	r3, #3
 800ea5c:	d105      	bne.n	800ea6a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea64:	691b      	ldr	r3, [r3, #16]
 800ea66:	68f8      	ldr	r0, [r7, #12]
 800ea68:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f000 ffa9 	bl	800f9c2 <USBD_CtlSendStatus>
 800ea70:	e01b      	b.n	800eaaa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea78:	699b      	ldr	r3, [r3, #24]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d013      	beq.n	800eaa6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ea84:	2b03      	cmp	r3, #3
 800ea86:	d10e      	bne.n	800eaa6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	7afa      	ldrb	r2, [r7, #11]
 800ea92:	4611      	mov	r1, r2
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	4798      	blx	r3
 800ea98:	4603      	mov	r3, r0
 800ea9a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ea9c:	7dfb      	ldrb	r3, [r7, #23]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d003      	beq.n	800eaaa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	e002      	b.n	800eaac <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eaa6:	2303      	movs	r3, #3
 800eaa8:	e000      	b.n	800eaac <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b086      	sub	sp, #24
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	460b      	mov	r3, r1
 800eabe:	607a      	str	r2, [r7, #4]
 800eac0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eac2:	7afb      	ldrb	r3, [r7, #11]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d16a      	bne.n	800eb9e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3314      	adds	r3, #20
 800eacc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d155      	bne.n	800eb84 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	689a      	ldr	r2, [r3, #8]
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	68db      	ldr	r3, [r3, #12]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d914      	bls.n	800eb0e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	689a      	ldr	r2, [r3, #8]
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	1ad2      	subs	r2, r2, r3
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	6879      	ldr	r1, [r7, #4]
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f000 ff22 	bl	800f944 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb00:	2300      	movs	r3, #0
 800eb02:	2200      	movs	r2, #0
 800eb04:	2100      	movs	r1, #0
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f001 fbfc 	bl	8010304 <USBD_LL_PrepareReceive>
 800eb0c:	e03a      	b.n	800eb84 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	68da      	ldr	r2, [r3, #12]
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d11c      	bne.n	800eb54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	685a      	ldr	r2, [r3, #4]
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d316      	bcc.n	800eb54 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d20f      	bcs.n	800eb54 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb34:	2200      	movs	r2, #0
 800eb36:	2100      	movs	r1, #0
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f000 ff03 	bl	800f944 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb46:	2300      	movs	r3, #0
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f001 fbd9 	bl	8010304 <USBD_LL_PrepareReceive>
 800eb52:	e017      	b.n	800eb84 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00a      	beq.n	800eb76 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800eb66:	2b03      	cmp	r3, #3
 800eb68:	d105      	bne.n	800eb76 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	68f8      	ldr	r0, [r7, #12]
 800eb74:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb76:	2180      	movs	r1, #128	; 0x80
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f001 fb19 	bl	80101b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f000 ff32 	bl	800f9e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d123      	bne.n	800ebd6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	f7ff fe9b 	bl	800e8ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eb9c:	e01b      	b.n	800ebd6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d013      	beq.n	800ebd2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ebb0:	2b03      	cmp	r3, #3
 800ebb2:	d10e      	bne.n	800ebd2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebba:	695b      	ldr	r3, [r3, #20]
 800ebbc:	7afa      	ldrb	r2, [r7, #11]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	4798      	blx	r3
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ebc8:	7dfb      	ldrb	r3, [r7, #23]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d003      	beq.n	800ebd6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ebce:	7dfb      	ldrb	r3, [r7, #23]
 800ebd0:	e002      	b.n	800ebd8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ebd2:	2303      	movs	r3, #3
 800ebd4:	e000      	b.n	800ebd8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d009      	beq.n	800ec24 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	6852      	ldr	r2, [r2, #4]
 800ec1c:	b2d2      	uxtb	r2, r2
 800ec1e:	4611      	mov	r1, r2
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec24:	2340      	movs	r3, #64	; 0x40
 800ec26:	2200      	movs	r2, #0
 800ec28:	2100      	movs	r1, #0
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f001 fa7b 	bl	8010126 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2240      	movs	r2, #64	; 0x40
 800ec3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec40:	2340      	movs	r3, #64	; 0x40
 800ec42:	2200      	movs	r2, #0
 800ec44:	2180      	movs	r1, #128	; 0x80
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f001 fa6d 	bl	8010126 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2240      	movs	r2, #64	; 0x40
 800ec56:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ec62:	b480      	push	{r7}
 800ec64:	b083      	sub	sp, #12
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	78fa      	ldrb	r2, [r7, #3]
 800ec72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	370c      	adds	r7, #12
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr

0800ec82 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ec82:	b480      	push	{r7}
 800ec84:	b083      	sub	sp, #12
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2204      	movs	r2, #4
 800ec9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecba:	2b04      	cmp	r3, #4
 800ecbc:	d105      	bne.n	800ecca <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ecca:	2300      	movs	r3, #0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ece6:	2b03      	cmp	r3, #3
 800ece8:	d10b      	bne.n	800ed02 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecf0:	69db      	ldr	r3, [r3, #28]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d005      	beq.n	800ed02 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecfc:	69db      	ldr	r3, [r3, #28]
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	370c      	adds	r7, #12
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ed26:	b480      	push	{r7}
 800ed28:	b083      	sub	sp, #12
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
 800ed2e:	460b      	mov	r3, r1
 800ed30:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ed32:	2300      	movs	r3, #0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ed48:	2300      	movs	r3, #0
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2201      	movs	r2, #1
 800ed62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d009      	beq.n	800ed84 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	6852      	ldr	r2, [r2, #4]
 800ed7c:	b2d2      	uxtb	r2, r2
 800ed7e:	4611      	mov	r1, r2
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	4798      	blx	r3
  }

  return USBD_OK;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}

0800ed8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ed8e:	b480      	push	{r7}
 800ed90:	b087      	sub	sp, #28
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	3301      	adds	r3, #1
 800eda4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800edac:	8a3b      	ldrh	r3, [r7, #16]
 800edae:	021b      	lsls	r3, r3, #8
 800edb0:	b21a      	sxth	r2, r3
 800edb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	b21b      	sxth	r3, r3
 800edba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800edbc:	89fb      	ldrh	r3, [r7, #14]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	371c      	adds	r7, #28
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
	...

0800edcc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	781b      	ldrb	r3, [r3, #0]
 800edde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ede2:	2b20      	cmp	r3, #32
 800ede4:	d004      	beq.n	800edf0 <USBD_StdDevReq+0x24>
 800ede6:	2b40      	cmp	r3, #64	; 0x40
 800ede8:	d002      	beq.n	800edf0 <USBD_StdDevReq+0x24>
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00a      	beq.n	800ee04 <USBD_StdDevReq+0x38>
 800edee:	e050      	b.n	800ee92 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	6839      	ldr	r1, [r7, #0]
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	4798      	blx	r3
 800edfe:	4603      	mov	r3, r0
 800ee00:	73fb      	strb	r3, [r7, #15]
    break;
 800ee02:	e04b      	b.n	800ee9c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	785b      	ldrb	r3, [r3, #1]
 800ee08:	2b09      	cmp	r3, #9
 800ee0a:	d83c      	bhi.n	800ee86 <USBD_StdDevReq+0xba>
 800ee0c:	a201      	add	r2, pc, #4	; (adr r2, 800ee14 <USBD_StdDevReq+0x48>)
 800ee0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee12:	bf00      	nop
 800ee14:	0800ee69 	.word	0x0800ee69
 800ee18:	0800ee7d 	.word	0x0800ee7d
 800ee1c:	0800ee87 	.word	0x0800ee87
 800ee20:	0800ee73 	.word	0x0800ee73
 800ee24:	0800ee87 	.word	0x0800ee87
 800ee28:	0800ee47 	.word	0x0800ee47
 800ee2c:	0800ee3d 	.word	0x0800ee3d
 800ee30:	0800ee87 	.word	0x0800ee87
 800ee34:	0800ee5f 	.word	0x0800ee5f
 800ee38:	0800ee51 	.word	0x0800ee51
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 f9ce 	bl	800f1e0 <USBD_GetDescriptor>
      break;
 800ee44:	e024      	b.n	800ee90 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fb33 	bl	800f4b4 <USBD_SetAddress>
      break;
 800ee4e:	e01f      	b.n	800ee90 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ee50:	6839      	ldr	r1, [r7, #0]
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fb70 	bl	800f538 <USBD_SetConfig>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee5c:	e018      	b.n	800ee90 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f000 fc0d 	bl	800f680 <USBD_GetConfig>
      break;
 800ee66:	e013      	b.n	800ee90 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ee68:	6839      	ldr	r1, [r7, #0]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fc3c 	bl	800f6e8 <USBD_GetStatus>
      break;
 800ee70:	e00e      	b.n	800ee90 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ee72:	6839      	ldr	r1, [r7, #0]
 800ee74:	6878      	ldr	r0, [r7, #4]
 800ee76:	f000 fc6a 	bl	800f74e <USBD_SetFeature>
      break;
 800ee7a:	e009      	b.n	800ee90 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ee7c:	6839      	ldr	r1, [r7, #0]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f000 fc79 	bl	800f776 <USBD_ClrFeature>
      break;
 800ee84:	e004      	b.n	800ee90 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ee86:	6839      	ldr	r1, [r7, #0]
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fccf 	bl	800f82c <USBD_CtlError>
      break;
 800ee8e:	bf00      	nop
    }
    break;
 800ee90:	e004      	b.n	800ee9c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ee92:	6839      	ldr	r1, [r7, #0]
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 fcc9 	bl	800f82c <USBD_CtlError>
    break;
 800ee9a:	bf00      	nop
  }

  return ret;
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop

0800eea8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eebe:	2b20      	cmp	r3, #32
 800eec0:	d003      	beq.n	800eeca <USBD_StdItfReq+0x22>
 800eec2:	2b40      	cmp	r3, #64	; 0x40
 800eec4:	d001      	beq.n	800eeca <USBD_StdItfReq+0x22>
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d12a      	bne.n	800ef20 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eed0:	3b01      	subs	r3, #1
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	d81d      	bhi.n	800ef12 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	889b      	ldrh	r3, [r3, #4]
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d813      	bhi.n	800ef08 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee6:	689b      	ldr	r3, [r3, #8]
 800eee8:	6839      	ldr	r1, [r7, #0]
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	4798      	blx	r3
 800eeee:	4603      	mov	r3, r0
 800eef0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	88db      	ldrh	r3, [r3, #6]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d110      	bne.n	800ef1c <USBD_StdItfReq+0x74>
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d10d      	bne.n	800ef1c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 fd5e 	bl	800f9c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ef06:	e009      	b.n	800ef1c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ef08:	6839      	ldr	r1, [r7, #0]
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 fc8e 	bl	800f82c <USBD_CtlError>
      break;
 800ef10:	e004      	b.n	800ef1c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ef12:	6839      	ldr	r1, [r7, #0]
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f000 fc89 	bl	800f82c <USBD_CtlError>
      break;
 800ef1a:	e000      	b.n	800ef1e <USBD_StdItfReq+0x76>
      break;
 800ef1c:	bf00      	nop
    }
    break;
 800ef1e:	e004      	b.n	800ef2a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ef20:	6839      	ldr	r1, [r7, #0]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 fc82 	bl	800f82c <USBD_CtlError>
    break;
 800ef28:	bf00      	nop
  }

  return ret;
 800ef2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	889b      	ldrh	r3, [r3, #4]
 800ef46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef50:	2b20      	cmp	r3, #32
 800ef52:	d004      	beq.n	800ef5e <USBD_StdEPReq+0x2a>
 800ef54:	2b40      	cmp	r3, #64	; 0x40
 800ef56:	d002      	beq.n	800ef5e <USBD_StdEPReq+0x2a>
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d00a      	beq.n	800ef72 <USBD_StdEPReq+0x3e>
 800ef5c:	e135      	b.n	800f1ca <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	6839      	ldr	r1, [r7, #0]
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	4798      	blx	r3
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ef70:	e130      	b.n	800f1d4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	785b      	ldrb	r3, [r3, #1]
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d03e      	beq.n	800eff8 <USBD_StdEPReq+0xc4>
 800ef7a:	2b03      	cmp	r3, #3
 800ef7c:	d002      	beq.n	800ef84 <USBD_StdEPReq+0x50>
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d077      	beq.n	800f072 <USBD_StdEPReq+0x13e>
 800ef82:	e11c      	b.n	800f1be <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef8a:	2b02      	cmp	r3, #2
 800ef8c:	d002      	beq.n	800ef94 <USBD_StdEPReq+0x60>
 800ef8e:	2b03      	cmp	r3, #3
 800ef90:	d015      	beq.n	800efbe <USBD_StdEPReq+0x8a>
 800ef92:	e02b      	b.n	800efec <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef94:	7bbb      	ldrb	r3, [r7, #14]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00c      	beq.n	800efb4 <USBD_StdEPReq+0x80>
 800ef9a:	7bbb      	ldrb	r3, [r7, #14]
 800ef9c:	2b80      	cmp	r3, #128	; 0x80
 800ef9e:	d009      	beq.n	800efb4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800efa0:	7bbb      	ldrb	r3, [r7, #14]
 800efa2:	4619      	mov	r1, r3
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f001 f903 	bl	80101b0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800efaa:	2180      	movs	r1, #128	; 0x80
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f001 f8ff 	bl	80101b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800efb2:	e020      	b.n	800eff6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 fc38 	bl	800f82c <USBD_CtlError>
        break;
 800efbc:	e01b      	b.n	800eff6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	885b      	ldrh	r3, [r3, #2]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10e      	bne.n	800efe4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800efc6:	7bbb      	ldrb	r3, [r7, #14]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00b      	beq.n	800efe4 <USBD_StdEPReq+0xb0>
 800efcc:	7bbb      	ldrb	r3, [r7, #14]
 800efce:	2b80      	cmp	r3, #128	; 0x80
 800efd0:	d008      	beq.n	800efe4 <USBD_StdEPReq+0xb0>
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	88db      	ldrh	r3, [r3, #6]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d104      	bne.n	800efe4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800efda:	7bbb      	ldrb	r3, [r7, #14]
 800efdc:	4619      	mov	r1, r3
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f001 f8e6 	bl	80101b0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 fcec 	bl	800f9c2 <USBD_CtlSendStatus>

        break;
 800efea:	e004      	b.n	800eff6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 fc1c 	bl	800f82c <USBD_CtlError>
        break;
 800eff4:	bf00      	nop
      }
      break;
 800eff6:	e0e7      	b.n	800f1c8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800effe:	2b02      	cmp	r3, #2
 800f000:	d002      	beq.n	800f008 <USBD_StdEPReq+0xd4>
 800f002:	2b03      	cmp	r3, #3
 800f004:	d015      	beq.n	800f032 <USBD_StdEPReq+0xfe>
 800f006:	e02d      	b.n	800f064 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f008:	7bbb      	ldrb	r3, [r7, #14]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00c      	beq.n	800f028 <USBD_StdEPReq+0xf4>
 800f00e:	7bbb      	ldrb	r3, [r7, #14]
 800f010:	2b80      	cmp	r3, #128	; 0x80
 800f012:	d009      	beq.n	800f028 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f014:	7bbb      	ldrb	r3, [r7, #14]
 800f016:	4619      	mov	r1, r3
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f001 f8c9 	bl	80101b0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f01e:	2180      	movs	r1, #128	; 0x80
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f001 f8c5 	bl	80101b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f026:	e023      	b.n	800f070 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f028:	6839      	ldr	r1, [r7, #0]
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 fbfe 	bl	800f82c <USBD_CtlError>
        break;
 800f030:	e01e      	b.n	800f070 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	885b      	ldrh	r3, [r3, #2]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d119      	bne.n	800f06e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f03a:	7bbb      	ldrb	r3, [r7, #14]
 800f03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f040:	2b00      	cmp	r3, #0
 800f042:	d004      	beq.n	800f04e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f044:	7bbb      	ldrb	r3, [r7, #14]
 800f046:	4619      	mov	r1, r3
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f001 f8d0 	bl	80101ee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 fcb7 	bl	800f9c2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	4798      	blx	r3
        }
        break;
 800f062:	e004      	b.n	800f06e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f064:	6839      	ldr	r1, [r7, #0]
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 fbe0 	bl	800f82c <USBD_CtlError>
        break;
 800f06c:	e000      	b.n	800f070 <USBD_StdEPReq+0x13c>
        break;
 800f06e:	bf00      	nop
      }
      break;
 800f070:	e0aa      	b.n	800f1c8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f078:	2b02      	cmp	r3, #2
 800f07a:	d002      	beq.n	800f082 <USBD_StdEPReq+0x14e>
 800f07c:	2b03      	cmp	r3, #3
 800f07e:	d032      	beq.n	800f0e6 <USBD_StdEPReq+0x1b2>
 800f080:	e097      	b.n	800f1b2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f082:	7bbb      	ldrb	r3, [r7, #14]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d007      	beq.n	800f098 <USBD_StdEPReq+0x164>
 800f088:	7bbb      	ldrb	r3, [r7, #14]
 800f08a:	2b80      	cmp	r3, #128	; 0x80
 800f08c:	d004      	beq.n	800f098 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fbcb 	bl	800f82c <USBD_CtlError>
          break;
 800f096:	e091      	b.n	800f1bc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f098:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	da0b      	bge.n	800f0b8 <USBD_StdEPReq+0x184>
 800f0a0:	7bbb      	ldrb	r3, [r7, #14]
 800f0a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	009b      	lsls	r3, r3, #2
 800f0aa:	4413      	add	r3, r2
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	3310      	adds	r3, #16
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	3304      	adds	r3, #4
 800f0b6:	e00b      	b.n	800f0d0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f0b8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0be:	4613      	mov	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	4413      	add	r3, r2
 800f0ce:	3304      	adds	r3, #4
 800f0d0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2202      	movs	r2, #2
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fc15 	bl	800f90e <USBD_CtlSendData>
        break;
 800f0e4:	e06a      	b.n	800f1bc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f0e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	da11      	bge.n	800f112 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f0ee:	7bbb      	ldrb	r3, [r7, #14]
 800f0f0:	f003 020f 	and.w	r2, r3, #15
 800f0f4:	6879      	ldr	r1, [r7, #4]
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	009b      	lsls	r3, r3, #2
 800f0fa:	4413      	add	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	440b      	add	r3, r1
 800f100:	3324      	adds	r3, #36	; 0x24
 800f102:	881b      	ldrh	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d117      	bne.n	800f138 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f108:	6839      	ldr	r1, [r7, #0]
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 fb8e 	bl	800f82c <USBD_CtlError>
            break;
 800f110:	e054      	b.n	800f1bc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f112:	7bbb      	ldrb	r3, [r7, #14]
 800f114:	f003 020f 	and.w	r2, r3, #15
 800f118:	6879      	ldr	r1, [r7, #4]
 800f11a:	4613      	mov	r3, r2
 800f11c:	009b      	lsls	r3, r3, #2
 800f11e:	4413      	add	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	440b      	add	r3, r1
 800f124:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d104      	bne.n	800f138 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f12e:	6839      	ldr	r1, [r7, #0]
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f000 fb7b 	bl	800f82c <USBD_CtlError>
            break;
 800f136:	e041      	b.n	800f1bc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	da0b      	bge.n	800f158 <USBD_StdEPReq+0x224>
 800f140:	7bbb      	ldrb	r3, [r7, #14]
 800f142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f146:	4613      	mov	r3, r2
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4413      	add	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	3310      	adds	r3, #16
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	4413      	add	r3, r2
 800f154:	3304      	adds	r3, #4
 800f156:	e00b      	b.n	800f170 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f158:	7bbb      	ldrb	r3, [r7, #14]
 800f15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f15e:	4613      	mov	r3, r2
 800f160:	009b      	lsls	r3, r3, #2
 800f162:	4413      	add	r3, r2
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	4413      	add	r3, r2
 800f16e:	3304      	adds	r3, #4
 800f170:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f172:	7bbb      	ldrb	r3, [r7, #14]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <USBD_StdEPReq+0x24a>
 800f178:	7bbb      	ldrb	r3, [r7, #14]
 800f17a:	2b80      	cmp	r3, #128	; 0x80
 800f17c:	d103      	bne.n	800f186 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	2200      	movs	r2, #0
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	e00e      	b.n	800f1a4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f186:	7bbb      	ldrb	r3, [r7, #14]
 800f188:	4619      	mov	r1, r3
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 f84e 	bl	801022c <USBD_LL_IsStallEP>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d003      	beq.n	800f19e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	2201      	movs	r2, #1
 800f19a:	601a      	str	r2, [r3, #0]
 800f19c:	e002      	b.n	800f1a4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 fbaf 	bl	800f90e <USBD_CtlSendData>
          break;
 800f1b0:	e004      	b.n	800f1bc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f1b2:	6839      	ldr	r1, [r7, #0]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fb39 	bl	800f82c <USBD_CtlError>
        break;
 800f1ba:	bf00      	nop
      }
      break;
 800f1bc:	e004      	b.n	800f1c8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f1be:	6839      	ldr	r1, [r7, #0]
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 fb33 	bl	800f82c <USBD_CtlError>
      break;
 800f1c6:	bf00      	nop
    }
    break;
 800f1c8:	e004      	b.n	800f1d4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f1ca:	6839      	ldr	r1, [r7, #0]
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f000 fb2d 	bl	800f82c <USBD_CtlError>
    break;
 800f1d2:	bf00      	nop
  }

  return ret;
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	885b      	ldrh	r3, [r3, #2]
 800f1fa:	0a1b      	lsrs	r3, r3, #8
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	3b01      	subs	r3, #1
 800f200:	2b06      	cmp	r3, #6
 800f202:	f200 8128 	bhi.w	800f456 <USBD_GetDescriptor+0x276>
 800f206:	a201      	add	r2, pc, #4	; (adr r2, 800f20c <USBD_GetDescriptor+0x2c>)
 800f208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f20c:	0800f229 	.word	0x0800f229
 800f210:	0800f241 	.word	0x0800f241
 800f214:	0800f281 	.word	0x0800f281
 800f218:	0800f457 	.word	0x0800f457
 800f21c:	0800f457 	.word	0x0800f457
 800f220:	0800f3f7 	.word	0x0800f3f7
 800f224:	0800f423 	.word	0x0800f423
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	687a      	ldr	r2, [r7, #4]
 800f232:	7c12      	ldrb	r2, [r2, #16]
 800f234:	f107 0108 	add.w	r1, r7, #8
 800f238:	4610      	mov	r0, r2
 800f23a:	4798      	blx	r3
 800f23c:	60f8      	str	r0, [r7, #12]
    break;
 800f23e:	e112      	b.n	800f466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	7c1b      	ldrb	r3, [r3, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d10d      	bne.n	800f264 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f250:	f107 0208 	add.w	r2, r7, #8
 800f254:	4610      	mov	r0, r2
 800f256:	4798      	blx	r3
 800f258:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	3301      	adds	r3, #1
 800f25e:	2202      	movs	r2, #2
 800f260:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f262:	e100      	b.n	800f466 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f26c:	f107 0208 	add.w	r2, r7, #8
 800f270:	4610      	mov	r0, r2
 800f272:	4798      	blx	r3
 800f274:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3301      	adds	r3, #1
 800f27a:	2202      	movs	r2, #2
 800f27c:	701a      	strb	r2, [r3, #0]
    break;
 800f27e:	e0f2      	b.n	800f466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	885b      	ldrh	r3, [r3, #2]
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b05      	cmp	r3, #5
 800f288:	f200 80ac 	bhi.w	800f3e4 <USBD_GetDescriptor+0x204>
 800f28c:	a201      	add	r2, pc, #4	; (adr r2, 800f294 <USBD_GetDescriptor+0xb4>)
 800f28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f292:	bf00      	nop
 800f294:	0800f2ad 	.word	0x0800f2ad
 800f298:	0800f2e1 	.word	0x0800f2e1
 800f29c:	0800f315 	.word	0x0800f315
 800f2a0:	0800f349 	.word	0x0800f349
 800f2a4:	0800f37d 	.word	0x0800f37d
 800f2a8:	0800f3b1 	.word	0x0800f3b1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d00b      	beq.n	800f2d0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	7c12      	ldrb	r2, [r2, #16]
 800f2c4:	f107 0108 	add.w	r1, r7, #8
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	4798      	blx	r3
 800f2cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2ce:	e091      	b.n	800f3f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f2d0:	6839      	ldr	r1, [r7, #0]
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 faaa 	bl	800f82c <USBD_CtlError>
        err++;
 800f2d8:	7afb      	ldrb	r3, [r7, #11]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	72fb      	strb	r3, [r7, #11]
      break;
 800f2de:	e089      	b.n	800f3f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00b      	beq.n	800f304 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	7c12      	ldrb	r2, [r2, #16]
 800f2f8:	f107 0108 	add.w	r1, r7, #8
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	4798      	blx	r3
 800f300:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f302:	e077      	b.n	800f3f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fa90 	bl	800f82c <USBD_CtlError>
        err++;
 800f30c:	7afb      	ldrb	r3, [r7, #11]
 800f30e:	3301      	adds	r3, #1
 800f310:	72fb      	strb	r3, [r7, #11]
      break;
 800f312:	e06f      	b.n	800f3f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d00b      	beq.n	800f338 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	687a      	ldr	r2, [r7, #4]
 800f32a:	7c12      	ldrb	r2, [r2, #16]
 800f32c:	f107 0108 	add.w	r1, r7, #8
 800f330:	4610      	mov	r0, r2
 800f332:	4798      	blx	r3
 800f334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f336:	e05d      	b.n	800f3f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 fa76 	bl	800f82c <USBD_CtlError>
        err++;
 800f340:	7afb      	ldrb	r3, [r7, #11]
 800f342:	3301      	adds	r3, #1
 800f344:	72fb      	strb	r3, [r7, #11]
      break;
 800f346:	e055      	b.n	800f3f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f34e:	691b      	ldr	r3, [r3, #16]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00b      	beq.n	800f36c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f35a:	691b      	ldr	r3, [r3, #16]
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	7c12      	ldrb	r2, [r2, #16]
 800f360:	f107 0108 	add.w	r1, r7, #8
 800f364:	4610      	mov	r0, r2
 800f366:	4798      	blx	r3
 800f368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f36a:	e043      	b.n	800f3f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f36c:	6839      	ldr	r1, [r7, #0]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 fa5c 	bl	800f82c <USBD_CtlError>
        err++;
 800f374:	7afb      	ldrb	r3, [r7, #11]
 800f376:	3301      	adds	r3, #1
 800f378:	72fb      	strb	r3, [r7, #11]
      break;
 800f37a:	e03b      	b.n	800f3f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f382:	695b      	ldr	r3, [r3, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00b      	beq.n	800f3a0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f38e:	695b      	ldr	r3, [r3, #20]
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	7c12      	ldrb	r2, [r2, #16]
 800f394:	f107 0108 	add.w	r1, r7, #8
 800f398:	4610      	mov	r0, r2
 800f39a:	4798      	blx	r3
 800f39c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f39e:	e029      	b.n	800f3f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 fa42 	bl	800f82c <USBD_CtlError>
        err++;
 800f3a8:	7afb      	ldrb	r3, [r7, #11]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	72fb      	strb	r3, [r7, #11]
      break;
 800f3ae:	e021      	b.n	800f3f4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3b6:	699b      	ldr	r3, [r3, #24]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00b      	beq.n	800f3d4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3c2:	699b      	ldr	r3, [r3, #24]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	7c12      	ldrb	r2, [r2, #16]
 800f3c8:	f107 0108 	add.w	r1, r7, #8
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	4798      	blx	r3
 800f3d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3d2:	e00f      	b.n	800f3f4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f3d4:	6839      	ldr	r1, [r7, #0]
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 fa28 	bl	800f82c <USBD_CtlError>
        err++;
 800f3dc:	7afb      	ldrb	r3, [r7, #11]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	72fb      	strb	r3, [r7, #11]
      break;
 800f3e2:	e007      	b.n	800f3f4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f3e4:	6839      	ldr	r1, [r7, #0]
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 fa20 	bl	800f82c <USBD_CtlError>
      err++;
 800f3ec:	7afb      	ldrb	r3, [r7, #11]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f3f2:	bf00      	nop
    }
    break;
 800f3f4:	e037      	b.n	800f466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	7c1b      	ldrb	r3, [r3, #16]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d109      	bne.n	800f412 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f406:	f107 0208 	add.w	r2, r7, #8
 800f40a:	4610      	mov	r0, r2
 800f40c:	4798      	blx	r3
 800f40e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f410:	e029      	b.n	800f466 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f412:	6839      	ldr	r1, [r7, #0]
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 fa09 	bl	800f82c <USBD_CtlError>
      err++;
 800f41a:	7afb      	ldrb	r3, [r7, #11]
 800f41c:	3301      	adds	r3, #1
 800f41e:	72fb      	strb	r3, [r7, #11]
    break;
 800f420:	e021      	b.n	800f466 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	7c1b      	ldrb	r3, [r3, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d10d      	bne.n	800f446 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f432:	f107 0208 	add.w	r2, r7, #8
 800f436:	4610      	mov	r0, r2
 800f438:	4798      	blx	r3
 800f43a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	3301      	adds	r3, #1
 800f440:	2207      	movs	r2, #7
 800f442:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f444:	e00f      	b.n	800f466 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 f9ef 	bl	800f82c <USBD_CtlError>
      err++;
 800f44e:	7afb      	ldrb	r3, [r7, #11]
 800f450:	3301      	adds	r3, #1
 800f452:	72fb      	strb	r3, [r7, #11]
    break;
 800f454:	e007      	b.n	800f466 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f456:	6839      	ldr	r1, [r7, #0]
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 f9e7 	bl	800f82c <USBD_CtlError>
    err++;
 800f45e:	7afb      	ldrb	r3, [r7, #11]
 800f460:	3301      	adds	r3, #1
 800f462:	72fb      	strb	r3, [r7, #11]
    break;
 800f464:	bf00      	nop
  }

  if (err != 0U)
 800f466:	7afb      	ldrb	r3, [r7, #11]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d11e      	bne.n	800f4aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	88db      	ldrh	r3, [r3, #6]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d016      	beq.n	800f4a2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f474:	893b      	ldrh	r3, [r7, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00e      	beq.n	800f498 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	88da      	ldrh	r2, [r3, #6]
 800f47e:	893b      	ldrh	r3, [r7, #8]
 800f480:	4293      	cmp	r3, r2
 800f482:	bf28      	it	cs
 800f484:	4613      	movcs	r3, r2
 800f486:	b29b      	uxth	r3, r3
 800f488:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f48a:	893b      	ldrh	r3, [r7, #8]
 800f48c:	461a      	mov	r2, r3
 800f48e:	68f9      	ldr	r1, [r7, #12]
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fa3c 	bl	800f90e <USBD_CtlSendData>
 800f496:	e009      	b.n	800f4ac <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f000 f9c6 	bl	800f82c <USBD_CtlError>
 800f4a0:	e004      	b.n	800f4ac <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 fa8d 	bl	800f9c2 <USBD_CtlSendStatus>
 800f4a8:	e000      	b.n	800f4ac <USBD_GetDescriptor+0x2cc>
    return;
 800f4aa:	bf00      	nop
    }
  }
}
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop

0800f4b4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	889b      	ldrh	r3, [r3, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d130      	bne.n	800f528 <USBD_SetAddress+0x74>
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	88db      	ldrh	r3, [r3, #6]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d12c      	bne.n	800f528 <USBD_SetAddress+0x74>
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	885b      	ldrh	r3, [r3, #2]
 800f4d2:	2b7f      	cmp	r3, #127	; 0x7f
 800f4d4:	d828      	bhi.n	800f528 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	885b      	ldrh	r3, [r3, #2]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4e8:	2b03      	cmp	r3, #3
 800f4ea:	d104      	bne.n	800f4f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f4ec:	6839      	ldr	r1, [r7, #0]
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 f99c 	bl	800f82c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4f4:	e01c      	b.n	800f530 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	7bfa      	ldrb	r2, [r7, #15]
 800f4fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
 800f500:	4619      	mov	r1, r3
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 febe 	bl	8010284 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 fa5a 	bl	800f9c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d004      	beq.n	800f51e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2202      	movs	r2, #2
 800f518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f51c:	e008      	b.n	800f530 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2201      	movs	r2, #1
 800f522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f526:	e003      	b.n	800f530 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 f97e 	bl	800f82c <USBD_CtlError>
  }
}
 800f530:	bf00      	nop
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f542:	2300      	movs	r3, #0
 800f544:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	885b      	ldrh	r3, [r3, #2]
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	4b4b      	ldr	r3, [pc, #300]	; (800f67c <USBD_SetConfig+0x144>)
 800f54e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f550:	4b4a      	ldr	r3, [pc, #296]	; (800f67c <USBD_SetConfig+0x144>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	2b01      	cmp	r3, #1
 800f556:	d905      	bls.n	800f564 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f966 	bl	800f82c <USBD_CtlError>
    return USBD_FAIL;
 800f560:	2303      	movs	r3, #3
 800f562:	e087      	b.n	800f674 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	d002      	beq.n	800f574 <USBD_SetConfig+0x3c>
 800f56e:	2b03      	cmp	r3, #3
 800f570:	d025      	beq.n	800f5be <USBD_SetConfig+0x86>
 800f572:	e071      	b.n	800f658 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f574:	4b41      	ldr	r3, [pc, #260]	; (800f67c <USBD_SetConfig+0x144>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d01c      	beq.n	800f5b6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f57c:	4b3f      	ldr	r3, [pc, #252]	; (800f67c <USBD_SetConfig+0x144>)
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	461a      	mov	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f586:	4b3d      	ldr	r3, [pc, #244]	; (800f67c <USBD_SetConfig+0x144>)
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	4619      	mov	r1, r3
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff f9a7 	bl	800e8e0 <USBD_SetClassConfig>
 800f592:	4603      	mov	r3, r0
 800f594:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f596:	7bfb      	ldrb	r3, [r7, #15]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d004      	beq.n	800f5a6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f59c:	6839      	ldr	r1, [r7, #0]
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f944 	bl	800f82c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f5a4:	e065      	b.n	800f672 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 fa0b 	bl	800f9c2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2203      	movs	r2, #3
 800f5b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f5b4:	e05d      	b.n	800f672 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 fa03 	bl	800f9c2 <USBD_CtlSendStatus>
    break;
 800f5bc:	e059      	b.n	800f672 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f5be:	4b2f      	ldr	r3, [pc, #188]	; (800f67c <USBD_SetConfig+0x144>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d112      	bne.n	800f5ec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2202      	movs	r2, #2
 800f5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f5ce:	4b2b      	ldr	r3, [pc, #172]	; (800f67c <USBD_SetConfig+0x144>)
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f5d8:	4b28      	ldr	r3, [pc, #160]	; (800f67c <USBD_SetConfig+0x144>)
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7ff f99a 	bl	800e918 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f9ec 	bl	800f9c2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f5ea:	e042      	b.n	800f672 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f5ec:	4b23      	ldr	r3, [pc, #140]	; (800f67c <USBD_SetConfig+0x144>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d02a      	beq.n	800f650 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	4619      	mov	r1, r3
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7ff f988 	bl	800e918 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f608:	4b1c      	ldr	r3, [pc, #112]	; (800f67c <USBD_SetConfig+0x144>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f612:	4b1a      	ldr	r3, [pc, #104]	; (800f67c <USBD_SetConfig+0x144>)
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff f961 	bl	800e8e0 <USBD_SetClassConfig>
 800f61e:	4603      	mov	r3, r0
 800f620:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f622:	7bfb      	ldrb	r3, [r7, #15]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00f      	beq.n	800f648 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 f8fe 	bl	800f82c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	b2db      	uxtb	r3, r3
 800f636:	4619      	mov	r1, r3
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7ff f96d 	bl	800e918 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2202      	movs	r2, #2
 800f642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f646:	e014      	b.n	800f672 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 f9ba 	bl	800f9c2 <USBD_CtlSendStatus>
    break;
 800f64e:	e010      	b.n	800f672 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 f9b6 	bl	800f9c2 <USBD_CtlSendStatus>
    break;
 800f656:	e00c      	b.n	800f672 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f658:	6839      	ldr	r1, [r7, #0]
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 f8e6 	bl	800f82c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f660:	4b06      	ldr	r3, [pc, #24]	; (800f67c <USBD_SetConfig+0x144>)
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f7ff f956 	bl	800e918 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f66c:	2303      	movs	r3, #3
 800f66e:	73fb      	strb	r3, [r7, #15]
    break;
 800f670:	bf00      	nop
  }

  return ret;
 800f672:	7bfb      	ldrb	r3, [r7, #15]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2000030a 	.word	0x2000030a

0800f680 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	88db      	ldrh	r3, [r3, #6]
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d004      	beq.n	800f69c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f692:	6839      	ldr	r1, [r7, #0]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 f8c9 	bl	800f82c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f69a:	e021      	b.n	800f6e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	db17      	blt.n	800f6d6 <USBD_GetConfig+0x56>
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	dd02      	ble.n	800f6b0 <USBD_GetConfig+0x30>
 800f6aa:	2b03      	cmp	r3, #3
 800f6ac:	d00b      	beq.n	800f6c6 <USBD_GetConfig+0x46>
 800f6ae:	e012      	b.n	800f6d6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	3308      	adds	r3, #8
 800f6ba:	2201      	movs	r2, #1
 800f6bc:	4619      	mov	r1, r3
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f925 	bl	800f90e <USBD_CtlSendData>
      break;
 800f6c4:	e00c      	b.n	800f6e0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 f91d 	bl	800f90e <USBD_CtlSendData>
      break;
 800f6d4:	e004      	b.n	800f6e0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f6d6:	6839      	ldr	r1, [r7, #0]
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f000 f8a7 	bl	800f82c <USBD_CtlError>
      break;
 800f6de:	bf00      	nop
}
 800f6e0:	bf00      	nop
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d81e      	bhi.n	800f73c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	88db      	ldrh	r3, [r3, #6]
 800f702:	2b02      	cmp	r3, #2
 800f704:	d004      	beq.n	800f710 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f706:	6839      	ldr	r1, [r7, #0]
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f000 f88f 	bl	800f82c <USBD_CtlError>
      break;
 800f70e:	e01a      	b.n	800f746 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d005      	beq.n	800f72c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	f043 0202 	orr.w	r2, r3, #2
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	330c      	adds	r3, #12
 800f730:	2202      	movs	r2, #2
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 f8ea 	bl	800f90e <USBD_CtlSendData>
    break;
 800f73a:	e004      	b.n	800f746 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f73c:	6839      	ldr	r1, [r7, #0]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f874 	bl	800f82c <USBD_CtlError>
    break;
 800f744:	bf00      	nop
  }
}
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
 800f756:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	885b      	ldrh	r3, [r3, #2]
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d106      	bne.n	800f76e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2201      	movs	r2, #1
 800f764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f000 f92a 	bl	800f9c2 <USBD_CtlSendStatus>
  }
}
 800f76e:	bf00      	nop
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b082      	sub	sp, #8
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
 800f77e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f786:	3b01      	subs	r3, #1
 800f788:	2b02      	cmp	r3, #2
 800f78a:	d80b      	bhi.n	800f7a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	885b      	ldrh	r3, [r3, #2]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d10c      	bne.n	800f7ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 f910 	bl	800f9c2 <USBD_CtlSendStatus>
      }
      break;
 800f7a2:	e004      	b.n	800f7ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f840 	bl	800f82c <USBD_CtlError>
      break;
 800f7ac:	e000      	b.n	800f7b0 <USBD_ClrFeature+0x3a>
      break;
 800f7ae:	bf00      	nop
  }
}
 800f7b0:	bf00      	nop
 800f7b2:	3708      	adds	r7, #8
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	781a      	ldrb	r2, [r3, #0]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	781a      	ldrb	r2, [r3, #0]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	f7ff fad3 	bl	800ed8e <SWAPBYTE>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f7ff fac6 	bl	800ed8e <SWAPBYTE>
 800f802:	4603      	mov	r3, r0
 800f804:	461a      	mov	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3301      	adds	r3, #1
 800f80e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	3301      	adds	r3, #1
 800f814:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f7ff fab9 	bl	800ed8e <SWAPBYTE>
 800f81c:	4603      	mov	r3, r0
 800f81e:	461a      	mov	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	80da      	strh	r2, [r3, #6]
}
 800f824:	bf00      	nop
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f836:	2180      	movs	r1, #128	; 0x80
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 fcb9 	bl	80101b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f83e:	2100      	movs	r1, #0
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 fcb5 	bl	80101b0 <USBD_LL_StallEP>
}
 800f846:	bf00      	nop
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b086      	sub	sp, #24
 800f852:	af00      	add	r7, sp, #0
 800f854:	60f8      	str	r0, [r7, #12]
 800f856:	60b9      	str	r1, [r7, #8]
 800f858:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f85a:	2300      	movs	r3, #0
 800f85c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d036      	beq.n	800f8d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f868:	6938      	ldr	r0, [r7, #16]
 800f86a:	f000 f836 	bl	800f8da <USBD_GetLen>
 800f86e:	4603      	mov	r3, r0
 800f870:	3301      	adds	r3, #1
 800f872:	b29b      	uxth	r3, r3
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	b29a      	uxth	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f87c:	7dfb      	ldrb	r3, [r7, #23]
 800f87e:	68ba      	ldr	r2, [r7, #8]
 800f880:	4413      	add	r3, r2
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	7812      	ldrb	r2, [r2, #0]
 800f886:	701a      	strb	r2, [r3, #0]
  idx++;
 800f888:	7dfb      	ldrb	r3, [r7, #23]
 800f88a:	3301      	adds	r3, #1
 800f88c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f88e:	7dfb      	ldrb	r3, [r7, #23]
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	4413      	add	r3, r2
 800f894:	2203      	movs	r2, #3
 800f896:	701a      	strb	r2, [r3, #0]
  idx++;
 800f898:	7dfb      	ldrb	r3, [r7, #23]
 800f89a:	3301      	adds	r3, #1
 800f89c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f89e:	e013      	b.n	800f8c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f8a0:	7dfb      	ldrb	r3, [r7, #23]
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	693a      	ldr	r2, [r7, #16]
 800f8a8:	7812      	ldrb	r2, [r2, #0]
 800f8aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	613b      	str	r3, [r7, #16]
    idx++;
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f8b8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ba:	68ba      	ldr	r2, [r7, #8]
 800f8bc:	4413      	add	r3, r2
 800f8be:	2200      	movs	r2, #0
 800f8c0:	701a      	strb	r2, [r3, #0]
    idx++;
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d1e7      	bne.n	800f8a0 <USBD_GetString+0x52>
 800f8d0:	e000      	b.n	800f8d4 <USBD_GetString+0x86>
    return;
 800f8d2:	bf00      	nop
  }
}
 800f8d4:	3718      	adds	r7, #24
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f8da:	b480      	push	{r7}
 800f8dc:	b085      	sub	sp, #20
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f8ea:	e005      	b.n	800f8f8 <USBD_GetLen+0x1e>
  {
    len++;
 800f8ec:	7bfb      	ldrb	r3, [r7, #15]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1f5      	bne.n	800f8ec <USBD_GetLen+0x12>
  }

  return len;
 800f900:	7bfb      	ldrb	r3, [r7, #15]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3714      	adds	r7, #20
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr

0800f90e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f90e:	b580      	push	{r7, lr}
 800f910:	b084      	sub	sp, #16
 800f912:	af00      	add	r7, sp, #0
 800f914:	60f8      	str	r0, [r7, #12]
 800f916:	60b9      	str	r1, [r7, #8]
 800f918:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2202      	movs	r2, #2
 800f91e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	2100      	movs	r1, #0
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f000 fcc4 	bl	80102c2 <USBD_LL_Transmit>

  return USBD_OK;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68ba      	ldr	r2, [r7, #8]
 800f954:	2100      	movs	r1, #0
 800f956:	68f8      	ldr	r0, [r7, #12]
 800f958:	f000 fcb3 	bl	80102c2 <USBD_LL_Transmit>

  return USBD_OK;
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f966:	b580      	push	{r7, lr}
 800f968:	b084      	sub	sp, #16
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	60f8      	str	r0, [r7, #12]
 800f96e:	60b9      	str	r1, [r7, #8]
 800f970:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2203      	movs	r2, #3
 800f976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	68ba      	ldr	r2, [r7, #8]
 800f98e:	2100      	movs	r1, #0
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f000 fcb7 	bl	8010304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	68ba      	ldr	r2, [r7, #8]
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f000 fca6 	bl	8010304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9b8:	2300      	movs	r3, #0
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3710      	adds	r7, #16
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}

0800f9c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b082      	sub	sp, #8
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2204      	movs	r2, #4
 800f9ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 fc72 	bl	80102c2 <USBD_LL_Transmit>

  return USBD_OK;
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2205      	movs	r2, #5
 800f9f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fc80 	bl	8010304 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
	...

0800fa10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fa14:	2200      	movs	r2, #0
 800fa16:	4912      	ldr	r1, [pc, #72]	; (800fa60 <MX_USB_DEVICE_Init+0x50>)
 800fa18:	4812      	ldr	r0, [pc, #72]	; (800fa64 <MX_USB_DEVICE_Init+0x54>)
 800fa1a:	f7fe fef3 	bl	800e804 <USBD_Init>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d001      	beq.n	800fa28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fa24:	f7f5 f9c2 	bl	8004dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fa28:	490f      	ldr	r1, [pc, #60]	; (800fa68 <MX_USB_DEVICE_Init+0x58>)
 800fa2a:	480e      	ldr	r0, [pc, #56]	; (800fa64 <MX_USB_DEVICE_Init+0x54>)
 800fa2c:	f7fe ff20 	bl	800e870 <USBD_RegisterClass>
 800fa30:	4603      	mov	r3, r0
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fa36:	f7f5 f9b9 	bl	8004dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fa3a:	490c      	ldr	r1, [pc, #48]	; (800fa6c <MX_USB_DEVICE_Init+0x5c>)
 800fa3c:	4809      	ldr	r0, [pc, #36]	; (800fa64 <MX_USB_DEVICE_Init+0x54>)
 800fa3e:	f7fe fe75 	bl	800e72c <USBD_CDC_RegisterInterface>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d001      	beq.n	800fa4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fa48:	f7f5 f9b0 	bl	8004dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fa4c:	4805      	ldr	r0, [pc, #20]	; (800fa64 <MX_USB_DEVICE_Init+0x54>)
 800fa4e:	f7fe ff30 	bl	800e8b2 <USBD_Start>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fa58:	f7f5 f9a8 	bl	8004dac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa5c:	bf00      	nop
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	2000017c 	.word	0x2000017c
 800fa64:	20002cc8 	.word	0x20002cc8
 800fa68:	20000064 	.word	0x20000064
 800fa6c:	20000168 	.word	0x20000168

0800fa70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fa74:	2200      	movs	r2, #0
 800fa76:	4905      	ldr	r1, [pc, #20]	; (800fa8c <CDC_Init_FS+0x1c>)
 800fa78:	4805      	ldr	r0, [pc, #20]	; (800fa90 <CDC_Init_FS+0x20>)
 800fa7a:	f7fe fe6c 	bl	800e756 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fa7e:	4905      	ldr	r1, [pc, #20]	; (800fa94 <CDC_Init_FS+0x24>)
 800fa80:	4803      	ldr	r0, [pc, #12]	; (800fa90 <CDC_Init_FS+0x20>)
 800fa82:	f7fe fe81 	bl	800e788 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fa86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	20003798 	.word	0x20003798
 800fa90:	20002cc8 	.word	0x20002cc8
 800fa94:	20002f98 	.word	0x20002f98

0800fa98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fa9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr

0800faa8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	6039      	str	r1, [r7, #0]
 800fab2:	71fb      	strb	r3, [r7, #7]
 800fab4:	4613      	mov	r3, r2
 800fab6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fab8:	79fb      	ldrb	r3, [r7, #7]
 800faba:	2b23      	cmp	r3, #35	; 0x23
 800fabc:	d84a      	bhi.n	800fb54 <CDC_Control_FS+0xac>
 800fabe:	a201      	add	r2, pc, #4	; (adr r2, 800fac4 <CDC_Control_FS+0x1c>)
 800fac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac4:	0800fb55 	.word	0x0800fb55
 800fac8:	0800fb55 	.word	0x0800fb55
 800facc:	0800fb55 	.word	0x0800fb55
 800fad0:	0800fb55 	.word	0x0800fb55
 800fad4:	0800fb55 	.word	0x0800fb55
 800fad8:	0800fb55 	.word	0x0800fb55
 800fadc:	0800fb55 	.word	0x0800fb55
 800fae0:	0800fb55 	.word	0x0800fb55
 800fae4:	0800fb55 	.word	0x0800fb55
 800fae8:	0800fb55 	.word	0x0800fb55
 800faec:	0800fb55 	.word	0x0800fb55
 800faf0:	0800fb55 	.word	0x0800fb55
 800faf4:	0800fb55 	.word	0x0800fb55
 800faf8:	0800fb55 	.word	0x0800fb55
 800fafc:	0800fb55 	.word	0x0800fb55
 800fb00:	0800fb55 	.word	0x0800fb55
 800fb04:	0800fb55 	.word	0x0800fb55
 800fb08:	0800fb55 	.word	0x0800fb55
 800fb0c:	0800fb55 	.word	0x0800fb55
 800fb10:	0800fb55 	.word	0x0800fb55
 800fb14:	0800fb55 	.word	0x0800fb55
 800fb18:	0800fb55 	.word	0x0800fb55
 800fb1c:	0800fb55 	.word	0x0800fb55
 800fb20:	0800fb55 	.word	0x0800fb55
 800fb24:	0800fb55 	.word	0x0800fb55
 800fb28:	0800fb55 	.word	0x0800fb55
 800fb2c:	0800fb55 	.word	0x0800fb55
 800fb30:	0800fb55 	.word	0x0800fb55
 800fb34:	0800fb55 	.word	0x0800fb55
 800fb38:	0800fb55 	.word	0x0800fb55
 800fb3c:	0800fb55 	.word	0x0800fb55
 800fb40:	0800fb55 	.word	0x0800fb55
 800fb44:	0800fb55 	.word	0x0800fb55
 800fb48:	0800fb55 	.word	0x0800fb55
 800fb4c:	0800fb55 	.word	0x0800fb55
 800fb50:	0800fb55 	.word	0x0800fb55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fb54:	bf00      	nop
  }

  return (USBD_OK);
 800fb56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fb6e:	6879      	ldr	r1, [r7, #4]
 800fb70:	4805      	ldr	r0, [pc, #20]	; (800fb88 <CDC_Receive_FS+0x24>)
 800fb72:	f7fe fe09 	bl	800e788 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fb76:	4804      	ldr	r0, [pc, #16]	; (800fb88 <CDC_Receive_FS+0x24>)
 800fb78:	f7fe fe1a 	bl	800e7b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fb7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	20002cc8 	.word	0x20002cc8

0800fb8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b087      	sub	sp, #28
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	4613      	mov	r3, r2
 800fb98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fb9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	371c      	adds	r7, #28
 800fba6:	46bd      	mov	sp, r7
 800fba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbac:	4770      	bx	lr
	...

0800fbb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	6039      	str	r1, [r7, #0]
 800fbba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	2212      	movs	r2, #18
 800fbc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fbc2:	4b03      	ldr	r3, [pc, #12]	; (800fbd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	20000198 	.word	0x20000198

0800fbd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	4603      	mov	r3, r0
 800fbdc:	6039      	str	r1, [r7, #0]
 800fbde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2204      	movs	r2, #4
 800fbe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fbe6:	4b03      	ldr	r3, [pc, #12]	; (800fbf4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr
 800fbf4:	200001ac 	.word	0x200001ac

0800fbf8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	4603      	mov	r3, r0
 800fc00:	6039      	str	r1, [r7, #0]
 800fc02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc04:	79fb      	ldrb	r3, [r7, #7]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d105      	bne.n	800fc16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc0a:	683a      	ldr	r2, [r7, #0]
 800fc0c:	4907      	ldr	r1, [pc, #28]	; (800fc2c <USBD_FS_ProductStrDescriptor+0x34>)
 800fc0e:	4808      	ldr	r0, [pc, #32]	; (800fc30 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc10:	f7ff fe1d 	bl	800f84e <USBD_GetString>
 800fc14:	e004      	b.n	800fc20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	4904      	ldr	r1, [pc, #16]	; (800fc2c <USBD_FS_ProductStrDescriptor+0x34>)
 800fc1a:	4805      	ldr	r0, [pc, #20]	; (800fc30 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc1c:	f7ff fe17 	bl	800f84e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc20:	4b02      	ldr	r3, [pc, #8]	; (800fc2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3708      	adds	r7, #8
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20003f98 	.word	0x20003f98
 800fc30:	08013658 	.word	0x08013658

0800fc34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	6039      	str	r1, [r7, #0]
 800fc3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	4904      	ldr	r1, [pc, #16]	; (800fc54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fc44:	4804      	ldr	r0, [pc, #16]	; (800fc58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fc46:	f7ff fe02 	bl	800f84e <USBD_GetString>
  return USBD_StrDesc;
 800fc4a:	4b02      	ldr	r3, [pc, #8]	; (800fc54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	20003f98 	.word	0x20003f98
 800fc58:	08013670 	.word	0x08013670

0800fc5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	4603      	mov	r3, r0
 800fc64:	6039      	str	r1, [r7, #0]
 800fc66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	221a      	movs	r2, #26
 800fc6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fc6e:	f000 f843 	bl	800fcf8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fc72:	4b02      	ldr	r3, [pc, #8]	; (800fc7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	200001b0 	.word	0x200001b0

0800fc80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	4603      	mov	r3, r0
 800fc88:	6039      	str	r1, [r7, #0]
 800fc8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fc8c:	79fb      	ldrb	r3, [r7, #7]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d105      	bne.n	800fc9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc92:	683a      	ldr	r2, [r7, #0]
 800fc94:	4907      	ldr	r1, [pc, #28]	; (800fcb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fc96:	4808      	ldr	r0, [pc, #32]	; (800fcb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fc98:	f7ff fdd9 	bl	800f84e <USBD_GetString>
 800fc9c:	e004      	b.n	800fca8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	4904      	ldr	r1, [pc, #16]	; (800fcb4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fca2:	4805      	ldr	r0, [pc, #20]	; (800fcb8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fca4:	f7ff fdd3 	bl	800f84e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fca8:	4b02      	ldr	r3, [pc, #8]	; (800fcb4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3708      	adds	r7, #8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	20003f98 	.word	0x20003f98
 800fcb8:	08013684 	.word	0x08013684

0800fcbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	6039      	str	r1, [r7, #0]
 800fcc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fcc8:	79fb      	ldrb	r3, [r7, #7]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d105      	bne.n	800fcda <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fcce:	683a      	ldr	r2, [r7, #0]
 800fcd0:	4907      	ldr	r1, [pc, #28]	; (800fcf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fcd2:	4808      	ldr	r0, [pc, #32]	; (800fcf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fcd4:	f7ff fdbb 	bl	800f84e <USBD_GetString>
 800fcd8:	e004      	b.n	800fce4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fcda:	683a      	ldr	r2, [r7, #0]
 800fcdc:	4904      	ldr	r1, [pc, #16]	; (800fcf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fcde:	4805      	ldr	r0, [pc, #20]	; (800fcf4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fce0:	f7ff fdb5 	bl	800f84e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fce4:	4b02      	ldr	r3, [pc, #8]	; (800fcf0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	20003f98 	.word	0x20003f98
 800fcf4:	08013690 	.word	0x08013690

0800fcf8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fcfe:	4b0f      	ldr	r3, [pc, #60]	; (800fd3c <Get_SerialNum+0x44>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd04:	4b0e      	ldr	r3, [pc, #56]	; (800fd40 <Get_SerialNum+0x48>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd0a:	4b0e      	ldr	r3, [pc, #56]	; (800fd44 <Get_SerialNum+0x4c>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd10:	68fa      	ldr	r2, [r7, #12]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	4413      	add	r3, r2
 800fd16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d009      	beq.n	800fd32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd1e:	2208      	movs	r2, #8
 800fd20:	4909      	ldr	r1, [pc, #36]	; (800fd48 <Get_SerialNum+0x50>)
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f000 f814 	bl	800fd50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd28:	2204      	movs	r2, #4
 800fd2a:	4908      	ldr	r1, [pc, #32]	; (800fd4c <Get_SerialNum+0x54>)
 800fd2c:	68b8      	ldr	r0, [r7, #8]
 800fd2e:	f000 f80f 	bl	800fd50 <IntToUnicode>
  }
}
 800fd32:	bf00      	nop
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	1fff7a10 	.word	0x1fff7a10
 800fd40:	1fff7a14 	.word	0x1fff7a14
 800fd44:	1fff7a18 	.word	0x1fff7a18
 800fd48:	200001b2 	.word	0x200001b2
 800fd4c:	200001c2 	.word	0x200001c2

0800fd50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b087      	sub	sp, #28
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fd62:	2300      	movs	r3, #0
 800fd64:	75fb      	strb	r3, [r7, #23]
 800fd66:	e027      	b.n	800fdb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	0f1b      	lsrs	r3, r3, #28
 800fd6c:	2b09      	cmp	r3, #9
 800fd6e:	d80b      	bhi.n	800fd88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	0f1b      	lsrs	r3, r3, #28
 800fd74:	b2da      	uxtb	r2, r3
 800fd76:	7dfb      	ldrb	r3, [r7, #23]
 800fd78:	005b      	lsls	r3, r3, #1
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	440b      	add	r3, r1
 800fd80:	3230      	adds	r2, #48	; 0x30
 800fd82:	b2d2      	uxtb	r2, r2
 800fd84:	701a      	strb	r2, [r3, #0]
 800fd86:	e00a      	b.n	800fd9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	0f1b      	lsrs	r3, r3, #28
 800fd8c:	b2da      	uxtb	r2, r3
 800fd8e:	7dfb      	ldrb	r3, [r7, #23]
 800fd90:	005b      	lsls	r3, r3, #1
 800fd92:	4619      	mov	r1, r3
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	440b      	add	r3, r1
 800fd98:	3237      	adds	r2, #55	; 0x37
 800fd9a:	b2d2      	uxtb	r2, r2
 800fd9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	011b      	lsls	r3, r3, #4
 800fda2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fda4:	7dfb      	ldrb	r3, [r7, #23]
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	3301      	adds	r3, #1
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	4413      	add	r3, r2
 800fdae:	2200      	movs	r2, #0
 800fdb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fdb2:	7dfb      	ldrb	r3, [r7, #23]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	75fb      	strb	r3, [r7, #23]
 800fdb8:	7dfa      	ldrb	r2, [r7, #23]
 800fdba:	79fb      	ldrb	r3, [r7, #7]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d3d3      	bcc.n	800fd68 <IntToUnicode+0x18>
  }
}
 800fdc0:	bf00      	nop
 800fdc2:	371c      	adds	r7, #28
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b08a      	sub	sp, #40	; 0x28
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fdd4:	f107 0314 	add.w	r3, r7, #20
 800fdd8:	2200      	movs	r2, #0
 800fdda:	601a      	str	r2, [r3, #0]
 800fddc:	605a      	str	r2, [r3, #4]
 800fdde:	609a      	str	r2, [r3, #8]
 800fde0:	60da      	str	r2, [r3, #12]
 800fde2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fdec:	d13a      	bne.n	800fe64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fdee:	2300      	movs	r3, #0
 800fdf0:	613b      	str	r3, [r7, #16]
 800fdf2:	4b1e      	ldr	r3, [pc, #120]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf6:	4a1d      	ldr	r2, [pc, #116]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fdf8:	f043 0301 	orr.w	r3, r3, #1
 800fdfc:	6313      	str	r3, [r2, #48]	; 0x30
 800fdfe:	4b1b      	ldr	r3, [pc, #108]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fe00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe02:	f003 0301 	and.w	r3, r3, #1
 800fe06:	613b      	str	r3, [r7, #16]
 800fe08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fe0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fe0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe10:	2302      	movs	r3, #2
 800fe12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe14:	2300      	movs	r3, #0
 800fe16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe18:	2303      	movs	r3, #3
 800fe1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe1c:	230a      	movs	r3, #10
 800fe1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe20:	f107 0314 	add.w	r3, r7, #20
 800fe24:	4619      	mov	r1, r3
 800fe26:	4812      	ldr	r0, [pc, #72]	; (800fe70 <HAL_PCD_MspInit+0xa4>)
 800fe28:	f7f6 fe58 	bl	8006adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe2c:	4b0f      	ldr	r3, [pc, #60]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fe2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe30:	4a0e      	ldr	r2, [pc, #56]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fe32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe36:	6353      	str	r3, [r2, #52]	; 0x34
 800fe38:	2300      	movs	r3, #0
 800fe3a:	60fb      	str	r3, [r7, #12]
 800fe3c:	4b0b      	ldr	r3, [pc, #44]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fe3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe40:	4a0a      	ldr	r2, [pc, #40]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fe42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe46:	6453      	str	r3, [r2, #68]	; 0x44
 800fe48:	4b08      	ldr	r3, [pc, #32]	; (800fe6c <HAL_PCD_MspInit+0xa0>)
 800fe4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe50:	60fb      	str	r3, [r7, #12]
 800fe52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fe54:	2200      	movs	r2, #0
 800fe56:	2100      	movs	r1, #0
 800fe58:	2043      	movs	r0, #67	; 0x43
 800fe5a:	f7f6 faf0 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe5e:	2043      	movs	r0, #67	; 0x43
 800fe60:	f7f6 fb09 	bl	8006476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe64:	bf00      	nop
 800fe66:	3728      	adds	r7, #40	; 0x28
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	40023800 	.word	0x40023800
 800fe70:	40020000 	.word	0x40020000

0800fe74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4610      	mov	r0, r2
 800fe8c:	f7fe fd5c 	bl	800e948 <USBD_LL_SetupStage>
}
 800fe90:	bf00      	nop
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800feaa:	78fa      	ldrb	r2, [r7, #3]
 800feac:	6879      	ldr	r1, [r7, #4]
 800feae:	4613      	mov	r3, r2
 800feb0:	00db      	lsls	r3, r3, #3
 800feb2:	1a9b      	subs	r3, r3, r2
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	440b      	add	r3, r1
 800feb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	78fb      	ldrb	r3, [r7, #3]
 800fec0:	4619      	mov	r1, r3
 800fec2:	f7fe fd94 	bl	800e9ee <USBD_LL_DataOutStage>
}
 800fec6:	bf00      	nop
 800fec8:	3708      	adds	r7, #8
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fece:	b580      	push	{r7, lr}
 800fed0:	b082      	sub	sp, #8
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	460b      	mov	r3, r1
 800fed8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fee0:	78fa      	ldrb	r2, [r7, #3]
 800fee2:	6879      	ldr	r1, [r7, #4]
 800fee4:	4613      	mov	r3, r2
 800fee6:	00db      	lsls	r3, r3, #3
 800fee8:	1a9b      	subs	r3, r3, r2
 800feea:	009b      	lsls	r3, r3, #2
 800feec:	440b      	add	r3, r1
 800feee:	3348      	adds	r3, #72	; 0x48
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	78fb      	ldrb	r3, [r7, #3]
 800fef4:	4619      	mov	r1, r3
 800fef6:	f7fe fddd 	bl	800eab4 <USBD_LL_DataInStage>
}
 800fefa:	bf00      	nop
 800fefc:	3708      	adds	r7, #8
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b082      	sub	sp, #8
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7fe fee1 	bl	800ecd8 <USBD_LL_SOF>
}
 800ff16:	bf00      	nop
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b084      	sub	sp, #16
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ff26:	2301      	movs	r3, #1
 800ff28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d102      	bne.n	800ff38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ff32:	2300      	movs	r3, #0
 800ff34:	73fb      	strb	r3, [r7, #15]
 800ff36:	e008      	b.n	800ff4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d102      	bne.n	800ff46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ff40:	2301      	movs	r3, #1
 800ff42:	73fb      	strb	r3, [r7, #15]
 800ff44:	e001      	b.n	800ff4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ff46:	f7f4 ff31 	bl	8004dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff50:	7bfa      	ldrb	r2, [r7, #15]
 800ff52:	4611      	mov	r1, r2
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7fe fe84 	bl	800ec62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fe fe3d 	bl	800ebe0 <USBD_LL_Reset>
}
 800ff66:	bf00      	nop
 800ff68:	3710      	adds	r7, #16
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
	...

0800ff70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe fe7f 	bl	800ec82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	6812      	ldr	r2, [r2, #0]
 800ff92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff96:	f043 0301 	orr.w	r3, r3, #1
 800ff9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6a1b      	ldr	r3, [r3, #32]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d005      	beq.n	800ffb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ffa4:	4b04      	ldr	r3, [pc, #16]	; (800ffb8 <HAL_PCD_SuspendCallback+0x48>)
 800ffa6:	691b      	ldr	r3, [r3, #16]
 800ffa8:	4a03      	ldr	r2, [pc, #12]	; (800ffb8 <HAL_PCD_SuspendCallback+0x48>)
 800ffaa:	f043 0306 	orr.w	r3, r3, #6
 800ffae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	e000ed00 	.word	0xe000ed00

0800ffbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fe fe6e 	bl	800ecac <USBD_LL_Resume>
}
 800ffd0:	bf00      	nop
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}

0800ffd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ffea:	78fa      	ldrb	r2, [r7, #3]
 800ffec:	4611      	mov	r1, r2
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fe fe99 	bl	800ed26 <USBD_LL_IsoOUTIncomplete>
}
 800fff4:	bf00      	nop
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	460b      	mov	r3, r1
 8010006:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801000e:	78fa      	ldrb	r2, [r7, #3]
 8010010:	4611      	mov	r1, r2
 8010012:	4618      	mov	r0, r3
 8010014:	f7fe fe7a 	bl	800ed0c <USBD_LL_IsoINIncomplete>
}
 8010018:	bf00      	nop
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801002e:	4618      	mov	r0, r3
 8010030:	f7fe fe86 	bl	800ed40 <USBD_LL_DevConnected>
}
 8010034:	bf00      	nop
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801004a:	4618      	mov	r0, r3
 801004c:	f7fe fe83 	bl	800ed56 <USBD_LL_DevDisconnected>
}
 8010050:	bf00      	nop
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d13c      	bne.n	80100e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010068:	4a20      	ldr	r2, [pc, #128]	; (80100ec <USBD_LL_Init+0x94>)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4a1e      	ldr	r2, [pc, #120]	; (80100ec <USBD_LL_Init+0x94>)
 8010074:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010078:	4b1c      	ldr	r3, [pc, #112]	; (80100ec <USBD_LL_Init+0x94>)
 801007a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801007e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010080:	4b1a      	ldr	r3, [pc, #104]	; (80100ec <USBD_LL_Init+0x94>)
 8010082:	2204      	movs	r2, #4
 8010084:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010086:	4b19      	ldr	r3, [pc, #100]	; (80100ec <USBD_LL_Init+0x94>)
 8010088:	2202      	movs	r2, #2
 801008a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801008c:	4b17      	ldr	r3, [pc, #92]	; (80100ec <USBD_LL_Init+0x94>)
 801008e:	2200      	movs	r2, #0
 8010090:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010092:	4b16      	ldr	r3, [pc, #88]	; (80100ec <USBD_LL_Init+0x94>)
 8010094:	2202      	movs	r2, #2
 8010096:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010098:	4b14      	ldr	r3, [pc, #80]	; (80100ec <USBD_LL_Init+0x94>)
 801009a:	2200      	movs	r2, #0
 801009c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801009e:	4b13      	ldr	r3, [pc, #76]	; (80100ec <USBD_LL_Init+0x94>)
 80100a0:	2200      	movs	r2, #0
 80100a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80100a4:	4b11      	ldr	r3, [pc, #68]	; (80100ec <USBD_LL_Init+0x94>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80100aa:	4b10      	ldr	r3, [pc, #64]	; (80100ec <USBD_LL_Init+0x94>)
 80100ac:	2200      	movs	r2, #0
 80100ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80100b0:	4b0e      	ldr	r3, [pc, #56]	; (80100ec <USBD_LL_Init+0x94>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80100b6:	480d      	ldr	r0, [pc, #52]	; (80100ec <USBD_LL_Init+0x94>)
 80100b8:	f7f9 fc37 	bl	800992a <HAL_PCD_Init>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80100c2:	f7f4 fe73 	bl	8004dac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80100c6:	2180      	movs	r1, #128	; 0x80
 80100c8:	4808      	ldr	r0, [pc, #32]	; (80100ec <USBD_LL_Init+0x94>)
 80100ca:	f7fa fd94 	bl	800abf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80100ce:	2240      	movs	r2, #64	; 0x40
 80100d0:	2100      	movs	r1, #0
 80100d2:	4806      	ldr	r0, [pc, #24]	; (80100ec <USBD_LL_Init+0x94>)
 80100d4:	f7fa fd48 	bl	800ab68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80100d8:	2280      	movs	r2, #128	; 0x80
 80100da:	2101      	movs	r1, #1
 80100dc:	4803      	ldr	r0, [pc, #12]	; (80100ec <USBD_LL_Init+0x94>)
 80100de:	f7fa fd43 	bl	800ab68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80100e2:	2300      	movs	r3, #0
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	20004198 	.word	0x20004198

080100f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100f8:	2300      	movs	r3, #0
 80100fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100fc:	2300      	movs	r3, #0
 80100fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010106:	4618      	mov	r0, r3
 8010108:	f7f9 fd2c 	bl	8009b64 <HAL_PCD_Start>
 801010c:	4603      	mov	r3, r0
 801010e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010110:	7bfb      	ldrb	r3, [r7, #15]
 8010112:	4618      	mov	r0, r3
 8010114:	f000 f92a 	bl	801036c <USBD_Get_USB_Status>
 8010118:	4603      	mov	r3, r0
 801011a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801011c:	7bbb      	ldrb	r3, [r7, #14]
}
 801011e:	4618      	mov	r0, r3
 8010120:	3710      	adds	r7, #16
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010126:	b580      	push	{r7, lr}
 8010128:	b084      	sub	sp, #16
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	4608      	mov	r0, r1
 8010130:	4611      	mov	r1, r2
 8010132:	461a      	mov	r2, r3
 8010134:	4603      	mov	r3, r0
 8010136:	70fb      	strb	r3, [r7, #3]
 8010138:	460b      	mov	r3, r1
 801013a:	70bb      	strb	r3, [r7, #2]
 801013c:	4613      	mov	r3, r2
 801013e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010140:	2300      	movs	r3, #0
 8010142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010144:	2300      	movs	r3, #0
 8010146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801014e:	78bb      	ldrb	r3, [r7, #2]
 8010150:	883a      	ldrh	r2, [r7, #0]
 8010152:	78f9      	ldrb	r1, [r7, #3]
 8010154:	f7fa f910 	bl	800a378 <HAL_PCD_EP_Open>
 8010158:	4603      	mov	r3, r0
 801015a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801015c:	7bfb      	ldrb	r3, [r7, #15]
 801015e:	4618      	mov	r0, r3
 8010160:	f000 f904 	bl	801036c <USBD_Get_USB_Status>
 8010164:	4603      	mov	r3, r0
 8010166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010168:	7bbb      	ldrb	r3, [r7, #14]
}
 801016a:	4618      	mov	r0, r3
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b084      	sub	sp, #16
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	460b      	mov	r3, r1
 801017c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801017e:	2300      	movs	r3, #0
 8010180:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010182:	2300      	movs	r3, #0
 8010184:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801018c:	78fa      	ldrb	r2, [r7, #3]
 801018e:	4611      	mov	r1, r2
 8010190:	4618      	mov	r0, r3
 8010192:	f7fa f959 	bl	800a448 <HAL_PCD_EP_Close>
 8010196:	4603      	mov	r3, r0
 8010198:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801019a:	7bfb      	ldrb	r3, [r7, #15]
 801019c:	4618      	mov	r0, r3
 801019e:	f000 f8e5 	bl	801036c <USBD_Get_USB_Status>
 80101a2:	4603      	mov	r3, r0
 80101a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80101a8:	4618      	mov	r0, r3
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	460b      	mov	r3, r1
 80101ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101bc:	2300      	movs	r3, #0
 80101be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101ca:	78fa      	ldrb	r2, [r7, #3]
 80101cc:	4611      	mov	r1, r2
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fa fa31 	bl	800a636 <HAL_PCD_EP_SetStall>
 80101d4:	4603      	mov	r3, r0
 80101d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101d8:	7bfb      	ldrb	r3, [r7, #15]
 80101da:	4618      	mov	r0, r3
 80101dc:	f000 f8c6 	bl	801036c <USBD_Get_USB_Status>
 80101e0:	4603      	mov	r3, r0
 80101e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}

080101ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101ee:	b580      	push	{r7, lr}
 80101f0:	b084      	sub	sp, #16
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
 80101f6:	460b      	mov	r3, r1
 80101f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101fa:	2300      	movs	r3, #0
 80101fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101fe:	2300      	movs	r3, #0
 8010200:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010208:	78fa      	ldrb	r2, [r7, #3]
 801020a:	4611      	mov	r1, r2
 801020c:	4618      	mov	r0, r3
 801020e:	f7fa fa76 	bl	800a6fe <HAL_PCD_EP_ClrStall>
 8010212:	4603      	mov	r3, r0
 8010214:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010216:	7bfb      	ldrb	r3, [r7, #15]
 8010218:	4618      	mov	r0, r3
 801021a:	f000 f8a7 	bl	801036c <USBD_Get_USB_Status>
 801021e:	4603      	mov	r3, r0
 8010220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010222:	7bbb      	ldrb	r3, [r7, #14]
}
 8010224:	4618      	mov	r0, r3
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801023e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010240:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010244:	2b00      	cmp	r3, #0
 8010246:	da0b      	bge.n	8010260 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010248:	78fb      	ldrb	r3, [r7, #3]
 801024a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801024e:	68f9      	ldr	r1, [r7, #12]
 8010250:	4613      	mov	r3, r2
 8010252:	00db      	lsls	r3, r3, #3
 8010254:	1a9b      	subs	r3, r3, r2
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	440b      	add	r3, r1
 801025a:	333e      	adds	r3, #62	; 0x3e
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	e00b      	b.n	8010278 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010260:	78fb      	ldrb	r3, [r7, #3]
 8010262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010266:	68f9      	ldr	r1, [r7, #12]
 8010268:	4613      	mov	r3, r2
 801026a:	00db      	lsls	r3, r3, #3
 801026c:	1a9b      	subs	r3, r3, r2
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	440b      	add	r3, r1
 8010272:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010276:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010278:	4618      	mov	r0, r3
 801027a:	3714      	adds	r7, #20
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b084      	sub	sp, #16
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010290:	2300      	movs	r3, #0
 8010292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010294:	2300      	movs	r3, #0
 8010296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801029e:	78fa      	ldrb	r2, [r7, #3]
 80102a0:	4611      	mov	r1, r2
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fa f843 	bl	800a32e <HAL_PCD_SetAddress>
 80102a8:	4603      	mov	r3, r0
 80102aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f000 f85c 	bl	801036c <USBD_Get_USB_Status>
 80102b4:	4603      	mov	r3, r0
 80102b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}

080102c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80102c2:	b580      	push	{r7, lr}
 80102c4:	b086      	sub	sp, #24
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	60f8      	str	r0, [r7, #12]
 80102ca:	607a      	str	r2, [r7, #4]
 80102cc:	603b      	str	r3, [r7, #0]
 80102ce:	460b      	mov	r3, r1
 80102d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102d6:	2300      	movs	r3, #0
 80102d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80102e0:	7af9      	ldrb	r1, [r7, #11]
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	f7fa f95c 	bl	800a5a2 <HAL_PCD_EP_Transmit>
 80102ea:	4603      	mov	r3, r0
 80102ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
 80102f0:	4618      	mov	r0, r3
 80102f2:	f000 f83b 	bl	801036c <USBD_Get_USB_Status>
 80102f6:	4603      	mov	r3, r0
 80102f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80102fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	3718      	adds	r7, #24
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af00      	add	r7, sp, #0
 801030a:	60f8      	str	r0, [r7, #12]
 801030c:	607a      	str	r2, [r7, #4]
 801030e:	603b      	str	r3, [r7, #0]
 8010310:	460b      	mov	r3, r1
 8010312:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010314:	2300      	movs	r3, #0
 8010316:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010322:	7af9      	ldrb	r1, [r7, #11]
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	f7fa f8d8 	bl	800a4dc <HAL_PCD_EP_Receive>
 801032c:	4603      	mov	r3, r0
 801032e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010330:	7dfb      	ldrb	r3, [r7, #23]
 8010332:	4618      	mov	r0, r3
 8010334:	f000 f81a 	bl	801036c <USBD_Get_USB_Status>
 8010338:	4603      	mov	r3, r0
 801033a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801033c:	7dbb      	ldrb	r3, [r7, #22]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3718      	adds	r7, #24
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b082      	sub	sp, #8
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
 801034e:	460b      	mov	r3, r1
 8010350:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010358:	78fa      	ldrb	r2, [r7, #3]
 801035a:	4611      	mov	r1, r2
 801035c:	4618      	mov	r0, r3
 801035e:	f7fa f908 	bl	800a572 <HAL_PCD_EP_GetRxCount>
 8010362:	4603      	mov	r3, r0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801036c:	b480      	push	{r7}
 801036e:	b085      	sub	sp, #20
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010376:	2300      	movs	r3, #0
 8010378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801037a:	79fb      	ldrb	r3, [r7, #7]
 801037c:	2b03      	cmp	r3, #3
 801037e:	d817      	bhi.n	80103b0 <USBD_Get_USB_Status+0x44>
 8010380:	a201      	add	r2, pc, #4	; (adr r2, 8010388 <USBD_Get_USB_Status+0x1c>)
 8010382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010386:	bf00      	nop
 8010388:	08010399 	.word	0x08010399
 801038c:	0801039f 	.word	0x0801039f
 8010390:	080103a5 	.word	0x080103a5
 8010394:	080103ab 	.word	0x080103ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010398:	2300      	movs	r3, #0
 801039a:	73fb      	strb	r3, [r7, #15]
    break;
 801039c:	e00b      	b.n	80103b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801039e:	2303      	movs	r3, #3
 80103a0:	73fb      	strb	r3, [r7, #15]
    break;
 80103a2:	e008      	b.n	80103b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103a4:	2301      	movs	r3, #1
 80103a6:	73fb      	strb	r3, [r7, #15]
    break;
 80103a8:	e005      	b.n	80103b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103aa:	2303      	movs	r3, #3
 80103ac:	73fb      	strb	r3, [r7, #15]
    break;
 80103ae:	e002      	b.n	80103b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80103b0:	2303      	movs	r3, #3
 80103b2:	73fb      	strb	r3, [r7, #15]
    break;
 80103b4:	bf00      	nop
  }
  return usb_status;
 80103b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3714      	adds	r7, #20
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <__errno>:
 80103c4:	4b01      	ldr	r3, [pc, #4]	; (80103cc <__errno+0x8>)
 80103c6:	6818      	ldr	r0, [r3, #0]
 80103c8:	4770      	bx	lr
 80103ca:	bf00      	nop
 80103cc:	200001cc 	.word	0x200001cc

080103d0 <__libc_init_array>:
 80103d0:	b570      	push	{r4, r5, r6, lr}
 80103d2:	4e0d      	ldr	r6, [pc, #52]	; (8010408 <__libc_init_array+0x38>)
 80103d4:	4c0d      	ldr	r4, [pc, #52]	; (801040c <__libc_init_array+0x3c>)
 80103d6:	1ba4      	subs	r4, r4, r6
 80103d8:	10a4      	asrs	r4, r4, #2
 80103da:	2500      	movs	r5, #0
 80103dc:	42a5      	cmp	r5, r4
 80103de:	d109      	bne.n	80103f4 <__libc_init_array+0x24>
 80103e0:	4e0b      	ldr	r6, [pc, #44]	; (8010410 <__libc_init_array+0x40>)
 80103e2:	4c0c      	ldr	r4, [pc, #48]	; (8010414 <__libc_init_array+0x44>)
 80103e4:	f003 f8f4 	bl	80135d0 <_init>
 80103e8:	1ba4      	subs	r4, r4, r6
 80103ea:	10a4      	asrs	r4, r4, #2
 80103ec:	2500      	movs	r5, #0
 80103ee:	42a5      	cmp	r5, r4
 80103f0:	d105      	bne.n	80103fe <__libc_init_array+0x2e>
 80103f2:	bd70      	pop	{r4, r5, r6, pc}
 80103f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80103f8:	4798      	blx	r3
 80103fa:	3501      	adds	r5, #1
 80103fc:	e7ee      	b.n	80103dc <__libc_init_array+0xc>
 80103fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010402:	4798      	blx	r3
 8010404:	3501      	adds	r5, #1
 8010406:	e7f2      	b.n	80103ee <__libc_init_array+0x1e>
 8010408:	08013948 	.word	0x08013948
 801040c:	08013948 	.word	0x08013948
 8010410:	08013948 	.word	0x08013948
 8010414:	0801394c 	.word	0x0801394c

08010418 <malloc>:
 8010418:	4b02      	ldr	r3, [pc, #8]	; (8010424 <malloc+0xc>)
 801041a:	4601      	mov	r1, r0
 801041c:	6818      	ldr	r0, [r3, #0]
 801041e:	f000 b861 	b.w	80104e4 <_malloc_r>
 8010422:	bf00      	nop
 8010424:	200001cc 	.word	0x200001cc

08010428 <free>:
 8010428:	4b02      	ldr	r3, [pc, #8]	; (8010434 <free+0xc>)
 801042a:	4601      	mov	r1, r0
 801042c:	6818      	ldr	r0, [r3, #0]
 801042e:	f000 b80b 	b.w	8010448 <_free_r>
 8010432:	bf00      	nop
 8010434:	200001cc 	.word	0x200001cc

08010438 <memset>:
 8010438:	4402      	add	r2, r0
 801043a:	4603      	mov	r3, r0
 801043c:	4293      	cmp	r3, r2
 801043e:	d100      	bne.n	8010442 <memset+0xa>
 8010440:	4770      	bx	lr
 8010442:	f803 1b01 	strb.w	r1, [r3], #1
 8010446:	e7f9      	b.n	801043c <memset+0x4>

08010448 <_free_r>:
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4605      	mov	r5, r0
 801044c:	2900      	cmp	r1, #0
 801044e:	d045      	beq.n	80104dc <_free_r+0x94>
 8010450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010454:	1f0c      	subs	r4, r1, #4
 8010456:	2b00      	cmp	r3, #0
 8010458:	bfb8      	it	lt
 801045a:	18e4      	addlt	r4, r4, r3
 801045c:	f000 f8d4 	bl	8010608 <__malloc_lock>
 8010460:	4a1f      	ldr	r2, [pc, #124]	; (80104e0 <_free_r+0x98>)
 8010462:	6813      	ldr	r3, [r2, #0]
 8010464:	4610      	mov	r0, r2
 8010466:	b933      	cbnz	r3, 8010476 <_free_r+0x2e>
 8010468:	6063      	str	r3, [r4, #4]
 801046a:	6014      	str	r4, [r2, #0]
 801046c:	4628      	mov	r0, r5
 801046e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010472:	f000 b8ca 	b.w	801060a <__malloc_unlock>
 8010476:	42a3      	cmp	r3, r4
 8010478:	d90c      	bls.n	8010494 <_free_r+0x4c>
 801047a:	6821      	ldr	r1, [r4, #0]
 801047c:	1862      	adds	r2, r4, r1
 801047e:	4293      	cmp	r3, r2
 8010480:	bf04      	itt	eq
 8010482:	681a      	ldreq	r2, [r3, #0]
 8010484:	685b      	ldreq	r3, [r3, #4]
 8010486:	6063      	str	r3, [r4, #4]
 8010488:	bf04      	itt	eq
 801048a:	1852      	addeq	r2, r2, r1
 801048c:	6022      	streq	r2, [r4, #0]
 801048e:	6004      	str	r4, [r0, #0]
 8010490:	e7ec      	b.n	801046c <_free_r+0x24>
 8010492:	4613      	mov	r3, r2
 8010494:	685a      	ldr	r2, [r3, #4]
 8010496:	b10a      	cbz	r2, 801049c <_free_r+0x54>
 8010498:	42a2      	cmp	r2, r4
 801049a:	d9fa      	bls.n	8010492 <_free_r+0x4a>
 801049c:	6819      	ldr	r1, [r3, #0]
 801049e:	1858      	adds	r0, r3, r1
 80104a0:	42a0      	cmp	r0, r4
 80104a2:	d10b      	bne.n	80104bc <_free_r+0x74>
 80104a4:	6820      	ldr	r0, [r4, #0]
 80104a6:	4401      	add	r1, r0
 80104a8:	1858      	adds	r0, r3, r1
 80104aa:	4282      	cmp	r2, r0
 80104ac:	6019      	str	r1, [r3, #0]
 80104ae:	d1dd      	bne.n	801046c <_free_r+0x24>
 80104b0:	6810      	ldr	r0, [r2, #0]
 80104b2:	6852      	ldr	r2, [r2, #4]
 80104b4:	605a      	str	r2, [r3, #4]
 80104b6:	4401      	add	r1, r0
 80104b8:	6019      	str	r1, [r3, #0]
 80104ba:	e7d7      	b.n	801046c <_free_r+0x24>
 80104bc:	d902      	bls.n	80104c4 <_free_r+0x7c>
 80104be:	230c      	movs	r3, #12
 80104c0:	602b      	str	r3, [r5, #0]
 80104c2:	e7d3      	b.n	801046c <_free_r+0x24>
 80104c4:	6820      	ldr	r0, [r4, #0]
 80104c6:	1821      	adds	r1, r4, r0
 80104c8:	428a      	cmp	r2, r1
 80104ca:	bf04      	itt	eq
 80104cc:	6811      	ldreq	r1, [r2, #0]
 80104ce:	6852      	ldreq	r2, [r2, #4]
 80104d0:	6062      	str	r2, [r4, #4]
 80104d2:	bf04      	itt	eq
 80104d4:	1809      	addeq	r1, r1, r0
 80104d6:	6021      	streq	r1, [r4, #0]
 80104d8:	605c      	str	r4, [r3, #4]
 80104da:	e7c7      	b.n	801046c <_free_r+0x24>
 80104dc:	bd38      	pop	{r3, r4, r5, pc}
 80104de:	bf00      	nop
 80104e0:	2000030c 	.word	0x2000030c

080104e4 <_malloc_r>:
 80104e4:	b570      	push	{r4, r5, r6, lr}
 80104e6:	1ccd      	adds	r5, r1, #3
 80104e8:	f025 0503 	bic.w	r5, r5, #3
 80104ec:	3508      	adds	r5, #8
 80104ee:	2d0c      	cmp	r5, #12
 80104f0:	bf38      	it	cc
 80104f2:	250c      	movcc	r5, #12
 80104f4:	2d00      	cmp	r5, #0
 80104f6:	4606      	mov	r6, r0
 80104f8:	db01      	blt.n	80104fe <_malloc_r+0x1a>
 80104fa:	42a9      	cmp	r1, r5
 80104fc:	d903      	bls.n	8010506 <_malloc_r+0x22>
 80104fe:	230c      	movs	r3, #12
 8010500:	6033      	str	r3, [r6, #0]
 8010502:	2000      	movs	r0, #0
 8010504:	bd70      	pop	{r4, r5, r6, pc}
 8010506:	f000 f87f 	bl	8010608 <__malloc_lock>
 801050a:	4a21      	ldr	r2, [pc, #132]	; (8010590 <_malloc_r+0xac>)
 801050c:	6814      	ldr	r4, [r2, #0]
 801050e:	4621      	mov	r1, r4
 8010510:	b991      	cbnz	r1, 8010538 <_malloc_r+0x54>
 8010512:	4c20      	ldr	r4, [pc, #128]	; (8010594 <_malloc_r+0xb0>)
 8010514:	6823      	ldr	r3, [r4, #0]
 8010516:	b91b      	cbnz	r3, 8010520 <_malloc_r+0x3c>
 8010518:	4630      	mov	r0, r6
 801051a:	f000 f83d 	bl	8010598 <_sbrk_r>
 801051e:	6020      	str	r0, [r4, #0]
 8010520:	4629      	mov	r1, r5
 8010522:	4630      	mov	r0, r6
 8010524:	f000 f838 	bl	8010598 <_sbrk_r>
 8010528:	1c43      	adds	r3, r0, #1
 801052a:	d124      	bne.n	8010576 <_malloc_r+0x92>
 801052c:	230c      	movs	r3, #12
 801052e:	6033      	str	r3, [r6, #0]
 8010530:	4630      	mov	r0, r6
 8010532:	f000 f86a 	bl	801060a <__malloc_unlock>
 8010536:	e7e4      	b.n	8010502 <_malloc_r+0x1e>
 8010538:	680b      	ldr	r3, [r1, #0]
 801053a:	1b5b      	subs	r3, r3, r5
 801053c:	d418      	bmi.n	8010570 <_malloc_r+0x8c>
 801053e:	2b0b      	cmp	r3, #11
 8010540:	d90f      	bls.n	8010562 <_malloc_r+0x7e>
 8010542:	600b      	str	r3, [r1, #0]
 8010544:	50cd      	str	r5, [r1, r3]
 8010546:	18cc      	adds	r4, r1, r3
 8010548:	4630      	mov	r0, r6
 801054a:	f000 f85e 	bl	801060a <__malloc_unlock>
 801054e:	f104 000b 	add.w	r0, r4, #11
 8010552:	1d23      	adds	r3, r4, #4
 8010554:	f020 0007 	bic.w	r0, r0, #7
 8010558:	1ac3      	subs	r3, r0, r3
 801055a:	d0d3      	beq.n	8010504 <_malloc_r+0x20>
 801055c:	425a      	negs	r2, r3
 801055e:	50e2      	str	r2, [r4, r3]
 8010560:	e7d0      	b.n	8010504 <_malloc_r+0x20>
 8010562:	428c      	cmp	r4, r1
 8010564:	684b      	ldr	r3, [r1, #4]
 8010566:	bf16      	itet	ne
 8010568:	6063      	strne	r3, [r4, #4]
 801056a:	6013      	streq	r3, [r2, #0]
 801056c:	460c      	movne	r4, r1
 801056e:	e7eb      	b.n	8010548 <_malloc_r+0x64>
 8010570:	460c      	mov	r4, r1
 8010572:	6849      	ldr	r1, [r1, #4]
 8010574:	e7cc      	b.n	8010510 <_malloc_r+0x2c>
 8010576:	1cc4      	adds	r4, r0, #3
 8010578:	f024 0403 	bic.w	r4, r4, #3
 801057c:	42a0      	cmp	r0, r4
 801057e:	d005      	beq.n	801058c <_malloc_r+0xa8>
 8010580:	1a21      	subs	r1, r4, r0
 8010582:	4630      	mov	r0, r6
 8010584:	f000 f808 	bl	8010598 <_sbrk_r>
 8010588:	3001      	adds	r0, #1
 801058a:	d0cf      	beq.n	801052c <_malloc_r+0x48>
 801058c:	6025      	str	r5, [r4, #0]
 801058e:	e7db      	b.n	8010548 <_malloc_r+0x64>
 8010590:	2000030c 	.word	0x2000030c
 8010594:	20000310 	.word	0x20000310

08010598 <_sbrk_r>:
 8010598:	b538      	push	{r3, r4, r5, lr}
 801059a:	4c06      	ldr	r4, [pc, #24]	; (80105b4 <_sbrk_r+0x1c>)
 801059c:	2300      	movs	r3, #0
 801059e:	4605      	mov	r5, r0
 80105a0:	4608      	mov	r0, r1
 80105a2:	6023      	str	r3, [r4, #0]
 80105a4:	f7f4 fd00 	bl	8004fa8 <_sbrk>
 80105a8:	1c43      	adds	r3, r0, #1
 80105aa:	d102      	bne.n	80105b2 <_sbrk_r+0x1a>
 80105ac:	6823      	ldr	r3, [r4, #0]
 80105ae:	b103      	cbz	r3, 80105b2 <_sbrk_r+0x1a>
 80105b0:	602b      	str	r3, [r5, #0]
 80105b2:	bd38      	pop	{r3, r4, r5, pc}
 80105b4:	200045a0 	.word	0x200045a0

080105b8 <siprintf>:
 80105b8:	b40e      	push	{r1, r2, r3}
 80105ba:	b500      	push	{lr}
 80105bc:	b09c      	sub	sp, #112	; 0x70
 80105be:	ab1d      	add	r3, sp, #116	; 0x74
 80105c0:	9002      	str	r0, [sp, #8]
 80105c2:	9006      	str	r0, [sp, #24]
 80105c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105c8:	4809      	ldr	r0, [pc, #36]	; (80105f0 <siprintf+0x38>)
 80105ca:	9107      	str	r1, [sp, #28]
 80105cc:	9104      	str	r1, [sp, #16]
 80105ce:	4909      	ldr	r1, [pc, #36]	; (80105f4 <siprintf+0x3c>)
 80105d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105d4:	9105      	str	r1, [sp, #20]
 80105d6:	6800      	ldr	r0, [r0, #0]
 80105d8:	9301      	str	r3, [sp, #4]
 80105da:	a902      	add	r1, sp, #8
 80105dc:	f000 f870 	bl	80106c0 <_svfiprintf_r>
 80105e0:	9b02      	ldr	r3, [sp, #8]
 80105e2:	2200      	movs	r2, #0
 80105e4:	701a      	strb	r2, [r3, #0]
 80105e6:	b01c      	add	sp, #112	; 0x70
 80105e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80105ec:	b003      	add	sp, #12
 80105ee:	4770      	bx	lr
 80105f0:	200001cc 	.word	0x200001cc
 80105f4:	ffff0208 	.word	0xffff0208

080105f8 <strcpy>:
 80105f8:	4603      	mov	r3, r0
 80105fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105fe:	f803 2b01 	strb.w	r2, [r3], #1
 8010602:	2a00      	cmp	r2, #0
 8010604:	d1f9      	bne.n	80105fa <strcpy+0x2>
 8010606:	4770      	bx	lr

08010608 <__malloc_lock>:
 8010608:	4770      	bx	lr

0801060a <__malloc_unlock>:
 801060a:	4770      	bx	lr

0801060c <__ssputs_r>:
 801060c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010610:	688e      	ldr	r6, [r1, #8]
 8010612:	429e      	cmp	r6, r3
 8010614:	4682      	mov	sl, r0
 8010616:	460c      	mov	r4, r1
 8010618:	4690      	mov	r8, r2
 801061a:	4699      	mov	r9, r3
 801061c:	d837      	bhi.n	801068e <__ssputs_r+0x82>
 801061e:	898a      	ldrh	r2, [r1, #12]
 8010620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010624:	d031      	beq.n	801068a <__ssputs_r+0x7e>
 8010626:	6825      	ldr	r5, [r4, #0]
 8010628:	6909      	ldr	r1, [r1, #16]
 801062a:	1a6f      	subs	r7, r5, r1
 801062c:	6965      	ldr	r5, [r4, #20]
 801062e:	2302      	movs	r3, #2
 8010630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010634:	fb95 f5f3 	sdiv	r5, r5, r3
 8010638:	f109 0301 	add.w	r3, r9, #1
 801063c:	443b      	add	r3, r7
 801063e:	429d      	cmp	r5, r3
 8010640:	bf38      	it	cc
 8010642:	461d      	movcc	r5, r3
 8010644:	0553      	lsls	r3, r2, #21
 8010646:	d530      	bpl.n	80106aa <__ssputs_r+0x9e>
 8010648:	4629      	mov	r1, r5
 801064a:	f7ff ff4b 	bl	80104e4 <_malloc_r>
 801064e:	4606      	mov	r6, r0
 8010650:	b950      	cbnz	r0, 8010668 <__ssputs_r+0x5c>
 8010652:	230c      	movs	r3, #12
 8010654:	f8ca 3000 	str.w	r3, [sl]
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	f04f 30ff 	mov.w	r0, #4294967295
 8010664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010668:	463a      	mov	r2, r7
 801066a:	6921      	ldr	r1, [r4, #16]
 801066c:	f000 faa8 	bl	8010bc0 <memcpy>
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801067a:	81a3      	strh	r3, [r4, #12]
 801067c:	6126      	str	r6, [r4, #16]
 801067e:	6165      	str	r5, [r4, #20]
 8010680:	443e      	add	r6, r7
 8010682:	1bed      	subs	r5, r5, r7
 8010684:	6026      	str	r6, [r4, #0]
 8010686:	60a5      	str	r5, [r4, #8]
 8010688:	464e      	mov	r6, r9
 801068a:	454e      	cmp	r6, r9
 801068c:	d900      	bls.n	8010690 <__ssputs_r+0x84>
 801068e:	464e      	mov	r6, r9
 8010690:	4632      	mov	r2, r6
 8010692:	4641      	mov	r1, r8
 8010694:	6820      	ldr	r0, [r4, #0]
 8010696:	f000 fa9e 	bl	8010bd6 <memmove>
 801069a:	68a3      	ldr	r3, [r4, #8]
 801069c:	1b9b      	subs	r3, r3, r6
 801069e:	60a3      	str	r3, [r4, #8]
 80106a0:	6823      	ldr	r3, [r4, #0]
 80106a2:	441e      	add	r6, r3
 80106a4:	6026      	str	r6, [r4, #0]
 80106a6:	2000      	movs	r0, #0
 80106a8:	e7dc      	b.n	8010664 <__ssputs_r+0x58>
 80106aa:	462a      	mov	r2, r5
 80106ac:	f000 faac 	bl	8010c08 <_realloc_r>
 80106b0:	4606      	mov	r6, r0
 80106b2:	2800      	cmp	r0, #0
 80106b4:	d1e2      	bne.n	801067c <__ssputs_r+0x70>
 80106b6:	6921      	ldr	r1, [r4, #16]
 80106b8:	4650      	mov	r0, sl
 80106ba:	f7ff fec5 	bl	8010448 <_free_r>
 80106be:	e7c8      	b.n	8010652 <__ssputs_r+0x46>

080106c0 <_svfiprintf_r>:
 80106c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c4:	461d      	mov	r5, r3
 80106c6:	898b      	ldrh	r3, [r1, #12]
 80106c8:	061f      	lsls	r7, r3, #24
 80106ca:	b09d      	sub	sp, #116	; 0x74
 80106cc:	4680      	mov	r8, r0
 80106ce:	460c      	mov	r4, r1
 80106d0:	4616      	mov	r6, r2
 80106d2:	d50f      	bpl.n	80106f4 <_svfiprintf_r+0x34>
 80106d4:	690b      	ldr	r3, [r1, #16]
 80106d6:	b96b      	cbnz	r3, 80106f4 <_svfiprintf_r+0x34>
 80106d8:	2140      	movs	r1, #64	; 0x40
 80106da:	f7ff ff03 	bl	80104e4 <_malloc_r>
 80106de:	6020      	str	r0, [r4, #0]
 80106e0:	6120      	str	r0, [r4, #16]
 80106e2:	b928      	cbnz	r0, 80106f0 <_svfiprintf_r+0x30>
 80106e4:	230c      	movs	r3, #12
 80106e6:	f8c8 3000 	str.w	r3, [r8]
 80106ea:	f04f 30ff 	mov.w	r0, #4294967295
 80106ee:	e0c8      	b.n	8010882 <_svfiprintf_r+0x1c2>
 80106f0:	2340      	movs	r3, #64	; 0x40
 80106f2:	6163      	str	r3, [r4, #20]
 80106f4:	2300      	movs	r3, #0
 80106f6:	9309      	str	r3, [sp, #36]	; 0x24
 80106f8:	2320      	movs	r3, #32
 80106fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106fe:	2330      	movs	r3, #48	; 0x30
 8010700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010704:	9503      	str	r5, [sp, #12]
 8010706:	f04f 0b01 	mov.w	fp, #1
 801070a:	4637      	mov	r7, r6
 801070c:	463d      	mov	r5, r7
 801070e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010712:	b10b      	cbz	r3, 8010718 <_svfiprintf_r+0x58>
 8010714:	2b25      	cmp	r3, #37	; 0x25
 8010716:	d13e      	bne.n	8010796 <_svfiprintf_r+0xd6>
 8010718:	ebb7 0a06 	subs.w	sl, r7, r6
 801071c:	d00b      	beq.n	8010736 <_svfiprintf_r+0x76>
 801071e:	4653      	mov	r3, sl
 8010720:	4632      	mov	r2, r6
 8010722:	4621      	mov	r1, r4
 8010724:	4640      	mov	r0, r8
 8010726:	f7ff ff71 	bl	801060c <__ssputs_r>
 801072a:	3001      	adds	r0, #1
 801072c:	f000 80a4 	beq.w	8010878 <_svfiprintf_r+0x1b8>
 8010730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010732:	4453      	add	r3, sl
 8010734:	9309      	str	r3, [sp, #36]	; 0x24
 8010736:	783b      	ldrb	r3, [r7, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	f000 809d 	beq.w	8010878 <_svfiprintf_r+0x1b8>
 801073e:	2300      	movs	r3, #0
 8010740:	f04f 32ff 	mov.w	r2, #4294967295
 8010744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010748:	9304      	str	r3, [sp, #16]
 801074a:	9307      	str	r3, [sp, #28]
 801074c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010750:	931a      	str	r3, [sp, #104]	; 0x68
 8010752:	462f      	mov	r7, r5
 8010754:	2205      	movs	r2, #5
 8010756:	f817 1b01 	ldrb.w	r1, [r7], #1
 801075a:	4850      	ldr	r0, [pc, #320]	; (801089c <_svfiprintf_r+0x1dc>)
 801075c:	f7ef fd40 	bl	80001e0 <memchr>
 8010760:	9b04      	ldr	r3, [sp, #16]
 8010762:	b9d0      	cbnz	r0, 801079a <_svfiprintf_r+0xda>
 8010764:	06d9      	lsls	r1, r3, #27
 8010766:	bf44      	itt	mi
 8010768:	2220      	movmi	r2, #32
 801076a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801076e:	071a      	lsls	r2, r3, #28
 8010770:	bf44      	itt	mi
 8010772:	222b      	movmi	r2, #43	; 0x2b
 8010774:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010778:	782a      	ldrb	r2, [r5, #0]
 801077a:	2a2a      	cmp	r2, #42	; 0x2a
 801077c:	d015      	beq.n	80107aa <_svfiprintf_r+0xea>
 801077e:	9a07      	ldr	r2, [sp, #28]
 8010780:	462f      	mov	r7, r5
 8010782:	2000      	movs	r0, #0
 8010784:	250a      	movs	r5, #10
 8010786:	4639      	mov	r1, r7
 8010788:	f811 3b01 	ldrb.w	r3, [r1], #1
 801078c:	3b30      	subs	r3, #48	; 0x30
 801078e:	2b09      	cmp	r3, #9
 8010790:	d94d      	bls.n	801082e <_svfiprintf_r+0x16e>
 8010792:	b1b8      	cbz	r0, 80107c4 <_svfiprintf_r+0x104>
 8010794:	e00f      	b.n	80107b6 <_svfiprintf_r+0xf6>
 8010796:	462f      	mov	r7, r5
 8010798:	e7b8      	b.n	801070c <_svfiprintf_r+0x4c>
 801079a:	4a40      	ldr	r2, [pc, #256]	; (801089c <_svfiprintf_r+0x1dc>)
 801079c:	1a80      	subs	r0, r0, r2
 801079e:	fa0b f000 	lsl.w	r0, fp, r0
 80107a2:	4318      	orrs	r0, r3
 80107a4:	9004      	str	r0, [sp, #16]
 80107a6:	463d      	mov	r5, r7
 80107a8:	e7d3      	b.n	8010752 <_svfiprintf_r+0x92>
 80107aa:	9a03      	ldr	r2, [sp, #12]
 80107ac:	1d11      	adds	r1, r2, #4
 80107ae:	6812      	ldr	r2, [r2, #0]
 80107b0:	9103      	str	r1, [sp, #12]
 80107b2:	2a00      	cmp	r2, #0
 80107b4:	db01      	blt.n	80107ba <_svfiprintf_r+0xfa>
 80107b6:	9207      	str	r2, [sp, #28]
 80107b8:	e004      	b.n	80107c4 <_svfiprintf_r+0x104>
 80107ba:	4252      	negs	r2, r2
 80107bc:	f043 0302 	orr.w	r3, r3, #2
 80107c0:	9207      	str	r2, [sp, #28]
 80107c2:	9304      	str	r3, [sp, #16]
 80107c4:	783b      	ldrb	r3, [r7, #0]
 80107c6:	2b2e      	cmp	r3, #46	; 0x2e
 80107c8:	d10c      	bne.n	80107e4 <_svfiprintf_r+0x124>
 80107ca:	787b      	ldrb	r3, [r7, #1]
 80107cc:	2b2a      	cmp	r3, #42	; 0x2a
 80107ce:	d133      	bne.n	8010838 <_svfiprintf_r+0x178>
 80107d0:	9b03      	ldr	r3, [sp, #12]
 80107d2:	1d1a      	adds	r2, r3, #4
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	9203      	str	r2, [sp, #12]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	bfb8      	it	lt
 80107dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80107e0:	3702      	adds	r7, #2
 80107e2:	9305      	str	r3, [sp, #20]
 80107e4:	4d2e      	ldr	r5, [pc, #184]	; (80108a0 <_svfiprintf_r+0x1e0>)
 80107e6:	7839      	ldrb	r1, [r7, #0]
 80107e8:	2203      	movs	r2, #3
 80107ea:	4628      	mov	r0, r5
 80107ec:	f7ef fcf8 	bl	80001e0 <memchr>
 80107f0:	b138      	cbz	r0, 8010802 <_svfiprintf_r+0x142>
 80107f2:	2340      	movs	r3, #64	; 0x40
 80107f4:	1b40      	subs	r0, r0, r5
 80107f6:	fa03 f000 	lsl.w	r0, r3, r0
 80107fa:	9b04      	ldr	r3, [sp, #16]
 80107fc:	4303      	orrs	r3, r0
 80107fe:	3701      	adds	r7, #1
 8010800:	9304      	str	r3, [sp, #16]
 8010802:	7839      	ldrb	r1, [r7, #0]
 8010804:	4827      	ldr	r0, [pc, #156]	; (80108a4 <_svfiprintf_r+0x1e4>)
 8010806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801080a:	2206      	movs	r2, #6
 801080c:	1c7e      	adds	r6, r7, #1
 801080e:	f7ef fce7 	bl	80001e0 <memchr>
 8010812:	2800      	cmp	r0, #0
 8010814:	d038      	beq.n	8010888 <_svfiprintf_r+0x1c8>
 8010816:	4b24      	ldr	r3, [pc, #144]	; (80108a8 <_svfiprintf_r+0x1e8>)
 8010818:	bb13      	cbnz	r3, 8010860 <_svfiprintf_r+0x1a0>
 801081a:	9b03      	ldr	r3, [sp, #12]
 801081c:	3307      	adds	r3, #7
 801081e:	f023 0307 	bic.w	r3, r3, #7
 8010822:	3308      	adds	r3, #8
 8010824:	9303      	str	r3, [sp, #12]
 8010826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010828:	444b      	add	r3, r9
 801082a:	9309      	str	r3, [sp, #36]	; 0x24
 801082c:	e76d      	b.n	801070a <_svfiprintf_r+0x4a>
 801082e:	fb05 3202 	mla	r2, r5, r2, r3
 8010832:	2001      	movs	r0, #1
 8010834:	460f      	mov	r7, r1
 8010836:	e7a6      	b.n	8010786 <_svfiprintf_r+0xc6>
 8010838:	2300      	movs	r3, #0
 801083a:	3701      	adds	r7, #1
 801083c:	9305      	str	r3, [sp, #20]
 801083e:	4619      	mov	r1, r3
 8010840:	250a      	movs	r5, #10
 8010842:	4638      	mov	r0, r7
 8010844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010848:	3a30      	subs	r2, #48	; 0x30
 801084a:	2a09      	cmp	r2, #9
 801084c:	d903      	bls.n	8010856 <_svfiprintf_r+0x196>
 801084e:	2b00      	cmp	r3, #0
 8010850:	d0c8      	beq.n	80107e4 <_svfiprintf_r+0x124>
 8010852:	9105      	str	r1, [sp, #20]
 8010854:	e7c6      	b.n	80107e4 <_svfiprintf_r+0x124>
 8010856:	fb05 2101 	mla	r1, r5, r1, r2
 801085a:	2301      	movs	r3, #1
 801085c:	4607      	mov	r7, r0
 801085e:	e7f0      	b.n	8010842 <_svfiprintf_r+0x182>
 8010860:	ab03      	add	r3, sp, #12
 8010862:	9300      	str	r3, [sp, #0]
 8010864:	4622      	mov	r2, r4
 8010866:	4b11      	ldr	r3, [pc, #68]	; (80108ac <_svfiprintf_r+0x1ec>)
 8010868:	a904      	add	r1, sp, #16
 801086a:	4640      	mov	r0, r8
 801086c:	f3af 8000 	nop.w
 8010870:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010874:	4681      	mov	r9, r0
 8010876:	d1d6      	bne.n	8010826 <_svfiprintf_r+0x166>
 8010878:	89a3      	ldrh	r3, [r4, #12]
 801087a:	065b      	lsls	r3, r3, #25
 801087c:	f53f af35 	bmi.w	80106ea <_svfiprintf_r+0x2a>
 8010880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010882:	b01d      	add	sp, #116	; 0x74
 8010884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010888:	ab03      	add	r3, sp, #12
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	4622      	mov	r2, r4
 801088e:	4b07      	ldr	r3, [pc, #28]	; (80108ac <_svfiprintf_r+0x1ec>)
 8010890:	a904      	add	r1, sp, #16
 8010892:	4640      	mov	r0, r8
 8010894:	f000 f882 	bl	801099c <_printf_i>
 8010898:	e7ea      	b.n	8010870 <_svfiprintf_r+0x1b0>
 801089a:	bf00      	nop
 801089c:	080136c0 	.word	0x080136c0
 80108a0:	080136c6 	.word	0x080136c6
 80108a4:	080136ca 	.word	0x080136ca
 80108a8:	00000000 	.word	0x00000000
 80108ac:	0801060d 	.word	0x0801060d

080108b0 <_printf_common>:
 80108b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b4:	4691      	mov	r9, r2
 80108b6:	461f      	mov	r7, r3
 80108b8:	688a      	ldr	r2, [r1, #8]
 80108ba:	690b      	ldr	r3, [r1, #16]
 80108bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80108c0:	4293      	cmp	r3, r2
 80108c2:	bfb8      	it	lt
 80108c4:	4613      	movlt	r3, r2
 80108c6:	f8c9 3000 	str.w	r3, [r9]
 80108ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108ce:	4606      	mov	r6, r0
 80108d0:	460c      	mov	r4, r1
 80108d2:	b112      	cbz	r2, 80108da <_printf_common+0x2a>
 80108d4:	3301      	adds	r3, #1
 80108d6:	f8c9 3000 	str.w	r3, [r9]
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	0699      	lsls	r1, r3, #26
 80108de:	bf42      	ittt	mi
 80108e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80108e4:	3302      	addmi	r3, #2
 80108e6:	f8c9 3000 	strmi.w	r3, [r9]
 80108ea:	6825      	ldr	r5, [r4, #0]
 80108ec:	f015 0506 	ands.w	r5, r5, #6
 80108f0:	d107      	bne.n	8010902 <_printf_common+0x52>
 80108f2:	f104 0a19 	add.w	sl, r4, #25
 80108f6:	68e3      	ldr	r3, [r4, #12]
 80108f8:	f8d9 2000 	ldr.w	r2, [r9]
 80108fc:	1a9b      	subs	r3, r3, r2
 80108fe:	42ab      	cmp	r3, r5
 8010900:	dc28      	bgt.n	8010954 <_printf_common+0xa4>
 8010902:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010906:	6822      	ldr	r2, [r4, #0]
 8010908:	3300      	adds	r3, #0
 801090a:	bf18      	it	ne
 801090c:	2301      	movne	r3, #1
 801090e:	0692      	lsls	r2, r2, #26
 8010910:	d42d      	bmi.n	801096e <_printf_common+0xbe>
 8010912:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010916:	4639      	mov	r1, r7
 8010918:	4630      	mov	r0, r6
 801091a:	47c0      	blx	r8
 801091c:	3001      	adds	r0, #1
 801091e:	d020      	beq.n	8010962 <_printf_common+0xb2>
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	68e5      	ldr	r5, [r4, #12]
 8010924:	f8d9 2000 	ldr.w	r2, [r9]
 8010928:	f003 0306 	and.w	r3, r3, #6
 801092c:	2b04      	cmp	r3, #4
 801092e:	bf08      	it	eq
 8010930:	1aad      	subeq	r5, r5, r2
 8010932:	68a3      	ldr	r3, [r4, #8]
 8010934:	6922      	ldr	r2, [r4, #16]
 8010936:	bf0c      	ite	eq
 8010938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801093c:	2500      	movne	r5, #0
 801093e:	4293      	cmp	r3, r2
 8010940:	bfc4      	itt	gt
 8010942:	1a9b      	subgt	r3, r3, r2
 8010944:	18ed      	addgt	r5, r5, r3
 8010946:	f04f 0900 	mov.w	r9, #0
 801094a:	341a      	adds	r4, #26
 801094c:	454d      	cmp	r5, r9
 801094e:	d11a      	bne.n	8010986 <_printf_common+0xd6>
 8010950:	2000      	movs	r0, #0
 8010952:	e008      	b.n	8010966 <_printf_common+0xb6>
 8010954:	2301      	movs	r3, #1
 8010956:	4652      	mov	r2, sl
 8010958:	4639      	mov	r1, r7
 801095a:	4630      	mov	r0, r6
 801095c:	47c0      	blx	r8
 801095e:	3001      	adds	r0, #1
 8010960:	d103      	bne.n	801096a <_printf_common+0xba>
 8010962:	f04f 30ff 	mov.w	r0, #4294967295
 8010966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801096a:	3501      	adds	r5, #1
 801096c:	e7c3      	b.n	80108f6 <_printf_common+0x46>
 801096e:	18e1      	adds	r1, r4, r3
 8010970:	1c5a      	adds	r2, r3, #1
 8010972:	2030      	movs	r0, #48	; 0x30
 8010974:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010978:	4422      	add	r2, r4
 801097a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801097e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010982:	3302      	adds	r3, #2
 8010984:	e7c5      	b.n	8010912 <_printf_common+0x62>
 8010986:	2301      	movs	r3, #1
 8010988:	4622      	mov	r2, r4
 801098a:	4639      	mov	r1, r7
 801098c:	4630      	mov	r0, r6
 801098e:	47c0      	blx	r8
 8010990:	3001      	adds	r0, #1
 8010992:	d0e6      	beq.n	8010962 <_printf_common+0xb2>
 8010994:	f109 0901 	add.w	r9, r9, #1
 8010998:	e7d8      	b.n	801094c <_printf_common+0x9c>
	...

0801099c <_printf_i>:
 801099c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80109a4:	460c      	mov	r4, r1
 80109a6:	7e09      	ldrb	r1, [r1, #24]
 80109a8:	b085      	sub	sp, #20
 80109aa:	296e      	cmp	r1, #110	; 0x6e
 80109ac:	4617      	mov	r7, r2
 80109ae:	4606      	mov	r6, r0
 80109b0:	4698      	mov	r8, r3
 80109b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109b4:	f000 80b3 	beq.w	8010b1e <_printf_i+0x182>
 80109b8:	d822      	bhi.n	8010a00 <_printf_i+0x64>
 80109ba:	2963      	cmp	r1, #99	; 0x63
 80109bc:	d036      	beq.n	8010a2c <_printf_i+0x90>
 80109be:	d80a      	bhi.n	80109d6 <_printf_i+0x3a>
 80109c0:	2900      	cmp	r1, #0
 80109c2:	f000 80b9 	beq.w	8010b38 <_printf_i+0x19c>
 80109c6:	2958      	cmp	r1, #88	; 0x58
 80109c8:	f000 8083 	beq.w	8010ad2 <_printf_i+0x136>
 80109cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80109d4:	e032      	b.n	8010a3c <_printf_i+0xa0>
 80109d6:	2964      	cmp	r1, #100	; 0x64
 80109d8:	d001      	beq.n	80109de <_printf_i+0x42>
 80109da:	2969      	cmp	r1, #105	; 0x69
 80109dc:	d1f6      	bne.n	80109cc <_printf_i+0x30>
 80109de:	6820      	ldr	r0, [r4, #0]
 80109e0:	6813      	ldr	r3, [r2, #0]
 80109e2:	0605      	lsls	r5, r0, #24
 80109e4:	f103 0104 	add.w	r1, r3, #4
 80109e8:	d52a      	bpl.n	8010a40 <_printf_i+0xa4>
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	6011      	str	r1, [r2, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	da03      	bge.n	80109fa <_printf_i+0x5e>
 80109f2:	222d      	movs	r2, #45	; 0x2d
 80109f4:	425b      	negs	r3, r3
 80109f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80109fa:	486f      	ldr	r0, [pc, #444]	; (8010bb8 <_printf_i+0x21c>)
 80109fc:	220a      	movs	r2, #10
 80109fe:	e039      	b.n	8010a74 <_printf_i+0xd8>
 8010a00:	2973      	cmp	r1, #115	; 0x73
 8010a02:	f000 809d 	beq.w	8010b40 <_printf_i+0x1a4>
 8010a06:	d808      	bhi.n	8010a1a <_printf_i+0x7e>
 8010a08:	296f      	cmp	r1, #111	; 0x6f
 8010a0a:	d020      	beq.n	8010a4e <_printf_i+0xb2>
 8010a0c:	2970      	cmp	r1, #112	; 0x70
 8010a0e:	d1dd      	bne.n	80109cc <_printf_i+0x30>
 8010a10:	6823      	ldr	r3, [r4, #0]
 8010a12:	f043 0320 	orr.w	r3, r3, #32
 8010a16:	6023      	str	r3, [r4, #0]
 8010a18:	e003      	b.n	8010a22 <_printf_i+0x86>
 8010a1a:	2975      	cmp	r1, #117	; 0x75
 8010a1c:	d017      	beq.n	8010a4e <_printf_i+0xb2>
 8010a1e:	2978      	cmp	r1, #120	; 0x78
 8010a20:	d1d4      	bne.n	80109cc <_printf_i+0x30>
 8010a22:	2378      	movs	r3, #120	; 0x78
 8010a24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a28:	4864      	ldr	r0, [pc, #400]	; (8010bbc <_printf_i+0x220>)
 8010a2a:	e055      	b.n	8010ad8 <_printf_i+0x13c>
 8010a2c:	6813      	ldr	r3, [r2, #0]
 8010a2e:	1d19      	adds	r1, r3, #4
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	6011      	str	r1, [r2, #0]
 8010a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e08c      	b.n	8010b5a <_printf_i+0x1be>
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	6011      	str	r1, [r2, #0]
 8010a44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a48:	bf18      	it	ne
 8010a4a:	b21b      	sxthne	r3, r3
 8010a4c:	e7cf      	b.n	80109ee <_printf_i+0x52>
 8010a4e:	6813      	ldr	r3, [r2, #0]
 8010a50:	6825      	ldr	r5, [r4, #0]
 8010a52:	1d18      	adds	r0, r3, #4
 8010a54:	6010      	str	r0, [r2, #0]
 8010a56:	0628      	lsls	r0, r5, #24
 8010a58:	d501      	bpl.n	8010a5e <_printf_i+0xc2>
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	e002      	b.n	8010a64 <_printf_i+0xc8>
 8010a5e:	0668      	lsls	r0, r5, #25
 8010a60:	d5fb      	bpl.n	8010a5a <_printf_i+0xbe>
 8010a62:	881b      	ldrh	r3, [r3, #0]
 8010a64:	4854      	ldr	r0, [pc, #336]	; (8010bb8 <_printf_i+0x21c>)
 8010a66:	296f      	cmp	r1, #111	; 0x6f
 8010a68:	bf14      	ite	ne
 8010a6a:	220a      	movne	r2, #10
 8010a6c:	2208      	moveq	r2, #8
 8010a6e:	2100      	movs	r1, #0
 8010a70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a74:	6865      	ldr	r5, [r4, #4]
 8010a76:	60a5      	str	r5, [r4, #8]
 8010a78:	2d00      	cmp	r5, #0
 8010a7a:	f2c0 8095 	blt.w	8010ba8 <_printf_i+0x20c>
 8010a7e:	6821      	ldr	r1, [r4, #0]
 8010a80:	f021 0104 	bic.w	r1, r1, #4
 8010a84:	6021      	str	r1, [r4, #0]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d13d      	bne.n	8010b06 <_printf_i+0x16a>
 8010a8a:	2d00      	cmp	r5, #0
 8010a8c:	f040 808e 	bne.w	8010bac <_printf_i+0x210>
 8010a90:	4665      	mov	r5, ip
 8010a92:	2a08      	cmp	r2, #8
 8010a94:	d10b      	bne.n	8010aae <_printf_i+0x112>
 8010a96:	6823      	ldr	r3, [r4, #0]
 8010a98:	07db      	lsls	r3, r3, #31
 8010a9a:	d508      	bpl.n	8010aae <_printf_i+0x112>
 8010a9c:	6923      	ldr	r3, [r4, #16]
 8010a9e:	6862      	ldr	r2, [r4, #4]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	bfde      	ittt	le
 8010aa4:	2330      	movle	r3, #48	; 0x30
 8010aa6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010aaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010aae:	ebac 0305 	sub.w	r3, ip, r5
 8010ab2:	6123      	str	r3, [r4, #16]
 8010ab4:	f8cd 8000 	str.w	r8, [sp]
 8010ab8:	463b      	mov	r3, r7
 8010aba:	aa03      	add	r2, sp, #12
 8010abc:	4621      	mov	r1, r4
 8010abe:	4630      	mov	r0, r6
 8010ac0:	f7ff fef6 	bl	80108b0 <_printf_common>
 8010ac4:	3001      	adds	r0, #1
 8010ac6:	d14d      	bne.n	8010b64 <_printf_i+0x1c8>
 8010ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8010acc:	b005      	add	sp, #20
 8010ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ad2:	4839      	ldr	r0, [pc, #228]	; (8010bb8 <_printf_i+0x21c>)
 8010ad4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010ad8:	6813      	ldr	r3, [r2, #0]
 8010ada:	6821      	ldr	r1, [r4, #0]
 8010adc:	1d1d      	adds	r5, r3, #4
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	6015      	str	r5, [r2, #0]
 8010ae2:	060a      	lsls	r2, r1, #24
 8010ae4:	d50b      	bpl.n	8010afe <_printf_i+0x162>
 8010ae6:	07ca      	lsls	r2, r1, #31
 8010ae8:	bf44      	itt	mi
 8010aea:	f041 0120 	orrmi.w	r1, r1, #32
 8010aee:	6021      	strmi	r1, [r4, #0]
 8010af0:	b91b      	cbnz	r3, 8010afa <_printf_i+0x15e>
 8010af2:	6822      	ldr	r2, [r4, #0]
 8010af4:	f022 0220 	bic.w	r2, r2, #32
 8010af8:	6022      	str	r2, [r4, #0]
 8010afa:	2210      	movs	r2, #16
 8010afc:	e7b7      	b.n	8010a6e <_printf_i+0xd2>
 8010afe:	064d      	lsls	r5, r1, #25
 8010b00:	bf48      	it	mi
 8010b02:	b29b      	uxthmi	r3, r3
 8010b04:	e7ef      	b.n	8010ae6 <_printf_i+0x14a>
 8010b06:	4665      	mov	r5, ip
 8010b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b0c:	fb02 3311 	mls	r3, r2, r1, r3
 8010b10:	5cc3      	ldrb	r3, [r0, r3]
 8010b12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010b16:	460b      	mov	r3, r1
 8010b18:	2900      	cmp	r1, #0
 8010b1a:	d1f5      	bne.n	8010b08 <_printf_i+0x16c>
 8010b1c:	e7b9      	b.n	8010a92 <_printf_i+0xf6>
 8010b1e:	6813      	ldr	r3, [r2, #0]
 8010b20:	6825      	ldr	r5, [r4, #0]
 8010b22:	6961      	ldr	r1, [r4, #20]
 8010b24:	1d18      	adds	r0, r3, #4
 8010b26:	6010      	str	r0, [r2, #0]
 8010b28:	0628      	lsls	r0, r5, #24
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	d501      	bpl.n	8010b32 <_printf_i+0x196>
 8010b2e:	6019      	str	r1, [r3, #0]
 8010b30:	e002      	b.n	8010b38 <_printf_i+0x19c>
 8010b32:	066a      	lsls	r2, r5, #25
 8010b34:	d5fb      	bpl.n	8010b2e <_printf_i+0x192>
 8010b36:	8019      	strh	r1, [r3, #0]
 8010b38:	2300      	movs	r3, #0
 8010b3a:	6123      	str	r3, [r4, #16]
 8010b3c:	4665      	mov	r5, ip
 8010b3e:	e7b9      	b.n	8010ab4 <_printf_i+0x118>
 8010b40:	6813      	ldr	r3, [r2, #0]
 8010b42:	1d19      	adds	r1, r3, #4
 8010b44:	6011      	str	r1, [r2, #0]
 8010b46:	681d      	ldr	r5, [r3, #0]
 8010b48:	6862      	ldr	r2, [r4, #4]
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f7ef fb47 	bl	80001e0 <memchr>
 8010b52:	b108      	cbz	r0, 8010b58 <_printf_i+0x1bc>
 8010b54:	1b40      	subs	r0, r0, r5
 8010b56:	6060      	str	r0, [r4, #4]
 8010b58:	6863      	ldr	r3, [r4, #4]
 8010b5a:	6123      	str	r3, [r4, #16]
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b62:	e7a7      	b.n	8010ab4 <_printf_i+0x118>
 8010b64:	6923      	ldr	r3, [r4, #16]
 8010b66:	462a      	mov	r2, r5
 8010b68:	4639      	mov	r1, r7
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	47c0      	blx	r8
 8010b6e:	3001      	adds	r0, #1
 8010b70:	d0aa      	beq.n	8010ac8 <_printf_i+0x12c>
 8010b72:	6823      	ldr	r3, [r4, #0]
 8010b74:	079b      	lsls	r3, r3, #30
 8010b76:	d413      	bmi.n	8010ba0 <_printf_i+0x204>
 8010b78:	68e0      	ldr	r0, [r4, #12]
 8010b7a:	9b03      	ldr	r3, [sp, #12]
 8010b7c:	4298      	cmp	r0, r3
 8010b7e:	bfb8      	it	lt
 8010b80:	4618      	movlt	r0, r3
 8010b82:	e7a3      	b.n	8010acc <_printf_i+0x130>
 8010b84:	2301      	movs	r3, #1
 8010b86:	464a      	mov	r2, r9
 8010b88:	4639      	mov	r1, r7
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	47c0      	blx	r8
 8010b8e:	3001      	adds	r0, #1
 8010b90:	d09a      	beq.n	8010ac8 <_printf_i+0x12c>
 8010b92:	3501      	adds	r5, #1
 8010b94:	68e3      	ldr	r3, [r4, #12]
 8010b96:	9a03      	ldr	r2, [sp, #12]
 8010b98:	1a9b      	subs	r3, r3, r2
 8010b9a:	42ab      	cmp	r3, r5
 8010b9c:	dcf2      	bgt.n	8010b84 <_printf_i+0x1e8>
 8010b9e:	e7eb      	b.n	8010b78 <_printf_i+0x1dc>
 8010ba0:	2500      	movs	r5, #0
 8010ba2:	f104 0919 	add.w	r9, r4, #25
 8010ba6:	e7f5      	b.n	8010b94 <_printf_i+0x1f8>
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1ac      	bne.n	8010b06 <_printf_i+0x16a>
 8010bac:	7803      	ldrb	r3, [r0, #0]
 8010bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bb6:	e76c      	b.n	8010a92 <_printf_i+0xf6>
 8010bb8:	080136d1 	.word	0x080136d1
 8010bbc:	080136e2 	.word	0x080136e2

08010bc0 <memcpy>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	1e43      	subs	r3, r0, #1
 8010bc4:	440a      	add	r2, r1
 8010bc6:	4291      	cmp	r1, r2
 8010bc8:	d100      	bne.n	8010bcc <memcpy+0xc>
 8010bca:	bd10      	pop	{r4, pc}
 8010bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bd4:	e7f7      	b.n	8010bc6 <memcpy+0x6>

08010bd6 <memmove>:
 8010bd6:	4288      	cmp	r0, r1
 8010bd8:	b510      	push	{r4, lr}
 8010bda:	eb01 0302 	add.w	r3, r1, r2
 8010bde:	d807      	bhi.n	8010bf0 <memmove+0x1a>
 8010be0:	1e42      	subs	r2, r0, #1
 8010be2:	4299      	cmp	r1, r3
 8010be4:	d00a      	beq.n	8010bfc <memmove+0x26>
 8010be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010bee:	e7f8      	b.n	8010be2 <memmove+0xc>
 8010bf0:	4283      	cmp	r3, r0
 8010bf2:	d9f5      	bls.n	8010be0 <memmove+0xa>
 8010bf4:	1881      	adds	r1, r0, r2
 8010bf6:	1ad2      	subs	r2, r2, r3
 8010bf8:	42d3      	cmn	r3, r2
 8010bfa:	d100      	bne.n	8010bfe <memmove+0x28>
 8010bfc:	bd10      	pop	{r4, pc}
 8010bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010c06:	e7f7      	b.n	8010bf8 <memmove+0x22>

08010c08 <_realloc_r>:
 8010c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0a:	4607      	mov	r7, r0
 8010c0c:	4614      	mov	r4, r2
 8010c0e:	460e      	mov	r6, r1
 8010c10:	b921      	cbnz	r1, 8010c1c <_realloc_r+0x14>
 8010c12:	4611      	mov	r1, r2
 8010c14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010c18:	f7ff bc64 	b.w	80104e4 <_malloc_r>
 8010c1c:	b922      	cbnz	r2, 8010c28 <_realloc_r+0x20>
 8010c1e:	f7ff fc13 	bl	8010448 <_free_r>
 8010c22:	4625      	mov	r5, r4
 8010c24:	4628      	mov	r0, r5
 8010c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c28:	f000 f814 	bl	8010c54 <_malloc_usable_size_r>
 8010c2c:	42a0      	cmp	r0, r4
 8010c2e:	d20f      	bcs.n	8010c50 <_realloc_r+0x48>
 8010c30:	4621      	mov	r1, r4
 8010c32:	4638      	mov	r0, r7
 8010c34:	f7ff fc56 	bl	80104e4 <_malloc_r>
 8010c38:	4605      	mov	r5, r0
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	d0f2      	beq.n	8010c24 <_realloc_r+0x1c>
 8010c3e:	4631      	mov	r1, r6
 8010c40:	4622      	mov	r2, r4
 8010c42:	f7ff ffbd 	bl	8010bc0 <memcpy>
 8010c46:	4631      	mov	r1, r6
 8010c48:	4638      	mov	r0, r7
 8010c4a:	f7ff fbfd 	bl	8010448 <_free_r>
 8010c4e:	e7e9      	b.n	8010c24 <_realloc_r+0x1c>
 8010c50:	4635      	mov	r5, r6
 8010c52:	e7e7      	b.n	8010c24 <_realloc_r+0x1c>

08010c54 <_malloc_usable_size_r>:
 8010c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c58:	1f18      	subs	r0, r3, #4
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	bfbc      	itt	lt
 8010c5e:	580b      	ldrlt	r3, [r1, r0]
 8010c60:	18c0      	addlt	r0, r0, r3
 8010c62:	4770      	bx	lr
 8010c64:	0000      	movs	r0, r0
	...

08010c68 <cos>:
 8010c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c6a:	ec51 0b10 	vmov	r0, r1, d0
 8010c6e:	4a1e      	ldr	r2, [pc, #120]	; (8010ce8 <cos+0x80>)
 8010c70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c74:	4293      	cmp	r3, r2
 8010c76:	dc06      	bgt.n	8010c86 <cos+0x1e>
 8010c78:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8010ce0 <cos+0x78>
 8010c7c:	f001 fd60 	bl	8012740 <__kernel_cos>
 8010c80:	ec51 0b10 	vmov	r0, r1, d0
 8010c84:	e007      	b.n	8010c96 <cos+0x2e>
 8010c86:	4a19      	ldr	r2, [pc, #100]	; (8010cec <cos+0x84>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	dd09      	ble.n	8010ca0 <cos+0x38>
 8010c8c:	ee10 2a10 	vmov	r2, s0
 8010c90:	460b      	mov	r3, r1
 8010c92:	f7ef faf9 	bl	8000288 <__aeabi_dsub>
 8010c96:	ec41 0b10 	vmov	d0, r0, r1
 8010c9a:	b005      	add	sp, #20
 8010c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ca0:	4668      	mov	r0, sp
 8010ca2:	f001 f9fd 	bl	80120a0 <__ieee754_rem_pio2>
 8010ca6:	f000 0003 	and.w	r0, r0, #3
 8010caa:	2801      	cmp	r0, #1
 8010cac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010cb0:	ed9d 0b00 	vldr	d0, [sp]
 8010cb4:	d007      	beq.n	8010cc6 <cos+0x5e>
 8010cb6:	2802      	cmp	r0, #2
 8010cb8:	d00e      	beq.n	8010cd8 <cos+0x70>
 8010cba:	2800      	cmp	r0, #0
 8010cbc:	d0de      	beq.n	8010c7c <cos+0x14>
 8010cbe:	2001      	movs	r0, #1
 8010cc0:	f002 f946 	bl	8012f50 <__kernel_sin>
 8010cc4:	e7dc      	b.n	8010c80 <cos+0x18>
 8010cc6:	f002 f943 	bl	8012f50 <__kernel_sin>
 8010cca:	ec53 2b10 	vmov	r2, r3, d0
 8010cce:	ee10 0a10 	vmov	r0, s0
 8010cd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010cd6:	e7de      	b.n	8010c96 <cos+0x2e>
 8010cd8:	f001 fd32 	bl	8012740 <__kernel_cos>
 8010cdc:	e7f5      	b.n	8010cca <cos+0x62>
 8010cde:	bf00      	nop
	...
 8010ce8:	3fe921fb 	.word	0x3fe921fb
 8010cec:	7fefffff 	.word	0x7fefffff

08010cf0 <round>:
 8010cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cf2:	ec57 6b10 	vmov	r6, r7, d0
 8010cf6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8010cfa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8010cfe:	2c13      	cmp	r4, #19
 8010d00:	463b      	mov	r3, r7
 8010d02:	463d      	mov	r5, r7
 8010d04:	dc17      	bgt.n	8010d36 <round+0x46>
 8010d06:	2c00      	cmp	r4, #0
 8010d08:	da09      	bge.n	8010d1e <round+0x2e>
 8010d0a:	3401      	adds	r4, #1
 8010d0c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8010d10:	d103      	bne.n	8010d1a <round+0x2a>
 8010d12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010d16:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	e02c      	b.n	8010d78 <round+0x88>
 8010d1e:	4a18      	ldr	r2, [pc, #96]	; (8010d80 <round+0x90>)
 8010d20:	4122      	asrs	r2, r4
 8010d22:	4217      	tst	r7, r2
 8010d24:	d100      	bne.n	8010d28 <round+0x38>
 8010d26:	b19e      	cbz	r6, 8010d50 <round+0x60>
 8010d28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010d2c:	4123      	asrs	r3, r4
 8010d2e:	442b      	add	r3, r5
 8010d30:	ea23 0302 	bic.w	r3, r3, r2
 8010d34:	e7f1      	b.n	8010d1a <round+0x2a>
 8010d36:	2c33      	cmp	r4, #51	; 0x33
 8010d38:	dd0d      	ble.n	8010d56 <round+0x66>
 8010d3a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010d3e:	d107      	bne.n	8010d50 <round+0x60>
 8010d40:	4630      	mov	r0, r6
 8010d42:	4639      	mov	r1, r7
 8010d44:	ee10 2a10 	vmov	r2, s0
 8010d48:	f7ef faa0 	bl	800028c <__adddf3>
 8010d4c:	4606      	mov	r6, r0
 8010d4e:	460f      	mov	r7, r1
 8010d50:	ec47 6b10 	vmov	d0, r6, r7
 8010d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d56:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8010d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010d5e:	40d0      	lsrs	r0, r2
 8010d60:	4206      	tst	r6, r0
 8010d62:	d0f5      	beq.n	8010d50 <round+0x60>
 8010d64:	2201      	movs	r2, #1
 8010d66:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010d6a:	fa02 f404 	lsl.w	r4, r2, r4
 8010d6e:	1931      	adds	r1, r6, r4
 8010d70:	bf28      	it	cs
 8010d72:	189b      	addcs	r3, r3, r2
 8010d74:	ea21 0100 	bic.w	r1, r1, r0
 8010d78:	461f      	mov	r7, r3
 8010d7a:	460e      	mov	r6, r1
 8010d7c:	e7e8      	b.n	8010d50 <round+0x60>
 8010d7e:	bf00      	nop
 8010d80:	000fffff 	.word	0x000fffff
 8010d84:	00000000 	.word	0x00000000

08010d88 <sin>:
 8010d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d8a:	ec51 0b10 	vmov	r0, r1, d0
 8010d8e:	4a20      	ldr	r2, [pc, #128]	; (8010e10 <sin+0x88>)
 8010d90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d94:	4293      	cmp	r3, r2
 8010d96:	dc07      	bgt.n	8010da8 <sin+0x20>
 8010d98:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010e08 <sin+0x80>
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	f002 f8d7 	bl	8012f50 <__kernel_sin>
 8010da2:	ec51 0b10 	vmov	r0, r1, d0
 8010da6:	e007      	b.n	8010db8 <sin+0x30>
 8010da8:	4a1a      	ldr	r2, [pc, #104]	; (8010e14 <sin+0x8c>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	dd09      	ble.n	8010dc2 <sin+0x3a>
 8010dae:	ee10 2a10 	vmov	r2, s0
 8010db2:	460b      	mov	r3, r1
 8010db4:	f7ef fa68 	bl	8000288 <__aeabi_dsub>
 8010db8:	ec41 0b10 	vmov	d0, r0, r1
 8010dbc:	b005      	add	sp, #20
 8010dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8010dc2:	4668      	mov	r0, sp
 8010dc4:	f001 f96c 	bl	80120a0 <__ieee754_rem_pio2>
 8010dc8:	f000 0003 	and.w	r0, r0, #3
 8010dcc:	2801      	cmp	r0, #1
 8010dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dd2:	ed9d 0b00 	vldr	d0, [sp]
 8010dd6:	d004      	beq.n	8010de2 <sin+0x5a>
 8010dd8:	2802      	cmp	r0, #2
 8010dda:	d005      	beq.n	8010de8 <sin+0x60>
 8010ddc:	b970      	cbnz	r0, 8010dfc <sin+0x74>
 8010dde:	2001      	movs	r0, #1
 8010de0:	e7dd      	b.n	8010d9e <sin+0x16>
 8010de2:	f001 fcad 	bl	8012740 <__kernel_cos>
 8010de6:	e7dc      	b.n	8010da2 <sin+0x1a>
 8010de8:	2001      	movs	r0, #1
 8010dea:	f002 f8b1 	bl	8012f50 <__kernel_sin>
 8010dee:	ec53 2b10 	vmov	r2, r3, d0
 8010df2:	ee10 0a10 	vmov	r0, s0
 8010df6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010dfa:	e7dd      	b.n	8010db8 <sin+0x30>
 8010dfc:	f001 fca0 	bl	8012740 <__kernel_cos>
 8010e00:	e7f5      	b.n	8010dee <sin+0x66>
 8010e02:	bf00      	nop
 8010e04:	f3af 8000 	nop.w
	...
 8010e10:	3fe921fb 	.word	0x3fe921fb
 8010e14:	7fefffff 	.word	0x7fefffff

08010e18 <asin>:
 8010e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e1a:	ed2d 8b02 	vpush	{d8}
 8010e1e:	4e26      	ldr	r6, [pc, #152]	; (8010eb8 <asin+0xa0>)
 8010e20:	b08b      	sub	sp, #44	; 0x2c
 8010e22:	ec55 4b10 	vmov	r4, r5, d0
 8010e26:	f000 fa1b 	bl	8011260 <__ieee754_asin>
 8010e2a:	f996 3000 	ldrsb.w	r3, [r6]
 8010e2e:	eeb0 8a40 	vmov.f32	s16, s0
 8010e32:	eef0 8a60 	vmov.f32	s17, s1
 8010e36:	3301      	adds	r3, #1
 8010e38:	d036      	beq.n	8010ea8 <asin+0x90>
 8010e3a:	4622      	mov	r2, r4
 8010e3c:	462b      	mov	r3, r5
 8010e3e:	4620      	mov	r0, r4
 8010e40:	4629      	mov	r1, r5
 8010e42:	f7ef fe73 	bl	8000b2c <__aeabi_dcmpun>
 8010e46:	4607      	mov	r7, r0
 8010e48:	bb70      	cbnz	r0, 8010ea8 <asin+0x90>
 8010e4a:	ec45 4b10 	vmov	d0, r4, r5
 8010e4e:	f002 f939 	bl	80130c4 <fabs>
 8010e52:	2200      	movs	r2, #0
 8010e54:	4b19      	ldr	r3, [pc, #100]	; (8010ebc <asin+0xa4>)
 8010e56:	ec51 0b10 	vmov	r0, r1, d0
 8010e5a:	f7ef fe5d 	bl	8000b18 <__aeabi_dcmpgt>
 8010e5e:	b318      	cbz	r0, 8010ea8 <asin+0x90>
 8010e60:	2301      	movs	r3, #1
 8010e62:	9300      	str	r3, [sp, #0]
 8010e64:	4816      	ldr	r0, [pc, #88]	; (8010ec0 <asin+0xa8>)
 8010e66:	4b17      	ldr	r3, [pc, #92]	; (8010ec4 <asin+0xac>)
 8010e68:	9301      	str	r3, [sp, #4]
 8010e6a:	9708      	str	r7, [sp, #32]
 8010e6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010e70:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010e74:	f002 f9c0 	bl	80131f8 <nan>
 8010e78:	f996 3000 	ldrsb.w	r3, [r6]
 8010e7c:	2b02      	cmp	r3, #2
 8010e7e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8010e82:	d104      	bne.n	8010e8e <asin+0x76>
 8010e84:	f7ff fa9e 	bl	80103c4 <__errno>
 8010e88:	2321      	movs	r3, #33	; 0x21
 8010e8a:	6003      	str	r3, [r0, #0]
 8010e8c:	e004      	b.n	8010e98 <asin+0x80>
 8010e8e:	4668      	mov	r0, sp
 8010e90:	f002 f9ae 	bl	80131f0 <matherr>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	d0f5      	beq.n	8010e84 <asin+0x6c>
 8010e98:	9b08      	ldr	r3, [sp, #32]
 8010e9a:	b11b      	cbz	r3, 8010ea4 <asin+0x8c>
 8010e9c:	f7ff fa92 	bl	80103c4 <__errno>
 8010ea0:	9b08      	ldr	r3, [sp, #32]
 8010ea2:	6003      	str	r3, [r0, #0]
 8010ea4:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8010eac:	eef0 0a68 	vmov.f32	s1, s17
 8010eb0:	b00b      	add	sp, #44	; 0x2c
 8010eb2:	ecbd 8b02 	vpop	{d8}
 8010eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eb8:	20000230 	.word	0x20000230
 8010ebc:	3ff00000 	.word	0x3ff00000
 8010ec0:	080136c5 	.word	0x080136c5
 8010ec4:	080136f3 	.word	0x080136f3

08010ec8 <pow>:
 8010ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ecc:	ed2d 8b04 	vpush	{d8-d9}
 8010ed0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80111a4 <pow+0x2dc>
 8010ed4:	b08d      	sub	sp, #52	; 0x34
 8010ed6:	ec57 6b10 	vmov	r6, r7, d0
 8010eda:	ec55 4b11 	vmov	r4, r5, d1
 8010ede:	f000 fbcf 	bl	8011680 <__ieee754_pow>
 8010ee2:	f999 3000 	ldrsb.w	r3, [r9]
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	eeb0 8a40 	vmov.f32	s16, s0
 8010eee:	eef0 8a60 	vmov.f32	s17, s1
 8010ef2:	46c8      	mov	r8, r9
 8010ef4:	d05f      	beq.n	8010fb6 <pow+0xee>
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	462b      	mov	r3, r5
 8010efa:	4620      	mov	r0, r4
 8010efc:	4629      	mov	r1, r5
 8010efe:	f7ef fe15 	bl	8000b2c <__aeabi_dcmpun>
 8010f02:	4683      	mov	fp, r0
 8010f04:	2800      	cmp	r0, #0
 8010f06:	d156      	bne.n	8010fb6 <pow+0xee>
 8010f08:	4632      	mov	r2, r6
 8010f0a:	463b      	mov	r3, r7
 8010f0c:	4630      	mov	r0, r6
 8010f0e:	4639      	mov	r1, r7
 8010f10:	f7ef fe0c 	bl	8000b2c <__aeabi_dcmpun>
 8010f14:	9001      	str	r0, [sp, #4]
 8010f16:	b1e8      	cbz	r0, 8010f54 <pow+0x8c>
 8010f18:	2200      	movs	r2, #0
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	4629      	mov	r1, r5
 8010f20:	f7ef fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d046      	beq.n	8010fb6 <pow+0xee>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	9302      	str	r3, [sp, #8]
 8010f2c:	4b96      	ldr	r3, [pc, #600]	; (8011188 <pow+0x2c0>)
 8010f2e:	9303      	str	r3, [sp, #12]
 8010f30:	4b96      	ldr	r3, [pc, #600]	; (801118c <pow+0x2c4>)
 8010f32:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010f36:	2200      	movs	r2, #0
 8010f38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f3c:	9b00      	ldr	r3, [sp, #0]
 8010f3e:	2b02      	cmp	r3, #2
 8010f40:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f44:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f48:	d033      	beq.n	8010fb2 <pow+0xea>
 8010f4a:	a802      	add	r0, sp, #8
 8010f4c:	f002 f950 	bl	80131f0 <matherr>
 8010f50:	bb48      	cbnz	r0, 8010fa6 <pow+0xde>
 8010f52:	e05d      	b.n	8011010 <pow+0x148>
 8010f54:	f04f 0a00 	mov.w	sl, #0
 8010f58:	f04f 0b00 	mov.w	fp, #0
 8010f5c:	4652      	mov	r2, sl
 8010f5e:	465b      	mov	r3, fp
 8010f60:	4630      	mov	r0, r6
 8010f62:	4639      	mov	r1, r7
 8010f64:	f7ef fdb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f68:	ec4b ab19 	vmov	d9, sl, fp
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d054      	beq.n	801101a <pow+0x152>
 8010f70:	4652      	mov	r2, sl
 8010f72:	465b      	mov	r3, fp
 8010f74:	4620      	mov	r0, r4
 8010f76:	4629      	mov	r1, r5
 8010f78:	f7ef fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f7c:	4680      	mov	r8, r0
 8010f7e:	b318      	cbz	r0, 8010fc8 <pow+0x100>
 8010f80:	2301      	movs	r3, #1
 8010f82:	9302      	str	r3, [sp, #8]
 8010f84:	4b80      	ldr	r3, [pc, #512]	; (8011188 <pow+0x2c0>)
 8010f86:	9303      	str	r3, [sp, #12]
 8010f88:	9b01      	ldr	r3, [sp, #4]
 8010f8a:	930a      	str	r3, [sp, #40]	; 0x28
 8010f8c:	9b00      	ldr	r3, [sp, #0]
 8010f8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f92:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f96:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d0d5      	beq.n	8010f4a <pow+0x82>
 8010f9e:	4b7b      	ldr	r3, [pc, #492]	; (801118c <pow+0x2c4>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa8:	b11b      	cbz	r3, 8010fb2 <pow+0xea>
 8010faa:	f7ff fa0b 	bl	80103c4 <__errno>
 8010fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fb0:	6003      	str	r3, [r0, #0]
 8010fb2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8010fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8010fba:	eef0 0a68 	vmov.f32	s1, s17
 8010fbe:	b00d      	add	sp, #52	; 0x34
 8010fc0:	ecbd 8b04 	vpop	{d8-d9}
 8010fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc8:	ec45 4b10 	vmov	d0, r4, r5
 8010fcc:	f002 f883 	bl	80130d6 <finite>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	d0f0      	beq.n	8010fb6 <pow+0xee>
 8010fd4:	4652      	mov	r2, sl
 8010fd6:	465b      	mov	r3, fp
 8010fd8:	4620      	mov	r0, r4
 8010fda:	4629      	mov	r1, r5
 8010fdc:	f7ef fd7e 	bl	8000adc <__aeabi_dcmplt>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d0e8      	beq.n	8010fb6 <pow+0xee>
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	9302      	str	r3, [sp, #8]
 8010fe8:	4b67      	ldr	r3, [pc, #412]	; (8011188 <pow+0x2c0>)
 8010fea:	9303      	str	r3, [sp, #12]
 8010fec:	f999 3000 	ldrsb.w	r3, [r9]
 8010ff0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010ff4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010ff8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010ffc:	b913      	cbnz	r3, 8011004 <pow+0x13c>
 8010ffe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011002:	e7a2      	b.n	8010f4a <pow+0x82>
 8011004:	4962      	ldr	r1, [pc, #392]	; (8011190 <pow+0x2c8>)
 8011006:	2000      	movs	r0, #0
 8011008:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801100c:	2b02      	cmp	r3, #2
 801100e:	d19c      	bne.n	8010f4a <pow+0x82>
 8011010:	f7ff f9d8 	bl	80103c4 <__errno>
 8011014:	2321      	movs	r3, #33	; 0x21
 8011016:	6003      	str	r3, [r0, #0]
 8011018:	e7c5      	b.n	8010fa6 <pow+0xde>
 801101a:	eeb0 0a48 	vmov.f32	s0, s16
 801101e:	eef0 0a68 	vmov.f32	s1, s17
 8011022:	f002 f858 	bl	80130d6 <finite>
 8011026:	9000      	str	r0, [sp, #0]
 8011028:	2800      	cmp	r0, #0
 801102a:	f040 8081 	bne.w	8011130 <pow+0x268>
 801102e:	ec47 6b10 	vmov	d0, r6, r7
 8011032:	f002 f850 	bl	80130d6 <finite>
 8011036:	2800      	cmp	r0, #0
 8011038:	d07a      	beq.n	8011130 <pow+0x268>
 801103a:	ec45 4b10 	vmov	d0, r4, r5
 801103e:	f002 f84a 	bl	80130d6 <finite>
 8011042:	2800      	cmp	r0, #0
 8011044:	d074      	beq.n	8011130 <pow+0x268>
 8011046:	ec53 2b18 	vmov	r2, r3, d8
 801104a:	ee18 0a10 	vmov	r0, s16
 801104e:	4619      	mov	r1, r3
 8011050:	f7ef fd6c 	bl	8000b2c <__aeabi_dcmpun>
 8011054:	f999 9000 	ldrsb.w	r9, [r9]
 8011058:	4b4b      	ldr	r3, [pc, #300]	; (8011188 <pow+0x2c0>)
 801105a:	b1b0      	cbz	r0, 801108a <pow+0x1c2>
 801105c:	2201      	movs	r2, #1
 801105e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011062:	9b00      	ldr	r3, [sp, #0]
 8011064:	930a      	str	r3, [sp, #40]	; 0x28
 8011066:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801106a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801106e:	f1b9 0f00 	cmp.w	r9, #0
 8011072:	d0c4      	beq.n	8010ffe <pow+0x136>
 8011074:	4652      	mov	r2, sl
 8011076:	465b      	mov	r3, fp
 8011078:	4650      	mov	r0, sl
 801107a:	4659      	mov	r1, fp
 801107c:	f7ef fbe6 	bl	800084c <__aeabi_ddiv>
 8011080:	f1b9 0f02 	cmp.w	r9, #2
 8011084:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011088:	e7c1      	b.n	801100e <pow+0x146>
 801108a:	2203      	movs	r2, #3
 801108c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011090:	900a      	str	r0, [sp, #40]	; 0x28
 8011092:	4629      	mov	r1, r5
 8011094:	4620      	mov	r0, r4
 8011096:	2200      	movs	r2, #0
 8011098:	4b3e      	ldr	r3, [pc, #248]	; (8011194 <pow+0x2cc>)
 801109a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801109e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80110a2:	f7ef faa9 	bl	80005f8 <__aeabi_dmul>
 80110a6:	4604      	mov	r4, r0
 80110a8:	460d      	mov	r5, r1
 80110aa:	f1b9 0f00 	cmp.w	r9, #0
 80110ae:	d124      	bne.n	80110fa <pow+0x232>
 80110b0:	4b39      	ldr	r3, [pc, #228]	; (8011198 <pow+0x2d0>)
 80110b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80110b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110ba:	4630      	mov	r0, r6
 80110bc:	4652      	mov	r2, sl
 80110be:	465b      	mov	r3, fp
 80110c0:	4639      	mov	r1, r7
 80110c2:	f7ef fd0b 	bl	8000adc <__aeabi_dcmplt>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	d056      	beq.n	8011178 <pow+0x2b0>
 80110ca:	ec45 4b10 	vmov	d0, r4, r5
 80110ce:	f002 f89b 	bl	8013208 <rint>
 80110d2:	4622      	mov	r2, r4
 80110d4:	462b      	mov	r3, r5
 80110d6:	ec51 0b10 	vmov	r0, r1, d0
 80110da:	f7ef fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80110de:	b920      	cbnz	r0, 80110ea <pow+0x222>
 80110e0:	4b2e      	ldr	r3, [pc, #184]	; (801119c <pow+0x2d4>)
 80110e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80110e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80110ea:	f998 3000 	ldrsb.w	r3, [r8]
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	d142      	bne.n	8011178 <pow+0x2b0>
 80110f2:	f7ff f967 	bl	80103c4 <__errno>
 80110f6:	2322      	movs	r3, #34	; 0x22
 80110f8:	e78d      	b.n	8011016 <pow+0x14e>
 80110fa:	4b29      	ldr	r3, [pc, #164]	; (80111a0 <pow+0x2d8>)
 80110fc:	2200      	movs	r2, #0
 80110fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011102:	4630      	mov	r0, r6
 8011104:	4652      	mov	r2, sl
 8011106:	465b      	mov	r3, fp
 8011108:	4639      	mov	r1, r7
 801110a:	f7ef fce7 	bl	8000adc <__aeabi_dcmplt>
 801110e:	2800      	cmp	r0, #0
 8011110:	d0eb      	beq.n	80110ea <pow+0x222>
 8011112:	ec45 4b10 	vmov	d0, r4, r5
 8011116:	f002 f877 	bl	8013208 <rint>
 801111a:	4622      	mov	r2, r4
 801111c:	462b      	mov	r3, r5
 801111e:	ec51 0b10 	vmov	r0, r1, d0
 8011122:	f7ef fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011126:	2800      	cmp	r0, #0
 8011128:	d1df      	bne.n	80110ea <pow+0x222>
 801112a:	2200      	movs	r2, #0
 801112c:	4b18      	ldr	r3, [pc, #96]	; (8011190 <pow+0x2c8>)
 801112e:	e7da      	b.n	80110e6 <pow+0x21e>
 8011130:	2200      	movs	r2, #0
 8011132:	2300      	movs	r3, #0
 8011134:	ec51 0b18 	vmov	r0, r1, d8
 8011138:	f7ef fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 801113c:	2800      	cmp	r0, #0
 801113e:	f43f af3a 	beq.w	8010fb6 <pow+0xee>
 8011142:	ec47 6b10 	vmov	d0, r6, r7
 8011146:	f001 ffc6 	bl	80130d6 <finite>
 801114a:	2800      	cmp	r0, #0
 801114c:	f43f af33 	beq.w	8010fb6 <pow+0xee>
 8011150:	ec45 4b10 	vmov	d0, r4, r5
 8011154:	f001 ffbf 	bl	80130d6 <finite>
 8011158:	2800      	cmp	r0, #0
 801115a:	f43f af2c 	beq.w	8010fb6 <pow+0xee>
 801115e:	2304      	movs	r3, #4
 8011160:	9302      	str	r3, [sp, #8]
 8011162:	4b09      	ldr	r3, [pc, #36]	; (8011188 <pow+0x2c0>)
 8011164:	9303      	str	r3, [sp, #12]
 8011166:	2300      	movs	r3, #0
 8011168:	930a      	str	r3, [sp, #40]	; 0x28
 801116a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801116e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011172:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011176:	e7b8      	b.n	80110ea <pow+0x222>
 8011178:	a802      	add	r0, sp, #8
 801117a:	f002 f839 	bl	80131f0 <matherr>
 801117e:	2800      	cmp	r0, #0
 8011180:	f47f af11 	bne.w	8010fa6 <pow+0xde>
 8011184:	e7b5      	b.n	80110f2 <pow+0x22a>
 8011186:	bf00      	nop
 8011188:	080136f8 	.word	0x080136f8
 801118c:	3ff00000 	.word	0x3ff00000
 8011190:	fff00000 	.word	0xfff00000
 8011194:	3fe00000 	.word	0x3fe00000
 8011198:	47efffff 	.word	0x47efffff
 801119c:	c7efffff 	.word	0xc7efffff
 80111a0:	7ff00000 	.word	0x7ff00000
 80111a4:	20000230 	.word	0x20000230

080111a8 <sqrt>:
 80111a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111ac:	ed2d 8b02 	vpush	{d8}
 80111b0:	b08b      	sub	sp, #44	; 0x2c
 80111b2:	ec55 4b10 	vmov	r4, r5, d0
 80111b6:	f001 f965 	bl	8012484 <__ieee754_sqrt>
 80111ba:	4b26      	ldr	r3, [pc, #152]	; (8011254 <sqrt+0xac>)
 80111bc:	eeb0 8a40 	vmov.f32	s16, s0
 80111c0:	eef0 8a60 	vmov.f32	s17, s1
 80111c4:	f993 6000 	ldrsb.w	r6, [r3]
 80111c8:	1c73      	adds	r3, r6, #1
 80111ca:	d02a      	beq.n	8011222 <sqrt+0x7a>
 80111cc:	4622      	mov	r2, r4
 80111ce:	462b      	mov	r3, r5
 80111d0:	4620      	mov	r0, r4
 80111d2:	4629      	mov	r1, r5
 80111d4:	f7ef fcaa 	bl	8000b2c <__aeabi_dcmpun>
 80111d8:	4607      	mov	r7, r0
 80111da:	bb10      	cbnz	r0, 8011222 <sqrt+0x7a>
 80111dc:	f04f 0800 	mov.w	r8, #0
 80111e0:	f04f 0900 	mov.w	r9, #0
 80111e4:	4642      	mov	r2, r8
 80111e6:	464b      	mov	r3, r9
 80111e8:	4620      	mov	r0, r4
 80111ea:	4629      	mov	r1, r5
 80111ec:	f7ef fc76 	bl	8000adc <__aeabi_dcmplt>
 80111f0:	b1b8      	cbz	r0, 8011222 <sqrt+0x7a>
 80111f2:	2301      	movs	r3, #1
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	4b18      	ldr	r3, [pc, #96]	; (8011258 <sqrt+0xb0>)
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	9708      	str	r7, [sp, #32]
 80111fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011200:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011204:	b9b6      	cbnz	r6, 8011234 <sqrt+0x8c>
 8011206:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801120a:	4668      	mov	r0, sp
 801120c:	f001 fff0 	bl	80131f0 <matherr>
 8011210:	b1d0      	cbz	r0, 8011248 <sqrt+0xa0>
 8011212:	9b08      	ldr	r3, [sp, #32]
 8011214:	b11b      	cbz	r3, 801121e <sqrt+0x76>
 8011216:	f7ff f8d5 	bl	80103c4 <__errno>
 801121a:	9b08      	ldr	r3, [sp, #32]
 801121c:	6003      	str	r3, [r0, #0]
 801121e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011222:	eeb0 0a48 	vmov.f32	s0, s16
 8011226:	eef0 0a68 	vmov.f32	s1, s17
 801122a:	b00b      	add	sp, #44	; 0x2c
 801122c:	ecbd 8b02 	vpop	{d8}
 8011230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011234:	4642      	mov	r2, r8
 8011236:	464b      	mov	r3, r9
 8011238:	4640      	mov	r0, r8
 801123a:	4649      	mov	r1, r9
 801123c:	f7ef fb06 	bl	800084c <__aeabi_ddiv>
 8011240:	2e02      	cmp	r6, #2
 8011242:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011246:	d1e0      	bne.n	801120a <sqrt+0x62>
 8011248:	f7ff f8bc 	bl	80103c4 <__errno>
 801124c:	2321      	movs	r3, #33	; 0x21
 801124e:	6003      	str	r3, [r0, #0]
 8011250:	e7df      	b.n	8011212 <sqrt+0x6a>
 8011252:	bf00      	nop
 8011254:	20000230 	.word	0x20000230
 8011258:	080136fc 	.word	0x080136fc

0801125c <atan2f>:
 801125c:	f001 b9c2 	b.w	80125e4 <__ieee754_atan2f>

08011260 <__ieee754_asin>:
 8011260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011264:	ec55 4b10 	vmov	r4, r5, d0
 8011268:	4bcb      	ldr	r3, [pc, #812]	; (8011598 <__ieee754_asin+0x338>)
 801126a:	b087      	sub	sp, #28
 801126c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8011270:	429f      	cmp	r7, r3
 8011272:	9501      	str	r5, [sp, #4]
 8011274:	dd31      	ble.n	80112da <__ieee754_asin+0x7a>
 8011276:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801127a:	ee10 3a10 	vmov	r3, s0
 801127e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8011282:	433b      	orrs	r3, r7
 8011284:	d117      	bne.n	80112b6 <__ieee754_asin+0x56>
 8011286:	a3aa      	add	r3, pc, #680	; (adr r3, 8011530 <__ieee754_asin+0x2d0>)
 8011288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128c:	ee10 0a10 	vmov	r0, s0
 8011290:	4629      	mov	r1, r5
 8011292:	f7ef f9b1 	bl	80005f8 <__aeabi_dmul>
 8011296:	a3a8      	add	r3, pc, #672	; (adr r3, 8011538 <__ieee754_asin+0x2d8>)
 8011298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129c:	4606      	mov	r6, r0
 801129e:	460f      	mov	r7, r1
 80112a0:	4620      	mov	r0, r4
 80112a2:	4629      	mov	r1, r5
 80112a4:	f7ef f9a8 	bl	80005f8 <__aeabi_dmul>
 80112a8:	4602      	mov	r2, r0
 80112aa:	460b      	mov	r3, r1
 80112ac:	4630      	mov	r0, r6
 80112ae:	4639      	mov	r1, r7
 80112b0:	f7ee ffec 	bl	800028c <__adddf3>
 80112b4:	e00a      	b.n	80112cc <__ieee754_asin+0x6c>
 80112b6:	ee10 2a10 	vmov	r2, s0
 80112ba:	462b      	mov	r3, r5
 80112bc:	4620      	mov	r0, r4
 80112be:	4629      	mov	r1, r5
 80112c0:	f7ee ffe2 	bl	8000288 <__aeabi_dsub>
 80112c4:	4602      	mov	r2, r0
 80112c6:	460b      	mov	r3, r1
 80112c8:	f7ef fac0 	bl	800084c <__aeabi_ddiv>
 80112cc:	4604      	mov	r4, r0
 80112ce:	460d      	mov	r5, r1
 80112d0:	ec45 4b10 	vmov	d0, r4, r5
 80112d4:	b007      	add	sp, #28
 80112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112da:	4bb0      	ldr	r3, [pc, #704]	; (801159c <__ieee754_asin+0x33c>)
 80112dc:	429f      	cmp	r7, r3
 80112de:	dc11      	bgt.n	8011304 <__ieee754_asin+0xa4>
 80112e0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80112e4:	f280 80ae 	bge.w	8011444 <__ieee754_asin+0x1e4>
 80112e8:	a395      	add	r3, pc, #596	; (adr r3, 8011540 <__ieee754_asin+0x2e0>)
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	ee10 0a10 	vmov	r0, s0
 80112f2:	4629      	mov	r1, r5
 80112f4:	f7ee ffca 	bl	800028c <__adddf3>
 80112f8:	2200      	movs	r2, #0
 80112fa:	4ba9      	ldr	r3, [pc, #676]	; (80115a0 <__ieee754_asin+0x340>)
 80112fc:	f7ef fc0c 	bl	8000b18 <__aeabi_dcmpgt>
 8011300:	2800      	cmp	r0, #0
 8011302:	d1e5      	bne.n	80112d0 <__ieee754_asin+0x70>
 8011304:	ec45 4b10 	vmov	d0, r4, r5
 8011308:	f001 fedc 	bl	80130c4 <fabs>
 801130c:	2000      	movs	r0, #0
 801130e:	ec53 2b10 	vmov	r2, r3, d0
 8011312:	49a3      	ldr	r1, [pc, #652]	; (80115a0 <__ieee754_asin+0x340>)
 8011314:	f7ee ffb8 	bl	8000288 <__aeabi_dsub>
 8011318:	2200      	movs	r2, #0
 801131a:	4ba2      	ldr	r3, [pc, #648]	; (80115a4 <__ieee754_asin+0x344>)
 801131c:	f7ef f96c 	bl	80005f8 <__aeabi_dmul>
 8011320:	a389      	add	r3, pc, #548	; (adr r3, 8011548 <__ieee754_asin+0x2e8>)
 8011322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011326:	4604      	mov	r4, r0
 8011328:	460d      	mov	r5, r1
 801132a:	f7ef f965 	bl	80005f8 <__aeabi_dmul>
 801132e:	a388      	add	r3, pc, #544	; (adr r3, 8011550 <__ieee754_asin+0x2f0>)
 8011330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011334:	f7ee ffaa 	bl	800028c <__adddf3>
 8011338:	4622      	mov	r2, r4
 801133a:	462b      	mov	r3, r5
 801133c:	f7ef f95c 	bl	80005f8 <__aeabi_dmul>
 8011340:	a385      	add	r3, pc, #532	; (adr r3, 8011558 <__ieee754_asin+0x2f8>)
 8011342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011346:	f7ee ff9f 	bl	8000288 <__aeabi_dsub>
 801134a:	4622      	mov	r2, r4
 801134c:	462b      	mov	r3, r5
 801134e:	f7ef f953 	bl	80005f8 <__aeabi_dmul>
 8011352:	a383      	add	r3, pc, #524	; (adr r3, 8011560 <__ieee754_asin+0x300>)
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	f7ee ff98 	bl	800028c <__adddf3>
 801135c:	4622      	mov	r2, r4
 801135e:	462b      	mov	r3, r5
 8011360:	f7ef f94a 	bl	80005f8 <__aeabi_dmul>
 8011364:	a380      	add	r3, pc, #512	; (adr r3, 8011568 <__ieee754_asin+0x308>)
 8011366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136a:	f7ee ff8d 	bl	8000288 <__aeabi_dsub>
 801136e:	4622      	mov	r2, r4
 8011370:	462b      	mov	r3, r5
 8011372:	f7ef f941 	bl	80005f8 <__aeabi_dmul>
 8011376:	a37e      	add	r3, pc, #504	; (adr r3, 8011570 <__ieee754_asin+0x310>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	f7ee ff86 	bl	800028c <__adddf3>
 8011380:	4622      	mov	r2, r4
 8011382:	462b      	mov	r3, r5
 8011384:	f7ef f938 	bl	80005f8 <__aeabi_dmul>
 8011388:	a37b      	add	r3, pc, #492	; (adr r3, 8011578 <__ieee754_asin+0x318>)
 801138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138e:	4680      	mov	r8, r0
 8011390:	4689      	mov	r9, r1
 8011392:	4620      	mov	r0, r4
 8011394:	4629      	mov	r1, r5
 8011396:	f7ef f92f 	bl	80005f8 <__aeabi_dmul>
 801139a:	a379      	add	r3, pc, #484	; (adr r3, 8011580 <__ieee754_asin+0x320>)
 801139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a0:	f7ee ff72 	bl	8000288 <__aeabi_dsub>
 80113a4:	4622      	mov	r2, r4
 80113a6:	462b      	mov	r3, r5
 80113a8:	f7ef f926 	bl	80005f8 <__aeabi_dmul>
 80113ac:	a376      	add	r3, pc, #472	; (adr r3, 8011588 <__ieee754_asin+0x328>)
 80113ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b2:	f7ee ff6b 	bl	800028c <__adddf3>
 80113b6:	4622      	mov	r2, r4
 80113b8:	462b      	mov	r3, r5
 80113ba:	f7ef f91d 	bl	80005f8 <__aeabi_dmul>
 80113be:	a374      	add	r3, pc, #464	; (adr r3, 8011590 <__ieee754_asin+0x330>)
 80113c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c4:	f7ee ff60 	bl	8000288 <__aeabi_dsub>
 80113c8:	4622      	mov	r2, r4
 80113ca:	462b      	mov	r3, r5
 80113cc:	f7ef f914 	bl	80005f8 <__aeabi_dmul>
 80113d0:	4b73      	ldr	r3, [pc, #460]	; (80115a0 <__ieee754_asin+0x340>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	f7ee ff5a 	bl	800028c <__adddf3>
 80113d8:	ec45 4b10 	vmov	d0, r4, r5
 80113dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80113e0:	f001 f850 	bl	8012484 <__ieee754_sqrt>
 80113e4:	4b70      	ldr	r3, [pc, #448]	; (80115a8 <__ieee754_asin+0x348>)
 80113e6:	429f      	cmp	r7, r3
 80113e8:	ec5b ab10 	vmov	sl, fp, d0
 80113ec:	f340 80de 	ble.w	80115ac <__ieee754_asin+0x34c>
 80113f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113f4:	4640      	mov	r0, r8
 80113f6:	4649      	mov	r1, r9
 80113f8:	f7ef fa28 	bl	800084c <__aeabi_ddiv>
 80113fc:	4652      	mov	r2, sl
 80113fe:	465b      	mov	r3, fp
 8011400:	f7ef f8fa 	bl	80005f8 <__aeabi_dmul>
 8011404:	4652      	mov	r2, sl
 8011406:	465b      	mov	r3, fp
 8011408:	f7ee ff40 	bl	800028c <__adddf3>
 801140c:	4602      	mov	r2, r0
 801140e:	460b      	mov	r3, r1
 8011410:	f7ee ff3c 	bl	800028c <__adddf3>
 8011414:	a348      	add	r3, pc, #288	; (adr r3, 8011538 <__ieee754_asin+0x2d8>)
 8011416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141a:	f7ee ff35 	bl	8000288 <__aeabi_dsub>
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	a143      	add	r1, pc, #268	; (adr r1, 8011530 <__ieee754_asin+0x2d0>)
 8011424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011428:	f7ee ff2e 	bl	8000288 <__aeabi_dsub>
 801142c:	9b01      	ldr	r3, [sp, #4]
 801142e:	2b00      	cmp	r3, #0
 8011430:	bfdc      	itt	le
 8011432:	4602      	movle	r2, r0
 8011434:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8011438:	4604      	mov	r4, r0
 801143a:	460d      	mov	r5, r1
 801143c:	bfdc      	itt	le
 801143e:	4614      	movle	r4, r2
 8011440:	461d      	movle	r5, r3
 8011442:	e745      	b.n	80112d0 <__ieee754_asin+0x70>
 8011444:	ee10 2a10 	vmov	r2, s0
 8011448:	ee10 0a10 	vmov	r0, s0
 801144c:	462b      	mov	r3, r5
 801144e:	4629      	mov	r1, r5
 8011450:	f7ef f8d2 	bl	80005f8 <__aeabi_dmul>
 8011454:	a33c      	add	r3, pc, #240	; (adr r3, 8011548 <__ieee754_asin+0x2e8>)
 8011456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145a:	4606      	mov	r6, r0
 801145c:	460f      	mov	r7, r1
 801145e:	f7ef f8cb 	bl	80005f8 <__aeabi_dmul>
 8011462:	a33b      	add	r3, pc, #236	; (adr r3, 8011550 <__ieee754_asin+0x2f0>)
 8011464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011468:	f7ee ff10 	bl	800028c <__adddf3>
 801146c:	4632      	mov	r2, r6
 801146e:	463b      	mov	r3, r7
 8011470:	f7ef f8c2 	bl	80005f8 <__aeabi_dmul>
 8011474:	a338      	add	r3, pc, #224	; (adr r3, 8011558 <__ieee754_asin+0x2f8>)
 8011476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147a:	f7ee ff05 	bl	8000288 <__aeabi_dsub>
 801147e:	4632      	mov	r2, r6
 8011480:	463b      	mov	r3, r7
 8011482:	f7ef f8b9 	bl	80005f8 <__aeabi_dmul>
 8011486:	a336      	add	r3, pc, #216	; (adr r3, 8011560 <__ieee754_asin+0x300>)
 8011488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148c:	f7ee fefe 	bl	800028c <__adddf3>
 8011490:	4632      	mov	r2, r6
 8011492:	463b      	mov	r3, r7
 8011494:	f7ef f8b0 	bl	80005f8 <__aeabi_dmul>
 8011498:	a333      	add	r3, pc, #204	; (adr r3, 8011568 <__ieee754_asin+0x308>)
 801149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149e:	f7ee fef3 	bl	8000288 <__aeabi_dsub>
 80114a2:	4632      	mov	r2, r6
 80114a4:	463b      	mov	r3, r7
 80114a6:	f7ef f8a7 	bl	80005f8 <__aeabi_dmul>
 80114aa:	a331      	add	r3, pc, #196	; (adr r3, 8011570 <__ieee754_asin+0x310>)
 80114ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b0:	f7ee feec 	bl	800028c <__adddf3>
 80114b4:	4632      	mov	r2, r6
 80114b6:	463b      	mov	r3, r7
 80114b8:	f7ef f89e 	bl	80005f8 <__aeabi_dmul>
 80114bc:	a32e      	add	r3, pc, #184	; (adr r3, 8011578 <__ieee754_asin+0x318>)
 80114be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c2:	4680      	mov	r8, r0
 80114c4:	4689      	mov	r9, r1
 80114c6:	4630      	mov	r0, r6
 80114c8:	4639      	mov	r1, r7
 80114ca:	f7ef f895 	bl	80005f8 <__aeabi_dmul>
 80114ce:	a32c      	add	r3, pc, #176	; (adr r3, 8011580 <__ieee754_asin+0x320>)
 80114d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d4:	f7ee fed8 	bl	8000288 <__aeabi_dsub>
 80114d8:	4632      	mov	r2, r6
 80114da:	463b      	mov	r3, r7
 80114dc:	f7ef f88c 	bl	80005f8 <__aeabi_dmul>
 80114e0:	a329      	add	r3, pc, #164	; (adr r3, 8011588 <__ieee754_asin+0x328>)
 80114e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e6:	f7ee fed1 	bl	800028c <__adddf3>
 80114ea:	4632      	mov	r2, r6
 80114ec:	463b      	mov	r3, r7
 80114ee:	f7ef f883 	bl	80005f8 <__aeabi_dmul>
 80114f2:	a327      	add	r3, pc, #156	; (adr r3, 8011590 <__ieee754_asin+0x330>)
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	f7ee fec6 	bl	8000288 <__aeabi_dsub>
 80114fc:	4632      	mov	r2, r6
 80114fe:	463b      	mov	r3, r7
 8011500:	f7ef f87a 	bl	80005f8 <__aeabi_dmul>
 8011504:	2200      	movs	r2, #0
 8011506:	4b26      	ldr	r3, [pc, #152]	; (80115a0 <__ieee754_asin+0x340>)
 8011508:	f7ee fec0 	bl	800028c <__adddf3>
 801150c:	4602      	mov	r2, r0
 801150e:	460b      	mov	r3, r1
 8011510:	4640      	mov	r0, r8
 8011512:	4649      	mov	r1, r9
 8011514:	f7ef f99a 	bl	800084c <__aeabi_ddiv>
 8011518:	4622      	mov	r2, r4
 801151a:	462b      	mov	r3, r5
 801151c:	f7ef f86c 	bl	80005f8 <__aeabi_dmul>
 8011520:	4602      	mov	r2, r0
 8011522:	460b      	mov	r3, r1
 8011524:	4620      	mov	r0, r4
 8011526:	4629      	mov	r1, r5
 8011528:	e6c2      	b.n	80112b0 <__ieee754_asin+0x50>
 801152a:	bf00      	nop
 801152c:	f3af 8000 	nop.w
 8011530:	54442d18 	.word	0x54442d18
 8011534:	3ff921fb 	.word	0x3ff921fb
 8011538:	33145c07 	.word	0x33145c07
 801153c:	3c91a626 	.word	0x3c91a626
 8011540:	8800759c 	.word	0x8800759c
 8011544:	7e37e43c 	.word	0x7e37e43c
 8011548:	0dfdf709 	.word	0x0dfdf709
 801154c:	3f023de1 	.word	0x3f023de1
 8011550:	7501b288 	.word	0x7501b288
 8011554:	3f49efe0 	.word	0x3f49efe0
 8011558:	b5688f3b 	.word	0xb5688f3b
 801155c:	3fa48228 	.word	0x3fa48228
 8011560:	0e884455 	.word	0x0e884455
 8011564:	3fc9c155 	.word	0x3fc9c155
 8011568:	03eb6f7d 	.word	0x03eb6f7d
 801156c:	3fd4d612 	.word	0x3fd4d612
 8011570:	55555555 	.word	0x55555555
 8011574:	3fc55555 	.word	0x3fc55555
 8011578:	b12e9282 	.word	0xb12e9282
 801157c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011580:	1b8d0159 	.word	0x1b8d0159
 8011584:	3fe6066c 	.word	0x3fe6066c
 8011588:	9c598ac8 	.word	0x9c598ac8
 801158c:	40002ae5 	.word	0x40002ae5
 8011590:	1c8a2d4b 	.word	0x1c8a2d4b
 8011594:	40033a27 	.word	0x40033a27
 8011598:	3fefffff 	.word	0x3fefffff
 801159c:	3fdfffff 	.word	0x3fdfffff
 80115a0:	3ff00000 	.word	0x3ff00000
 80115a4:	3fe00000 	.word	0x3fe00000
 80115a8:	3fef3332 	.word	0x3fef3332
 80115ac:	ee10 2a10 	vmov	r2, s0
 80115b0:	ee10 0a10 	vmov	r0, s0
 80115b4:	465b      	mov	r3, fp
 80115b6:	4659      	mov	r1, fp
 80115b8:	f7ee fe68 	bl	800028c <__adddf3>
 80115bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80115c4:	4640      	mov	r0, r8
 80115c6:	4649      	mov	r1, r9
 80115c8:	f7ef f940 	bl	800084c <__aeabi_ddiv>
 80115cc:	4602      	mov	r2, r0
 80115ce:	460b      	mov	r3, r1
 80115d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115d4:	f7ef f810 	bl	80005f8 <__aeabi_dmul>
 80115d8:	2600      	movs	r6, #0
 80115da:	4680      	mov	r8, r0
 80115dc:	4689      	mov	r9, r1
 80115de:	4632      	mov	r2, r6
 80115e0:	465b      	mov	r3, fp
 80115e2:	4630      	mov	r0, r6
 80115e4:	4659      	mov	r1, fp
 80115e6:	f7ef f807 	bl	80005f8 <__aeabi_dmul>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	4620      	mov	r0, r4
 80115f0:	4629      	mov	r1, r5
 80115f2:	f7ee fe49 	bl	8000288 <__aeabi_dsub>
 80115f6:	4632      	mov	r2, r6
 80115f8:	4604      	mov	r4, r0
 80115fa:	460d      	mov	r5, r1
 80115fc:	465b      	mov	r3, fp
 80115fe:	4650      	mov	r0, sl
 8011600:	4659      	mov	r1, fp
 8011602:	f7ee fe43 	bl	800028c <__adddf3>
 8011606:	4602      	mov	r2, r0
 8011608:	460b      	mov	r3, r1
 801160a:	4620      	mov	r0, r4
 801160c:	4629      	mov	r1, r5
 801160e:	f7ef f91d 	bl	800084c <__aeabi_ddiv>
 8011612:	4602      	mov	r2, r0
 8011614:	460b      	mov	r3, r1
 8011616:	f7ee fe39 	bl	800028c <__adddf3>
 801161a:	4602      	mov	r2, r0
 801161c:	460b      	mov	r3, r1
 801161e:	a114      	add	r1, pc, #80	; (adr r1, 8011670 <__ieee754_asin+0x410>)
 8011620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011624:	f7ee fe30 	bl	8000288 <__aeabi_dsub>
 8011628:	4602      	mov	r2, r0
 801162a:	460b      	mov	r3, r1
 801162c:	4640      	mov	r0, r8
 801162e:	4649      	mov	r1, r9
 8011630:	f7ee fe2a 	bl	8000288 <__aeabi_dsub>
 8011634:	465f      	mov	r7, fp
 8011636:	4604      	mov	r4, r0
 8011638:	460d      	mov	r5, r1
 801163a:	4632      	mov	r2, r6
 801163c:	465b      	mov	r3, fp
 801163e:	4630      	mov	r0, r6
 8011640:	4639      	mov	r1, r7
 8011642:	f7ee fe23 	bl	800028c <__adddf3>
 8011646:	4602      	mov	r2, r0
 8011648:	460b      	mov	r3, r1
 801164a:	a10b      	add	r1, pc, #44	; (adr r1, 8011678 <__ieee754_asin+0x418>)
 801164c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011650:	f7ee fe1a 	bl	8000288 <__aeabi_dsub>
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	4620      	mov	r0, r4
 801165a:	4629      	mov	r1, r5
 801165c:	f7ee fe14 	bl	8000288 <__aeabi_dsub>
 8011660:	4602      	mov	r2, r0
 8011662:	460b      	mov	r3, r1
 8011664:	a104      	add	r1, pc, #16	; (adr r1, 8011678 <__ieee754_asin+0x418>)
 8011666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801166a:	e6dd      	b.n	8011428 <__ieee754_asin+0x1c8>
 801166c:	f3af 8000 	nop.w
 8011670:	33145c07 	.word	0x33145c07
 8011674:	3c91a626 	.word	0x3c91a626
 8011678:	54442d18 	.word	0x54442d18
 801167c:	3fe921fb 	.word	0x3fe921fb

08011680 <__ieee754_pow>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	b091      	sub	sp, #68	; 0x44
 8011686:	ed8d 1b00 	vstr	d1, [sp]
 801168a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801168e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011692:	ea58 0302 	orrs.w	r3, r8, r2
 8011696:	ec57 6b10 	vmov	r6, r7, d0
 801169a:	f000 84be 	beq.w	801201a <__ieee754_pow+0x99a>
 801169e:	4b7a      	ldr	r3, [pc, #488]	; (8011888 <__ieee754_pow+0x208>)
 80116a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80116a4:	429c      	cmp	r4, r3
 80116a6:	463d      	mov	r5, r7
 80116a8:	ee10 aa10 	vmov	sl, s0
 80116ac:	dc09      	bgt.n	80116c2 <__ieee754_pow+0x42>
 80116ae:	d103      	bne.n	80116b8 <__ieee754_pow+0x38>
 80116b0:	b93e      	cbnz	r6, 80116c2 <__ieee754_pow+0x42>
 80116b2:	45a0      	cmp	r8, r4
 80116b4:	dc0d      	bgt.n	80116d2 <__ieee754_pow+0x52>
 80116b6:	e001      	b.n	80116bc <__ieee754_pow+0x3c>
 80116b8:	4598      	cmp	r8, r3
 80116ba:	dc02      	bgt.n	80116c2 <__ieee754_pow+0x42>
 80116bc:	4598      	cmp	r8, r3
 80116be:	d10e      	bne.n	80116de <__ieee754_pow+0x5e>
 80116c0:	b16a      	cbz	r2, 80116de <__ieee754_pow+0x5e>
 80116c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80116c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80116ca:	ea54 030a 	orrs.w	r3, r4, sl
 80116ce:	f000 84a4 	beq.w	801201a <__ieee754_pow+0x99a>
 80116d2:	486e      	ldr	r0, [pc, #440]	; (801188c <__ieee754_pow+0x20c>)
 80116d4:	b011      	add	sp, #68	; 0x44
 80116d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116da:	f001 bd8d 	b.w	80131f8 <nan>
 80116de:	2d00      	cmp	r5, #0
 80116e0:	da53      	bge.n	801178a <__ieee754_pow+0x10a>
 80116e2:	4b6b      	ldr	r3, [pc, #428]	; (8011890 <__ieee754_pow+0x210>)
 80116e4:	4598      	cmp	r8, r3
 80116e6:	dc4d      	bgt.n	8011784 <__ieee754_pow+0x104>
 80116e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80116ec:	4598      	cmp	r8, r3
 80116ee:	dd4c      	ble.n	801178a <__ieee754_pow+0x10a>
 80116f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80116f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80116f8:	2b14      	cmp	r3, #20
 80116fa:	dd26      	ble.n	801174a <__ieee754_pow+0xca>
 80116fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011700:	fa22 f103 	lsr.w	r1, r2, r3
 8011704:	fa01 f303 	lsl.w	r3, r1, r3
 8011708:	4293      	cmp	r3, r2
 801170a:	d13e      	bne.n	801178a <__ieee754_pow+0x10a>
 801170c:	f001 0101 	and.w	r1, r1, #1
 8011710:	f1c1 0b02 	rsb	fp, r1, #2
 8011714:	2a00      	cmp	r2, #0
 8011716:	d15b      	bne.n	80117d0 <__ieee754_pow+0x150>
 8011718:	4b5b      	ldr	r3, [pc, #364]	; (8011888 <__ieee754_pow+0x208>)
 801171a:	4598      	cmp	r8, r3
 801171c:	d124      	bne.n	8011768 <__ieee754_pow+0xe8>
 801171e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011722:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011726:	ea53 030a 	orrs.w	r3, r3, sl
 801172a:	f000 8476 	beq.w	801201a <__ieee754_pow+0x99a>
 801172e:	4b59      	ldr	r3, [pc, #356]	; (8011894 <__ieee754_pow+0x214>)
 8011730:	429c      	cmp	r4, r3
 8011732:	dd2d      	ble.n	8011790 <__ieee754_pow+0x110>
 8011734:	f1b9 0f00 	cmp.w	r9, #0
 8011738:	f280 8473 	bge.w	8012022 <__ieee754_pow+0x9a2>
 801173c:	2000      	movs	r0, #0
 801173e:	2100      	movs	r1, #0
 8011740:	ec41 0b10 	vmov	d0, r0, r1
 8011744:	b011      	add	sp, #68	; 0x44
 8011746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801174a:	2a00      	cmp	r2, #0
 801174c:	d13e      	bne.n	80117cc <__ieee754_pow+0x14c>
 801174e:	f1c3 0314 	rsb	r3, r3, #20
 8011752:	fa48 f103 	asr.w	r1, r8, r3
 8011756:	fa01 f303 	lsl.w	r3, r1, r3
 801175a:	4543      	cmp	r3, r8
 801175c:	f040 8469 	bne.w	8012032 <__ieee754_pow+0x9b2>
 8011760:	f001 0101 	and.w	r1, r1, #1
 8011764:	f1c1 0b02 	rsb	fp, r1, #2
 8011768:	4b4b      	ldr	r3, [pc, #300]	; (8011898 <__ieee754_pow+0x218>)
 801176a:	4598      	cmp	r8, r3
 801176c:	d118      	bne.n	80117a0 <__ieee754_pow+0x120>
 801176e:	f1b9 0f00 	cmp.w	r9, #0
 8011772:	f280 845a 	bge.w	801202a <__ieee754_pow+0x9aa>
 8011776:	4948      	ldr	r1, [pc, #288]	; (8011898 <__ieee754_pow+0x218>)
 8011778:	4632      	mov	r2, r6
 801177a:	463b      	mov	r3, r7
 801177c:	2000      	movs	r0, #0
 801177e:	f7ef f865 	bl	800084c <__aeabi_ddiv>
 8011782:	e7dd      	b.n	8011740 <__ieee754_pow+0xc0>
 8011784:	f04f 0b02 	mov.w	fp, #2
 8011788:	e7c4      	b.n	8011714 <__ieee754_pow+0x94>
 801178a:	f04f 0b00 	mov.w	fp, #0
 801178e:	e7c1      	b.n	8011714 <__ieee754_pow+0x94>
 8011790:	f1b9 0f00 	cmp.w	r9, #0
 8011794:	dad2      	bge.n	801173c <__ieee754_pow+0xbc>
 8011796:	e9dd 0300 	ldrd	r0, r3, [sp]
 801179a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801179e:	e7cf      	b.n	8011740 <__ieee754_pow+0xc0>
 80117a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80117a4:	d106      	bne.n	80117b4 <__ieee754_pow+0x134>
 80117a6:	4632      	mov	r2, r6
 80117a8:	463b      	mov	r3, r7
 80117aa:	4610      	mov	r0, r2
 80117ac:	4619      	mov	r1, r3
 80117ae:	f7ee ff23 	bl	80005f8 <__aeabi_dmul>
 80117b2:	e7c5      	b.n	8011740 <__ieee754_pow+0xc0>
 80117b4:	4b39      	ldr	r3, [pc, #228]	; (801189c <__ieee754_pow+0x21c>)
 80117b6:	4599      	cmp	r9, r3
 80117b8:	d10a      	bne.n	80117d0 <__ieee754_pow+0x150>
 80117ba:	2d00      	cmp	r5, #0
 80117bc:	db08      	blt.n	80117d0 <__ieee754_pow+0x150>
 80117be:	ec47 6b10 	vmov	d0, r6, r7
 80117c2:	b011      	add	sp, #68	; 0x44
 80117c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c8:	f000 be5c 	b.w	8012484 <__ieee754_sqrt>
 80117cc:	f04f 0b00 	mov.w	fp, #0
 80117d0:	ec47 6b10 	vmov	d0, r6, r7
 80117d4:	f001 fc76 	bl	80130c4 <fabs>
 80117d8:	ec51 0b10 	vmov	r0, r1, d0
 80117dc:	f1ba 0f00 	cmp.w	sl, #0
 80117e0:	d127      	bne.n	8011832 <__ieee754_pow+0x1b2>
 80117e2:	b124      	cbz	r4, 80117ee <__ieee754_pow+0x16e>
 80117e4:	4b2c      	ldr	r3, [pc, #176]	; (8011898 <__ieee754_pow+0x218>)
 80117e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d121      	bne.n	8011832 <__ieee754_pow+0x1b2>
 80117ee:	f1b9 0f00 	cmp.w	r9, #0
 80117f2:	da05      	bge.n	8011800 <__ieee754_pow+0x180>
 80117f4:	4602      	mov	r2, r0
 80117f6:	460b      	mov	r3, r1
 80117f8:	2000      	movs	r0, #0
 80117fa:	4927      	ldr	r1, [pc, #156]	; (8011898 <__ieee754_pow+0x218>)
 80117fc:	f7ef f826 	bl	800084c <__aeabi_ddiv>
 8011800:	2d00      	cmp	r5, #0
 8011802:	da9d      	bge.n	8011740 <__ieee754_pow+0xc0>
 8011804:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011808:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801180c:	ea54 030b 	orrs.w	r3, r4, fp
 8011810:	d108      	bne.n	8011824 <__ieee754_pow+0x1a4>
 8011812:	4602      	mov	r2, r0
 8011814:	460b      	mov	r3, r1
 8011816:	4610      	mov	r0, r2
 8011818:	4619      	mov	r1, r3
 801181a:	f7ee fd35 	bl	8000288 <__aeabi_dsub>
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	e7ac      	b.n	801177e <__ieee754_pow+0xfe>
 8011824:	f1bb 0f01 	cmp.w	fp, #1
 8011828:	d18a      	bne.n	8011740 <__ieee754_pow+0xc0>
 801182a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801182e:	4619      	mov	r1, r3
 8011830:	e786      	b.n	8011740 <__ieee754_pow+0xc0>
 8011832:	0fed      	lsrs	r5, r5, #31
 8011834:	1e6b      	subs	r3, r5, #1
 8011836:	930d      	str	r3, [sp, #52]	; 0x34
 8011838:	ea5b 0303 	orrs.w	r3, fp, r3
 801183c:	d102      	bne.n	8011844 <__ieee754_pow+0x1c4>
 801183e:	4632      	mov	r2, r6
 8011840:	463b      	mov	r3, r7
 8011842:	e7e8      	b.n	8011816 <__ieee754_pow+0x196>
 8011844:	4b16      	ldr	r3, [pc, #88]	; (80118a0 <__ieee754_pow+0x220>)
 8011846:	4598      	cmp	r8, r3
 8011848:	f340 80fe 	ble.w	8011a48 <__ieee754_pow+0x3c8>
 801184c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011850:	4598      	cmp	r8, r3
 8011852:	dd0a      	ble.n	801186a <__ieee754_pow+0x1ea>
 8011854:	4b0f      	ldr	r3, [pc, #60]	; (8011894 <__ieee754_pow+0x214>)
 8011856:	429c      	cmp	r4, r3
 8011858:	dc0d      	bgt.n	8011876 <__ieee754_pow+0x1f6>
 801185a:	f1b9 0f00 	cmp.w	r9, #0
 801185e:	f6bf af6d 	bge.w	801173c <__ieee754_pow+0xbc>
 8011862:	a307      	add	r3, pc, #28	; (adr r3, 8011880 <__ieee754_pow+0x200>)
 8011864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011868:	e79f      	b.n	80117aa <__ieee754_pow+0x12a>
 801186a:	4b0e      	ldr	r3, [pc, #56]	; (80118a4 <__ieee754_pow+0x224>)
 801186c:	429c      	cmp	r4, r3
 801186e:	ddf4      	ble.n	801185a <__ieee754_pow+0x1da>
 8011870:	4b09      	ldr	r3, [pc, #36]	; (8011898 <__ieee754_pow+0x218>)
 8011872:	429c      	cmp	r4, r3
 8011874:	dd18      	ble.n	80118a8 <__ieee754_pow+0x228>
 8011876:	f1b9 0f00 	cmp.w	r9, #0
 801187a:	dcf2      	bgt.n	8011862 <__ieee754_pow+0x1e2>
 801187c:	e75e      	b.n	801173c <__ieee754_pow+0xbc>
 801187e:	bf00      	nop
 8011880:	8800759c 	.word	0x8800759c
 8011884:	7e37e43c 	.word	0x7e37e43c
 8011888:	7ff00000 	.word	0x7ff00000
 801188c:	080136c5 	.word	0x080136c5
 8011890:	433fffff 	.word	0x433fffff
 8011894:	3fefffff 	.word	0x3fefffff
 8011898:	3ff00000 	.word	0x3ff00000
 801189c:	3fe00000 	.word	0x3fe00000
 80118a0:	41e00000 	.word	0x41e00000
 80118a4:	3feffffe 	.word	0x3feffffe
 80118a8:	2200      	movs	r2, #0
 80118aa:	4b63      	ldr	r3, [pc, #396]	; (8011a38 <__ieee754_pow+0x3b8>)
 80118ac:	f7ee fcec 	bl	8000288 <__aeabi_dsub>
 80118b0:	a355      	add	r3, pc, #340	; (adr r3, 8011a08 <__ieee754_pow+0x388>)
 80118b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b6:	4604      	mov	r4, r0
 80118b8:	460d      	mov	r5, r1
 80118ba:	f7ee fe9d 	bl	80005f8 <__aeabi_dmul>
 80118be:	a354      	add	r3, pc, #336	; (adr r3, 8011a10 <__ieee754_pow+0x390>)
 80118c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c4:	4606      	mov	r6, r0
 80118c6:	460f      	mov	r7, r1
 80118c8:	4620      	mov	r0, r4
 80118ca:	4629      	mov	r1, r5
 80118cc:	f7ee fe94 	bl	80005f8 <__aeabi_dmul>
 80118d0:	2200      	movs	r2, #0
 80118d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118d6:	4b59      	ldr	r3, [pc, #356]	; (8011a3c <__ieee754_pow+0x3bc>)
 80118d8:	4620      	mov	r0, r4
 80118da:	4629      	mov	r1, r5
 80118dc:	f7ee fe8c 	bl	80005f8 <__aeabi_dmul>
 80118e0:	4602      	mov	r2, r0
 80118e2:	460b      	mov	r3, r1
 80118e4:	a14c      	add	r1, pc, #304	; (adr r1, 8011a18 <__ieee754_pow+0x398>)
 80118e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118ea:	f7ee fccd 	bl	8000288 <__aeabi_dsub>
 80118ee:	4622      	mov	r2, r4
 80118f0:	462b      	mov	r3, r5
 80118f2:	f7ee fe81 	bl	80005f8 <__aeabi_dmul>
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	2000      	movs	r0, #0
 80118fc:	4950      	ldr	r1, [pc, #320]	; (8011a40 <__ieee754_pow+0x3c0>)
 80118fe:	f7ee fcc3 	bl	8000288 <__aeabi_dsub>
 8011902:	4622      	mov	r2, r4
 8011904:	462b      	mov	r3, r5
 8011906:	4680      	mov	r8, r0
 8011908:	4689      	mov	r9, r1
 801190a:	4620      	mov	r0, r4
 801190c:	4629      	mov	r1, r5
 801190e:	f7ee fe73 	bl	80005f8 <__aeabi_dmul>
 8011912:	4602      	mov	r2, r0
 8011914:	460b      	mov	r3, r1
 8011916:	4640      	mov	r0, r8
 8011918:	4649      	mov	r1, r9
 801191a:	f7ee fe6d 	bl	80005f8 <__aeabi_dmul>
 801191e:	a340      	add	r3, pc, #256	; (adr r3, 8011a20 <__ieee754_pow+0x3a0>)
 8011920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011924:	f7ee fe68 	bl	80005f8 <__aeabi_dmul>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011930:	f7ee fcaa 	bl	8000288 <__aeabi_dsub>
 8011934:	4602      	mov	r2, r0
 8011936:	460b      	mov	r3, r1
 8011938:	4604      	mov	r4, r0
 801193a:	460d      	mov	r5, r1
 801193c:	4630      	mov	r0, r6
 801193e:	4639      	mov	r1, r7
 8011940:	f7ee fca4 	bl	800028c <__adddf3>
 8011944:	2000      	movs	r0, #0
 8011946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801194a:	4632      	mov	r2, r6
 801194c:	463b      	mov	r3, r7
 801194e:	f7ee fc9b 	bl	8000288 <__aeabi_dsub>
 8011952:	4602      	mov	r2, r0
 8011954:	460b      	mov	r3, r1
 8011956:	4620      	mov	r0, r4
 8011958:	4629      	mov	r1, r5
 801195a:	f7ee fc95 	bl	8000288 <__aeabi_dsub>
 801195e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011960:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011964:	4313      	orrs	r3, r2
 8011966:	4606      	mov	r6, r0
 8011968:	460f      	mov	r7, r1
 801196a:	f040 81eb 	bne.w	8011d44 <__ieee754_pow+0x6c4>
 801196e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011a28 <__ieee754_pow+0x3a8>
 8011972:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011976:	2400      	movs	r4, #0
 8011978:	4622      	mov	r2, r4
 801197a:	462b      	mov	r3, r5
 801197c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011980:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011984:	f7ee fc80 	bl	8000288 <__aeabi_dsub>
 8011988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801198c:	f7ee fe34 	bl	80005f8 <__aeabi_dmul>
 8011990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011994:	4680      	mov	r8, r0
 8011996:	4689      	mov	r9, r1
 8011998:	4630      	mov	r0, r6
 801199a:	4639      	mov	r1, r7
 801199c:	f7ee fe2c 	bl	80005f8 <__aeabi_dmul>
 80119a0:	4602      	mov	r2, r0
 80119a2:	460b      	mov	r3, r1
 80119a4:	4640      	mov	r0, r8
 80119a6:	4649      	mov	r1, r9
 80119a8:	f7ee fc70 	bl	800028c <__adddf3>
 80119ac:	4622      	mov	r2, r4
 80119ae:	462b      	mov	r3, r5
 80119b0:	4680      	mov	r8, r0
 80119b2:	4689      	mov	r9, r1
 80119b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119b8:	f7ee fe1e 	bl	80005f8 <__aeabi_dmul>
 80119bc:	460b      	mov	r3, r1
 80119be:	4604      	mov	r4, r0
 80119c0:	460d      	mov	r5, r1
 80119c2:	4602      	mov	r2, r0
 80119c4:	4649      	mov	r1, r9
 80119c6:	4640      	mov	r0, r8
 80119c8:	e9cd 4500 	strd	r4, r5, [sp]
 80119cc:	f7ee fc5e 	bl	800028c <__adddf3>
 80119d0:	4b1c      	ldr	r3, [pc, #112]	; (8011a44 <__ieee754_pow+0x3c4>)
 80119d2:	4299      	cmp	r1, r3
 80119d4:	4606      	mov	r6, r0
 80119d6:	460f      	mov	r7, r1
 80119d8:	468b      	mov	fp, r1
 80119da:	f340 82f7 	ble.w	8011fcc <__ieee754_pow+0x94c>
 80119de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80119e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80119e6:	4303      	orrs	r3, r0
 80119e8:	f000 81ea 	beq.w	8011dc0 <__ieee754_pow+0x740>
 80119ec:	a310      	add	r3, pc, #64	; (adr r3, 8011a30 <__ieee754_pow+0x3b0>)
 80119ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119f6:	f7ee fdff 	bl	80005f8 <__aeabi_dmul>
 80119fa:	a30d      	add	r3, pc, #52	; (adr r3, 8011a30 <__ieee754_pow+0x3b0>)
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	e6d5      	b.n	80117ae <__ieee754_pow+0x12e>
 8011a02:	bf00      	nop
 8011a04:	f3af 8000 	nop.w
 8011a08:	60000000 	.word	0x60000000
 8011a0c:	3ff71547 	.word	0x3ff71547
 8011a10:	f85ddf44 	.word	0xf85ddf44
 8011a14:	3e54ae0b 	.word	0x3e54ae0b
 8011a18:	55555555 	.word	0x55555555
 8011a1c:	3fd55555 	.word	0x3fd55555
 8011a20:	652b82fe 	.word	0x652b82fe
 8011a24:	3ff71547 	.word	0x3ff71547
 8011a28:	00000000 	.word	0x00000000
 8011a2c:	bff00000 	.word	0xbff00000
 8011a30:	8800759c 	.word	0x8800759c
 8011a34:	7e37e43c 	.word	0x7e37e43c
 8011a38:	3ff00000 	.word	0x3ff00000
 8011a3c:	3fd00000 	.word	0x3fd00000
 8011a40:	3fe00000 	.word	0x3fe00000
 8011a44:	408fffff 	.word	0x408fffff
 8011a48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011a4c:	f04f 0200 	mov.w	r2, #0
 8011a50:	da05      	bge.n	8011a5e <__ieee754_pow+0x3de>
 8011a52:	4bd3      	ldr	r3, [pc, #844]	; (8011da0 <__ieee754_pow+0x720>)
 8011a54:	f7ee fdd0 	bl	80005f8 <__aeabi_dmul>
 8011a58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011a5c:	460c      	mov	r4, r1
 8011a5e:	1523      	asrs	r3, r4, #20
 8011a60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011a64:	4413      	add	r3, r2
 8011a66:	9309      	str	r3, [sp, #36]	; 0x24
 8011a68:	4bce      	ldr	r3, [pc, #824]	; (8011da4 <__ieee754_pow+0x724>)
 8011a6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011a6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011a72:	429c      	cmp	r4, r3
 8011a74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011a78:	dd08      	ble.n	8011a8c <__ieee754_pow+0x40c>
 8011a7a:	4bcb      	ldr	r3, [pc, #812]	; (8011da8 <__ieee754_pow+0x728>)
 8011a7c:	429c      	cmp	r4, r3
 8011a7e:	f340 815e 	ble.w	8011d3e <__ieee754_pow+0x6be>
 8011a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a84:	3301      	adds	r3, #1
 8011a86:	9309      	str	r3, [sp, #36]	; 0x24
 8011a88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011a8c:	f04f 0a00 	mov.w	sl, #0
 8011a90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011a94:	930c      	str	r3, [sp, #48]	; 0x30
 8011a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a98:	4bc4      	ldr	r3, [pc, #784]	; (8011dac <__ieee754_pow+0x72c>)
 8011a9a:	4413      	add	r3, r2
 8011a9c:	ed93 7b00 	vldr	d7, [r3]
 8011aa0:	4629      	mov	r1, r5
 8011aa2:	ec53 2b17 	vmov	r2, r3, d7
 8011aa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011aaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011aae:	f7ee fbeb 	bl	8000288 <__aeabi_dsub>
 8011ab2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	460f      	mov	r7, r1
 8011aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011abe:	f7ee fbe5 	bl	800028c <__adddf3>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	2000      	movs	r0, #0
 8011ac8:	49b9      	ldr	r1, [pc, #740]	; (8011db0 <__ieee754_pow+0x730>)
 8011aca:	f7ee febf 	bl	800084c <__aeabi_ddiv>
 8011ace:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	4639      	mov	r1, r7
 8011ada:	f7ee fd8d 	bl	80005f8 <__aeabi_dmul>
 8011ade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ae2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011ae6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011aea:	2300      	movs	r3, #0
 8011aec:	9302      	str	r3, [sp, #8]
 8011aee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011af2:	106d      	asrs	r5, r5, #1
 8011af4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011af8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011afc:	2200      	movs	r2, #0
 8011afe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011b02:	4640      	mov	r0, r8
 8011b04:	4649      	mov	r1, r9
 8011b06:	4614      	mov	r4, r2
 8011b08:	461d      	mov	r5, r3
 8011b0a:	f7ee fd75 	bl	80005f8 <__aeabi_dmul>
 8011b0e:	4602      	mov	r2, r0
 8011b10:	460b      	mov	r3, r1
 8011b12:	4630      	mov	r0, r6
 8011b14:	4639      	mov	r1, r7
 8011b16:	f7ee fbb7 	bl	8000288 <__aeabi_dsub>
 8011b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b1e:	4606      	mov	r6, r0
 8011b20:	460f      	mov	r7, r1
 8011b22:	4620      	mov	r0, r4
 8011b24:	4629      	mov	r1, r5
 8011b26:	f7ee fbaf 	bl	8000288 <__aeabi_dsub>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b32:	f7ee fba9 	bl	8000288 <__aeabi_dsub>
 8011b36:	4642      	mov	r2, r8
 8011b38:	464b      	mov	r3, r9
 8011b3a:	f7ee fd5d 	bl	80005f8 <__aeabi_dmul>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	460b      	mov	r3, r1
 8011b42:	4630      	mov	r0, r6
 8011b44:	4639      	mov	r1, r7
 8011b46:	f7ee fb9f 	bl	8000288 <__aeabi_dsub>
 8011b4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011b4e:	f7ee fd53 	bl	80005f8 <__aeabi_dmul>
 8011b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011b5a:	4610      	mov	r0, r2
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	f7ee fd4b 	bl	80005f8 <__aeabi_dmul>
 8011b62:	a37b      	add	r3, pc, #492	; (adr r3, 8011d50 <__ieee754_pow+0x6d0>)
 8011b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b68:	4604      	mov	r4, r0
 8011b6a:	460d      	mov	r5, r1
 8011b6c:	f7ee fd44 	bl	80005f8 <__aeabi_dmul>
 8011b70:	a379      	add	r3, pc, #484	; (adr r3, 8011d58 <__ieee754_pow+0x6d8>)
 8011b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b76:	f7ee fb89 	bl	800028c <__adddf3>
 8011b7a:	4622      	mov	r2, r4
 8011b7c:	462b      	mov	r3, r5
 8011b7e:	f7ee fd3b 	bl	80005f8 <__aeabi_dmul>
 8011b82:	a377      	add	r3, pc, #476	; (adr r3, 8011d60 <__ieee754_pow+0x6e0>)
 8011b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b88:	f7ee fb80 	bl	800028c <__adddf3>
 8011b8c:	4622      	mov	r2, r4
 8011b8e:	462b      	mov	r3, r5
 8011b90:	f7ee fd32 	bl	80005f8 <__aeabi_dmul>
 8011b94:	a374      	add	r3, pc, #464	; (adr r3, 8011d68 <__ieee754_pow+0x6e8>)
 8011b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9a:	f7ee fb77 	bl	800028c <__adddf3>
 8011b9e:	4622      	mov	r2, r4
 8011ba0:	462b      	mov	r3, r5
 8011ba2:	f7ee fd29 	bl	80005f8 <__aeabi_dmul>
 8011ba6:	a372      	add	r3, pc, #456	; (adr r3, 8011d70 <__ieee754_pow+0x6f0>)
 8011ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bac:	f7ee fb6e 	bl	800028c <__adddf3>
 8011bb0:	4622      	mov	r2, r4
 8011bb2:	462b      	mov	r3, r5
 8011bb4:	f7ee fd20 	bl	80005f8 <__aeabi_dmul>
 8011bb8:	a36f      	add	r3, pc, #444	; (adr r3, 8011d78 <__ieee754_pow+0x6f8>)
 8011bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bbe:	f7ee fb65 	bl	800028c <__adddf3>
 8011bc2:	4622      	mov	r2, r4
 8011bc4:	4606      	mov	r6, r0
 8011bc6:	460f      	mov	r7, r1
 8011bc8:	462b      	mov	r3, r5
 8011bca:	4620      	mov	r0, r4
 8011bcc:	4629      	mov	r1, r5
 8011bce:	f7ee fd13 	bl	80005f8 <__aeabi_dmul>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	4630      	mov	r0, r6
 8011bd8:	4639      	mov	r1, r7
 8011bda:	f7ee fd0d 	bl	80005f8 <__aeabi_dmul>
 8011bde:	4642      	mov	r2, r8
 8011be0:	4604      	mov	r4, r0
 8011be2:	460d      	mov	r5, r1
 8011be4:	464b      	mov	r3, r9
 8011be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011bea:	f7ee fb4f 	bl	800028c <__adddf3>
 8011bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011bf2:	f7ee fd01 	bl	80005f8 <__aeabi_dmul>
 8011bf6:	4622      	mov	r2, r4
 8011bf8:	462b      	mov	r3, r5
 8011bfa:	f7ee fb47 	bl	800028c <__adddf3>
 8011bfe:	4642      	mov	r2, r8
 8011c00:	4606      	mov	r6, r0
 8011c02:	460f      	mov	r7, r1
 8011c04:	464b      	mov	r3, r9
 8011c06:	4640      	mov	r0, r8
 8011c08:	4649      	mov	r1, r9
 8011c0a:	f7ee fcf5 	bl	80005f8 <__aeabi_dmul>
 8011c0e:	2200      	movs	r2, #0
 8011c10:	4b68      	ldr	r3, [pc, #416]	; (8011db4 <__ieee754_pow+0x734>)
 8011c12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011c16:	f7ee fb39 	bl	800028c <__adddf3>
 8011c1a:	4632      	mov	r2, r6
 8011c1c:	463b      	mov	r3, r7
 8011c1e:	f7ee fb35 	bl	800028c <__adddf3>
 8011c22:	9802      	ldr	r0, [sp, #8]
 8011c24:	460d      	mov	r5, r1
 8011c26:	4604      	mov	r4, r0
 8011c28:	4602      	mov	r2, r0
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	4640      	mov	r0, r8
 8011c2e:	4649      	mov	r1, r9
 8011c30:	f7ee fce2 	bl	80005f8 <__aeabi_dmul>
 8011c34:	2200      	movs	r2, #0
 8011c36:	4680      	mov	r8, r0
 8011c38:	4689      	mov	r9, r1
 8011c3a:	4b5e      	ldr	r3, [pc, #376]	; (8011db4 <__ieee754_pow+0x734>)
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	4629      	mov	r1, r5
 8011c40:	f7ee fb22 	bl	8000288 <__aeabi_dsub>
 8011c44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011c48:	f7ee fb1e 	bl	8000288 <__aeabi_dsub>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	460b      	mov	r3, r1
 8011c50:	4630      	mov	r0, r6
 8011c52:	4639      	mov	r1, r7
 8011c54:	f7ee fb18 	bl	8000288 <__aeabi_dsub>
 8011c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c5c:	f7ee fccc 	bl	80005f8 <__aeabi_dmul>
 8011c60:	4622      	mov	r2, r4
 8011c62:	4606      	mov	r6, r0
 8011c64:	460f      	mov	r7, r1
 8011c66:	462b      	mov	r3, r5
 8011c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c6c:	f7ee fcc4 	bl	80005f8 <__aeabi_dmul>
 8011c70:	4602      	mov	r2, r0
 8011c72:	460b      	mov	r3, r1
 8011c74:	4630      	mov	r0, r6
 8011c76:	4639      	mov	r1, r7
 8011c78:	f7ee fb08 	bl	800028c <__adddf3>
 8011c7c:	4606      	mov	r6, r0
 8011c7e:	460f      	mov	r7, r1
 8011c80:	4602      	mov	r2, r0
 8011c82:	460b      	mov	r3, r1
 8011c84:	4640      	mov	r0, r8
 8011c86:	4649      	mov	r1, r9
 8011c88:	f7ee fb00 	bl	800028c <__adddf3>
 8011c8c:	9802      	ldr	r0, [sp, #8]
 8011c8e:	a33c      	add	r3, pc, #240	; (adr r3, 8011d80 <__ieee754_pow+0x700>)
 8011c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c94:	4604      	mov	r4, r0
 8011c96:	460d      	mov	r5, r1
 8011c98:	f7ee fcae 	bl	80005f8 <__aeabi_dmul>
 8011c9c:	4642      	mov	r2, r8
 8011c9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011ca2:	464b      	mov	r3, r9
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	f7ee faee 	bl	8000288 <__aeabi_dsub>
 8011cac:	4602      	mov	r2, r0
 8011cae:	460b      	mov	r3, r1
 8011cb0:	4630      	mov	r0, r6
 8011cb2:	4639      	mov	r1, r7
 8011cb4:	f7ee fae8 	bl	8000288 <__aeabi_dsub>
 8011cb8:	a333      	add	r3, pc, #204	; (adr r3, 8011d88 <__ieee754_pow+0x708>)
 8011cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbe:	f7ee fc9b 	bl	80005f8 <__aeabi_dmul>
 8011cc2:	a333      	add	r3, pc, #204	; (adr r3, 8011d90 <__ieee754_pow+0x710>)
 8011cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc8:	4606      	mov	r6, r0
 8011cca:	460f      	mov	r7, r1
 8011ccc:	4620      	mov	r0, r4
 8011cce:	4629      	mov	r1, r5
 8011cd0:	f7ee fc92 	bl	80005f8 <__aeabi_dmul>
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	460b      	mov	r3, r1
 8011cd8:	4630      	mov	r0, r6
 8011cda:	4639      	mov	r1, r7
 8011cdc:	f7ee fad6 	bl	800028c <__adddf3>
 8011ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ce2:	4b35      	ldr	r3, [pc, #212]	; (8011db8 <__ieee754_pow+0x738>)
 8011ce4:	4413      	add	r3, r2
 8011ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cea:	f7ee facf 	bl	800028c <__adddf3>
 8011cee:	4604      	mov	r4, r0
 8011cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cf2:	460d      	mov	r5, r1
 8011cf4:	f7ee fc16 	bl	8000524 <__aeabi_i2d>
 8011cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011cfa:	4b30      	ldr	r3, [pc, #192]	; (8011dbc <__ieee754_pow+0x73c>)
 8011cfc:	4413      	add	r3, r2
 8011cfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d02:	4606      	mov	r6, r0
 8011d04:	460f      	mov	r7, r1
 8011d06:	4622      	mov	r2, r4
 8011d08:	462b      	mov	r3, r5
 8011d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d0e:	f7ee fabd 	bl	800028c <__adddf3>
 8011d12:	4642      	mov	r2, r8
 8011d14:	464b      	mov	r3, r9
 8011d16:	f7ee fab9 	bl	800028c <__adddf3>
 8011d1a:	4632      	mov	r2, r6
 8011d1c:	463b      	mov	r3, r7
 8011d1e:	f7ee fab5 	bl	800028c <__adddf3>
 8011d22:	9802      	ldr	r0, [sp, #8]
 8011d24:	4632      	mov	r2, r6
 8011d26:	463b      	mov	r3, r7
 8011d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d2c:	f7ee faac 	bl	8000288 <__aeabi_dsub>
 8011d30:	4642      	mov	r2, r8
 8011d32:	464b      	mov	r3, r9
 8011d34:	f7ee faa8 	bl	8000288 <__aeabi_dsub>
 8011d38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d3c:	e607      	b.n	801194e <__ieee754_pow+0x2ce>
 8011d3e:	f04f 0a01 	mov.w	sl, #1
 8011d42:	e6a5      	b.n	8011a90 <__ieee754_pow+0x410>
 8011d44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011d98 <__ieee754_pow+0x718>
 8011d48:	e613      	b.n	8011972 <__ieee754_pow+0x2f2>
 8011d4a:	bf00      	nop
 8011d4c:	f3af 8000 	nop.w
 8011d50:	4a454eef 	.word	0x4a454eef
 8011d54:	3fca7e28 	.word	0x3fca7e28
 8011d58:	93c9db65 	.word	0x93c9db65
 8011d5c:	3fcd864a 	.word	0x3fcd864a
 8011d60:	a91d4101 	.word	0xa91d4101
 8011d64:	3fd17460 	.word	0x3fd17460
 8011d68:	518f264d 	.word	0x518f264d
 8011d6c:	3fd55555 	.word	0x3fd55555
 8011d70:	db6fabff 	.word	0xdb6fabff
 8011d74:	3fdb6db6 	.word	0x3fdb6db6
 8011d78:	33333303 	.word	0x33333303
 8011d7c:	3fe33333 	.word	0x3fe33333
 8011d80:	e0000000 	.word	0xe0000000
 8011d84:	3feec709 	.word	0x3feec709
 8011d88:	dc3a03fd 	.word	0xdc3a03fd
 8011d8c:	3feec709 	.word	0x3feec709
 8011d90:	145b01f5 	.word	0x145b01f5
 8011d94:	be3e2fe0 	.word	0xbe3e2fe0
 8011d98:	00000000 	.word	0x00000000
 8011d9c:	3ff00000 	.word	0x3ff00000
 8011da0:	43400000 	.word	0x43400000
 8011da4:	0003988e 	.word	0x0003988e
 8011da8:	000bb679 	.word	0x000bb679
 8011dac:	08013708 	.word	0x08013708
 8011db0:	3ff00000 	.word	0x3ff00000
 8011db4:	40080000 	.word	0x40080000
 8011db8:	08013728 	.word	0x08013728
 8011dbc:	08013718 	.word	0x08013718
 8011dc0:	a3b4      	add	r3, pc, #720	; (adr r3, 8012094 <__ieee754_pow+0xa14>)
 8011dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc6:	4640      	mov	r0, r8
 8011dc8:	4649      	mov	r1, r9
 8011dca:	f7ee fa5f 	bl	800028c <__adddf3>
 8011dce:	4622      	mov	r2, r4
 8011dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011dd4:	462b      	mov	r3, r5
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	4639      	mov	r1, r7
 8011dda:	f7ee fa55 	bl	8000288 <__aeabi_dsub>
 8011dde:	4602      	mov	r2, r0
 8011de0:	460b      	mov	r3, r1
 8011de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011de6:	f7ee fe97 	bl	8000b18 <__aeabi_dcmpgt>
 8011dea:	2800      	cmp	r0, #0
 8011dec:	f47f adfe 	bne.w	80119ec <__ieee754_pow+0x36c>
 8011df0:	4aa3      	ldr	r2, [pc, #652]	; (8012080 <__ieee754_pow+0xa00>)
 8011df2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011df6:	4293      	cmp	r3, r2
 8011df8:	f340 810a 	ble.w	8012010 <__ieee754_pow+0x990>
 8011dfc:	151b      	asrs	r3, r3, #20
 8011dfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011e02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011e06:	fa4a f303 	asr.w	r3, sl, r3
 8011e0a:	445b      	add	r3, fp
 8011e0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011e10:	4e9c      	ldr	r6, [pc, #624]	; (8012084 <__ieee754_pow+0xa04>)
 8011e12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011e16:	4116      	asrs	r6, r2
 8011e18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	ea23 0106 	bic.w	r1, r3, r6
 8011e22:	f1c2 0214 	rsb	r2, r2, #20
 8011e26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011e2a:	fa4a fa02 	asr.w	sl, sl, r2
 8011e2e:	f1bb 0f00 	cmp.w	fp, #0
 8011e32:	4602      	mov	r2, r0
 8011e34:	460b      	mov	r3, r1
 8011e36:	4620      	mov	r0, r4
 8011e38:	4629      	mov	r1, r5
 8011e3a:	bfb8      	it	lt
 8011e3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011e40:	f7ee fa22 	bl	8000288 <__aeabi_dsub>
 8011e44:	e9cd 0100 	strd	r0, r1, [sp]
 8011e48:	4642      	mov	r2, r8
 8011e4a:	464b      	mov	r3, r9
 8011e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e50:	f7ee fa1c 	bl	800028c <__adddf3>
 8011e54:	2000      	movs	r0, #0
 8011e56:	a378      	add	r3, pc, #480	; (adr r3, 8012038 <__ieee754_pow+0x9b8>)
 8011e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	460d      	mov	r5, r1
 8011e60:	f7ee fbca 	bl	80005f8 <__aeabi_dmul>
 8011e64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e68:	4606      	mov	r6, r0
 8011e6a:	460f      	mov	r7, r1
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	4629      	mov	r1, r5
 8011e70:	f7ee fa0a 	bl	8000288 <__aeabi_dsub>
 8011e74:	4602      	mov	r2, r0
 8011e76:	460b      	mov	r3, r1
 8011e78:	4640      	mov	r0, r8
 8011e7a:	4649      	mov	r1, r9
 8011e7c:	f7ee fa04 	bl	8000288 <__aeabi_dsub>
 8011e80:	a36f      	add	r3, pc, #444	; (adr r3, 8012040 <__ieee754_pow+0x9c0>)
 8011e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e86:	f7ee fbb7 	bl	80005f8 <__aeabi_dmul>
 8011e8a:	a36f      	add	r3, pc, #444	; (adr r3, 8012048 <__ieee754_pow+0x9c8>)
 8011e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e90:	4680      	mov	r8, r0
 8011e92:	4689      	mov	r9, r1
 8011e94:	4620      	mov	r0, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	f7ee fbae 	bl	80005f8 <__aeabi_dmul>
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	4640      	mov	r0, r8
 8011ea2:	4649      	mov	r1, r9
 8011ea4:	f7ee f9f2 	bl	800028c <__adddf3>
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	460d      	mov	r5, r1
 8011eac:	4602      	mov	r2, r0
 8011eae:	460b      	mov	r3, r1
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	4639      	mov	r1, r7
 8011eb4:	f7ee f9ea 	bl	800028c <__adddf3>
 8011eb8:	4632      	mov	r2, r6
 8011eba:	463b      	mov	r3, r7
 8011ebc:	4680      	mov	r8, r0
 8011ebe:	4689      	mov	r9, r1
 8011ec0:	f7ee f9e2 	bl	8000288 <__aeabi_dsub>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	4620      	mov	r0, r4
 8011eca:	4629      	mov	r1, r5
 8011ecc:	f7ee f9dc 	bl	8000288 <__aeabi_dsub>
 8011ed0:	4642      	mov	r2, r8
 8011ed2:	4606      	mov	r6, r0
 8011ed4:	460f      	mov	r7, r1
 8011ed6:	464b      	mov	r3, r9
 8011ed8:	4640      	mov	r0, r8
 8011eda:	4649      	mov	r1, r9
 8011edc:	f7ee fb8c 	bl	80005f8 <__aeabi_dmul>
 8011ee0:	a35b      	add	r3, pc, #364	; (adr r3, 8012050 <__ieee754_pow+0x9d0>)
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	4604      	mov	r4, r0
 8011ee8:	460d      	mov	r5, r1
 8011eea:	f7ee fb85 	bl	80005f8 <__aeabi_dmul>
 8011eee:	a35a      	add	r3, pc, #360	; (adr r3, 8012058 <__ieee754_pow+0x9d8>)
 8011ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef4:	f7ee f9c8 	bl	8000288 <__aeabi_dsub>
 8011ef8:	4622      	mov	r2, r4
 8011efa:	462b      	mov	r3, r5
 8011efc:	f7ee fb7c 	bl	80005f8 <__aeabi_dmul>
 8011f00:	a357      	add	r3, pc, #348	; (adr r3, 8012060 <__ieee754_pow+0x9e0>)
 8011f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f06:	f7ee f9c1 	bl	800028c <__adddf3>
 8011f0a:	4622      	mov	r2, r4
 8011f0c:	462b      	mov	r3, r5
 8011f0e:	f7ee fb73 	bl	80005f8 <__aeabi_dmul>
 8011f12:	a355      	add	r3, pc, #340	; (adr r3, 8012068 <__ieee754_pow+0x9e8>)
 8011f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f18:	f7ee f9b6 	bl	8000288 <__aeabi_dsub>
 8011f1c:	4622      	mov	r2, r4
 8011f1e:	462b      	mov	r3, r5
 8011f20:	f7ee fb6a 	bl	80005f8 <__aeabi_dmul>
 8011f24:	a352      	add	r3, pc, #328	; (adr r3, 8012070 <__ieee754_pow+0x9f0>)
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	f7ee f9af 	bl	800028c <__adddf3>
 8011f2e:	4622      	mov	r2, r4
 8011f30:	462b      	mov	r3, r5
 8011f32:	f7ee fb61 	bl	80005f8 <__aeabi_dmul>
 8011f36:	4602      	mov	r2, r0
 8011f38:	460b      	mov	r3, r1
 8011f3a:	4640      	mov	r0, r8
 8011f3c:	4649      	mov	r1, r9
 8011f3e:	f7ee f9a3 	bl	8000288 <__aeabi_dsub>
 8011f42:	4604      	mov	r4, r0
 8011f44:	460d      	mov	r5, r1
 8011f46:	4602      	mov	r2, r0
 8011f48:	460b      	mov	r3, r1
 8011f4a:	4640      	mov	r0, r8
 8011f4c:	4649      	mov	r1, r9
 8011f4e:	f7ee fb53 	bl	80005f8 <__aeabi_dmul>
 8011f52:	2200      	movs	r2, #0
 8011f54:	e9cd 0100 	strd	r0, r1, [sp]
 8011f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	4629      	mov	r1, r5
 8011f60:	f7ee f992 	bl	8000288 <__aeabi_dsub>
 8011f64:	4602      	mov	r2, r0
 8011f66:	460b      	mov	r3, r1
 8011f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f6c:	f7ee fc6e 	bl	800084c <__aeabi_ddiv>
 8011f70:	4632      	mov	r2, r6
 8011f72:	4604      	mov	r4, r0
 8011f74:	460d      	mov	r5, r1
 8011f76:	463b      	mov	r3, r7
 8011f78:	4640      	mov	r0, r8
 8011f7a:	4649      	mov	r1, r9
 8011f7c:	f7ee fb3c 	bl	80005f8 <__aeabi_dmul>
 8011f80:	4632      	mov	r2, r6
 8011f82:	463b      	mov	r3, r7
 8011f84:	f7ee f982 	bl	800028c <__adddf3>
 8011f88:	4602      	mov	r2, r0
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	4629      	mov	r1, r5
 8011f90:	f7ee f97a 	bl	8000288 <__aeabi_dsub>
 8011f94:	4642      	mov	r2, r8
 8011f96:	464b      	mov	r3, r9
 8011f98:	f7ee f976 	bl	8000288 <__aeabi_dsub>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	2000      	movs	r0, #0
 8011fa2:	4939      	ldr	r1, [pc, #228]	; (8012088 <__ieee754_pow+0xa08>)
 8011fa4:	f7ee f970 	bl	8000288 <__aeabi_dsub>
 8011fa8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011fac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	460b      	mov	r3, r1
 8011fb4:	da2f      	bge.n	8012016 <__ieee754_pow+0x996>
 8011fb6:	4650      	mov	r0, sl
 8011fb8:	ec43 2b10 	vmov	d0, r2, r3
 8011fbc:	f001 f9a8 	bl	8013310 <scalbn>
 8011fc0:	ec51 0b10 	vmov	r0, r1, d0
 8011fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011fc8:	f7ff bbf1 	b.w	80117ae <__ieee754_pow+0x12e>
 8011fcc:	4b2f      	ldr	r3, [pc, #188]	; (801208c <__ieee754_pow+0xa0c>)
 8011fce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011fd2:	429e      	cmp	r6, r3
 8011fd4:	f77f af0c 	ble.w	8011df0 <__ieee754_pow+0x770>
 8011fd8:	4b2d      	ldr	r3, [pc, #180]	; (8012090 <__ieee754_pow+0xa10>)
 8011fda:	440b      	add	r3, r1
 8011fdc:	4303      	orrs	r3, r0
 8011fde:	d00b      	beq.n	8011ff8 <__ieee754_pow+0x978>
 8011fe0:	a325      	add	r3, pc, #148	; (adr r3, 8012078 <__ieee754_pow+0x9f8>)
 8011fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fea:	f7ee fb05 	bl	80005f8 <__aeabi_dmul>
 8011fee:	a322      	add	r3, pc, #136	; (adr r3, 8012078 <__ieee754_pow+0x9f8>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	f7ff bbdb 	b.w	80117ae <__ieee754_pow+0x12e>
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	462b      	mov	r3, r5
 8011ffc:	f7ee f944 	bl	8000288 <__aeabi_dsub>
 8012000:	4642      	mov	r2, r8
 8012002:	464b      	mov	r3, r9
 8012004:	f7ee fd7e 	bl	8000b04 <__aeabi_dcmpge>
 8012008:	2800      	cmp	r0, #0
 801200a:	f43f aef1 	beq.w	8011df0 <__ieee754_pow+0x770>
 801200e:	e7e7      	b.n	8011fe0 <__ieee754_pow+0x960>
 8012010:	f04f 0a00 	mov.w	sl, #0
 8012014:	e718      	b.n	8011e48 <__ieee754_pow+0x7c8>
 8012016:	4621      	mov	r1, r4
 8012018:	e7d4      	b.n	8011fc4 <__ieee754_pow+0x944>
 801201a:	2000      	movs	r0, #0
 801201c:	491a      	ldr	r1, [pc, #104]	; (8012088 <__ieee754_pow+0xa08>)
 801201e:	f7ff bb8f 	b.w	8011740 <__ieee754_pow+0xc0>
 8012022:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012026:	f7ff bb8b 	b.w	8011740 <__ieee754_pow+0xc0>
 801202a:	4630      	mov	r0, r6
 801202c:	4639      	mov	r1, r7
 801202e:	f7ff bb87 	b.w	8011740 <__ieee754_pow+0xc0>
 8012032:	4693      	mov	fp, r2
 8012034:	f7ff bb98 	b.w	8011768 <__ieee754_pow+0xe8>
 8012038:	00000000 	.word	0x00000000
 801203c:	3fe62e43 	.word	0x3fe62e43
 8012040:	fefa39ef 	.word	0xfefa39ef
 8012044:	3fe62e42 	.word	0x3fe62e42
 8012048:	0ca86c39 	.word	0x0ca86c39
 801204c:	be205c61 	.word	0xbe205c61
 8012050:	72bea4d0 	.word	0x72bea4d0
 8012054:	3e663769 	.word	0x3e663769
 8012058:	c5d26bf1 	.word	0xc5d26bf1
 801205c:	3ebbbd41 	.word	0x3ebbbd41
 8012060:	af25de2c 	.word	0xaf25de2c
 8012064:	3f11566a 	.word	0x3f11566a
 8012068:	16bebd93 	.word	0x16bebd93
 801206c:	3f66c16c 	.word	0x3f66c16c
 8012070:	5555553e 	.word	0x5555553e
 8012074:	3fc55555 	.word	0x3fc55555
 8012078:	c2f8f359 	.word	0xc2f8f359
 801207c:	01a56e1f 	.word	0x01a56e1f
 8012080:	3fe00000 	.word	0x3fe00000
 8012084:	000fffff 	.word	0x000fffff
 8012088:	3ff00000 	.word	0x3ff00000
 801208c:	4090cbff 	.word	0x4090cbff
 8012090:	3f6f3400 	.word	0x3f6f3400
 8012094:	652b82fe 	.word	0x652b82fe
 8012098:	3c971547 	.word	0x3c971547
 801209c:	00000000 	.word	0x00000000

080120a0 <__ieee754_rem_pio2>:
 80120a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a4:	ec57 6b10 	vmov	r6, r7, d0
 80120a8:	4bc3      	ldr	r3, [pc, #780]	; (80123b8 <__ieee754_rem_pio2+0x318>)
 80120aa:	b08d      	sub	sp, #52	; 0x34
 80120ac:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80120b0:	4598      	cmp	r8, r3
 80120b2:	4604      	mov	r4, r0
 80120b4:	9704      	str	r7, [sp, #16]
 80120b6:	dc07      	bgt.n	80120c8 <__ieee754_rem_pio2+0x28>
 80120b8:	2200      	movs	r2, #0
 80120ba:	2300      	movs	r3, #0
 80120bc:	ed84 0b00 	vstr	d0, [r4]
 80120c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80120c4:	2500      	movs	r5, #0
 80120c6:	e027      	b.n	8012118 <__ieee754_rem_pio2+0x78>
 80120c8:	4bbc      	ldr	r3, [pc, #752]	; (80123bc <__ieee754_rem_pio2+0x31c>)
 80120ca:	4598      	cmp	r8, r3
 80120cc:	dc75      	bgt.n	80121ba <__ieee754_rem_pio2+0x11a>
 80120ce:	9b04      	ldr	r3, [sp, #16]
 80120d0:	4dbb      	ldr	r5, [pc, #748]	; (80123c0 <__ieee754_rem_pio2+0x320>)
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	ee10 0a10 	vmov	r0, s0
 80120d8:	a3a9      	add	r3, pc, #676	; (adr r3, 8012380 <__ieee754_rem_pio2+0x2e0>)
 80120da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120de:	4639      	mov	r1, r7
 80120e0:	dd36      	ble.n	8012150 <__ieee754_rem_pio2+0xb0>
 80120e2:	f7ee f8d1 	bl	8000288 <__aeabi_dsub>
 80120e6:	45a8      	cmp	r8, r5
 80120e8:	4606      	mov	r6, r0
 80120ea:	460f      	mov	r7, r1
 80120ec:	d018      	beq.n	8012120 <__ieee754_rem_pio2+0x80>
 80120ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8012388 <__ieee754_rem_pio2+0x2e8>)
 80120f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f4:	f7ee f8c8 	bl	8000288 <__aeabi_dsub>
 80120f8:	4602      	mov	r2, r0
 80120fa:	460b      	mov	r3, r1
 80120fc:	e9c4 2300 	strd	r2, r3, [r4]
 8012100:	4630      	mov	r0, r6
 8012102:	4639      	mov	r1, r7
 8012104:	f7ee f8c0 	bl	8000288 <__aeabi_dsub>
 8012108:	a39f      	add	r3, pc, #636	; (adr r3, 8012388 <__ieee754_rem_pio2+0x2e8>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	f7ee f8bb 	bl	8000288 <__aeabi_dsub>
 8012112:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012116:	2501      	movs	r5, #1
 8012118:	4628      	mov	r0, r5
 801211a:	b00d      	add	sp, #52	; 0x34
 801211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012120:	a39b      	add	r3, pc, #620	; (adr r3, 8012390 <__ieee754_rem_pio2+0x2f0>)
 8012122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012126:	f7ee f8af 	bl	8000288 <__aeabi_dsub>
 801212a:	a39b      	add	r3, pc, #620	; (adr r3, 8012398 <__ieee754_rem_pio2+0x2f8>)
 801212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012130:	4606      	mov	r6, r0
 8012132:	460f      	mov	r7, r1
 8012134:	f7ee f8a8 	bl	8000288 <__aeabi_dsub>
 8012138:	4602      	mov	r2, r0
 801213a:	460b      	mov	r3, r1
 801213c:	e9c4 2300 	strd	r2, r3, [r4]
 8012140:	4630      	mov	r0, r6
 8012142:	4639      	mov	r1, r7
 8012144:	f7ee f8a0 	bl	8000288 <__aeabi_dsub>
 8012148:	a393      	add	r3, pc, #588	; (adr r3, 8012398 <__ieee754_rem_pio2+0x2f8>)
 801214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214e:	e7de      	b.n	801210e <__ieee754_rem_pio2+0x6e>
 8012150:	f7ee f89c 	bl	800028c <__adddf3>
 8012154:	45a8      	cmp	r8, r5
 8012156:	4606      	mov	r6, r0
 8012158:	460f      	mov	r7, r1
 801215a:	d016      	beq.n	801218a <__ieee754_rem_pio2+0xea>
 801215c:	a38a      	add	r3, pc, #552	; (adr r3, 8012388 <__ieee754_rem_pio2+0x2e8>)
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	f7ee f893 	bl	800028c <__adddf3>
 8012166:	4602      	mov	r2, r0
 8012168:	460b      	mov	r3, r1
 801216a:	e9c4 2300 	strd	r2, r3, [r4]
 801216e:	4630      	mov	r0, r6
 8012170:	4639      	mov	r1, r7
 8012172:	f7ee f889 	bl	8000288 <__aeabi_dsub>
 8012176:	a384      	add	r3, pc, #528	; (adr r3, 8012388 <__ieee754_rem_pio2+0x2e8>)
 8012178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217c:	f7ee f886 	bl	800028c <__adddf3>
 8012180:	f04f 35ff 	mov.w	r5, #4294967295
 8012184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012188:	e7c6      	b.n	8012118 <__ieee754_rem_pio2+0x78>
 801218a:	a381      	add	r3, pc, #516	; (adr r3, 8012390 <__ieee754_rem_pio2+0x2f0>)
 801218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012190:	f7ee f87c 	bl	800028c <__adddf3>
 8012194:	a380      	add	r3, pc, #512	; (adr r3, 8012398 <__ieee754_rem_pio2+0x2f8>)
 8012196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219a:	4606      	mov	r6, r0
 801219c:	460f      	mov	r7, r1
 801219e:	f7ee f875 	bl	800028c <__adddf3>
 80121a2:	4602      	mov	r2, r0
 80121a4:	460b      	mov	r3, r1
 80121a6:	e9c4 2300 	strd	r2, r3, [r4]
 80121aa:	4630      	mov	r0, r6
 80121ac:	4639      	mov	r1, r7
 80121ae:	f7ee f86b 	bl	8000288 <__aeabi_dsub>
 80121b2:	a379      	add	r3, pc, #484	; (adr r3, 8012398 <__ieee754_rem_pio2+0x2f8>)
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	e7e0      	b.n	801217c <__ieee754_rem_pio2+0xdc>
 80121ba:	4b82      	ldr	r3, [pc, #520]	; (80123c4 <__ieee754_rem_pio2+0x324>)
 80121bc:	4598      	cmp	r8, r3
 80121be:	f300 80d0 	bgt.w	8012362 <__ieee754_rem_pio2+0x2c2>
 80121c2:	f000 ff7f 	bl	80130c4 <fabs>
 80121c6:	ec57 6b10 	vmov	r6, r7, d0
 80121ca:	ee10 0a10 	vmov	r0, s0
 80121ce:	a374      	add	r3, pc, #464	; (adr r3, 80123a0 <__ieee754_rem_pio2+0x300>)
 80121d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d4:	4639      	mov	r1, r7
 80121d6:	f7ee fa0f 	bl	80005f8 <__aeabi_dmul>
 80121da:	2200      	movs	r2, #0
 80121dc:	4b7a      	ldr	r3, [pc, #488]	; (80123c8 <__ieee754_rem_pio2+0x328>)
 80121de:	f7ee f855 	bl	800028c <__adddf3>
 80121e2:	f7ee fcb9 	bl	8000b58 <__aeabi_d2iz>
 80121e6:	4605      	mov	r5, r0
 80121e8:	f7ee f99c 	bl	8000524 <__aeabi_i2d>
 80121ec:	a364      	add	r3, pc, #400	; (adr r3, 8012380 <__ieee754_rem_pio2+0x2e0>)
 80121ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121f6:	f7ee f9ff 	bl	80005f8 <__aeabi_dmul>
 80121fa:	4602      	mov	r2, r0
 80121fc:	460b      	mov	r3, r1
 80121fe:	4630      	mov	r0, r6
 8012200:	4639      	mov	r1, r7
 8012202:	f7ee f841 	bl	8000288 <__aeabi_dsub>
 8012206:	a360      	add	r3, pc, #384	; (adr r3, 8012388 <__ieee754_rem_pio2+0x2e8>)
 8012208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220c:	4682      	mov	sl, r0
 801220e:	468b      	mov	fp, r1
 8012210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012214:	f7ee f9f0 	bl	80005f8 <__aeabi_dmul>
 8012218:	2d1f      	cmp	r5, #31
 801221a:	4606      	mov	r6, r0
 801221c:	460f      	mov	r7, r1
 801221e:	dc0c      	bgt.n	801223a <__ieee754_rem_pio2+0x19a>
 8012220:	1e6a      	subs	r2, r5, #1
 8012222:	4b6a      	ldr	r3, [pc, #424]	; (80123cc <__ieee754_rem_pio2+0x32c>)
 8012224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012228:	4543      	cmp	r3, r8
 801222a:	d006      	beq.n	801223a <__ieee754_rem_pio2+0x19a>
 801222c:	4632      	mov	r2, r6
 801222e:	463b      	mov	r3, r7
 8012230:	4650      	mov	r0, sl
 8012232:	4659      	mov	r1, fp
 8012234:	f7ee f828 	bl	8000288 <__aeabi_dsub>
 8012238:	e00e      	b.n	8012258 <__ieee754_rem_pio2+0x1b8>
 801223a:	4632      	mov	r2, r6
 801223c:	463b      	mov	r3, r7
 801223e:	4650      	mov	r0, sl
 8012240:	4659      	mov	r1, fp
 8012242:	f7ee f821 	bl	8000288 <__aeabi_dsub>
 8012246:	ea4f 5328 	mov.w	r3, r8, asr #20
 801224a:	9305      	str	r3, [sp, #20]
 801224c:	9a05      	ldr	r2, [sp, #20]
 801224e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	2b10      	cmp	r3, #16
 8012256:	dc02      	bgt.n	801225e <__ieee754_rem_pio2+0x1be>
 8012258:	e9c4 0100 	strd	r0, r1, [r4]
 801225c:	e039      	b.n	80122d2 <__ieee754_rem_pio2+0x232>
 801225e:	a34c      	add	r3, pc, #304	; (adr r3, 8012390 <__ieee754_rem_pio2+0x2f0>)
 8012260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012268:	f7ee f9c6 	bl	80005f8 <__aeabi_dmul>
 801226c:	4606      	mov	r6, r0
 801226e:	460f      	mov	r7, r1
 8012270:	4602      	mov	r2, r0
 8012272:	460b      	mov	r3, r1
 8012274:	4650      	mov	r0, sl
 8012276:	4659      	mov	r1, fp
 8012278:	f7ee f806 	bl	8000288 <__aeabi_dsub>
 801227c:	4602      	mov	r2, r0
 801227e:	460b      	mov	r3, r1
 8012280:	4680      	mov	r8, r0
 8012282:	4689      	mov	r9, r1
 8012284:	4650      	mov	r0, sl
 8012286:	4659      	mov	r1, fp
 8012288:	f7ed fffe 	bl	8000288 <__aeabi_dsub>
 801228c:	4632      	mov	r2, r6
 801228e:	463b      	mov	r3, r7
 8012290:	f7ed fffa 	bl	8000288 <__aeabi_dsub>
 8012294:	a340      	add	r3, pc, #256	; (adr r3, 8012398 <__ieee754_rem_pio2+0x2f8>)
 8012296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229a:	4606      	mov	r6, r0
 801229c:	460f      	mov	r7, r1
 801229e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122a2:	f7ee f9a9 	bl	80005f8 <__aeabi_dmul>
 80122a6:	4632      	mov	r2, r6
 80122a8:	463b      	mov	r3, r7
 80122aa:	f7ed ffed 	bl	8000288 <__aeabi_dsub>
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	4606      	mov	r6, r0
 80122b4:	460f      	mov	r7, r1
 80122b6:	4640      	mov	r0, r8
 80122b8:	4649      	mov	r1, r9
 80122ba:	f7ed ffe5 	bl	8000288 <__aeabi_dsub>
 80122be:	9a05      	ldr	r2, [sp, #20]
 80122c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	2b31      	cmp	r3, #49	; 0x31
 80122c8:	dc20      	bgt.n	801230c <__ieee754_rem_pio2+0x26c>
 80122ca:	e9c4 0100 	strd	r0, r1, [r4]
 80122ce:	46c2      	mov	sl, r8
 80122d0:	46cb      	mov	fp, r9
 80122d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80122d6:	4650      	mov	r0, sl
 80122d8:	4642      	mov	r2, r8
 80122da:	464b      	mov	r3, r9
 80122dc:	4659      	mov	r1, fp
 80122de:	f7ed ffd3 	bl	8000288 <__aeabi_dsub>
 80122e2:	463b      	mov	r3, r7
 80122e4:	4632      	mov	r2, r6
 80122e6:	f7ed ffcf 	bl	8000288 <__aeabi_dsub>
 80122ea:	9b04      	ldr	r3, [sp, #16]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122f2:	f6bf af11 	bge.w	8012118 <__ieee754_rem_pio2+0x78>
 80122f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80122fa:	6063      	str	r3, [r4, #4]
 80122fc:	f8c4 8000 	str.w	r8, [r4]
 8012300:	60a0      	str	r0, [r4, #8]
 8012302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012306:	60e3      	str	r3, [r4, #12]
 8012308:	426d      	negs	r5, r5
 801230a:	e705      	b.n	8012118 <__ieee754_rem_pio2+0x78>
 801230c:	a326      	add	r3, pc, #152	; (adr r3, 80123a8 <__ieee754_rem_pio2+0x308>)
 801230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012316:	f7ee f96f 	bl	80005f8 <__aeabi_dmul>
 801231a:	4606      	mov	r6, r0
 801231c:	460f      	mov	r7, r1
 801231e:	4602      	mov	r2, r0
 8012320:	460b      	mov	r3, r1
 8012322:	4640      	mov	r0, r8
 8012324:	4649      	mov	r1, r9
 8012326:	f7ed ffaf 	bl	8000288 <__aeabi_dsub>
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	4682      	mov	sl, r0
 8012330:	468b      	mov	fp, r1
 8012332:	4640      	mov	r0, r8
 8012334:	4649      	mov	r1, r9
 8012336:	f7ed ffa7 	bl	8000288 <__aeabi_dsub>
 801233a:	4632      	mov	r2, r6
 801233c:	463b      	mov	r3, r7
 801233e:	f7ed ffa3 	bl	8000288 <__aeabi_dsub>
 8012342:	a31b      	add	r3, pc, #108	; (adr r3, 80123b0 <__ieee754_rem_pio2+0x310>)
 8012344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012348:	4606      	mov	r6, r0
 801234a:	460f      	mov	r7, r1
 801234c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012350:	f7ee f952 	bl	80005f8 <__aeabi_dmul>
 8012354:	4632      	mov	r2, r6
 8012356:	463b      	mov	r3, r7
 8012358:	f7ed ff96 	bl	8000288 <__aeabi_dsub>
 801235c:	4606      	mov	r6, r0
 801235e:	460f      	mov	r7, r1
 8012360:	e764      	b.n	801222c <__ieee754_rem_pio2+0x18c>
 8012362:	4b1b      	ldr	r3, [pc, #108]	; (80123d0 <__ieee754_rem_pio2+0x330>)
 8012364:	4598      	cmp	r8, r3
 8012366:	dd35      	ble.n	80123d4 <__ieee754_rem_pio2+0x334>
 8012368:	ee10 2a10 	vmov	r2, s0
 801236c:	463b      	mov	r3, r7
 801236e:	4630      	mov	r0, r6
 8012370:	4639      	mov	r1, r7
 8012372:	f7ed ff89 	bl	8000288 <__aeabi_dsub>
 8012376:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801237a:	e9c4 0100 	strd	r0, r1, [r4]
 801237e:	e6a1      	b.n	80120c4 <__ieee754_rem_pio2+0x24>
 8012380:	54400000 	.word	0x54400000
 8012384:	3ff921fb 	.word	0x3ff921fb
 8012388:	1a626331 	.word	0x1a626331
 801238c:	3dd0b461 	.word	0x3dd0b461
 8012390:	1a600000 	.word	0x1a600000
 8012394:	3dd0b461 	.word	0x3dd0b461
 8012398:	2e037073 	.word	0x2e037073
 801239c:	3ba3198a 	.word	0x3ba3198a
 80123a0:	6dc9c883 	.word	0x6dc9c883
 80123a4:	3fe45f30 	.word	0x3fe45f30
 80123a8:	2e000000 	.word	0x2e000000
 80123ac:	3ba3198a 	.word	0x3ba3198a
 80123b0:	252049c1 	.word	0x252049c1
 80123b4:	397b839a 	.word	0x397b839a
 80123b8:	3fe921fb 	.word	0x3fe921fb
 80123bc:	4002d97b 	.word	0x4002d97b
 80123c0:	3ff921fb 	.word	0x3ff921fb
 80123c4:	413921fb 	.word	0x413921fb
 80123c8:	3fe00000 	.word	0x3fe00000
 80123cc:	08013738 	.word	0x08013738
 80123d0:	7fefffff 	.word	0x7fefffff
 80123d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80123d8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80123dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80123e0:	4630      	mov	r0, r6
 80123e2:	460f      	mov	r7, r1
 80123e4:	f7ee fbb8 	bl	8000b58 <__aeabi_d2iz>
 80123e8:	f7ee f89c 	bl	8000524 <__aeabi_i2d>
 80123ec:	4602      	mov	r2, r0
 80123ee:	460b      	mov	r3, r1
 80123f0:	4630      	mov	r0, r6
 80123f2:	4639      	mov	r1, r7
 80123f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80123f8:	f7ed ff46 	bl	8000288 <__aeabi_dsub>
 80123fc:	2200      	movs	r2, #0
 80123fe:	4b1f      	ldr	r3, [pc, #124]	; (801247c <__ieee754_rem_pio2+0x3dc>)
 8012400:	f7ee f8fa 	bl	80005f8 <__aeabi_dmul>
 8012404:	460f      	mov	r7, r1
 8012406:	4606      	mov	r6, r0
 8012408:	f7ee fba6 	bl	8000b58 <__aeabi_d2iz>
 801240c:	f7ee f88a 	bl	8000524 <__aeabi_i2d>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	4630      	mov	r0, r6
 8012416:	4639      	mov	r1, r7
 8012418:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801241c:	f7ed ff34 	bl	8000288 <__aeabi_dsub>
 8012420:	2200      	movs	r2, #0
 8012422:	4b16      	ldr	r3, [pc, #88]	; (801247c <__ieee754_rem_pio2+0x3dc>)
 8012424:	f7ee f8e8 	bl	80005f8 <__aeabi_dmul>
 8012428:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801242c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012430:	f04f 0803 	mov.w	r8, #3
 8012434:	2600      	movs	r6, #0
 8012436:	2700      	movs	r7, #0
 8012438:	4632      	mov	r2, r6
 801243a:	463b      	mov	r3, r7
 801243c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012440:	f108 3aff 	add.w	sl, r8, #4294967295
 8012444:	f7ee fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8012448:	b9b0      	cbnz	r0, 8012478 <__ieee754_rem_pio2+0x3d8>
 801244a:	4b0d      	ldr	r3, [pc, #52]	; (8012480 <__ieee754_rem_pio2+0x3e0>)
 801244c:	9301      	str	r3, [sp, #4]
 801244e:	2302      	movs	r3, #2
 8012450:	9300      	str	r3, [sp, #0]
 8012452:	462a      	mov	r2, r5
 8012454:	4643      	mov	r3, r8
 8012456:	4621      	mov	r1, r4
 8012458:	a806      	add	r0, sp, #24
 801245a:	f000 fa39 	bl	80128d0 <__kernel_rem_pio2>
 801245e:	9b04      	ldr	r3, [sp, #16]
 8012460:	2b00      	cmp	r3, #0
 8012462:	4605      	mov	r5, r0
 8012464:	f6bf ae58 	bge.w	8012118 <__ieee754_rem_pio2+0x78>
 8012468:	6863      	ldr	r3, [r4, #4]
 801246a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801246e:	6063      	str	r3, [r4, #4]
 8012470:	68e3      	ldr	r3, [r4, #12]
 8012472:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012476:	e746      	b.n	8012306 <__ieee754_rem_pio2+0x266>
 8012478:	46d0      	mov	r8, sl
 801247a:	e7dd      	b.n	8012438 <__ieee754_rem_pio2+0x398>
 801247c:	41700000 	.word	0x41700000
 8012480:	080137b8 	.word	0x080137b8

08012484 <__ieee754_sqrt>:
 8012484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012488:	4955      	ldr	r1, [pc, #340]	; (80125e0 <__ieee754_sqrt+0x15c>)
 801248a:	ec55 4b10 	vmov	r4, r5, d0
 801248e:	43a9      	bics	r1, r5
 8012490:	462b      	mov	r3, r5
 8012492:	462a      	mov	r2, r5
 8012494:	d112      	bne.n	80124bc <__ieee754_sqrt+0x38>
 8012496:	ee10 2a10 	vmov	r2, s0
 801249a:	ee10 0a10 	vmov	r0, s0
 801249e:	4629      	mov	r1, r5
 80124a0:	f7ee f8aa 	bl	80005f8 <__aeabi_dmul>
 80124a4:	4602      	mov	r2, r0
 80124a6:	460b      	mov	r3, r1
 80124a8:	4620      	mov	r0, r4
 80124aa:	4629      	mov	r1, r5
 80124ac:	f7ed feee 	bl	800028c <__adddf3>
 80124b0:	4604      	mov	r4, r0
 80124b2:	460d      	mov	r5, r1
 80124b4:	ec45 4b10 	vmov	d0, r4, r5
 80124b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124bc:	2d00      	cmp	r5, #0
 80124be:	ee10 0a10 	vmov	r0, s0
 80124c2:	4621      	mov	r1, r4
 80124c4:	dc0f      	bgt.n	80124e6 <__ieee754_sqrt+0x62>
 80124c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80124ca:	4330      	orrs	r0, r6
 80124cc:	d0f2      	beq.n	80124b4 <__ieee754_sqrt+0x30>
 80124ce:	b155      	cbz	r5, 80124e6 <__ieee754_sqrt+0x62>
 80124d0:	ee10 2a10 	vmov	r2, s0
 80124d4:	4620      	mov	r0, r4
 80124d6:	4629      	mov	r1, r5
 80124d8:	f7ed fed6 	bl	8000288 <__aeabi_dsub>
 80124dc:	4602      	mov	r2, r0
 80124de:	460b      	mov	r3, r1
 80124e0:	f7ee f9b4 	bl	800084c <__aeabi_ddiv>
 80124e4:	e7e4      	b.n	80124b0 <__ieee754_sqrt+0x2c>
 80124e6:	151b      	asrs	r3, r3, #20
 80124e8:	d073      	beq.n	80125d2 <__ieee754_sqrt+0x14e>
 80124ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80124ee:	07dd      	lsls	r5, r3, #31
 80124f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80124f4:	bf48      	it	mi
 80124f6:	0fc8      	lsrmi	r0, r1, #31
 80124f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80124fc:	bf44      	itt	mi
 80124fe:	0049      	lslmi	r1, r1, #1
 8012500:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012504:	2500      	movs	r5, #0
 8012506:	1058      	asrs	r0, r3, #1
 8012508:	0fcb      	lsrs	r3, r1, #31
 801250a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801250e:	0049      	lsls	r1, r1, #1
 8012510:	2316      	movs	r3, #22
 8012512:	462c      	mov	r4, r5
 8012514:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012518:	19a7      	adds	r7, r4, r6
 801251a:	4297      	cmp	r7, r2
 801251c:	bfde      	ittt	le
 801251e:	19bc      	addle	r4, r7, r6
 8012520:	1bd2      	suble	r2, r2, r7
 8012522:	19ad      	addle	r5, r5, r6
 8012524:	0fcf      	lsrs	r7, r1, #31
 8012526:	3b01      	subs	r3, #1
 8012528:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801252c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012530:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012534:	d1f0      	bne.n	8012518 <__ieee754_sqrt+0x94>
 8012536:	f04f 0c20 	mov.w	ip, #32
 801253a:	469e      	mov	lr, r3
 801253c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012540:	42a2      	cmp	r2, r4
 8012542:	eb06 070e 	add.w	r7, r6, lr
 8012546:	dc02      	bgt.n	801254e <__ieee754_sqrt+0xca>
 8012548:	d112      	bne.n	8012570 <__ieee754_sqrt+0xec>
 801254a:	428f      	cmp	r7, r1
 801254c:	d810      	bhi.n	8012570 <__ieee754_sqrt+0xec>
 801254e:	2f00      	cmp	r7, #0
 8012550:	eb07 0e06 	add.w	lr, r7, r6
 8012554:	da42      	bge.n	80125dc <__ieee754_sqrt+0x158>
 8012556:	f1be 0f00 	cmp.w	lr, #0
 801255a:	db3f      	blt.n	80125dc <__ieee754_sqrt+0x158>
 801255c:	f104 0801 	add.w	r8, r4, #1
 8012560:	1b12      	subs	r2, r2, r4
 8012562:	428f      	cmp	r7, r1
 8012564:	bf88      	it	hi
 8012566:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801256a:	1bc9      	subs	r1, r1, r7
 801256c:	4433      	add	r3, r6
 801256e:	4644      	mov	r4, r8
 8012570:	0052      	lsls	r2, r2, #1
 8012572:	f1bc 0c01 	subs.w	ip, ip, #1
 8012576:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801257a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801257e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012582:	d1dd      	bne.n	8012540 <__ieee754_sqrt+0xbc>
 8012584:	430a      	orrs	r2, r1
 8012586:	d006      	beq.n	8012596 <__ieee754_sqrt+0x112>
 8012588:	1c5c      	adds	r4, r3, #1
 801258a:	bf13      	iteet	ne
 801258c:	3301      	addne	r3, #1
 801258e:	3501      	addeq	r5, #1
 8012590:	4663      	moveq	r3, ip
 8012592:	f023 0301 	bicne.w	r3, r3, #1
 8012596:	106a      	asrs	r2, r5, #1
 8012598:	085b      	lsrs	r3, r3, #1
 801259a:	07e9      	lsls	r1, r5, #31
 801259c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80125a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80125a4:	bf48      	it	mi
 80125a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80125aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80125ae:	461c      	mov	r4, r3
 80125b0:	e780      	b.n	80124b4 <__ieee754_sqrt+0x30>
 80125b2:	0aca      	lsrs	r2, r1, #11
 80125b4:	3815      	subs	r0, #21
 80125b6:	0549      	lsls	r1, r1, #21
 80125b8:	2a00      	cmp	r2, #0
 80125ba:	d0fa      	beq.n	80125b2 <__ieee754_sqrt+0x12e>
 80125bc:	02d6      	lsls	r6, r2, #11
 80125be:	d50a      	bpl.n	80125d6 <__ieee754_sqrt+0x152>
 80125c0:	f1c3 0420 	rsb	r4, r3, #32
 80125c4:	fa21 f404 	lsr.w	r4, r1, r4
 80125c8:	1e5d      	subs	r5, r3, #1
 80125ca:	4099      	lsls	r1, r3
 80125cc:	4322      	orrs	r2, r4
 80125ce:	1b43      	subs	r3, r0, r5
 80125d0:	e78b      	b.n	80124ea <__ieee754_sqrt+0x66>
 80125d2:	4618      	mov	r0, r3
 80125d4:	e7f0      	b.n	80125b8 <__ieee754_sqrt+0x134>
 80125d6:	0052      	lsls	r2, r2, #1
 80125d8:	3301      	adds	r3, #1
 80125da:	e7ef      	b.n	80125bc <__ieee754_sqrt+0x138>
 80125dc:	46a0      	mov	r8, r4
 80125de:	e7bf      	b.n	8012560 <__ieee754_sqrt+0xdc>
 80125e0:	7ff00000 	.word	0x7ff00000

080125e4 <__ieee754_atan2f>:
 80125e4:	ee10 2a90 	vmov	r2, s1
 80125e8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80125ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80125f0:	b510      	push	{r4, lr}
 80125f2:	eef0 7a40 	vmov.f32	s15, s0
 80125f6:	dc06      	bgt.n	8012606 <__ieee754_atan2f+0x22>
 80125f8:	ee10 0a10 	vmov	r0, s0
 80125fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012600:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012604:	dd04      	ble.n	8012610 <__ieee754_atan2f+0x2c>
 8012606:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801260a:	eeb0 0a67 	vmov.f32	s0, s15
 801260e:	bd10      	pop	{r4, pc}
 8012610:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012614:	d103      	bne.n	801261e <__ieee754_atan2f+0x3a>
 8012616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801261a:	f000 beef 	b.w	80133fc <atanf>
 801261e:	1794      	asrs	r4, r2, #30
 8012620:	f004 0402 	and.w	r4, r4, #2
 8012624:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012628:	b943      	cbnz	r3, 801263c <__ieee754_atan2f+0x58>
 801262a:	2c02      	cmp	r4, #2
 801262c:	d06e      	beq.n	801270c <__ieee754_atan2f+0x128>
 801262e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8012714 <__ieee754_atan2f+0x130>
 8012632:	2c03      	cmp	r4, #3
 8012634:	bf08      	it	eq
 8012636:	eef0 7a47 	vmoveq.f32	s15, s14
 801263a:	e7e6      	b.n	801260a <__ieee754_atan2f+0x26>
 801263c:	b941      	cbnz	r1, 8012650 <__ieee754_atan2f+0x6c>
 801263e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8012718 <__ieee754_atan2f+0x134>
 8012642:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801271c <__ieee754_atan2f+0x138>
 8012646:	2800      	cmp	r0, #0
 8012648:	bfb8      	it	lt
 801264a:	eef0 7a47 	vmovlt.f32	s15, s14
 801264e:	e7dc      	b.n	801260a <__ieee754_atan2f+0x26>
 8012650:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012654:	d122      	bne.n	801269c <__ieee754_atan2f+0xb8>
 8012656:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801265a:	d112      	bne.n	8012682 <__ieee754_atan2f+0x9e>
 801265c:	2c02      	cmp	r4, #2
 801265e:	d00a      	beq.n	8012676 <__ieee754_atan2f+0x92>
 8012660:	2c03      	cmp	r4, #3
 8012662:	d00b      	beq.n	801267c <__ieee754_atan2f+0x98>
 8012664:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8012720 <__ieee754_atan2f+0x13c>
 8012668:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8012724 <__ieee754_atan2f+0x140>
 801266c:	2c01      	cmp	r4, #1
 801266e:	bf18      	it	ne
 8012670:	eef0 7a47 	vmovne.f32	s15, s14
 8012674:	e7c9      	b.n	801260a <__ieee754_atan2f+0x26>
 8012676:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8012728 <__ieee754_atan2f+0x144>
 801267a:	e7c6      	b.n	801260a <__ieee754_atan2f+0x26>
 801267c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801272c <__ieee754_atan2f+0x148>
 8012680:	e7c3      	b.n	801260a <__ieee754_atan2f+0x26>
 8012682:	2c02      	cmp	r4, #2
 8012684:	d042      	beq.n	801270c <__ieee754_atan2f+0x128>
 8012686:	2c03      	cmp	r4, #3
 8012688:	d005      	beq.n	8012696 <__ieee754_atan2f+0xb2>
 801268a:	2c01      	cmp	r4, #1
 801268c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012730 <__ieee754_atan2f+0x14c>
 8012690:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012734 <__ieee754_atan2f+0x150>
 8012694:	e7eb      	b.n	801266e <__ieee754_atan2f+0x8a>
 8012696:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012714 <__ieee754_atan2f+0x130>
 801269a:	e7b6      	b.n	801260a <__ieee754_atan2f+0x26>
 801269c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80126a0:	d0cd      	beq.n	801263e <__ieee754_atan2f+0x5a>
 80126a2:	1a5b      	subs	r3, r3, r1
 80126a4:	15db      	asrs	r3, r3, #23
 80126a6:	2b3c      	cmp	r3, #60	; 0x3c
 80126a8:	dc1a      	bgt.n	80126e0 <__ieee754_atan2f+0xfc>
 80126aa:	2a00      	cmp	r2, #0
 80126ac:	da01      	bge.n	80126b2 <__ieee754_atan2f+0xce>
 80126ae:	333c      	adds	r3, #60	; 0x3c
 80126b0:	db19      	blt.n	80126e6 <__ieee754_atan2f+0x102>
 80126b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80126b6:	f000 ff75 	bl	80135a4 <fabsf>
 80126ba:	f000 fe9f 	bl	80133fc <atanf>
 80126be:	eef0 7a40 	vmov.f32	s15, s0
 80126c2:	2c01      	cmp	r4, #1
 80126c4:	d012      	beq.n	80126ec <__ieee754_atan2f+0x108>
 80126c6:	2c02      	cmp	r4, #2
 80126c8:	d017      	beq.n	80126fa <__ieee754_atan2f+0x116>
 80126ca:	2c00      	cmp	r4, #0
 80126cc:	d09d      	beq.n	801260a <__ieee754_atan2f+0x26>
 80126ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8012738 <__ieee754_atan2f+0x154>
 80126d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126d6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801273c <__ieee754_atan2f+0x158>
 80126da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126de:	e794      	b.n	801260a <__ieee754_atan2f+0x26>
 80126e0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012718 <__ieee754_atan2f+0x134>
 80126e4:	e7ed      	b.n	80126c2 <__ieee754_atan2f+0xde>
 80126e6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012734 <__ieee754_atan2f+0x150>
 80126ea:	e7ea      	b.n	80126c2 <__ieee754_atan2f+0xde>
 80126ec:	ee17 3a90 	vmov	r3, s15
 80126f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80126f4:	ee07 3a90 	vmov	s15, r3
 80126f8:	e787      	b.n	801260a <__ieee754_atan2f+0x26>
 80126fa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8012738 <__ieee754_atan2f+0x154>
 80126fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012702:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801273c <__ieee754_atan2f+0x158>
 8012706:	ee77 7a67 	vsub.f32	s15, s14, s15
 801270a:	e77e      	b.n	801260a <__ieee754_atan2f+0x26>
 801270c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801273c <__ieee754_atan2f+0x158>
 8012710:	e77b      	b.n	801260a <__ieee754_atan2f+0x26>
 8012712:	bf00      	nop
 8012714:	c0490fdb 	.word	0xc0490fdb
 8012718:	3fc90fdb 	.word	0x3fc90fdb
 801271c:	bfc90fdb 	.word	0xbfc90fdb
 8012720:	bf490fdb 	.word	0xbf490fdb
 8012724:	3f490fdb 	.word	0x3f490fdb
 8012728:	4016cbe4 	.word	0x4016cbe4
 801272c:	c016cbe4 	.word	0xc016cbe4
 8012730:	80000000 	.word	0x80000000
 8012734:	00000000 	.word	0x00000000
 8012738:	33bbbd2e 	.word	0x33bbbd2e
 801273c:	40490fdb 	.word	0x40490fdb

08012740 <__kernel_cos>:
 8012740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012744:	ec59 8b10 	vmov	r8, r9, d0
 8012748:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801274c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012750:	ed2d 8b02 	vpush	{d8}
 8012754:	eeb0 8a41 	vmov.f32	s16, s2
 8012758:	eef0 8a61 	vmov.f32	s17, s3
 801275c:	da07      	bge.n	801276e <__kernel_cos+0x2e>
 801275e:	ee10 0a10 	vmov	r0, s0
 8012762:	4649      	mov	r1, r9
 8012764:	f7ee f9f8 	bl	8000b58 <__aeabi_d2iz>
 8012768:	2800      	cmp	r0, #0
 801276a:	f000 8089 	beq.w	8012880 <__kernel_cos+0x140>
 801276e:	4642      	mov	r2, r8
 8012770:	464b      	mov	r3, r9
 8012772:	4640      	mov	r0, r8
 8012774:	4649      	mov	r1, r9
 8012776:	f7ed ff3f 	bl	80005f8 <__aeabi_dmul>
 801277a:	2200      	movs	r2, #0
 801277c:	4b4e      	ldr	r3, [pc, #312]	; (80128b8 <__kernel_cos+0x178>)
 801277e:	4604      	mov	r4, r0
 8012780:	460d      	mov	r5, r1
 8012782:	f7ed ff39 	bl	80005f8 <__aeabi_dmul>
 8012786:	a340      	add	r3, pc, #256	; (adr r3, 8012888 <__kernel_cos+0x148>)
 8012788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801278c:	4682      	mov	sl, r0
 801278e:	468b      	mov	fp, r1
 8012790:	4620      	mov	r0, r4
 8012792:	4629      	mov	r1, r5
 8012794:	f7ed ff30 	bl	80005f8 <__aeabi_dmul>
 8012798:	a33d      	add	r3, pc, #244	; (adr r3, 8012890 <__kernel_cos+0x150>)
 801279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279e:	f7ed fd75 	bl	800028c <__adddf3>
 80127a2:	4622      	mov	r2, r4
 80127a4:	462b      	mov	r3, r5
 80127a6:	f7ed ff27 	bl	80005f8 <__aeabi_dmul>
 80127aa:	a33b      	add	r3, pc, #236	; (adr r3, 8012898 <__kernel_cos+0x158>)
 80127ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b0:	f7ed fd6a 	bl	8000288 <__aeabi_dsub>
 80127b4:	4622      	mov	r2, r4
 80127b6:	462b      	mov	r3, r5
 80127b8:	f7ed ff1e 	bl	80005f8 <__aeabi_dmul>
 80127bc:	a338      	add	r3, pc, #224	; (adr r3, 80128a0 <__kernel_cos+0x160>)
 80127be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c2:	f7ed fd63 	bl	800028c <__adddf3>
 80127c6:	4622      	mov	r2, r4
 80127c8:	462b      	mov	r3, r5
 80127ca:	f7ed ff15 	bl	80005f8 <__aeabi_dmul>
 80127ce:	a336      	add	r3, pc, #216	; (adr r3, 80128a8 <__kernel_cos+0x168>)
 80127d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d4:	f7ed fd58 	bl	8000288 <__aeabi_dsub>
 80127d8:	4622      	mov	r2, r4
 80127da:	462b      	mov	r3, r5
 80127dc:	f7ed ff0c 	bl	80005f8 <__aeabi_dmul>
 80127e0:	a333      	add	r3, pc, #204	; (adr r3, 80128b0 <__kernel_cos+0x170>)
 80127e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e6:	f7ed fd51 	bl	800028c <__adddf3>
 80127ea:	4622      	mov	r2, r4
 80127ec:	462b      	mov	r3, r5
 80127ee:	f7ed ff03 	bl	80005f8 <__aeabi_dmul>
 80127f2:	4622      	mov	r2, r4
 80127f4:	462b      	mov	r3, r5
 80127f6:	f7ed feff 	bl	80005f8 <__aeabi_dmul>
 80127fa:	ec53 2b18 	vmov	r2, r3, d8
 80127fe:	4604      	mov	r4, r0
 8012800:	460d      	mov	r5, r1
 8012802:	4640      	mov	r0, r8
 8012804:	4649      	mov	r1, r9
 8012806:	f7ed fef7 	bl	80005f8 <__aeabi_dmul>
 801280a:	460b      	mov	r3, r1
 801280c:	4602      	mov	r2, r0
 801280e:	4629      	mov	r1, r5
 8012810:	4620      	mov	r0, r4
 8012812:	f7ed fd39 	bl	8000288 <__aeabi_dsub>
 8012816:	4b29      	ldr	r3, [pc, #164]	; (80128bc <__kernel_cos+0x17c>)
 8012818:	429e      	cmp	r6, r3
 801281a:	4680      	mov	r8, r0
 801281c:	4689      	mov	r9, r1
 801281e:	dc11      	bgt.n	8012844 <__kernel_cos+0x104>
 8012820:	4602      	mov	r2, r0
 8012822:	460b      	mov	r3, r1
 8012824:	4650      	mov	r0, sl
 8012826:	4659      	mov	r1, fp
 8012828:	f7ed fd2e 	bl	8000288 <__aeabi_dsub>
 801282c:	460b      	mov	r3, r1
 801282e:	4924      	ldr	r1, [pc, #144]	; (80128c0 <__kernel_cos+0x180>)
 8012830:	4602      	mov	r2, r0
 8012832:	2000      	movs	r0, #0
 8012834:	f7ed fd28 	bl	8000288 <__aeabi_dsub>
 8012838:	ecbd 8b02 	vpop	{d8}
 801283c:	ec41 0b10 	vmov	d0, r0, r1
 8012840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012844:	4b1f      	ldr	r3, [pc, #124]	; (80128c4 <__kernel_cos+0x184>)
 8012846:	491e      	ldr	r1, [pc, #120]	; (80128c0 <__kernel_cos+0x180>)
 8012848:	429e      	cmp	r6, r3
 801284a:	bfcc      	ite	gt
 801284c:	4d1e      	ldrgt	r5, [pc, #120]	; (80128c8 <__kernel_cos+0x188>)
 801284e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012852:	2400      	movs	r4, #0
 8012854:	4622      	mov	r2, r4
 8012856:	462b      	mov	r3, r5
 8012858:	2000      	movs	r0, #0
 801285a:	f7ed fd15 	bl	8000288 <__aeabi_dsub>
 801285e:	4622      	mov	r2, r4
 8012860:	4606      	mov	r6, r0
 8012862:	460f      	mov	r7, r1
 8012864:	462b      	mov	r3, r5
 8012866:	4650      	mov	r0, sl
 8012868:	4659      	mov	r1, fp
 801286a:	f7ed fd0d 	bl	8000288 <__aeabi_dsub>
 801286e:	4642      	mov	r2, r8
 8012870:	464b      	mov	r3, r9
 8012872:	f7ed fd09 	bl	8000288 <__aeabi_dsub>
 8012876:	4602      	mov	r2, r0
 8012878:	460b      	mov	r3, r1
 801287a:	4630      	mov	r0, r6
 801287c:	4639      	mov	r1, r7
 801287e:	e7d9      	b.n	8012834 <__kernel_cos+0xf4>
 8012880:	2000      	movs	r0, #0
 8012882:	490f      	ldr	r1, [pc, #60]	; (80128c0 <__kernel_cos+0x180>)
 8012884:	e7d8      	b.n	8012838 <__kernel_cos+0xf8>
 8012886:	bf00      	nop
 8012888:	be8838d4 	.word	0xbe8838d4
 801288c:	bda8fae9 	.word	0xbda8fae9
 8012890:	bdb4b1c4 	.word	0xbdb4b1c4
 8012894:	3e21ee9e 	.word	0x3e21ee9e
 8012898:	809c52ad 	.word	0x809c52ad
 801289c:	3e927e4f 	.word	0x3e927e4f
 80128a0:	19cb1590 	.word	0x19cb1590
 80128a4:	3efa01a0 	.word	0x3efa01a0
 80128a8:	16c15177 	.word	0x16c15177
 80128ac:	3f56c16c 	.word	0x3f56c16c
 80128b0:	5555554c 	.word	0x5555554c
 80128b4:	3fa55555 	.word	0x3fa55555
 80128b8:	3fe00000 	.word	0x3fe00000
 80128bc:	3fd33332 	.word	0x3fd33332
 80128c0:	3ff00000 	.word	0x3ff00000
 80128c4:	3fe90000 	.word	0x3fe90000
 80128c8:	3fd20000 	.word	0x3fd20000
 80128cc:	00000000 	.word	0x00000000

080128d0 <__kernel_rem_pio2>:
 80128d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d4:	ed2d 8b02 	vpush	{d8}
 80128d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80128dc:	1ed4      	subs	r4, r2, #3
 80128de:	9308      	str	r3, [sp, #32]
 80128e0:	9101      	str	r1, [sp, #4]
 80128e2:	4bc5      	ldr	r3, [pc, #788]	; (8012bf8 <__kernel_rem_pio2+0x328>)
 80128e4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80128e6:	9009      	str	r0, [sp, #36]	; 0x24
 80128e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128ec:	9304      	str	r3, [sp, #16]
 80128ee:	9b08      	ldr	r3, [sp, #32]
 80128f0:	3b01      	subs	r3, #1
 80128f2:	9307      	str	r3, [sp, #28]
 80128f4:	2318      	movs	r3, #24
 80128f6:	fb94 f4f3 	sdiv	r4, r4, r3
 80128fa:	f06f 0317 	mvn.w	r3, #23
 80128fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012902:	fb04 3303 	mla	r3, r4, r3, r3
 8012906:	eb03 0a02 	add.w	sl, r3, r2
 801290a:	9b04      	ldr	r3, [sp, #16]
 801290c:	9a07      	ldr	r2, [sp, #28]
 801290e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012be8 <__kernel_rem_pio2+0x318>
 8012912:	eb03 0802 	add.w	r8, r3, r2
 8012916:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012918:	1aa7      	subs	r7, r4, r2
 801291a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801291e:	ae22      	add	r6, sp, #136	; 0x88
 8012920:	2500      	movs	r5, #0
 8012922:	4545      	cmp	r5, r8
 8012924:	dd13      	ble.n	801294e <__kernel_rem_pio2+0x7e>
 8012926:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012be8 <__kernel_rem_pio2+0x318>
 801292a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801292e:	2600      	movs	r6, #0
 8012930:	9b04      	ldr	r3, [sp, #16]
 8012932:	429e      	cmp	r6, r3
 8012934:	dc32      	bgt.n	801299c <__kernel_rem_pio2+0xcc>
 8012936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012938:	9302      	str	r3, [sp, #8]
 801293a:	9b08      	ldr	r3, [sp, #32]
 801293c:	199d      	adds	r5, r3, r6
 801293e:	ab22      	add	r3, sp, #136	; 0x88
 8012940:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012944:	9306      	str	r3, [sp, #24]
 8012946:	ec59 8b18 	vmov	r8, r9, d8
 801294a:	2700      	movs	r7, #0
 801294c:	e01f      	b.n	801298e <__kernel_rem_pio2+0xbe>
 801294e:	42ef      	cmn	r7, r5
 8012950:	d407      	bmi.n	8012962 <__kernel_rem_pio2+0x92>
 8012952:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012956:	f7ed fde5 	bl	8000524 <__aeabi_i2d>
 801295a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801295e:	3501      	adds	r5, #1
 8012960:	e7df      	b.n	8012922 <__kernel_rem_pio2+0x52>
 8012962:	ec51 0b18 	vmov	r0, r1, d8
 8012966:	e7f8      	b.n	801295a <__kernel_rem_pio2+0x8a>
 8012968:	9906      	ldr	r1, [sp, #24]
 801296a:	9d02      	ldr	r5, [sp, #8]
 801296c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012970:	9106      	str	r1, [sp, #24]
 8012972:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012976:	9502      	str	r5, [sp, #8]
 8012978:	f7ed fe3e 	bl	80005f8 <__aeabi_dmul>
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	4640      	mov	r0, r8
 8012982:	4649      	mov	r1, r9
 8012984:	f7ed fc82 	bl	800028c <__adddf3>
 8012988:	3701      	adds	r7, #1
 801298a:	4680      	mov	r8, r0
 801298c:	4689      	mov	r9, r1
 801298e:	9b07      	ldr	r3, [sp, #28]
 8012990:	429f      	cmp	r7, r3
 8012992:	dde9      	ble.n	8012968 <__kernel_rem_pio2+0x98>
 8012994:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012998:	3601      	adds	r6, #1
 801299a:	e7c9      	b.n	8012930 <__kernel_rem_pio2+0x60>
 801299c:	9b04      	ldr	r3, [sp, #16]
 801299e:	aa0e      	add	r2, sp, #56	; 0x38
 80129a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129a4:	930c      	str	r3, [sp, #48]	; 0x30
 80129a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80129a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80129ac:	9c04      	ldr	r4, [sp, #16]
 80129ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80129b0:	ab9a      	add	r3, sp, #616	; 0x268
 80129b2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80129b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80129ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80129be:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80129c2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80129c6:	ab9a      	add	r3, sp, #616	; 0x268
 80129c8:	445b      	add	r3, fp
 80129ca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80129ce:	2500      	movs	r5, #0
 80129d0:	1b63      	subs	r3, r4, r5
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	dc78      	bgt.n	8012ac8 <__kernel_rem_pio2+0x1f8>
 80129d6:	4650      	mov	r0, sl
 80129d8:	ec49 8b10 	vmov	d0, r8, r9
 80129dc:	f000 fc98 	bl	8013310 <scalbn>
 80129e0:	ec57 6b10 	vmov	r6, r7, d0
 80129e4:	2200      	movs	r2, #0
 80129e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80129ea:	ee10 0a10 	vmov	r0, s0
 80129ee:	4639      	mov	r1, r7
 80129f0:	f7ed fe02 	bl	80005f8 <__aeabi_dmul>
 80129f4:	ec41 0b10 	vmov	d0, r0, r1
 80129f8:	f000 fb76 	bl	80130e8 <floor>
 80129fc:	2200      	movs	r2, #0
 80129fe:	ec51 0b10 	vmov	r0, r1, d0
 8012a02:	4b7e      	ldr	r3, [pc, #504]	; (8012bfc <__kernel_rem_pio2+0x32c>)
 8012a04:	f7ed fdf8 	bl	80005f8 <__aeabi_dmul>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	4630      	mov	r0, r6
 8012a0e:	4639      	mov	r1, r7
 8012a10:	f7ed fc3a 	bl	8000288 <__aeabi_dsub>
 8012a14:	460f      	mov	r7, r1
 8012a16:	4606      	mov	r6, r0
 8012a18:	f7ee f89e 	bl	8000b58 <__aeabi_d2iz>
 8012a1c:	9006      	str	r0, [sp, #24]
 8012a1e:	f7ed fd81 	bl	8000524 <__aeabi_i2d>
 8012a22:	4602      	mov	r2, r0
 8012a24:	460b      	mov	r3, r1
 8012a26:	4630      	mov	r0, r6
 8012a28:	4639      	mov	r1, r7
 8012a2a:	f7ed fc2d 	bl	8000288 <__aeabi_dsub>
 8012a2e:	f1ba 0f00 	cmp.w	sl, #0
 8012a32:	4606      	mov	r6, r0
 8012a34:	460f      	mov	r7, r1
 8012a36:	dd6c      	ble.n	8012b12 <__kernel_rem_pio2+0x242>
 8012a38:	1e62      	subs	r2, r4, #1
 8012a3a:	ab0e      	add	r3, sp, #56	; 0x38
 8012a3c:	f1ca 0118 	rsb	r1, sl, #24
 8012a40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012a44:	9d06      	ldr	r5, [sp, #24]
 8012a46:	fa40 f301 	asr.w	r3, r0, r1
 8012a4a:	441d      	add	r5, r3
 8012a4c:	408b      	lsls	r3, r1
 8012a4e:	1ac0      	subs	r0, r0, r3
 8012a50:	ab0e      	add	r3, sp, #56	; 0x38
 8012a52:	9506      	str	r5, [sp, #24]
 8012a54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012a58:	f1ca 0317 	rsb	r3, sl, #23
 8012a5c:	fa40 f303 	asr.w	r3, r0, r3
 8012a60:	9302      	str	r3, [sp, #8]
 8012a62:	9b02      	ldr	r3, [sp, #8]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dd62      	ble.n	8012b2e <__kernel_rem_pio2+0x25e>
 8012a68:	9b06      	ldr	r3, [sp, #24]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	9306      	str	r3, [sp, #24]
 8012a70:	4615      	mov	r5, r2
 8012a72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012a76:	4294      	cmp	r4, r2
 8012a78:	f300 8095 	bgt.w	8012ba6 <__kernel_rem_pio2+0x2d6>
 8012a7c:	f1ba 0f00 	cmp.w	sl, #0
 8012a80:	dd07      	ble.n	8012a92 <__kernel_rem_pio2+0x1c2>
 8012a82:	f1ba 0f01 	cmp.w	sl, #1
 8012a86:	f000 80a2 	beq.w	8012bce <__kernel_rem_pio2+0x2fe>
 8012a8a:	f1ba 0f02 	cmp.w	sl, #2
 8012a8e:	f000 80c1 	beq.w	8012c14 <__kernel_rem_pio2+0x344>
 8012a92:	9b02      	ldr	r3, [sp, #8]
 8012a94:	2b02      	cmp	r3, #2
 8012a96:	d14a      	bne.n	8012b2e <__kernel_rem_pio2+0x25e>
 8012a98:	4632      	mov	r2, r6
 8012a9a:	463b      	mov	r3, r7
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	4958      	ldr	r1, [pc, #352]	; (8012c00 <__kernel_rem_pio2+0x330>)
 8012aa0:	f7ed fbf2 	bl	8000288 <__aeabi_dsub>
 8012aa4:	4606      	mov	r6, r0
 8012aa6:	460f      	mov	r7, r1
 8012aa8:	2d00      	cmp	r5, #0
 8012aaa:	d040      	beq.n	8012b2e <__kernel_rem_pio2+0x25e>
 8012aac:	4650      	mov	r0, sl
 8012aae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012bf0 <__kernel_rem_pio2+0x320>
 8012ab2:	f000 fc2d 	bl	8013310 <scalbn>
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	4639      	mov	r1, r7
 8012aba:	ec53 2b10 	vmov	r2, r3, d0
 8012abe:	f7ed fbe3 	bl	8000288 <__aeabi_dsub>
 8012ac2:	4606      	mov	r6, r0
 8012ac4:	460f      	mov	r7, r1
 8012ac6:	e032      	b.n	8012b2e <__kernel_rem_pio2+0x25e>
 8012ac8:	2200      	movs	r2, #0
 8012aca:	4b4e      	ldr	r3, [pc, #312]	; (8012c04 <__kernel_rem_pio2+0x334>)
 8012acc:	4640      	mov	r0, r8
 8012ace:	4649      	mov	r1, r9
 8012ad0:	f7ed fd92 	bl	80005f8 <__aeabi_dmul>
 8012ad4:	f7ee f840 	bl	8000b58 <__aeabi_d2iz>
 8012ad8:	f7ed fd24 	bl	8000524 <__aeabi_i2d>
 8012adc:	2200      	movs	r2, #0
 8012ade:	4b4a      	ldr	r3, [pc, #296]	; (8012c08 <__kernel_rem_pio2+0x338>)
 8012ae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ae4:	f7ed fd88 	bl	80005f8 <__aeabi_dmul>
 8012ae8:	4602      	mov	r2, r0
 8012aea:	460b      	mov	r3, r1
 8012aec:	4640      	mov	r0, r8
 8012aee:	4649      	mov	r1, r9
 8012af0:	f7ed fbca 	bl	8000288 <__aeabi_dsub>
 8012af4:	f7ee f830 	bl	8000b58 <__aeabi_d2iz>
 8012af8:	ab0e      	add	r3, sp, #56	; 0x38
 8012afa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012afe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012b02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b06:	f7ed fbc1 	bl	800028c <__adddf3>
 8012b0a:	3501      	adds	r5, #1
 8012b0c:	4680      	mov	r8, r0
 8012b0e:	4689      	mov	r9, r1
 8012b10:	e75e      	b.n	80129d0 <__kernel_rem_pio2+0x100>
 8012b12:	d105      	bne.n	8012b20 <__kernel_rem_pio2+0x250>
 8012b14:	1e63      	subs	r3, r4, #1
 8012b16:	aa0e      	add	r2, sp, #56	; 0x38
 8012b18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012b1c:	15c3      	asrs	r3, r0, #23
 8012b1e:	e79f      	b.n	8012a60 <__kernel_rem_pio2+0x190>
 8012b20:	2200      	movs	r2, #0
 8012b22:	4b3a      	ldr	r3, [pc, #232]	; (8012c0c <__kernel_rem_pio2+0x33c>)
 8012b24:	f7ed ffee 	bl	8000b04 <__aeabi_dcmpge>
 8012b28:	2800      	cmp	r0, #0
 8012b2a:	d139      	bne.n	8012ba0 <__kernel_rem_pio2+0x2d0>
 8012b2c:	9002      	str	r0, [sp, #8]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	2300      	movs	r3, #0
 8012b32:	4630      	mov	r0, r6
 8012b34:	4639      	mov	r1, r7
 8012b36:	f7ed ffc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	f000 80c7 	beq.w	8012cce <__kernel_rem_pio2+0x3fe>
 8012b40:	1e65      	subs	r5, r4, #1
 8012b42:	462b      	mov	r3, r5
 8012b44:	2200      	movs	r2, #0
 8012b46:	9904      	ldr	r1, [sp, #16]
 8012b48:	428b      	cmp	r3, r1
 8012b4a:	da6a      	bge.n	8012c22 <__kernel_rem_pio2+0x352>
 8012b4c:	2a00      	cmp	r2, #0
 8012b4e:	f000 8088 	beq.w	8012c62 <__kernel_rem_pio2+0x392>
 8012b52:	ab0e      	add	r3, sp, #56	; 0x38
 8012b54:	f1aa 0a18 	sub.w	sl, sl, #24
 8012b58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f000 80b4 	beq.w	8012cca <__kernel_rem_pio2+0x3fa>
 8012b62:	4650      	mov	r0, sl
 8012b64:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012bf0 <__kernel_rem_pio2+0x320>
 8012b68:	f000 fbd2 	bl	8013310 <scalbn>
 8012b6c:	00ec      	lsls	r4, r5, #3
 8012b6e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012b70:	191e      	adds	r6, r3, r4
 8012b72:	ec59 8b10 	vmov	r8, r9, d0
 8012b76:	f106 0a08 	add.w	sl, r6, #8
 8012b7a:	462f      	mov	r7, r5
 8012b7c:	2f00      	cmp	r7, #0
 8012b7e:	f280 80df 	bge.w	8012d40 <__kernel_rem_pio2+0x470>
 8012b82:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012be8 <__kernel_rem_pio2+0x318>
 8012b86:	f04f 0a00 	mov.w	sl, #0
 8012b8a:	eba5 030a 	sub.w	r3, r5, sl
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f2c0 810a 	blt.w	8012da8 <__kernel_rem_pio2+0x4d8>
 8012b94:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012c10 <__kernel_rem_pio2+0x340>
 8012b98:	ec59 8b18 	vmov	r8, r9, d8
 8012b9c:	2700      	movs	r7, #0
 8012b9e:	e0f5      	b.n	8012d8c <__kernel_rem_pio2+0x4bc>
 8012ba0:	2302      	movs	r3, #2
 8012ba2:	9302      	str	r3, [sp, #8]
 8012ba4:	e760      	b.n	8012a68 <__kernel_rem_pio2+0x198>
 8012ba6:	ab0e      	add	r3, sp, #56	; 0x38
 8012ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bac:	b94d      	cbnz	r5, 8012bc2 <__kernel_rem_pio2+0x2f2>
 8012bae:	b12b      	cbz	r3, 8012bbc <__kernel_rem_pio2+0x2ec>
 8012bb0:	a80e      	add	r0, sp, #56	; 0x38
 8012bb2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012bb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012bba:	2301      	movs	r3, #1
 8012bbc:	3201      	adds	r2, #1
 8012bbe:	461d      	mov	r5, r3
 8012bc0:	e759      	b.n	8012a76 <__kernel_rem_pio2+0x1a6>
 8012bc2:	a80e      	add	r0, sp, #56	; 0x38
 8012bc4:	1acb      	subs	r3, r1, r3
 8012bc6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012bca:	462b      	mov	r3, r5
 8012bcc:	e7f6      	b.n	8012bbc <__kernel_rem_pio2+0x2ec>
 8012bce:	1e62      	subs	r2, r4, #1
 8012bd0:	ab0e      	add	r3, sp, #56	; 0x38
 8012bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bd6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012bda:	a90e      	add	r1, sp, #56	; 0x38
 8012bdc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012be0:	e757      	b.n	8012a92 <__kernel_rem_pio2+0x1c2>
 8012be2:	bf00      	nop
 8012be4:	f3af 8000 	nop.w
	...
 8012bf4:	3ff00000 	.word	0x3ff00000
 8012bf8:	08013900 	.word	0x08013900
 8012bfc:	40200000 	.word	0x40200000
 8012c00:	3ff00000 	.word	0x3ff00000
 8012c04:	3e700000 	.word	0x3e700000
 8012c08:	41700000 	.word	0x41700000
 8012c0c:	3fe00000 	.word	0x3fe00000
 8012c10:	080138c0 	.word	0x080138c0
 8012c14:	1e62      	subs	r2, r4, #1
 8012c16:	ab0e      	add	r3, sp, #56	; 0x38
 8012c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012c20:	e7db      	b.n	8012bda <__kernel_rem_pio2+0x30a>
 8012c22:	a90e      	add	r1, sp, #56	; 0x38
 8012c24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012c28:	3b01      	subs	r3, #1
 8012c2a:	430a      	orrs	r2, r1
 8012c2c:	e78b      	b.n	8012b46 <__kernel_rem_pio2+0x276>
 8012c2e:	3301      	adds	r3, #1
 8012c30:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012c34:	2900      	cmp	r1, #0
 8012c36:	d0fa      	beq.n	8012c2e <__kernel_rem_pio2+0x35e>
 8012c38:	9a08      	ldr	r2, [sp, #32]
 8012c3a:	4422      	add	r2, r4
 8012c3c:	00d2      	lsls	r2, r2, #3
 8012c3e:	a922      	add	r1, sp, #136	; 0x88
 8012c40:	18e3      	adds	r3, r4, r3
 8012c42:	9206      	str	r2, [sp, #24]
 8012c44:	440a      	add	r2, r1
 8012c46:	9302      	str	r3, [sp, #8]
 8012c48:	f10b 0108 	add.w	r1, fp, #8
 8012c4c:	f102 0308 	add.w	r3, r2, #8
 8012c50:	1c66      	adds	r6, r4, #1
 8012c52:	910a      	str	r1, [sp, #40]	; 0x28
 8012c54:	2500      	movs	r5, #0
 8012c56:	930d      	str	r3, [sp, #52]	; 0x34
 8012c58:	9b02      	ldr	r3, [sp, #8]
 8012c5a:	42b3      	cmp	r3, r6
 8012c5c:	da04      	bge.n	8012c68 <__kernel_rem_pio2+0x398>
 8012c5e:	461c      	mov	r4, r3
 8012c60:	e6a6      	b.n	80129b0 <__kernel_rem_pio2+0xe0>
 8012c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c64:	2301      	movs	r3, #1
 8012c66:	e7e3      	b.n	8012c30 <__kernel_rem_pio2+0x360>
 8012c68:	9b06      	ldr	r3, [sp, #24]
 8012c6a:	18ef      	adds	r7, r5, r3
 8012c6c:	ab22      	add	r3, sp, #136	; 0x88
 8012c6e:	441f      	add	r7, r3
 8012c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012c76:	f7ed fc55 	bl	8000524 <__aeabi_i2d>
 8012c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c7c:	461c      	mov	r4, r3
 8012c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c80:	e9c7 0100 	strd	r0, r1, [r7]
 8012c84:	eb03 0b05 	add.w	fp, r3, r5
 8012c88:	2700      	movs	r7, #0
 8012c8a:	f04f 0800 	mov.w	r8, #0
 8012c8e:	f04f 0900 	mov.w	r9, #0
 8012c92:	9b07      	ldr	r3, [sp, #28]
 8012c94:	429f      	cmp	r7, r3
 8012c96:	dd08      	ble.n	8012caa <__kernel_rem_pio2+0x3da>
 8012c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c9a:	aa72      	add	r2, sp, #456	; 0x1c8
 8012c9c:	18eb      	adds	r3, r5, r3
 8012c9e:	4413      	add	r3, r2
 8012ca0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012ca4:	3601      	adds	r6, #1
 8012ca6:	3508      	adds	r5, #8
 8012ca8:	e7d6      	b.n	8012c58 <__kernel_rem_pio2+0x388>
 8012caa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012cae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012cb2:	f7ed fca1 	bl	80005f8 <__aeabi_dmul>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	460b      	mov	r3, r1
 8012cba:	4640      	mov	r0, r8
 8012cbc:	4649      	mov	r1, r9
 8012cbe:	f7ed fae5 	bl	800028c <__adddf3>
 8012cc2:	3701      	adds	r7, #1
 8012cc4:	4680      	mov	r8, r0
 8012cc6:	4689      	mov	r9, r1
 8012cc8:	e7e3      	b.n	8012c92 <__kernel_rem_pio2+0x3c2>
 8012cca:	3d01      	subs	r5, #1
 8012ccc:	e741      	b.n	8012b52 <__kernel_rem_pio2+0x282>
 8012cce:	f1ca 0000 	rsb	r0, sl, #0
 8012cd2:	ec47 6b10 	vmov	d0, r6, r7
 8012cd6:	f000 fb1b 	bl	8013310 <scalbn>
 8012cda:	ec57 6b10 	vmov	r6, r7, d0
 8012cde:	2200      	movs	r2, #0
 8012ce0:	4b99      	ldr	r3, [pc, #612]	; (8012f48 <__kernel_rem_pio2+0x678>)
 8012ce2:	ee10 0a10 	vmov	r0, s0
 8012ce6:	4639      	mov	r1, r7
 8012ce8:	f7ed ff0c 	bl	8000b04 <__aeabi_dcmpge>
 8012cec:	b1f8      	cbz	r0, 8012d2e <__kernel_rem_pio2+0x45e>
 8012cee:	2200      	movs	r2, #0
 8012cf0:	4b96      	ldr	r3, [pc, #600]	; (8012f4c <__kernel_rem_pio2+0x67c>)
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	4639      	mov	r1, r7
 8012cf6:	f7ed fc7f 	bl	80005f8 <__aeabi_dmul>
 8012cfa:	f7ed ff2d 	bl	8000b58 <__aeabi_d2iz>
 8012cfe:	4680      	mov	r8, r0
 8012d00:	f7ed fc10 	bl	8000524 <__aeabi_i2d>
 8012d04:	2200      	movs	r2, #0
 8012d06:	4b90      	ldr	r3, [pc, #576]	; (8012f48 <__kernel_rem_pio2+0x678>)
 8012d08:	f7ed fc76 	bl	80005f8 <__aeabi_dmul>
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	4602      	mov	r2, r0
 8012d10:	4639      	mov	r1, r7
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7ed fab8 	bl	8000288 <__aeabi_dsub>
 8012d18:	f7ed ff1e 	bl	8000b58 <__aeabi_d2iz>
 8012d1c:	1c65      	adds	r5, r4, #1
 8012d1e:	ab0e      	add	r3, sp, #56	; 0x38
 8012d20:	f10a 0a18 	add.w	sl, sl, #24
 8012d24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012d28:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012d2c:	e719      	b.n	8012b62 <__kernel_rem_pio2+0x292>
 8012d2e:	4630      	mov	r0, r6
 8012d30:	4639      	mov	r1, r7
 8012d32:	f7ed ff11 	bl	8000b58 <__aeabi_d2iz>
 8012d36:	ab0e      	add	r3, sp, #56	; 0x38
 8012d38:	4625      	mov	r5, r4
 8012d3a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012d3e:	e710      	b.n	8012b62 <__kernel_rem_pio2+0x292>
 8012d40:	ab0e      	add	r3, sp, #56	; 0x38
 8012d42:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012d46:	f7ed fbed 	bl	8000524 <__aeabi_i2d>
 8012d4a:	4642      	mov	r2, r8
 8012d4c:	464b      	mov	r3, r9
 8012d4e:	f7ed fc53 	bl	80005f8 <__aeabi_dmul>
 8012d52:	2200      	movs	r2, #0
 8012d54:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012d58:	4b7c      	ldr	r3, [pc, #496]	; (8012f4c <__kernel_rem_pio2+0x67c>)
 8012d5a:	4640      	mov	r0, r8
 8012d5c:	4649      	mov	r1, r9
 8012d5e:	f7ed fc4b 	bl	80005f8 <__aeabi_dmul>
 8012d62:	3f01      	subs	r7, #1
 8012d64:	4680      	mov	r8, r0
 8012d66:	4689      	mov	r9, r1
 8012d68:	e708      	b.n	8012b7c <__kernel_rem_pio2+0x2ac>
 8012d6a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d72:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012d76:	f7ed fc3f 	bl	80005f8 <__aeabi_dmul>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	4640      	mov	r0, r8
 8012d80:	4649      	mov	r1, r9
 8012d82:	f7ed fa83 	bl	800028c <__adddf3>
 8012d86:	3701      	adds	r7, #1
 8012d88:	4680      	mov	r8, r0
 8012d8a:	4689      	mov	r9, r1
 8012d8c:	9b04      	ldr	r3, [sp, #16]
 8012d8e:	429f      	cmp	r7, r3
 8012d90:	dc01      	bgt.n	8012d96 <__kernel_rem_pio2+0x4c6>
 8012d92:	45ba      	cmp	sl, r7
 8012d94:	dae9      	bge.n	8012d6a <__kernel_rem_pio2+0x49a>
 8012d96:	ab4a      	add	r3, sp, #296	; 0x128
 8012d98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012d9c:	e9c3 8900 	strd	r8, r9, [r3]
 8012da0:	f10a 0a01 	add.w	sl, sl, #1
 8012da4:	3e08      	subs	r6, #8
 8012da6:	e6f0      	b.n	8012b8a <__kernel_rem_pio2+0x2ba>
 8012da8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012daa:	2b03      	cmp	r3, #3
 8012dac:	d85b      	bhi.n	8012e66 <__kernel_rem_pio2+0x596>
 8012dae:	e8df f003 	tbb	[pc, r3]
 8012db2:	264a      	.short	0x264a
 8012db4:	0226      	.short	0x0226
 8012db6:	ab9a      	add	r3, sp, #616	; 0x268
 8012db8:	441c      	add	r4, r3
 8012dba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012dbe:	46a2      	mov	sl, r4
 8012dc0:	46ab      	mov	fp, r5
 8012dc2:	f1bb 0f00 	cmp.w	fp, #0
 8012dc6:	dc6c      	bgt.n	8012ea2 <__kernel_rem_pio2+0x5d2>
 8012dc8:	46a2      	mov	sl, r4
 8012dca:	46ab      	mov	fp, r5
 8012dcc:	f1bb 0f01 	cmp.w	fp, #1
 8012dd0:	f300 8086 	bgt.w	8012ee0 <__kernel_rem_pio2+0x610>
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	2d01      	cmp	r5, #1
 8012dda:	f300 80a0 	bgt.w	8012f1e <__kernel_rem_pio2+0x64e>
 8012dde:	9b02      	ldr	r3, [sp, #8]
 8012de0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012de4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	f040 809e 	bne.w	8012f2a <__kernel_rem_pio2+0x65a>
 8012dee:	9b01      	ldr	r3, [sp, #4]
 8012df0:	e9c3 7800 	strd	r7, r8, [r3]
 8012df4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012df8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012dfc:	e033      	b.n	8012e66 <__kernel_rem_pio2+0x596>
 8012dfe:	3408      	adds	r4, #8
 8012e00:	ab4a      	add	r3, sp, #296	; 0x128
 8012e02:	441c      	add	r4, r3
 8012e04:	462e      	mov	r6, r5
 8012e06:	2000      	movs	r0, #0
 8012e08:	2100      	movs	r1, #0
 8012e0a:	2e00      	cmp	r6, #0
 8012e0c:	da3a      	bge.n	8012e84 <__kernel_rem_pio2+0x5b4>
 8012e0e:	9b02      	ldr	r3, [sp, #8]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d03d      	beq.n	8012e90 <__kernel_rem_pio2+0x5c0>
 8012e14:	4602      	mov	r2, r0
 8012e16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e1a:	9c01      	ldr	r4, [sp, #4]
 8012e1c:	e9c4 2300 	strd	r2, r3, [r4]
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012e28:	f7ed fa2e 	bl	8000288 <__aeabi_dsub>
 8012e2c:	ae4c      	add	r6, sp, #304	; 0x130
 8012e2e:	2401      	movs	r4, #1
 8012e30:	42a5      	cmp	r5, r4
 8012e32:	da30      	bge.n	8012e96 <__kernel_rem_pio2+0x5c6>
 8012e34:	9b02      	ldr	r3, [sp, #8]
 8012e36:	b113      	cbz	r3, 8012e3e <__kernel_rem_pio2+0x56e>
 8012e38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	9b01      	ldr	r3, [sp, #4]
 8012e40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012e44:	e00f      	b.n	8012e66 <__kernel_rem_pio2+0x596>
 8012e46:	ab9a      	add	r3, sp, #616	; 0x268
 8012e48:	441c      	add	r4, r3
 8012e4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012e4e:	2000      	movs	r0, #0
 8012e50:	2100      	movs	r1, #0
 8012e52:	2d00      	cmp	r5, #0
 8012e54:	da10      	bge.n	8012e78 <__kernel_rem_pio2+0x5a8>
 8012e56:	9b02      	ldr	r3, [sp, #8]
 8012e58:	b113      	cbz	r3, 8012e60 <__kernel_rem_pio2+0x590>
 8012e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e5e:	4619      	mov	r1, r3
 8012e60:	9b01      	ldr	r3, [sp, #4]
 8012e62:	e9c3 0100 	strd	r0, r1, [r3]
 8012e66:	9b06      	ldr	r3, [sp, #24]
 8012e68:	f003 0007 	and.w	r0, r3, #7
 8012e6c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012e70:	ecbd 8b02 	vpop	{d8}
 8012e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e78:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e7c:	f7ed fa06 	bl	800028c <__adddf3>
 8012e80:	3d01      	subs	r5, #1
 8012e82:	e7e6      	b.n	8012e52 <__kernel_rem_pio2+0x582>
 8012e84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e88:	f7ed fa00 	bl	800028c <__adddf3>
 8012e8c:	3e01      	subs	r6, #1
 8012e8e:	e7bc      	b.n	8012e0a <__kernel_rem_pio2+0x53a>
 8012e90:	4602      	mov	r2, r0
 8012e92:	460b      	mov	r3, r1
 8012e94:	e7c1      	b.n	8012e1a <__kernel_rem_pio2+0x54a>
 8012e96:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012e9a:	f7ed f9f7 	bl	800028c <__adddf3>
 8012e9e:	3401      	adds	r4, #1
 8012ea0:	e7c6      	b.n	8012e30 <__kernel_rem_pio2+0x560>
 8012ea2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012ea6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012eaa:	4640      	mov	r0, r8
 8012eac:	ec53 2b17 	vmov	r2, r3, d7
 8012eb0:	4649      	mov	r1, r9
 8012eb2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012eb6:	f7ed f9e9 	bl	800028c <__adddf3>
 8012eba:	4602      	mov	r2, r0
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	4606      	mov	r6, r0
 8012ec0:	460f      	mov	r7, r1
 8012ec2:	4640      	mov	r0, r8
 8012ec4:	4649      	mov	r1, r9
 8012ec6:	f7ed f9df 	bl	8000288 <__aeabi_dsub>
 8012eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ece:	f7ed f9dd 	bl	800028c <__adddf3>
 8012ed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012ed6:	e9ca 0100 	strd	r0, r1, [sl]
 8012eda:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012ede:	e770      	b.n	8012dc2 <__kernel_rem_pio2+0x4f2>
 8012ee0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012ee4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012ee8:	4630      	mov	r0, r6
 8012eea:	ec53 2b17 	vmov	r2, r3, d7
 8012eee:	4639      	mov	r1, r7
 8012ef0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012ef4:	f7ed f9ca 	bl	800028c <__adddf3>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	460b      	mov	r3, r1
 8012efc:	4680      	mov	r8, r0
 8012efe:	4689      	mov	r9, r1
 8012f00:	4630      	mov	r0, r6
 8012f02:	4639      	mov	r1, r7
 8012f04:	f7ed f9c0 	bl	8000288 <__aeabi_dsub>
 8012f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f0c:	f7ed f9be 	bl	800028c <__adddf3>
 8012f10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012f14:	e9ca 0100 	strd	r0, r1, [sl]
 8012f18:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012f1c:	e756      	b.n	8012dcc <__kernel_rem_pio2+0x4fc>
 8012f1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012f22:	f7ed f9b3 	bl	800028c <__adddf3>
 8012f26:	3d01      	subs	r5, #1
 8012f28:	e756      	b.n	8012dd8 <__kernel_rem_pio2+0x508>
 8012f2a:	9b01      	ldr	r3, [sp, #4]
 8012f2c:	9a01      	ldr	r2, [sp, #4]
 8012f2e:	601f      	str	r7, [r3, #0]
 8012f30:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012f34:	605c      	str	r4, [r3, #4]
 8012f36:	609d      	str	r5, [r3, #8]
 8012f38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012f3c:	60d3      	str	r3, [r2, #12]
 8012f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f42:	6110      	str	r0, [r2, #16]
 8012f44:	6153      	str	r3, [r2, #20]
 8012f46:	e78e      	b.n	8012e66 <__kernel_rem_pio2+0x596>
 8012f48:	41700000 	.word	0x41700000
 8012f4c:	3e700000 	.word	0x3e700000

08012f50 <__kernel_sin>:
 8012f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	ec55 4b10 	vmov	r4, r5, d0
 8012f58:	b085      	sub	sp, #20
 8012f5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f5e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012f62:	ed8d 1b00 	vstr	d1, [sp]
 8012f66:	9002      	str	r0, [sp, #8]
 8012f68:	da06      	bge.n	8012f78 <__kernel_sin+0x28>
 8012f6a:	ee10 0a10 	vmov	r0, s0
 8012f6e:	4629      	mov	r1, r5
 8012f70:	f7ed fdf2 	bl	8000b58 <__aeabi_d2iz>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d051      	beq.n	801301c <__kernel_sin+0xcc>
 8012f78:	4622      	mov	r2, r4
 8012f7a:	462b      	mov	r3, r5
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	4629      	mov	r1, r5
 8012f80:	f7ed fb3a 	bl	80005f8 <__aeabi_dmul>
 8012f84:	4682      	mov	sl, r0
 8012f86:	468b      	mov	fp, r1
 8012f88:	4602      	mov	r2, r0
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	4629      	mov	r1, r5
 8012f90:	f7ed fb32 	bl	80005f8 <__aeabi_dmul>
 8012f94:	a341      	add	r3, pc, #260	; (adr r3, 801309c <__kernel_sin+0x14c>)
 8012f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9a:	4680      	mov	r8, r0
 8012f9c:	4689      	mov	r9, r1
 8012f9e:	4650      	mov	r0, sl
 8012fa0:	4659      	mov	r1, fp
 8012fa2:	f7ed fb29 	bl	80005f8 <__aeabi_dmul>
 8012fa6:	a33f      	add	r3, pc, #252	; (adr r3, 80130a4 <__kernel_sin+0x154>)
 8012fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fac:	f7ed f96c 	bl	8000288 <__aeabi_dsub>
 8012fb0:	4652      	mov	r2, sl
 8012fb2:	465b      	mov	r3, fp
 8012fb4:	f7ed fb20 	bl	80005f8 <__aeabi_dmul>
 8012fb8:	a33c      	add	r3, pc, #240	; (adr r3, 80130ac <__kernel_sin+0x15c>)
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	f7ed f965 	bl	800028c <__adddf3>
 8012fc2:	4652      	mov	r2, sl
 8012fc4:	465b      	mov	r3, fp
 8012fc6:	f7ed fb17 	bl	80005f8 <__aeabi_dmul>
 8012fca:	a33a      	add	r3, pc, #232	; (adr r3, 80130b4 <__kernel_sin+0x164>)
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	f7ed f95a 	bl	8000288 <__aeabi_dsub>
 8012fd4:	4652      	mov	r2, sl
 8012fd6:	465b      	mov	r3, fp
 8012fd8:	f7ed fb0e 	bl	80005f8 <__aeabi_dmul>
 8012fdc:	a337      	add	r3, pc, #220	; (adr r3, 80130bc <__kernel_sin+0x16c>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	f7ed f953 	bl	800028c <__adddf3>
 8012fe6:	9b02      	ldr	r3, [sp, #8]
 8012fe8:	4606      	mov	r6, r0
 8012fea:	460f      	mov	r7, r1
 8012fec:	b9db      	cbnz	r3, 8013026 <__kernel_sin+0xd6>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	4650      	mov	r0, sl
 8012ff4:	4659      	mov	r1, fp
 8012ff6:	f7ed faff 	bl	80005f8 <__aeabi_dmul>
 8012ffa:	a325      	add	r3, pc, #148	; (adr r3, 8013090 <__kernel_sin+0x140>)
 8012ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013000:	f7ed f942 	bl	8000288 <__aeabi_dsub>
 8013004:	4642      	mov	r2, r8
 8013006:	464b      	mov	r3, r9
 8013008:	f7ed faf6 	bl	80005f8 <__aeabi_dmul>
 801300c:	4602      	mov	r2, r0
 801300e:	460b      	mov	r3, r1
 8013010:	4620      	mov	r0, r4
 8013012:	4629      	mov	r1, r5
 8013014:	f7ed f93a 	bl	800028c <__adddf3>
 8013018:	4604      	mov	r4, r0
 801301a:	460d      	mov	r5, r1
 801301c:	ec45 4b10 	vmov	d0, r4, r5
 8013020:	b005      	add	sp, #20
 8013022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013026:	2200      	movs	r2, #0
 8013028:	4b1b      	ldr	r3, [pc, #108]	; (8013098 <__kernel_sin+0x148>)
 801302a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801302e:	f7ed fae3 	bl	80005f8 <__aeabi_dmul>
 8013032:	4632      	mov	r2, r6
 8013034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013038:	463b      	mov	r3, r7
 801303a:	4640      	mov	r0, r8
 801303c:	4649      	mov	r1, r9
 801303e:	f7ed fadb 	bl	80005f8 <__aeabi_dmul>
 8013042:	4602      	mov	r2, r0
 8013044:	460b      	mov	r3, r1
 8013046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801304a:	f7ed f91d 	bl	8000288 <__aeabi_dsub>
 801304e:	4652      	mov	r2, sl
 8013050:	465b      	mov	r3, fp
 8013052:	f7ed fad1 	bl	80005f8 <__aeabi_dmul>
 8013056:	e9dd 2300 	ldrd	r2, r3, [sp]
 801305a:	f7ed f915 	bl	8000288 <__aeabi_dsub>
 801305e:	a30c      	add	r3, pc, #48	; (adr r3, 8013090 <__kernel_sin+0x140>)
 8013060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013064:	4606      	mov	r6, r0
 8013066:	460f      	mov	r7, r1
 8013068:	4640      	mov	r0, r8
 801306a:	4649      	mov	r1, r9
 801306c:	f7ed fac4 	bl	80005f8 <__aeabi_dmul>
 8013070:	4602      	mov	r2, r0
 8013072:	460b      	mov	r3, r1
 8013074:	4630      	mov	r0, r6
 8013076:	4639      	mov	r1, r7
 8013078:	f7ed f908 	bl	800028c <__adddf3>
 801307c:	4602      	mov	r2, r0
 801307e:	460b      	mov	r3, r1
 8013080:	4620      	mov	r0, r4
 8013082:	4629      	mov	r1, r5
 8013084:	f7ed f900 	bl	8000288 <__aeabi_dsub>
 8013088:	e7c6      	b.n	8013018 <__kernel_sin+0xc8>
 801308a:	bf00      	nop
 801308c:	f3af 8000 	nop.w
 8013090:	55555549 	.word	0x55555549
 8013094:	3fc55555 	.word	0x3fc55555
 8013098:	3fe00000 	.word	0x3fe00000
 801309c:	5acfd57c 	.word	0x5acfd57c
 80130a0:	3de5d93a 	.word	0x3de5d93a
 80130a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80130a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80130ac:	57b1fe7d 	.word	0x57b1fe7d
 80130b0:	3ec71de3 	.word	0x3ec71de3
 80130b4:	19c161d5 	.word	0x19c161d5
 80130b8:	3f2a01a0 	.word	0x3f2a01a0
 80130bc:	1110f8a6 	.word	0x1110f8a6
 80130c0:	3f811111 	.word	0x3f811111

080130c4 <fabs>:
 80130c4:	ec51 0b10 	vmov	r0, r1, d0
 80130c8:	ee10 2a10 	vmov	r2, s0
 80130cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130d0:	ec43 2b10 	vmov	d0, r2, r3
 80130d4:	4770      	bx	lr

080130d6 <finite>:
 80130d6:	ee10 3a90 	vmov	r3, s1
 80130da:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80130de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80130e2:	0fc0      	lsrs	r0, r0, #31
 80130e4:	4770      	bx	lr
	...

080130e8 <floor>:
 80130e8:	ec51 0b10 	vmov	r0, r1, d0
 80130ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80130f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80130f8:	2e13      	cmp	r6, #19
 80130fa:	460c      	mov	r4, r1
 80130fc:	ee10 5a10 	vmov	r5, s0
 8013100:	4680      	mov	r8, r0
 8013102:	dc34      	bgt.n	801316e <floor+0x86>
 8013104:	2e00      	cmp	r6, #0
 8013106:	da16      	bge.n	8013136 <floor+0x4e>
 8013108:	a335      	add	r3, pc, #212	; (adr r3, 80131e0 <floor+0xf8>)
 801310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310e:	f7ed f8bd 	bl	800028c <__adddf3>
 8013112:	2200      	movs	r2, #0
 8013114:	2300      	movs	r3, #0
 8013116:	f7ed fcff 	bl	8000b18 <__aeabi_dcmpgt>
 801311a:	b148      	cbz	r0, 8013130 <floor+0x48>
 801311c:	2c00      	cmp	r4, #0
 801311e:	da59      	bge.n	80131d4 <floor+0xec>
 8013120:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013124:	4a30      	ldr	r2, [pc, #192]	; (80131e8 <floor+0x100>)
 8013126:	432b      	orrs	r3, r5
 8013128:	2500      	movs	r5, #0
 801312a:	42ab      	cmp	r3, r5
 801312c:	bf18      	it	ne
 801312e:	4614      	movne	r4, r2
 8013130:	4621      	mov	r1, r4
 8013132:	4628      	mov	r0, r5
 8013134:	e025      	b.n	8013182 <floor+0x9a>
 8013136:	4f2d      	ldr	r7, [pc, #180]	; (80131ec <floor+0x104>)
 8013138:	4137      	asrs	r7, r6
 801313a:	ea01 0307 	and.w	r3, r1, r7
 801313e:	4303      	orrs	r3, r0
 8013140:	d01f      	beq.n	8013182 <floor+0x9a>
 8013142:	a327      	add	r3, pc, #156	; (adr r3, 80131e0 <floor+0xf8>)
 8013144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013148:	f7ed f8a0 	bl	800028c <__adddf3>
 801314c:	2200      	movs	r2, #0
 801314e:	2300      	movs	r3, #0
 8013150:	f7ed fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8013154:	2800      	cmp	r0, #0
 8013156:	d0eb      	beq.n	8013130 <floor+0x48>
 8013158:	2c00      	cmp	r4, #0
 801315a:	bfbe      	ittt	lt
 801315c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013160:	fa43 f606 	asrlt.w	r6, r3, r6
 8013164:	19a4      	addlt	r4, r4, r6
 8013166:	ea24 0407 	bic.w	r4, r4, r7
 801316a:	2500      	movs	r5, #0
 801316c:	e7e0      	b.n	8013130 <floor+0x48>
 801316e:	2e33      	cmp	r6, #51	; 0x33
 8013170:	dd0b      	ble.n	801318a <floor+0xa2>
 8013172:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013176:	d104      	bne.n	8013182 <floor+0x9a>
 8013178:	ee10 2a10 	vmov	r2, s0
 801317c:	460b      	mov	r3, r1
 801317e:	f7ed f885 	bl	800028c <__adddf3>
 8013182:	ec41 0b10 	vmov	d0, r0, r1
 8013186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801318a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801318e:	f04f 33ff 	mov.w	r3, #4294967295
 8013192:	fa23 f707 	lsr.w	r7, r3, r7
 8013196:	4207      	tst	r7, r0
 8013198:	d0f3      	beq.n	8013182 <floor+0x9a>
 801319a:	a311      	add	r3, pc, #68	; (adr r3, 80131e0 <floor+0xf8>)
 801319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131a0:	f7ed f874 	bl	800028c <__adddf3>
 80131a4:	2200      	movs	r2, #0
 80131a6:	2300      	movs	r3, #0
 80131a8:	f7ed fcb6 	bl	8000b18 <__aeabi_dcmpgt>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d0bf      	beq.n	8013130 <floor+0x48>
 80131b0:	2c00      	cmp	r4, #0
 80131b2:	da02      	bge.n	80131ba <floor+0xd2>
 80131b4:	2e14      	cmp	r6, #20
 80131b6:	d103      	bne.n	80131c0 <floor+0xd8>
 80131b8:	3401      	adds	r4, #1
 80131ba:	ea25 0507 	bic.w	r5, r5, r7
 80131be:	e7b7      	b.n	8013130 <floor+0x48>
 80131c0:	2301      	movs	r3, #1
 80131c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80131c6:	fa03 f606 	lsl.w	r6, r3, r6
 80131ca:	4435      	add	r5, r6
 80131cc:	4545      	cmp	r5, r8
 80131ce:	bf38      	it	cc
 80131d0:	18e4      	addcc	r4, r4, r3
 80131d2:	e7f2      	b.n	80131ba <floor+0xd2>
 80131d4:	2500      	movs	r5, #0
 80131d6:	462c      	mov	r4, r5
 80131d8:	e7aa      	b.n	8013130 <floor+0x48>
 80131da:	bf00      	nop
 80131dc:	f3af 8000 	nop.w
 80131e0:	8800759c 	.word	0x8800759c
 80131e4:	7e37e43c 	.word	0x7e37e43c
 80131e8:	bff00000 	.word	0xbff00000
 80131ec:	000fffff 	.word	0x000fffff

080131f0 <matherr>:
 80131f0:	2000      	movs	r0, #0
 80131f2:	4770      	bx	lr
 80131f4:	0000      	movs	r0, r0
	...

080131f8 <nan>:
 80131f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013200 <nan+0x8>
 80131fc:	4770      	bx	lr
 80131fe:	bf00      	nop
 8013200:	00000000 	.word	0x00000000
 8013204:	7ff80000 	.word	0x7ff80000

08013208 <rint>:
 8013208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801320a:	ec51 0b10 	vmov	r0, r1, d0
 801320e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013212:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013216:	2e13      	cmp	r6, #19
 8013218:	460b      	mov	r3, r1
 801321a:	ee10 4a10 	vmov	r4, s0
 801321e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013222:	dc56      	bgt.n	80132d2 <rint+0xca>
 8013224:	2e00      	cmp	r6, #0
 8013226:	da2b      	bge.n	8013280 <rint+0x78>
 8013228:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801322c:	4302      	orrs	r2, r0
 801322e:	d023      	beq.n	8013278 <rint+0x70>
 8013230:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013234:	4302      	orrs	r2, r0
 8013236:	4254      	negs	r4, r2
 8013238:	4314      	orrs	r4, r2
 801323a:	0c4b      	lsrs	r3, r1, #17
 801323c:	0b24      	lsrs	r4, r4, #12
 801323e:	045b      	lsls	r3, r3, #17
 8013240:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013244:	ea44 0103 	orr.w	r1, r4, r3
 8013248:	460b      	mov	r3, r1
 801324a:	492f      	ldr	r1, [pc, #188]	; (8013308 <rint+0x100>)
 801324c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013250:	e9d1 6700 	ldrd	r6, r7, [r1]
 8013254:	4602      	mov	r2, r0
 8013256:	4639      	mov	r1, r7
 8013258:	4630      	mov	r0, r6
 801325a:	f7ed f817 	bl	800028c <__adddf3>
 801325e:	e9cd 0100 	strd	r0, r1, [sp]
 8013262:	463b      	mov	r3, r7
 8013264:	4632      	mov	r2, r6
 8013266:	e9dd 0100 	ldrd	r0, r1, [sp]
 801326a:	f7ed f80d 	bl	8000288 <__aeabi_dsub>
 801326e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013272:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013276:	4639      	mov	r1, r7
 8013278:	ec41 0b10 	vmov	d0, r0, r1
 801327c:	b003      	add	sp, #12
 801327e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013280:	4a22      	ldr	r2, [pc, #136]	; (801330c <rint+0x104>)
 8013282:	4132      	asrs	r2, r6
 8013284:	ea01 0702 	and.w	r7, r1, r2
 8013288:	4307      	orrs	r7, r0
 801328a:	d0f5      	beq.n	8013278 <rint+0x70>
 801328c:	0852      	lsrs	r2, r2, #1
 801328e:	4011      	ands	r1, r2
 8013290:	430c      	orrs	r4, r1
 8013292:	d00b      	beq.n	80132ac <rint+0xa4>
 8013294:	ea23 0202 	bic.w	r2, r3, r2
 8013298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801329c:	2e13      	cmp	r6, #19
 801329e:	fa43 f306 	asr.w	r3, r3, r6
 80132a2:	bf0c      	ite	eq
 80132a4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80132a8:	2400      	movne	r4, #0
 80132aa:	4313      	orrs	r3, r2
 80132ac:	4916      	ldr	r1, [pc, #88]	; (8013308 <rint+0x100>)
 80132ae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80132b2:	4622      	mov	r2, r4
 80132b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80132b8:	4620      	mov	r0, r4
 80132ba:	4629      	mov	r1, r5
 80132bc:	f7ec ffe6 	bl	800028c <__adddf3>
 80132c0:	e9cd 0100 	strd	r0, r1, [sp]
 80132c4:	4622      	mov	r2, r4
 80132c6:	462b      	mov	r3, r5
 80132c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132cc:	f7ec ffdc 	bl	8000288 <__aeabi_dsub>
 80132d0:	e7d2      	b.n	8013278 <rint+0x70>
 80132d2:	2e33      	cmp	r6, #51	; 0x33
 80132d4:	dd07      	ble.n	80132e6 <rint+0xde>
 80132d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80132da:	d1cd      	bne.n	8013278 <rint+0x70>
 80132dc:	ee10 2a10 	vmov	r2, s0
 80132e0:	f7ec ffd4 	bl	800028c <__adddf3>
 80132e4:	e7c8      	b.n	8013278 <rint+0x70>
 80132e6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80132ea:	f04f 32ff 	mov.w	r2, #4294967295
 80132ee:	40f2      	lsrs	r2, r6
 80132f0:	4210      	tst	r0, r2
 80132f2:	d0c1      	beq.n	8013278 <rint+0x70>
 80132f4:	0852      	lsrs	r2, r2, #1
 80132f6:	4210      	tst	r0, r2
 80132f8:	bf1f      	itttt	ne
 80132fa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80132fe:	ea20 0202 	bicne.w	r2, r0, r2
 8013302:	4134      	asrne	r4, r6
 8013304:	4314      	orrne	r4, r2
 8013306:	e7d1      	b.n	80132ac <rint+0xa4>
 8013308:	08013910 	.word	0x08013910
 801330c:	000fffff 	.word	0x000fffff

08013310 <scalbn>:
 8013310:	b570      	push	{r4, r5, r6, lr}
 8013312:	ec55 4b10 	vmov	r4, r5, d0
 8013316:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801331a:	4606      	mov	r6, r0
 801331c:	462b      	mov	r3, r5
 801331e:	b9aa      	cbnz	r2, 801334c <scalbn+0x3c>
 8013320:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013324:	4323      	orrs	r3, r4
 8013326:	d03b      	beq.n	80133a0 <scalbn+0x90>
 8013328:	4b31      	ldr	r3, [pc, #196]	; (80133f0 <scalbn+0xe0>)
 801332a:	4629      	mov	r1, r5
 801332c:	2200      	movs	r2, #0
 801332e:	ee10 0a10 	vmov	r0, s0
 8013332:	f7ed f961 	bl	80005f8 <__aeabi_dmul>
 8013336:	4b2f      	ldr	r3, [pc, #188]	; (80133f4 <scalbn+0xe4>)
 8013338:	429e      	cmp	r6, r3
 801333a:	4604      	mov	r4, r0
 801333c:	460d      	mov	r5, r1
 801333e:	da12      	bge.n	8013366 <scalbn+0x56>
 8013340:	a327      	add	r3, pc, #156	; (adr r3, 80133e0 <scalbn+0xd0>)
 8013342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013346:	f7ed f957 	bl	80005f8 <__aeabi_dmul>
 801334a:	e009      	b.n	8013360 <scalbn+0x50>
 801334c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013350:	428a      	cmp	r2, r1
 8013352:	d10c      	bne.n	801336e <scalbn+0x5e>
 8013354:	ee10 2a10 	vmov	r2, s0
 8013358:	4620      	mov	r0, r4
 801335a:	4629      	mov	r1, r5
 801335c:	f7ec ff96 	bl	800028c <__adddf3>
 8013360:	4604      	mov	r4, r0
 8013362:	460d      	mov	r5, r1
 8013364:	e01c      	b.n	80133a0 <scalbn+0x90>
 8013366:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801336a:	460b      	mov	r3, r1
 801336c:	3a36      	subs	r2, #54	; 0x36
 801336e:	4432      	add	r2, r6
 8013370:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013374:	428a      	cmp	r2, r1
 8013376:	dd0b      	ble.n	8013390 <scalbn+0x80>
 8013378:	ec45 4b11 	vmov	d1, r4, r5
 801337c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80133e8 <scalbn+0xd8>
 8013380:	f000 f917 	bl	80135b2 <copysign>
 8013384:	a318      	add	r3, pc, #96	; (adr r3, 80133e8 <scalbn+0xd8>)
 8013386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801338a:	ec51 0b10 	vmov	r0, r1, d0
 801338e:	e7da      	b.n	8013346 <scalbn+0x36>
 8013390:	2a00      	cmp	r2, #0
 8013392:	dd08      	ble.n	80133a6 <scalbn+0x96>
 8013394:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013398:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801339c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80133a0:	ec45 4b10 	vmov	d0, r4, r5
 80133a4:	bd70      	pop	{r4, r5, r6, pc}
 80133a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80133aa:	da0d      	bge.n	80133c8 <scalbn+0xb8>
 80133ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80133b0:	429e      	cmp	r6, r3
 80133b2:	ec45 4b11 	vmov	d1, r4, r5
 80133b6:	dce1      	bgt.n	801337c <scalbn+0x6c>
 80133b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80133e0 <scalbn+0xd0>
 80133bc:	f000 f8f9 	bl	80135b2 <copysign>
 80133c0:	a307      	add	r3, pc, #28	; (adr r3, 80133e0 <scalbn+0xd0>)
 80133c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c6:	e7e0      	b.n	801338a <scalbn+0x7a>
 80133c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80133cc:	3236      	adds	r2, #54	; 0x36
 80133ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80133d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80133d6:	4620      	mov	r0, r4
 80133d8:	4629      	mov	r1, r5
 80133da:	2200      	movs	r2, #0
 80133dc:	4b06      	ldr	r3, [pc, #24]	; (80133f8 <scalbn+0xe8>)
 80133de:	e7b2      	b.n	8013346 <scalbn+0x36>
 80133e0:	c2f8f359 	.word	0xc2f8f359
 80133e4:	01a56e1f 	.word	0x01a56e1f
 80133e8:	8800759c 	.word	0x8800759c
 80133ec:	7e37e43c 	.word	0x7e37e43c
 80133f0:	43500000 	.word	0x43500000
 80133f4:	ffff3cb0 	.word	0xffff3cb0
 80133f8:	3c900000 	.word	0x3c900000

080133fc <atanf>:
 80133fc:	b538      	push	{r3, r4, r5, lr}
 80133fe:	ee10 5a10 	vmov	r5, s0
 8013402:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013406:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801340a:	eef0 7a40 	vmov.f32	s15, s0
 801340e:	db10      	blt.n	8013432 <atanf+0x36>
 8013410:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013414:	dd04      	ble.n	8013420 <atanf+0x24>
 8013416:	ee70 7a00 	vadd.f32	s15, s0, s0
 801341a:	eeb0 0a67 	vmov.f32	s0, s15
 801341e:	bd38      	pop	{r3, r4, r5, pc}
 8013420:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013558 <atanf+0x15c>
 8013424:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801355c <atanf+0x160>
 8013428:	2d00      	cmp	r5, #0
 801342a:	bfd8      	it	le
 801342c:	eef0 7a47 	vmovle.f32	s15, s14
 8013430:	e7f3      	b.n	801341a <atanf+0x1e>
 8013432:	4b4b      	ldr	r3, [pc, #300]	; (8013560 <atanf+0x164>)
 8013434:	429c      	cmp	r4, r3
 8013436:	dc10      	bgt.n	801345a <atanf+0x5e>
 8013438:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801343c:	da0a      	bge.n	8013454 <atanf+0x58>
 801343e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013564 <atanf+0x168>
 8013442:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801344a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013452:	dce2      	bgt.n	801341a <atanf+0x1e>
 8013454:	f04f 33ff 	mov.w	r3, #4294967295
 8013458:	e013      	b.n	8013482 <atanf+0x86>
 801345a:	f000 f8a3 	bl	80135a4 <fabsf>
 801345e:	4b42      	ldr	r3, [pc, #264]	; (8013568 <atanf+0x16c>)
 8013460:	429c      	cmp	r4, r3
 8013462:	dc4f      	bgt.n	8013504 <atanf+0x108>
 8013464:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013468:	429c      	cmp	r4, r3
 801346a:	dc41      	bgt.n	80134f0 <atanf+0xf4>
 801346c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013470:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013474:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013478:	2300      	movs	r3, #0
 801347a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801347e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013488:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801356c <atanf+0x170>
 801348c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013570 <atanf+0x174>
 8013490:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013574 <atanf+0x178>
 8013494:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013498:	eee6 5a87 	vfma.f32	s11, s13, s14
 801349c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013578 <atanf+0x17c>
 80134a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80134a4:	eddf 5a35 	vldr	s11, [pc, #212]	; 801357c <atanf+0x180>
 80134a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80134ac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013580 <atanf+0x184>
 80134b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80134b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013584 <atanf+0x188>
 80134b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80134bc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013588 <atanf+0x18c>
 80134c0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80134c4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801358c <atanf+0x190>
 80134c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80134cc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013590 <atanf+0x194>
 80134d0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80134d4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013594 <atanf+0x198>
 80134d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80134dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80134e0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80134e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134e8:	d121      	bne.n	801352e <atanf+0x132>
 80134ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80134ee:	e794      	b.n	801341a <atanf+0x1e>
 80134f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80134f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80134f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80134fc:	2301      	movs	r3, #1
 80134fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013502:	e7be      	b.n	8013482 <atanf+0x86>
 8013504:	4b24      	ldr	r3, [pc, #144]	; (8013598 <atanf+0x19c>)
 8013506:	429c      	cmp	r4, r3
 8013508:	dc0b      	bgt.n	8013522 <atanf+0x126>
 801350a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801350e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013512:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013516:	2302      	movs	r3, #2
 8013518:	ee70 6a67 	vsub.f32	s13, s0, s15
 801351c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013520:	e7af      	b.n	8013482 <atanf+0x86>
 8013522:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013526:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801352a:	2303      	movs	r3, #3
 801352c:	e7a9      	b.n	8013482 <atanf+0x86>
 801352e:	4a1b      	ldr	r2, [pc, #108]	; (801359c <atanf+0x1a0>)
 8013530:	491b      	ldr	r1, [pc, #108]	; (80135a0 <atanf+0x1a4>)
 8013532:	009b      	lsls	r3, r3, #2
 8013534:	441a      	add	r2, r3
 8013536:	440b      	add	r3, r1
 8013538:	edd3 6a00 	vldr	s13, [r3]
 801353c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013540:	2d00      	cmp	r5, #0
 8013542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013546:	ed92 7a00 	vldr	s14, [r2]
 801354a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801354e:	bfb8      	it	lt
 8013550:	eef1 7a67 	vneglt.f32	s15, s15
 8013554:	e761      	b.n	801341a <atanf+0x1e>
 8013556:	bf00      	nop
 8013558:	bfc90fdb 	.word	0xbfc90fdb
 801355c:	3fc90fdb 	.word	0x3fc90fdb
 8013560:	3edfffff 	.word	0x3edfffff
 8013564:	7149f2ca 	.word	0x7149f2ca
 8013568:	3f97ffff 	.word	0x3f97ffff
 801356c:	3c8569d7 	.word	0x3c8569d7
 8013570:	3d4bda59 	.word	0x3d4bda59
 8013574:	bd6ef16b 	.word	0xbd6ef16b
 8013578:	3d886b35 	.word	0x3d886b35
 801357c:	3dba2e6e 	.word	0x3dba2e6e
 8013580:	3e124925 	.word	0x3e124925
 8013584:	3eaaaaab 	.word	0x3eaaaaab
 8013588:	bd15a221 	.word	0xbd15a221
 801358c:	bd9d8795 	.word	0xbd9d8795
 8013590:	bde38e38 	.word	0xbde38e38
 8013594:	be4ccccd 	.word	0xbe4ccccd
 8013598:	401bffff 	.word	0x401bffff
 801359c:	08013920 	.word	0x08013920
 80135a0:	08013930 	.word	0x08013930

080135a4 <fabsf>:
 80135a4:	ee10 3a10 	vmov	r3, s0
 80135a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80135ac:	ee00 3a10 	vmov	s0, r3
 80135b0:	4770      	bx	lr

080135b2 <copysign>:
 80135b2:	ec51 0b10 	vmov	r0, r1, d0
 80135b6:	ee11 0a90 	vmov	r0, s3
 80135ba:	ee10 2a10 	vmov	r2, s0
 80135be:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80135c2:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80135c6:	ea41 0300 	orr.w	r3, r1, r0
 80135ca:	ec43 2b10 	vmov	d0, r2, r3
 80135ce:	4770      	bx	lr

080135d0 <_init>:
 80135d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135d2:	bf00      	nop
 80135d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135d6:	bc08      	pop	{r3}
 80135d8:	469e      	mov	lr, r3
 80135da:	4770      	bx	lr

080135dc <_fini>:
 80135dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135de:	bf00      	nop
 80135e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135e2:	bc08      	pop	{r3}
 80135e4:	469e      	mov	lr, r3
 80135e6:	4770      	bx	lr
