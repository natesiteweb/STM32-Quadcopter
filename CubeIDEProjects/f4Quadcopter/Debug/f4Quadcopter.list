
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08012358  08012358  00022358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012670  08012670  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08012670  08012670  00022670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012678  08012678  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012678  08012678  00022678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801267c  0801267c  0002267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08012680  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ec0  20000230  080128b0  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200040f0  080128b0  000340f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237cf  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049f3  00000000  00000000  00053a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  00058428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001508  00000000  00000000  00059b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002525a  00000000  00000000  0005b060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018bc8  00000000  00000000  000802ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca738  00000000  00000000  00098e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001635ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006924  00000000  00000000  00163638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801233c 	.word	0x0801233c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0801233c 	.word	0x0801233c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d04:	f1a2 0201 	sub.w	r2, r2, #1
 8000d08:	d1ed      	bne.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_ldivmod>:
 8000e64:	b97b      	cbnz	r3, 8000e86 <__aeabi_ldivmod+0x22>
 8000e66:	b972      	cbnz	r2, 8000e86 <__aeabi_ldivmod+0x22>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bfbe      	ittt	lt
 8000e6c:	2000      	movlt	r0, #0
 8000e6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e72:	e006      	blt.n	8000e82 <__aeabi_ldivmod+0x1e>
 8000e74:	bf08      	it	eq
 8000e76:	2800      	cmpeq	r0, #0
 8000e78:	bf1c      	itt	ne
 8000e7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e82:	f000 b9bd 	b.w	8001200 <__aeabi_idiv0>
 8000e86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	db09      	blt.n	8000ea6 <__aeabi_ldivmod+0x42>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1a      	blt.n	8000ecc <__aeabi_ldivmod+0x68>
 8000e96:	f000 f84d 	bl	8000f34 <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db1b      	blt.n	8000ee8 <__aeabi_ldivmod+0x84>
 8000eb0:	f000 f840 	bl	8000f34 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eca:	4770      	bx	lr
 8000ecc:	4252      	negs	r2, r2
 8000ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed2:	f000 f82f 	bl	8000f34 <__udivmoddi4>
 8000ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ede:	b004      	add	sp, #16
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee6:	4770      	bx	lr
 8000ee8:	4252      	negs	r2, r2
 8000eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eee:	f000 f821 	bl	8000f34 <__udivmoddi4>
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efa:	b004      	add	sp, #16
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_uldivmod>:
 8000f04:	b953      	cbnz	r3, 8000f1c <__aeabi_uldivmod+0x18>
 8000f06:	b94a      	cbnz	r2, 8000f1c <__aeabi_uldivmod+0x18>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bf08      	it	eq
 8000f0c:	2800      	cmpeq	r0, #0
 8000f0e:	bf1c      	itt	ne
 8000f10:	f04f 31ff 	movne.w	r1, #4294967295
 8000f14:	f04f 30ff 	movne.w	r0, #4294967295
 8000f18:	f000 b972 	b.w	8001200 <__aeabi_idiv0>
 8000f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f24:	f000 f806 	bl	8000f34 <__udivmoddi4>
 8000f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr

08000f34 <__udivmoddi4>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	9e08      	ldr	r6, [sp, #32]
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4688      	mov	r8, r1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d14b      	bne.n	8000fda <__udivmoddi4+0xa6>
 8000f42:	428a      	cmp	r2, r1
 8000f44:	4615      	mov	r5, r2
 8000f46:	d967      	bls.n	8001018 <__udivmoddi4+0xe4>
 8000f48:	fab2 f282 	clz	r2, r2
 8000f4c:	b14a      	cbz	r2, 8000f62 <__udivmoddi4+0x2e>
 8000f4e:	f1c2 0720 	rsb	r7, r2, #32
 8000f52:	fa01 f302 	lsl.w	r3, r1, r2
 8000f56:	fa20 f707 	lsr.w	r7, r0, r7
 8000f5a:	4095      	lsls	r5, r2
 8000f5c:	ea47 0803 	orr.w	r8, r7, r3
 8000f60:	4094      	lsls	r4, r2
 8000f62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f66:	0c23      	lsrs	r3, r4, #16
 8000f68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f6c:	fa1f fc85 	uxth.w	ip, r5
 8000f70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f78:	fb07 f10c 	mul.w	r1, r7, ip
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x60>
 8000f80:	18eb      	adds	r3, r5, r3
 8000f82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f86:	f080 811b 	bcs.w	80011c0 <__udivmoddi4+0x28c>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 8118 	bls.w	80011c0 <__udivmoddi4+0x28c>
 8000f90:	3f02      	subs	r7, #2
 8000f92:	442b      	add	r3, r5
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d909      	bls.n	8000fc0 <__udivmoddi4+0x8c>
 8000fac:	192c      	adds	r4, r5, r4
 8000fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb2:	f080 8107 	bcs.w	80011c4 <__udivmoddi4+0x290>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	f240 8104 	bls.w	80011c4 <__udivmoddi4+0x290>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	442c      	add	r4, r5
 8000fc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fc4:	eba4 040c 	sub.w	r4, r4, ip
 8000fc8:	2700      	movs	r7, #0
 8000fca:	b11e      	cbz	r6, 8000fd4 <__udivmoddi4+0xa0>
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0xbe>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	f000 80eb 	beq.w	80011ba <__udivmoddi4+0x286>
 8000fe4:	2700      	movs	r7, #0
 8000fe6:	e9c6 0100 	strd	r0, r1, [r6]
 8000fea:	4638      	mov	r0, r7
 8000fec:	4639      	mov	r1, r7
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f783 	clz	r7, r3
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d147      	bne.n	800108a <__udivmoddi4+0x156>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0xd0>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80fa 	bhi.w	80011f8 <__udivmoddi4+0x2c4>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	4698      	mov	r8, r3
 800100e:	2e00      	cmp	r6, #0
 8001010:	d0e0      	beq.n	8000fd4 <__udivmoddi4+0xa0>
 8001012:	e9c6 4800 	strd	r4, r8, [r6]
 8001016:	e7dd      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001018:	b902      	cbnz	r2, 800101c <__udivmoddi4+0xe8>
 800101a:	deff      	udf	#255	; 0xff
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	2a00      	cmp	r2, #0
 8001022:	f040 808f 	bne.w	8001144 <__udivmoddi4+0x210>
 8001026:	1b49      	subs	r1, r1, r5
 8001028:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800102c:	fa1f f885 	uxth.w	r8, r5
 8001030:	2701      	movs	r7, #1
 8001032:	fbb1 fcfe 	udiv	ip, r1, lr
 8001036:	0c23      	lsrs	r3, r4, #16
 8001038:	fb0e 111c 	mls	r1, lr, ip, r1
 800103c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001040:	fb08 f10c 	mul.w	r1, r8, ip
 8001044:	4299      	cmp	r1, r3
 8001046:	d907      	bls.n	8001058 <__udivmoddi4+0x124>
 8001048:	18eb      	adds	r3, r5, r3
 800104a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800104e:	d202      	bcs.n	8001056 <__udivmoddi4+0x122>
 8001050:	4299      	cmp	r1, r3
 8001052:	f200 80cd 	bhi.w	80011f0 <__udivmoddi4+0x2bc>
 8001056:	4684      	mov	ip, r0
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	b2a3      	uxth	r3, r4
 800105c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001060:	fb0e 1410 	mls	r4, lr, r0, r1
 8001064:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001068:	fb08 f800 	mul.w	r8, r8, r0
 800106c:	45a0      	cmp	r8, r4
 800106e:	d907      	bls.n	8001080 <__udivmoddi4+0x14c>
 8001070:	192c      	adds	r4, r5, r4
 8001072:	f100 33ff 	add.w	r3, r0, #4294967295
 8001076:	d202      	bcs.n	800107e <__udivmoddi4+0x14a>
 8001078:	45a0      	cmp	r8, r4
 800107a:	f200 80b6 	bhi.w	80011ea <__udivmoddi4+0x2b6>
 800107e:	4618      	mov	r0, r3
 8001080:	eba4 0408 	sub.w	r4, r4, r8
 8001084:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001088:	e79f      	b.n	8000fca <__udivmoddi4+0x96>
 800108a:	f1c7 0c20 	rsb	ip, r7, #32
 800108e:	40bb      	lsls	r3, r7
 8001090:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001094:	ea4e 0e03 	orr.w	lr, lr, r3
 8001098:	fa01 f407 	lsl.w	r4, r1, r7
 800109c:	fa20 f50c 	lsr.w	r5, r0, ip
 80010a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80010a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010a8:	4325      	orrs	r5, r4
 80010aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80010ae:	0c2c      	lsrs	r4, r5, #16
 80010b0:	fb08 3319 	mls	r3, r8, r9, r3
 80010b4:	fa1f fa8e 	uxth.w	sl, lr
 80010b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010bc:	fb09 f40a 	mul.w	r4, r9, sl
 80010c0:	429c      	cmp	r4, r3
 80010c2:	fa02 f207 	lsl.w	r2, r2, r7
 80010c6:	fa00 f107 	lsl.w	r1, r0, r7
 80010ca:	d90b      	bls.n	80010e4 <__udivmoddi4+0x1b0>
 80010cc:	eb1e 0303 	adds.w	r3, lr, r3
 80010d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010d4:	f080 8087 	bcs.w	80011e6 <__udivmoddi4+0x2b2>
 80010d8:	429c      	cmp	r4, r3
 80010da:	f240 8084 	bls.w	80011e6 <__udivmoddi4+0x2b2>
 80010de:	f1a9 0902 	sub.w	r9, r9, #2
 80010e2:	4473      	add	r3, lr
 80010e4:	1b1b      	subs	r3, r3, r4
 80010e6:	b2ad      	uxth	r5, r5
 80010e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ec:	fb08 3310 	mls	r3, r8, r0, r3
 80010f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010f8:	45a2      	cmp	sl, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1da>
 80010fc:	eb1e 0404 	adds.w	r4, lr, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	d26b      	bcs.n	80011de <__udivmoddi4+0x2aa>
 8001106:	45a2      	cmp	sl, r4
 8001108:	d969      	bls.n	80011de <__udivmoddi4+0x2aa>
 800110a:	3802      	subs	r0, #2
 800110c:	4474      	add	r4, lr
 800110e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001112:	fba0 8902 	umull	r8, r9, r0, r2
 8001116:	eba4 040a 	sub.w	r4, r4, sl
 800111a:	454c      	cmp	r4, r9
 800111c:	46c2      	mov	sl, r8
 800111e:	464b      	mov	r3, r9
 8001120:	d354      	bcc.n	80011cc <__udivmoddi4+0x298>
 8001122:	d051      	beq.n	80011c8 <__udivmoddi4+0x294>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d069      	beq.n	80011fc <__udivmoddi4+0x2c8>
 8001128:	ebb1 050a 	subs.w	r5, r1, sl
 800112c:	eb64 0403 	sbc.w	r4, r4, r3
 8001130:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001134:	40fd      	lsrs	r5, r7
 8001136:	40fc      	lsrs	r4, r7
 8001138:	ea4c 0505 	orr.w	r5, ip, r5
 800113c:	e9c6 5400 	strd	r5, r4, [r6]
 8001140:	2700      	movs	r7, #0
 8001142:	e747      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f703 	lsr.w	r7, r0, r3
 800114c:	4095      	lsls	r5, r2
 800114e:	fa01 f002 	lsl.w	r0, r1, r2
 8001152:	fa21 f303 	lsr.w	r3, r1, r3
 8001156:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800115a:	4338      	orrs	r0, r7
 800115c:	0c01      	lsrs	r1, r0, #16
 800115e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001162:	fa1f f885 	uxth.w	r8, r5
 8001166:	fb0e 3317 	mls	r3, lr, r7, r3
 800116a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800116e:	fb07 f308 	mul.w	r3, r7, r8
 8001172:	428b      	cmp	r3, r1
 8001174:	fa04 f402 	lsl.w	r4, r4, r2
 8001178:	d907      	bls.n	800118a <__udivmoddi4+0x256>
 800117a:	1869      	adds	r1, r5, r1
 800117c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001180:	d22f      	bcs.n	80011e2 <__udivmoddi4+0x2ae>
 8001182:	428b      	cmp	r3, r1
 8001184:	d92d      	bls.n	80011e2 <__udivmoddi4+0x2ae>
 8001186:	3f02      	subs	r7, #2
 8001188:	4429      	add	r1, r5
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	b281      	uxth	r1, r0
 800118e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001192:	fb0e 3310 	mls	r3, lr, r0, r3
 8001196:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119a:	fb00 f308 	mul.w	r3, r0, r8
 800119e:	428b      	cmp	r3, r1
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0x27e>
 80011a2:	1869      	adds	r1, r5, r1
 80011a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80011a8:	d217      	bcs.n	80011da <__udivmoddi4+0x2a6>
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d915      	bls.n	80011da <__udivmoddi4+0x2a6>
 80011ae:	3802      	subs	r0, #2
 80011b0:	4429      	add	r1, r5
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011b8:	e73b      	b.n	8001032 <__udivmoddi4+0xfe>
 80011ba:	4637      	mov	r7, r6
 80011bc:	4630      	mov	r0, r6
 80011be:	e709      	b.n	8000fd4 <__udivmoddi4+0xa0>
 80011c0:	4607      	mov	r7, r0
 80011c2:	e6e7      	b.n	8000f94 <__udivmoddi4+0x60>
 80011c4:	4618      	mov	r0, r3
 80011c6:	e6fb      	b.n	8000fc0 <__udivmoddi4+0x8c>
 80011c8:	4541      	cmp	r1, r8
 80011ca:	d2ab      	bcs.n	8001124 <__udivmoddi4+0x1f0>
 80011cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80011d0:	eb69 020e 	sbc.w	r2, r9, lr
 80011d4:	3801      	subs	r0, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	e7a4      	b.n	8001124 <__udivmoddi4+0x1f0>
 80011da:	4660      	mov	r0, ip
 80011dc:	e7e9      	b.n	80011b2 <__udivmoddi4+0x27e>
 80011de:	4618      	mov	r0, r3
 80011e0:	e795      	b.n	800110e <__udivmoddi4+0x1da>
 80011e2:	4667      	mov	r7, ip
 80011e4:	e7d1      	b.n	800118a <__udivmoddi4+0x256>
 80011e6:	4681      	mov	r9, r0
 80011e8:	e77c      	b.n	80010e4 <__udivmoddi4+0x1b0>
 80011ea:	3802      	subs	r0, #2
 80011ec:	442c      	add	r4, r5
 80011ee:	e747      	b.n	8001080 <__udivmoddi4+0x14c>
 80011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f4:	442b      	add	r3, r5
 80011f6:	e72f      	b.n	8001058 <__udivmoddi4+0x124>
 80011f8:	4638      	mov	r0, r7
 80011fa:	e708      	b.n	800100e <__udivmoddi4+0xda>
 80011fc:	4637      	mov	r7, r6
 80011fe:	e6e9      	b.n	8000fd4 <__udivmoddi4+0xa0>

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <Setup_BMP280>:

bmp280_calib_data _bmp280_calib;
int32_t t_fine;

void Setup_BMP280()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
	uint8_t setup_data[4];
	setup_data[0] = 0xF5;
 800120a:	23f5      	movs	r3, #245	; 0xf5
 800120c:	713b      	strb	r3, [r7, #4]
	setup_data[1] = 0x10;
 800120e:	2310      	movs	r3, #16
 8001210:	717b      	strb	r3, [r7, #5]
	setup_data[2] = 0xF4;
 8001212:	23f4      	movs	r3, #244	; 0xf4
 8001214:	71bb      	strb	r3, [r7, #6]
	setup_data[3] = 0x57;
 8001216:	2357      	movs	r3, #87	; 0x57
 8001218:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, setup_data, 4, HAL_MAX_DELAY);
 800121a:	23ec      	movs	r3, #236	; 0xec
 800121c:	b299      	uxth	r1, r3
 800121e:	1d3a      	adds	r2, r7, #4
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2304      	movs	r3, #4
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <Setup_BMP280+0x38>)
 800122a:	f004 fff7 	bl	800621c <HAL_I2C_Master_Transmit>
	Read_BMP280_Calibration_Data();
 800122e:	f000 f807 	bl	8001240 <Read_BMP280_Calibration_Data>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000960 	.word	0x20000960

08001240 <Read_BMP280_Calibration_Data>:

void Read_BMP280_Calibration_Data()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&_bmp280_calib, sizeof(bmp280_calib_data), HAL_MAX_DELAY);
 8001246:	23ec      	movs	r3, #236	; 0xec
 8001248:	b299      	uxth	r1, r3
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2318      	movs	r3, #24
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <Read_BMP280_Calibration_Data+0x28>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2288      	movs	r2, #136	; 0x88
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <Read_BMP280_Calibration_Data+0x2c>)
 800125e:	f005 f8db 	bl	8006418 <HAL_I2C_Mem_Read>
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000300 	.word	0x20000300
 800126c:	20000960 	.word	0x20000960

08001270 <Read_BMP280_PressureTemperature>:

void Read_BMP280_PressureTemperature()
{
 8001270:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&pressure_temperature_buffer, 6, HAL_MAX_DELAY);
 8001278:	23ec      	movs	r3, #236	; 0xec
 800127a:	b299      	uxth	r1, r3
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2306      	movs	r3, #6
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	4bbb      	ldr	r3, [pc, #748]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	22f7      	movs	r2, #247	; 0xf7
 800128e:	48ba      	ldr	r0, [pc, #744]	; (8001578 <Read_BMP280_PressureTemperature+0x308>)
 8001290:	f005 f8c2 	bl	8006418 <HAL_I2C_Mem_Read>

	adc_P = (pressure_temperature_buffer[0] << 16) | (pressure_temperature_buffer[1] << 8) | (pressure_temperature_buffer[2]);
 8001294:	4bb7      	ldr	r3, [pc, #732]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	4bb6      	ldr	r3, [pc, #728]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	4313      	orrs	r3, r2
 80012a2:	4ab4      	ldr	r2, [pc, #720]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012a4:	7892      	ldrb	r2, [r2, #2]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4ab4      	ldr	r2, [pc, #720]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012aa:	6013      	str	r3, [r2, #0]
	adc_P >>= 4;
 80012ac:	4bb3      	ldr	r3, [pc, #716]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	111b      	asrs	r3, r3, #4
 80012b2:	4ab2      	ldr	r2, [pc, #712]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012b4:	6013      	str	r3, [r2, #0]

	adc_T = (pressure_temperature_buffer[3] << 16) | (pressure_temperature_buffer[4] << 8) | (pressure_temperature_buffer[5]);
 80012b6:	4baf      	ldr	r3, [pc, #700]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	4bad      	ldr	r3, [pc, #692]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	4aab      	ldr	r2, [pc, #684]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012c6:	7952      	ldrb	r2, [r2, #5]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	4aad      	ldr	r2, [pc, #692]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012cc:	6013      	str	r3, [r2, #0]
	adc_T >>= 4;
 80012ce:	4bac      	ldr	r3, [pc, #688]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	111b      	asrs	r3, r3, #4
 80012d4:	4aaa      	ldr	r2, [pc, #680]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d6:	6013      	str	r3, [r2, #0]

	temperatureVar1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	10da      	asrs	r2, r3, #3
 80012de:	4ba9      	ldr	r3, [pc, #676]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4aa7      	ldr	r2, [pc, #668]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	12db      	asrs	r3, r3, #11
 80012f2:	4aa5      	ldr	r2, [pc, #660]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 80012f4:	6013      	str	r3, [r2, #0]
	temperatureVar2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	111b      	asrs	r3, r3, #4
 80012fc:	4aa1      	ldr	r2, [pc, #644]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012fe:	8812      	ldrh	r2, [r2, #0]
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	4a9f      	ldr	r2, [pc, #636]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	1112      	asrs	r2, r2, #4
 8001308:	499e      	ldr	r1, [pc, #632]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800130a:	8809      	ldrh	r1, [r1, #0]
 800130c:	1a52      	subs	r2, r2, r1
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	131b      	asrs	r3, r3, #12
 8001314:	4a9b      	ldr	r2, [pc, #620]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001316:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	139b      	asrs	r3, r3, #14
 8001320:	4a9a      	ldr	r2, [pc, #616]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 8001322:	6013      	str	r3, [r2, #0]

	t_fine = temperatureVar1 + temperatureVar2;
 8001324:	4b98      	ldr	r3, [pc, #608]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b98      	ldr	r3, [pc, #608]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4413      	add	r3, r2
 800132e:	4a98      	ldr	r2, [pc, #608]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001330:	6013      	str	r3, [r2, #0]

	final_temperature = (float)((t_fine * 5 + 128) >> 8) / 100;
 8001332:	4b97      	ldr	r3, [pc, #604]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3380      	adds	r3, #128	; 0x80
 800133e:	121b      	asrs	r3, r3, #8
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001594 <Read_BMP280_PressureTemperature+0x324>
 800134c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001350:	4b91      	ldr	r3, [pc, #580]	; (8001598 <Read_BMP280_PressureTemperature+0x328>)
 8001352:	edc3 7a00 	vstr	s15, [r3]

	pressureVar1 = ((int64_t)t_fine) - 128000;
 8001356:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001360:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001364:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001368:	4a8c      	ldr	r2, [pc, #560]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800136a:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P6;
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001370:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001374:	4b89      	ldr	r3, [pc, #548]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800137a:	fb03 f502 	mul.w	r5, r3, r2
 800137e:	fb01 f004 	mul.w	r0, r1, r4
 8001382:	4428      	add	r0, r5
 8001384:	fba1 3403 	umull	r3, r4, r1, r3
 8001388:	1902      	adds	r2, r0, r4
 800138a:	4614      	mov	r4, r2
 800138c:	4a7d      	ldr	r2, [pc, #500]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800138e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001392:	b211      	sxth	r1, r2
 8001394:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001398:	fb01 f504 	mul.w	r5, r1, r4
 800139c:	fb03 f002 	mul.w	r0, r3, r2
 80013a0:	4428      	add	r0, r5
 80013a2:	fba3 3401 	umull	r3, r4, r3, r1
 80013a6:	1902      	adds	r2, r0, r4
 80013a8:	4614      	mov	r4, r2
 80013aa:	4a7d      	ldr	r2, [pc, #500]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013ac:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 80013b0:	4b74      	ldr	r3, [pc, #464]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b6:	b219      	sxth	r1, r3
 80013b8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013bc:	4b77      	ldr	r3, [pc, #476]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80013be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013c2:	fb03 f502 	mul.w	r5, r3, r2
 80013c6:	fb01 f004 	mul.w	r0, r1, r4
 80013ca:	4428      	add	r0, r5
 80013cc:	fba1 1203 	umull	r1, r2, r1, r3
 80013d0:	1883      	adds	r3, r0, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	f04f 0500 	mov.w	r5, #0
 80013d8:	f04f 0600 	mov.w	r6, #0
 80013dc:	0456      	lsls	r6, r2, #17
 80013de:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80013e2:	044d      	lsls	r5, r1, #17
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80013ea:	186b      	adds	r3, r5, r1
 80013ec:	eb46 0402 	adc.w	r4, r6, r2
 80013f0:	4a6b      	ldr	r2, [pc, #428]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013f2:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013fc:	b219      	sxth	r1, r3
 80013fe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001402:	f04f 0500 	mov.w	r5, #0
 8001406:	f04f 0600 	mov.w	r6, #0
 800140a:	00ce      	lsls	r6, r1, #3
 800140c:	2500      	movs	r5, #0
 800140e:	4a64      	ldr	r2, [pc, #400]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001410:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001414:	186b      	adds	r3, r5, r1
 8001416:	eb46 0402 	adc.w	r4, r6, r2
 800141a:	4a61      	ldr	r2, [pc, #388]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 800141c:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = ((pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P3) >> 8) + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001422:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800142c:	fb03 f502 	mul.w	r5, r3, r2
 8001430:	fb01 f004 	mul.w	r0, r1, r4
 8001434:	4428      	add	r0, r5
 8001436:	fba1 3403 	umull	r3, r4, r1, r3
 800143a:	1902      	adds	r2, r0, r4
 800143c:	4614      	mov	r4, r2
 800143e:	4a51      	ldr	r2, [pc, #324]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001440:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001444:	b211      	sxth	r1, r2
 8001446:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800144a:	fb01 f504 	mul.w	r5, r1, r4
 800144e:	fb03 f002 	mul.w	r0, r3, r2
 8001452:	4428      	add	r0, r5
 8001454:	fba3 3401 	umull	r3, r4, r3, r1
 8001458:	1902      	adds	r2, r0, r4
 800145a:	4614      	mov	r4, r2
 800145c:	f04f 0100 	mov.w	r1, #0
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	0a19      	lsrs	r1, r3, #8
 8001466:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800146a:	1222      	asrs	r2, r4, #8
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800146e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001472:	b21d      	sxth	r5, r3
 8001474:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800147a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800147e:	fb03 fc06 	mul.w	ip, r3, r6
 8001482:	fb05 f004 	mul.w	r0, r5, r4
 8001486:	4460      	add	r0, ip
 8001488:	fba5 5603 	umull	r5, r6, r5, r3
 800148c:	1983      	adds	r3, r0, r6
 800148e:	461e      	mov	r6, r3
 8001490:	f04f 0b00 	mov.w	fp, #0
 8001494:	f04f 0c00 	mov.w	ip, #0
 8001498:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800149c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80014a0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80014a4:	eb1b 0301 	adds.w	r3, fp, r1
 80014a8:	eb4c 0402 	adc.w	r4, ip, r2
 80014ac:	4a3b      	ldr	r2, [pc, #236]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ae:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = (((((int64_t)1) << 47) + pressureVar1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014b8:	1c19      	adds	r1, r3, #0
 80014ba:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f04f 0400 	mov.w	r4, #0
 80014c8:	fb03 f502 	mul.w	r5, r3, r2
 80014cc:	fb01 f004 	mul.w	r0, r1, r4
 80014d0:	4428      	add	r0, r5
 80014d2:	fba1 3403 	umull	r3, r4, r1, r3
 80014d6:	1902      	adds	r2, r0, r4
 80014d8:	4614      	mov	r4, r2
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	1061      	asrs	r1, r4, #1
 80014e4:	17e2      	asrs	r2, r4, #31
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014e8:	e9c3 1200 	strd	r1, r2, [r3]

	if (pressureVar1 != 0)
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014f2:	4323      	orrs	r3, r4
 80014f4:	f000 8156 	beq.w	80017a4 <Read_BMP280_PressureTemperature+0x534>
	{
		pressureVarP = 1048576 - adc_P;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001500:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 8001506:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVarP = (((pressureVarP << 31) - pressureVar2) * 3125) / pressureVar1;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 800150c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f04f 0400 	mov.w	r4, #0
 8001518:	07d4      	lsls	r4, r2, #31
 800151a:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 800151e:	07cb      	lsls	r3, r1, #31
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001522:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001526:	1a5b      	subs	r3, r3, r1
 8001528:	eb64 0402 	sbc.w	r4, r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	4626      	mov	r6, r4
 8001530:	46ab      	mov	fp, r5
 8001532:	46b4      	mov	ip, r6
 8001534:	eb1b 030b 	adds.w	r3, fp, fp
 8001538:	eb4c 040c 	adc.w	r4, ip, ip
 800153c:	469b      	mov	fp, r3
 800153e:	46a4      	mov	ip, r4
 8001540:	eb1b 0b05 	adds.w	fp, fp, r5
 8001544:	eb4c 0c06 	adc.w	ip, ip, r6
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001554:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 8001558:	ea4f 118b 	mov.w	r1, fp, lsl #6
 800155c:	eb1b 0b01 	adds.w	fp, fp, r1
 8001560:	eb4c 0c02 	adc.w	ip, ip, r2
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001570:	e01a      	b.n	80015a8 <Read_BMP280_PressureTemperature+0x338>
 8001572:	bf00      	nop
 8001574:	200002d0 	.word	0x200002d0
 8001578:	20000960 	.word	0x20000960
 800157c:	200002ec 	.word	0x200002ec
 8001580:	200002f0 	.word	0x200002f0
 8001584:	20000300 	.word	0x20000300
 8001588:	200002fc 	.word	0x200002fc
 800158c:	200002cc 	.word	0x200002cc
 8001590:	20000320 	.word	0x20000320
 8001594:	42c80000 	.word	0x42c80000
 8001598:	200002c8 	.word	0x200002c8
 800159c:	20000328 	.word	0x20000328
 80015a0:	200002e0 	.word	0x200002e0
 80015a4:	20000318 	.word	0x20000318
 80015a8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015ac:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015b0:	468b      	mov	fp, r1
 80015b2:	4694      	mov	ip, r2
 80015b4:	eb1b 0b05 	adds.w	fp, fp, r5
 80015b8:	eb4c 0c06 	adc.w	ip, ip, r6
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80015c8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015cc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015d0:	468b      	mov	fp, r1
 80015d2:	4694      	mov	ip, r2
 80015d4:	eb1b 0005 	adds.w	r0, fp, r5
 80015d8:	eb4c 0106 	adc.w	r1, ip, r6
 80015dc:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80015de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4623      	mov	r3, r4
 80015e6:	f7ff fc3d 	bl	8000e64 <__aeabi_ldivmod>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80015f0:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar1 = (((int64_t)_bmp280_calib.dig_P9) * (pressureVarP >> 13) * (pressureVarP >> 13)) >> 25;
 80015f4:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80015f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80015fa:	b219      	sxth	r1, r3
 80015fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001602:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	f04f 0400 	mov.w	r4, #0
 800160e:	0b6b      	lsrs	r3, r5, #13
 8001610:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001614:	1374      	asrs	r4, r6, #13
 8001616:	fb03 f502 	mul.w	r5, r3, r2
 800161a:	fb01 f004 	mul.w	r0, r1, r4
 800161e:	4428      	add	r0, r5
 8001620:	fba1 1203 	umull	r1, r2, r1, r3
 8001624:	1883      	adds	r3, r0, r2
 8001626:	461a      	mov	r2, r3
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 800162a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	f04f 0400 	mov.w	r4, #0
 8001636:	0b6b      	lsrs	r3, r5, #13
 8001638:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800163c:	1374      	asrs	r4, r6, #13
 800163e:	fb03 f502 	mul.w	r5, r3, r2
 8001642:	fb01 f004 	mul.w	r0, r1, r4
 8001646:	4428      	add	r0, r5
 8001648:	fba1 1203 	umull	r1, r2, r1, r3
 800164c:	1883      	adds	r3, r0, r2
 800164e:	461a      	mov	r2, r3
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	0e4b      	lsrs	r3, r1, #25
 800165a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800165e:	1654      	asrs	r4, r2, #25
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 8001662:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar2 = (((int64_t)_bmp280_calib.dig_P8) * pressureVarP) >> 19;
 8001666:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 8001668:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800166c:	b219      	sxth	r1, r3
 800166e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001674:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001678:	fb03 f502 	mul.w	r5, r3, r2
 800167c:	fb01 f004 	mul.w	r0, r1, r4
 8001680:	4428      	add	r0, r5
 8001682:	fba1 1203 	umull	r1, r2, r1, r3
 8001686:	1883      	adds	r3, r0, r2
 8001688:	461a      	mov	r2, r3
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f04f 0400 	mov.w	r4, #0
 8001692:	0ccb      	lsrs	r3, r1, #19
 8001694:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001698:	14d4      	asrs	r4, r2, #19
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 800169c:	e9c2 3400 	strd	r3, r4, [r2]

		pressureVarP = ((pressureVarP + pressureVar1 + pressureVar2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016a2:	e9d3 5600 	ldrd	r5, r6, [r3]
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80016a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016ac:	18e9      	adds	r1, r5, r3
 80016ae:	eb46 0204 	adc.w	r2, r6, r4
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 80016b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016b8:	185d      	adds	r5, r3, r1
 80016ba:	eb44 0602 	adc.w	r6, r4, r2
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	0a29      	lsrs	r1, r5, #8
 80016c8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80016cc:	1232      	asrs	r2, r6, #8
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80016d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016d4:	b21d      	sxth	r5, r3
 80016d6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80016da:	f04f 0b00 	mov.w	fp, #0
 80016de:	f04f 0c00 	mov.w	ip, #0
 80016e2:	ea4f 1c06 	mov.w	ip, r6, lsl #4
 80016e6:	ea4c 7c15 	orr.w	ip, ip, r5, lsr #28
 80016ea:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 80016ee:	eb1b 0301 	adds.w	r3, fp, r1
 80016f2:	eb4c 0402 	adc.w	r4, ip, r2
 80016f6:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016f8:	e9c2 3400 	strd	r3, r4, [r2]

		final_pressure = (float)pressureVarP / 256;
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001702:	4618      	mov	r0, r3
 8001704:	4621      	mov	r1, r4
 8001706:	f7ff fb6f 	bl	8000de8 <__aeabi_l2f>
 800170a:	ee06 0a90 	vmov	s13, r0
 800170e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017d0 <Read_BMP280_PressureTemperature+0x560>
 8001712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
		final_pressure /= 100;
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80017d8 <Read_BMP280_PressureTemperature+0x568>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800172c:	edc3 7a00 	vstr	s15, [r3]

		temp_altitude = (44330 * (1.0 - pow(final_pressure / seaLevelhPa, 0.1903)));
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <Read_BMP280_PressureTemperature+0x56c>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001740:	ee16 0a90 	vmov	r0, s13
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80017b0 <Read_BMP280_PressureTemperature+0x540>
 8001750:	ec44 3b10 	vmov	d0, r3, r4
 8001754:	f00e fbf4 	bl	800ff40 <pow>
 8001758:	ec54 3b10 	vmov	r3, r4, d0
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	f04f 0000 	mov.w	r0, #0
 8001764:	491e      	ldr	r1, [pc, #120]	; (80017e0 <Read_BMP280_PressureTemperature+0x570>)
 8001766:	f7fe fd8f 	bl	8000288 <__aeabi_dsub>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	a311      	add	r3, pc, #68	; (adr r3, 80017b8 <Read_BMP280_PressureTemperature+0x548>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	f7ff fa10 	bl	8000ba8 <__aeabi_d2f>
 8001788:	4602      	mov	r2, r0
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 800178c:	601a      	str	r2, [r3, #0]
		read_bmp_altitude = temp_altitude - altitude_calibration;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <Read_BMP280_PressureTemperature+0x578>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <Read_BMP280_PressureTemperature+0x57c>)
 80017a0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	1a36e2eb 	.word	0x1a36e2eb
 80017b4:	3fc85bc0 	.word	0x3fc85bc0
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40e5a540 	.word	0x40e5a540
 80017c0:	20000328 	.word	0x20000328
 80017c4:	20000318 	.word	0x20000318
 80017c8:	20000300 	.word	0x20000300
 80017cc:	200002e0 	.word	0x200002e0
 80017d0:	43800000 	.word	0x43800000
 80017d4:	200002f8 	.word	0x200002f8
 80017d8:	42c80000 	.word	0x42c80000
 80017dc:	20000000 	.word	0x20000000
 80017e0:	3ff00000 	.word	0x3ff00000
 80017e4:	200002f4 	.word	0x200002f4
 80017e8:	200002d8 	.word	0x200002d8
 80017ec:	200002e8 	.word	0x200002e8

080017f0 <Calibrate_BMP280>:

void Calibrate_BMP280()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	altitude_calibration = 0;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <Calibrate_BMP280+0x5c>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 30; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e012      	b.n	800182a <Calibrate_BMP280+0x3a>
	{
		Read_BMP280_PressureTemperature();
 8001804:	f7ff fd34 	bl	8001270 <Read_BMP280_PressureTemperature>
		altitude_calibration += temp_altitude;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <Calibrate_BMP280+0x5c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <Calibrate_BMP280+0x60>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <Calibrate_BMP280+0x5c>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f003 fd92 	bl	8005348 <HAL_Delay>
	for(int i = 0; i < 30; i++)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b1d      	cmp	r3, #29
 800182e:	dde9      	ble.n	8001804 <Calibrate_BMP280+0x14>
	}

	altitude_calibration /= 30.00;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <Calibrate_BMP280+0x5c>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800183a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <Calibrate_BMP280+0x5c>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002d8 	.word	0x200002d8
 8001850:	200002f4 	.word	0x200002f4
 8001854:	00000000 	.word	0x00000000

08001858 <Calculate_Attitude>:
float pid_error_temp;
float pid_roll_last_error, pid_pitch_last_error, pid_yaw_last_error;
int32_t max_motor_pid_output = 45;

void Calculate_Attitude()
{
 8001858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800185c:	af00      	add	r7, sp, #0
	gyro_x = (float)raw_gyro_acc_data[0] / 65.5;
 800185e:	4bd6      	ldr	r3, [pc, #856]	; (8001bb8 <Calculate_Attitude+0x360>)
 8001860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186c:	eddf 6ad3 	vldr	s13, [pc, #844]	; 8001bbc <Calculate_Attitude+0x364>
 8001870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001874:	4bd2      	ldr	r3, [pc, #840]	; (8001bc0 <Calculate_Attitude+0x368>)
 8001876:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)raw_gyro_acc_data[1] / -65.5;
 800187a:	4bcf      	ldr	r3, [pc, #828]	; (8001bb8 <Calculate_Attitude+0x360>)
 800187c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001888:	eddf 6ace 	vldr	s13, [pc, #824]	; 8001bc4 <Calculate_Attitude+0x36c>
 800188c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001890:	4bcd      	ldr	r3, [pc, #820]	; (8001bc8 <Calculate_Attitude+0x370>)
 8001892:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)raw_gyro_acc_data[2] / -65.5;
 8001896:	4bc8      	ldr	r3, [pc, #800]	; (8001bb8 <Calculate_Attitude+0x360>)
 8001898:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a4:	eddf 6ac7 	vldr	s13, [pc, #796]	; 8001bc4 <Calculate_Attitude+0x36c>
 80018a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ac:	4bc7      	ldr	r3, [pc, #796]	; (8001bcc <Calculate_Attitude+0x374>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]

	acc_magnitude = sqrt(((float)raw_gyro_acc_data[3] * (float)raw_gyro_acc_data[3]) + ((float)raw_gyro_acc_data[4] * (float)raw_gyro_acc_data[4]) + ((float)raw_gyro_acc_data[5] * (float)raw_gyro_acc_data[5]));
 80018b2:	4bc1      	ldr	r3, [pc, #772]	; (8001bb8 <Calculate_Attitude+0x360>)
 80018b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c0:	4bbd      	ldr	r3, [pc, #756]	; (8001bb8 <Calculate_Attitude+0x360>)
 80018c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d2:	4bb9      	ldr	r3, [pc, #740]	; (8001bb8 <Calculate_Attitude+0x360>)
 80018d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018e0:	4bb5      	ldr	r3, [pc, #724]	; (8001bb8 <Calculate_Attitude+0x360>)
 80018e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f6:	4bb0      	ldr	r3, [pc, #704]	; (8001bb8 <Calculate_Attitude+0x360>)
 80018f8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001904:	4bac      	ldr	r3, [pc, #688]	; (8001bb8 <Calculate_Attitude+0x360>)
 8001906:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191a:	ee17 0a90 	vmov	r0, s15
 800191e:	f7fe fe13 	bl	8000548 <__aeabi_f2d>
 8001922:	4603      	mov	r3, r0
 8001924:	460c      	mov	r4, r1
 8001926:	ec44 3b10 	vmov	d0, r3, r4
 800192a:	f00e fc79 	bl	8010220 <sqrt>
 800192e:	ec54 3b10 	vmov	r3, r4, d0
 8001932:	4618      	mov	r0, r3
 8001934:	4621      	mov	r1, r4
 8001936:	f7ff f937 	bl	8000ba8 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	4ba4      	ldr	r3, [pc, #656]	; (8001bd0 <Calculate_Attitude+0x378>)
 800193e:	601a      	str	r2, [r3, #0]

	if(acc_magnitude != 0)
 8001940:	4ba3      	ldr	r3, [pc, #652]	; (8001bd0 <Calculate_Attitude+0x378>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eef5 7a40 	vcmp.f32	s15, #0.0
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d06f      	beq.n	8001a30 <Calculate_Attitude+0x1d8>
	{
		if(abs(raw_gyro_acc_data[4]) < acc_magnitude)
 8001950:	4b99      	ldr	r3, [pc, #612]	; (8001bb8 <Calculate_Attitude+0x360>)
 8001952:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001964:	4b9a      	ldr	r3, [pc, #616]	; (8001bd0 <Calculate_Attitude+0x378>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	d525      	bpl.n	80019c0 <Calculate_Attitude+0x168>
		{
			acc_x = asin((float)raw_gyro_acc_data[4] / acc_magnitude) * 57.296;
 8001974:	4b90      	ldr	r3, [pc, #576]	; (8001bb8 <Calculate_Attitude+0x360>)
 8001976:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	4b93      	ldr	r3, [pc, #588]	; (8001bd0 <Calculate_Attitude+0x378>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800198c:	ee16 0a90 	vmov	r0, s13
 8001990:	f7fe fdda 	bl	8000548 <__aeabi_f2d>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	ec44 3b10 	vmov	d0, r3, r4
 800199c:	f00e fa78 	bl	800fe90 <asin>
 80019a0:	ec51 0b10 	vmov	r0, r1, d0
 80019a4:	a380      	add	r3, pc, #512	; (adr r3, 8001ba8 <Calculate_Attitude+0x350>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fe25 	bl	80005f8 <__aeabi_dmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	460c      	mov	r4, r1
 80019b2:	4618      	mov	r0, r3
 80019b4:	4621      	mov	r1, r4
 80019b6:	f7ff f8f7 	bl	8000ba8 <__aeabi_d2f>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b85      	ldr	r3, [pc, #532]	; (8001bd4 <Calculate_Attitude+0x37c>)
 80019be:	601a      	str	r2, [r3, #0]
		}

		if(abs(raw_gyro_acc_data[3]) < acc_magnitude)
 80019c0:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <Calculate_Attitude+0x360>)
 80019c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bfb8      	it	lt
 80019ca:	425b      	neglt	r3, r3
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <Calculate_Attitude+0x378>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d525      	bpl.n	8001a30 <Calculate_Attitude+0x1d8>
		{
			acc_y = asin((float)raw_gyro_acc_data[3] / acc_magnitude) * 57.296;
 80019e4:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <Calculate_Attitude+0x360>)
 80019e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f2:	4b77      	ldr	r3, [pc, #476]	; (8001bd0 <Calculate_Attitude+0x378>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019fc:	ee16 0a90 	vmov	r0, s13
 8001a00:	f7fe fda2 	bl	8000548 <__aeabi_f2d>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	ec44 3b10 	vmov	d0, r3, r4
 8001a0c:	f00e fa40 	bl	800fe90 <asin>
 8001a10:	ec51 0b10 	vmov	r0, r1, d0
 8001a14:	a364      	add	r3, pc, #400	; (adr r3, 8001ba8 <Calculate_Attitude+0x350>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fded 	bl	80005f8 <__aeabi_dmul>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	4618      	mov	r0, r3
 8001a24:	4621      	mov	r1, r4
 8001a26:	f7ff f8bf 	bl	8000ba8 <__aeabi_d2f>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <Calculate_Attitude+0x380>)
 8001a2e:	601a      	str	r2, [r3, #0]
		}
	}

	gyro_x_angle += (gyro_x) * ((float)how_long_to_loop_main / 1000000);
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <Calculate_Attitude+0x384>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3c:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001be0 <Calculate_Attitude+0x388>
 8001a40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a44:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <Calculate_Attitude+0x368>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <Calculate_Attitude+0x38c>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <Calculate_Attitude+0x38c>)
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_angle += (gyro_y) * ((float)how_long_to_loop_main / 1000000);
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <Calculate_Attitude+0x384>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a6a:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001be0 <Calculate_Attitude+0x388>
 8001a6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a72:	4b55      	ldr	r3, [pc, #340]	; (8001bc8 <Calculate_Attitude+0x370>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a7c:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <Calculate_Attitude+0x390>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <Calculate_Attitude+0x390>)
 8001a88:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_angle += (gyro_z) * ((float)how_long_to_loop_main / 1000000);
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <Calculate_Attitude+0x384>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a98:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001be0 <Calculate_Attitude+0x388>
 8001a9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <Calculate_Attitude+0x374>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aaa:	4b50      	ldr	r3, [pc, #320]	; (8001bec <Calculate_Attitude+0x394>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <Calculate_Attitude+0x394>)
 8001ab6:	edc3 7a00 	vstr	s15, [r3]

	gyro_x_angle += (gyro_y_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 8001aba:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <Calculate_Attitude+0x38c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd42 	bl	8000548 <__aeabi_f2d>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	460d      	mov	r5, r1
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <Calculate_Attitude+0x390>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd3b 	bl	8000548 <__aeabi_f2d>
 8001ad2:	4680      	mov	r8, r0
 8001ad4:	4689      	mov	r9, r1
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <Calculate_Attitude+0x374>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd34 	bl	8000548 <__aeabi_f2d>
 8001ae0:	a333      	add	r3, pc, #204	; (adr r3, 8001bb0 <Calculate_Attitude+0x358>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	f7fe fd87 	bl	80005f8 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4692      	mov	sl, r2
 8001af0:	469b      	mov	fp, r3
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <Calculate_Attitude+0x384>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afe:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001be0 <Calculate_Attitude+0x388>
 8001b02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b06:	ee16 0a90 	vmov	r0, s13
 8001b0a:	f7fe fd1d 	bl	8000548 <__aeabi_f2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4650      	mov	r0, sl
 8001b14:	4659      	mov	r1, fp
 8001b16:	f7fe fd6f 	bl	80005f8 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	ec43 2b17 	vmov	d7, r2, r3
 8001b22:	eeb0 0a47 	vmov.f32	s0, s14
 8001b26:	eef0 0a67 	vmov.f32	s1, s15
 8001b2a:	f00e f969 	bl	800fe00 <sin>
 8001b2e:	ec53 2b10 	vmov	r2, r3, d0
 8001b32:	4640      	mov	r0, r8
 8001b34:	4649      	mov	r1, r9
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fba3 	bl	800028c <__adddf3>
 8001b46:	4603      	mov	r3, r0
 8001b48:	460c      	mov	r4, r1
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	f7ff f82b 	bl	8000ba8 <__aeabi_d2f>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <Calculate_Attitude+0x38c>)
 8001b56:	601a      	str	r2, [r3, #0]
	gyro_y_angle -= (gyro_x_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <Calculate_Attitude+0x390>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcf3 	bl	8000548 <__aeabi_f2d>
 8001b62:	4604      	mov	r4, r0
 8001b64:	460d      	mov	r5, r1
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <Calculate_Attitude+0x38c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcec 	bl	8000548 <__aeabi_f2d>
 8001b70:	4680      	mov	r8, r0
 8001b72:	4689      	mov	r9, r1
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <Calculate_Attitude+0x374>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fce5 	bl	8000548 <__aeabi_f2d>
 8001b7e:	a30c      	add	r3, pc, #48	; (adr r3, 8001bb0 <Calculate_Attitude+0x358>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4692      	mov	sl, r2
 8001b8e:	469b      	mov	fp, r3
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <Calculate_Attitude+0x384>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001be0 <Calculate_Attitude+0x388>
 8001ba0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ba4:	e024      	b.n	8001bf0 <Calculate_Attitude+0x398>
 8001ba6:	bf00      	nop
 8001ba8:	53f7ced9 	.word	0x53f7ced9
 8001bac:	404ca5e3 	.word	0x404ca5e3
 8001bb0:	ad42c3ca 	.word	0xad42c3ca
 8001bb4:	3f91de69 	.word	0x3f91de69
 8001bb8:	20000b4c 	.word	0x20000b4c
 8001bbc:	42830000 	.word	0x42830000
 8001bc0:	20000b58 	.word	0x20000b58
 8001bc4:	c2830000 	.word	0xc2830000
 8001bc8:	20000b34 	.word	0x20000b34
 8001bcc:	20000b88 	.word	0x20000b88
 8001bd0:	20000b60 	.word	0x20000b60
 8001bd4:	20000b64 	.word	0x20000b64
 8001bd8:	20000b28 	.word	0x20000b28
 8001bdc:	20000bcc 	.word	0x20000bcc
 8001be0:	49742400 	.word	0x49742400
 8001be4:	20000b30 	.word	0x20000b30
 8001be8:	20000b3c 	.word	0x20000b3c
 8001bec:	20000b5c 	.word	0x20000b5c
 8001bf0:	ee16 0a90 	vmov	r0, s13
 8001bf4:	f7fe fca8 	bl	8000548 <__aeabi_f2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4650      	mov	r0, sl
 8001bfe:	4659      	mov	r1, fp
 8001c00:	f7fe fcfa 	bl	80005f8 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	ec43 2b17 	vmov	d7, r2, r3
 8001c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c10:	eef0 0a67 	vmov.f32	s1, s15
 8001c14:	f00e f8f4 	bl	800fe00 <sin>
 8001c18:	ec53 2b10 	vmov	r2, r3, d0
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f7fe fcea 	bl	80005f8 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	f7fe fb2c 	bl	8000288 <__aeabi_dsub>
 8001c30:	4603      	mov	r3, r0
 8001c32:	460c      	mov	r4, r1
 8001c34:	4618      	mov	r0, r3
 8001c36:	4621      	mov	r1, r4
 8001c38:	f7fe ffb6 	bl	8000ba8 <__aeabi_d2f>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <Calculate_Attitude+0x4f0>)
 8001c40:	601a      	str	r2, [r3, #0]

	gyro_x_angle = (gyro_x_angle * 0.9985) + (acc_x * (1.0000 - 0.9985));
 8001c42:	4b42      	ldr	r3, [pc, #264]	; (8001d4c <Calculate_Attitude+0x4f4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc7e 	bl	8000548 <__aeabi_f2d>
 8001c4c:	a33a      	add	r3, pc, #232	; (adr r3, 8001d38 <Calculate_Attitude+0x4e0>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fcd1 	bl	80005f8 <__aeabi_dmul>
 8001c56:	4603      	mov	r3, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	4625      	mov	r5, r4
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <Calculate_Attitude+0x4f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc70 	bl	8000548 <__aeabi_f2d>
 8001c68:	a335      	add	r3, pc, #212	; (adr r3, 8001d40 <Calculate_Attitude+0x4e8>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4620      	mov	r0, r4
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f7fe fb07 	bl	800028c <__adddf3>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	460c      	mov	r4, r1
 8001c82:	4618      	mov	r0, r3
 8001c84:	4621      	mov	r1, r4
 8001c86:	f7fe ff8f 	bl	8000ba8 <__aeabi_d2f>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <Calculate_Attitude+0x4f4>)
 8001c8e:	601a      	str	r2, [r3, #0]
	gyro_y_angle = (gyro_y_angle * 0.9985) + (acc_y * (1.0000 - 0.9985));
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <Calculate_Attitude+0x4f0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc57 	bl	8000548 <__aeabi_f2d>
 8001c9a:	a327      	add	r3, pc, #156	; (adr r3, 8001d38 <Calculate_Attitude+0x4e0>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcaa 	bl	80005f8 <__aeabi_dmul>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	4625      	mov	r5, r4
 8001caa:	461c      	mov	r4, r3
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <Calculate_Attitude+0x4fc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc49 	bl	8000548 <__aeabi_f2d>
 8001cb6:	a322      	add	r3, pc, #136	; (adr r3, 8001d40 <Calculate_Attitude+0x4e8>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe fc9c 	bl	80005f8 <__aeabi_dmul>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe fae0 	bl	800028c <__adddf3>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	460c      	mov	r4, r1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	f7fe ff68 	bl	8000ba8 <__aeabi_d2f>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <Calculate_Attitude+0x4f0>)
 8001cdc:	601a      	str	r2, [r3, #0]

	if(gyro_z_angle < 0)
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <Calculate_Attitude+0x500>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	d509      	bpl.n	8001d02 <Calculate_Attitude+0x4aa>
		gyro_z_angle += 360;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <Calculate_Attitude+0x500>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001d5c <Calculate_Attitude+0x504>
 8001cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <Calculate_Attitude+0x500>)
 8001cfe:	edc3 7a00 	vstr	s15, [r3]
	if(gyro_z_angle >= 360)
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <Calculate_Attitude+0x500>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d5c <Calculate_Attitude+0x504>
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	da00      	bge.n	8001d18 <Calculate_Attitude+0x4c0>
		gyro_z_angle -= 360;
}
 8001d16:	e009      	b.n	8001d2c <Calculate_Attitude+0x4d4>
		gyro_z_angle -= 360;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <Calculate_Attitude+0x500>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d5c <Calculate_Attitude+0x504>
 8001d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <Calculate_Attitude+0x500>)
 8001d28:	edc3 7a00 	vstr	s15, [r3]
}
 8001d2c:	bf00      	nop
 8001d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d32:	bf00      	nop
 8001d34:	f3af 8000 	nop.w
 8001d38:	45a1cac1 	.word	0x45a1cac1
 8001d3c:	3feff3b6 	.word	0x3feff3b6
 8001d40:	bc6a7e00 	.word	0xbc6a7e00
 8001d44:	3f589374 	.word	0x3f589374
 8001d48:	20000b3c 	.word	0x20000b3c
 8001d4c:	20000b30 	.word	0x20000b30
 8001d50:	20000b64 	.word	0x20000b64
 8001d54:	20000b28 	.word	0x20000b28
 8001d58:	20000b5c 	.word	0x20000b5c
 8001d5c:	43b40000 	.word	0x43b40000

08001d60 <Motor_PID>:

void Motor_PID()
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
	pid_roll_setpoint = 0;
 8001d64:	4b9e      	ldr	r3, [pc, #632]	; (8001fe0 <Motor_PID+0x280>)
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
	pid_pitch_setpoint = 0;
 8001d6c:	4b9d      	ldr	r3, [pc, #628]	; (8001fe4 <Motor_PID+0x284>)
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
	pid_yaw_setpoint = 0;
 8001d74:	4b9c      	ldr	r3, [pc, #624]	; (8001fe8 <Motor_PID+0x288>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

	//Temp motor control
	if(ppm_channels[0] > 1505)
 8001d7c:	4b9b      	ldr	r3, [pc, #620]	; (8001fec <Motor_PID+0x28c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8001d84:	4293      	cmp	r3, r2
 8001d86:	dd0b      	ble.n	8001da0 <Motor_PID+0x40>
		pid_roll_setpoint = ppm_channels[0] - 1505;
 8001d88:	4b98      	ldr	r3, [pc, #608]	; (8001fec <Motor_PID+0x28c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <Motor_PID+0x280>)
 8001d9a:	edc3 7a00 	vstr	s15, [r3]
 8001d9e:	e010      	b.n	8001dc2 <Motor_PID+0x62>
	else if(ppm_channels[0] < 1495)
 8001da0:	4b92      	ldr	r3, [pc, #584]	; (8001fec <Motor_PID+0x28c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8001da8:	4293      	cmp	r3, r2
 8001daa:	dc0a      	bgt.n	8001dc2 <Motor_PID+0x62>
		pid_roll_setpoint = ppm_channels[0] - 1495;
 8001dac:	4b8f      	ldr	r3, [pc, #572]	; (8001fec <Motor_PID+0x28c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	4b88      	ldr	r3, [pc, #544]	; (8001fe0 <Motor_PID+0x280>)
 8001dbe:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[1] > 1505)
 8001dc2:	4b8a      	ldr	r3, [pc, #552]	; (8001fec <Motor_PID+0x28c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	dd0b      	ble.n	8001de6 <Motor_PID+0x86>
		pid_pitch_setpoint = ppm_channels[1] - 1505;
 8001dce:	4b87      	ldr	r3, [pc, #540]	; (8001fec <Motor_PID+0x28c>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <Motor_PID+0x284>)
 8001de0:	edc3 7a00 	vstr	s15, [r3]
 8001de4:	e010      	b.n	8001e08 <Motor_PID+0xa8>
	else if(ppm_channels[1] < 1495)
 8001de6:	4b81      	ldr	r3, [pc, #516]	; (8001fec <Motor_PID+0x28c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8001dee:	4293      	cmp	r3, r2
 8001df0:	dc0a      	bgt.n	8001e08 <Motor_PID+0xa8>
		pid_pitch_setpoint = ppm_channels[1] - 1495;
 8001df2:	4b7e      	ldr	r3, [pc, #504]	; (8001fec <Motor_PID+0x28c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8001dfa:	ee07 3a90 	vmov	s15, r3
 8001dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e02:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <Motor_PID+0x284>)
 8001e04:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[3] > 1505)
 8001e08:	4b78      	ldr	r3, [pc, #480]	; (8001fec <Motor_PID+0x28c>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8001e10:	4293      	cmp	r3, r2
 8001e12:	dd0b      	ble.n	8001e2c <Motor_PID+0xcc>
		pid_yaw_setpoint = ppm_channels[3] - 1505;
 8001e14:	4b75      	ldr	r3, [pc, #468]	; (8001fec <Motor_PID+0x28c>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e24:	4b70      	ldr	r3, [pc, #448]	; (8001fe8 <Motor_PID+0x288>)
 8001e26:	edc3 7a00 	vstr	s15, [r3]
 8001e2a:	e010      	b.n	8001e4e <Motor_PID+0xee>
	else if(ppm_channels[3] < 1495)
 8001e2c:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <Motor_PID+0x28c>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8001e34:	4293      	cmp	r3, r2
 8001e36:	dc0a      	bgt.n	8001e4e <Motor_PID+0xee>
		pid_yaw_setpoint = ppm_channels[3] - 1495;
 8001e38:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <Motor_PID+0x28c>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e48:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <Motor_PID+0x288>)
 8001e4a:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_setpoint -= (gyro_x_angle * 10);
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <Motor_PID+0x280>)
 8001e50:	ed93 7a00 	vldr	s14, [r3]
 8001e54:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <Motor_PID+0x290>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e66:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <Motor_PID+0x280>)
 8001e68:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint -= (gyro_y_angle * 10);
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <Motor_PID+0x284>)
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <Motor_PID+0x294>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	4b57      	ldr	r3, [pc, #348]	; (8001fe4 <Motor_PID+0x284>)
 8001e86:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_setpoint /= 3.0;
 8001e8a:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <Motor_PID+0x280>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e98:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <Motor_PID+0x280>)
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint /= 3.0;
 8001e9e:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <Motor_PID+0x284>)
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <Motor_PID+0x284>)
 8001eae:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_setpoint /= 3.0;
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	; (8001fe8 <Motor_PID+0x288>)
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001ebc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec0:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <Motor_PID+0x288>)
 8001ec2:	edc3 7a00 	vstr	s15, [r3]

	pid_error_temp = pid_roll_setpoint - gyro_x;
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <Motor_PID+0x280>)
 8001ec8:	ed93 7a00 	vldr	s14, [r3]
 8001ecc:	4b4a      	ldr	r3, [pc, #296]	; (8001ff8 <Motor_PID+0x298>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed6:	4b49      	ldr	r3, [pc, #292]	; (8001ffc <Motor_PID+0x29c>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
	pid_roll_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <Motor_PID+0x29c>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <Motor_PID+0x2a0>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eec:	4b45      	ldr	r3, [pc, #276]	; (8002004 <Motor_PID+0x2a4>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef6:	4b44      	ldr	r3, [pc, #272]	; (8002008 <Motor_PID+0x2a8>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	4b41      	ldr	r3, [pc, #260]	; (8002008 <Motor_PID+0x2a8>)
 8001f02:	edc3 7a00 	vstr	s15, [r3]

	if(pid_roll_i > max_motor_pid_output)
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <Motor_PID+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <Motor_PID+0x2a8>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d509      	bpl.n	8001f36 <Motor_PID+0x1d6>
		pid_roll_i = max_motor_pid_output;
 8001f22:	4b3a      	ldr	r3, [pc, #232]	; (800200c <Motor_PID+0x2ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	ee07 3a90 	vmov	s15, r3
 8001f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2e:	4b36      	ldr	r3, [pc, #216]	; (8002008 <Motor_PID+0x2a8>)
 8001f30:	edc3 7a00 	vstr	s15, [r3]
 8001f34:	e018      	b.n	8001f68 <Motor_PID+0x208>
	else if(pid_roll_i < (max_motor_pid_output * -1))
 8001f36:	4b35      	ldr	r3, [pc, #212]	; (800200c <Motor_PID+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <Motor_PID+0x2a8>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f52:	dd09      	ble.n	8001f68 <Motor_PID+0x208>
		pid_roll_i = (max_motor_pid_output * -1);
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <Motor_PID+0x2ac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	425b      	negs	r3, r3
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f62:	4b29      	ldr	r3, [pc, #164]	; (8002008 <Motor_PID+0x2a8>)
 8001f64:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_roll_i + ((pid_error_temp - pid_roll_last_error) * kd_roll * how_long_to_loop_modifier);
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <Motor_PID+0x29c>)
 8001f6a:	ed93 7a00 	vldr	s14, [r3]
 8001f6e:	4b28      	ldr	r3, [pc, #160]	; (8002010 <Motor_PID+0x2b0>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <Motor_PID+0x2a4>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <Motor_PID+0x2a8>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <Motor_PID+0x29c>)
 8001f8e:	edd3 6a00 	vldr	s13, [r3]
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <Motor_PID+0x2b4>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <Motor_PID+0x2b8>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <Motor_PID+0x2a4>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb8:	ee17 2a90 	vmov	r2, s15
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <Motor_PID+0x2bc>)
 8001fbe:	601a      	str	r2, [r3, #0]

	pid_roll_last_error = pid_error_temp;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <Motor_PID+0x29c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a13      	ldr	r2, [pc, #76]	; (8002014 <Motor_PID+0x2b4>)
 8001fc6:	6013      	str	r3, [r2, #0]

	if(pid_roll_output > max_motor_pid_output)
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <Motor_PID+0x2bc>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <Motor_PID+0x2ac>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dd25      	ble.n	8002020 <Motor_PID+0x2c0>
		pid_roll_output = max_motor_pid_output;
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <Motor_PID+0x2ac>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a10      	ldr	r2, [pc, #64]	; (800201c <Motor_PID+0x2bc>)
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e02c      	b.n	8002038 <Motor_PID+0x2d8>
 8001fde:	bf00      	nop
 8001fe0:	200008c4 	.word	0x200008c4
 8001fe4:	200008c8 	.word	0x200008c8
 8001fe8:	200006bc 	.word	0x200006bc
 8001fec:	20000bfc 	.word	0x20000bfc
 8001ff0:	20000b30 	.word	0x20000b30
 8001ff4:	20000b3c 	.word	0x20000b3c
 8001ff8:	20000b58 	.word	0x20000b58
 8001ffc:	200008d4 	.word	0x200008d4
 8002000:	20000254 	.word	0x20000254
 8002004:	20000030 	.word	0x20000030
 8002008:	2000038c 	.word	0x2000038c
 800200c:	20000014 	.word	0x20000014
 8002010:	2000024c 	.word	0x2000024c
 8002014:	20000394 	.word	0x20000394
 8002018:	2000025c 	.word	0x2000025c
 800201c:	200005a0 	.word	0x200005a0
	else if(pid_roll_output < (max_motor_pid_output * -1))
 8002020:	4ba0      	ldr	r3, [pc, #640]	; (80022a4 <Motor_PID+0x544>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	425a      	negs	r2, r3
 8002026:	4ba0      	ldr	r3, [pc, #640]	; (80022a8 <Motor_PID+0x548>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	dd04      	ble.n	8002038 <Motor_PID+0x2d8>
		pid_roll_output = (max_motor_pid_output * -1);
 800202e:	4b9d      	ldr	r3, [pc, #628]	; (80022a4 <Motor_PID+0x544>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	425b      	negs	r3, r3
 8002034:	4a9c      	ldr	r2, [pc, #624]	; (80022a8 <Motor_PID+0x548>)
 8002036:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_pitch_setpoint - gyro_y;
 8002038:	4b9c      	ldr	r3, [pc, #624]	; (80022ac <Motor_PID+0x54c>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	4b9c      	ldr	r3, [pc, #624]	; (80022b0 <Motor_PID+0x550>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002048:	4b9a      	ldr	r3, [pc, #616]	; (80022b4 <Motor_PID+0x554>)
 800204a:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 800204e:	4b99      	ldr	r3, [pc, #612]	; (80022b4 <Motor_PID+0x554>)
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	4b98      	ldr	r3, [pc, #608]	; (80022b8 <Motor_PID+0x558>)
 8002056:	edd3 7a00 	vldr	s15, [r3]
 800205a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205e:	4b97      	ldr	r3, [pc, #604]	; (80022bc <Motor_PID+0x55c>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002068:	4b95      	ldr	r3, [pc, #596]	; (80022c0 <Motor_PID+0x560>)
 800206a:	edd3 7a00 	vldr	s15, [r3]
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002072:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <Motor_PID+0x560>)
 8002074:	edc3 7a00 	vstr	s15, [r3]

	if(pid_pitch_i > max_motor_pid_output)
 8002078:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <Motor_PID+0x544>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002084:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <Motor_PID+0x560>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d509      	bpl.n	80020a8 <Motor_PID+0x348>
		pid_pitch_i = max_motor_pid_output;
 8002094:	4b83      	ldr	r3, [pc, #524]	; (80022a4 <Motor_PID+0x544>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a0:	4b87      	ldr	r3, [pc, #540]	; (80022c0 <Motor_PID+0x560>)
 80020a2:	edc3 7a00 	vstr	s15, [r3]
 80020a6:	e018      	b.n	80020da <Motor_PID+0x37a>
	else if(pid_pitch_i < (max_motor_pid_output * -1))
 80020a8:	4b7e      	ldr	r3, [pc, #504]	; (80022a4 <Motor_PID+0x544>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	425b      	negs	r3, r3
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <Motor_PID+0x560>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	dd09      	ble.n	80020da <Motor_PID+0x37a>
		pid_pitch_i = (max_motor_pid_output * -1);
 80020c6:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <Motor_PID+0x544>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	425b      	negs	r3, r3
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d4:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <Motor_PID+0x560>)
 80020d6:	edc3 7a00 	vstr	s15, [r3]

	pid_pitch_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_pitch_i + ((pid_error_temp - pid_pitch_last_error) * kd_roll * how_long_to_loop_modifier);
 80020da:	4b76      	ldr	r3, [pc, #472]	; (80022b4 <Motor_PID+0x554>)
 80020dc:	ed93 7a00 	vldr	s14, [r3]
 80020e0:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <Motor_PID+0x564>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ea:	4b74      	ldr	r3, [pc, #464]	; (80022bc <Motor_PID+0x55c>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f4:	4b72      	ldr	r3, [pc, #456]	; (80022c0 <Motor_PID+0x560>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020fe:	4b6d      	ldr	r3, [pc, #436]	; (80022b4 <Motor_PID+0x554>)
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	4b70      	ldr	r3, [pc, #448]	; (80022c8 <Motor_PID+0x568>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800210e:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <Motor_PID+0x56c>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <Motor_PID+0x55c>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212a:	ee17 2a90 	vmov	r2, s15
 800212e:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <Motor_PID+0x570>)
 8002130:	601a      	str	r2, [r3, #0]

	pid_pitch_last_error = pid_error_temp;
 8002132:	4b60      	ldr	r3, [pc, #384]	; (80022b4 <Motor_PID+0x554>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a64      	ldr	r2, [pc, #400]	; (80022c8 <Motor_PID+0x568>)
 8002138:	6013      	str	r3, [r2, #0]

	if(pid_pitch_output > max_motor_pid_output)
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <Motor_PID+0x570>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <Motor_PID+0x544>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	dd04      	ble.n	8002150 <Motor_PID+0x3f0>
		pid_pitch_output = max_motor_pid_output;
 8002146:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <Motor_PID+0x544>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a61      	ldr	r2, [pc, #388]	; (80022d0 <Motor_PID+0x570>)
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <Motor_PID+0x408>
	else if(pid_pitch_output < (max_motor_pid_output * -1))
 8002150:	4b54      	ldr	r3, [pc, #336]	; (80022a4 <Motor_PID+0x544>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	425a      	negs	r2, r3
 8002156:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <Motor_PID+0x570>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	dd04      	ble.n	8002168 <Motor_PID+0x408>
		pid_pitch_output = (max_motor_pid_output * -1);
 800215e:	4b51      	ldr	r3, [pc, #324]	; (80022a4 <Motor_PID+0x544>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	425b      	negs	r3, r3
 8002164:	4a5a      	ldr	r2, [pc, #360]	; (80022d0 <Motor_PID+0x570>)
 8002166:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_yaw_setpoint - gyro_z;
 8002168:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <Motor_PID+0x574>)
 800216a:	ed93 7a00 	vldr	s14, [r3]
 800216e:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <Motor_PID+0x578>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002178:	4b4e      	ldr	r3, [pc, #312]	; (80022b4 <Motor_PID+0x554>)
 800217a:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_i += (pid_error_temp * ki_yaw * how_long_to_loop_modifier);
 800217e:	4b4d      	ldr	r3, [pc, #308]	; (80022b4 <Motor_PID+0x554>)
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	4b55      	ldr	r3, [pc, #340]	; (80022dc <Motor_PID+0x57c>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800218e:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <Motor_PID+0x55c>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002198:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <Motor_PID+0x580>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <Motor_PID+0x580>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]

	if(pid_yaw_i > max_motor_pid_output)
 80021a8:	4b3e      	ldr	r3, [pc, #248]	; (80022a4 <Motor_PID+0x544>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b4:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <Motor_PID+0x580>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d509      	bpl.n	80021d8 <Motor_PID+0x478>
		pid_yaw_i = max_motor_pid_output;
 80021c4:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <Motor_PID+0x544>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d0:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <Motor_PID+0x580>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
 80021d6:	e018      	b.n	800220a <Motor_PID+0x4aa>
	else if(pid_yaw_i < (max_motor_pid_output * -1))
 80021d8:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <Motor_PID+0x544>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	425b      	negs	r3, r3
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e6:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <Motor_PID+0x580>)
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	dd09      	ble.n	800220a <Motor_PID+0x4aa>
		pid_yaw_i = (max_motor_pid_output * -1);
 80021f6:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <Motor_PID+0x544>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	425b      	negs	r3, r3
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002204:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <Motor_PID+0x580>)
 8002206:	edc3 7a00 	vstr	s15, [r3]

	pid_yaw_output = (pid_error_temp * kp_yaw * how_long_to_loop_modifier) + pid_yaw_i + ((pid_error_temp - pid_yaw_last_error) * kd_yaw * how_long_to_loop_modifier);
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <Motor_PID+0x554>)
 800220c:	ed93 7a00 	vldr	s14, [r3]
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <Motor_PID+0x584>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <Motor_PID+0x55c>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002224:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <Motor_PID+0x580>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <Motor_PID+0x554>)
 8002230:	edd3 6a00 	vldr	s13, [r3]
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <Motor_PID+0x588>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800223e:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <Motor_PID+0x58c>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002248:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <Motor_PID+0x55c>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800225a:	ee17 2a90 	vmov	r2, s15
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <Motor_PID+0x590>)
 8002260:	601a      	str	r2, [r3, #0]

	pid_yaw_last_error = pid_error_temp;
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <Motor_PID+0x554>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a20      	ldr	r2, [pc, #128]	; (80022e8 <Motor_PID+0x588>)
 8002268:	6013      	str	r3, [r2, #0]

	if(pid_yaw_output > max_motor_pid_output)
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <Motor_PID+0x590>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <Motor_PID+0x544>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	dd04      	ble.n	8002280 <Motor_PID+0x520>
		pid_yaw_output = max_motor_pid_output;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <Motor_PID+0x544>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <Motor_PID+0x590>)
 800227c:	6013      	str	r3, [r2, #0]
	else if(pid_yaw_output < (max_motor_pid_output * -1))
		pid_yaw_output = (max_motor_pid_output * -1);
}
 800227e:	e00b      	b.n	8002298 <Motor_PID+0x538>
	else if(pid_yaw_output < (max_motor_pid_output * -1))
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <Motor_PID+0x544>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	425a      	negs	r2, r3
 8002286:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <Motor_PID+0x590>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	dd04      	ble.n	8002298 <Motor_PID+0x538>
		pid_yaw_output = (max_motor_pid_output * -1);
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <Motor_PID+0x544>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	425b      	negs	r3, r3
 8002294:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <Motor_PID+0x590>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000014 	.word	0x20000014
 80022a8:	200005a0 	.word	0x200005a0
 80022ac:	200008c8 	.word	0x200008c8
 80022b0:	20000b34 	.word	0x20000b34
 80022b4:	200008d4 	.word	0x200008d4
 80022b8:	20000254 	.word	0x20000254
 80022bc:	20000030 	.word	0x20000030
 80022c0:	20000598 	.word	0x20000598
 80022c4:	2000024c 	.word	0x2000024c
 80022c8:	200006c0 	.word	0x200006c0
 80022cc:	2000025c 	.word	0x2000025c
 80022d0:	200005a4 	.word	0x200005a4
 80022d4:	200006bc 	.word	0x200006bc
 80022d8:	20000b88 	.word	0x20000b88
 80022dc:	20000258 	.word	0x20000258
 80022e0:	2000059c 	.word	0x2000059c
 80022e4:	20000250 	.word	0x20000250
 80022e8:	200005a8 	.word	0x200005a8
 80022ec:	20000260 	.word	0x20000260
 80022f0:	20000388 	.word	0x20000388

080022f4 <Calculate_Motor_Outputs>:

int32_t manual_throttle;
int32_t throttle_output;

void Calculate_Motor_Outputs()
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
	if(ppm_channels[2] < 1008)
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <Calculate_Motor_Outputs+0x130>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8002300:	da03      	bge.n	800230a <Calculate_Motor_Outputs+0x16>
		manual_throttle = 125;
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <Calculate_Motor_Outputs+0x134>)
 8002304:	227d      	movs	r2, #125	; 0x7d
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e008      	b.n	800231c <Calculate_Motor_Outputs+0x28>
	else
		manual_throttle = (ppm_channels[2] / 8);
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <Calculate_Motor_Outputs+0x130>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	da00      	bge.n	8002314 <Calculate_Motor_Outputs+0x20>
 8002312:	3307      	adds	r3, #7
 8002314:	10db      	asrs	r3, r3, #3
 8002316:	461a      	mov	r2, r3
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <Calculate_Motor_Outputs+0x134>)
 800231a:	601a      	str	r2, [r3, #0]

	throttle_output = idle_throttle;
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <Calculate_Motor_Outputs+0x138>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a43      	ldr	r2, [pc, #268]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 8002322:	6013      	str	r3, [r2, #0]

	if(altitude_hold_flag)
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <Calculate_Motor_Outputs+0x140>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d006      	beq.n	800233a <Calculate_Motor_Outputs+0x46>
		throttle_output += altitude_pid_output;
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <Calculate_Motor_Outputs+0x144>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4413      	add	r3, r2
 8002336:	4a3e      	ldr	r2, [pc, #248]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 8002338:	6013      	str	r3, [r2, #0]

	if(manual_mode)
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <Calculate_Motor_Outputs+0x148>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <Calculate_Motor_Outputs+0x56>
	{
		throttle_output = manual_throttle;
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <Calculate_Motor_Outputs+0x134>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a3a      	ldr	r2, [pc, #232]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 8002348:	6013      	str	r3, [r2, #0]
	}

	if(ppm_channels[5] > 1300)
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <Calculate_Motor_Outputs+0x130>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f240 5214 	movw	r2, #1300	; 0x514
 8002352:	4293      	cmp	r3, r2
 8002354:	dd34      	ble.n	80023c0 <Calculate_Motor_Outputs+0xcc>
	{
		esc1_output = throttle_output + pid_roll_output + pid_pitch_output - pid_yaw_output;
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <Calculate_Motor_Outputs+0x14c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	441a      	add	r2, r3
 8002360:	4b38      	ldr	r3, [pc, #224]	; (8002444 <Calculate_Motor_Outputs+0x150>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	441a      	add	r2, r3
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <Calculate_Motor_Outputs+0x154>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	4a37      	ldr	r2, [pc, #220]	; (800244c <Calculate_Motor_Outputs+0x158>)
 800236e:	6013      	str	r3, [r2, #0]
		esc2_output = throttle_output - pid_roll_output + pid_pitch_output + pid_yaw_output;
 8002370:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <Calculate_Motor_Outputs+0x14c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1ad2      	subs	r2, r2, r3
 800237a:	4b32      	ldr	r3, [pc, #200]	; (8002444 <Calculate_Motor_Outputs+0x150>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	441a      	add	r2, r3
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <Calculate_Motor_Outputs+0x154>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4413      	add	r3, r2
 8002386:	4a32      	ldr	r2, [pc, #200]	; (8002450 <Calculate_Motor_Outputs+0x15c>)
 8002388:	6013      	str	r3, [r2, #0]
		esc3_output = throttle_output - pid_roll_output - pid_pitch_output - pid_yaw_output;
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <Calculate_Motor_Outputs+0x14c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <Calculate_Motor_Outputs+0x150>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1ad2      	subs	r2, r2, r3
 800239a:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <Calculate_Motor_Outputs+0x154>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <Calculate_Motor_Outputs+0x160>)
 80023a2:	6013      	str	r3, [r2, #0]
		esc4_output = throttle_output + pid_roll_output - pid_pitch_output + pid_yaw_output;
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <Calculate_Motor_Outputs+0x13c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <Calculate_Motor_Outputs+0x14c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	441a      	add	r2, r3
 80023ae:	4b25      	ldr	r3, [pc, #148]	; (8002444 <Calculate_Motor_Outputs+0x150>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	4b24      	ldr	r3, [pc, #144]	; (8002448 <Calculate_Motor_Outputs+0x154>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a27      	ldr	r2, [pc, #156]	; (8002458 <Calculate_Motor_Outputs+0x164>)
 80023bc:	6013      	str	r3, [r2, #0]
		esc1_output = 125;
		esc2_output = 125;
		esc3_output = 125;
		esc4_output = 125;
	}
}
 80023be:	e02c      	b.n	800241a <Calculate_Motor_Outputs+0x126>
		pid_roll_setpoint = 0;
 80023c0:	4b26      	ldr	r3, [pc, #152]	; (800245c <Calculate_Motor_Outputs+0x168>)
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
		pid_pitch_setpoint = 0;
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <Calculate_Motor_Outputs+0x16c>)
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
		pid_yaw_setpoint = 0;
 80023d0:	4b24      	ldr	r3, [pc, #144]	; (8002464 <Calculate_Motor_Outputs+0x170>)
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
		pid_roll_output = 0;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <Calculate_Motor_Outputs+0x14c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
		pid_pitch_output = 0;
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <Calculate_Motor_Outputs+0x150>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
		pid_yaw_output = 0;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <Calculate_Motor_Outputs+0x154>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
		pid_roll_i = 0;
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <Calculate_Motor_Outputs+0x174>)
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
		pid_pitch_i = 0;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <Calculate_Motor_Outputs+0x178>)
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
		pid_yaw_i = 0;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <Calculate_Motor_Outputs+0x17c>)
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
		esc1_output = 125;
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <Calculate_Motor_Outputs+0x158>)
 8002404:	227d      	movs	r2, #125	; 0x7d
 8002406:	601a      	str	r2, [r3, #0]
		esc2_output = 125;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <Calculate_Motor_Outputs+0x15c>)
 800240a:	227d      	movs	r2, #125	; 0x7d
 800240c:	601a      	str	r2, [r3, #0]
		esc3_output = 125;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <Calculate_Motor_Outputs+0x160>)
 8002410:	227d      	movs	r2, #125	; 0x7d
 8002412:	601a      	str	r2, [r3, #0]
		esc4_output = 125;
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <Calculate_Motor_Outputs+0x164>)
 8002416:	227d      	movs	r2, #125	; 0x7d
 8002418:	601a      	str	r2, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000bfc 	.word	0x20000bfc
 8002428:	20000334 	.word	0x20000334
 800242c:	20000024 	.word	0x20000024
 8002430:	20000628 	.word	0x20000628
 8002434:	200002ad 	.word	0x200002ad
 8002438:	200005ac 	.word	0x200005ac
 800243c:	20000293 	.word	0x20000293
 8002440:	200005a0 	.word	0x200005a0
 8002444:	200005a4 	.word	0x200005a4
 8002448:	20000388 	.word	0x20000388
 800244c:	20000004 	.word	0x20000004
 8002450:	20000008 	.word	0x20000008
 8002454:	2000000c 	.word	0x2000000c
 8002458:	20000010 	.word	0x20000010
 800245c:	200008c4 	.word	0x200008c4
 8002460:	200008c8 	.word	0x200008c8
 8002464:	200006bc 	.word	0x200006bc
 8002468:	2000038c 	.word	0x2000038c
 800246c:	20000598 	.word	0x20000598
 8002470:	2000059c 	.word	0x2000059c
 8002474:	00000000 	.word	0x00000000

08002478 <Calculate_Altitude_PID>:

float kp_alt = 0, ki_alt = 0, kd_alt = 0;
float pid_alt_i = 0;

void Calculate_Altitude_PID()
{
 8002478:	b5b0      	push	{r4, r5, r7, lr}
 800247a:	af00      	add	r7, sp, #0
	total_bmp_altitude -= bmp_over_time[bmp_reading_index];
 800247c:	4ba8      	ldr	r3, [pc, #672]	; (8002720 <Calculate_Altitude_PID+0x2a8>)
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	4ba8      	ldr	r3, [pc, #672]	; (8002724 <Calculate_Altitude_PID+0x2ac>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	4aa8      	ldr	r2, [pc, #672]	; (8002728 <Calculate_Altitude_PID+0x2b0>)
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	4ba2      	ldr	r3, [pc, #648]	; (8002720 <Calculate_Altitude_PID+0x2a8>)
 8002496:	edc3 7a00 	vstr	s15, [r3]
	bmp_over_time[bmp_reading_index] = read_bmp_altitude;
 800249a:	4ba2      	ldr	r3, [pc, #648]	; (8002724 <Calculate_Altitude_PID+0x2ac>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	4ba2      	ldr	r3, [pc, #648]	; (800272c <Calculate_Altitude_PID+0x2b4>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	49a0      	ldr	r1, [pc, #640]	; (8002728 <Calculate_Altitude_PID+0x2b0>)
 80024a6:	0083      	lsls	r3, r0, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	601a      	str	r2, [r3, #0]
	total_bmp_altitude += bmp_over_time[bmp_reading_index];
 80024ac:	4b9d      	ldr	r3, [pc, #628]	; (8002724 <Calculate_Altitude_PID+0x2ac>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4a9d      	ldr	r2, [pc, #628]	; (8002728 <Calculate_Altitude_PID+0x2b0>)
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	4b99      	ldr	r3, [pc, #612]	; (8002720 <Calculate_Altitude_PID+0x2a8>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	4b96      	ldr	r3, [pc, #600]	; (8002720 <Calculate_Altitude_PID+0x2a8>)
 80024c6:	edc3 7a00 	vstr	s15, [r3]

	fast_bmp_altitude = (total_bmp_altitude / 4.00);
 80024ca:	4b95      	ldr	r3, [pc, #596]	; (8002720 <Calculate_Altitude_PID+0x2a8>)
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d8:	4b95      	ldr	r3, [pc, #596]	; (8002730 <Calculate_Altitude_PID+0x2b8>)
 80024da:	edc3 7a00 	vstr	s15, [r3]
	slow_bmp_altitude = (slow_bmp_altitude * 0.900) + (fast_bmp_altitude * 0.100);
 80024de:	4b95      	ldr	r3, [pc, #596]	; (8002734 <Calculate_Altitude_PID+0x2bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe f830 	bl	8000548 <__aeabi_f2d>
 80024e8:	a381      	add	r3, pc, #516	; (adr r3, 80026f0 <Calculate_Altitude_PID+0x278>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe f883 	bl	80005f8 <__aeabi_dmul>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
 80024f6:	4625      	mov	r5, r4
 80024f8:	461c      	mov	r4, r3
 80024fa:	4b8d      	ldr	r3, [pc, #564]	; (8002730 <Calculate_Altitude_PID+0x2b8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f822 	bl	8000548 <__aeabi_f2d>
 8002504:	a37c      	add	r3, pc, #496	; (adr r3, 80026f8 <Calculate_Altitude_PID+0x280>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe f875 	bl	80005f8 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fd feb9 	bl	800028c <__adddf3>
 800251a:	4603      	mov	r3, r0
 800251c:	460c      	mov	r4, r1
 800251e:	4618      	mov	r0, r3
 8002520:	4621      	mov	r1, r4
 8002522:	f7fe fb41 	bl	8000ba8 <__aeabi_d2f>
 8002526:	4602      	mov	r2, r0
 8002528:	4b82      	ldr	r3, [pc, #520]	; (8002734 <Calculate_Altitude_PID+0x2bc>)
 800252a:	601a      	str	r2, [r3, #0]

	pressure_difference = slow_bmp_altitude - fast_bmp_altitude;
 800252c:	4b81      	ldr	r3, [pc, #516]	; (8002734 <Calculate_Altitude_PID+0x2bc>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <Calculate_Altitude_PID+0x2b8>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	4b7e      	ldr	r3, [pc, #504]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 800253e:	edc3 7a00 	vstr	s15, [r3]

	if(pressure_difference > 0.400)
 8002542:	4b7d      	ldr	r3, [pc, #500]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd fffe 	bl	8000548 <__aeabi_f2d>
 800254c:	a36c      	add	r3, pc, #432	; (adr r3, 8002700 <Calculate_Altitude_PID+0x288>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fe fae1 	bl	8000b18 <__aeabi_dcmpgt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <Calculate_Altitude_PID+0xec>
		pressure_difference = 0.400;
 800255c:	4b76      	ldr	r3, [pc, #472]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 800255e:	4a77      	ldr	r2, [pc, #476]	; (800273c <Calculate_Altitude_PID+0x2c4>)
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e00f      	b.n	8002584 <Calculate_Altitude_PID+0x10c>
	else if(pressure_difference < -0.400)
 8002564:	4b74      	ldr	r3, [pc, #464]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ffed 	bl	8000548 <__aeabi_f2d>
 800256e:	a366      	add	r3, pc, #408	; (adr r3, 8002708 <Calculate_Altitude_PID+0x290>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fe fab2 	bl	8000adc <__aeabi_dcmplt>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <Calculate_Altitude_PID+0x10c>
		pressure_difference = -0.400;
 800257e:	4b6e      	ldr	r3, [pc, #440]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 8002580:	4a6f      	ldr	r2, [pc, #444]	; (8002740 <Calculate_Altitude_PID+0x2c8>)
 8002582:	601a      	str	r2, [r3, #0]

	if(pressure_difference > 0.120 || pressure_difference < -0.120)
 8002584:	4b6c      	ldr	r3, [pc, #432]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ffdd 	bl	8000548 <__aeabi_f2d>
 800258e:	a360      	add	r3, pc, #384	; (adr r3, 8002710 <Calculate_Altitude_PID+0x298>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fe fac0 	bl	8000b18 <__aeabi_dcmpgt>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <Calculate_Altitude_PID+0x140>
 800259e:	4b66      	ldr	r3, [pc, #408]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ffd0 	bl	8000548 <__aeabi_f2d>
 80025a8:	a35b      	add	r3, pc, #364	; (adr r3, 8002718 <Calculate_Altitude_PID+0x2a0>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe fa95 	bl	8000adc <__aeabi_dcmplt>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <Calculate_Altitude_PID+0x182>
		slow_bmp_altitude -= pressure_difference / 2.00;
 80025b8:	4b5e      	ldr	r3, [pc, #376]	; (8002734 <Calculate_Altitude_PID+0x2bc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffc3 	bl	8000548 <__aeabi_f2d>
 80025c2:	4604      	mov	r4, r0
 80025c4:	460d      	mov	r5, r1
 80025c6:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <Calculate_Altitude_PID+0x2c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffbc 	bl	8000548 <__aeabi_f2d>
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025d8:	f7fe f938 	bl	800084c <__aeabi_ddiv>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4620      	mov	r0, r4
 80025e2:	4629      	mov	r1, r5
 80025e4:	f7fd fe50 	bl	8000288 <__aeabi_dsub>
 80025e8:	4603      	mov	r3, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	4618      	mov	r0, r3
 80025ee:	4621      	mov	r1, r4
 80025f0:	f7fe fada 	bl	8000ba8 <__aeabi_d2f>
 80025f4:	4602      	mov	r2, r0
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <Calculate_Altitude_PID+0x2bc>)
 80025f8:	601a      	str	r2, [r3, #0]

	bmp_reading_index++;
 80025fa:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <Calculate_Altitude_PID+0x2ac>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b48      	ldr	r3, [pc, #288]	; (8002724 <Calculate_Altitude_PID+0x2ac>)
 8002604:	701a      	strb	r2, [r3, #0]

	if(bmp_reading_index == 4)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <Calculate_Altitude_PID+0x2ac>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d102      	bne.n	8002614 <Calculate_Altitude_PID+0x19c>
		bmp_reading_index = 0;
 800260e:	4b45      	ldr	r3, [pc, #276]	; (8002724 <Calculate_Altitude_PID+0x2ac>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]

	pid_error_temp = pid_altitude_setpoint - slow_bmp_altitude;
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <Calculate_Altitude_PID+0x2cc>)
 8002616:	ed93 7a00 	vldr	s14, [r3]
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <Calculate_Altitude_PID+0x2bc>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	4b48      	ldr	r3, [pc, #288]	; (8002748 <Calculate_Altitude_PID+0x2d0>)
 8002626:	edc3 7a00 	vstr	s15, [r3]
	pid_alt_i += ki_alt * pid_error_temp;
 800262a:	4b48      	ldr	r3, [pc, #288]	; (800274c <Calculate_Altitude_PID+0x2d4>)
 800262c:	ed93 7a00 	vldr	s14, [r3]
 8002630:	4b45      	ldr	r3, [pc, #276]	; (8002748 <Calculate_Altitude_PID+0x2d0>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800263a:	4b45      	ldr	r3, [pc, #276]	; (8002750 <Calculate_Altitude_PID+0x2d8>)
 800263c:	edd3 7a00 	vldr	s15, [r3]
 8002640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002644:	4b42      	ldr	r3, [pc, #264]	; (8002750 <Calculate_Altitude_PID+0x2d8>)
 8002646:	edc3 7a00 	vstr	s15, [r3]

	if(pid_alt_i > 100)
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <Calculate_Altitude_PID+0x2d8>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002754 <Calculate_Altitude_PID+0x2dc>
 8002654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	dd03      	ble.n	8002666 <Calculate_Altitude_PID+0x1ee>
		pid_alt_i = 100;
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <Calculate_Altitude_PID+0x2d8>)
 8002660:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <Calculate_Altitude_PID+0x2e0>)
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e00c      	b.n	8002680 <Calculate_Altitude_PID+0x208>
	else if(pid_alt_i < -100)
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <Calculate_Altitude_PID+0x2d8>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800275c <Calculate_Altitude_PID+0x2e4>
 8002670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d502      	bpl.n	8002680 <Calculate_Altitude_PID+0x208>
		pid_alt_i = -100;
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <Calculate_Altitude_PID+0x2d8>)
 800267c:	4a38      	ldr	r2, [pc, #224]	; (8002760 <Calculate_Altitude_PID+0x2e8>)
 800267e:	601a      	str	r2, [r3, #0]

	altitude_pid_output = (pid_error_temp * kp_alt) + pid_alt_i + ((pid_error_temp - pid_alt_last_error) * kd_alt);
 8002680:	4b31      	ldr	r3, [pc, #196]	; (8002748 <Calculate_Altitude_PID+0x2d0>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <Calculate_Altitude_PID+0x2ec>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002690:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <Calculate_Altitude_PID+0x2d8>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <Calculate_Altitude_PID+0x2d0>)
 800269c:	edd3 6a00 	vldr	s13, [r3]
 80026a0:	4b31      	ldr	r3, [pc, #196]	; (8002768 <Calculate_Altitude_PID+0x2f0>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <Calculate_Altitude_PID+0x2f4>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026bc:	ee17 2a90 	vmov	r2, s15
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <Calculate_Altitude_PID+0x2f8>)
 80026c2:	601a      	str	r2, [r3, #0]

	if(altitude_pid_output > 100)
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <Calculate_Altitude_PID+0x2f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b64      	cmp	r3, #100	; 0x64
 80026ca:	dd03      	ble.n	80026d4 <Calculate_Altitude_PID+0x25c>
		altitude_pid_output = 100;
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <Calculate_Altitude_PID+0x2f8>)
 80026ce:	2264      	movs	r2, #100	; 0x64
 80026d0:	601a      	str	r2, [r3, #0]
	else if(altitude_pid_output < -100)
		altitude_pid_output = -100;
}
 80026d2:	e008      	b.n	80026e6 <Calculate_Altitude_PID+0x26e>
	else if(altitude_pid_output < -100)
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <Calculate_Altitude_PID+0x2f8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80026dc:	da03      	bge.n	80026e6 <Calculate_Altitude_PID+0x26e>
		altitude_pid_output = -100;
 80026de:	4b24      	ldr	r3, [pc, #144]	; (8002770 <Calculate_Altitude_PID+0x2f8>)
 80026e0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	bdb0      	pop	{r4, r5, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	3feccccc 	.word	0x3feccccc
 80026f8:	9999999a 	.word	0x9999999a
 80026fc:	3fb99999 	.word	0x3fb99999
 8002700:	9999999a 	.word	0x9999999a
 8002704:	3fd99999 	.word	0x3fd99999
 8002708:	9999999a 	.word	0x9999999a
 800270c:	bfd99999 	.word	0xbfd99999
 8002710:	eb851eb8 	.word	0xeb851eb8
 8002714:	3fbeb851 	.word	0x3fbeb851
 8002718:	eb851eb8 	.word	0xeb851eb8
 800271c:	bfbeb851 	.word	0xbfbeb851
 8002720:	200008d0 	.word	0x200008d0
 8002724:	20000264 	.word	0x20000264
 8002728:	20000338 	.word	0x20000338
 800272c:	200002e8 	.word	0x200002e8
 8002730:	2000026c 	.word	0x2000026c
 8002734:	20000270 	.word	0x20000270
 8002738:	20000268 	.word	0x20000268
 800273c:	3ecccccd 	.word	0x3ecccccd
 8002740:	becccccd 	.word	0xbecccccd
 8002744:	20000018 	.word	0x20000018
 8002748:	200008d4 	.word	0x200008d4
 800274c:	2000027c 	.word	0x2000027c
 8002750:	20000284 	.word	0x20000284
 8002754:	42c80000 	.word	0x42c80000
 8002758:	42c80000 	.word	0x42c80000
 800275c:	c2c80000 	.word	0xc2c80000
 8002760:	c2c80000 	.word	0xc2c80000
 8002764:	20000278 	.word	0x20000278
 8002768:	20000274 	.word	0x20000274
 800276c:	20000280 	.word	0x20000280
 8002770:	200005ac 	.word	0x200005ac

08002774 <Control_Loop>:
uint8_t launched = 0, launching = 0, landing = 0;
uint8_t ready_for_next_command = 1;
uint8_t manual_mode = 0;

void Control_Loop()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
	if(landing)
	{

	}

	if(program_counter < 512 && ready_for_next_command)
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <Control_Loop+0x48>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002782:	d216      	bcs.n	80027b2 <Control_Loop+0x3e>
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <Control_Loop+0x4c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <Control_Loop+0x3e>
	{
		if(GetMillisDifference(&control_loop_wait_timer) >= control_loop_wait_time)
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <Control_Loop+0x50>)
 800278e:	f001 fb2f 	bl	8003df0 <GetMillisDifference>
 8002792:	4602      	mov	r2, r0
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <Control_Loop+0x54>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d30a      	bcc.n	80027b2 <Control_Loop+0x3e>
		{
			uint16_t increment_index = Parse_Command((uint8_t *)&program_buffer, program_counter);
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <Control_Loop+0x48>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	4619      	mov	r1, r3
 80027a2:	480a      	ldr	r0, [pc, #40]	; (80027cc <Control_Loop+0x58>)
 80027a4:	f000 f814 	bl	80027d0 <Parse_Command>
 80027a8:	4603      	mov	r3, r0
 80027aa:	80fb      	strh	r3, [r7, #6]
			program_counter = increment_index;
 80027ac:	4a03      	ldr	r2, [pc, #12]	; (80027bc <Control_Loop+0x48>)
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	8013      	strh	r3, [r2, #0]
		}
	}
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000288 	.word	0x20000288
 80027c0:	2000001c 	.word	0x2000001c
 80027c4:	2000063c 	.word	0x2000063c
 80027c8:	2000028c 	.word	0x2000028c
 80027cc:	20000398 	.word	0x20000398

080027d0 <Parse_Command>:

uint16_t Parse_Command(uint8_t *cmd_array, uint16_t cmd_index)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
	uint16_t output_index = cmd_index;
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	81fb      	strh	r3, [r7, #14]

	switch(cmd_array[cmd_index])
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d846      	bhi.n	800287a <Parse_Command+0xaa>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <Parse_Command+0x24>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002809 	.word	0x08002809
 80027f8:	08002811 	.word	0x08002811
 80027fc:	08002847 	.word	0x08002847
 8002800:	08002867 	.word	0x08002867
 8002804:	0800286d 	.word	0x0800286d
	{
	case 0x00:	//No OP
		output_index++;
 8002808:	89fb      	ldrh	r3, [r7, #14]
 800280a:	3301      	adds	r3, #1
 800280c:	81fb      	strh	r3, [r7, #14]
		break;
 800280e:	e034      	b.n	800287a <Parse_Command+0xaa>
	case 0x01:	//Toggle LED: uint8_t
		if(cmd_array[cmd_index + 1] == 0x01)
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	3301      	adds	r3, #1
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d104      	bne.n	8002828 <Parse_Command+0x58>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800281e:	2102      	movs	r1, #2
 8002820:	4818      	ldr	r0, [pc, #96]	; (8002884 <Parse_Command+0xb4>)
 8002822:	f003 fba8 	bl	8005f76 <HAL_GPIO_TogglePin>
 8002826:	e00a      	b.n	800283e <Parse_Command+0x6e>
		}
		else if(cmd_array[cmd_index + 1] == 0x02)
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	3301      	adds	r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d103      	bne.n	800283e <Parse_Command+0x6e>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002836:	2104      	movs	r1, #4
 8002838:	4812      	ldr	r0, [pc, #72]	; (8002884 <Parse_Command+0xb4>)
 800283a:	f003 fb9c 	bl	8005f76 <HAL_GPIO_TogglePin>
		}

		output_index += 2;
 800283e:	89fb      	ldrh	r3, [r7, #14]
 8002840:	3302      	adds	r3, #2
 8002842:	81fb      	strh	r3, [r7, #14]
		break;
 8002844:	e019      	b.n	800287a <Parse_Command+0xaa>
	case 0x02:	//Wait: uint32_t
		control_loop_wait_timer = GetMillis();
 8002846:	f001 fac1 	bl	8003dcc <GetMillis>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <Parse_Command+0xb8>)
 800284e:	601a      	str	r2, [r3, #0]
		control_loop_wait_time = *((uint32_t *)&cmd_array[cmd_index + 1]);
 8002850:	887b      	ldrh	r3, [r7, #2]
 8002852:	3301      	adds	r3, #1
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	4413      	add	r3, r2
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a0c      	ldr	r2, [pc, #48]	; (800288c <Parse_Command+0xbc>)
 800285c:	6013      	str	r3, [r2, #0]
		output_index += 5;
 800285e:	89fb      	ldrh	r3, [r7, #14]
 8002860:	3305      	adds	r3, #5
 8002862:	81fb      	strh	r3, [r7, #14]
		break;
 8002864:	e009      	b.n	800287a <Parse_Command+0xaa>
	case 0x03:	//Restart program
		output_index = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	81fb      	strh	r3, [r7, #14]
		break;
 800286a:	e006      	b.n	800287a <Parse_Command+0xaa>
	case 0x04:	//Launch TEST
		Parse_Requested_State(LAUNCHED);
 800286c:	2001      	movs	r0, #1
 800286e:	f000 f80f 	bl	8002890 <Parse_Requested_State>
		output_index++;
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	3301      	adds	r3, #1
 8002876:	81fb      	strh	r3, [r7, #14]
		break;
 8002878:	bf00      	nop
	}

	return output_index;
 800287a:	89fb      	ldrh	r3, [r7, #14]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40020800 	.word	0x40020800
 8002888:	2000063c 	.word	0x2000063c
 800288c:	2000028c 	.word	0x2000028c

08002890 <Parse_Requested_State>:

void Parse_Requested_State(int32_t requested_state)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	switch(requested_state)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <Parse_Requested_State+0x14>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d017      	beq.n	80028d2 <Parse_Requested_State+0x42>
		}
		else if(launched)
			ready_for_next_command = 1;
		break;
	}
}
 80028a2:	e047      	b.n	8002934 <Parse_Requested_State+0xa4>
		if(launched && !landing)
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <Parse_Requested_State+0xac>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <Parse_Requested_State+0x32>
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <Parse_Requested_State+0xb0>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d106      	bne.n	80028c2 <Parse_Requested_State+0x32>
			landing = 1;
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <Parse_Requested_State+0xb0>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 0;
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <Parse_Requested_State+0xb4>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
		break;
 80028c0:	e035      	b.n	800292e <Parse_Requested_State+0x9e>
		else if(!launched)
 80028c2:	4b1e      	ldr	r3, [pc, #120]	; (800293c <Parse_Requested_State+0xac>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d131      	bne.n	800292e <Parse_Requested_State+0x9e>
			ready_for_next_command = 1;
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <Parse_Requested_State+0xb4>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
		break;
 80028d0:	e02d      	b.n	800292e <Parse_Requested_State+0x9e>
		if(!launched && !launching)
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <Parse_Requested_State+0xac>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d121      	bne.n	800291e <Parse_Requested_State+0x8e>
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <Parse_Requested_State+0xb8>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11d      	bne.n	800291e <Parse_Requested_State+0x8e>
			launching = 1;
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <Parse_Requested_State+0xb8>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
			acc_magnitude_at_start = acc_magnitude;
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <Parse_Requested_State+0xbc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <Parse_Requested_State+0xc0>)
 80028ee:	6013      	str	r3, [r2, #0]
			ready_for_next_command = 0;
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <Parse_Requested_State+0xb4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
			launch_timer = GetMillis();
 80028f6:	f001 fa69 	bl	8003dcc <GetMillis>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <Parse_Requested_State+0xc4>)
 80028fe:	601a      	str	r2, [r3, #0]
			ClearManualBuffer();
 8002900:	f001 ffc4 	bl	800488c <ClearManualBuffer>
			ClearPrintBuffer();
 8002904:	f001 fff4 	bl	80048f0 <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Launching.\n");
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <Parse_Requested_State+0xc8>)
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <Parse_Requested_State+0xcc>)
 800290c:	4614      	mov	r4, r2
 800290e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002910:	6020      	str	r0, [r4, #0]
 8002912:	6061      	str	r1, [r4, #4]
 8002914:	60a2      	str	r2, [r4, #8]
			PrintManualPacket();
 8002916:	f002 f805 	bl	8004924 <PrintManualPacket>
		{
 800291a:	bf00      	nop
		break;
 800291c:	e009      	b.n	8002932 <Parse_Requested_State+0xa2>
		else if(launched)
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <Parse_Requested_State+0xac>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <Parse_Requested_State+0xa2>
			ready_for_next_command = 1;
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <Parse_Requested_State+0xb4>)
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
		break;
 800292c:	e001      	b.n	8002932 <Parse_Requested_State+0xa2>
		break;
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <Parse_Requested_State+0xa4>
		break;
 8002932:	bf00      	nop
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	20000290 	.word	0x20000290
 8002940:	20000292 	.word	0x20000292
 8002944:	2000001c 	.word	0x2000001c
 8002948:	20000291 	.word	0x20000291
 800294c:	20000b60 	.word	0x20000b60
 8002950:	20000b44 	.word	0x20000b44
 8002954:	200006b8 	.word	0x200006b8
 8002958:	20000c48 	.word	0x20000c48
 800295c:	08012358 	.word	0x08012358

08002960 <Launch_Behavior>:
int32_t idle_throttle = 125;
uint8_t z_acc_fast_reading_index = 0, z_acc_slow_reading_index = 0;
uint32_t launch_timer;

void Launch_Behavior()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af02      	add	r7, sp, #8
	z_acc_fast_total -= z_acc_fast[z_acc_fast_reading_index];
 8002966:	4b42      	ldr	r3, [pc, #264]	; (8002a70 <Launch_Behavior+0x110>)
 8002968:	ed93 7a00 	vldr	s14, [r3]
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <Launch_Behavior+0x114>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4a41      	ldr	r2, [pc, #260]	; (8002a78 <Launch_Behavior+0x118>)
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	edd3 7a00 	vldr	s15, [r3]
 800297a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297e:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <Launch_Behavior+0x110>)
 8002980:	edc3 7a00 	vstr	s15, [r3]
	z_acc_fast[z_acc_fast_reading_index] = acc_magnitude;
 8002984:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <Launch_Behavior+0x114>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <Launch_Behavior+0x11c>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	493a      	ldr	r1, [pc, #232]	; (8002a78 <Launch_Behavior+0x118>)
 8002990:	0083      	lsls	r3, r0, #2
 8002992:	440b      	add	r3, r1
 8002994:	601a      	str	r2, [r3, #0]
	z_acc_fast_total += z_acc_fast[z_acc_fast_reading_index];
 8002996:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <Launch_Behavior+0x114>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4a37      	ldr	r2, [pc, #220]	; (8002a78 <Launch_Behavior+0x118>)
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	ed93 7a00 	vldr	s14, [r3]
 80029a4:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <Launch_Behavior+0x110>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <Launch_Behavior+0x110>)
 80029b0:	edc3 7a00 	vstr	s15, [r3]

	z_acc_fast_reading_index++;
 80029b4:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <Launch_Behavior+0x114>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <Launch_Behavior+0x114>)
 80029be:	701a      	strb	r2, [r3, #0]

	if(z_acc_fast_reading_index == 25)
 80029c0:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <Launch_Behavior+0x114>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b19      	cmp	r3, #25
 80029c6:	d102      	bne.n	80029ce <Launch_Behavior+0x6e>
	{
		z_acc_fast_reading_index = 0;
 80029c8:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <Launch_Behavior+0x114>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
	}

	if(GetMillisDifference(&launch_timer) >= 1000)
 80029ce:	482c      	ldr	r0, [pc, #176]	; (8002a80 <Launch_Behavior+0x120>)
 80029d0:	f001 fa0e 	bl	8003df0 <GetMillisDifference>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029da:	d345      	bcc.n	8002a68 <Launch_Behavior+0x108>
	{
		hover_throttle += 0.0625;
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <Launch_Behavior+0x124>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002a88 <Launch_Behavior+0x128>
 80029e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <Launch_Behavior+0x124>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]

		if((z_acc_fast_total / 25) - acc_magnitude_at_start > 350)
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <Launch_Behavior+0x110>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80029fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <Launch_Behavior+0x12c>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002a90 <Launch_Behavior+0x130>
 8002a0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	dc00      	bgt.n	8002a18 <Launch_Behavior+0xb8>
			ClearPrintBuffer();
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
			PrintManualPacket();
		}
	}
}
 8002a16:	e027      	b.n	8002a68 <Launch_Behavior+0x108>
			launched = 1;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <Launch_Behavior+0x134>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
			launching = 0;
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <Launch_Behavior+0x138>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
			landing = 0;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <Launch_Behavior+0x13c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			idle_throttle = (int32_t)hover_throttle;
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <Launch_Behavior+0x124>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a34:	ee17 2a90 	vmov	r2, s15
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <Launch_Behavior+0x140>)
 8002a3a:	601a      	str	r2, [r3, #0]
			ready_for_next_command = 1;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <Launch_Behavior+0x144>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	701a      	strb	r2, [r3, #0]
			altitude_hold_flag = 1;
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <Launch_Behavior+0x148>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
			ClearManualBuffer();
 8002a48:	f001 ff20 	bl	800488c <ClearManualBuffer>
			ClearPrintBuffer();
 8002a4c:	f001 ff50 	bl	80048f0 <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <Launch_Behavior+0x140>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <Launch_Behavior+0x14c>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <Launch_Behavior+0x150>)
 8002a5c:	4915      	ldr	r1, [pc, #84]	; (8002ab4 <Launch_Behavior+0x154>)
 8002a5e:	4816      	ldr	r0, [pc, #88]	; (8002ab8 <Launch_Behavior+0x158>)
 8002a60:	f00c fe2c 	bl	800f6bc <siprintf>
			PrintManualPacket();
 8002a64:	f001 ff5e 	bl	8004924 <PrintManualPacket>
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200008cc 	.word	0x200008cc
 8002a74:	20000294 	.word	0x20000294
 8002a78:	200005b0 	.word	0x200005b0
 8002a7c:	20000b60 	.word	0x20000b60
 8002a80:	200006b8 	.word	0x200006b8
 8002a84:	20000020 	.word	0x20000020
 8002a88:	3d800000 	.word	0x3d800000
 8002a8c:	20000b44 	.word	0x20000b44
 8002a90:	43af0000 	.word	0x43af0000
 8002a94:	20000290 	.word	0x20000290
 8002a98:	20000291 	.word	0x20000291
 8002a9c:	20000292 	.word	0x20000292
 8002aa0:	20000024 	.word	0x20000024
 8002aa4:	2000001c 	.word	0x2000001c
 8002aa8:	200002ad 	.word	0x200002ad
 8002aac:	08012378 	.word	0x08012378
 8002ab0:	08012364 	.word	0x08012364
 8002ab4:	08012370 	.word	0x08012370
 8002ab8:	20000c48 	.word	0x20000c48

08002abc <Land_Behavior>:

void Land_Behavior()
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0

}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <MX_DMA_Init+0x6c>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <MX_DMA_Init+0x6c>)
 8002adc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <MX_DMA_Init+0x6c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	200b      	movs	r0, #11
 8002af4:	f002 fd25 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002af8:	200b      	movs	r0, #11
 8002afa:	f002 fd3e 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	200e      	movs	r0, #14
 8002b04:	f002 fd1d 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002b08:	200e      	movs	r0, #14
 8002b0a:	f002 fd36 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2011      	movs	r0, #17
 8002b14:	f002 fd15 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b18:	2011      	movs	r0, #17
 8002b1a:	f002 fd2e 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2100      	movs	r1, #0
 8002b22:	202f      	movs	r0, #47	; 0x2f
 8002b24:	f002 fd0d 	bl	8005542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002b28:	202f      	movs	r0, #47	; 0x2f
 8002b2a:	f002 fd26 	bl	800557a <HAL_NVIC_EnableIRQ>

}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800

08002b3c <EEPROM_Clear_Buffer>:
uint8_t eeprom_write_buffer_width = 2;
uint8_t eeprom_read_write_buffer[34];
uint8_t eeprom_read_buffer_index = 0;

void EEPROM_Clear_Buffer()
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	e007      	b.n	8002b58 <EEPROM_Clear_Buffer+0x1c>
	{
		eeprom_read_write_buffer[i] = 0x00;
 8002b48:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <EEPROM_Clear_Buffer+0x30>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3301      	adds	r3, #1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b21      	cmp	r3, #33	; 0x21
 8002b5c:	ddf4      	ble.n	8002b48 <EEPROM_Clear_Buffer+0xc>
	}
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	200008dc 	.word	0x200008dc

08002b70 <EEPROM_Save_Page>:

//This also works with single bytes
void EEPROM_Save_Page(uint16_t address)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
	eeprom_read_write_buffer[0] = (uint8_t)((address >> 8) & 0xFF);
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <EEPROM_Save_Page+0x40>)
 8002b84:	701a      	strb	r2, [r3, #0]
	eeprom_read_write_buffer[1] = (uint8_t)(address & 0xFF);
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <EEPROM_Save_Page+0x40>)
 8002b8c:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR, (uint8_t *)eeprom_read_write_buffer, eeprom_write_buffer_width, 50);
 8002b8e:	23a0      	movs	r3, #160	; 0xa0
 8002b90:	b299      	uxth	r1, r3
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <EEPROM_Save_Page+0x44>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	2332      	movs	r3, #50	; 0x32
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <EEPROM_Save_Page+0x40>)
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <EEPROM_Save_Page+0x48>)
 8002ba2:	f003 fb3b 	bl	800621c <HAL_I2C_Master_Transmit>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200008dc 	.word	0x200008dc
 8002bb4:	20000028 	.word	0x20000028
 8002bb8:	20000960 	.word	0x20000960

08002bbc <EEPROM_Read_Page>:

//This also works with single bytes(set size to 1)
void EEPROM_Read_Page(uint16_t address, uint8_t size)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af04      	add	r7, sp, #16
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	80fb      	strh	r3, [r7, #6]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *)eeprom_read_write_buffer, size, 50);
 8002bcc:	23a0      	movs	r3, #160	; 0xa0
 8002bce:	b299      	uxth	r1, r3
 8002bd0:	797b      	ldrb	r3, [r7, #5]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	88f8      	ldrh	r0, [r7, #6]
 8002bd6:	2232      	movs	r2, #50	; 0x32
 8002bd8:	9202      	str	r2, [sp, #8]
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <EEPROM_Read_Page+0x38>)
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	2310      	movs	r3, #16
 8002be2:	4602      	mov	r2, r0
 8002be4:	4804      	ldr	r0, [pc, #16]	; (8002bf8 <EEPROM_Read_Page+0x3c>)
 8002be6:	f003 fc17 	bl	8006418 <HAL_I2C_Mem_Read>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200008dc 	.word	0x200008dc
 8002bf8:	20000960 	.word	0x20000960

08002bfc <EEPROM_Write_Buffer>:

void EEPROM_Write_Buffer(uint8_t *num, uint8_t size)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e00d      	b.n	8002c2a <EEPROM_Write_Buffer+0x2e>
	{
		eeprom_read_write_buffer[eeprom_write_buffer_width + i] = *((uint8_t *)num + i);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	441a      	add	r2, r3
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <EEPROM_Write_Buffer+0x50>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	440b      	add	r3, r1
 8002c1e:	7811      	ldrb	r1, [r2, #0]
 8002c20:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <EEPROM_Write_Buffer+0x54>)
 8002c22:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < size; i++)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3301      	adds	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbed      	blt.n	8002c0e <EEPROM_Write_Buffer+0x12>
	}

	eeprom_write_buffer_width += size;
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <EEPROM_Write_Buffer+0x50>)
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	4413      	add	r3, r2
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <EEPROM_Write_Buffer+0x50>)
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	20000028 	.word	0x20000028
 8002c50:	200008dc 	.word	0x200008dc

08002c54 <EEPROM_Read_Buffer>:

void EEPROM_Read_Buffer(uint8_t *output, uint8_t size)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e00d      	b.n	8002c82 <EEPROM_Read_Buffer+0x2e>
	{
		*(((uint8_t *)output) + i) = eeprom_read_write_buffer[eeprom_read_buffer_index + i];
 8002c66:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <EEPROM_Read_Buffer+0x50>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	440b      	add	r3, r1
 8002c76:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <EEPROM_Read_Buffer+0x54>)
 8002c78:	5c8a      	ldrb	r2, [r1, r2]
 8002c7a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	dbed      	blt.n	8002c66 <EEPROM_Read_Buffer+0x12>
	}

	eeprom_read_buffer_index += size;
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <EEPROM_Read_Buffer+0x50>)
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <EEPROM_Read_Buffer+0x50>)
 8002c96:	701a      	strb	r2, [r3, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	20000295 	.word	0x20000295
 8002ca8:	200008dc 	.word	0x200008dc

08002cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb2:	f107 0314 	add.w	r3, r7, #20
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <MX_GPIO_Init+0xe0>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2106      	movs	r1, #6
 8002d36:	4816      	ldr	r0, [pc, #88]	; (8002d90 <MX_GPIO_Init+0xe4>)
 8002d38:	f003 f904 	bl	8005f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002d42:	4814      	ldr	r0, [pc, #80]	; (8002d94 <MX_GPIO_Init+0xe8>)
 8002d44:	f003 f8fe 	bl	8005f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8002d48:	2306      	movs	r3, #6
 8002d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <MX_GPIO_Init+0xe4>)
 8002d60:	f002 ff3e 	bl	8005be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4805      	ldr	r0, [pc, #20]	; (8002d94 <MX_GPIO_Init+0xe8>)
 8002d7e:	f002 ff2f 	bl	8005be0 <HAL_GPIO_Init>

}
 8002d82:	bf00      	nop
 8002d84:	3728      	adds	r7, #40	; 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020400 	.word	0x40020400

08002d98 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002d9e:	4a13      	ldr	r2, [pc, #76]	; (8002dec <MX_I2C1_Init+0x54>)
 8002da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002da2:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002da4:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <MX_I2C1_Init+0x58>)
 8002da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dd4:	4804      	ldr	r0, [pc, #16]	; (8002de8 <MX_I2C1_Init+0x50>)
 8002dd6:	f003 f8e9 	bl	8005fac <HAL_I2C_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002de0:	f001 f894 	bl	8003f0c <Error_Handler>
  }

}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000960 	.word	0x20000960
 8002dec:	40005400 	.word	0x40005400
 8002df0:	00061a80 	.word	0x00061a80

08002df4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002dfa:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <MX_I2C2_Init+0x54>)
 8002dfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e00:	4a12      	ldr	r2, [pc, #72]	; (8002e4c <MX_I2C2_Init+0x58>)
 8002e02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e30:	4804      	ldr	r0, [pc, #16]	; (8002e44 <MX_I2C2_Init+0x50>)
 8002e32:	f003 f8bb 	bl	8005fac <HAL_I2C_Init>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002e3c:	f001 f866 	bl	8003f0c <Error_Handler>
  }

}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200009b4 	.word	0x200009b4
 8002e48:	40005800 	.word	0x40005800
 8002e4c:	00061a80 	.word	0x00061a80

08002e50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	; 0x30
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a9d      	ldr	r2, [pc, #628]	; (80030e4 <HAL_I2C_MspInit+0x294>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	f040 8093 	bne.w	8002f9a <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	4b9b      	ldr	r3, [pc, #620]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a9a      	ldr	r2, [pc, #616]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b98      	ldr	r3, [pc, #608]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e90:	23c0      	movs	r3, #192	; 0xc0
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e94:	2312      	movs	r3, #18
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4890      	ldr	r0, [pc, #576]	; (80030ec <HAL_I2C_MspInit+0x29c>)
 8002eac:	f002 fe98 	bl	8005be0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	4b8c      	ldr	r3, [pc, #560]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	4a8b      	ldr	r2, [pc, #556]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002eba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec0:	4b89      	ldr	r3, [pc, #548]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002ecc:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002ece:	4a89      	ldr	r2, [pc, #548]	; (80030f4 <HAL_I2C_MspInit+0x2a4>)
 8002ed0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002ed2:	4b87      	ldr	r3, [pc, #540]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ed8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eda:	4b85      	ldr	r3, [pc, #532]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee0:	4b83      	ldr	r3, [pc, #524]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee6:	4b82      	ldr	r3, [pc, #520]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eee:	4b80      	ldr	r3, [pc, #512]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef4:	4b7e      	ldr	r3, [pc, #504]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f00:	4b7b      	ldr	r3, [pc, #492]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002f02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f06:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f08:	4b79      	ldr	r3, [pc, #484]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002f0e:	4878      	ldr	r0, [pc, #480]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002f10:	f002 fb4e 	bl	80055b0 <HAL_DMA_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002f1a:	f000 fff7 	bl	8003f0c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a73      	ldr	r2, [pc, #460]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
 8002f24:	4a72      	ldr	r2, [pc, #456]	; (80030f0 <HAL_I2C_MspInit+0x2a0>)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002f2a:	4b73      	ldr	r3, [pc, #460]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f2c:	4a73      	ldr	r2, [pc, #460]	; (80030fc <HAL_I2C_MspInit+0x2ac>)
 8002f2e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002f30:	4b71      	ldr	r3, [pc, #452]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f36:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f38:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3e:	4b6e      	ldr	r3, [pc, #440]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f44:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f52:	4b69      	ldr	r3, [pc, #420]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002f58:	4b67      	ldr	r3, [pc, #412]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f5e:	4b66      	ldr	r3, [pc, #408]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f64:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f66:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002f6c:	4862      	ldr	r0, [pc, #392]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f6e:	f002 fb1f 	bl	80055b0 <HAL_DMA_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8002f78:	f000 ffc8 	bl	8003f0c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a5e      	ldr	r2, [pc, #376]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
 8002f82:	4a5d      	ldr	r2, [pc, #372]	; (80030f8 <HAL_I2C_MspInit+0x2a8>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	201f      	movs	r0, #31
 8002f8e:	f002 fad8 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f92:	201f      	movs	r0, #31
 8002f94:	f002 faf1 	bl	800557a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002f98:	e0a0      	b.n	80030dc <HAL_I2C_MspInit+0x28c>
  else if(i2cHandle->Instance==I2C2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_I2C_MspInit+0x2b0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	f040 809b 	bne.w	80030dc <HAL_I2C_MspInit+0x28c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a4e      	ldr	r2, [pc, #312]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc8:	2312      	movs	r3, #18
 8002fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd8:	f107 031c 	add.w	r3, r7, #28
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4843      	ldr	r0, [pc, #268]	; (80030ec <HAL_I2C_MspInit+0x29c>)
 8002fe0:	f002 fdfe 	bl	8005be0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	4b3f      	ldr	r3, [pc, #252]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a3e      	ldr	r2, [pc, #248]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002fee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b3c      	ldr	r3, [pc, #240]	; (80030e8 <HAL_I2C_MspInit+0x298>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003002:	4a41      	ldr	r2, [pc, #260]	; (8003108 <HAL_I2C_MspInit+0x2b8>)
 8003004:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003008:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800300c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003010:	2240      	movs	r2, #64	; 0x40
 8003012:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003014:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800301a:	4b3a      	ldr	r3, [pc, #232]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 800301c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003020:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003024:	2200      	movs	r2, #0
 8003026:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800302e:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003030:	2200      	movs	r2, #0
 8003032:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003036:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800303a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800303c:	4b31      	ldr	r3, [pc, #196]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 800303e:	2200      	movs	r2, #0
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003042:	4830      	ldr	r0, [pc, #192]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003044:	f002 fab4 	bl	80055b0 <HAL_DMA_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_MspInit+0x202>
      Error_Handler();
 800304e:	f000 ff5d 	bl	8003f0c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a2b      	ldr	r2, [pc, #172]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 8003056:	635a      	str	r2, [r3, #52]	; 0x34
 8003058:	4a2a      	ldr	r2, [pc, #168]	; (8003104 <HAL_I2C_MspInit+0x2b4>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 800305e:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <HAL_I2C_MspInit+0x2c0>)
 8003062:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 8003066:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800306a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800306c:	4b27      	ldr	r3, [pc, #156]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 800307a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800307e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 8003082:	2200      	movs	r2, #0
 8003084:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 8003088:	2200      	movs	r2, #0
 800308a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003092:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 8003094:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003098:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800309a:	4b1c      	ldr	r3, [pc, #112]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 800309c:	2200      	movs	r2, #0
 800309e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80030a0:	481a      	ldr	r0, [pc, #104]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 80030a2:	f002 fa85 	bl	80055b0 <HAL_DMA_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_MspInit+0x260>
      Error_Handler();
 80030ac:	f000 ff2e 	bl	8003f0c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_I2C_MspInit+0x2bc>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	2100      	movs	r1, #0
 80030c0:	2021      	movs	r0, #33	; 0x21
 80030c2:	f002 fa3e 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80030c6:	2021      	movs	r0, #33	; 0x21
 80030c8:	f002 fa57 	bl	800557a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2100      	movs	r1, #0
 80030d0:	2022      	movs	r0, #34	; 0x22
 80030d2:	f002 fa36 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80030d6:	2022      	movs	r0, #34	; 0x22
 80030d8:	f002 fa4f 	bl	800557a <HAL_NVIC_EnableIRQ>
}
 80030dc:	bf00      	nop
 80030de:	3730      	adds	r7, #48	; 0x30
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40005400 	.word	0x40005400
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020400 	.word	0x40020400
 80030f0:	20000ac8 	.word	0x20000ac8
 80030f4:	40026010 	.word	0x40026010
 80030f8:	20000900 	.word	0x20000900
 80030fc:	400260a0 	.word	0x400260a0
 8003100:	40005800 	.word	0x40005800
 8003104:	20000a68 	.word	0x20000a68
 8003108:	400260b8 	.word	0x400260b8
 800310c:	20000a08 	.word	0x20000a08
 8003110:	40026058 	.word	0x40026058

08003114 <Setup_IMU>:
float acc_magnitude, acc_x, acc_y, acc_z, acc_magnitude_at_start;
float gyro_x_angle, gyro_y_angle, gyro_z_angle;
float gyro_x_calibration, gyro_y_calibration, gyro_z_calibration;

void Setup_IMU()
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af02      	add	r7, sp, #8
	imu_setup_buffer[0] = 0x6B;
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <Setup_IMU+0x90>)
 800311c:	226b      	movs	r2, #107	; 0x6b
 800311e:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x00;
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <Setup_IMU+0x90>)
 8003122:	2200      	movs	r2, #0
 8003124:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003126:	23d0      	movs	r3, #208	; 0xd0
 8003128:	b299      	uxth	r1, r3
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2302      	movs	r3, #2
 8003132:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <Setup_IMU+0x90>)
 8003134:	481c      	ldr	r0, [pc, #112]	; (80031a8 <Setup_IMU+0x94>)
 8003136:	f003 f871 	bl	800621c <HAL_I2C_Master_Transmit>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <Setup_IMU+0x98>)
 8003140:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8003142:	200a      	movs	r0, #10
 8003144:	f002 f900 	bl	8005348 <HAL_Delay>

	imu_setup_buffer[0] = 0x1B;
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <Setup_IMU+0x90>)
 800314a:	221b      	movs	r2, #27
 800314c:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x08;
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <Setup_IMU+0x90>)
 8003150:	2208      	movs	r2, #8
 8003152:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003154:	23d0      	movs	r3, #208	; 0xd0
 8003156:	b299      	uxth	r1, r3
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2302      	movs	r3, #2
 8003160:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <Setup_IMU+0x90>)
 8003162:	4811      	ldr	r0, [pc, #68]	; (80031a8 <Setup_IMU+0x94>)
 8003164:	f003 f85a 	bl	800621c <HAL_I2C_Master_Transmit>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <Setup_IMU+0x98>)
 800316e:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8003170:	200a      	movs	r0, #10
 8003172:	f002 f8e9 	bl	8005348 <HAL_Delay>

	imu_setup_buffer[0] = 0x1A;
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <Setup_IMU+0x90>)
 8003178:	221a      	movs	r2, #26
 800317a:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x03;
 800317c:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <Setup_IMU+0x90>)
 800317e:	2203      	movs	r2, #3
 8003180:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003182:	23d0      	movs	r3, #208	; 0xd0
 8003184:	b299      	uxth	r1, r3
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2302      	movs	r3, #2
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <Setup_IMU+0x90>)
 8003190:	4805      	ldr	r0, [pc, #20]	; (80031a8 <Setup_IMU+0x94>)
 8003192:	f003 f843 	bl	800621c <HAL_I2C_Master_Transmit>
 8003196:	4603      	mov	r3, r0
 8003198:	461a      	mov	r2, r3
 800319a:	4b04      	ldr	r3, [pc, #16]	; (80031ac <Setup_IMU+0x98>)
 800319c:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000b68 	.word	0x20000b68
 80031a8:	20000960 	.word	0x20000960
 80031ac:	20000b86 	.word	0x20000b86

080031b0 <Calibrate_IMU>:

void Calibrate_IMU()
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2000; i++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e035      	b.n	8003228 <Calibrate_IMU+0x78>
	{
		Read_IMU(1);
 80031bc:	2001      	movs	r0, #1
 80031be:	f000 f875 	bl	80032ac <Read_IMU>
		gyro_x_calibration += raw_gyro_acc_data[0];
 80031c2:	4b32      	ldr	r3, [pc, #200]	; (800328c <Calibrate_IMU+0xdc>)
 80031c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d0:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <Calibrate_IMU+0xe0>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <Calibrate_IMU+0xe0>)
 80031dc:	edc3 7a00 	vstr	s15, [r3]
		gyro_y_calibration += raw_gyro_acc_data[1];
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <Calibrate_IMU+0xdc>)
 80031e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <Calibrate_IMU+0xe4>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f8:	4b26      	ldr	r3, [pc, #152]	; (8003294 <Calibrate_IMU+0xe4>)
 80031fa:	edc3 7a00 	vstr	s15, [r3]
		gyro_z_calibration += raw_gyro_acc_data[2];
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <Calibrate_IMU+0xdc>)
 8003200:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800320c:	4b22      	ldr	r3, [pc, #136]	; (8003298 <Calibrate_IMU+0xe8>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <Calibrate_IMU+0xe8>)
 8003218:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800321c:	2002      	movs	r0, #2
 800321e:	f002 f893 	bl	8005348 <HAL_Delay>
	for(int i = 0; i < 2000; i++)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3301      	adds	r3, #1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800322e:	dbc5      	blt.n	80031bc <Calibrate_IMU+0xc>
	}

	gyro_x_angle = 0;
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <Calibrate_IMU+0xec>)
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
	gyro_y_angle = 0;
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <Calibrate_IMU+0xf0>)
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
	gyro_z_angle = 0;
 8003240:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <Calibrate_IMU+0xf4>)
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

	gyro_x_calibration /= 2000;
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <Calibrate_IMU+0xe0>)
 800324a:	ed93 7a00 	vldr	s14, [r3]
 800324e:	eddf 6a16 	vldr	s13, [pc, #88]	; 80032a8 <Calibrate_IMU+0xf8>
 8003252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <Calibrate_IMU+0xe0>)
 8003258:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_calibration /= 2000;
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <Calibrate_IMU+0xe4>)
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	eddf 6a11 	vldr	s13, [pc, #68]	; 80032a8 <Calibrate_IMU+0xf8>
 8003266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <Calibrate_IMU+0xe4>)
 800326c:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_calibration /= 2000;
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <Calibrate_IMU+0xe8>)
 8003272:	ed93 7a00 	vldr	s14, [r3]
 8003276:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80032a8 <Calibrate_IMU+0xf8>
 800327a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <Calibrate_IMU+0xe8>)
 8003280:	edc3 7a00 	vstr	s15, [r3]
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000b4c 	.word	0x20000b4c
 8003290:	20000b38 	.word	0x20000b38
 8003294:	20000b48 	.word	0x20000b48
 8003298:	20000b40 	.word	0x20000b40
 800329c:	20000b30 	.word	0x20000b30
 80032a0:	20000b3c 	.word	0x20000b3c
 80032a4:	20000b5c 	.word	0x20000b5c
 80032a8:	44fa0000 	.word	0x44fa0000

080032ac <Read_IMU>:

void Read_IMU(uint8_t is_calibrating)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t *)raw_gyro_acc_buffer, 14, HAL_MAX_DELAY);//Implement failure logic later
 80032b6:	23d0      	movs	r3, #208	; 0xd0
 80032b8:	b299      	uxth	r1, r3
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295
 80032be:	9302      	str	r3, [sp, #8]
 80032c0:	230e      	movs	r3, #14
 80032c2:	9301      	str	r3, [sp, #4]
 80032c4:	4b49      	ldr	r3, [pc, #292]	; (80033ec <Read_IMU+0x140>)
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2301      	movs	r3, #1
 80032ca:	223b      	movs	r2, #59	; 0x3b
 80032cc:	4848      	ldr	r0, [pc, #288]	; (80033f0 <Read_IMU+0x144>)
 80032ce:	f003 f8a3 	bl	8006418 <HAL_I2C_Mem_Read>
	raw_gyro_acc_data[3] = (int16_t)((raw_gyro_acc_buffer[0] << 8) | (raw_gyro_acc_buffer[1]));	//Acc X
 80032d2:	4b46      	ldr	r3, [pc, #280]	; (80033ec <Read_IMU+0x140>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	021b      	lsls	r3, r3, #8
 80032d8:	b21a      	sxth	r2, r3
 80032da:	4b44      	ldr	r3, [pc, #272]	; (80033ec <Read_IMU+0x140>)
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <Read_IMU+0x148>)
 80032e6:	80da      	strh	r2, [r3, #6]
	raw_gyro_acc_data[4] = (int16_t)((raw_gyro_acc_buffer[2] << 8) | (raw_gyro_acc_buffer[3]));	//Acc Y
 80032e8:	4b40      	ldr	r3, [pc, #256]	; (80033ec <Read_IMU+0x140>)
 80032ea:	789b      	ldrb	r3, [r3, #2]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	b21a      	sxth	r2, r3
 80032f0:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <Read_IMU+0x140>)
 80032f2:	78db      	ldrb	r3, [r3, #3]
 80032f4:	b21b      	sxth	r3, r3
 80032f6:	4313      	orrs	r3, r2
 80032f8:	b21a      	sxth	r2, r3
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <Read_IMU+0x148>)
 80032fc:	811a      	strh	r2, [r3, #8]
	raw_gyro_acc_data[5] = (int16_t)((raw_gyro_acc_buffer[4] << 8) | (raw_gyro_acc_buffer[5]));	//Acc Z
 80032fe:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <Read_IMU+0x140>)
 8003300:	791b      	ldrb	r3, [r3, #4]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	b21a      	sxth	r2, r3
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <Read_IMU+0x140>)
 8003308:	795b      	ldrb	r3, [r3, #5]
 800330a:	b21b      	sxth	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	b21a      	sxth	r2, r3
 8003310:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <Read_IMU+0x148>)
 8003312:	815a      	strh	r2, [r3, #10]
	raw_imu_temp = (int16_t)((raw_gyro_acc_buffer[6] << 8) | (raw_gyro_acc_buffer[7]));
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <Read_IMU+0x140>)
 8003316:	799b      	ldrb	r3, [r3, #6]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	b21a      	sxth	r2, r3
 800331c:	4b33      	ldr	r3, [pc, #204]	; (80033ec <Read_IMU+0x140>)
 800331e:	79db      	ldrb	r3, [r3, #7]
 8003320:	b21b      	sxth	r3, r3
 8003322:	4313      	orrs	r3, r2
 8003324:	b21a      	sxth	r2, r3
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <Read_IMU+0x14c>)
 8003328:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[0] = (int16_t)((raw_gyro_acc_buffer[8] << 8) | (raw_gyro_acc_buffer[9]));	//Gyro X
 800332a:	4b30      	ldr	r3, [pc, #192]	; (80033ec <Read_IMU+0x140>)
 800332c:	7a1b      	ldrb	r3, [r3, #8]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b21a      	sxth	r2, r3
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <Read_IMU+0x140>)
 8003334:	7a5b      	ldrb	r3, [r3, #9]
 8003336:	b21b      	sxth	r3, r3
 8003338:	4313      	orrs	r3, r2
 800333a:	b21a      	sxth	r2, r3
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <Read_IMU+0x148>)
 800333e:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[1] = (int16_t)((raw_gyro_acc_buffer[10] << 8) | (raw_gyro_acc_buffer[11]));	//Gyro Y
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <Read_IMU+0x140>)
 8003342:	7a9b      	ldrb	r3, [r3, #10]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	b21a      	sxth	r2, r3
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <Read_IMU+0x140>)
 800334a:	7adb      	ldrb	r3, [r3, #11]
 800334c:	b21b      	sxth	r3, r3
 800334e:	4313      	orrs	r3, r2
 8003350:	b21a      	sxth	r2, r3
 8003352:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <Read_IMU+0x148>)
 8003354:	805a      	strh	r2, [r3, #2]
	raw_gyro_acc_data[2] = (int16_t)((raw_gyro_acc_buffer[12] << 8) | (raw_gyro_acc_buffer[13]));	//Gyro Z
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <Read_IMU+0x140>)
 8003358:	7b1b      	ldrb	r3, [r3, #12]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	b21a      	sxth	r2, r3
 800335e:	4b23      	ldr	r3, [pc, #140]	; (80033ec <Read_IMU+0x140>)
 8003360:	7b5b      	ldrb	r3, [r3, #13]
 8003362:	b21b      	sxth	r3, r3
 8003364:	4313      	orrs	r3, r2
 8003366:	b21a      	sxth	r2, r3
 8003368:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <Read_IMU+0x148>)
 800336a:	809a      	strh	r2, [r3, #4]

	if(!is_calibrating)
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d138      	bne.n	80033e4 <Read_IMU+0x138>
	{
		raw_gyro_acc_data[0] -= gyro_x_calibration;
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <Read_IMU+0x148>)
 8003374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <Read_IMU+0x150>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800338a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338e:	ee17 3a90 	vmov	r3, s15
 8003392:	b21a      	sxth	r2, r3
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <Read_IMU+0x148>)
 8003396:	801a      	strh	r2, [r3, #0]
		raw_gyro_acc_data[1] -= gyro_y_calibration;
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <Read_IMU+0x148>)
 800339a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a6:	4b16      	ldr	r3, [pc, #88]	; (8003400 <Read_IMU+0x154>)
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b4:	ee17 3a90 	vmov	r3, s15
 80033b8:	b21a      	sxth	r2, r3
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <Read_IMU+0x148>)
 80033bc:	805a      	strh	r2, [r3, #2]
		raw_gyro_acc_data[2] -= gyro_z_calibration;
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <Read_IMU+0x148>)
 80033c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033cc:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <Read_IMU+0x158>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033da:	ee17 3a90 	vmov	r3, s15
 80033de:	b21a      	sxth	r2, r3
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <Read_IMU+0x148>)
 80033e2:	809a      	strh	r2, [r3, #4]
	}
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000b90 	.word	0x20000b90
 80033f0:	20000960 	.word	0x20000960
 80033f4:	20000b4c 	.word	0x20000b4c
 80033f8:	20000b2c 	.word	0x20000b2c
 80033fc:	20000b38 	.word	0x20000b38
 8003400:	20000b48 	.word	0x20000b48
 8003404:	20000b40 	.word	0x20000b40

08003408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800340e:	f001 ff29 	bl	8005264 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 8003412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003416:	f001 ff97 	bl	8005348 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800341a:	f000 fb7f 	bl	8003b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800341e:	f7ff fc45 	bl	8002cac <MX_GPIO_Init>
  MX_DMA_Init();
 8003422:	f7ff fb53 	bl	8002acc <MX_DMA_Init>
  MX_I2C1_Init();
 8003426:	f7ff fcb7 	bl	8002d98 <MX_I2C1_Init>
  MX_I2C2_Init();
 800342a:	f7ff fce3 	bl	8002df4 <MX_I2C2_Init>
  MX_RTC_Init();
 800342e:	f000 fd75 	bl	8003f1c <MX_RTC_Init>
  MX_TIM3_Init();
 8003432:	f001 fbdb 	bl	8004bec <MX_TIM3_Init>
  MX_TIM5_Init();
 8003436:	f001 fc55 	bl	8004ce4 <MX_TIM5_Init>
  MX_TIM8_Init();
 800343a:	f001 fcc3 	bl	8004dc4 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 800343e:	f00b fb69 	bl	800eb14 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 8003442:	f001 fd83 	bl	8004f4c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8003446:	2100      	movs	r1, #0
 8003448:	4898      	ldr	r0, [pc, #608]	; (80036ac <main+0x2a4>)
 800344a:	f007 fb75 	bl	800ab38 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 800344e:	4898      	ldr	r0, [pc, #608]	; (80036b0 <main+0x2a8>)
 8003450:	f007 faae 	bl	800a9b0 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);//Motor 1 - FL
 8003454:	210c      	movs	r1, #12
 8003456:	4897      	ldr	r0, [pc, #604]	; (80036b4 <main+0x2ac>)
 8003458:	f007 fafa 	bl	800aa50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);//Motor 2 - FR
 800345c:	2108      	movs	r1, #8
 800345e:	4895      	ldr	r0, [pc, #596]	; (80036b4 <main+0x2ac>)
 8003460:	f007 faf6 	bl	800aa50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);//Motor 3 - BR
 8003464:	2104      	movs	r1, #4
 8003466:	4893      	ldr	r0, [pc, #588]	; (80036b4 <main+0x2ac>)
 8003468:	f007 faf2 	bl	800aa50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//Motor 4 - BL
 800346c:	2100      	movs	r1, #0
 800346e:	4891      	ldr	r0, [pc, #580]	; (80036b4 <main+0x2ac>)
 8003470:	f007 faee 	bl	800aa50 <HAL_TIM_PWM_Start>

  auto_packet_buffer[0].total_width = 0;
 8003474:	4b90      	ldr	r3, [pc, #576]	; (80036b8 <main+0x2b0>)
 8003476:	2200      	movs	r2, #0
 8003478:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  auto_packet_buffer[0].var_count = 0;
 800347c:	4b8e      	ldr	r3, [pc, #568]	; (80036b8 <main+0x2b0>)
 800347e:	2200      	movs	r2, #0
 8003480:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  auto_packet_buffer[0].id = GYRO_PACKET;
 8003484:	4b8c      	ldr	r3, [pc, #560]	; (80036b8 <main+0x2b0>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
  auto_packet_buffer[0].send_rate = 1;
 800348a:	4b8b      	ldr	r3, [pc, #556]	; (80036b8 <main+0x2b0>)
 800348c:	2201      	movs	r2, #1
 800348e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[0]), 2);
 8003492:	2202      	movs	r2, #2
 8003494:	4989      	ldr	r1, [pc, #548]	; (80036bc <main+0x2b4>)
 8003496:	2000      	movs	r0, #0
 8003498:	f001 faaa 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[1]), 2);
 800349c:	2202      	movs	r2, #2
 800349e:	4988      	ldr	r1, [pc, #544]	; (80036c0 <main+0x2b8>)
 80034a0:	2000      	movs	r0, #0
 80034a2:	f001 faa5 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[2]), 2);
 80034a6:	2202      	movs	r2, #2
 80034a8:	4986      	ldr	r1, [pc, #536]	; (80036c4 <main+0x2bc>)
 80034aa:	2000      	movs	r0, #0
 80034ac:	f001 faa0 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_x_angle, 4);
 80034b0:	2204      	movs	r2, #4
 80034b2:	4985      	ldr	r1, [pc, #532]	; (80036c8 <main+0x2c0>)
 80034b4:	2000      	movs	r0, #0
 80034b6:	f001 fa9b 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_y_angle, 4);
 80034ba:	2204      	movs	r2, #4
 80034bc:	4983      	ldr	r1, [pc, #524]	; (80036cc <main+0x2c4>)
 80034be:	2000      	movs	r0, #0
 80034c0:	f001 fa96 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_z_angle, 4);
 80034c4:	2204      	movs	r2, #4
 80034c6:	4982      	ldr	r1, [pc, #520]	; (80036d0 <main+0x2c8>)
 80034c8:	2000      	movs	r0, #0
 80034ca:	f001 fa91 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&how_long_to_loop_main, 4);
 80034ce:	2204      	movs	r2, #4
 80034d0:	4980      	ldr	r1, [pc, #512]	; (80036d4 <main+0x2cc>)
 80034d2:	2000      	movs	r0, #0
 80034d4:	f001 fa8c 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(ppm_channels[2]), 4);
 80034d8:	2204      	movs	r2, #4
 80034da:	497f      	ldr	r1, [pc, #508]	; (80036d8 <main+0x2d0>)
 80034dc:	2000      	movs	r0, #0
 80034de:	f001 fa87 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(0, &status_first, 1);
 80034e2:	2201      	movs	r2, #1
 80034e4:	497d      	ldr	r1, [pc, #500]	; (80036dc <main+0x2d4>)
 80034e6:	2000      	movs	r0, #0
 80034e8:	f001 fa82 	bl	80049f0 <AddToAutoBuffer>
  auto_packet_count += 1;
 80034ec:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <main+0x2d8>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	3301      	adds	r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	4b7a      	ldr	r3, [pc, #488]	; (80036e0 <main+0x2d8>)
 80034f6:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[1].total_width = 0;
 80034f8:	4b6f      	ldr	r3, [pc, #444]	; (80036b8 <main+0x2b0>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  auto_packet_buffer[1].var_count = 0;
 8003500:	4b6d      	ldr	r3, [pc, #436]	; (80036b8 <main+0x2b0>)
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  auto_packet_buffer[1].id = PID_OUTPUT_PACKET;
 8003508:	4b6b      	ldr	r3, [pc, #428]	; (80036b8 <main+0x2b0>)
 800350a:	2202      	movs	r2, #2
 800350c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  auto_packet_buffer[1].send_rate = 1;
 8003510:	4b69      	ldr	r3, [pc, #420]	; (80036b8 <main+0x2b0>)
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  AddToAutoBuffer(1, (uint8_t *)&pid_roll_output, 4);
 8003518:	2204      	movs	r2, #4
 800351a:	4972      	ldr	r1, [pc, #456]	; (80036e4 <main+0x2dc>)
 800351c:	2001      	movs	r0, #1
 800351e:	f001 fa67 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&pid_pitch_output, 4);
 8003522:	2204      	movs	r2, #4
 8003524:	4970      	ldr	r1, [pc, #448]	; (80036e8 <main+0x2e0>)
 8003526:	2001      	movs	r0, #1
 8003528:	f001 fa62 	bl	80049f0 <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&pid_yaw_output, 4);
 800352c:	2204      	movs	r2, #4
 800352e:	496f      	ldr	r1, [pc, #444]	; (80036ec <main+0x2e4>)
 8003530:	2001      	movs	r0, #1
 8003532:	f001 fa5d 	bl	80049f0 <AddToAutoBuffer>
  //AddToAutoBuffer(1, &pid_pitch_output, 4);
  auto_packet_count += 1;
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <main+0x2d8>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <main+0x2d8>)
 8003540:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[2].total_width = 0;
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <main+0x2b0>)
 8003544:	2200      	movs	r2, #0
 8003546:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
  auto_packet_buffer[2].var_count = 0;
 800354a:	4b5b      	ldr	r3, [pc, #364]	; (80036b8 <main+0x2b0>)
 800354c:	2200      	movs	r2, #0
 800354e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  auto_packet_buffer[2].id = ALTITUDE_PACKET;
 8003552:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <main+0x2b0>)
 8003554:	2206      	movs	r2, #6
 8003556:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  auto_packet_buffer[2].send_rate = 5;
 800355a:	4b57      	ldr	r3, [pc, #348]	; (80036b8 <main+0x2b0>)
 800355c:	2205      	movs	r2, #5
 800355e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
  AddToAutoBuffer(2, (uint8_t *)&slow_bmp_altitude, 4);
 8003562:	2204      	movs	r2, #4
 8003564:	4962      	ldr	r1, [pc, #392]	; (80036f0 <main+0x2e8>)
 8003566:	2002      	movs	r0, #2
 8003568:	f001 fa42 	bl	80049f0 <AddToAutoBuffer>
  auto_packet_count += 1;
 800356c:	4b5c      	ldr	r3, [pc, #368]	; (80036e0 <main+0x2d8>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	4b5a      	ldr	r3, [pc, #360]	; (80036e0 <main+0x2d8>)
 8003576:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < 6; i++)
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	e008      	b.n	8003590 <main+0x188>
  {
	  ppm_channels[i] = 1000;
 800357e:	4a5d      	ldr	r2, [pc, #372]	; (80036f4 <main+0x2ec>)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 6; i++)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b05      	cmp	r3, #5
 8003594:	ddf3      	ble.n	800357e <main+0x176>
  }

  ppm_channels[4] = 2000;
 8003596:	4b57      	ldr	r3, [pc, #348]	; (80036f4 <main+0x2ec>)
 8003598:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800359c:	611a      	str	r2, [r3, #16]

  for(int i = 0; i < 35; i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	e007      	b.n	80035b4 <main+0x1ac>
  {
	  empty_data_packet.payload[i] = '\0';
 80035a4:	4a54      	ldr	r2, [pc, #336]	; (80036f8 <main+0x2f0>)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3301      	adds	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b22      	cmp	r3, #34	; 0x22
 80035b8:	ddf4      	ble.n	80035a4 <main+0x19c>
  }

  Setup_IMU();
 80035ba:	f7ff fdab 	bl	8003114 <Setup_IMU>
  Setup_BMP280();
 80035be:	f7fd fe21 	bl	8001204 <Setup_BMP280>

  //Motor PID Gains
  EEPROM_Clear_Buffer();
 80035c2:	f7ff fabb 	bl	8002b3c <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(0, 24);
 80035c6:	2118      	movs	r1, #24
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7ff faf7 	bl	8002bbc <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 80035ce:	4b4b      	ldr	r3, [pc, #300]	; (80036fc <main+0x2f4>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_roll, 4);
 80035d4:	2104      	movs	r1, #4
 80035d6:	484a      	ldr	r0, [pc, #296]	; (8003700 <main+0x2f8>)
 80035d8:	f7ff fb3c 	bl	8002c54 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_roll, 4);
 80035dc:	2104      	movs	r1, #4
 80035de:	4849      	ldr	r0, [pc, #292]	; (8003704 <main+0x2fc>)
 80035e0:	f7ff fb38 	bl	8002c54 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_roll, 4);
 80035e4:	2104      	movs	r1, #4
 80035e6:	4848      	ldr	r0, [pc, #288]	; (8003708 <main+0x300>)
 80035e8:	f7ff fb34 	bl	8002c54 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kp_yaw, 4);
 80035ec:	2104      	movs	r1, #4
 80035ee:	4847      	ldr	r0, [pc, #284]	; (800370c <main+0x304>)
 80035f0:	f7ff fb30 	bl	8002c54 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_yaw, 4);
 80035f4:	2104      	movs	r1, #4
 80035f6:	4846      	ldr	r0, [pc, #280]	; (8003710 <main+0x308>)
 80035f8:	f7ff fb2c 	bl	8002c54 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_yaw, 4);
 80035fc:	2104      	movs	r1, #4
 80035fe:	4845      	ldr	r0, [pc, #276]	; (8003714 <main+0x30c>)
 8003600:	f7ff fb28 	bl	8002c54 <EEPROM_Read_Buffer>

  //Altitude PID Gains
  EEPROM_Clear_Buffer();
 8003604:	f7ff fa9a 	bl	8002b3c <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(32, 12);
 8003608:	210c      	movs	r1, #12
 800360a:	2020      	movs	r0, #32
 800360c:	f7ff fad6 	bl	8002bbc <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 8003610:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <main+0x2f4>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_alt, 4);
 8003616:	2104      	movs	r1, #4
 8003618:	483f      	ldr	r0, [pc, #252]	; (8003718 <main+0x310>)
 800361a:	f7ff fb1b 	bl	8002c54 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_alt, 4);
 800361e:	2104      	movs	r1, #4
 8003620:	483e      	ldr	r0, [pc, #248]	; (800371c <main+0x314>)
 8003622:	f7ff fb17 	bl	8002c54 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_alt, 4);
 8003626:	2104      	movs	r1, #4
 8003628:	483d      	ldr	r0, [pc, #244]	; (8003720 <main+0x318>)
 800362a:	f7ff fb13 	bl	8002c54 <EEPROM_Read_Buffer>
  //CDC_Transmit_FS(buf, strlen((char*)buf));

  //Calibrate_BMP280();
  //Calibrate_IMU();

  program_buffer[0] = 0x01;
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <main+0x31c>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
  program_buffer[1] = 0x01;
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <main+0x31c>)
 8003636:	2201      	movs	r2, #1
 8003638:	705a      	strb	r2, [r3, #1]
  program_buffer[2] = 0x02;
 800363a:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <main+0x31c>)
 800363c:	2202      	movs	r2, #2
 800363e:	709a      	strb	r2, [r3, #2]

  for(int i = 0; i < 4; i++)
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e00a      	b.n	800365c <main+0x254>
  {
	  program_buffer[3+i] = *(((uint8_t *)&temp_control_loop_test_time) + i);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a37      	ldr	r2, [pc, #220]	; (8003728 <main+0x320>)
 800364a:	441a      	add	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3303      	adds	r3, #3
 8003650:	7811      	ldrb	r1, [r2, #0]
 8003652:	4a34      	ldr	r2, [pc, #208]	; (8003724 <main+0x31c>)
 8003654:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3301      	adds	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b03      	cmp	r3, #3
 8003660:	ddf1      	ble.n	8003646 <main+0x23e>
  }

  program_buffer[7] = 0x01;
 8003662:	4b30      	ldr	r3, [pc, #192]	; (8003724 <main+0x31c>)
 8003664:	2201      	movs	r2, #1
 8003666:	71da      	strb	r2, [r3, #7]
  program_buffer[8] = 0x02;
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <main+0x31c>)
 800366a:	2202      	movs	r2, #2
 800366c:	721a      	strb	r2, [r3, #8]

  program_buffer[9] = 0x02;
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <main+0x31c>)
 8003670:	2202      	movs	r2, #2
 8003672:	725a      	strb	r2, [r3, #9]

  for(int i = 0; i < 4; i++)
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	e00a      	b.n	8003690 <main+0x288>
  {
	  program_buffer[10+i] = *(((uint8_t *)&temp_control_loop_test_time) + i);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <main+0x320>)
 800367e:	441a      	add	r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	330a      	adds	r3, #10
 8003684:	7811      	ldrb	r1, [r2, #0]
 8003686:	4a27      	ldr	r2, [pc, #156]	; (8003724 <main+0x31c>)
 8003688:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < 4; i++)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3301      	adds	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b03      	cmp	r3, #3
 8003694:	ddf1      	ble.n	800367a <main+0x272>
  }

  //program_buffer[14] = 0x03;//Restart Program
  program_buffer[14] = 0x04;
 8003696:	4b23      	ldr	r3, [pc, #140]	; (8003724 <main+0x31c>)
 8003698:	2204      	movs	r2, #4
 800369a:	739a      	strb	r2, [r3, #14]

  HAL_Delay(2000);
 800369c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80036a0:	f001 fe52 	bl	8005348 <HAL_Delay>

  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 80036a4:	e0ba      	b.n	800381c <main+0x414>
  {
	  for(int i = 0; i < 200; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e096      	b.n	80037da <main+0x3d2>
 80036ac:	20002750 	.word	0x20002750
 80036b0:	200027d0 	.word	0x200027d0
 80036b4:	20002710 	.word	0x20002710
 80036b8:	20001138 	.word	0x20001138
 80036bc:	20000b4c 	.word	0x20000b4c
 80036c0:	20000b4e 	.word	0x20000b4e
 80036c4:	20000b50 	.word	0x20000b50
 80036c8:	20000b30 	.word	0x20000b30
 80036cc:	20000b3c 	.word	0x20000b3c
 80036d0:	20000b5c 	.word	0x20000b5c
 80036d4:	20000bcc 	.word	0x20000bcc
 80036d8:	20000c04 	.word	0x20000c04
 80036dc:	200002ac 	.word	0x200002ac
 80036e0:	200002b5 	.word	0x200002b5
 80036e4:	200005a0 	.word	0x200005a0
 80036e8:	200005a4 	.word	0x200005a4
 80036ec:	20000388 	.word	0x20000388
 80036f0:	20000270 	.word	0x20000270
 80036f4:	20000bfc 	.word	0x20000bfc
 80036f8:	200026bc 	.word	0x200026bc
 80036fc:	20000295 	.word	0x20000295
 8003700:	2000024c 	.word	0x2000024c
 8003704:	20000254 	.word	0x20000254
 8003708:	2000025c 	.word	0x2000025c
 800370c:	20000250 	.word	0x20000250
 8003710:	20000258 	.word	0x20000258
 8003714:	20000260 	.word	0x20000260
 8003718:	20000278 	.word	0x20000278
 800371c:	2000027c 	.word	0x2000027c
 8003720:	20000280 	.word	0x20000280
 8003724:	20000398 	.word	0x20000398
 8003728:	20000034 	.word	0x20000034
	  {
		  if(i == 0)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d108      	bne.n	8003744 <main+0x33c>
		  {
			  x_deviation_sum = 0;
 8003732:	4b5f      	ldr	r3, [pc, #380]	; (80038b0 <main+0x4a8>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
			  y_deviation_sum = 0;
 8003738:	4b5e      	ldr	r3, [pc, #376]	; (80038b4 <main+0x4ac>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
			  z_deviation_sum = 0;
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <main+0x4b0>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
		  }

		  Read_IMU(0);
 8003744:	2000      	movs	r0, #0
 8003746:	f7ff fdb1 	bl	80032ac <Read_IMU>

		  x_deviation_sum += abs(raw_gyro_acc_data[0] - last_x_value);
 800374a:	4b5c      	ldr	r3, [pc, #368]	; (80038bc <main+0x4b4>)
 800374c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003750:	461a      	mov	r2, r3
 8003752:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <main+0x4b8>)
 8003754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800375e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003762:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <main+0x4a8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a51      	ldr	r2, [pc, #324]	; (80038b0 <main+0x4a8>)
 800376a:	6013      	str	r3, [r2, #0]
		  y_deviation_sum += abs(raw_gyro_acc_data[1] - last_y_value);
 800376c:	4b53      	ldr	r3, [pc, #332]	; (80038bc <main+0x4b4>)
 800376e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003772:	461a      	mov	r2, r3
 8003774:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <main+0x4bc>)
 8003776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003780:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003784:	4b4b      	ldr	r3, [pc, #300]	; (80038b4 <main+0x4ac>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4413      	add	r3, r2
 800378a:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <main+0x4ac>)
 800378c:	6013      	str	r3, [r2, #0]
		  z_deviation_sum += abs(raw_gyro_acc_data[2] - last_z_value);
 800378e:	4b4b      	ldr	r3, [pc, #300]	; (80038bc <main+0x4b4>)
 8003790:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003794:	461a      	mov	r2, r3
 8003796:	4b4c      	ldr	r3, [pc, #304]	; (80038c8 <main+0x4c0>)
 8003798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037a2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037a6:	4b44      	ldr	r3, [pc, #272]	; (80038b8 <main+0x4b0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a42      	ldr	r2, [pc, #264]	; (80038b8 <main+0x4b0>)
 80037ae:	6013      	str	r3, [r2, #0]

		  last_x_value = raw_gyro_acc_data[0];
 80037b0:	4b42      	ldr	r3, [pc, #264]	; (80038bc <main+0x4b4>)
 80037b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80037b6:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <main+0x4b8>)
 80037b8:	801a      	strh	r2, [r3, #0]
		  last_y_value = raw_gyro_acc_data[1];
 80037ba:	4b40      	ldr	r3, [pc, #256]	; (80038bc <main+0x4b4>)
 80037bc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80037c0:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <main+0x4bc>)
 80037c2:	801a      	strh	r2, [r3, #0]
		  last_z_value = raw_gyro_acc_data[2];
 80037c4:	4b3d      	ldr	r3, [pc, #244]	; (80038bc <main+0x4b4>)
 80037c6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80037ca:	4b3f      	ldr	r3, [pc, #252]	; (80038c8 <main+0x4c0>)
 80037cc:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(5);
 80037ce:	2005      	movs	r0, #5
 80037d0:	f001 fdba 	bl	8005348 <HAL_Delay>
	  for(int i = 0; i < 200; i++)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3301      	adds	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2bc7      	cmp	r3, #199	; 0xc7
 80037de:	dda5      	ble.n	800372c <main+0x324>
	  }

	  x_deviation_sum /= 200;
 80037e0:	4b33      	ldr	r3, [pc, #204]	; (80038b0 <main+0x4a8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a39      	ldr	r2, [pc, #228]	; (80038cc <main+0x4c4>)
 80037e6:	fb82 1203 	smull	r1, r2, r2, r3
 80037ea:	1192      	asrs	r2, r2, #6
 80037ec:	17db      	asrs	r3, r3, #31
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	4a2f      	ldr	r2, [pc, #188]	; (80038b0 <main+0x4a8>)
 80037f2:	6013      	str	r3, [r2, #0]
	  y_deviation_sum /= 200;
 80037f4:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <main+0x4ac>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a34      	ldr	r2, [pc, #208]	; (80038cc <main+0x4c4>)
 80037fa:	fb82 1203 	smull	r1, r2, r2, r3
 80037fe:	1192      	asrs	r2, r2, #6
 8003800:	17db      	asrs	r3, r3, #31
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <main+0x4ac>)
 8003806:	6013      	str	r3, [r2, #0]
	  z_deviation_sum /= 200;
 8003808:	4b2b      	ldr	r3, [pc, #172]	; (80038b8 <main+0x4b0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a2f      	ldr	r2, [pc, #188]	; (80038cc <main+0x4c4>)
 800380e:	fb82 1203 	smull	r1, r2, r2, r3
 8003812:	1192      	asrs	r2, r2, #6
 8003814:	17db      	asrs	r3, r3, #31
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <main+0x4b0>)
 800381a:	6013      	str	r3, [r2, #0]
  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 800381c:	4b24      	ldr	r3, [pc, #144]	; (80038b0 <main+0x4a8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	bfb8      	it	lt
 8003824:	425b      	neglt	r3, r3
 8003826:	2b14      	cmp	r3, #20
 8003828:	f73f af3d 	bgt.w	80036a6 <main+0x29e>
 800382c:	4b21      	ldr	r3, [pc, #132]	; (80038b4 <main+0x4ac>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	bfb8      	it	lt
 8003834:	425b      	neglt	r3, r3
 8003836:	2b14      	cmp	r3, #20
 8003838:	f73f af35 	bgt.w	80036a6 <main+0x29e>
 800383c:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <main+0x4b0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	bfb8      	it	lt
 8003844:	425b      	neglt	r3, r3
 8003846:	2b14      	cmp	r3, #20
 8003848:	f73f af2d 	bgt.w	80036a6 <main+0x29e>
  }

  Calibrate_BMP280();
 800384c:	f7fd ffd0 	bl	80017f0 <Calibrate_BMP280>
  Calibrate_IMU();
 8003850:	f7ff fcae 	bl	80031b0 <Calibrate_IMU>
  ClearManualBuffer();
 8003854:	f001 f81a 	bl	800488c <ClearManualBuffer>
  ClearPrintBuffer();
 8003858:	f001 f84a 	bl	80048f0 <ClearPrintBuffer>
  sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 800385c:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <main+0x4c8>)
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <main+0x4cc>)
 8003860:	4615      	mov	r5, r2
 8003862:	461c      	mov	r4, r3
 8003864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003866:	6028      	str	r0, [r5, #0]
 8003868:	6069      	str	r1, [r5, #4]
 800386a:	60aa      	str	r2, [r5, #8]
 800386c:	60eb      	str	r3, [r5, #12]
 800386e:	8823      	ldrh	r3, [r4, #0]
 8003870:	822b      	strh	r3, [r5, #16]
  PrintManualPacket();
 8003872:	f001 f857 	bl	8004924 <PrintManualPacket>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ppm_channels[4] < 1600)
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <main+0x4d0>)
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800387e:	da39      	bge.n	80038f4 <main+0x4ec>
	  {
		  manual_mode = 1;
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <main+0x4d4>)
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
		  status_first |= 1 << 1;
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <main+0x4d8>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	f043 0302 	orr.w	r3, r3, #2
 800388e:	b2da      	uxtb	r2, r3
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <main+0x4d8>)
 8003892:	701a      	strb	r2, [r3, #0]

		  launched = 0;
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <main+0x4dc>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
		  landing = 0;
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <main+0x4e0>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
		  launching = 0;
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <main+0x4e4>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
		  altitude_hold_flag = 0;
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <main+0x4e8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e02e      	b.n	800390c <main+0x504>
 80038ae:	bf00      	nop
 80038b0:	20000038 	.word	0x20000038
 80038b4:	2000003c 	.word	0x2000003c
 80038b8:	20000040 	.word	0x20000040
 80038bc:	20000b4c 	.word	0x20000b4c
 80038c0:	20000c24 	.word	0x20000c24
 80038c4:	20000bc8 	.word	0x20000bc8
 80038c8:	20000c1c 	.word	0x20000c1c
 80038cc:	51eb851f 	.word	0x51eb851f
 80038d0:	20000c48 	.word	0x20000c48
 80038d4:	0801237c 	.word	0x0801237c
 80038d8:	20000bfc 	.word	0x20000bfc
 80038dc:	20000293 	.word	0x20000293
 80038e0:	200002ac 	.word	0x200002ac
 80038e4:	20000290 	.word	0x20000290
 80038e8:	20000292 	.word	0x20000292
 80038ec:	20000291 	.word	0x20000291
 80038f0:	200002ad 	.word	0x200002ad
	  }
	  else
	  {
		  manual_mode = 0;
 80038f4:	4b72      	ldr	r3, [pc, #456]	; (8003ac0 <main+0x6b8>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
		  status_first &= ~(1 << 1);
 80038fa:	4b72      	ldr	r3, [pc, #456]	; (8003ac4 <main+0x6bc>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	f023 0302 	bic.w	r3, r3, #2
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <main+0x6bc>)
 8003906:	701a      	strb	r2, [r3, #0]

		  Control_Loop();
 8003908:	f7fe ff34 	bl	8002774 <Control_Loop>
	  }

	  status_first = ((status_first | 0x01) * launched) + ((status_first & ~(0x01)) * (launched ^ 0x01));
 800390c:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <main+0x6bc>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <main+0x6c0>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	fb12 f303 	smulbb	r3, r2, r3
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <main+0x6bc>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	b2d9      	uxtb	r1, r3
 800392a:	4b67      	ldr	r3, [pc, #412]	; (8003ac8 <main+0x6c0>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f083 0301 	eor.w	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	fb11 f303 	smulbb	r3, r1, r3
 8003938:	b2db      	uxtb	r3, r3
 800393a:	4413      	add	r3, r2
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <main+0x6bc>)
 8003940:	701a      	strb	r2, [r3, #0]

	  if(GetMillisDifference(&temp_led_timer) > 500)
 8003942:	4862      	ldr	r0, [pc, #392]	; (8003acc <main+0x6c4>)
 8003944:	f000 fa54 	bl	8003df0 <GetMillisDifference>
 8003948:	4603      	mov	r3, r0
 800394a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800394e:	d904      	bls.n	800395a <main+0x552>
	  {
		  temp_led_timer = GetMillis();
 8003950:	f000 fa3c 	bl	8003dcc <GetMillis>
 8003954:	4602      	mov	r2, r0
 8003956:	4b5d      	ldr	r3, [pc, #372]	; (8003acc <main+0x6c4>)
 8003958:	601a      	str	r2, [r3, #0]

		  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  }

	  if(GetMicrosDifference(&pwm_output_timer) >= 4000)
 800395a:	485d      	ldr	r0, [pc, #372]	; (8003ad0 <main+0x6c8>)
 800395c:	f000 fa56 	bl	8003e0c <GetMicrosDifference>
 8003960:	4603      	mov	r3, r0
 8003962:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003966:	d304      	bcc.n	8003972 <main+0x56a>
	  {
		  pwm_output_timer = GetMicros();
 8003968:	f000 fa24 	bl	8003db4 <GetMicros>
 800396c:	4602      	mov	r2, r0
 800396e:	4b58      	ldr	r3, [pc, #352]	; (8003ad0 <main+0x6c8>)
 8003970:	601a      	str	r2, [r3, #0]
		  //__HAL_TIM_SET_COUNTER(&htim8, 4999); //Reset motor PWN counter for fast response time(probably makes esc refresh rate faster)
	  }

	  if(GetMicrosDifference(&main_loop_timer) >= 2000)
 8003972:	4858      	ldr	r0, [pc, #352]	; (8003ad4 <main+0x6cc>)
 8003974:	f000 fa4a 	bl	8003e0c <GetMicrosDifference>
 8003978:	4603      	mov	r3, r0
 800397a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800397e:	f0c0 809c 	bcc.w	8003aba <main+0x6b2>
	  {
		  if(main_cycle_counter > 399)
 8003982:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <main+0x6d0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800398a:	d302      	bcc.n	8003992 <main+0x58a>
			  main_cycle_counter = 0;
 800398c:	4b52      	ldr	r3, [pc, #328]	; (8003ad8 <main+0x6d0>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
		  if(main_cycle_counter % 4 == 0)//Every 4 clock cycles(500uS * 4 = 2000uS) NOT IN USE RIGHT NOW
		  {

		  }

		  how_long_to_loop_main = GetMicrosDifference(&main_loop_timer);
 8003992:	4850      	ldr	r0, [pc, #320]	; (8003ad4 <main+0x6cc>)
 8003994:	f000 fa3a 	bl	8003e0c <GetMicrosDifference>
 8003998:	4602      	mov	r2, r0
 800399a:	4b50      	ldr	r3, [pc, #320]	; (8003adc <main+0x6d4>)
 800399c:	601a      	str	r2, [r3, #0]
		  how_long_to_loop_modifier = (float)(round(((float)((float)how_long_to_loop_main / 2000)) * 100.0) / 100.0);
 800399e:	4b4f      	ldr	r3, [pc, #316]	; (8003adc <main+0x6d4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003ae0 <main+0x6d8>
 80039ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039b2:	ee16 0a90 	vmov	r0, s13
 80039b6:	f7fc fdc7 	bl	8000548 <__aeabi_f2d>
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <main+0x6dc>)
 80039c0:	f7fc fe1a 	bl	80005f8 <__aeabi_dmul>
 80039c4:	4603      	mov	r3, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	ec44 3b17 	vmov	d7, r3, r4
 80039cc:	eeb0 0a47 	vmov.f32	s0, s14
 80039d0:	eef0 0a67 	vmov.f32	s1, s15
 80039d4:	f00c f9c8 	bl	800fd68 <round>
 80039d8:	ec51 0b10 	vmov	r0, r1, d0
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	4b40      	ldr	r3, [pc, #256]	; (8003ae4 <main+0x6dc>)
 80039e2:	f7fc ff33 	bl	800084c <__aeabi_ddiv>
 80039e6:	4603      	mov	r3, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	4618      	mov	r0, r3
 80039ec:	4621      	mov	r1, r4
 80039ee:	f7fd f8db 	bl	8000ba8 <__aeabi_d2f>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b3c      	ldr	r3, [pc, #240]	; (8003ae8 <main+0x6e0>)
 80039f6:	601a      	str	r2, [r3, #0]
		  main_loop_timer = GetMicros();
 80039f8:	f000 f9dc 	bl	8003db4 <GetMicros>
 80039fc:	4602      	mov	r2, r0
 80039fe:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <main+0x6cc>)
 8003a00:	601a      	str	r2, [r3, #0]

		  if(launching && !launched)
 8003a02:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <main+0x6e4>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <main+0x60e>
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <main+0x6c0>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <main+0x60e>
		  {
			  //Launch logic here
			  Launch_Behavior();
 8003a12:	f7fe ffa5 	bl	8002960 <Launch_Behavior>
		  }

		  if(landing && launched)
 8003a16:	4b36      	ldr	r3, [pc, #216]	; (8003af0 <main+0x6e8>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <main+0x622>
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <main+0x6c0>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <main+0x622>
		  {
			  //Landing logic here
			  Land_Behavior();
 8003a26:	f7ff f849 	bl	8002abc <Land_Behavior>
		  }

		  if(main_cycle_counter % 20)
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <main+0x6d0>)
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <main+0x6ec>)
 8003a30:	fba3 2301 	umull	r2, r3, r3, r1
 8003a34:	091a      	lsrs	r2, r3, #4
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	1aca      	subs	r2, r1, r3
 8003a40:	2a00      	cmp	r2, #0
 8003a42:	d013      	beq.n	8003a6c <main+0x664>
		  {
			  Read_BMP280_PressureTemperature();
 8003a44:	f7fd fc14 	bl	8001270 <Read_BMP280_PressureTemperature>
			  if(altitude_hold_flag)
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <main+0x6f0>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <main+0x64e>
				  Calculate_Altitude_PID();
 8003a50:	f7fe fd12 	bl	8002478 <Calculate_Altitude_PID>
 8003a54:	e00a      	b.n	8003a6c <main+0x664>
			  else
			  {
				  altitude_pid_output = 0;
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <main+0x6f4>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
				  pid_alt_last_error = 0;
 8003a5c:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <main+0x6f8>)
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
				  pid_alt_i = 0;
 8003a64:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <main+0x6fc>)
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
			  }
		  }

		  Read_IMU(0);
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	f7ff fc1d 	bl	80032ac <Read_IMU>
		  Calculate_Attitude();
 8003a72:	f7fd fef1 	bl	8001858 <Calculate_Attitude>
		  //Calculate all motors values, then immediately output them using oneshot125
		  Motor_PID();
 8003a76:	f7fe f973 	bl	8001d60 <Motor_PID>
		  Calculate_Motor_Outputs();
 8003a7a:	f7fe fc3b 	bl	80022f4 <Calculate_Motor_Outputs>

		  __HAL_TIM_SET_COUNTER(&htim8, 3999);
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <main+0x700>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, esc1_output);
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <main+0x704>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <main+0x700>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, esc2_output);
 8003a92:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <main+0x708>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <main+0x700>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, esc3_output);
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <main+0x70c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <main+0x700>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, esc4_output);
 8003aa6:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <main+0x710>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	4b17      	ldr	r3, [pc, #92]	; (8003b08 <main+0x700>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	635a      	str	r2, [r3, #52]	; 0x34

		  main_cycle_counter++;
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <main+0x6d0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <main+0x6d0>)
 8003ab8:	6013      	str	r3, [r2, #0]
	  }

	  telem_loop();
 8003aba:	f000 fb71 	bl	80041a0 <telem_loop>
	  if(ppm_channels[4] < 1600)
 8003abe:	e6da      	b.n	8003876 <main+0x46e>
 8003ac0:	20000293 	.word	0x20000293
 8003ac4:	200002ac 	.word	0x200002ac
 8003ac8:	20000290 	.word	0x20000290
 8003acc:	20000bf8 	.word	0x20000bf8
 8003ad0:	20000bc4 	.word	0x20000bc4
 8003ad4:	20000c20 	.word	0x20000c20
 8003ad8:	200002a8 	.word	0x200002a8
 8003adc:	20000bcc 	.word	0x20000bcc
 8003ae0:	44fa0000 	.word	0x44fa0000
 8003ae4:	40590000 	.word	0x40590000
 8003ae8:	20000030 	.word	0x20000030
 8003aec:	20000291 	.word	0x20000291
 8003af0:	20000292 	.word	0x20000292
 8003af4:	cccccccd 	.word	0xcccccccd
 8003af8:	200002ad 	.word	0x200002ad
 8003afc:	200005ac 	.word	0x200005ac
 8003b00:	20000274 	.word	0x20000274
 8003b04:	20000284 	.word	0x20000284
 8003b08:	20002710 	.word	0x20002710
 8003b0c:	20000004 	.word	0x20000004
 8003b10:	20000008 	.word	0x20000008
 8003b14:	2000000c 	.word	0x2000000c
 8003b18:	20000010 	.word	0x20000010

08003b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b098      	sub	sp, #96	; 0x60
 8003b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b26:	2230      	movs	r2, #48	; 0x30
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f00b fd06 	bl	800f53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	4b31      	ldr	r3, [pc, #196]	; (8003c18 <SystemClock_Config+0xfc>)
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <SystemClock_Config+0xfc>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b5e:	4b2e      	ldr	r3, [pc, #184]	; (8003c18 <SystemClock_Config+0xfc>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <SystemClock_Config+0x100>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <SystemClock_Config+0x100>)
 8003b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <SystemClock_Config+0x100>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003b86:	2309      	movs	r3, #9
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003b90:	2301      	movs	r3, #1
 8003b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b94:	2302      	movs	r3, #2
 8003b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003ba2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003ba6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003bac:	2307      	movs	r3, #7
 8003bae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f006 f8bd 	bl	8009d34 <HAL_RCC_OscConfig>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003bc0:	f000 f9a4 	bl	8003f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bc4:	230f      	movs	r3, #15
 8003bc6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	2105      	movs	r1, #5
 8003be2:	4618      	mov	r0, r3
 8003be4:	f006 fb16 	bl	800a214 <HAL_RCC_ClockConfig>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003bee:	f000 f98d 	bl	8003f0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bfa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfc:	f107 030c 	add.w	r3, r7, #12
 8003c00:	4618      	mov	r0, r3
 8003c02:	f006 fce3 	bl	800a5cc <HAL_RCCEx_PeriphCLKConfig>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003c0c:	f000 f97e 	bl	8003f0c <Error_Handler>
  }
}
 8003c10:	bf00      	nop
 8003c12:	3760      	adds	r7, #96	; 0x60
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000

08003c20 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a4e      	ldr	r2, [pc, #312]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	f040 8095 	bne.w	8003d5c <HAL_TIM_IC_CaptureCallback+0x13c>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 8003c32:	2100      	movs	r1, #0
 8003c34:	484b      	ldr	r0, [pc, #300]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003c36:	f007 fb09 	bl	800b24c <HAL_TIM_ReadCapturedValue>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b4a      	ldr	r3, [pc, #296]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8003c3e:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8003c40:	2101      	movs	r1, #1
 8003c42:	484a      	ldr	r0, [pc, #296]	; (8003d6c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8003c44:	f002 f966 	bl	8005f14 <HAL_GPIO_ReadPin>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d014      	beq.n	8003c78 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 8003c4e:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a47      	ldr	r2, [pc, #284]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8003c54:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003c56:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 020a 	bic.w	r2, r2, #10
 8003c64:	621a      	str	r2, [r3, #32]
 8003c66:	4b3f      	ldr	r3, [pc, #252]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0202 	orr.w	r2, r2, #2
 8003c74:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8003c76:	e071      	b.n	8003d5c <HAL_TIM_IC_CaptureCallback+0x13c>
			if (current_ppm_capture > last_ppm_capture)
 8003c78:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b3c      	ldr	r3, [pc, #240]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d907      	bls.n	8003c94 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 8003c84:	4b38      	ldr	r3, [pc, #224]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e00d      	b.n	8003cb0 <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 8003c94:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d807      	bhi.n	8003cb0 <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 8003ca0:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <HAL_TIM_IC_CaptureCallback+0x148>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <HAL_TIM_IC_CaptureCallback+0x150>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	4a31      	ldr	r2, [pc, #196]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003cae:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d903      	bls.n	8003cc4 <HAL_TIM_IC_CaptureCallback+0xa4>
				current_ppm_channel = 0;
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e006      	b.n	8003cd2 <HAL_TIM_IC_CaptureCallback+0xb2>
				current_ppm_channel++;
 8003cc4:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8003cd0:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 8003cd2:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d903      	bls.n	8003ce6 <HAL_TIM_IC_CaptureCallback+0xc6>
				test_max_frequency = frequency_read;
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8003ce4:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003cee:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003cf0:	6013      	str	r3, [r2, #0]
			if(frequency_read < 1000)
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cfa:	d204      	bcs.n	8003d06 <HAL_TIM_IC_CaptureCallback+0xe6>
				frequency_read = 1000;
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e008      	b.n	8003d18 <HAL_TIM_IC_CaptureCallback+0xf8>
			else if(frequency_read > 2000)
 8003d06:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d0e:	d903      	bls.n	8003d18 <HAL_TIM_IC_CaptureCallback+0xf8>
				frequency_read = 2000;
 8003d10:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003d12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003d16:	601a      	str	r2, [r3, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00e      	beq.n	8003d40 <HAL_TIM_IC_CaptureCallback+0x120>
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b06      	cmp	r3, #6
 8003d2a:	d809      	bhi.n	8003d40 <HAL_TIM_IC_CaptureCallback+0x120>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_TIM_IC_CaptureCallback+0x154>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_TIM_IC_CaptureCallback+0x158>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003d3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	4b07      	ldr	r3, [pc, #28]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 020a 	bic.w	r2, r2, #10
 8003d4e:	621a      	str	r2, [r3, #32]
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_TIM_IC_CaptureCallback+0x144>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a12      	ldr	r2, [r2, #32]
 8003d5a:	621a      	str	r2, [r3, #32]
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20002750 	.word	0x20002750
 8003d68:	20000298 	.word	0x20000298
 8003d6c:	40020000 	.word	0x40020000
 8003d70:	2000029c 	.word	0x2000029c
 8003d74:	2000002c 	.word	0x2000002c
 8003d78:	200002a0 	.word	0x200002a0
 8003d7c:	200002a4 	.word	0x200002a4
 8003d80:	20000bfc 	.word	0x20000bfc

08003d84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a07      	ldr	r2, [pc, #28]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//micros_timer_base += 65000;//65536;
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3341      	adds	r3, #65	; 0x41
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003d9c:	6013      	str	r3, [r2, #0]
	}
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	200027d0 	.word	0x200027d0
 8003db0:	20000c18 	.word	0x20000c18

08003db4 <GetMicros>:

uint32_t GetMicros()
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim9);
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <GetMicros+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	200027d0 	.word	0x200027d0

08003dcc <GetMillis>:

uint32_t GetMillis()
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 8003dd0:	f7ff fff0 	bl	8003db4 <GetMicros>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <GetMillis+0x1c>)
 8003dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ddc:	099a      	lsrs	r2, r3, #6
 8003dde:	4b03      	ldr	r3, [pc, #12]	; (8003dec <GetMillis+0x20>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4413      	add	r3, r2
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	10624dd3 	.word	0x10624dd3
 8003dec:	20000c18 	.word	0x20000c18

08003df0 <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 8003df8:	f7ff ffe8 	bl	8003dcc <GetMillis>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	1ad3      	subs	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8003e14:	f7ff ffce 	bl	8003db4 <GetMicros>
 8003e18:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d905      	bls.n	8003e34 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e00c      	b.n	8003e4e <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d207      	bcs.n	8003e4e <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8003e4a:	33e8      	adds	r3, #232	; 0xe8
 8003e4c:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d102      	bne.n	8003e82 <HAL_I2C_MasterTxCpltCallback+0x16>
	{
		tx_done = 1;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
	}
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	200009b4 	.word	0x200009b4
 8003e94:	200002bc 	.word	0x200002bc

08003e98 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d107      	bne.n	8003eb8 <HAL_I2C_MasterRxCpltCallback+0x20>
	{
		rx_done = 1;
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
		acks_counted++;
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <HAL_I2C_MasterRxCpltCallback+0x34>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a05      	ldr	r2, [pc, #20]	; (8003ecc <HAL_I2C_MasterRxCpltCallback+0x34>)
 8003eb6:	6013      	str	r3, [r2, #0]
	}
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	200009b4 	.word	0x200009b4
 8003ec8:	200002bb 	.word	0x200002bb
 8003ecc:	20000c68 	.word	0x20000c68

08003ed0 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <MX_RTC_Init+0x48>)
 8003f24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f2e:	227f      	movs	r2, #127	; 0x7f
 8003f30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f4a:	4805      	ldr	r0, [pc, #20]	; (8003f60 <MX_RTC_Init+0x44>)
 8003f4c:	f006 fc20 	bl	800a790 <HAL_RTC_Init>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003f56:	f7ff ffd9 	bl	8003f0c <Error_Handler>
  }

}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000c28 	.word	0x20000c28
 8003f64:	40002800 	.word	0x40002800

08003f68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_RTC_MspInit+0x24>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d102      	bne.n	8003f80 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RTC_MspInit+0x28>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40002800 	.word	0x40002800
 8003f90:	42470e3c 	.word	0x42470e3c

08003f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_MspInit+0x4c>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ff6:	e7fe      	b.n	8003ff6 <HardFault_Handler+0x4>

08003ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ffc:	e7fe      	b.n	8003ffc <MemManage_Handler+0x4>

08003ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004002:	e7fe      	b.n	8004002 <BusFault_Handler+0x4>

08004004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004008:	e7fe      	b.n	8004008 <UsageFault_Handler+0x4>

0800400a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004026:	b480      	push	{r7}
 8004028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004038:	f001 f966 	bl	8005308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	bd80      	pop	{r7, pc}

08004040 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004044:	4802      	ldr	r0, [pc, #8]	; (8004050 <DMA1_Stream0_IRQHandler+0x10>)
 8004046:	f001 fb83 	bl	8005750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000ac8 	.word	0x20000ac8

08004054 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8004058:	4802      	ldr	r0, [pc, #8]	; (8004064 <DMA1_Stream3_IRQHandler+0x10>)
 800405a:	f001 fb79 	bl	8005750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000a08 	.word	0x20000a08

08004068 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <DMA1_Stream6_IRQHandler+0x10>)
 800406e:	f001 fb6f 	bl	8005750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000900 	.word	0x20000900

0800407c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004080:	4802      	ldr	r0, [pc, #8]	; (800408c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004082:	f006 fdc1 	bl	800ac08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200027d0 	.word	0x200027d0

08004090 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <I2C1_EV_IRQHandler+0x10>)
 8004096:	f002 fd99 	bl	8006bcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000960 	.word	0x20000960

080040a4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <I2C2_EV_IRQHandler+0x10>)
 80040aa:	f002 fd8f 	bl	8006bcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200009b4 	.word	0x200009b4

080040b8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <I2C2_ER_IRQHandler+0x10>)
 80040be:	f002 feeb 	bl	8006e98 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	200009b4 	.word	0x200009b4

080040cc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <DMA1_Stream7_IRQHandler+0x10>)
 80040d2:	f001 fb3d 	bl	8005750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000a68 	.word	0x20000a68

080040e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <TIM5_IRQHandler+0x10>)
 80040e6:	f006 fd8f 	bl	800ac08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20002750 	.word	0x20002750

080040f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <OTG_FS_IRQHandler+0x10>)
 80040fa:	f004 fde8 	bl	8008cce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20003ce4 	.word	0x20003ce4

08004108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004110:	4a14      	ldr	r2, [pc, #80]	; (8004164 <_sbrk+0x5c>)
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <_sbrk+0x60>)
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004124:	4b11      	ldr	r3, [pc, #68]	; (800416c <_sbrk+0x64>)
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <_sbrk+0x68>)
 8004128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <_sbrk+0x64>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	429a      	cmp	r2, r3
 8004136:	d207      	bcs.n	8004148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004138:	f00b f9c6 	bl	800f4c8 <__errno>
 800413c:	4602      	mov	r2, r0
 800413e:	230c      	movs	r3, #12
 8004140:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	e009      	b.n	800415c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004148:	4b08      	ldr	r3, [pc, #32]	; (800416c <_sbrk+0x64>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <_sbrk+0x64>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <_sbrk+0x64>)
 8004158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800415a:	68fb      	ldr	r3, [r7, #12]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20020000 	.word	0x20020000
 8004168:	00000400 	.word	0x00000400
 800416c:	200002b0 	.word	0x200002b0
 8004170:	200040f0 	.word	0x200040f0

08004174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <SystemInit+0x28>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	4a07      	ldr	r2, [pc, #28]	; (800419c <SystemInit+0x28>)
 8004180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <SystemInit+0x28>)
 800418a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800418e:	609a      	str	r2, [r3, #8]
#endif
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <telem_loop>:
uint32_t acks_per_second;

uint32_t time_to_telem_timer, time_to_telem;

void telem_loop()
{
 80041a0:	b5b0      	push	{r4, r5, r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af02      	add	r7, sp, #8
	if(GetMillisDifference(&acks_per_second_timer) >= 1000)
 80041a6:	48a7      	ldr	r0, [pc, #668]	; (8004444 <telem_loop+0x2a4>)
 80041a8:	f7ff fe22 	bl	8003df0 <GetMillisDifference>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041b2:	d30b      	bcc.n	80041cc <telem_loop+0x2c>
	{
		acks_per_second_timer = GetMillis();
 80041b4:	f7ff fe0a 	bl	8003dcc <GetMillis>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4ba2      	ldr	r3, [pc, #648]	; (8004444 <telem_loop+0x2a4>)
 80041bc:	601a      	str	r2, [r3, #0]
		acks_per_second = acks_counted;
 80041be:	4ba2      	ldr	r3, [pc, #648]	; (8004448 <telem_loop+0x2a8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4aa2      	ldr	r2, [pc, #648]	; (800444c <telem_loop+0x2ac>)
 80041c4:	6013      	str	r3, [r2, #0]
		acks_counted = 0;
 80041c6:	4ba0      	ldr	r3, [pc, #640]	; (8004448 <telem_loop+0x2a8>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
	}

	if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY)
 80041cc:	48a0      	ldr	r0, [pc, #640]	; (8004450 <telem_loop+0x2b0>)
 80041ce:	f002 ff40 	bl	8007052 <HAL_I2C_GetState>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	f040 8341 	bne.w	800485c <telem_loop+0x6bc>
	{
		if(rx_done)
 80041da:	4b9e      	ldr	r3, [pc, #632]	; (8004454 <telem_loop+0x2b4>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 81c1 	beq.w	8004568 <telem_loop+0x3c8>
		{
			rx_done = 0;
 80041e6:	4b9b      	ldr	r3, [pc, #620]	; (8004454 <telem_loop+0x2b4>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
			ack_rate_counter = 0;
 80041ec:	4b9a      	ldr	r3, [pc, #616]	; (8004458 <telem_loop+0x2b8>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]

			switch(telem_receive_buffer[0])
 80041f2:	4b9a      	ldr	r3, [pc, #616]	; (800445c <telem_loop+0x2bc>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2bf4      	cmp	r3, #244	; 0xf4
 80041fa:	d06e      	beq.n	80042da <telem_loop+0x13a>
 80041fc:	2bf4      	cmp	r3, #244	; 0xf4
 80041fe:	dc05      	bgt.n	800420c <telem_loop+0x6c>
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 81a6 	beq.w	8004552 <telem_loop+0x3b2>
 8004206:	2bf3      	cmp	r3, #243	; 0xf3
 8004208:	d024      	beq.n	8004254 <telem_loop+0xb4>
 800420a:	e1ad      	b.n	8004568 <telem_loop+0x3c8>
 800420c:	2bf6      	cmp	r3, #246	; 0xf6
 800420e:	f000 8147 	beq.w	80044a0 <telem_loop+0x300>
 8004212:	2bf6      	cmp	r3, #246	; 0xf6
 8004214:	f2c0 8098 	blt.w	8004348 <telem_loop+0x1a8>
 8004218:	2bf7      	cmp	r3, #247	; 0xf7
 800421a:	f040 81a5 	bne.w	8004568 <telem_loop+0x3c8>
			{
			case 0x00:
				break;
			case CALIBRATE_GYRO_REQUEST:
				if(!launched)
 800421e:	4b90      	ldr	r3, [pc, #576]	; (8004460 <telem_loop+0x2c0>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 8197 	bne.w	8004556 <telem_loop+0x3b6>
				{
					Calibrate_BMP280();
 8004228:	f7fd fae2 	bl	80017f0 <Calibrate_BMP280>
					Calibrate_IMU();
 800422c:	f7fe ffc0 	bl	80031b0 <Calibrate_IMU>
					ClearManualBuffer();
 8004230:	f000 fb2c 	bl	800488c <ClearManualBuffer>
					ClearPrintBuffer();
 8004234:	f000 fb5c 	bl	80048f0 <ClearPrintBuffer>
					sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 8004238:	4a8a      	ldr	r2, [pc, #552]	; (8004464 <telem_loop+0x2c4>)
 800423a:	4b8b      	ldr	r3, [pc, #556]	; (8004468 <telem_loop+0x2c8>)
 800423c:	4615      	mov	r5, r2
 800423e:	461c      	mov	r4, r3
 8004240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004242:	6028      	str	r0, [r5, #0]
 8004244:	6069      	str	r1, [r5, #4]
 8004246:	60aa      	str	r2, [r5, #8]
 8004248:	60eb      	str	r3, [r5, #12]
 800424a:	8823      	ldrh	r3, [r4, #0]
 800424c:	822b      	strh	r3, [r5, #16]
					PrintManualPacket();
 800424e:	f000 fb69 	bl	8004924 <PrintManualPacket>
				}
				break;
 8004252:	e180      	b.n	8004556 <telem_loop+0x3b6>
			case PID_GAIN_FIRST_REQUEST:
				ClearManualBuffer();
 8004254:	f000 fb1a 	bl	800488c <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 8004258:	4b84      	ldr	r3, [pc, #528]	; (800446c <telem_loop+0x2cc>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4984      	ldr	r1, [pc, #528]	; (8004470 <telem_loop+0x2d0>)
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	440b      	add	r3, r1
 800426c:	3323      	adds	r3, #35	; 0x23
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 8004272:	4b7e      	ldr	r3, [pc, #504]	; (800446c <telem_loop+0x2cc>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	497d      	ldr	r1, [pc, #500]	; (8004470 <telem_loop+0x2d0>)
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	440b      	add	r3, r1
 8004286:	3324      	adds	r3, #36	; 0x24
 8004288:	2201      	movs	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 800428c:	2003      	movs	r0, #3
 800428e:	f000 fc0d 	bl	8004aac <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_roll, 4);
 8004292:	2104      	movs	r1, #4
 8004294:	4877      	ldr	r0, [pc, #476]	; (8004474 <telem_loop+0x2d4>)
 8004296:	f000 fc25 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_roll, 4);
 800429a:	2104      	movs	r1, #4
 800429c:	4876      	ldr	r0, [pc, #472]	; (8004478 <telem_loop+0x2d8>)
 800429e:	f000 fc21 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_roll, 4);
 80042a2:	2104      	movs	r1, #4
 80042a4:	4875      	ldr	r0, [pc, #468]	; (800447c <telem_loop+0x2dc>)
 80042a6:	f000 fc1d 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 80042aa:	2104      	movs	r1, #4
 80042ac:	4874      	ldr	r0, [pc, #464]	; (8004480 <telem_loop+0x2e0>)
 80042ae:	f000 fc19 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 80042b2:	2104      	movs	r1, #4
 80042b4:	4873      	ldr	r0, [pc, #460]	; (8004484 <telem_loop+0x2e4>)
 80042b6:	f000 fc15 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 80042ba:	2104      	movs	r1, #4
 80042bc:	4872      	ldr	r0, [pc, #456]	; (8004488 <telem_loop+0x2e8>)
 80042be:	f000 fc11 	bl	8004ae4 <AddToManualBuffer>

				if(manual_packet_count < 31)
 80042c2:	4b6a      	ldr	r3, [pc, #424]	; (800446c <telem_loop+0x2cc>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b1e      	cmp	r3, #30
 80042c8:	f200 8147 	bhi.w	800455a <telem_loop+0x3ba>
					manual_packet_count++;
 80042cc:	4b67      	ldr	r3, [pc, #412]	; (800446c <telem_loop+0x2cc>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	3301      	adds	r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b65      	ldr	r3, [pc, #404]	; (800446c <telem_loop+0x2cc>)
 80042d6:	701a      	strb	r2, [r3, #0]
				break;
 80042d8:	e13f      	b.n	800455a <telem_loop+0x3ba>
			case PID_GAIN_SECOND_REQUEST:
				ClearManualBuffer();
 80042da:	f000 fad7 	bl	800488c <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <telem_loop+0x2cc>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	4962      	ldr	r1, [pc, #392]	; (8004470 <telem_loop+0x2d0>)
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	440b      	add	r3, r1
 80042f2:	3323      	adds	r3, #35	; 0x23
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 80042f8:	4b5c      	ldr	r3, [pc, #368]	; (800446c <telem_loop+0x2cc>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	495c      	ldr	r1, [pc, #368]	; (8004470 <telem_loop+0x2d0>)
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	440b      	add	r3, r1
 800430c:	3324      	adds	r3, #36	; 0x24
 800430e:	2201      	movs	r2, #1
 8004310:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 8004312:	2004      	movs	r0, #4
 8004314:	f000 fbca 	bl	8004aac <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_alt, 4);
 8004318:	2104      	movs	r1, #4
 800431a:	485c      	ldr	r0, [pc, #368]	; (800448c <telem_loop+0x2ec>)
 800431c:	f000 fbe2 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_alt, 4);
 8004320:	2104      	movs	r1, #4
 8004322:	485b      	ldr	r0, [pc, #364]	; (8004490 <telem_loop+0x2f0>)
 8004324:	f000 fbde 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_alt, 4);
 8004328:	2104      	movs	r1, #4
 800432a:	485a      	ldr	r0, [pc, #360]	; (8004494 <telem_loop+0x2f4>)
 800432c:	f000 fbda 	bl	8004ae4 <AddToManualBuffer>

				if(manual_packet_count < 31)
 8004330:	4b4e      	ldr	r3, [pc, #312]	; (800446c <telem_loop+0x2cc>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b1e      	cmp	r3, #30
 8004336:	f200 8112 	bhi.w	800455e <telem_loop+0x3be>
					manual_packet_count++;
 800433a:	4b4c      	ldr	r3, [pc, #304]	; (800446c <telem_loop+0x2cc>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b4a      	ldr	r3, [pc, #296]	; (800446c <telem_loop+0x2cc>)
 8004344:	701a      	strb	r2, [r3, #0]
				break;
 8004346:	e10a      	b.n	800455e <telem_loop+0x3be>
			case PID_GAIN_FIRST_UPDATE_REQUEST:
				telem_receive_read_index = 1;
 8004348:	4b53      	ldr	r3, [pc, #332]	; (8004498 <telem_loop+0x2f8>)
 800434a:	2201      	movs	r2, #1
 800434c:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer((uint8_t *)&kp_roll, 4);
 800434e:	2104      	movs	r1, #4
 8004350:	4848      	ldr	r0, [pc, #288]	; (8004474 <telem_loop+0x2d4>)
 8004352:	f000 fc1d 	bl	8004b90 <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_roll, 4);
 8004356:	2104      	movs	r1, #4
 8004358:	4847      	ldr	r0, [pc, #284]	; (8004478 <telem_loop+0x2d8>)
 800435a:	f000 fc19 	bl	8004b90 <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_roll, 4);
 800435e:	2104      	movs	r1, #4
 8004360:	4846      	ldr	r0, [pc, #280]	; (800447c <telem_loop+0x2dc>)
 8004362:	f000 fc15 	bl	8004b90 <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kp_yaw, 4);
 8004366:	2104      	movs	r1, #4
 8004368:	4845      	ldr	r0, [pc, #276]	; (8004480 <telem_loop+0x2e0>)
 800436a:	f000 fc11 	bl	8004b90 <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_yaw, 4);
 800436e:	2104      	movs	r1, #4
 8004370:	4844      	ldr	r0, [pc, #272]	; (8004484 <telem_loop+0x2e4>)
 8004372:	f000 fc0d 	bl	8004b90 <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_yaw, 4);
 8004376:	2104      	movs	r1, #4
 8004378:	4843      	ldr	r0, [pc, #268]	; (8004488 <telem_loop+0x2e8>)
 800437a:	f000 fc09 	bl	8004b90 <ReadReceiveBuffer>

				EEPROM_Clear_Buffer();
 800437e:	f7fe fbdd 	bl	8002b3c <EEPROM_Clear_Buffer>
				eeprom_write_buffer_width = 2;
 8004382:	4b46      	ldr	r3, [pc, #280]	; (800449c <telem_loop+0x2fc>)
 8004384:	2202      	movs	r2, #2
 8004386:	701a      	strb	r2, [r3, #0]
				EEPROM_Write_Buffer((uint8_t *)&kp_roll, 4);
 8004388:	2104      	movs	r1, #4
 800438a:	483a      	ldr	r0, [pc, #232]	; (8004474 <telem_loop+0x2d4>)
 800438c:	f7fe fc36 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_roll, 4);
 8004390:	2104      	movs	r1, #4
 8004392:	4839      	ldr	r0, [pc, #228]	; (8004478 <telem_loop+0x2d8>)
 8004394:	f7fe fc32 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_roll, 4);
 8004398:	2104      	movs	r1, #4
 800439a:	4838      	ldr	r0, [pc, #224]	; (800447c <telem_loop+0x2dc>)
 800439c:	f7fe fc2e 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kp_yaw, 4);
 80043a0:	2104      	movs	r1, #4
 80043a2:	4837      	ldr	r0, [pc, #220]	; (8004480 <telem_loop+0x2e0>)
 80043a4:	f7fe fc2a 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_yaw, 4);
 80043a8:	2104      	movs	r1, #4
 80043aa:	4836      	ldr	r0, [pc, #216]	; (8004484 <telem_loop+0x2e4>)
 80043ac:	f7fe fc26 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_yaw, 4);
 80043b0:	2104      	movs	r1, #4
 80043b2:	4835      	ldr	r0, [pc, #212]	; (8004488 <telem_loop+0x2e8>)
 80043b4:	f7fe fc22 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Save_Page(0);
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7fe fbd9 	bl	8002b70 <EEPROM_Save_Page>

				ClearManualBuffer();
 80043be:	f000 fa65 	bl	800488c <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 80043c2:	4b2a      	ldr	r3, [pc, #168]	; (800446c <telem_loop+0x2cc>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	4929      	ldr	r1, [pc, #164]	; (8004470 <telem_loop+0x2d0>)
 80043ca:	4613      	mov	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	4413      	add	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	440b      	add	r3, r1
 80043d6:	3323      	adds	r3, #35	; 0x23
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 80043dc:	4b23      	ldr	r3, [pc, #140]	; (800446c <telem_loop+0x2cc>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	4923      	ldr	r1, [pc, #140]	; (8004470 <telem_loop+0x2d0>)
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	440b      	add	r3, r1
 80043f0:	3324      	adds	r3, #36	; 0x24
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 80043f6:	2003      	movs	r0, #3
 80043f8:	f000 fb58 	bl	8004aac <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_roll, 4);
 80043fc:	2104      	movs	r1, #4
 80043fe:	481d      	ldr	r0, [pc, #116]	; (8004474 <telem_loop+0x2d4>)
 8004400:	f000 fb70 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_roll, 4);
 8004404:	2104      	movs	r1, #4
 8004406:	481c      	ldr	r0, [pc, #112]	; (8004478 <telem_loop+0x2d8>)
 8004408:	f000 fb6c 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_roll, 4);
 800440c:	2104      	movs	r1, #4
 800440e:	481b      	ldr	r0, [pc, #108]	; (800447c <telem_loop+0x2dc>)
 8004410:	f000 fb68 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 8004414:	2104      	movs	r1, #4
 8004416:	481a      	ldr	r0, [pc, #104]	; (8004480 <telem_loop+0x2e0>)
 8004418:	f000 fb64 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 800441c:	2104      	movs	r1, #4
 800441e:	4819      	ldr	r0, [pc, #100]	; (8004484 <telem_loop+0x2e4>)
 8004420:	f000 fb60 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 8004424:	2104      	movs	r1, #4
 8004426:	4818      	ldr	r0, [pc, #96]	; (8004488 <telem_loop+0x2e8>)
 8004428:	f000 fb5c 	bl	8004ae4 <AddToManualBuffer>

				if(manual_packet_count < 31)
 800442c:	4b0f      	ldr	r3, [pc, #60]	; (800446c <telem_loop+0x2cc>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b1e      	cmp	r3, #30
 8004432:	f200 8096 	bhi.w	8004562 <telem_loop+0x3c2>
					manual_packet_count++;
 8004436:	4b0d      	ldr	r3, [pc, #52]	; (800446c <telem_loop+0x2cc>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	3301      	adds	r3, #1
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b0b      	ldr	r3, [pc, #44]	; (800446c <telem_loop+0x2cc>)
 8004440:	701a      	strb	r2, [r3, #0]
				break;
 8004442:	e08e      	b.n	8004562 <telem_loop+0x3c2>
 8004444:	2000270c 	.word	0x2000270c
 8004448:	20000c68 	.word	0x20000c68
 800444c:	200026b8 	.word	0x200026b8
 8004450:	200009b4 	.word	0x200009b4
 8004454:	200002bb 	.word	0x200002bb
 8004458:	200002b8 	.word	0x200002b8
 800445c:	200026e8 	.word	0x200026e8
 8004460:	20000290 	.word	0x20000290
 8004464:	20000c48 	.word	0x20000c48
 8004468:	08012390 	.word	0x08012390
 800446c:	200002b4 	.word	0x200002b4
 8004470:	20000c6c 	.word	0x20000c6c
 8004474:	2000024c 	.word	0x2000024c
 8004478:	20000254 	.word	0x20000254
 800447c:	2000025c 	.word	0x2000025c
 8004480:	20000250 	.word	0x20000250
 8004484:	20000258 	.word	0x20000258
 8004488:	20000260 	.word	0x20000260
 800448c:	20000278 	.word	0x20000278
 8004490:	2000027c 	.word	0x2000027c
 8004494:	20000280 	.word	0x20000280
 8004498:	200002b7 	.word	0x200002b7
 800449c:	20000028 	.word	0x20000028
			case PID_GAIN_SECOND_UPDATE_REQUEST:
				telem_receive_read_index = 1;
 80044a0:	4b8d      	ldr	r3, [pc, #564]	; (80046d8 <telem_loop+0x538>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer((uint8_t *)&kp_alt, 4);
 80044a6:	2104      	movs	r1, #4
 80044a8:	488c      	ldr	r0, [pc, #560]	; (80046dc <telem_loop+0x53c>)
 80044aa:	f000 fb71 	bl	8004b90 <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_alt, 4);
 80044ae:	2104      	movs	r1, #4
 80044b0:	488b      	ldr	r0, [pc, #556]	; (80046e0 <telem_loop+0x540>)
 80044b2:	f000 fb6d 	bl	8004b90 <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_alt, 4);
 80044b6:	2104      	movs	r1, #4
 80044b8:	488a      	ldr	r0, [pc, #552]	; (80046e4 <telem_loop+0x544>)
 80044ba:	f000 fb69 	bl	8004b90 <ReadReceiveBuffer>

				EEPROM_Clear_Buffer();
 80044be:	f7fe fb3d 	bl	8002b3c <EEPROM_Clear_Buffer>
				eeprom_write_buffer_width = 2;
 80044c2:	4b89      	ldr	r3, [pc, #548]	; (80046e8 <telem_loop+0x548>)
 80044c4:	2202      	movs	r2, #2
 80044c6:	701a      	strb	r2, [r3, #0]
				EEPROM_Write_Buffer((uint8_t *)&kp_alt, 4);
 80044c8:	2104      	movs	r1, #4
 80044ca:	4884      	ldr	r0, [pc, #528]	; (80046dc <telem_loop+0x53c>)
 80044cc:	f7fe fb96 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_alt, 4);
 80044d0:	2104      	movs	r1, #4
 80044d2:	4883      	ldr	r0, [pc, #524]	; (80046e0 <telem_loop+0x540>)
 80044d4:	f7fe fb92 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_alt, 4);
 80044d8:	2104      	movs	r1, #4
 80044da:	4882      	ldr	r0, [pc, #520]	; (80046e4 <telem_loop+0x544>)
 80044dc:	f7fe fb8e 	bl	8002bfc <EEPROM_Write_Buffer>
				EEPROM_Save_Page(32);
 80044e0:	2020      	movs	r0, #32
 80044e2:	f7fe fb45 	bl	8002b70 <EEPROM_Save_Page>

				ClearManualBuffer();
 80044e6:	f000 f9d1 	bl	800488c <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 80044ea:	4b80      	ldr	r3, [pc, #512]	; (80046ec <telem_loop+0x54c>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	497f      	ldr	r1, [pc, #508]	; (80046f0 <telem_loop+0x550>)
 80044f2:	4613      	mov	r3, r2
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	440b      	add	r3, r1
 80044fe:	3323      	adds	r3, #35	; 0x23
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 8004504:	4b79      	ldr	r3, [pc, #484]	; (80046ec <telem_loop+0x54c>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	4979      	ldr	r1, [pc, #484]	; (80046f0 <telem_loop+0x550>)
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	440b      	add	r3, r1
 8004518:	3324      	adds	r3, #36	; 0x24
 800451a:	2201      	movs	r2, #1
 800451c:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 800451e:	2004      	movs	r0, #4
 8004520:	f000 fac4 	bl	8004aac <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_alt, 4);
 8004524:	2104      	movs	r1, #4
 8004526:	486d      	ldr	r0, [pc, #436]	; (80046dc <telem_loop+0x53c>)
 8004528:	f000 fadc 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_alt, 4);
 800452c:	2104      	movs	r1, #4
 800452e:	486c      	ldr	r0, [pc, #432]	; (80046e0 <telem_loop+0x540>)
 8004530:	f000 fad8 	bl	8004ae4 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_alt, 4);
 8004534:	2104      	movs	r1, #4
 8004536:	486b      	ldr	r0, [pc, #428]	; (80046e4 <telem_loop+0x544>)
 8004538:	f000 fad4 	bl	8004ae4 <AddToManualBuffer>

				if(manual_packet_count < 31)
 800453c:	4b6b      	ldr	r3, [pc, #428]	; (80046ec <telem_loop+0x54c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b1e      	cmp	r3, #30
 8004542:	d810      	bhi.n	8004566 <telem_loop+0x3c6>
					manual_packet_count++;
 8004544:	4b69      	ldr	r3, [pc, #420]	; (80046ec <telem_loop+0x54c>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	b2da      	uxtb	r2, r3
 800454c:	4b67      	ldr	r3, [pc, #412]	; (80046ec <telem_loop+0x54c>)
 800454e:	701a      	strb	r2, [r3, #0]
				break;
 8004550:	e009      	b.n	8004566 <telem_loop+0x3c6>
				break;
 8004552:	bf00      	nop
 8004554:	e008      	b.n	8004568 <telem_loop+0x3c8>
				break;
 8004556:	bf00      	nop
 8004558:	e006      	b.n	8004568 <telem_loop+0x3c8>
				break;
 800455a:	bf00      	nop
 800455c:	e004      	b.n	8004568 <telem_loop+0x3c8>
				break;
 800455e:	bf00      	nop
 8004560:	e002      	b.n	8004568 <telem_loop+0x3c8>
				break;
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <telem_loop+0x3c8>
				break;
 8004566:	bf00      	nop
			}
		}

		if(tx_done)
 8004568:	4b62      	ldr	r3, [pc, #392]	; (80046f4 <telem_loop+0x554>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d039      	beq.n	80045e6 <telem_loop+0x446>
		{
			tx_done = 0;
 8004572:	4b60      	ldr	r3, [pc, #384]	; (80046f4 <telem_loop+0x554>)
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]

			if(manual_packet_count > 0)
 8004578:	4b5c      	ldr	r3, [pc, #368]	; (80046ec <telem_loop+0x54c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d032      	beq.n	80045e6 <telem_loop+0x446>
			{
				for(int i = 0; i < manual_packet_count - 1; i++)
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	e023      	b.n	80045ce <telem_loop+0x42e>
				{
					for(int j = 0; j < 35; j++)
 8004586:	2300      	movs	r3, #0
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e01a      	b.n	80045c2 <telem_loop+0x422>
					{
						manual_packet_buffer[i].payload[j] = manual_packet_buffer[i + 1].payload[j];
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	4957      	ldr	r1, [pc, #348]	; (80046f0 <telem_loop+0x550>)
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	18ca      	adds	r2, r1, r3
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	7818      	ldrb	r0, [r3, #0]
 80045a4:	4952      	ldr	r1, [pc, #328]	; (80046f0 <telem_loop+0x550>)
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	18ca      	adds	r2, r1, r3
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	4413      	add	r3, r2
 80045b8:	4602      	mov	r2, r0
 80045ba:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 35; j++)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	3301      	adds	r3, #1
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b22      	cmp	r3, #34	; 0x22
 80045c6:	dde1      	ble.n	800458c <telem_loop+0x3ec>
				for(int i = 0; i < manual_packet_count - 1; i++)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	3301      	adds	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	4b47      	ldr	r3, [pc, #284]	; (80046ec <telem_loop+0x54c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	dbd5      	blt.n	8004586 <telem_loop+0x3e6>
					}
				}

				manual_packet_count--;
 80045da:	4b44      	ldr	r3, [pc, #272]	; (80046ec <telem_loop+0x54c>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	3b01      	subs	r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4b42      	ldr	r3, [pc, #264]	; (80046ec <telem_loop+0x54c>)
 80045e4:	701a      	strb	r2, [r3, #0]
			}
		}

		if(waiting_to_rx)
 80045e6:	4b44      	ldr	r3, [pc, #272]	; (80046f8 <telem_loop+0x558>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d017      	beq.n	8004620 <telem_loop+0x480>
		{
			if(HAL_I2C_Master_Seq_Receive_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_receive_buffer, 34, I2C_LAST_FRAME) != HAL_OK)
 80045f0:	2320      	movs	r3, #32
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	2322      	movs	r3, #34	; 0x22
 80045f6:	4a41      	ldr	r2, [pc, #260]	; (80046fc <telem_loop+0x55c>)
 80045f8:	2108      	movs	r1, #8
 80045fa:	4841      	ldr	r0, [pc, #260]	; (8004700 <telem_loop+0x560>)
 80045fc:	f002 f9f0 	bl	80069e0 <HAL_I2C_Master_Seq_Receive_IT>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <telem_loop+0x47a>
			{
				transmit_fail_flag = 1;
 8004606:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <telem_loop+0x564>)
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
				ack_rate_counter = 0;
 800460c:	4b3e      	ldr	r3, [pc, #248]	; (8004708 <telem_loop+0x568>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
				waiting_to_rx = 0;
 8004612:	4b39      	ldr	r3, [pc, #228]	; (80046f8 <telem_loop+0x558>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e002      	b.n	8004620 <telem_loop+0x480>
			}
			else
			{
				waiting_to_rx = 0;
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <telem_loop+0x558>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
				//ack_rate_counter = 0;
			}
		}

		if(!waiting_to_rx && GetMicrosDifference(&telem_min_transmit_timer) >= 2500)
 8004620:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <telem_loop+0x558>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 8118 	bne.w	800485c <telem_loop+0x6bc>
 800462c:	4837      	ldr	r0, [pc, #220]	; (800470c <telem_loop+0x56c>)
 800462e:	f7ff fbed 	bl	8003e0c <GetMicrosDifference>
 8004632:	4602      	mov	r2, r0
 8004634:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8004638:	429a      	cmp	r2, r3
 800463a:	f240 810f 	bls.w	800485c <telem_loop+0x6bc>
		{
			for(int i = 0; i < 35; i++)
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	e007      	b.n	8004654 <telem_loop+0x4b4>
			{
				telem_send_buffer[i] = '\0';
 8004644:	4a32      	ldr	r2, [pc, #200]	; (8004710 <telem_loop+0x570>)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4413      	add	r3, r2
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 35; i++)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	3301      	adds	r3, #1
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b22      	cmp	r3, #34	; 0x22
 8004658:	ddf4      	ble.n	8004644 <telem_loop+0x4a4>
			}

			if(manual_packet_count > 0)
 800465a:	4b24      	ldr	r3, [pc, #144]	; (80046ec <telem_loop+0x54c>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d026      	beq.n	80046b0 <telem_loop+0x510>
			{

				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	e00b      	b.n	8004680 <telem_loop+0x4e0>
				{
					telem_send_buffer[i] = manual_packet_buffer[0].payload[i];
 8004668:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <telem_loop+0x550>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	7819      	ldrb	r1, [r3, #0]
 8004670:	4a27      	ldr	r2, [pc, #156]	; (8004710 <telem_loop+0x570>)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	460a      	mov	r2, r1
 8004678:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3301      	adds	r3, #1
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <telem_loop+0x550>)
 8004682:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004686:	461a      	mov	r2, r3
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4293      	cmp	r3, r2
 800468c:	dbec      	blt.n	8004668 <telem_loop+0x4c8>
				}

				telem_send_buffer[32] = manual_packet_buffer[0].width;
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <telem_loop+0x550>)
 8004690:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <telem_loop+0x570>)
 8004696:	f883 2020 	strb.w	r2, [r3, #32]
				telem_send_buffer[33] = manual_packet_buffer[0].reliable;//Unreliable
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <telem_loop+0x550>)
 800469c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80046a0:	4b1b      	ldr	r3, [pc, #108]	; (8004710 <telem_loop+0x570>)
 80046a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				telem_send_buffer[34] = 0;//No data
 80046a6:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <telem_loop+0x570>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80046ae:	e08e      	b.n	80047ce <telem_loop+0x62e>
			}
			else
			{
				telem_send_buffer[0] = auto_packet_buffer[auto_packet_counter].id;
 80046b0:	4b18      	ldr	r3, [pc, #96]	; (8004714 <telem_loop+0x574>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4a18      	ldr	r2, [pc, #96]	; (8004718 <telem_loop+0x578>)
 80046b8:	23ac      	movs	r3, #172	; 0xac
 80046ba:	fb03 f301 	mul.w	r3, r3, r1
 80046be:	4413      	add	r3, r2
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <telem_loop+0x570>)
 80046c4:	701a      	strb	r2, [r3, #0]
				uint8_t var_index = 1;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]

				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	e050      	b.n	8004772 <telem_loop+0x5d2>
				{
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e03a      	b.n	800474c <telem_loop+0x5ac>
 80046d6:	bf00      	nop
 80046d8:	200002b7 	.word	0x200002b7
 80046dc:	20000278 	.word	0x20000278
 80046e0:	2000027c 	.word	0x2000027c
 80046e4:	20000280 	.word	0x20000280
 80046e8:	20000028 	.word	0x20000028
 80046ec:	200002b4 	.word	0x200002b4
 80046f0:	20000c6c 	.word	0x20000c6c
 80046f4:	200002bc 	.word	0x200002bc
 80046f8:	200002ba 	.word	0x200002ba
 80046fc:	200026e8 	.word	0x200026e8
 8004700:	200009b4 	.word	0x200009b4
 8004704:	200002b9 	.word	0x200002b9
 8004708:	200002b8 	.word	0x200002b8
 800470c:	2000110c 	.word	0x2000110c
 8004710:	20001110 	.word	0x20001110
 8004714:	200002b6 	.word	0x200002b6
 8004718:	20001138 	.word	0x20001138
					{
						telem_send_buffer[var_index] = *((uint8_t *)(auto_packet_buffer[auto_packet_counter].payload[i]) + j);
 800471c:	4b51      	ldr	r3, [pc, #324]	; (8004864 <telem_loop+0x6c4>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	4951      	ldr	r1, [pc, #324]	; (8004868 <telem_loop+0x6c8>)
 8004724:	232b      	movs	r3, #43	; 0x2b
 8004726:	fb03 f202 	mul.w	r2, r3, r2
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	441a      	add	r2, r3
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	7811      	ldrb	r1, [r2, #0]
 800473c:	4a4b      	ldr	r2, [pc, #300]	; (800486c <telem_loop+0x6cc>)
 800473e:	54d1      	strb	r1, [r2, r3]

						var_index++;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	3301      	adds	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3301      	adds	r3, #1
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	4b45      	ldr	r3, [pc, #276]	; (8004864 <telem_loop+0x6c4>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	4619      	mov	r1, r3
 8004752:	4a45      	ldr	r2, [pc, #276]	; (8004868 <telem_loop+0x6c8>)
 8004754:	23ac      	movs	r3, #172	; 0xac
 8004756:	fb03 f301 	mul.w	r3, r3, r1
 800475a:	441a      	add	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4413      	add	r3, r2
 8004760:	3384      	adds	r3, #132	; 0x84
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4293      	cmp	r3, r2
 800476a:	dbd7      	blt.n	800471c <telem_loop+0x57c>
				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	3301      	adds	r3, #1
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	4b3c      	ldr	r3, [pc, #240]	; (8004864 <telem_loop+0x6c4>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	4619      	mov	r1, r3
 8004778:	4a3b      	ldr	r2, [pc, #236]	; (8004868 <telem_loop+0x6c8>)
 800477a:	23ac      	movs	r3, #172	; 0xac
 800477c:	fb03 f301 	mul.w	r3, r3, r1
 8004780:	4413      	add	r3, r2
 8004782:	33a5      	adds	r3, #165	; 0xa5
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4293      	cmp	r3, r2
 800478c:	dba0      	blt.n	80046d0 <telem_loop+0x530>
					}
				}

				telem_send_buffer[32] = var_index;
 800478e:	4a37      	ldr	r2, [pc, #220]	; (800486c <telem_loop+0x6cc>)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	f882 3020 	strb.w	r3, [r2, #32]
				telem_send_buffer[33] = auto_packet_buffer[auto_packet_counter].reliable;
 8004796:	4b33      	ldr	r3, [pc, #204]	; (8004864 <telem_loop+0x6c4>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	4a32      	ldr	r2, [pc, #200]	; (8004868 <telem_loop+0x6c8>)
 800479e:	23ac      	movs	r3, #172	; 0xac
 80047a0:	fb03 f301 	mul.w	r3, r3, r1
 80047a4:	4413      	add	r3, r2
 80047a6:	33a4      	adds	r3, #164	; 0xa4
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	4b30      	ldr	r3, [pc, #192]	; (800486c <telem_loop+0x6cc>)
 80047ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				auto_packet_counter++;
 80047b0:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <telem_loop+0x6c4>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <telem_loop+0x6c4>)
 80047ba:	701a      	strb	r2, [r3, #0]

				if(auto_packet_counter >= auto_packet_count)
 80047bc:	4b29      	ldr	r3, [pc, #164]	; (8004864 <telem_loop+0x6c4>)
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <telem_loop+0x6d0>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <telem_loop+0x62e>
					auto_packet_counter = 0;
 80047c8:	4b26      	ldr	r3, [pc, #152]	; (8004864 <telem_loop+0x6c4>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]

			//sprintf((char*)telem_send_buffer, "%lu%s%ld%lu%s", how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t
			//sprintf((char*)telem_send_buffer, "%c%c%lu%s%ld%lu%s", 0x09 , strlen((char*)telem_send_buffer), how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t


			if(ack_rate_counter < 0xFF)
 80047ce:	4b29      	ldr	r3, [pc, #164]	; (8004874 <telem_loop+0x6d4>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2bff      	cmp	r3, #255	; 0xff
 80047d6:	d006      	beq.n	80047e6 <telem_loop+0x646>
				ack_rate_counter++;
 80047d8:	4b26      	ldr	r3, [pc, #152]	; (8004874 <telem_loop+0x6d4>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	3301      	adds	r3, #1
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	4b24      	ldr	r3, [pc, #144]	; (8004874 <telem_loop+0x6d4>)
 80047e4:	701a      	strb	r2, [r3, #0]

			telem_send_buffer[33] = 0;//Unreliable
 80047e6:	4b21      	ldr	r3, [pc, #132]	; (800486c <telem_loop+0x6cc>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			telem_send_buffer[34] = 0;//No data
 80047ee:	4b1f      	ldr	r3, [pc, #124]	; (800486c <telem_loop+0x6cc>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			//ack_rate_counter = 0;

			if(ack_rate_counter == ack_rate)
 80047f6:	4b1f      	ldr	r3, [pc, #124]	; (8004874 <telem_loop+0x6d4>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <telem_loop+0x6d8>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d115      	bne.n	8004830 <telem_loop+0x690>
			{
				//telem_send_buffer[34] = 1;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_FRAME) != HAL_OK)
 8004804:	2301      	movs	r3, #1
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2323      	movs	r3, #35	; 0x23
 800480a:	4a18      	ldr	r2, [pc, #96]	; (800486c <telem_loop+0x6cc>)
 800480c:	2108      	movs	r1, #8
 800480e:	481b      	ldr	r0, [pc, #108]	; (800487c <telem_loop+0x6dc>)
 8004810:	f002 f828 	bl	8006864 <HAL_I2C_Master_Seq_Transmit_IT>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <telem_loop+0x688>
				{
					transmit_fail_flag = 1;
 800481a:	4b19      	ldr	r3, [pc, #100]	; (8004880 <telem_loop+0x6e0>)
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <telem_loop+0x6d4>)
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e014      	b.n	8004852 <telem_loop+0x6b2>
				}
				else
				{
					waiting_to_rx = 1;
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <telem_loop+0x6e4>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e010      	b.n	8004852 <telem_loop+0x6b2>
			}
			else
			{
				//telem_send_buffer[34] = 0;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8004830:	2308      	movs	r3, #8
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	2323      	movs	r3, #35	; 0x23
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <telem_loop+0x6cc>)
 8004838:	2108      	movs	r1, #8
 800483a:	4810      	ldr	r0, [pc, #64]	; (800487c <telem_loop+0x6dc>)
 800483c:	f002 f812 	bl	8006864 <HAL_I2C_Master_Seq_Transmit_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <telem_loop+0x6b2>
				{
					transmit_fail_flag = 1;
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <telem_loop+0x6e0>)
 8004848:	2201      	movs	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <telem_loop+0x6d4>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
				}
			}

			telem_min_transmit_timer = GetMicros();
 8004852:	f7ff faaf 	bl	8003db4 <GetMicros>
 8004856:	4602      	mov	r2, r0
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <telem_loop+0x6e8>)
 800485a:	601a      	str	r2, [r3, #0]

			//HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35);
		}
	}
}
 800485c:	bf00      	nop
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bdb0      	pop	{r4, r5, r7, pc}
 8004864:	200002b6 	.word	0x200002b6
 8004868:	20001138 	.word	0x20001138
 800486c:	20001110 	.word	0x20001110
 8004870:	200002b5 	.word	0x200002b5
 8004874:	200002b8 	.word	0x200002b8
 8004878:	20000048 	.word	0x20000048
 800487c:	200009b4 	.word	0x200009b4
 8004880:	200002b9 	.word	0x200002b9
 8004884:	200002ba 	.word	0x200002ba
 8004888:	2000110c 	.word	0x2000110c

0800488c <ClearManualBuffer>:

void ClearManualBuffer()
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
	manual_packet_buffer[manual_packet_count].reliable = 0;
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <ClearManualBuffer+0x5c>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	4914      	ldr	r1, [pc, #80]	; (80048ec <ClearManualBuffer+0x60>)
 800489a:	4613      	mov	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4413      	add	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 80048ac:	2300      	movs	r3, #0
 80048ae:	607b      	str	r3, [r7, #4]
 80048b0:	e010      	b.n	80048d4 <ClearManualBuffer+0x48>
	{
		manual_packet_buffer[manual_packet_count].payload[i] = '\0';
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <ClearManualBuffer+0x5c>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	490c      	ldr	r1, [pc, #48]	; (80048ec <ClearManualBuffer+0x60>)
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	18ca      	adds	r2, r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3301      	adds	r3, #1
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b22      	cmp	r3, #34	; 0x22
 80048d8:	ddeb      	ble.n	80048b2 <ClearManualBuffer+0x26>
	}
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	200002b4 	.word	0x200002b4
 80048ec:	20000c6c 	.word	0x20000c6c

080048f0 <ClearPrintBuffer>:

void ClearPrintBuffer()
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 32; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	e007      	b.n	800490c <ClearPrintBuffer+0x1c>
	{
		print_text_buffer[i] = '\0';
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <ClearPrintBuffer+0x30>)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3301      	adds	r3, #1
 800490a:	607b      	str	r3, [r7, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b1f      	cmp	r3, #31
 8004910:	ddf4      	ble.n	80048fc <ClearPrintBuffer+0xc>
	}
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000c48 	.word	0x20000c48

08004924 <PrintManualPacket>:

//Used to write text to console
void PrintManualPacket()
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b083      	sub	sp, #12
 8004928:	af02      	add	r7, sp, #8
	ClearManualBuffer();
 800492a:	f7ff ffaf 	bl	800488c <ClearManualBuffer>

	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%s", print_text_buffer);//uint32_t
 800492e:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <PrintManualPacket+0xbc>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <PrintManualPacket+0xc0>)
 8004940:	4413      	add	r3, r2
 8004942:	4929      	ldr	r1, [pc, #164]	; (80049e8 <PrintManualPacket+0xc4>)
 8004944:	4618      	mov	r0, r3
 8004946:	f00a fed9 	bl	800f6fc <strcpy>
	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%c%c%s", 0x09 , strlen((char*)(manual_packet_buffer[manual_packet_count].payload)), print_text_buffer);
 800494a:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <PrintManualPacket+0xbc>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	4a22      	ldr	r2, [pc, #136]	; (80049e4 <PrintManualPacket+0xc0>)
 800495c:	189c      	adds	r4, r3, r2
 800495e:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <PrintManualPacket+0xbc>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	4613      	mov	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <PrintManualPacket+0xc0>)
 8004970:	4413      	add	r3, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f7fb fc2c 	bl	80001d0 <strlen>
 8004978:	4602      	mov	r2, r0
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <PrintManualPacket+0xc4>)
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	2209      	movs	r2, #9
 8004982:	491a      	ldr	r1, [pc, #104]	; (80049ec <PrintManualPacket+0xc8>)
 8004984:	4620      	mov	r0, r4
 8004986:	f00a fe99 	bl	800f6bc <siprintf>

	manual_packet_buffer[manual_packet_count].width = strlen((char *)(manual_packet_buffer[manual_packet_count].payload));
 800498a:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <PrintManualPacket+0xbc>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <PrintManualPacket+0xc0>)
 800499c:	4413      	add	r3, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fc16 	bl	80001d0 <strlen>
 80049a4:	4601      	mov	r1, r0
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <PrintManualPacket+0xbc>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	b2c8      	uxtb	r0, r1
 80049ae:	490d      	ldr	r1, [pc, #52]	; (80049e4 <PrintManualPacket+0xc0>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	440b      	add	r3, r1
 80049bc:	3323      	adds	r3, #35	; 0x23
 80049be:	4602      	mov	r2, r0
 80049c0:	701a      	strb	r2, [r3, #0]

	if(manual_packet_count < 31)
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <PrintManualPacket+0xbc>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b1e      	cmp	r3, #30
 80049c8:	d805      	bhi.n	80049d6 <PrintManualPacket+0xb2>
		manual_packet_count++;
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <PrintManualPacket+0xbc>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <PrintManualPacket+0xbc>)
 80049d4:	701a      	strb	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3704      	adds	r7, #4
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd90      	pop	{r4, r7, pc}
 80049de:	bf00      	nop
 80049e0:	200002b4 	.word	0x200002b4
 80049e4:	20000c6c 	.word	0x20000c6c
 80049e8:	20000c48 	.word	0x20000c48
 80049ec:	080123a4 	.word	0x080123a4

080049f0 <AddToAutoBuffer>:

void AddToAutoBuffer(uint8_t buf_index, uint8_t *num, uint8_t size)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	6039      	str	r1, [r7, #0]
 80049fa:	71fb      	strb	r3, [r7, #7]
 80049fc:	4613      	mov	r3, r2
 80049fe:	71bb      	strb	r3, [r7, #6]
	auto_packet_buffer[buf_index].payload[auto_packet_buffer[buf_index].var_count] = (uint8_t *)num;
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	79fa      	ldrb	r2, [r7, #7]
 8004a04:	4928      	ldr	r1, [pc, #160]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a06:	20ac      	movs	r0, #172	; 0xac
 8004a08:	fb00 f202 	mul.w	r2, r0, r2
 8004a0c:	440a      	add	r2, r1
 8004a0e:	32a5      	adds	r2, #165	; 0xa5
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	4610      	mov	r0, r2
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a16:	212b      	movs	r1, #43	; 0x2b
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4403      	add	r3, r0
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	605a      	str	r2, [r3, #4]
	auto_packet_buffer[buf_index].width[auto_packet_buffer[buf_index].var_count] = size;
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	79fa      	ldrb	r2, [r7, #7]
 8004a2a:	491f      	ldr	r1, [pc, #124]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a2c:	20ac      	movs	r0, #172	; 0xac
 8004a2e:	fb00 f202 	mul.w	r2, r0, r2
 8004a32:	440a      	add	r2, r1
 8004a34:	32a5      	adds	r2, #165	; 0xa5
 8004a36:	7812      	ldrb	r2, [r2, #0]
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a3c:	21ac      	movs	r1, #172	; 0xac
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	4403      	add	r3, r0
 8004a46:	3384      	adds	r3, #132	; 0x84
 8004a48:	79ba      	ldrb	r2, [r7, #6]
 8004a4a:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].total_width += size;
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a50:	21ac      	movs	r1, #172	; 0xac
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	33a6      	adds	r3, #166	; 0xa6
 8004a5a:	7819      	ldrb	r1, [r3, #0]
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	79ba      	ldrb	r2, [r7, #6]
 8004a60:	440a      	add	r2, r1
 8004a62:	b2d0      	uxtb	r0, r2
 8004a64:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a66:	21ac      	movs	r1, #172	; 0xac
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	33a6      	adds	r3, #166	; 0xa6
 8004a70:	4602      	mov	r2, r0
 8004a72:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].var_count += 1;
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a78:	21ac      	movs	r1, #172	; 0xac
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	33a5      	adds	r3, #165	; 0xa5
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	3201      	adds	r2, #1
 8004a88:	b2d0      	uxtb	r0, r2
 8004a8a:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <AddToAutoBuffer+0xb8>)
 8004a8c:	21ac      	movs	r1, #172	; 0xac
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	33a5      	adds	r3, #165	; 0xa5
 8004a96:	4602      	mov	r2, r0
 8004a98:	701a      	strb	r2, [r3, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20001138 	.word	0x20001138

08004aac <AddIDToManualBuffer>:

void AddIDToManualBuffer(uint8_t packet_id)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
	manual_packet_buffer[manual_packet_count].payload[0] = packet_id;
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <AddIDToManualBuffer+0x30>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	4908      	ldr	r1, [pc, #32]	; (8004ae0 <AddIDToManualBuffer+0x34>)
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	440b      	add	r3, r1
 8004aca:	79fa      	ldrb	r2, [r7, #7]
 8004acc:	701a      	strb	r2, [r3, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	200002b4 	.word	0x200002b4
 8004ae0:	20000c6c 	.word	0x20000c6c

08004ae4 <AddToManualBuffer>:

void AddToManualBuffer(uint8_t *num, uint8_t size)
{
 8004ae4:	b490      	push	{r4, r7}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e022      	b.n	8004b3c <AddToManualBuffer+0x58>
	{
		manual_packet_buffer[manual_packet_count].payload[manual_packet_buffer[manual_packet_count].width + i] = *(((uint8_t *)num) + i);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	18d0      	adds	r0, r2, r3
 8004afc:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <AddToManualBuffer+0xa4>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b21      	ldr	r3, [pc, #132]	; (8004b88 <AddToManualBuffer+0xa4>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	4c20      	ldr	r4, [pc, #128]	; (8004b8c <AddToManualBuffer+0xa8>)
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	4423      	add	r3, r4
 8004b16:	3323      	adds	r3, #35	; 0x23
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4419      	add	r1, r3
 8004b20:	7804      	ldrb	r4, [r0, #0]
 8004b22:	481a      	ldr	r0, [pc, #104]	; (8004b8c <AddToManualBuffer+0xa8>)
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4403      	add	r3, r0
 8004b30:	440b      	add	r3, r1
 8004b32:	4622      	mov	r2, r4
 8004b34:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	dbd8      	blt.n	8004af6 <AddToManualBuffer+0x12>
	}

	manual_packet_buffer[manual_packet_count].width += size;
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <AddToManualBuffer+0xa4>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4910      	ldr	r1, [pc, #64]	; (8004b8c <AddToManualBuffer+0xa8>)
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	440b      	add	r3, r1
 8004b58:	3323      	adds	r3, #35	; 0x23
 8004b5a:	7819      	ldrb	r1, [r3, #0]
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <AddToManualBuffer+0xa4>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	440b      	add	r3, r1
 8004b66:	b2d8      	uxtb	r0, r3
 8004b68:	4908      	ldr	r1, [pc, #32]	; (8004b8c <AddToManualBuffer+0xa8>)
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	3323      	adds	r3, #35	; 0x23
 8004b78:	4602      	mov	r2, r0
 8004b7a:	701a      	strb	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc90      	pop	{r4, r7}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	200002b4 	.word	0x200002b4
 8004b8c:	20000c6c 	.word	0x20000c6c

08004b90 <ReadReceiveBuffer>:

void ReadReceiveBuffer(uint8_t *output, uint8_t size)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e00e      	b.n	8004bc0 <ReadReceiveBuffer+0x30>
	{
		*(((uint8_t *)output) + i) = telem_receive_buffer[telem_receive_read_index + i];
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <ReadReceiveBuffer+0x54>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	441a      	add	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	440b      	add	r3, r1
 8004bb2:	490d      	ldr	r1, [pc, #52]	; (8004be8 <ReadReceiveBuffer+0x58>)
 8004bb4:	5c8a      	ldrb	r2, [r1, r2]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	dbec      	blt.n	8004ba2 <ReadReceiveBuffer+0x12>
	}

	telem_receive_read_index += size;
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <ReadReceiveBuffer+0x54>)
 8004bca:	781a      	ldrb	r2, [r3, #0]
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	4413      	add	r3, r2
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <ReadReceiveBuffer+0x54>)
 8004bd4:	701a      	strb	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	200002b7 	.word	0x200002b7
 8004be8:	200026e8 	.word	0x200026e8

08004bec <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bf2:	f107 0320 	add.w	r3, r7, #32
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bfc:	1d3b      	adds	r3, r7, #4
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	609a      	str	r2, [r3, #8]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	611a      	str	r2, [r3, #16]
 8004c0a:	615a      	str	r2, [r3, #20]
 8004c0c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8004c0e:	4b33      	ldr	r3, [pc, #204]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c10:	4a33      	ldr	r2, [pc, #204]	; (8004ce0 <MX_TIM3_Init+0xf4>)
 8004c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8004c14:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c16:	2253      	movs	r2, #83	; 0x53
 8004c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c1a:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c22:	f241 3287 	movw	r2, #4999	; 0x1387
 8004c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c28:	4b2c      	ldr	r3, [pc, #176]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c2e:	4b2b      	ldr	r3, [pc, #172]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004c34:	4829      	ldr	r0, [pc, #164]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c36:	f005 fedf 	bl	800a9f8 <HAL_TIM_PWM_Init>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004c40:	f7ff f964 	bl	8003f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c44:	2300      	movs	r3, #0
 8004c46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c4c:	f107 0320 	add.w	r3, r7, #32
 8004c50:	4619      	mov	r1, r3
 8004c52:	4822      	ldr	r0, [pc, #136]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c54:	f006 ff8c 	bl	800bb70 <HAL_TIMEx_MasterConfigSynchronization>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004c5e:	f7ff f955 	bl	8003f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c62:	2360      	movs	r3, #96	; 0x60
 8004c64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8004c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c74:	1d3b      	adds	r3, r7, #4
 8004c76:	2200      	movs	r2, #0
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4818      	ldr	r0, [pc, #96]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c7c:	f006 f968 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004c86:	f7ff f941 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c8a:	1d3b      	adds	r3, r7, #4
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4812      	ldr	r0, [pc, #72]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004c92:	f006 f95d 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004c9c:	f7ff f936 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ca0:	1d3b      	adds	r3, r7, #4
 8004ca2:	2208      	movs	r2, #8
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	480d      	ldr	r0, [pc, #52]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004ca8:	f006 f952 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004cb2:	f7ff f92b 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004cb6:	1d3b      	adds	r3, r7, #4
 8004cb8:	220c      	movs	r2, #12
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4807      	ldr	r0, [pc, #28]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004cbe:	f006 f947 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004cc8:	f7ff f920 	bl	8003f0c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004ccc:	4803      	ldr	r0, [pc, #12]	; (8004cdc <MX_TIM3_Init+0xf0>)
 8004cce:	f000 fa1d 	bl	800510c <HAL_TIM_MspPostInit>

}
 8004cd2:	bf00      	nop
 8004cd4:	3728      	adds	r7, #40	; 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20002790 	.word	0x20002790
 8004ce0:	40000400 	.word	0x40000400

08004ce4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	; 0x28
 8004ce8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cea:	f107 0318 	add.w	r3, r7, #24
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
 8004cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cf8:	f107 0310 	add.w	r3, r7, #16
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004d02:	463b      	mov	r3, r7
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	605a      	str	r2, [r3, #4]
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8004d0e:	4b2b      	ldr	r3, [pc, #172]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d10:	4a2b      	ldr	r2, [pc, #172]	; (8004dc0 <MX_TIM5_Init+0xdc>)
 8004d12:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8004d14:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d16:	2253      	movs	r2, #83	; 0x53
 8004d18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d1a:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004d20:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004d34:	4821      	ldr	r0, [pc, #132]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d36:	f005 fe10 	bl	800a95a <HAL_TIM_Base_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8004d40:	f7ff f8e4 	bl	8003f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d48:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004d4a:	f107 0318 	add.w	r3, r7, #24
 8004d4e:	4619      	mov	r1, r3
 8004d50:	481a      	ldr	r0, [pc, #104]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d52:	f006 f9c3 	bl	800b0dc <HAL_TIM_ConfigClockSource>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004d5c:	f7ff f8d6 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8004d60:	4816      	ldr	r0, [pc, #88]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d62:	f005 feb3 	bl	800aacc <HAL_TIM_IC_Init>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004d6c:	f7ff f8ce 	bl	8003f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004d78:	f107 0310 	add.w	r3, r7, #16
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	480f      	ldr	r0, [pc, #60]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004d80:	f006 fef6 	bl	800bb70 <HAL_TIMEx_MasterConfigSynchronization>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8004d8a:	f7ff f8bf 	bl	8003f0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d92:	2301      	movs	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d9e:	463b      	mov	r3, r7
 8004da0:	2200      	movs	r2, #0
 8004da2:	4619      	mov	r1, r3
 8004da4:	4805      	ldr	r0, [pc, #20]	; (8004dbc <MX_TIM5_Init+0xd8>)
 8004da6:	f006 f837 	bl	800ae18 <HAL_TIM_IC_ConfigChannel>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8004db0:	f7ff f8ac 	bl	8003f0c <Error_Handler>
  }

}
 8004db4:	bf00      	nop
 8004db6:	3728      	adds	r7, #40	; 0x28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20002750 	.word	0x20002750
 8004dc0:	40000c00 	.word	0x40000c00

08004dc4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b096      	sub	sp, #88	; 0x58
 8004dc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	609a      	str	r2, [r3, #8]
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	611a      	str	r2, [r3, #16]
 8004df2:	615a      	str	r2, [r3, #20]
 8004df4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	2220      	movs	r2, #32
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f00a fb9d 	bl	800f53c <memset>

  htim8.Instance = TIM8;
 8004e02:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e04:	4a50      	ldr	r2, [pc, #320]	; (8004f48 <MX_TIM8_Init+0x184>)
 8004e06:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8004e08:	4b4e      	ldr	r3, [pc, #312]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e0a:	22a7      	movs	r2, #167	; 0xa7
 8004e0c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e0e:	4b4d      	ldr	r3, [pc, #308]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3999;
 8004e14:	4b4b      	ldr	r3, [pc, #300]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e16:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004e1a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e1c:	4b49      	ldr	r3, [pc, #292]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004e22:	4b48      	ldr	r3, [pc, #288]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e28:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004e2e:	4845      	ldr	r0, [pc, #276]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e30:	f005 fd93 	bl	800a95a <HAL_TIM_Base_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8004e3a:	f7ff f867 	bl	8003f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e48:	4619      	mov	r1, r3
 8004e4a:	483e      	ldr	r0, [pc, #248]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e4c:	f006 f946 	bl	800b0dc <HAL_TIM_ConfigClockSource>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004e56:	f7ff f859 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004e5a:	483a      	ldr	r0, [pc, #232]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e5c:	f005 fdcc 	bl	800a9f8 <HAL_TIM_PWM_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8004e66:	f7ff f851 	bl	8003f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004e72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e76:	4619      	mov	r1, r3
 8004e78:	4832      	ldr	r0, [pc, #200]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004e7a:	f006 fe79 	bl	800bb70 <HAL_TIMEx_MasterConfigSynchronization>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004e84:	f7ff f842 	bl	8003f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e88:	2360      	movs	r3, #96	; 0x60
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 125;
 8004e8c:	237d      	movs	r3, #125	; 0x7d
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e90:	2300      	movs	r3, #0
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e94:	2300      	movs	r3, #0
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4825      	ldr	r0, [pc, #148]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004eae:	f006 f84f 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004eb8:	f7ff f828 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	481f      	ldr	r0, [pc, #124]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004ec6:	f006 f843 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004ed0:	f7ff f81c 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed8:	2208      	movs	r2, #8
 8004eda:	4619      	mov	r1, r3
 8004edc:	4819      	ldr	r0, [pc, #100]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004ede:	f006 f837 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8004ee8:	f7ff f810 	bl	8003f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef0:	220c      	movs	r2, #12
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4813      	ldr	r0, [pc, #76]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004ef6:	f006 f82b 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8004f00:	f7ff f804 	bl	8003f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4807      	ldr	r0, [pc, #28]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004f28:	f006 fe9e 	bl	800bc68 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8004f32:	f7fe ffeb 	bl	8003f0c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8004f36:	4803      	ldr	r0, [pc, #12]	; (8004f44 <MX_TIM8_Init+0x180>)
 8004f38:	f000 f8e8 	bl	800510c <HAL_TIM_MspPostInit>

}
 8004f3c:	bf00      	nop
 8004f3e:	3758      	adds	r7, #88	; 0x58
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20002710 	.word	0x20002710
 8004f48:	40010400 	.word	0x40010400

08004f4c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f52:	463b      	mov	r3, r7
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8004f5e:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004f60:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <MX_TIM9_Init+0x70>)
 8004f62:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004f66:	22a7      	movs	r2, #167	; 0xa7
 8004f68:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64999;
 8004f70:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004f72:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8004f76:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f78:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004f84:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004f86:	f005 fce8 	bl	800a95a <HAL_TIM_Base_Init>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8004f90:	f7fe ffbc 	bl	8003f0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f98:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4806      	ldr	r0, [pc, #24]	; (8004fb8 <MX_TIM9_Init+0x6c>)
 8004fa0:	f006 f89c 	bl	800b0dc <HAL_TIM_ConfigClockSource>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8004faa:	f7fe ffaf 	bl	8003f0c <Error_Handler>
  }

}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200027d0 	.word	0x200027d0
 8004fbc:	40014000 	.word	0x40014000

08004fc0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <HAL_TIM_PWM_MspInit+0x3c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10d      	bne.n	8004fee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_TIM_PWM_MspInit+0x40>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <HAL_TIM_PWM_MspInit+0x40>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <HAL_TIM_PWM_MspInit+0x40>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40023800 	.word	0x40023800

08005004 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08c      	sub	sp, #48	; 0x30
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800500c:	f107 031c 	add.w	r3, r7, #28
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a35      	ldr	r2, [pc, #212]	; (80050f8 <HAL_TIM_Base_MspInit+0xf4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d134      	bne.n	8005090 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	4b34      	ldr	r3, [pc, #208]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	4a33      	ldr	r2, [pc, #204]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 8005030:	f043 0308 	orr.w	r3, r3, #8
 8005034:	6413      	str	r3, [r2, #64]	; 0x40
 8005036:	4b31      	ldr	r3, [pc, #196]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	61bb      	str	r3, [r7, #24]
 8005040:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	6313      	str	r3, [r2, #48]	; 0x30
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005062:	2302      	movs	r3, #2
 8005064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506a:	2300      	movs	r3, #0
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800506e:	2302      	movs	r3, #2
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005072:	f107 031c 	add.w	r3, r7, #28
 8005076:	4619      	mov	r1, r3
 8005078:	4821      	ldr	r0, [pc, #132]	; (8005100 <HAL_TIM_Base_MspInit+0xfc>)
 800507a:	f000 fdb1 	bl	8005be0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800507e:	2200      	movs	r2, #0
 8005080:	2100      	movs	r1, #0
 8005082:	2032      	movs	r0, #50	; 0x32
 8005084:	f000 fa5d 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005088:	2032      	movs	r0, #50	; 0x32
 800508a:	f000 fa76 	bl	800557a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800508e:	e02e      	b.n	80050ee <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <HAL_TIM_Base_MspInit+0x100>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d10e      	bne.n	80050b8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	4a16      	ldr	r2, [pc, #88]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 80050a4:	f043 0302 	orr.w	r3, r3, #2
 80050a8:	6453      	str	r3, [r2, #68]	; 0x44
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]
}
 80050b6:	e01a      	b.n	80050ee <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a12      	ldr	r2, [pc, #72]	; (8005108 <HAL_TIM_Base_MspInit+0x104>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d115      	bne.n	80050ee <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d0:	6453      	str	r3, [r2, #68]	; 0x44
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_TIM_Base_MspInit+0xf8>)
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80050de:	2200      	movs	r2, #0
 80050e0:	2100      	movs	r1, #0
 80050e2:	2018      	movs	r0, #24
 80050e4:	f000 fa2d 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80050e8:	2018      	movs	r0, #24
 80050ea:	f000 fa46 	bl	800557a <HAL_NVIC_EnableIRQ>
}
 80050ee:	bf00      	nop
 80050f0:	3730      	adds	r7, #48	; 0x30
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020000 	.word	0x40020000
 8005104:	40010400 	.word	0x40010400
 8005108:	40014000 	.word	0x40014000

0800510c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a33      	ldr	r2, [pc, #204]	; (80051f8 <HAL_TIM_MspPostInit+0xec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d13c      	bne.n	80051a8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	4b32      	ldr	r3, [pc, #200]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4a31      	ldr	r2, [pc, #196]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6313      	str	r3, [r2, #48]	; 0x30
 800513e:	4b2f      	ldr	r3, [pc, #188]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	6313      	str	r3, [r2, #48]	; 0x30
 800515a:	4b28      	ldr	r3, [pc, #160]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005166:	23c0      	movs	r3, #192	; 0xc0
 8005168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516a:	2302      	movs	r3, #2
 800516c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005172:	2300      	movs	r3, #0
 8005174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005176:	2302      	movs	r3, #2
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	4619      	mov	r1, r3
 8005180:	481f      	ldr	r0, [pc, #124]	; (8005200 <HAL_TIM_MspPostInit+0xf4>)
 8005182:	f000 fd2d 	bl	8005be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005186:	2303      	movs	r3, #3
 8005188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518a:	2302      	movs	r3, #2
 800518c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005192:	2300      	movs	r3, #0
 8005194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005196:	2302      	movs	r3, #2
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	4619      	mov	r1, r3
 80051a0:	4818      	ldr	r0, [pc, #96]	; (8005204 <HAL_TIM_MspPostInit+0xf8>)
 80051a2:	f000 fd1d 	bl	8005be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80051a6:	e023      	b.n	80051f0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a16      	ldr	r2, [pc, #88]	; (8005208 <HAL_TIM_MspPostInit+0xfc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d11e      	bne.n	80051f0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	4b11      	ldr	r3, [pc, #68]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	4a10      	ldr	r2, [pc, #64]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 80051bc:	f043 0304 	orr.w	r3, r3, #4
 80051c0:	6313      	str	r3, [r2, #48]	; 0x30
 80051c2:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <HAL_TIM_MspPostInit+0xf0>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80051ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80051d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d4:	2302      	movs	r3, #2
 80051d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051dc:	2300      	movs	r3, #0
 80051de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80051e0:	2303      	movs	r3, #3
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051e4:	f107 0314 	add.w	r3, r7, #20
 80051e8:	4619      	mov	r1, r3
 80051ea:	4808      	ldr	r0, [pc, #32]	; (800520c <HAL_TIM_MspPostInit+0x100>)
 80051ec:	f000 fcf8 	bl	8005be0 <HAL_GPIO_Init>
}
 80051f0:	bf00      	nop
 80051f2:	3728      	adds	r7, #40	; 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40023800 	.word	0x40023800
 8005200:	40020000 	.word	0x40020000
 8005204:	40020400 	.word	0x40020400
 8005208:	40010400 	.word	0x40010400
 800520c:	40020800 	.word	0x40020800

08005210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005248 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005214:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005216:	e003      	b.n	8005220 <LoopCopyDataInit>

08005218 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800521a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800521c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800521e:	3104      	adds	r1, #4

08005220 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005220:	480b      	ldr	r0, [pc, #44]	; (8005250 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005224:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005226:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005228:	d3f6      	bcc.n	8005218 <CopyDataInit>
  ldr  r2, =_sbss
 800522a:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800522c:	e002      	b.n	8005234 <LoopFillZerobss>

0800522e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800522e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005230:	f842 3b04 	str.w	r3, [r2], #4

08005234 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005236:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005238:	d3f9      	bcc.n	800522e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800523a:	f7fe ff9b 	bl	8004174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800523e:	f00a f949 	bl	800f4d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005242:	f7fe f8e1 	bl	8003408 <main>
  bx  lr    
 8005246:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005248:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800524c:	08012680 	.word	0x08012680
  ldr  r0, =_sdata
 8005250:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005254:	20000230 	.word	0x20000230
  ldr  r2, =_sbss
 8005258:	20000230 	.word	0x20000230
  ldr  r3, = _ebss
 800525c:	200040f0 	.word	0x200040f0

08005260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005260:	e7fe      	b.n	8005260 <ADC_IRQHandler>
	...

08005264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <HAL_Init+0x40>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <HAL_Init+0x40>)
 800526e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_Init+0x40>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <HAL_Init+0x40>)
 800527a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800527e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_Init+0x40>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <HAL_Init+0x40>)
 8005286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800528c:	2003      	movs	r0, #3
 800528e:	f000 f94d 	bl	800552c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005292:	2000      	movs	r0, #0
 8005294:	f000 f808 	bl	80052a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005298:	f7fe fe7c 	bl	8003f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40023c00 	.word	0x40023c00

080052a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_InitTick+0x54>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_InitTick+0x58>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	4619      	mov	r1, r3
 80052ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052be:	fbb3 f3f1 	udiv	r3, r3, r1
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f965 	bl	8005596 <HAL_SYSTICK_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00e      	b.n	80052f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	d80a      	bhi.n	80052f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052dc:	2200      	movs	r2, #0
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	f000 f92d 	bl	8005542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052e8:	4a06      	ldr	r2, [pc, #24]	; (8005304 <HAL_InitTick+0x5c>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e000      	b.n	80052f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000044 	.word	0x20000044
 8005300:	20000050 	.word	0x20000050
 8005304:	2000004c 	.word	0x2000004c

08005308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_IncTick+0x20>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <HAL_IncTick+0x24>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4413      	add	r3, r2
 8005318:	4a04      	ldr	r2, [pc, #16]	; (800532c <HAL_IncTick+0x24>)
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000050 	.word	0x20000050
 800532c:	20002810 	.word	0x20002810

08005330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return uwTick;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_GetTick+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20002810 	.word	0x20002810

08005348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005350:	f7ff ffee 	bl	8005330 <HAL_GetTick>
 8005354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d005      	beq.n	800536e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_Delay+0x40>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800536e:	bf00      	nop
 8005370:	f7ff ffde 	bl	8005330 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d8f7      	bhi.n	8005370 <HAL_Delay+0x28>
  {
  }
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000050 	.word	0x20000050

0800538c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800539c:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <__NVIC_SetPriorityGrouping+0x44>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053a8:	4013      	ands	r3, r2
 80053aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053be:	4a04      	ldr	r2, [pc, #16]	; (80053d0 <__NVIC_SetPriorityGrouping+0x44>)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	60d3      	str	r3, [r2, #12]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053d8:	4b04      	ldr	r3, [pc, #16]	; (80053ec <__NVIC_GetPriorityGrouping+0x18>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	f003 0307 	and.w	r3, r3, #7
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	db0b      	blt.n	800541a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	f003 021f 	and.w	r2, r3, #31
 8005408:	4907      	ldr	r1, [pc, #28]	; (8005428 <__NVIC_EnableIRQ+0x38>)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	2001      	movs	r0, #1
 8005412:	fa00 f202 	lsl.w	r2, r0, r2
 8005416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	e000e100 	.word	0xe000e100

0800542c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	6039      	str	r1, [r7, #0]
 8005436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543c:	2b00      	cmp	r3, #0
 800543e:	db0a      	blt.n	8005456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b2da      	uxtb	r2, r3
 8005444:	490c      	ldr	r1, [pc, #48]	; (8005478 <__NVIC_SetPriority+0x4c>)
 8005446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544a:	0112      	lsls	r2, r2, #4
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	440b      	add	r3, r1
 8005450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005454:	e00a      	b.n	800546c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	4908      	ldr	r1, [pc, #32]	; (800547c <__NVIC_SetPriority+0x50>)
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	3b04      	subs	r3, #4
 8005464:	0112      	lsls	r2, r2, #4
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	440b      	add	r3, r1
 800546a:	761a      	strb	r2, [r3, #24]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100
 800547c:	e000ed00 	.word	0xe000ed00

08005480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f1c3 0307 	rsb	r3, r3, #7
 800549a:	2b04      	cmp	r3, #4
 800549c:	bf28      	it	cs
 800549e:	2304      	movcs	r3, #4
 80054a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2b06      	cmp	r3, #6
 80054a8:	d902      	bls.n	80054b0 <NVIC_EncodePriority+0x30>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3b03      	subs	r3, #3
 80054ae:	e000      	b.n	80054b2 <NVIC_EncodePriority+0x32>
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b4:	f04f 32ff 	mov.w	r2, #4294967295
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43da      	mvns	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	401a      	ands	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054c8:	f04f 31ff 	mov.w	r1, #4294967295
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	43d9      	mvns	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	4313      	orrs	r3, r2
         );
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054f8:	d301      	bcc.n	80054fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00f      	b.n	800551e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <SysTick_Config+0x40>)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005506:	210f      	movs	r1, #15
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	f7ff ff8e 	bl	800542c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <SysTick_Config+0x40>)
 8005512:	2200      	movs	r2, #0
 8005514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005516:	4b04      	ldr	r3, [pc, #16]	; (8005528 <SysTick_Config+0x40>)
 8005518:	2207      	movs	r2, #7
 800551a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	e000e010 	.word	0xe000e010

0800552c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff29 	bl	800538c <__NVIC_SetPriorityGrouping>
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005542:	b580      	push	{r7, lr}
 8005544:	b086      	sub	sp, #24
 8005546:	af00      	add	r7, sp, #0
 8005548:	4603      	mov	r3, r0
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005554:	f7ff ff3e 	bl	80053d4 <__NVIC_GetPriorityGrouping>
 8005558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7ff ff8e 	bl	8005480 <NVIC_EncodePriority>
 8005564:	4602      	mov	r2, r0
 8005566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556a:	4611      	mov	r1, r2
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff5d 	bl	800542c <__NVIC_SetPriority>
}
 8005572:	bf00      	nop
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	4603      	mov	r3, r0
 8005582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff31 	bl	80053f0 <__NVIC_EnableIRQ>
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffa2 	bl	80054e8 <SysTick_Config>
 80055a4:	4603      	mov	r3, r0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055bc:	f7ff feb8 	bl	8005330 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e099      	b.n	8005700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ec:	e00f      	b.n	800560e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ee:	f7ff fe9f 	bl	8005330 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d908      	bls.n	800560e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2203      	movs	r2, #3
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e078      	b.n	8005700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e8      	bne.n	80055ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4b38      	ldr	r3, [pc, #224]	; (8005708 <HAL_DMA_Init+0x158>)
 8005628:	4013      	ands	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800563a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b04      	cmp	r3, #4
 8005666:	d107      	bne.n	8005678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	4313      	orrs	r3, r2
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0307 	bic.w	r3, r3, #7
 800568e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d117      	bne.n	80056d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00e      	beq.n	80056d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fa19 	bl	8005aec <DMA_CheckFifoParam>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2240      	movs	r2, #64	; 0x40
 80056c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056ce:	2301      	movs	r3, #1
 80056d0:	e016      	b.n	8005700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9d0 	bl	8005a80 <DMA_CalcBaseAndBitshift>
 80056e0:	4603      	mov	r3, r0
 80056e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e8:	223f      	movs	r2, #63	; 0x3f
 80056ea:	409a      	lsls	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	f010803f 	.word	0xf010803f

0800570c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d004      	beq.n	800572a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e00c      	b.n	8005744 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2205      	movs	r2, #5
 800572e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800575c:	4b92      	ldr	r3, [pc, #584]	; (80059a8 <HAL_DMA_IRQHandler+0x258>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a92      	ldr	r2, [pc, #584]	; (80059ac <HAL_DMA_IRQHandler+0x25c>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	0a9b      	lsrs	r3, r3, #10
 8005768:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	2208      	movs	r2, #8
 800577c:	409a      	lsls	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01a      	beq.n	80057bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d013      	beq.n	80057bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0204 	bic.w	r2, r2, #4
 80057a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a8:	2208      	movs	r2, #8
 80057aa:	409a      	lsls	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	f043 0201 	orr.w	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d012      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057de:	2201      	movs	r2, #1
 80057e0:	409a      	lsls	r2, r3
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ea:	f043 0202 	orr.w	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	2204      	movs	r2, #4
 80057f8:	409a      	lsls	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d012      	beq.n	8005828 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	2204      	movs	r2, #4
 8005816:	409a      	lsls	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	2210      	movs	r2, #16
 800582e:	409a      	lsls	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d043      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d03c      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	2210      	movs	r2, #16
 800584c:	409a      	lsls	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d018      	beq.n	8005892 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d108      	bne.n	8005880 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d024      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
 800587e:	e01f      	b.n	80058c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01b      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	4798      	blx	r3
 8005890:	e016      	b.n	80058c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d107      	bne.n	80058b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0208 	bic.w	r2, r2, #8
 80058ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	2220      	movs	r2, #32
 80058c6:	409a      	lsls	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 808e 	beq.w	80059ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8086 	beq.w	80059ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e6:	2220      	movs	r2, #32
 80058e8:	409a      	lsls	r2, r3
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d136      	bne.n	8005968 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0216 	bic.w	r2, r2, #22
 8005908:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005918:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <HAL_DMA_IRQHandler+0x1da>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0208 	bic.w	r2, r2, #8
 8005938:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800593e:	223f      	movs	r2, #63	; 0x3f
 8005940:	409a      	lsls	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	2b00      	cmp	r3, #0
 800595c:	d07d      	beq.n	8005a5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
        }
        return;
 8005966:	e078      	b.n	8005a5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d01c      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005988:	2b00      	cmp	r3, #0
 800598a:	d030      	beq.n	80059ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
 8005994:	e02b      	b.n	80059ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d027      	beq.n	80059ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
 80059a6:	e022      	b.n	80059ee <HAL_DMA_IRQHandler+0x29e>
 80059a8:	20000044 	.word	0x20000044
 80059ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10f      	bne.n	80059de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0210 	bic.w	r2, r2, #16
 80059cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d032      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d022      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2205      	movs	r2, #5
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d307      	bcc.n	8005a36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1f2      	bne.n	8005a1a <HAL_DMA_IRQHandler+0x2ca>
 8005a34:	e000      	b.n	8005a38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005a36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
 8005a58:	e000      	b.n	8005a5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8005a5a:	bf00      	nop
    }
  }
}
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop

08005a64 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a72:	b2db      	uxtb	r3, r3
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	3b10      	subs	r3, #16
 8005a90:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <DMA_CalcBaseAndBitshift+0x64>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a9a:	4a13      	ldr	r2, [pc, #76]	; (8005ae8 <DMA_CalcBaseAndBitshift+0x68>)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d909      	bls.n	8005ac2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	1d1a      	adds	r2, r3, #4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	659a      	str	r2, [r3, #88]	; 0x58
 8005ac0:	e007      	b.n	8005ad2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	aaaaaaab 	.word	0xaaaaaaab
 8005ae8:	0801240c 	.word	0x0801240c

08005aec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11f      	bne.n	8005b46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d855      	bhi.n	8005bb8 <DMA_CheckFifoParam+0xcc>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <DMA_CheckFifoParam+0x28>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b25 	.word	0x08005b25
 8005b18:	08005b37 	.word	0x08005b37
 8005b1c:	08005b25 	.word	0x08005b25
 8005b20:	08005bb9 	.word	0x08005bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d045      	beq.n	8005bbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b34:	e042      	b.n	8005bbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b3e:	d13f      	bne.n	8005bc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b44:	e03c      	b.n	8005bc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4e:	d121      	bne.n	8005b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d836      	bhi.n	8005bc4 <DMA_CheckFifoParam+0xd8>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <DMA_CheckFifoParam+0x70>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b73 	.word	0x08005b73
 8005b64:	08005b6d 	.word	0x08005b6d
 8005b68:	08005b85 	.word	0x08005b85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b70:	e02f      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d024      	beq.n	8005bc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b82:	e021      	b.n	8005bc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b8c:	d11e      	bne.n	8005bcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b92:	e01b      	b.n	8005bcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d902      	bls.n	8005ba0 <DMA_CheckFifoParam+0xb4>
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d003      	beq.n	8005ba6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b9e:	e018      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba4:	e015      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb6:	e00b      	b.n	8005bd0 <DMA_CheckFifoParam+0xe4>
      break;
 8005bb8:	bf00      	nop
 8005bba:	e00a      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005bbc:	bf00      	nop
 8005bbe:	e008      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005bc0:	bf00      	nop
 8005bc2:	e006      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005bc4:	bf00      	nop
 8005bc6:	e004      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005bc8:	bf00      	nop
 8005bca:	e002      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8005bcc:	bf00      	nop
 8005bce:	e000      	b.n	8005bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8005bd0:	bf00      	nop
    }
  } 
  
  return status; 
 8005bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b089      	sub	sp, #36	; 0x24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e16b      	b.n	8005ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	f040 815a 	bne.w	8005ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d00b      	beq.n	8005c3a <HAL_GPIO_Init+0x5a>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d007      	beq.n	8005c3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c2e:	2b11      	cmp	r3, #17
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b12      	cmp	r3, #18
 8005c38:	d130      	bne.n	8005c9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	2203      	movs	r2, #3
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c70:	2201      	movs	r2, #1
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	f003 0201 	and.w	r2, r3, #1
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d003      	beq.n	8005cdc <HAL_GPIO_Init+0xfc>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b12      	cmp	r3, #18
 8005cda:	d123      	bne.n	8005d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	08da      	lsrs	r2, r3, #3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3208      	adds	r2, #8
 8005ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	220f      	movs	r2, #15
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0307 	and.w	r3, r3, #7
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	08da      	lsrs	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3208      	adds	r2, #8
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	2203      	movs	r2, #3
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43db      	mvns	r3, r3
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 0203 	and.w	r2, r3, #3
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80b4 	beq.w	8005ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	4b5f      	ldr	r3, [pc, #380]	; (8005ee8 <HAL_GPIO_Init+0x308>)
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	4a5e      	ldr	r2, [pc, #376]	; (8005ee8 <HAL_GPIO_Init+0x308>)
 8005d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d74:	6453      	str	r3, [r2, #68]	; 0x44
 8005d76:	4b5c      	ldr	r3, [pc, #368]	; (8005ee8 <HAL_GPIO_Init+0x308>)
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d82:	4a5a      	ldr	r2, [pc, #360]	; (8005eec <HAL_GPIO_Init+0x30c>)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	3302      	adds	r3, #2
 8005d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	220f      	movs	r2, #15
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	4013      	ands	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a51      	ldr	r2, [pc, #324]	; (8005ef0 <HAL_GPIO_Init+0x310>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02b      	beq.n	8005e06 <HAL_GPIO_Init+0x226>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a50      	ldr	r2, [pc, #320]	; (8005ef4 <HAL_GPIO_Init+0x314>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d025      	beq.n	8005e02 <HAL_GPIO_Init+0x222>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a4f      	ldr	r2, [pc, #316]	; (8005ef8 <HAL_GPIO_Init+0x318>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01f      	beq.n	8005dfe <HAL_GPIO_Init+0x21e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a4e      	ldr	r2, [pc, #312]	; (8005efc <HAL_GPIO_Init+0x31c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d019      	beq.n	8005dfa <HAL_GPIO_Init+0x21a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a4d      	ldr	r2, [pc, #308]	; (8005f00 <HAL_GPIO_Init+0x320>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_GPIO_Init+0x216>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a4c      	ldr	r2, [pc, #304]	; (8005f04 <HAL_GPIO_Init+0x324>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00d      	beq.n	8005df2 <HAL_GPIO_Init+0x212>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a4b      	ldr	r2, [pc, #300]	; (8005f08 <HAL_GPIO_Init+0x328>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <HAL_GPIO_Init+0x20e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a4a      	ldr	r2, [pc, #296]	; (8005f0c <HAL_GPIO_Init+0x32c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_GPIO_Init+0x20a>
 8005de6:	2307      	movs	r3, #7
 8005de8:	e00e      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005dea:	2308      	movs	r3, #8
 8005dec:	e00c      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005dee:	2306      	movs	r3, #6
 8005df0:	e00a      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005df2:	2305      	movs	r3, #5
 8005df4:	e008      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005df6:	2304      	movs	r3, #4
 8005df8:	e006      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e004      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e002      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <HAL_GPIO_Init+0x228>
 8005e06:	2300      	movs	r3, #0
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	f002 0203 	and.w	r2, r2, #3
 8005e0e:	0092      	lsls	r2, r2, #2
 8005e10:	4093      	lsls	r3, r2
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e18:	4934      	ldr	r1, [pc, #208]	; (8005eec <HAL_GPIO_Init+0x30c>)
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	089b      	lsrs	r3, r3, #2
 8005e1e:	3302      	adds	r3, #2
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e26:	4b3a      	ldr	r3, [pc, #232]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	4013      	ands	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e4a:	4a31      	ldr	r2, [pc, #196]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e50:	4b2f      	ldr	r3, [pc, #188]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e74:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e7a:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ec8:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <HAL_GPIO_Init+0x330>)
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	2b0f      	cmp	r3, #15
 8005ed8:	f67f ae90 	bls.w	8005bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005edc:	bf00      	nop
 8005ede:	3724      	adds	r7, #36	; 0x24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	40013800 	.word	0x40013800
 8005ef0:	40020000 	.word	0x40020000
 8005ef4:	40020400 	.word	0x40020400
 8005ef8:	40020800 	.word	0x40020800
 8005efc:	40020c00 	.word	0x40020c00
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40021400 	.word	0x40021400
 8005f08:	40021800 	.word	0x40021800
 8005f0c:	40021c00 	.word	0x40021c00
 8005f10:	40013c00 	.word	0x40013c00

08005f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	887b      	ldrh	r3, [r7, #2]
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
 8005f30:	e001      	b.n	8005f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	807b      	strh	r3, [r7, #2]
 8005f50:	4613      	mov	r3, r2
 8005f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f54:	787b      	ldrb	r3, [r7, #1]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f5a:	887a      	ldrh	r2, [r7, #2]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f60:	e003      	b.n	8005f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f62:	887b      	ldrh	r3, [r7, #2]
 8005f64:	041a      	lsls	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	619a      	str	r2, [r3, #24]
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	887b      	ldrh	r3, [r7, #2]
 8005f88:	401a      	ands	r2, r3
 8005f8a:	887b      	ldrh	r3, [r7, #2]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d104      	bne.n	8005f9a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f90:	887b      	ldrh	r3, [r7, #2]
 8005f92:	041a      	lsls	r2, r3, #16
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005f98:	e002      	b.n	8005fa0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005f9a:	887a      	ldrh	r2, [r7, #2]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e11f      	b.n	80061fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc ff3c 	bl	8002e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	; 0x24
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ffe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800600e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006010:	f004 fac8 	bl	800a5a4 <HAL_RCC_GetPCLK1Freq>
 8006014:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4a7b      	ldr	r2, [pc, #492]	; (8006208 <HAL_I2C_Init+0x25c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d807      	bhi.n	8006030 <HAL_I2C_Init+0x84>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a7a      	ldr	r2, [pc, #488]	; (800620c <HAL_I2C_Init+0x260>)
 8006024:	4293      	cmp	r3, r2
 8006026:	bf94      	ite	ls
 8006028:	2301      	movls	r3, #1
 800602a:	2300      	movhi	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e006      	b.n	800603e <HAL_I2C_Init+0x92>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a77      	ldr	r2, [pc, #476]	; (8006210 <HAL_I2C_Init+0x264>)
 8006034:	4293      	cmp	r3, r2
 8006036:	bf94      	ite	ls
 8006038:	2301      	movls	r3, #1
 800603a:	2300      	movhi	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0db      	b.n	80061fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a72      	ldr	r2, [pc, #456]	; (8006214 <HAL_I2C_Init+0x268>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	0c9b      	lsrs	r3, r3, #18
 8006050:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	4a64      	ldr	r2, [pc, #400]	; (8006208 <HAL_I2C_Init+0x25c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d802      	bhi.n	8006080 <HAL_I2C_Init+0xd4>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	3301      	adds	r3, #1
 800607e:	e009      	b.n	8006094 <HAL_I2C_Init+0xe8>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006086:	fb02 f303 	mul.w	r3, r2, r3
 800608a:	4a63      	ldr	r2, [pc, #396]	; (8006218 <HAL_I2C_Init+0x26c>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	099b      	lsrs	r3, r3, #6
 8006092:	3301      	adds	r3, #1
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	430b      	orrs	r3, r1
 800609a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	4956      	ldr	r1, [pc, #344]	; (8006208 <HAL_I2C_Init+0x25c>)
 80060b0:	428b      	cmp	r3, r1
 80060b2:	d80d      	bhi.n	80060d0 <HAL_I2C_Init+0x124>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1e59      	subs	r1, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	fbb1 f3f3 	udiv	r3, r1, r3
 80060c2:	3301      	adds	r3, #1
 80060c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	bf38      	it	cc
 80060cc:	2304      	movcc	r3, #4
 80060ce:	e04f      	b.n	8006170 <HAL_I2C_Init+0x1c4>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d111      	bne.n	80060fc <HAL_I2C_Init+0x150>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1e58      	subs	r0, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6859      	ldr	r1, [r3, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	440b      	add	r3, r1
 80060e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ea:	3301      	adds	r3, #1
 80060ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e012      	b.n	8006122 <HAL_I2C_Init+0x176>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	1e58      	subs	r0, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	0099      	lsls	r1, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006112:	3301      	adds	r3, #1
 8006114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006118:	2b00      	cmp	r3, #0
 800611a:	bf0c      	ite	eq
 800611c:	2301      	moveq	r3, #1
 800611e:	2300      	movne	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_I2C_Init+0x17e>
 8006126:	2301      	movs	r3, #1
 8006128:	e022      	b.n	8006170 <HAL_I2C_Init+0x1c4>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10e      	bne.n	8006150 <HAL_I2C_Init+0x1a4>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	1e58      	subs	r0, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6859      	ldr	r1, [r3, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	440b      	add	r3, r1
 8006140:	fbb0 f3f3 	udiv	r3, r0, r3
 8006144:	3301      	adds	r3, #1
 8006146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800614a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614e:	e00f      	b.n	8006170 <HAL_I2C_Init+0x1c4>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	1e58      	subs	r0, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6859      	ldr	r1, [r3, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	0099      	lsls	r1, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	fbb0 f3f3 	udiv	r3, r0, r3
 8006166:	3301      	adds	r3, #1
 8006168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	6809      	ldr	r1, [r1, #0]
 8006174:	4313      	orrs	r3, r2
 8006176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800619e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6911      	ldr	r1, [r2, #16]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	68d2      	ldr	r2, [r2, #12]
 80061aa:	4311      	orrs	r1, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	430b      	orrs	r3, r1
 80061b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	000186a0 	.word	0x000186a0
 800620c:	001e847f 	.word	0x001e847f
 8006210:	003d08ff 	.word	0x003d08ff
 8006214:	431bde83 	.word	0x431bde83
 8006218:	10624dd3 	.word	0x10624dd3

0800621c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af02      	add	r7, sp, #8
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	461a      	mov	r2, r3
 8006228:	460b      	mov	r3, r1
 800622a:	817b      	strh	r3, [r7, #10]
 800622c:	4613      	mov	r3, r2
 800622e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006230:	f7ff f87e 	bl	8005330 <HAL_GetTick>
 8006234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	f040 80e0 	bne.w	8006404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	2319      	movs	r3, #25
 800624a:	2201      	movs	r2, #1
 800624c:	4970      	ldr	r1, [pc, #448]	; (8006410 <HAL_I2C_Master_Transmit+0x1f4>)
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f002 f9f5 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800625a:	2302      	movs	r3, #2
 800625c:	e0d3      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_I2C_Master_Transmit+0x50>
 8006268:	2302      	movs	r3, #2
 800626a:	e0cc      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ea>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d007      	beq.n	8006292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2221      	movs	r2, #33	; 0x21
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2210      	movs	r2, #16
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	893a      	ldrh	r2, [r7, #8]
 80062c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4a50      	ldr	r2, [pc, #320]	; (8006414 <HAL_I2C_Master_Transmit+0x1f8>)
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80062d4:	8979      	ldrh	r1, [r7, #10]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 ffc8 	bl	8008270 <I2C_MasterRequestWrite>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e08d      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	613b      	str	r3, [r7, #16]
 80062fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006300:	e066      	b.n	80063d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	6a39      	ldr	r1, [r7, #32]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f002 fa6f 	bl	80087ea <I2C_WaitOnTXEFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	2b04      	cmp	r3, #4
 8006318:	d107      	bne.n	800632a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e06b      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	781a      	ldrb	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b04      	cmp	r3, #4
 800636a:	d11b      	bne.n	80063a4 <HAL_I2C_Master_Transmit+0x188>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d017      	beq.n	80063a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	781a      	ldrb	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	6a39      	ldr	r1, [r7, #32]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f002 fa5f 	bl	800886c <I2C_WaitOnBTFFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00d      	beq.n	80063d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d107      	bne.n	80063cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e01a      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d194      	bne.n	8006302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	e000      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006404:	2302      	movs	r3, #2
  }
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	00100002 	.word	0x00100002
 8006414:	ffff0000 	.word	0xffff0000

08006418 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	; 0x30
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	4608      	mov	r0, r1
 8006422:	4611      	mov	r1, r2
 8006424:	461a      	mov	r2, r3
 8006426:	4603      	mov	r3, r0
 8006428:	817b      	strh	r3, [r7, #10]
 800642a:	460b      	mov	r3, r1
 800642c:	813b      	strh	r3, [r7, #8]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006432:	f7fe ff7d 	bl	8005330 <HAL_GetTick>
 8006436:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b20      	cmp	r3, #32
 8006442:	f040 8208 	bne.w	8006856 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	2319      	movs	r3, #25
 800644c:	2201      	movs	r2, #1
 800644e:	497b      	ldr	r1, [pc, #492]	; (800663c <HAL_I2C_Mem_Read+0x224>)
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f002 f8f4 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800645c:	2302      	movs	r3, #2
 800645e:	e1fb      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_I2C_Mem_Read+0x56>
 800646a:	2302      	movs	r3, #2
 800646c:	e1f4      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d007      	beq.n	8006494 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2222      	movs	r2, #34	; 0x22
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80064c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a5b      	ldr	r2, [pc, #364]	; (8006640 <HAL_I2C_Mem_Read+0x228>)
 80064d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064d6:	88f8      	ldrh	r0, [r7, #6]
 80064d8:	893a      	ldrh	r2, [r7, #8]
 80064da:	8979      	ldrh	r1, [r7, #10]
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	4603      	mov	r3, r0
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f001 ff44 	bl	8008374 <I2C_RequestMemoryRead>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e1b0      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d113      	bne.n	8006526 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fe:	2300      	movs	r3, #0
 8006500:	623b      	str	r3, [r7, #32]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	623b      	str	r3, [r7, #32]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	623b      	str	r3, [r7, #32]
 8006512:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e184      	b.n	8006830 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652a:	2b01      	cmp	r3, #1
 800652c:	d11b      	bne.n	8006566 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e164      	b.n	8006830 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b02      	cmp	r3, #2
 800656c:	d11b      	bne.n	80065a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800658c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	e144      	b.n	8006830 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065bc:	e138      	b.n	8006830 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	f200 80f1 	bhi.w	80067aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d123      	bne.n	8006618 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f002 f98a 	bl	80088ee <I2C_WaitOnRXNEFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e139      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	b2d2      	uxtb	r2, r2
 80065f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006616:	e10b      	b.n	8006830 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661c:	2b02      	cmp	r3, #2
 800661e:	d14e      	bne.n	80066be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	2200      	movs	r2, #0
 8006628:	4906      	ldr	r1, [pc, #24]	; (8006644 <HAL_I2C_Mem_Read+0x22c>)
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f002 f807 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e10e      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
 800663a:	bf00      	nop
 800663c:	00100002 	.word	0x00100002
 8006640:	ffff0000 	.word	0xffff0000
 8006644:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066bc:	e0b8      	b.n	8006830 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	2200      	movs	r2, #0
 80066c6:	4966      	ldr	r1, [pc, #408]	; (8006860 <HAL_I2C_Mem_Read+0x448>)
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f001 ffb8 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0bf      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	2200      	movs	r2, #0
 8006722:	494f      	ldr	r1, [pc, #316]	; (8006860 <HAL_I2C_Mem_Read+0x448>)
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f001 ff8a 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e091      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691a      	ldr	r2, [r3, #16]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691a      	ldr	r2, [r3, #16]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067a8:	e042      	b.n	8006830 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f002 f89d 	bl	80088ee <I2C_WaitOnRXNEFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e04c      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	1c5a      	adds	r2, r3, #1
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d118      	bne.n	8006830 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006834:	2b00      	cmp	r3, #0
 8006836:	f47f aec2 	bne.w	80065be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e000      	b.n	8006858 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006856:	2302      	movs	r3, #2
  }
}
 8006858:	4618      	mov	r0, r3
 800685a:	3728      	adds	r7, #40	; 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	00010004 	.word	0x00010004

08006864 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	461a      	mov	r2, r3
 8006870:	460b      	mov	r3, r1
 8006872:	817b      	strh	r3, [r7, #10]
 8006874:	4613      	mov	r3, r2
 8006876:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800687c:	2300      	movs	r3, #0
 800687e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b20      	cmp	r3, #32
 800688a:	f040 809e 	bne.w	80069ca <HAL_I2C_Master_Seq_Transmit_IT+0x166>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d002      	beq.n	800689a <HAL_I2C_Master_Seq_Transmit_IT+0x36>
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d130      	bne.n	80068fc <HAL_I2C_Master_Seq_Transmit_IT+0x98>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800689a:	4b4f      	ldr	r3, [pc, #316]	; (80069d8 <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	4a4e      	ldr	r2, [pc, #312]	; (80069dc <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	0a1a      	lsrs	r2, r3, #8
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	009a      	lsls	r2, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d116      	bne.n	80068ee <HAL_I2C_Master_Seq_Transmit_IT+0x8a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	f043 0220 	orr.w	r2, r3, #32
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e06e      	b.n	80069cc <HAL_I2C_Master_Seq_Transmit_IT+0x168>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d0db      	beq.n	80068b4 <HAL_I2C_Master_Seq_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8006906:	2302      	movs	r3, #2
 8006908:	e060      	b.n	80069cc <HAL_I2C_Master_Seq_Transmit_IT+0x168>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b01      	cmp	r3, #1
 800691e:	d007      	beq.n	8006930 <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2221      	movs	r2, #33	; 0x21
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2210      	movs	r2, #16
 800694c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	893a      	ldrh	r2, [r7, #8]
 8006960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006966:	b29a      	uxth	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a3a      	ldr	r2, [r7, #32]
 8006970:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006972:	897a      	ldrh	r2, [r7, #10]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b11      	cmp	r3, #17
 8006982:	d10c      	bne.n	800699e <HAL_I2C_Master_Seq_Transmit_IT+0x13a>
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800698a:	d003      	beq.n	8006994 <HAL_I2C_Master_Seq_Transmit_IT+0x130>
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006992:	d101      	bne.n	8006998 <HAL_I2C_Master_Seq_Transmit_IT+0x134>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <HAL_I2C_Master_Seq_Transmit_IT+0x136>
 8006998:	2300      	movs	r3, #0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d107      	bne.n	80069ae <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069ac:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80069c4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e000      	b.n	80069cc <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  }
  else
  {
    return HAL_BUSY;
 80069ca:	2302      	movs	r3, #2
  }
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	20000044 	.word	0x20000044
 80069dc:	14f8b589 	.word	0x14f8b589

080069e0 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	; 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	461a      	mov	r2, r3
 80069ec:	460b      	mov	r3, r1
 80069ee:	817b      	strh	r3, [r7, #10]
 80069f0:	4613      	mov	r3, r2
 80069f2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006a00:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	f040 80d2 	bne.w	8006bb4 <HAL_I2C_Master_Seq_Receive_IT+0x1d4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d002      	beq.n	8006a1c <HAL_I2C_Master_Seq_Receive_IT+0x3c>
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d130      	bne.n	8006a7e <HAL_I2C_Master_Seq_Receive_IT+0x9e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a1c:	4b69      	ldr	r3, [pc, #420]	; (8006bc4 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	08db      	lsrs	r3, r3, #3
 8006a22:	4a69      	ldr	r2, [pc, #420]	; (8006bc8 <HAL_I2C_Master_Seq_Receive_IT+0x1e8>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	0a1a      	lsrs	r2, r3, #8
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009a      	lsls	r2, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d116      	bne.n	8006a70 <HAL_I2C_Master_Seq_Receive_IT+0x90>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	f043 0220 	orr.w	r2, r3, #32
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0a2      	b.n	8006bb6 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d0db      	beq.n	8006a36 <HAL_I2C_Master_Seq_Receive_IT+0x56>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e094      	b.n	8006bb6 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d007      	beq.n	8006ab2 <HAL_I2C_Master_Seq_Receive_IT+0xd2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f042 0201 	orr.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ac0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2222      	movs	r2, #34	; 0x22
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2210      	movs	r2, #16
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	893a      	ldrh	r2, [r7, #8]
 8006ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006af4:	897a      	ldrh	r2, [r7, #10]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d126      	bne.n	8006b58 <HAL_I2C_Master_Seq_Receive_IT+0x178>
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d002      	beq.n	8006b16 <HAL_I2C_Master_Seq_Receive_IT+0x136>
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d120      	bne.n	8006b58 <HAL_I2C_Master_Seq_Receive_IT+0x178>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b12      	cmp	r3, #18
 8006b1a:	d114      	bne.n	8006b46 <HAL_I2C_Master_Seq_Receive_IT+0x166>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2a:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b42:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006b44:	e010      	b.n	8006b68 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b54:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8006b56:	e007      	b.n	8006b68 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b66:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b12      	cmp	r3, #18
 8006b6c:	d10c      	bne.n	8006b88 <HAL_I2C_Master_Seq_Receive_IT+0x1a8>
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006b74:	d003      	beq.n	8006b7e <HAL_I2C_Master_Seq_Receive_IT+0x19e>
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006b7c:	d101      	bne.n	8006b82 <HAL_I2C_Master_Seq_Receive_IT+0x1a2>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <HAL_I2C_Master_Seq_Receive_IT+0x1a4>
 8006b82:	2300      	movs	r3, #0
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d107      	bne.n	8006b98 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b96:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e000      	b.n	8006bb6 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8006bb4:	2302      	movs	r3, #2
  }
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3724      	adds	r7, #36	; 0x24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000044 	.word	0x20000044
 8006bc8:	14f8b589 	.word	0x14f8b589

08006bcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b10      	cmp	r3, #16
 8006bfa:	d003      	beq.n	8006c04 <HAL_I2C_EV_IRQHandler+0x38>
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	f040 80b6 	bne.w	8006d70 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10d      	bne.n	8006c3a <HAL_I2C_EV_IRQHandler+0x6e>
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006c24:	d003      	beq.n	8006c2e <HAL_I2C_EV_IRQHandler+0x62>
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2C_EV_IRQHandler+0x66>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <HAL_I2C_EV_IRQHandler+0x68>
 8006c32:	2300      	movs	r3, #0
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	f000 8127 	beq.w	8006e88 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_I2C_EV_IRQHandler+0x92>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	0a5b      	lsrs	r3, r3, #9
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fed1 	bl	80089f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fcf8 	bl	800764c <I2C_Master_SB>
 8006c5c:	e087      	b.n	8006d6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_I2C_EV_IRQHandler+0xb2>
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	0a5b      	lsrs	r3, r3, #9
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fd6e 	bl	8007758 <I2C_Master_ADD10>
 8006c7c:	e077      	b.n	8006d6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <HAL_I2C_EV_IRQHandler+0xd2>
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	0a5b      	lsrs	r3, r3, #9
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fd88 	bl	80077ac <I2C_Master_ADDR>
 8006c9c:	e067      	b.n	8006d6e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	089b      	lsrs	r3, r3, #2
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d030      	beq.n	8006d0c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb8:	f000 80e8 	beq.w	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	09db      	lsrs	r3, r3, #7
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00f      	beq.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x11c>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	0a9b      	lsrs	r3, r3, #10
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d009      	beq.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x11c>
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	089b      	lsrs	r3, r3, #2
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d103      	bne.n	8006ce8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9c4 	bl	800706e <I2C_MasterTransmit_TXE>
 8006ce6:	e042      	b.n	8006d6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	089b      	lsrs	r3, r3, #2
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 80cb 	beq.w	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	0a5b      	lsrs	r3, r3, #9
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 80c4 	beq.w	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa4e 	bl	80071a6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d0a:	e0bf      	b.n	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d1a:	f000 80b7 	beq.w	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	099b      	lsrs	r3, r3, #6
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00f      	beq.n	8006d4a <HAL_I2C_EV_IRQHandler+0x17e>
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	0a9b      	lsrs	r3, r3, #10
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d009      	beq.n	8006d4a <HAL_I2C_EV_IRQHandler+0x17e>
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	089b      	lsrs	r3, r3, #2
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d103      	bne.n	8006d4a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fb16 	bl	8007374 <I2C_MasterReceive_RXNE>
 8006d48:	e011      	b.n	8006d6e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	089b      	lsrs	r3, r3, #2
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 809a 	beq.w	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	0a5b      	lsrs	r3, r3, #9
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8093 	beq.w	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fb86 	bl	8007478 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d6c:	e08e      	b.n	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
 8006d6e:	e08d      	b.n	8006e8c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d004      	beq.n	8006d82 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e007      	b.n	8006d92 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d012      	beq.n	8006dc4 <HAL_I2C_EV_IRQHandler+0x1f8>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	0a5b      	lsrs	r3, r3, #9
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00c      	beq.n	8006dc4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006dba:	69b9      	ldr	r1, [r7, #24]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 ff44 	bl	8007c4a <I2C_Slave_ADDR>
 8006dc2:	e066      	b.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	091b      	lsrs	r3, r3, #4
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_I2C_EV_IRQHandler+0x218>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	0a5b      	lsrs	r3, r3, #9
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 ff79 	bl	8007cd4 <I2C_Slave_STOPF>
 8006de2:	e056      	b.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b21      	cmp	r3, #33	; 0x21
 8006de8:	d002      	beq.n	8006df0 <HAL_I2C_EV_IRQHandler+0x224>
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b29      	cmp	r3, #41	; 0x29
 8006dee:	d125      	bne.n	8006e3c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	09db      	lsrs	r3, r3, #7
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00f      	beq.n	8006e1c <HAL_I2C_EV_IRQHandler+0x250>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	0a9b      	lsrs	r3, r3, #10
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d009      	beq.n	8006e1c <HAL_I2C_EV_IRQHandler+0x250>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	089b      	lsrs	r3, r3, #2
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fe5a 	bl	8007ace <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e1a:	e039      	b.n	8006e90 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d033      	beq.n	8006e90 <HAL_I2C_EV_IRQHandler+0x2c4>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	0a5b      	lsrs	r3, r3, #9
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d02d      	beq.n	8006e90 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fe87 	bl	8007b48 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e3a:	e029      	b.n	8006e90 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	099b      	lsrs	r3, r3, #6
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00f      	beq.n	8006e68 <HAL_I2C_EV_IRQHandler+0x29c>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	0a9b      	lsrs	r3, r3, #10
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d009      	beq.n	8006e68 <HAL_I2C_EV_IRQHandler+0x29c>
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	089b      	lsrs	r3, r3, #2
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fe92 	bl	8007b8a <I2C_SlaveReceive_RXNE>
 8006e66:	e014      	b.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	089b      	lsrs	r3, r3, #2
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00e      	beq.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	0a5b      	lsrs	r3, r3, #9
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d008      	beq.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fec0 	bl	8007c06 <I2C_SlaveReceive_BTF>
 8006e86:	e004      	b.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8006e88:	bf00      	nop
 8006e8a:	e002      	b.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e8c:	bf00      	nop
 8006e8e:	e000      	b.n	8006e92 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e90:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006e92:	3720      	adds	r7, #32
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08a      	sub	sp, #40	; 0x28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eba:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00e      	beq.n	8006ee6 <HAL_I2C_ER_IRQHandler+0x4e>
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ee4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	0a5b      	lsrs	r3, r3, #9
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00e      	beq.n	8006f10 <HAL_I2C_ER_IRQHandler+0x78>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	0a1b      	lsrs	r3, r3, #8
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d008      	beq.n	8006f10 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	f043 0302 	orr.w	r3, r3, #2
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006f0e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	0a9b      	lsrs	r3, r3, #10
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d03f      	beq.n	8006f9c <HAL_I2C_ER_IRQHandler+0x104>
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d039      	beq.n	8006f9c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006f28:	7efb      	ldrb	r3, [r7, #27]
 8006f2a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006f42:	7ebb      	ldrb	r3, [r7, #26]
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d112      	bne.n	8006f6e <HAL_I2C_ER_IRQHandler+0xd6>
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10f      	bne.n	8006f6e <HAL_I2C_ER_IRQHandler+0xd6>
 8006f4e:	7cfb      	ldrb	r3, [r7, #19]
 8006f50:	2b21      	cmp	r3, #33	; 0x21
 8006f52:	d008      	beq.n	8006f66 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006f54:	7cfb      	ldrb	r3, [r7, #19]
 8006f56:	2b29      	cmp	r3, #41	; 0x29
 8006f58:	d005      	beq.n	8006f66 <HAL_I2C_ER_IRQHandler+0xce>
 8006f5a:	7cfb      	ldrb	r3, [r7, #19]
 8006f5c:	2b28      	cmp	r3, #40	; 0x28
 8006f5e:	d106      	bne.n	8006f6e <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b21      	cmp	r3, #33	; 0x21
 8006f64:	d103      	bne.n	8006f6e <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 ffe4 	bl	8007f34 <I2C_Slave_AF>
 8006f6c:	e016      	b.n	8006f9c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f76:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	f043 0304 	orr.w	r3, r3, #4
 8006f7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006f80:	7efb      	ldrb	r3, [r7, #27]
 8006f82:	2b10      	cmp	r3, #16
 8006f84:	d002      	beq.n	8006f8c <HAL_I2C_ER_IRQHandler+0xf4>
 8006f86:	7efb      	ldrb	r3, [r7, #27]
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d107      	bne.n	8006f9c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f9a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	0adb      	lsrs	r3, r3, #11
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_I2C_ER_IRQHandler+0x12e>
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	f043 0308 	orr.w	r3, r3, #8
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006fc4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 f81b 	bl	8008014 <I2C_ITError>
  }
}
 8006fde:	bf00      	nop
 8006fe0:	3728      	adds	r7, #40	; 0x28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b083      	sub	sp, #12
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
 800701a:	4613      	mov	r3, r2
 800701c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007084:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007090:	2b00      	cmp	r3, #0
 8007092:	d150      	bne.n	8007136 <I2C_MasterTransmit_TXE+0xc8>
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	2b21      	cmp	r3, #33	; 0x21
 8007098:	d14d      	bne.n	8007136 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b08      	cmp	r3, #8
 800709e:	d01d      	beq.n	80070dc <I2C_MasterTransmit_TXE+0x6e>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d01a      	beq.n	80070dc <I2C_MasterTransmit_TXE+0x6e>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070ac:	d016      	beq.n	80070dc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070bc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2211      	movs	r2, #17
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fc fec9 	bl	8003e6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070da:	e060      	b.n	800719e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070ea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070fa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d107      	bne.n	8007126 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ff8d 	bl	800703e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007124:	e03b      	b.n	800719e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fc fe9c 	bl	8003e6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007134:	e033      	b.n	800719e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b21      	cmp	r3, #33	; 0x21
 800713a:	d005      	beq.n	8007148 <I2C_MasterTransmit_TXE+0xda>
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d12d      	bne.n	800719e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	2b22      	cmp	r3, #34	; 0x22
 8007146:	d12a      	bne.n	800719e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714c:	b29b      	uxth	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d108      	bne.n	8007164 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007160:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007162:	e01c      	b.n	800719e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b40      	cmp	r3, #64	; 0x40
 800716e:	d103      	bne.n	8007178 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f898 	bl	80072a6 <I2C_MemoryTransmit_TXE_BTF>
}
 8007176:	e012      	b.n	800719e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800719c:	e7ff      	b.n	800719e <I2C_MasterTransmit_TXE+0x130>
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b21      	cmp	r3, #33	; 0x21
 80071be:	d165      	bne.n	800728c <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d012      	beq.n	80071f0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	781a      	ldrb	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80071ee:	e056      	b.n	800729e <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b08      	cmp	r3, #8
 80071f4:	d01d      	beq.n	8007232 <I2C_MasterTransmit_BTF+0x8c>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d01a      	beq.n	8007232 <I2C_MasterTransmit_BTF+0x8c>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007202:	d016      	beq.n	8007232 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007212:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2211      	movs	r2, #17
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2220      	movs	r2, #32
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fc fe1e 	bl	8003e6c <HAL_I2C_MasterTxCpltCallback>
}
 8007230:	e035      	b.n	800729e <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007240:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b40      	cmp	r3, #64	; 0x40
 800726a:	d107      	bne.n	800727c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fee2 	bl	800703e <HAL_I2C_MemTxCpltCallback>
}
 800727a:	e010      	b.n	800729e <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7fc fdf1 	bl	8003e6c <HAL_I2C_MasterTxCpltCallback>
}
 800728a:	e008      	b.n	800729e <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	d102      	bne.n	800729e <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f804 	bl	80072a6 <I2C_MemoryTransmit_TXE_BTF>
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d11d      	bne.n	80072f2 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d10b      	bne.n	80072d6 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80072d4:	e048      	b.n	8007368 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072da:	b29b      	uxth	r3, r3
 80072dc:	121b      	asrs	r3, r3, #8
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ea:	1c5a      	adds	r2, r3, #1
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072f0:	e03a      	b.n	8007368 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10b      	bne.n	8007312 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007310:	e02a      	b.n	8007368 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007316:	2b02      	cmp	r3, #2
 8007318:	d126      	bne.n	8007368 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b22      	cmp	r3, #34	; 0x22
 8007324:	d108      	bne.n	8007338 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007334:	601a      	str	r2, [r3, #0]
}
 8007336:	e017      	b.n	8007368 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b21      	cmp	r3, #33	; 0x21
 8007342:	d111      	bne.n	8007368 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b22      	cmp	r3, #34	; 0x22
 8007386:	d173      	bne.n	8007470 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738c:	b29b      	uxth	r3, r3
 800738e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b03      	cmp	r3, #3
 8007394:	d920      	bls.n	80073d8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	691a      	ldr	r2, [r3, #16]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d154      	bne.n	8007470 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80073d6:	e04b      	b.n	8007470 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d047      	beq.n	8007470 <I2C_MasterReceive_RXNE+0xfc>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d002      	beq.n	80073ec <I2C_MasterReceive_RXNE+0x78>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d141      	bne.n	8007470 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073fa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800740a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007428:	b29b      	uxth	r3, r3
 800742a:	3b01      	subs	r3, #1
 800742c:	b29a      	uxth	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d10a      	bne.n	800745c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7fc fcff 	bl	8003e58 <HAL_I2C_MemRxCpltCallback>
}
 800745a:	e009      	b.n	8007470 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2212      	movs	r2, #18
 8007468:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fc fd14 	bl	8003e98 <HAL_I2C_MasterRxCpltCallback>
}
 8007470:	bf00      	nop
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b04      	cmp	r3, #4
 800748e:	d11b      	bne.n	80074c8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800749e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80074c6:	e0bd      	b.n	8007644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d129      	bne.n	8007526 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d00a      	beq.n	80074fe <I2C_MasterReceive_BTF+0x86>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d007      	beq.n	80074fe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751a:	b29b      	uxth	r3, r3
 800751c:	3b01      	subs	r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007524:	e08e      	b.n	8007644 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d176      	bne.n	800761e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d002      	beq.n	800753c <I2C_MasterReceive_BTF+0xc4>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b10      	cmp	r3, #16
 800753a:	d108      	bne.n	800754e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	e019      	b.n	8007582 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b04      	cmp	r3, #4
 8007552:	d002      	beq.n	800755a <I2C_MasterReceive_BTF+0xe2>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b02      	cmp	r3, #2
 8007558:	d108      	bne.n	800756c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e00a      	b.n	8007582 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b10      	cmp	r3, #16
 8007570:	d007      	beq.n	8007582 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007580:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80075dc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b40      	cmp	r3, #64	; 0x40
 80075f0:	d10a      	bne.n	8007608 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fc fc29 	bl	8003e58 <HAL_I2C_MemRxCpltCallback>
}
 8007606:	e01d      	b.n	8007644 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2212      	movs	r2, #18
 8007614:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7fc fc3e 	bl	8003e98 <HAL_I2C_MasterRxCpltCallback>
}
 800761c:	e012      	b.n	8007644 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691a      	ldr	r2, [r3, #16]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	b2d2      	uxtb	r2, r2
 800762a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007644:	bf00      	nop
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d117      	bne.n	8007690 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	2b00      	cmp	r3, #0
 8007666:	d109      	bne.n	800767c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766c:	b2db      	uxtb	r3, r3
 800766e:	461a      	mov	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007678:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800767a:	e067      	b.n	800774c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	b2da      	uxtb	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	611a      	str	r2, [r3, #16]
}
 800768e:	e05d      	b.n	800774c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007698:	d133      	bne.n	8007702 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b21      	cmp	r3, #33	; 0x21
 80076a4:	d109      	bne.n	80076ba <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80076b6:	611a      	str	r2, [r3, #16]
 80076b8:	e008      	b.n	80076cc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f043 0301 	orr.w	r3, r3, #1
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d004      	beq.n	80076de <I2C_Master_SB+0x92>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d032      	beq.n	800774c <I2C_Master_SB+0x100>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02d      	beq.n	800774c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076fe:	605a      	str	r2, [r3, #4]
}
 8007700:	e024      	b.n	800774c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10e      	bne.n	8007728 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	b29b      	uxth	r3, r3
 8007710:	11db      	asrs	r3, r3, #7
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 0306 	and.w	r3, r3, #6
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f063 030f 	orn	r3, r3, #15
 800771e:	b2da      	uxtb	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	611a      	str	r2, [r3, #16]
}
 8007726:	e011      	b.n	800774c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772c:	2b01      	cmp	r3, #1
 800772e:	d10d      	bne.n	800774c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007734:	b29b      	uxth	r3, r3
 8007736:	11db      	asrs	r3, r3, #7
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 0306 	and.w	r3, r3, #6
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f063 030e 	orn	r3, r3, #14
 8007744:	b2da      	uxtb	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	611a      	str	r2, [r3, #16]
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	b2da      	uxtb	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007770:	2b00      	cmp	r3, #0
 8007772:	d103      	bne.n	800777c <I2C_Master_ADD10+0x24>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	2b00      	cmp	r3, #0
 800777a:	d011      	beq.n	80077a0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <I2C_Master_ADD10+0x38>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d007      	beq.n	80077a0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800779e:	605a      	str	r2, [r3, #4]
    }
  }
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b091      	sub	sp, #68	; 0x44
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b22      	cmp	r3, #34	; 0x22
 80077d4:	f040 8169 	bne.w	8007aaa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10f      	bne.n	8007800 <I2C_Master_ADDR+0x54>
 80077e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d10b      	bne.n	8007800 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e8:	2300      	movs	r3, #0
 80077ea:	633b      	str	r3, [r7, #48]	; 0x30
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	633b      	str	r3, [r7, #48]	; 0x30
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	633b      	str	r3, [r7, #48]	; 0x30
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	e160      	b.n	8007ac2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007804:	2b00      	cmp	r3, #0
 8007806:	d11d      	bne.n	8007844 <I2C_Master_ADDR+0x98>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007810:	d118      	bne.n	8007844 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007812:	2300      	movs	r3, #0
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007826:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007836:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	651a      	str	r2, [r3, #80]	; 0x50
 8007842:	e13e      	b.n	8007ac2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d113      	bne.n	8007876 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800784e:	2300      	movs	r3, #0
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	62bb      	str	r3, [r7, #40]	; 0x28
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e115      	b.n	8007aa2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	f040 808a 	bne.w	8007996 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007888:	d137      	bne.n	80078fa <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007898:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a8:	d113      	bne.n	80078d2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ba:	2300      	movs	r3, #0
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	e0e7      	b.n	8007aa2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d2:	2300      	movs	r3, #0
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	623b      	str	r3, [r7, #32]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	623b      	str	r3, [r7, #32]
 80078e6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e0d3      	b.n	8007aa2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d02e      	beq.n	800795e <I2C_Master_ADDR+0x1b2>
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	2b20      	cmp	r3, #32
 8007904:	d02b      	beq.n	800795e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	2b12      	cmp	r3, #18
 800790a:	d102      	bne.n	8007912 <I2C_Master_ADDR+0x166>
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	2b01      	cmp	r3, #1
 8007910:	d125      	bne.n	800795e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	2b04      	cmp	r3, #4
 8007916:	d00e      	beq.n	8007936 <I2C_Master_ADDR+0x18a>
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	2b02      	cmp	r3, #2
 800791c:	d00b      	beq.n	8007936 <I2C_Master_ADDR+0x18a>
 800791e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007920:	2b10      	cmp	r3, #16
 8007922:	d008      	beq.n	8007936 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	e007      	b.n	8007946 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007944:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	e0a1      	b.n	8007aa2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800796c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800796e:	2300      	movs	r3, #0
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e085      	b.n	8007aa2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799a:	b29b      	uxth	r3, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d14d      	bne.n	8007a3c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d016      	beq.n	80079d4 <I2C_Master_ADDR+0x228>
 80079a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d013      	beq.n	80079d4 <I2C_Master_ADDR+0x228>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	2b10      	cmp	r3, #16
 80079b0:	d010      	beq.n	80079d4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	e007      	b.n	80079e4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079e2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f2:	d117      	bne.n	8007a24 <I2C_Master_ADDR+0x278>
 80079f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079fa:	d00b      	beq.n	8007a14 <I2C_Master_ADDR+0x268>
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d008      	beq.n	8007a14 <I2C_Master_ADDR+0x268>
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d005      	beq.n	8007a14 <I2C_Master_ADDR+0x268>
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d002      	beq.n	8007a14 <I2C_Master_ADDR+0x268>
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d107      	bne.n	8007a24 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a22:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	e032      	b.n	8007aa2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a4a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a5a:	d117      	bne.n	8007a8c <I2C_Master_ADDR+0x2e0>
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a62:	d00b      	beq.n	8007a7c <I2C_Master_ADDR+0x2d0>
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d008      	beq.n	8007a7c <I2C_Master_ADDR+0x2d0>
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d005      	beq.n	8007a7c <I2C_Master_ADDR+0x2d0>
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	2b10      	cmp	r3, #16
 8007a74:	d002      	beq.n	8007a7c <I2C_Master_ADDR+0x2d0>
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d107      	bne.n	8007a8c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a8a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	613b      	str	r3, [r7, #16]
 8007aa0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007aa8:	e00b      	b.n	8007ac2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	68fb      	ldr	r3, [r7, #12]
}
 8007ac0:	e7ff      	b.n	8007ac2 <I2C_Master_ADDR+0x316>
 8007ac2:	bf00      	nop
 8007ac4:	3744      	adds	r7, #68	; 0x44
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007adc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d02b      	beq.n	8007b40 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d114      	bne.n	8007b40 <I2C_SlaveTransmit_TXE+0x72>
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
 8007b18:	2b29      	cmp	r3, #41	; 0x29
 8007b1a:	d111      	bne.n	8007b40 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2221      	movs	r2, #33	; 0x21
 8007b30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2228      	movs	r2, #40	; 0x28
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff fa53 	bl	8006fe6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b40:	bf00      	nop
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d011      	beq.n	8007b7e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	781a      	ldrb	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b7e:	bf00      	nop
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d02c      	beq.n	8007bfe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	1c5a      	adds	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d114      	bne.n	8007bfe <I2C_SlaveReceive_RXNE+0x74>
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd8:	d111      	bne.n	8007bfe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2222      	movs	r2, #34	; 0x22
 8007bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2228      	movs	r2, #40	; 0x28
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff f9fe 	bl	8006ffa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d012      	beq.n	8007c3e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691a      	ldr	r2, [r3, #16]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c64:	2b28      	cmp	r3, #40	; 0x28
 8007c66:	d127      	bne.n	8007cb8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c76:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	089b      	lsrs	r3, r3, #2
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	09db      	lsrs	r3, r3, #7
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d103      	bne.n	8007c9c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	81bb      	strh	r3, [r7, #12]
 8007c9a:	e002      	b.n	8007ca2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007caa:	89ba      	ldrh	r2, [r7, #12]
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff f9ac 	bl	800700e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007cb6:	e008      	b.n	8007cca <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0202 	mvn.w	r2, #2
 8007cc0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cf2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	60bb      	str	r3, [r7, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	60bb      	str	r3, [r7, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0201 	orr.w	r2, r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d30:	d172      	bne.n	8007e18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b22      	cmp	r3, #34	; 0x22
 8007d36:	d002      	beq.n	8007d3e <I2C_Slave_STOPF+0x6a>
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d3c:	d135      	bne.n	8007daa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f043 0204 	orr.w	r2, r3, #4
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fd fe74 	bl	8005a64 <HAL_DMA_GetState>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d049      	beq.n	8007e16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	4a69      	ldr	r2, [pc, #420]	; (8007f2c <I2C_Slave_STOPF+0x258>)
 8007d88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fd fcbc 	bl	800570c <HAL_DMA_Abort_IT>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d03d      	beq.n	8007e16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007da8:	e035      	b.n	8007e16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	f043 0204 	orr.w	r2, r3, #4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ddc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fd fe3e 	bl	8005a64 <HAL_DMA_GetState>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d014      	beq.n	8007e18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df2:	4a4e      	ldr	r2, [pc, #312]	; (8007f2c <I2C_Slave_STOPF+0x258>)
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fd fc86 	bl	800570c <HAL_DMA_Abort_IT>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	e000      	b.n	8007e18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d03e      	beq.n	8007ea0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b04      	cmp	r3, #4
 8007e2e:	d112      	bne.n	8007e56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691a      	ldr	r2, [r3, #16]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	b2d2      	uxtb	r2, r2
 8007e3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b40      	cmp	r3, #64	; 0x40
 8007e62:	d112      	bne.n	8007e8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	f043 0204 	orr.w	r2, r3, #4
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f8b3 	bl	8008014 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007eae:	e039      	b.n	8007f24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb4:	d109      	bne.n	8007eca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2228      	movs	r2, #40	; 0x28
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff f898 	bl	8006ffa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b28      	cmp	r3, #40	; 0x28
 8007ed4:	d111      	bne.n	8007efa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <I2C_Slave_STOPF+0x25c>)
 8007eda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7ff f899 	bl	800702a <HAL_I2C_ListenCpltCallback>
}
 8007ef8:	e014      	b.n	8007f24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	2b22      	cmp	r3, #34	; 0x22
 8007f00:	d002      	beq.n	8007f08 <I2C_Slave_STOPF+0x234>
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	2b22      	cmp	r3, #34	; 0x22
 8007f06:	d10d      	bne.n	8007f24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff f86b 	bl	8006ffa <HAL_I2C_SlaveRxCpltCallback>
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	08008541 	.word	0x08008541
 8007f30:	ffff0000 	.word	0xffff0000

08007f34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d002      	beq.n	8007f56 <I2C_Slave_AF+0x22>
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d129      	bne.n	8007faa <I2C_Slave_AF+0x76>
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	2b28      	cmp	r3, #40	; 0x28
 8007f5a:	d126      	bne.n	8007faa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a2c      	ldr	r2, [pc, #176]	; (8008010 <I2C_Slave_AF+0xdc>)
 8007f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff f841 	bl	800702a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007fa8:	e02e      	b.n	8008008 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2b21      	cmp	r3, #33	; 0x21
 8007fae:	d126      	bne.n	8007ffe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a17      	ldr	r2, [pc, #92]	; (8008010 <I2C_Slave_AF+0xdc>)
 8007fb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2221      	movs	r2, #33	; 0x21
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fe4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7fe fff5 	bl	8006fe6 <HAL_I2C_SlaveTxCpltCallback>
}
 8007ffc:	e004      	b.n	8008008 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008006:	615a      	str	r2, [r3, #20]
}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	ffff0000 	.word	0xffff0000

08008014 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008022:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b10      	cmp	r3, #16
 800802e:	d10a      	bne.n	8008046 <I2C_ITError+0x32>
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b22      	cmp	r3, #34	; 0x22
 8008034:	d107      	bne.n	8008046 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008044:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800804c:	2b28      	cmp	r3, #40	; 0x28
 800804e:	d107      	bne.n	8008060 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2228      	movs	r2, #40	; 0x28
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800805e:	e015      	b.n	800808c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800806a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800806e:	d006      	beq.n	800807e <I2C_ITError+0x6a>
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	2b60      	cmp	r3, #96	; 0x60
 8008074:	d003      	beq.n	800807e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800809a:	d162      	bne.n	8008162 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d020      	beq.n	80080fc <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	4a6a      	ldr	r2, [pc, #424]	; (8008268 <I2C_ITError+0x254>)
 80080c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fd fb20 	bl	800570c <HAL_DMA_Abort_IT>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8089 	beq.w	80081e6 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080f6:	4610      	mov	r0, r2
 80080f8:	4798      	blx	r3
 80080fa:	e074      	b.n	80081e6 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	4a59      	ldr	r2, [pc, #356]	; (8008268 <I2C_ITError+0x254>)
 8008102:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd faff 	bl	800570c <HAL_DMA_Abort_IT>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d068      	beq.n	80081e6 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811e:	2b40      	cmp	r3, #64	; 0x40
 8008120:	d10b      	bne.n	800813a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	e041      	b.n	80081e6 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b60      	cmp	r3, #96	; 0x60
 800816c:	d125      	bne.n	80081ba <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008186:	2b40      	cmp	r3, #64	; 0x40
 8008188:	d10b      	bne.n	80081a2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7fb fe8c 	bl	8003ed0 <HAL_I2C_AbortCpltCallback>
 80081b8:	e015      	b.n	80081e6 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c4:	2b40      	cmp	r3, #64	; 0x40
 80081c6:	d10b      	bne.n	80081e0 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7fb fe7f 	bl	8003ee4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10e      	bne.n	8008214 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d109      	bne.n	8008214 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008210:	2b00      	cmp	r3, #0
 8008212:	d007      	beq.n	8008224 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008222:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b04      	cmp	r3, #4
 8008236:	d113      	bne.n	8008260 <I2C_ITError+0x24c>
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	2b28      	cmp	r3, #40	; 0x28
 800823c:	d110      	bne.n	8008260 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a0a      	ldr	r2, [pc, #40]	; (800826c <I2C_ITError+0x258>)
 8008242:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fe fee5 	bl	800702a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	08008541 	.word	0x08008541
 800826c:	ffff0000 	.word	0xffff0000

08008270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af02      	add	r7, sp, #8
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	607a      	str	r2, [r7, #4]
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	460b      	mov	r3, r1
 800827e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2b08      	cmp	r3, #8
 800828a:	d006      	beq.n	800829a <I2C_MasterRequestWrite+0x2a>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d003      	beq.n	800829a <I2C_MasterRequestWrite+0x2a>
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008298:	d108      	bne.n	80082ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e00b      	b.n	80082c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b0:	2b12      	cmp	r3, #18
 80082b2:	d107      	bne.n	80082c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 f9b4 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00c      	beq.n	80082f6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e035      	b.n	8008362 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082fe:	d108      	bne.n	8008312 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008300:	897b      	ldrh	r3, [r7, #10]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	461a      	mov	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800830e:	611a      	str	r2, [r3, #16]
 8008310:	e01b      	b.n	800834a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008312:	897b      	ldrh	r3, [r7, #10]
 8008314:	11db      	asrs	r3, r3, #7
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 0306 	and.w	r3, r3, #6
 800831c:	b2db      	uxtb	r3, r3
 800831e:	f063 030f 	orn	r3, r3, #15
 8008322:	b2da      	uxtb	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	490f      	ldr	r1, [pc, #60]	; (800836c <I2C_MasterRequestWrite+0xfc>)
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f9db 	bl	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e010      	b.n	8008362 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008340:	897b      	ldrh	r3, [r7, #10]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	4908      	ldr	r1, [pc, #32]	; (8008370 <I2C_MasterRequestWrite+0x100>)
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f9cb 	bl	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e000      	b.n	8008362 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	00010008 	.word	0x00010008
 8008370:	00010002 	.word	0x00010002

08008374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af02      	add	r7, sp, #8
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	461a      	mov	r2, r3
 8008382:	4603      	mov	r3, r0
 8008384:	817b      	strh	r3, [r7, #10]
 8008386:	460b      	mov	r3, r1
 8008388:	813b      	strh	r3, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800839c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 f93f 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00c      	beq.n	80083e0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e0a9      	b.n	8008534 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083e0:	897b      	ldrh	r3, [r7, #10]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	6a3a      	ldr	r2, [r7, #32]
 80083f4:	4951      	ldr	r1, [pc, #324]	; (800853c <I2C_RequestMemoryRead+0x1c8>)
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f000 f978 	bl	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e096      	b.n	8008534 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800841c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841e:	6a39      	ldr	r1, [r7, #32]
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f9e2 	bl	80087ea <I2C_WaitOnTXEFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00d      	beq.n	8008448 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	2b04      	cmp	r3, #4
 8008432:	d107      	bne.n	8008444 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008442:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e075      	b.n	8008534 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008448:	88fb      	ldrh	r3, [r7, #6]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d105      	bne.n	800845a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800844e:	893b      	ldrh	r3, [r7, #8]
 8008450:	b2da      	uxtb	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	611a      	str	r2, [r3, #16]
 8008458:	e021      	b.n	800849e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800845a:	893b      	ldrh	r3, [r7, #8]
 800845c:	0a1b      	lsrs	r3, r3, #8
 800845e:	b29b      	uxth	r3, r3
 8008460:	b2da      	uxtb	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	6a39      	ldr	r1, [r7, #32]
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f9bc 	bl	80087ea <I2C_WaitOnTXEFlagUntilTimeout>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00d      	beq.n	8008494 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847c:	2b04      	cmp	r3, #4
 800847e:	d107      	bne.n	8008490 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800848e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e04f      	b.n	8008534 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008494:	893b      	ldrh	r3, [r7, #8]
 8008496:	b2da      	uxtb	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800849e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a0:	6a39      	ldr	r1, [r7, #32]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 f9a1 	bl	80087ea <I2C_WaitOnTXEFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00d      	beq.n	80084ca <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d107      	bne.n	80084c6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e034      	b.n	8008534 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	6a3b      	ldr	r3, [r7, #32]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f8a9 	bl	800863e <I2C_WaitOnFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00c      	beq.n	800850c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e013      	b.n	8008534 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800850c:	897b      	ldrh	r3, [r7, #10]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f043 0301 	orr.w	r3, r3, #1
 8008514:	b2da      	uxtb	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	6a3a      	ldr	r2, [r7, #32]
 8008520:	4906      	ldr	r1, [pc, #24]	; (800853c <I2C_RequestMemoryRead+0x1c8>)
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f000 f8e2 	bl	80086ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e000      	b.n	8008534 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	00010002 	.word	0x00010002

08008540 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008554:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008562:	2200      	movs	r2, #0
 8008564:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	2200      	movs	r2, #0
 8008574:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008584:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008598:	2200      	movs	r2, #0
 800859a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	2200      	movs	r2, #0
 80085aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0201 	bic.w	r2, r2, #1
 80085ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b60      	cmp	r3, #96	; 0x60
 80085c6:	d10e      	bne.n	80085e6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7fb fc76 	bl	8003ed0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085e4:	e027      	b.n	8008636 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80085ec:	2b28      	cmp	r3, #40	; 0x28
 80085ee:	d117      	bne.n	8008620 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0201 	orr.w	r2, r2, #1
 80085fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800860e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2228      	movs	r2, #40	; 0x28
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800861e:	e007      	b.n	8008630 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f7fb fc57 	bl	8003ee4 <HAL_I2C_ErrorCallback>
}
 8008636:	bf00      	nop
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	4613      	mov	r3, r2
 800864c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800864e:	e025      	b.n	800869c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d021      	beq.n	800869c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008658:	f7fc fe6a 	bl	8005330 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d302      	bcc.n	800866e <I2C_WaitOnFlagUntilTimeout+0x30>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d116      	bne.n	800869c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	f043 0220 	orr.w	r2, r3, #32
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e023      	b.n	80086e4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	0c1b      	lsrs	r3, r3, #16
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d10d      	bne.n	80086c2 <I2C_WaitOnFlagUntilTimeout+0x84>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	43da      	mvns	r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4013      	ands	r3, r2
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bf0c      	ite	eq
 80086b8:	2301      	moveq	r3, #1
 80086ba:	2300      	movne	r3, #0
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	e00c      	b.n	80086dc <I2C_WaitOnFlagUntilTimeout+0x9e>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	43da      	mvns	r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4013      	ands	r3, r2
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bf0c      	ite	eq
 80086d4:	2301      	moveq	r3, #1
 80086d6:	2300      	movne	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d0b6      	beq.n	8008650 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086fa:	e051      	b.n	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870a:	d123      	bne.n	8008754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800871a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008724:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	f043 0204 	orr.w	r2, r3, #4
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e046      	b.n	80087e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875a:	d021      	beq.n	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800875c:	f7fc fde8 	bl	8005330 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	d302      	bcc.n	8008772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d116      	bne.n	80087a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2220      	movs	r2, #32
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	f043 0220 	orr.w	r2, r3, #32
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e020      	b.n	80087e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	0c1b      	lsrs	r3, r3, #16
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d10c      	bne.n	80087c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	43da      	mvns	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	4013      	ands	r3, r2
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf14      	ite	ne
 80087bc:	2301      	movne	r3, #1
 80087be:	2300      	moveq	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	e00b      	b.n	80087dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	43da      	mvns	r2, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4013      	ands	r3, r2
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	2300      	moveq	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d18d      	bne.n	80086fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b084      	sub	sp, #16
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087f6:	e02d      	b.n	8008854 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f000 f8ce 	bl	800899a <I2C_IsAcknowledgeFailed>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e02d      	b.n	8008864 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d021      	beq.n	8008854 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008810:	f7fc fd8e 	bl	8005330 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	429a      	cmp	r2, r3
 800881e:	d302      	bcc.n	8008826 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d116      	bne.n	8008854 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	f043 0220 	orr.w	r2, r3, #32
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e007      	b.n	8008864 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885e:	2b80      	cmp	r3, #128	; 0x80
 8008860:	d1ca      	bne.n	80087f8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008878:	e02d      	b.n	80088d6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 f88d 	bl	800899a <I2C_IsAcknowledgeFailed>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e02d      	b.n	80088e6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d021      	beq.n	80088d6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008892:	f7fc fd4d 	bl	8005330 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d302      	bcc.n	80088a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d116      	bne.n	80088d6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	f043 0220 	orr.w	r2, r3, #32
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e007      	b.n	80088e6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b04      	cmp	r3, #4
 80088e2:	d1ca      	bne.n	800887a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088fa:	e042      	b.n	8008982 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f003 0310 	and.w	r3, r3, #16
 8008906:	2b10      	cmp	r3, #16
 8008908:	d119      	bne.n	800893e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f06f 0210 	mvn.w	r2, #16
 8008912:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2220      	movs	r2, #32
 800891e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e029      	b.n	8008992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800893e:	f7fc fcf7 	bl	8005330 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d116      	bne.n	8008982 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f043 0220 	orr.w	r2, r3, #32
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e007      	b.n	8008992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898c:	2b40      	cmp	r3, #64	; 0x40
 800898e:	d1b5      	bne.n	80088fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b0:	d11b      	bne.n	80089ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f043 0204 	orr.w	r2, r3, #4
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e000      	b.n	80089ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008a08:	d103      	bne.n	8008a12 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a10:	e007      	b.n	8008a22 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a1a:	d102      	bne.n	8008a22 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2208      	movs	r2, #8
 8008a20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a30:	b08f      	sub	sp, #60	; 0x3c
 8008a32:	af0a      	add	r7, sp, #40	; 0x28
 8008a34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d101      	bne.n	8008a40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e10f      	b.n	8008c60 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d106      	bne.n	8008a60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f006 fa38 	bl	800eed0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2203      	movs	r2, #3
 8008a64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f003 fa6d 	bl	800bf5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	603b      	str	r3, [r7, #0]
 8008a8a:	687e      	ldr	r6, [r7, #4]
 8008a8c:	466d      	mov	r5, sp
 8008a8e:	f106 0410 	add.w	r4, r6, #16
 8008a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008aa2:	1d33      	adds	r3, r6, #4
 8008aa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008aa6:	6838      	ldr	r0, [r7, #0]
 8008aa8:	f003 f944 	bl	800bd34 <USB_CoreInit>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e0d0      	b.n	8008c60 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f003 fa5b 	bl	800bf80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
 8008ace:	e04a      	b.n	8008b66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008ad0:	7bfa      	ldrb	r2, [r7, #15]
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	333d      	adds	r3, #61	; 0x3d
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008ae4:	7bfa      	ldrb	r2, [r7, #15]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	333c      	adds	r3, #60	; 0x3c
 8008af4:	7bfa      	ldrb	r2, [r7, #15]
 8008af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008af8:	7bfa      	ldrb	r2, [r7, #15]
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	b298      	uxth	r0, r3
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	4613      	mov	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	1a9b      	subs	r3, r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	3342      	adds	r3, #66	; 0x42
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008b10:	7bfa      	ldrb	r2, [r7, #15]
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	4613      	mov	r3, r2
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	333f      	adds	r3, #63	; 0x3f
 8008b20:	2200      	movs	r2, #0
 8008b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008b24:	7bfa      	ldrb	r2, [r7, #15]
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	1a9b      	subs	r3, r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	3344      	adds	r3, #68	; 0x44
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008b38:	7bfa      	ldrb	r2, [r7, #15]
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	3348      	adds	r3, #72	; 0x48
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b4c:	7bfa      	ldrb	r2, [r7, #15]
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	3350      	adds	r3, #80	; 0x50
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	3301      	adds	r3, #1
 8008b64:	73fb      	strb	r3, [r7, #15]
 8008b66:	7bfa      	ldrb	r2, [r7, #15]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d3af      	bcc.n	8008ad0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
 8008b74:	e044      	b.n	8008c00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008b76:	7bfa      	ldrb	r2, [r7, #15]
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008b88:	2200      	movs	r2, #0
 8008b8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008b8c:	7bfa      	ldrb	r2, [r7, #15]
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008b9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ba0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008ba2:	7bfa      	ldrb	r2, [r7, #15]
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008bb8:	7bfa      	ldrb	r2, [r7, #15]
 8008bba:	6879      	ldr	r1, [r7, #4]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	1a9b      	subs	r3, r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008bce:	7bfa      	ldrb	r2, [r7, #15]
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	440b      	add	r3, r1
 8008bdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008be4:	7bfa      	ldrb	r2, [r7, #15]
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4613      	mov	r3, r2
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	1a9b      	subs	r3, r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
 8008c00:	7bfa      	ldrb	r2, [r7, #15]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d3b5      	bcc.n	8008b76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	687e      	ldr	r6, [r7, #4]
 8008c12:	466d      	mov	r5, sp
 8008c14:	f106 0410 	add.w	r4, r6, #16
 8008c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c24:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c28:	1d33      	adds	r3, r6, #4
 8008c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c2c:	6838      	ldr	r0, [r7, #0]
 8008c2e:	f003 f9d1 	bl	800bfd4 <USB_DevInit>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e00d      	b.n	8008c60 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f004 fa10 	bl	800d07e <USB_DevDisconnect>

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_PCD_Start+0x1c>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e020      	b.n	8008cc6 <HAL_PCD_Start+0x5e>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d109      	bne.n	8008ca8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d005      	beq.n	8008ca8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f004 f9ce 	bl	800d04e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f003 f940 	bl	800bf3c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008cce:	b590      	push	{r4, r7, lr}
 8008cd0:	b08d      	sub	sp, #52	; 0x34
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f004 fa75 	bl	800d1d4 <USB_GetMode>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 839d 	bne.w	800942c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f004 f9d9 	bl	800d0ae <USB_ReadInterrupts>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 8393 	beq.w	800942a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f004 f9d0 	bl	800d0ae <USB_ReadInterrupts>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d107      	bne.n	8008d28 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f002 0202 	and.w	r2, r2, #2
 8008d26:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f004 f9be 	bl	800d0ae <USB_ReadInterrupts>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f003 0310 	and.w	r3, r3, #16
 8008d38:	2b10      	cmp	r3, #16
 8008d3a:	d161      	bne.n	8008e00 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699a      	ldr	r2, [r3, #24]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0210 	bic.w	r2, r2, #16
 8008d4a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	6a1b      	ldr	r3, [r3, #32]
 8008d50:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f003 020f 	and.w	r2, r3, #15
 8008d58:	4613      	mov	r3, r2
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4413      	add	r3, r2
 8008d68:	3304      	adds	r3, #4
 8008d6a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	0c5b      	lsrs	r3, r3, #17
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d124      	bne.n	8008dc2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d035      	beq.n	8008df0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	091b      	lsrs	r3, r3, #4
 8008d8c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	461a      	mov	r2, r3
 8008d96:	6a38      	ldr	r0, [r7, #32]
 8008d98:	f004 f836 	bl	800ce08 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	091b      	lsrs	r3, r3, #4
 8008da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008da8:	441a      	add	r2, r3
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	699a      	ldr	r2, [r3, #24]
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	091b      	lsrs	r3, r3, #4
 8008db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dba:	441a      	add	r2, r3
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	619a      	str	r2, [r3, #24]
 8008dc0:	e016      	b.n	8008df0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	0c5b      	lsrs	r3, r3, #17
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	2b06      	cmp	r3, #6
 8008dcc:	d110      	bne.n	8008df0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008dd4:	2208      	movs	r2, #8
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6a38      	ldr	r0, [r7, #32]
 8008dda:	f004 f815 	bl	800ce08 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	699a      	ldr	r2, [r3, #24]
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	091b      	lsrs	r3, r3, #4
 8008de6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dea:	441a      	add	r2, r3
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0210 	orr.w	r2, r2, #16
 8008dfe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f004 f952 	bl	800d0ae <USB_ReadInterrupts>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e14:	d16e      	bne.n	8008ef4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f004 f958 	bl	800d0d4 <USB_ReadDevAllOutEpInterrupt>
 8008e24:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008e26:	e062      	b.n	8008eee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d057      	beq.n	8008ee2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f004 f97d 	bl	800d13c <USB_ReadDevOutEPInterrupt>
 8008e42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00c      	beq.n	8008e68 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fdb0 	bl	80099c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00c      	beq.n	8008e8c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2308      	movs	r3, #8
 8008e82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 feaa 	bl	8009be0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f003 0310 	and.w	r3, r3, #16
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d008      	beq.n	8008ec4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d009      	beq.n	8008ee2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eda:	461a      	mov	r2, r3
 8008edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ee0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	085b      	lsrs	r3, r3, #1
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d199      	bne.n	8008e28 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f004 f8d8 	bl	800d0ae <USB_ReadInterrupts>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f08:	f040 80c0 	bne.w	800908c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f004 f8f9 	bl	800d108 <USB_ReadDevAllInEpInterrupt>
 8008f16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008f1c:	e0b2      	b.n	8009084 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 80a7 	beq.w	8009078 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f30:	b2d2      	uxtb	r2, r2
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f004 f91f 	bl	800d178 <USB_ReadDevInEPInterrupt>
 8008f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d057      	beq.n	8008ff6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	69f9      	ldr	r1, [r7, #28]
 8008f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f66:	4013      	ands	r3, r2
 8008f68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f76:	461a      	mov	r2, r3
 8008f78:	2301      	movs	r3, #1
 8008f7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d132      	bne.n	8008fea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008f84:	6879      	ldr	r1, [r7, #4]
 8008f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	3348      	adds	r3, #72	; 0x48
 8008f94:	6819      	ldr	r1, [r3, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4403      	add	r3, r0
 8008fa4:	3344      	adds	r3, #68	; 0x44
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4419      	add	r1, r3
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fae:	4613      	mov	r3, r2
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	1a9b      	subs	r3, r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4403      	add	r3, r0
 8008fb8:	3348      	adds	r3, #72	; 0x48
 8008fba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d113      	bne.n	8008fea <HAL_PCD_IRQHandler+0x31c>
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	3350      	adds	r3, #80	; 0x50
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d108      	bne.n	8008fea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	f004 f927 	bl	800d238 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f005 ffee 	bl	800efd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f003 0308 	and.w	r3, r3, #8
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d008      	beq.n	8009012 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900c:	461a      	mov	r2, r3
 800900e:	2308      	movs	r3, #8
 8009010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	2b00      	cmp	r3, #0
 800901a:	d008      	beq.n	800902e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	461a      	mov	r2, r3
 800902a:	2310      	movs	r3, #16
 800902c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d008      	beq.n	800904a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	461a      	mov	r2, r3
 8009046:	2340      	movs	r3, #64	; 0x40
 8009048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d008      	beq.n	8009066 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009060:	461a      	mov	r2, r3
 8009062:	2302      	movs	r3, #2
 8009064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fc1b 	bl	80098ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	3301      	adds	r3, #1
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	085b      	lsrs	r3, r3, #1
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	2b00      	cmp	r3, #0
 8009088:	f47f af49 	bne.w	8008f1e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f004 f80c 	bl	800d0ae <USB_ReadInterrupts>
 8009096:	4603      	mov	r3, r0
 8009098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800909c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090a0:	d122      	bne.n	80090e8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d108      	bne.n	80090d2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80090c8:	2100      	movs	r1, #0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fe26 	bl	8009d1c <HAL_PCDEx_LPM_Callback>
 80090d0:	e002      	b.n	80090d8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f005 fff4 	bl	800f0c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695a      	ldr	r2, [r3, #20]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80090e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f003 ffde 	bl	800d0ae <USB_ReadInterrupts>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090fc:	d112      	bne.n	8009124 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b01      	cmp	r3, #1
 800910c:	d102      	bne.n	8009114 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f005 ffb0 	bl	800f074 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695a      	ldr	r2, [r3, #20]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009122:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f003 ffc0 	bl	800d0ae <USB_ReadInterrupts>
 800912e:	4603      	mov	r3, r0
 8009130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009138:	f040 80c7 	bne.w	80092ca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	69fa      	ldr	r2, [r7, #28]
 8009146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800914a:	f023 0301 	bic.w	r3, r3, #1
 800914e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2110      	movs	r1, #16
 8009156:	4618      	mov	r0, r3
 8009158:	f003 f8a0 	bl	800c29c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800915c:	2300      	movs	r3, #0
 800915e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009160:	e056      	b.n	8009210 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916e:	461a      	mov	r2, r3
 8009170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009174:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009186:	0151      	lsls	r1, r2, #5
 8009188:	69fa      	ldr	r2, [r7, #28]
 800918a:	440a      	add	r2, r1
 800918c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009194:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	015a      	lsls	r2, r3, #5
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	4413      	add	r3, r2
 800919e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091a6:	0151      	lsls	r1, r2, #5
 80091a8:	69fa      	ldr	r2, [r7, #28]
 80091aa:	440a      	add	r2, r1
 80091ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	461a      	mov	r2, r3
 80091c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009208:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	3301      	adds	r3, #1
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009216:	429a      	cmp	r2, r3
 8009218:	d3a3      	bcc.n	8009162 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009228:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800922c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	2b00      	cmp	r3, #0
 8009234:	d016      	beq.n	8009264 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800923c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009246:	f043 030b 	orr.w	r3, r3, #11
 800924a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800925c:	f043 030b 	orr.w	r3, r3, #11
 8009260:	6453      	str	r3, [r2, #68]	; 0x44
 8009262:	e015      	b.n	8009290 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009276:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800927a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	69fa      	ldr	r2, [r7, #28]
 8009286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800928a:	f043 030b 	orr.w	r3, r3, #11
 800928e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	69fa      	ldr	r2, [r7, #28]
 800929a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800929e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80092b4:	461a      	mov	r2, r3
 80092b6:	f003 ffbf 	bl	800d238 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	695a      	ldr	r2, [r3, #20]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80092c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f003 feed 	bl	800d0ae <USB_ReadInterrupts>
 80092d4:	4603      	mov	r3, r0
 80092d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092de:	d124      	bne.n	800932a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f003 ff83 	bl	800d1f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f003 f835 	bl	800c35e <USB_GetDevSpeed>
 80092f4:	4603      	mov	r3, r0
 80092f6:	461a      	mov	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681c      	ldr	r4, [r3, #0]
 8009300:	f001 f944 	bl	800a58c <HAL_RCC_GetHCLKFreq>
 8009304:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800930a:	b2db      	uxtb	r3, r3
 800930c:	461a      	mov	r2, r3
 800930e:	4620      	mov	r0, r4
 8009310:	f002 fd72 	bl	800bdf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f005 fe84 	bl	800f022 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	695a      	ldr	r2, [r3, #20]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009328:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f003 febd 	bl	800d0ae <USB_ReadInterrupts>
 8009334:	4603      	mov	r3, r0
 8009336:	f003 0308 	and.w	r3, r3, #8
 800933a:	2b08      	cmp	r3, #8
 800933c:	d10a      	bne.n	8009354 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f005 fe61 	bl	800f006 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	695a      	ldr	r2, [r3, #20]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f002 0208 	and.w	r2, r2, #8
 8009352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f003 fea8 	bl	800d0ae <USB_ReadInterrupts>
 800935e:	4603      	mov	r3, r0
 8009360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009368:	d10f      	bne.n	800938a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	b2db      	uxtb	r3, r3
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f005 fec3 	bl	800f100 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	695a      	ldr	r2, [r3, #20]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f003 fe8d 	bl	800d0ae <USB_ReadInterrupts>
 8009394:	4603      	mov	r3, r0
 8009396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800939a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800939e:	d10f      	bne.n	80093c0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80093a0:	2300      	movs	r3, #0
 80093a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f005 fe96 	bl	800f0dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695a      	ldr	r2, [r3, #20]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80093be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f003 fe72 	bl	800d0ae <USB_ReadInterrupts>
 80093ca:	4603      	mov	r3, r0
 80093cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d4:	d10a      	bne.n	80093ec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f005 fea4 	bl	800f124 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	695a      	ldr	r2, [r3, #20]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80093ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f003 fe5c 	bl	800d0ae <USB_ReadInterrupts>
 80093f6:	4603      	mov	r3, r0
 80093f8:	f003 0304 	and.w	r3, r3, #4
 80093fc:	2b04      	cmp	r3, #4
 80093fe:	d115      	bne.n	800942c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f005 fe94 	bl	800f140 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6859      	ldr	r1, [r3, #4]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	430a      	orrs	r2, r1
 8009426:	605a      	str	r2, [r3, #4]
 8009428:	e000      	b.n	800942c <HAL_PCD_IRQHandler+0x75e>
      return;
 800942a:	bf00      	nop
    }
  }
}
 800942c:	3734      	adds	r7, #52	; 0x34
 800942e:	46bd      	mov	sp, r7
 8009430:	bd90      	pop	{r4, r7, pc}

08009432 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_PCD_SetAddress+0x1a>
 8009448:	2302      	movs	r3, #2
 800944a:	e013      	b.n	8009474 <HAL_PCD_SetAddress+0x42>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	78fa      	ldrb	r2, [r7, #3]
 8009458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	78fa      	ldrb	r2, [r7, #3]
 8009462:	4611      	mov	r1, r2
 8009464:	4618      	mov	r0, r3
 8009466:	f003 fdcc 	bl	800d002 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	461a      	mov	r2, r3
 800948a:	4603      	mov	r3, r0
 800948c:	70fb      	strb	r3, [r7, #3]
 800948e:	460b      	mov	r3, r1
 8009490:	803b      	strh	r3, [r7, #0]
 8009492:	4613      	mov	r3, r2
 8009494:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800949a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	da0f      	bge.n	80094c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	f003 020f 	and.w	r2, r3, #15
 80094a8:	4613      	mov	r3, r2
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	1a9b      	subs	r3, r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	3338      	adds	r3, #56	; 0x38
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	4413      	add	r3, r2
 80094b6:	3304      	adds	r3, #4
 80094b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	705a      	strb	r2, [r3, #1]
 80094c0:	e00f      	b.n	80094e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	f003 020f 	and.w	r2, r3, #15
 80094c8:	4613      	mov	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	1a9b      	subs	r3, r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	4413      	add	r3, r2
 80094d8:	3304      	adds	r3, #4
 80094da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80094ee:	883a      	ldrh	r2, [r7, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	78ba      	ldrb	r2, [r7, #2]
 80094f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	785b      	ldrb	r3, [r3, #1]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800950c:	78bb      	ldrb	r3, [r7, #2]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d102      	bne.n	8009518 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_PCD_EP_Open+0xaa>
 8009522:	2302      	movs	r3, #2
 8009524:	e00e      	b.n	8009544 <HAL_PCD_EP_Open+0xc8>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	4618      	mov	r0, r3
 8009536:	f002 ff37 	bl	800c3a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009542:	7afb      	ldrb	r3, [r7, #11]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800955c:	2b00      	cmp	r3, #0
 800955e:	da0f      	bge.n	8009580 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	f003 020f 	and.w	r2, r3, #15
 8009566:	4613      	mov	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	3338      	adds	r3, #56	; 0x38
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	3304      	adds	r3, #4
 8009576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2201      	movs	r2, #1
 800957c:	705a      	strb	r2, [r3, #1]
 800957e:	e00f      	b.n	80095a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	f003 020f 	and.w	r2, r3, #15
 8009586:	4613      	mov	r3, r2
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	1a9b      	subs	r3, r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	4413      	add	r3, r2
 8009596:	3304      	adds	r3, #4
 8009598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	f003 030f 	and.w	r3, r3, #15
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <HAL_PCD_EP_Close+0x6e>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e00e      	b.n	80095d8 <HAL_PCD_EP_Close+0x8c>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68f9      	ldr	r1, [r7, #12]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f002 ff75 	bl	800c4b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	460b      	mov	r3, r1
 80095ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	f003 020f 	and.w	r2, r3, #15
 80095f6:	4613      	mov	r3, r2
 80095f8:	00db      	lsls	r3, r3, #3
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	3304      	adds	r3, #4
 8009608:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2200      	movs	r2, #0
 800961a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2200      	movs	r2, #0
 8009620:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	b2da      	uxtb	r2, r3
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d102      	bne.n	800963c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800963c:	7afb      	ldrb	r3, [r7, #11]
 800963e:	f003 030f 	and.w	r3, r3, #15
 8009642:	2b00      	cmp	r3, #0
 8009644:	d109      	bne.n	800965a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6818      	ldr	r0, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	6979      	ldr	r1, [r7, #20]
 8009654:	f003 fa50 	bl	800caf8 <USB_EP0StartXfer>
 8009658:	e008      	b.n	800966c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	6979      	ldr	r1, [r7, #20]
 8009668:	f003 f802 	bl	800c670 <USB_EPStartXfer>
  }

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	f003 020f 	and.w	r2, r3, #15
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009698:	681b      	ldr	r3, [r3, #0]
}
 800969a:	4618      	mov	r0, r3
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
 80096b2:	460b      	mov	r3, r1
 80096b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096b6:	7afb      	ldrb	r3, [r7, #11]
 80096b8:	f003 020f 	and.w	r2, r3, #15
 80096bc:	4613      	mov	r3, r2
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	3338      	adds	r3, #56	; 0x38
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	4413      	add	r3, r2
 80096ca:	3304      	adds	r3, #4
 80096cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2200      	movs	r2, #0
 80096de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2201      	movs	r2, #1
 80096e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	f003 030f 	and.w	r3, r3, #15
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d102      	bne.n	8009700 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009700:	7afb      	ldrb	r3, [r7, #11]
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	461a      	mov	r2, r3
 8009716:	6979      	ldr	r1, [r7, #20]
 8009718:	f003 f9ee 	bl	800caf8 <USB_EP0StartXfer>
 800971c:	e008      	b.n	8009730 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	461a      	mov	r2, r3
 800972a:	6979      	ldr	r1, [r7, #20]
 800972c:	f002 ffa0 	bl	800c670 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	f003 020f 	and.w	r2, r3, #15
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d901      	bls.n	8009758 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e050      	b.n	80097fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800975c:	2b00      	cmp	r3, #0
 800975e:	da0f      	bge.n	8009780 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	f003 020f 	and.w	r2, r3, #15
 8009766:	4613      	mov	r3, r2
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	1a9b      	subs	r3, r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	3338      	adds	r3, #56	; 0x38
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	4413      	add	r3, r2
 8009774:	3304      	adds	r3, #4
 8009776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	705a      	strb	r2, [r3, #1]
 800977e:	e00d      	b.n	800979c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009780:	78fa      	ldrb	r2, [r7, #3]
 8009782:	4613      	mov	r3, r2
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	1a9b      	subs	r3, r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	4413      	add	r3, r2
 8009792:	3304      	adds	r3, #4
 8009794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097a2:	78fb      	ldrb	r3, [r7, #3]
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d101      	bne.n	80097bc <HAL_PCD_EP_SetStall+0x82>
 80097b8:	2302      	movs	r3, #2
 80097ba:	e01e      	b.n	80097fa <HAL_PCD_EP_SetStall+0xc0>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68f9      	ldr	r1, [r7, #12]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f003 fb45 	bl	800ce5a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	f003 030f 	and.w	r3, r3, #15
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10a      	bne.n	80097f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	b2d9      	uxtb	r1, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097ea:	461a      	mov	r2, r3
 80097ec:	f003 fd24 	bl	800d238 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800980e:	78fb      	ldrb	r3, [r7, #3]
 8009810:	f003 020f 	and.w	r2, r3, #15
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	d901      	bls.n	8009820 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e042      	b.n	80098a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009824:	2b00      	cmp	r3, #0
 8009826:	da0f      	bge.n	8009848 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	f003 020f 	and.w	r2, r3, #15
 800982e:	4613      	mov	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	3338      	adds	r3, #56	; 0x38
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	4413      	add	r3, r2
 800983c:	3304      	adds	r3, #4
 800983e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2201      	movs	r2, #1
 8009844:	705a      	strb	r2, [r3, #1]
 8009846:	e00f      	b.n	8009868 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	f003 020f 	and.w	r2, r3, #15
 800984e:	4613      	mov	r3, r2
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	1a9b      	subs	r3, r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	3304      	adds	r3, #4
 8009860:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800986e:	78fb      	ldrb	r3, [r7, #3]
 8009870:	f003 030f 	and.w	r3, r3, #15
 8009874:	b2da      	uxtb	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009880:	2b01      	cmp	r3, #1
 8009882:	d101      	bne.n	8009888 <HAL_PCD_EP_ClrStall+0x86>
 8009884:	2302      	movs	r3, #2
 8009886:	e00e      	b.n	80098a6 <HAL_PCD_EP_ClrStall+0xa4>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68f9      	ldr	r1, [r7, #12]
 8009896:	4618      	mov	r0, r3
 8009898:	f003 fb4d 	bl	800cf36 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b08a      	sub	sp, #40	; 0x28
 80098b2:	af02      	add	r7, sp, #8
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	4613      	mov	r3, r2
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	1a9b      	subs	r3, r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	3338      	adds	r3, #56	; 0x38
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	3304      	adds	r3, #4
 80098d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699a      	ldr	r2, [r3, #24]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d901      	bls.n	80098e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e06c      	b.n	80099c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	695a      	ldr	r2, [r3, #20]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d902      	bls.n	8009902 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	3303      	adds	r3, #3
 8009906:	089b      	lsrs	r3, r3, #2
 8009908:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800990a:	e02b      	b.n	8009964 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	695a      	ldr	r2, [r3, #20]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	69fa      	ldr	r2, [r7, #28]
 800991e:	429a      	cmp	r2, r3
 8009920:	d902      	bls.n	8009928 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	3303      	adds	r3, #3
 800992c:	089b      	lsrs	r3, r3, #2
 800992e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	68d9      	ldr	r1, [r3, #12]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009940:	b2db      	uxtb	r3, r3
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	4603      	mov	r3, r0
 8009946:	6978      	ldr	r0, [r7, #20]
 8009948:	f003 fa29 	bl	800cd9e <USB_WritePacket>

    ep->xfer_buff  += len;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	441a      	add	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	699a      	ldr	r2, [r3, #24]
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	441a      	add	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	b29b      	uxth	r3, r3
 8009974:	69ba      	ldr	r2, [r7, #24]
 8009976:	429a      	cmp	r2, r3
 8009978:	d809      	bhi.n	800998e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	699a      	ldr	r2, [r3, #24]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009982:	429a      	cmp	r2, r3
 8009984:	d203      	bcs.n	800998e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1be      	bne.n	800990c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	695a      	ldr	r2, [r3, #20]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	429a      	cmp	r2, r3
 8009998:	d811      	bhi.n	80099be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	2201      	movs	r2, #1
 80099a2:	fa02 f303 	lsl.w	r3, r2, r3
 80099a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	43db      	mvns	r3, r3
 80099b4:	6939      	ldr	r1, [r7, #16]
 80099b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099ba:	4013      	ands	r3, r2
 80099bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3720      	adds	r7, #32
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	333c      	adds	r3, #60	; 0x3c
 80099e0:	3304      	adds	r3, #4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	f040 80a0 	bne.w	8009b40 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f003 0308 	and.w	r3, r3, #8
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d015      	beq.n	8009a36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4a72      	ldr	r2, [pc, #456]	; (8009bd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	f240 80dd 	bls.w	8009bce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f000 80d7 	beq.w	8009bce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a32:	6093      	str	r3, [r2, #8]
 8009a34:	e0cb      	b.n	8009bce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	f003 0320 	and.w	r3, r3, #32
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d009      	beq.n	8009a54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	2320      	movs	r3, #32
 8009a50:	6093      	str	r3, [r2, #8]
 8009a52:	e0bc      	b.n	8009bce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f040 80b7 	bne.w	8009bce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a5d      	ldr	r2, [pc, #372]	; (8009bd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d90f      	bls.n	8009a88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a84:	6093      	str	r3, [r2, #8]
 8009a86:	e0a2      	b.n	8009bce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	1a9b      	subs	r3, r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	440b      	add	r3, r1
 8009a96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	0159      	lsls	r1, r3, #5
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	440b      	add	r3, r1
 8009aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009aae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	00db      	lsls	r3, r3, #3
 8009ab8:	1a9b      	subs	r3, r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4403      	add	r3, r0
 8009abe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009ac2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009ad6:	6819      	ldr	r1, [r3, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	1a9b      	subs	r3, r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4403      	add	r3, r0
 8009ae6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4419      	add	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	4613      	mov	r3, r2
 8009af4:	00db      	lsls	r3, r3, #3
 8009af6:	1a9b      	subs	r3, r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4403      	add	r3, r0
 8009afc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b00:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d114      	bne.n	8009b32 <PCD_EP_OutXfrComplete_int+0x16a>
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	1a9b      	subs	r3, r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d108      	bne.n	8009b32 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	f003 fb83 	bl	800d238 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f005 fa2f 	bl	800ef9c <HAL_PCD_DataOutStageCallback>
 8009b3e:	e046      	b.n	8009bce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a26      	ldr	r2, [pc, #152]	; (8009bdc <PCD_EP_OutXfrComplete_int+0x214>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d124      	bne.n	8009b92 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b64:	6093      	str	r3, [r2, #8]
 8009b66:	e032      	b.n	8009bce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	015a      	lsls	r2, r3, #5
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	4413      	add	r3, r2
 8009b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2320      	movs	r3, #32
 8009b82:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f005 fa06 	bl	800ef9c <HAL_PCD_DataOutStageCallback>
 8009b90:	e01d      	b.n	8009bce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d114      	bne.n	8009bc2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	1a9b      	subs	r3, r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	440b      	add	r3, r1
 8009ba6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d108      	bne.n	8009bc2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bba:	461a      	mov	r2, r3
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	f003 fb3b 	bl	800d238 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f005 f9e7 	bl	800ef9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3718      	adds	r7, #24
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	4f54300a 	.word	0x4f54300a
 8009bdc:	4f54310a 	.word	0x4f54310a

08009be0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	333c      	adds	r3, #60	; 0x3c
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	015a      	lsls	r2, r3, #5
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4a15      	ldr	r2, [pc, #84]	; (8009c68 <PCD_EP_OutSetupPacket_int+0x88>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d90e      	bls.n	8009c34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d009      	beq.n	8009c34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f005 f99f 	bl	800ef78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a0a      	ldr	r2, [pc, #40]	; (8009c68 <PCD_EP_OutSetupPacket_int+0x88>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d90c      	bls.n	8009c5c <PCD_EP_OutSetupPacket_int+0x7c>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d108      	bne.n	8009c5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c54:	461a      	mov	r2, r3
 8009c56:	2101      	movs	r1, #1
 8009c58:	f003 faee 	bl	800d238 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	4f54300a 	.word	0x4f54300a

08009c6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d107      	bne.n	8009c9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009c8a:	883b      	ldrh	r3, [r7, #0]
 8009c8c:	0419      	lsls	r1, r3, #16
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	629a      	str	r2, [r3, #40]	; 0x28
 8009c98:	e028      	b.n	8009cec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca0:	0c1b      	lsrs	r3, r3, #16
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73fb      	strb	r3, [r7, #15]
 8009cac:	e00d      	b.n	8009cca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	3340      	adds	r3, #64	; 0x40
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	0c1b      	lsrs	r3, r3, #16
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	73fb      	strb	r3, [r7, #15]
 8009cca:	7bfa      	ldrb	r2, [r7, #15]
 8009ccc:	78fb      	ldrb	r3, [r7, #3]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d3ec      	bcc.n	8009cae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009cd4:	883b      	ldrh	r3, [r7, #0]
 8009cd6:	0418      	lsls	r0, r3, #16
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6819      	ldr	r1, [r3, #0]
 8009cdc:	78fb      	ldrb	r3, [r7, #3]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	4302      	orrs	r2, r0
 8009ce4:	3340      	adds	r3, #64	; 0x40
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	440b      	add	r3, r1
 8009cea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009cfa:	b480      	push	{r7}
 8009cfc:	b083      	sub	sp, #12
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	887a      	ldrh	r2, [r7, #2]
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e25b      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d075      	beq.n	8009e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d52:	4ba3      	ldr	r3, [pc, #652]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009d54:	689b      	ldr	r3, [r3, #8]
 8009d56:	f003 030c 	and.w	r3, r3, #12
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	d00c      	beq.n	8009d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d5e:	4ba0      	ldr	r3, [pc, #640]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d66:	2b08      	cmp	r3, #8
 8009d68:	d112      	bne.n	8009d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d6a:	4b9d      	ldr	r3, [pc, #628]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d76:	d10b      	bne.n	8009d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d78:	4b99      	ldr	r3, [pc, #612]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d05b      	beq.n	8009e3c <HAL_RCC_OscConfig+0x108>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d157      	bne.n	8009e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e236      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d98:	d106      	bne.n	8009da8 <HAL_RCC_OscConfig+0x74>
 8009d9a:	4b91      	ldr	r3, [pc, #580]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a90      	ldr	r2, [pc, #576]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	e01d      	b.n	8009de4 <HAL_RCC_OscConfig+0xb0>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009db0:	d10c      	bne.n	8009dcc <HAL_RCC_OscConfig+0x98>
 8009db2:	4b8b      	ldr	r3, [pc, #556]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a8a      	ldr	r2, [pc, #552]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	4b88      	ldr	r3, [pc, #544]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a87      	ldr	r2, [pc, #540]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	e00b      	b.n	8009de4 <HAL_RCC_OscConfig+0xb0>
 8009dcc:	4b84      	ldr	r3, [pc, #528]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a83      	ldr	r2, [pc, #524]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	4b81      	ldr	r3, [pc, #516]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a80      	ldr	r2, [pc, #512]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d013      	beq.n	8009e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dec:	f7fb faa0 	bl	8005330 <HAL_GetTick>
 8009df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009df2:	e008      	b.n	8009e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009df4:	f7fb fa9c 	bl	8005330 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b64      	cmp	r3, #100	; 0x64
 8009e00:	d901      	bls.n	8009e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e1fb      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e06:	4b76      	ldr	r3, [pc, #472]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0f0      	beq.n	8009df4 <HAL_RCC_OscConfig+0xc0>
 8009e12:	e014      	b.n	8009e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e14:	f7fb fa8c 	bl	8005330 <HAL_GetTick>
 8009e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e1a:	e008      	b.n	8009e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e1c:	f7fb fa88 	bl	8005330 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	2b64      	cmp	r3, #100	; 0x64
 8009e28:	d901      	bls.n	8009e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e1e7      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e2e:	4b6c      	ldr	r3, [pc, #432]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f0      	bne.n	8009e1c <HAL_RCC_OscConfig+0xe8>
 8009e3a:	e000      	b.n	8009e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d063      	beq.n	8009f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e4a:	4b65      	ldr	r3, [pc, #404]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e4c:	689b      	ldr	r3, [r3, #8]
 8009e4e:	f003 030c 	and.w	r3, r3, #12
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00b      	beq.n	8009e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e56:	4b62      	ldr	r3, [pc, #392]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e5e:	2b08      	cmp	r3, #8
 8009e60:	d11c      	bne.n	8009e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e62:	4b5f      	ldr	r3, [pc, #380]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d116      	bne.n	8009e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e6e:	4b5c      	ldr	r3, [pc, #368]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <HAL_RCC_OscConfig+0x152>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d001      	beq.n	8009e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e1bb      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e86:	4b56      	ldr	r3, [pc, #344]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	4952      	ldr	r1, [pc, #328]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e9a:	e03a      	b.n	8009f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d020      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ea4:	4b4f      	ldr	r3, [pc, #316]	; (8009fe4 <HAL_RCC_OscConfig+0x2b0>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eaa:	f7fb fa41 	bl	8005330 <HAL_GetTick>
 8009eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eb0:	e008      	b.n	8009ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009eb2:	f7fb fa3d 	bl	8005330 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d901      	bls.n	8009ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e19c      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ec4:	4b46      	ldr	r3, [pc, #280]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d0f0      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed0:	4b43      	ldr	r3, [pc, #268]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	4940      	ldr	r1, [pc, #256]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	600b      	str	r3, [r1, #0]
 8009ee4:	e015      	b.n	8009f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ee6:	4b3f      	ldr	r3, [pc, #252]	; (8009fe4 <HAL_RCC_OscConfig+0x2b0>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eec:	f7fb fa20 	bl	8005330 <HAL_GetTick>
 8009ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ef2:	e008      	b.n	8009f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ef4:	f7fb fa1c 	bl	8005330 <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e17b      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f06:	4b36      	ldr	r3, [pc, #216]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1f0      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d030      	beq.n	8009f80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d016      	beq.n	8009f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f26:	4b30      	ldr	r3, [pc, #192]	; (8009fe8 <HAL_RCC_OscConfig+0x2b4>)
 8009f28:	2201      	movs	r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f2c:	f7fb fa00 	bl	8005330 <HAL_GetTick>
 8009f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f32:	e008      	b.n	8009f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f34:	f7fb f9fc 	bl	8005330 <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d901      	bls.n	8009f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e15b      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f46:	4b26      	ldr	r3, [pc, #152]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0f0      	beq.n	8009f34 <HAL_RCC_OscConfig+0x200>
 8009f52:	e015      	b.n	8009f80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f54:	4b24      	ldr	r3, [pc, #144]	; (8009fe8 <HAL_RCC_OscConfig+0x2b4>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f5a:	f7fb f9e9 	bl	8005330 <HAL_GetTick>
 8009f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f60:	e008      	b.n	8009f74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f62:	f7fb f9e5 	bl	8005330 <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d901      	bls.n	8009f74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e144      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f74:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1f0      	bne.n	8009f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0304 	and.w	r3, r3, #4
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 80a0 	beq.w	800a0ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009f92:	4b13      	ldr	r3, [pc, #76]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10f      	bne.n	8009fbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60bb      	str	r3, [r7, #8]
 8009fa2:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	4a0e      	ldr	r2, [pc, #56]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fac:	6413      	str	r3, [r2, #64]	; 0x40
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <HAL_RCC_OscConfig+0x2ac>)
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb6:	60bb      	str	r3, [r7, #8]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <HAL_RCC_OscConfig+0x2b8>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d121      	bne.n	800a00e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009fca:	4b08      	ldr	r3, [pc, #32]	; (8009fec <HAL_RCC_OscConfig+0x2b8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a07      	ldr	r2, [pc, #28]	; (8009fec <HAL_RCC_OscConfig+0x2b8>)
 8009fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009fd6:	f7fb f9ab 	bl	8005330 <HAL_GetTick>
 8009fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fdc:	e011      	b.n	800a002 <HAL_RCC_OscConfig+0x2ce>
 8009fde:	bf00      	nop
 8009fe0:	40023800 	.word	0x40023800
 8009fe4:	42470000 	.word	0x42470000
 8009fe8:	42470e80 	.word	0x42470e80
 8009fec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ff0:	f7fb f99e 	bl	8005330 <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e0fd      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a002:	4b81      	ldr	r3, [pc, #516]	; (800a208 <HAL_RCC_OscConfig+0x4d4>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d106      	bne.n	800a024 <HAL_RCC_OscConfig+0x2f0>
 800a016:	4b7d      	ldr	r3, [pc, #500]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01a:	4a7c      	ldr	r2, [pc, #496]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a01c:	f043 0301 	orr.w	r3, r3, #1
 800a020:	6713      	str	r3, [r2, #112]	; 0x70
 800a022:	e01c      	b.n	800a05e <HAL_RCC_OscConfig+0x32a>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d10c      	bne.n	800a046 <HAL_RCC_OscConfig+0x312>
 800a02c:	4b77      	ldr	r3, [pc, #476]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a030:	4a76      	ldr	r2, [pc, #472]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a032:	f043 0304 	orr.w	r3, r3, #4
 800a036:	6713      	str	r3, [r2, #112]	; 0x70
 800a038:	4b74      	ldr	r3, [pc, #464]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03c:	4a73      	ldr	r2, [pc, #460]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a03e:	f043 0301 	orr.w	r3, r3, #1
 800a042:	6713      	str	r3, [r2, #112]	; 0x70
 800a044:	e00b      	b.n	800a05e <HAL_RCC_OscConfig+0x32a>
 800a046:	4b71      	ldr	r3, [pc, #452]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04a:	4a70      	ldr	r2, [pc, #448]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a04c:	f023 0301 	bic.w	r3, r3, #1
 800a050:	6713      	str	r3, [r2, #112]	; 0x70
 800a052:	4b6e      	ldr	r3, [pc, #440]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a056:	4a6d      	ldr	r2, [pc, #436]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a058:	f023 0304 	bic.w	r3, r3, #4
 800a05c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d015      	beq.n	800a092 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a066:	f7fb f963 	bl	8005330 <HAL_GetTick>
 800a06a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a06c:	e00a      	b.n	800a084 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a06e:	f7fb f95f 	bl	8005330 <HAL_GetTick>
 800a072:	4602      	mov	r2, r0
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	f241 3288 	movw	r2, #5000	; 0x1388
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d901      	bls.n	800a084 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e0bc      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a084:	4b61      	ldr	r3, [pc, #388]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0ee      	beq.n	800a06e <HAL_RCC_OscConfig+0x33a>
 800a090:	e014      	b.n	800a0bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a092:	f7fb f94d 	bl	8005330 <HAL_GetTick>
 800a096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a098:	e00a      	b.n	800a0b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a09a:	f7fb f949 	bl	8005330 <HAL_GetTick>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d901      	bls.n	800a0b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e0a6      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0b0:	4b56      	ldr	r3, [pc, #344]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b4:	f003 0302 	and.w	r3, r3, #2
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1ee      	bne.n	800a09a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d105      	bne.n	800a0ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0c2:	4b52      	ldr	r3, [pc, #328]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	4a51      	ldr	r2, [pc, #324]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a0c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 8092 	beq.w	800a1fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a0d8:	4b4c      	ldr	r3, [pc, #304]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f003 030c 	and.w	r3, r3, #12
 800a0e0:	2b08      	cmp	r3, #8
 800a0e2:	d05c      	beq.n	800a19e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	699b      	ldr	r3, [r3, #24]
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d141      	bne.n	800a170 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0ec:	4b48      	ldr	r3, [pc, #288]	; (800a210 <HAL_RCC_OscConfig+0x4dc>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0f2:	f7fb f91d 	bl	8005330 <HAL_GetTick>
 800a0f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a0f8:	e008      	b.n	800a10c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0fa:	f7fb f919 	bl	8005330 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d901      	bls.n	800a10c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e078      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a10c:	4b3f      	ldr	r3, [pc, #252]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1f0      	bne.n	800a0fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	431a      	orrs	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	019b      	lsls	r3, r3, #6
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12e:	085b      	lsrs	r3, r3, #1
 800a130:	3b01      	subs	r3, #1
 800a132:	041b      	lsls	r3, r3, #16
 800a134:	431a      	orrs	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13a:	061b      	lsls	r3, r3, #24
 800a13c:	4933      	ldr	r1, [pc, #204]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a142:	4b33      	ldr	r3, [pc, #204]	; (800a210 <HAL_RCC_OscConfig+0x4dc>)
 800a144:	2201      	movs	r2, #1
 800a146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a148:	f7fb f8f2 	bl	8005330 <HAL_GetTick>
 800a14c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a14e:	e008      	b.n	800a162 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a150:	f7fb f8ee 	bl	8005330 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d901      	bls.n	800a162 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e04d      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a162:	4b2a      	ldr	r3, [pc, #168]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0f0      	beq.n	800a150 <HAL_RCC_OscConfig+0x41c>
 800a16e:	e045      	b.n	800a1fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a170:	4b27      	ldr	r3, [pc, #156]	; (800a210 <HAL_RCC_OscConfig+0x4dc>)
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a176:	f7fb f8db 	bl	8005330 <HAL_GetTick>
 800a17a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a17c:	e008      	b.n	800a190 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a17e:	f7fb f8d7 	bl	8005330 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d901      	bls.n	800a190 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e036      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a190:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1f0      	bne.n	800a17e <HAL_RCC_OscConfig+0x44a>
 800a19c:	e02e      	b.n	800a1fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d101      	bne.n	800a1aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e029      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a1aa:	4b18      	ldr	r3, [pc, #96]	; (800a20c <HAL_RCC_OscConfig+0x4d8>)
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d11c      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d115      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d10d      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d106      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d001      	beq.n	800a1fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	40007000 	.word	0x40007000
 800a20c:	40023800 	.word	0x40023800
 800a210:	42470060 	.word	0x42470060

0800a214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e0cc      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a228:	4b68      	ldr	r3, [pc, #416]	; (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 030f 	and.w	r3, r3, #15
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	429a      	cmp	r2, r3
 800a234:	d90c      	bls.n	800a250 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a236:	4b65      	ldr	r3, [pc, #404]	; (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	b2d2      	uxtb	r2, r2
 800a23c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a23e:	4b63      	ldr	r3, [pc, #396]	; (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d001      	beq.n	800a250 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e0b8      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0302 	and.w	r3, r3, #2
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d020      	beq.n	800a29e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a268:	4b59      	ldr	r3, [pc, #356]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	4a58      	ldr	r2, [pc, #352]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a26e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a272:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d005      	beq.n	800a28c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a280:	4b53      	ldr	r3, [pc, #332]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	4a52      	ldr	r2, [pc, #328]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a286:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a28a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a28c:	4b50      	ldr	r3, [pc, #320]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	494d      	ldr	r1, [pc, #308]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d044      	beq.n	800a334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d107      	bne.n	800a2c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2b2:	4b47      	ldr	r3, [pc, #284]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d119      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e07f      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d003      	beq.n	800a2d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d107      	bne.n	800a2e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a2d2:	4b3f      	ldr	r3, [pc, #252]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d109      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e06f      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2e2:	4b3b      	ldr	r3, [pc, #236]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0302 	and.w	r3, r3, #2
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e067      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a2f2:	4b37      	ldr	r3, [pc, #220]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f023 0203 	bic.w	r2, r3, #3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	4934      	ldr	r1, [pc, #208]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a300:	4313      	orrs	r3, r2
 800a302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a304:	f7fb f814 	bl	8005330 <HAL_GetTick>
 800a308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a30a:	e00a      	b.n	800a322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a30c:	f7fb f810 	bl	8005330 <HAL_GetTick>
 800a310:	4602      	mov	r2, r0
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	f241 3288 	movw	r2, #5000	; 0x1388
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e04f      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a322:	4b2b      	ldr	r3, [pc, #172]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f003 020c 	and.w	r2, r3, #12
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	429a      	cmp	r2, r3
 800a332:	d1eb      	bne.n	800a30c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a334:	4b25      	ldr	r3, [pc, #148]	; (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 030f 	and.w	r3, r3, #15
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d20c      	bcs.n	800a35c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a342:	4b22      	ldr	r3, [pc, #136]	; (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	b2d2      	uxtb	r2, r2
 800a348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a34a:	4b20      	ldr	r3, [pc, #128]	; (800a3cc <HAL_RCC_ClockConfig+0x1b8>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d001      	beq.n	800a35c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e032      	b.n	800a3c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b00      	cmp	r3, #0
 800a366:	d008      	beq.n	800a37a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a368:	4b19      	ldr	r3, [pc, #100]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	4916      	ldr	r1, [pc, #88]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a376:	4313      	orrs	r3, r2
 800a378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	d009      	beq.n	800a39a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a386:	4b12      	ldr	r3, [pc, #72]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	490e      	ldr	r1, [pc, #56]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a396:	4313      	orrs	r3, r2
 800a398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a39a:	f000 f821 	bl	800a3e0 <HAL_RCC_GetSysClockFreq>
 800a39e:	4601      	mov	r1, r0
 800a3a0:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	091b      	lsrs	r3, r3, #4
 800a3a6:	f003 030f 	and.w	r3, r3, #15
 800a3aa:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <HAL_RCC_ClockConfig+0x1c0>)
 800a3ac:	5cd3      	ldrb	r3, [r2, r3]
 800a3ae:	fa21 f303 	lsr.w	r3, r1, r3
 800a3b2:	4a09      	ldr	r2, [pc, #36]	; (800a3d8 <HAL_RCC_ClockConfig+0x1c4>)
 800a3b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <HAL_RCC_ClockConfig+0x1c8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fa ff74 	bl	80052a8 <HAL_InitTick>

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	40023c00 	.word	0x40023c00
 800a3d0:	40023800 	.word	0x40023800
 800a3d4:	080123f4 	.word	0x080123f4
 800a3d8:	20000044 	.word	0x20000044
 800a3dc:	2000004c 	.word	0x2000004c

0800a3e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	607b      	str	r3, [r7, #4]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3f6:	4b63      	ldr	r3, [pc, #396]	; (800a584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	f003 030c 	and.w	r3, r3, #12
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d007      	beq.n	800a412 <HAL_RCC_GetSysClockFreq+0x32>
 800a402:	2b08      	cmp	r3, #8
 800a404:	d008      	beq.n	800a418 <HAL_RCC_GetSysClockFreq+0x38>
 800a406:	2b00      	cmp	r3, #0
 800a408:	f040 80b4 	bne.w	800a574 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a40c:	4b5e      	ldr	r3, [pc, #376]	; (800a588 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a40e:	60bb      	str	r3, [r7, #8]
       break;
 800a410:	e0b3      	b.n	800a57a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a412:	4b5d      	ldr	r3, [pc, #372]	; (800a588 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a414:	60bb      	str	r3, [r7, #8]
      break;
 800a416:	e0b0      	b.n	800a57a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a418:	4b5a      	ldr	r3, [pc, #360]	; (800a584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a420:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a422:	4b58      	ldr	r3, [pc, #352]	; (800a584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d04a      	beq.n	800a4c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a42e:	4b55      	ldr	r3, [pc, #340]	; (800a584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	099b      	lsrs	r3, r3, #6
 800a434:	f04f 0400 	mov.w	r4, #0
 800a438:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a43c:	f04f 0200 	mov.w	r2, #0
 800a440:	ea03 0501 	and.w	r5, r3, r1
 800a444:	ea04 0602 	and.w	r6, r4, r2
 800a448:	4629      	mov	r1, r5
 800a44a:	4632      	mov	r2, r6
 800a44c:	f04f 0300 	mov.w	r3, #0
 800a450:	f04f 0400 	mov.w	r4, #0
 800a454:	0154      	lsls	r4, r2, #5
 800a456:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a45a:	014b      	lsls	r3, r1, #5
 800a45c:	4619      	mov	r1, r3
 800a45e:	4622      	mov	r2, r4
 800a460:	1b49      	subs	r1, r1, r5
 800a462:	eb62 0206 	sbc.w	r2, r2, r6
 800a466:	f04f 0300 	mov.w	r3, #0
 800a46a:	f04f 0400 	mov.w	r4, #0
 800a46e:	0194      	lsls	r4, r2, #6
 800a470:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a474:	018b      	lsls	r3, r1, #6
 800a476:	1a5b      	subs	r3, r3, r1
 800a478:	eb64 0402 	sbc.w	r4, r4, r2
 800a47c:	f04f 0100 	mov.w	r1, #0
 800a480:	f04f 0200 	mov.w	r2, #0
 800a484:	00e2      	lsls	r2, r4, #3
 800a486:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a48a:	00d9      	lsls	r1, r3, #3
 800a48c:	460b      	mov	r3, r1
 800a48e:	4614      	mov	r4, r2
 800a490:	195b      	adds	r3, r3, r5
 800a492:	eb44 0406 	adc.w	r4, r4, r6
 800a496:	f04f 0100 	mov.w	r1, #0
 800a49a:	f04f 0200 	mov.w	r2, #0
 800a49e:	02a2      	lsls	r2, r4, #10
 800a4a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a4a4:	0299      	lsls	r1, r3, #10
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f04f 0400 	mov.w	r4, #0
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	f7f6 fd24 	bl	8000f04 <__aeabi_uldivmod>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	60fb      	str	r3, [r7, #12]
 800a4c2:	e049      	b.n	800a558 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4c4:	4b2f      	ldr	r3, [pc, #188]	; (800a584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	099b      	lsrs	r3, r3, #6
 800a4ca:	f04f 0400 	mov.w	r4, #0
 800a4ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a4d2:	f04f 0200 	mov.w	r2, #0
 800a4d6:	ea03 0501 	and.w	r5, r3, r1
 800a4da:	ea04 0602 	and.w	r6, r4, r2
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	f04f 0300 	mov.w	r3, #0
 800a4e6:	f04f 0400 	mov.w	r4, #0
 800a4ea:	0154      	lsls	r4, r2, #5
 800a4ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a4f0:	014b      	lsls	r3, r1, #5
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4622      	mov	r2, r4
 800a4f6:	1b49      	subs	r1, r1, r5
 800a4f8:	eb62 0206 	sbc.w	r2, r2, r6
 800a4fc:	f04f 0300 	mov.w	r3, #0
 800a500:	f04f 0400 	mov.w	r4, #0
 800a504:	0194      	lsls	r4, r2, #6
 800a506:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a50a:	018b      	lsls	r3, r1, #6
 800a50c:	1a5b      	subs	r3, r3, r1
 800a50e:	eb64 0402 	sbc.w	r4, r4, r2
 800a512:	f04f 0100 	mov.w	r1, #0
 800a516:	f04f 0200 	mov.w	r2, #0
 800a51a:	00e2      	lsls	r2, r4, #3
 800a51c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a520:	00d9      	lsls	r1, r3, #3
 800a522:	460b      	mov	r3, r1
 800a524:	4614      	mov	r4, r2
 800a526:	195b      	adds	r3, r3, r5
 800a528:	eb44 0406 	adc.w	r4, r4, r6
 800a52c:	f04f 0100 	mov.w	r1, #0
 800a530:	f04f 0200 	mov.w	r2, #0
 800a534:	02a2      	lsls	r2, r4, #10
 800a536:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a53a:	0299      	lsls	r1, r3, #10
 800a53c:	460b      	mov	r3, r1
 800a53e:	4614      	mov	r4, r2
 800a540:	4618      	mov	r0, r3
 800a542:	4621      	mov	r1, r4
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f04f 0400 	mov.w	r4, #0
 800a54a:	461a      	mov	r2, r3
 800a54c:	4623      	mov	r3, r4
 800a54e:	f7f6 fcd9 	bl	8000f04 <__aeabi_uldivmod>
 800a552:	4603      	mov	r3, r0
 800a554:	460c      	mov	r4, r1
 800a556:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a558:	4b0a      	ldr	r3, [pc, #40]	; (800a584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	0c1b      	lsrs	r3, r3, #16
 800a55e:	f003 0303 	and.w	r3, r3, #3
 800a562:	3301      	adds	r3, #1
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a570:	60bb      	str	r3, [r7, #8]
      break;
 800a572:	e002      	b.n	800a57a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a574:	4b04      	ldr	r3, [pc, #16]	; (800a588 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a576:	60bb      	str	r3, [r7, #8]
      break;
 800a578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a57a:	68bb      	ldr	r3, [r7, #8]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a584:	40023800 	.word	0x40023800
 800a588:	00f42400 	.word	0x00f42400

0800a58c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a590:	4b03      	ldr	r3, [pc, #12]	; (800a5a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a592:	681b      	ldr	r3, [r3, #0]
}
 800a594:	4618      	mov	r0, r3
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20000044 	.word	0x20000044

0800a5a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a5a8:	f7ff fff0 	bl	800a58c <HAL_RCC_GetHCLKFreq>
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	0a9b      	lsrs	r3, r3, #10
 800a5b4:	f003 0307 	and.w	r3, r3, #7
 800a5b8:	4a03      	ldr	r2, [pc, #12]	; (800a5c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5ba:	5cd3      	ldrb	r3, [r2, r3]
 800a5bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	40023800 	.word	0x40023800
 800a5c8:	08012404 	.word	0x08012404

0800a5cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d105      	bne.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d035      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a5f4:	4b62      	ldr	r3, [pc, #392]	; (800a780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a5fa:	f7fa fe99 	bl	8005330 <HAL_GetTick>
 800a5fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a600:	e008      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a602:	f7fa fe95 	bl	8005330 <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d901      	bls.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e0b0      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a614:	4b5b      	ldr	r3, [pc, #364]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f0      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	019a      	lsls	r2, r3, #6
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	071b      	lsls	r3, r3, #28
 800a62c:	4955      	ldr	r1, [pc, #340]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a634:	4b52      	ldr	r3, [pc, #328]	; (800a780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a636:	2201      	movs	r2, #1
 800a638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a63a:	f7fa fe79 	bl	8005330 <HAL_GetTick>
 800a63e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a640:	e008      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a642:	f7fa fe75 	bl	8005330 <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d901      	bls.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e090      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a654:	4b4b      	ldr	r3, [pc, #300]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0f0      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0302 	and.w	r3, r3, #2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f000 8083 	beq.w	800a774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	4b44      	ldr	r3, [pc, #272]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	4a43      	ldr	r2, [pc, #268]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a67c:	6413      	str	r3, [r2, #64]	; 0x40
 800a67e:	4b41      	ldr	r3, [pc, #260]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a686:	60fb      	str	r3, [r7, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a68a:	4b3f      	ldr	r3, [pc, #252]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a3e      	ldr	r2, [pc, #248]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a696:	f7fa fe4b 	bl	8005330 <HAL_GetTick>
 800a69a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a69c:	e008      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a69e:	f7fa fe47 	bl	8005330 <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d901      	bls.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a6ac:	2303      	movs	r3, #3
 800a6ae:	e062      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a6b0:	4b35      	ldr	r3, [pc, #212]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d0f0      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a6bc:	4b31      	ldr	r3, [pc, #196]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d02f      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d028      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6da:	4b2a      	ldr	r3, [pc, #168]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a6e4:	4b29      	ldr	r3, [pc, #164]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a6ea:	4b28      	ldr	r3, [pc, #160]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a6f0:	4a24      	ldr	r2, [pc, #144]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a6f6:	4b23      	ldr	r3, [pc, #140]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fa:	f003 0301 	and.w	r3, r3, #1
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d114      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a702:	f7fa fe15 	bl	8005330 <HAL_GetTick>
 800a706:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a708:	e00a      	b.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a70a:	f7fa fe11 	bl	8005330 <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	f241 3288 	movw	r2, #5000	; 0x1388
 800a718:	4293      	cmp	r3, r2
 800a71a:	d901      	bls.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e02a      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a720:	4b18      	ldr	r3, [pc, #96]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a724:	f003 0302 	and.w	r3, r3, #2
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0ee      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a738:	d10d      	bne.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a74a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a74e:	490d      	ldr	r1, [pc, #52]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a750:	4313      	orrs	r3, r2
 800a752:	608b      	str	r3, [r1, #8]
 800a754:	e005      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a756:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	4a0a      	ldr	r2, [pc, #40]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a75c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a760:	6093      	str	r3, [r2, #8]
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a76e:	4905      	ldr	r1, [pc, #20]	; (800a784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a770:	4313      	orrs	r3, r2
 800a772:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	42470068 	.word	0x42470068
 800a784:	40023800 	.word	0x40023800
 800a788:	40007000 	.word	0x40007000
 800a78c:	42470e40 	.word	0x42470e40

0800a790 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e083      	b.n	800a8aa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	7f5b      	ldrb	r3, [r3, #29]
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d105      	bne.n	800a7b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7f9 fbd8 	bl	8003f68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	22ca      	movs	r2, #202	; 0xca
 800a7c4:	625a      	str	r2, [r3, #36]	; 0x24
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2253      	movs	r2, #83	; 0x53
 800a7cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f897 	bl	800a902 <RTC_EnterInitMode>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d008      	beq.n	800a7ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	22ff      	movs	r2, #255	; 0xff
 800a7e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2204      	movs	r2, #4
 800a7e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e05e      	b.n	800a8aa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	6812      	ldr	r2, [r2, #0]
 800a7f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6899      	ldr	r1, [r3, #8]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	431a      	orrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	431a      	orrs	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	68d2      	ldr	r2, [r2, #12]
 800a826:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6919      	ldr	r1, [r3, #16]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	041a      	lsls	r2, r3, #16
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a84a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10e      	bne.n	800a878 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f829 	bl	800a8b2 <HAL_RTC_WaitForSynchro>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d008      	beq.n	800a878 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	22ff      	movs	r2, #255	; 0xff
 800a86c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2204      	movs	r2, #4
 800a872:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e018      	b.n	800a8aa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a886:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699a      	ldr	r2, [r3, #24]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	22ff      	movs	r2, #255	; 0xff
 800a8a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
  }
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68da      	ldr	r2, [r3, #12]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a8cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8ce:	f7fa fd2f 	bl	8005330 <HAL_GetTick>
 800a8d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a8d4:	e009      	b.n	800a8ea <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8d6:	f7fa fd2b 	bl	8005330 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8e4:	d901      	bls.n	800a8ea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e007      	b.n	800a8fa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f003 0320 	and.w	r3, r3, #32
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0ee      	beq.n	800a8d6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d119      	bne.n	800a950 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f04f 32ff 	mov.w	r2, #4294967295
 800a924:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a926:	f7fa fd03 	bl	8005330 <HAL_GetTick>
 800a92a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a92c:	e009      	b.n	800a942 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a92e:	f7fa fcff 	bl	8005330 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a93c:	d901      	bls.n	800a942 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e007      	b.n	800a952 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0ee      	beq.n	800a92e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b082      	sub	sp, #8
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e01d      	b.n	800a9a8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d106      	bne.n	800a986 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7fa fb3f 	bl	8005004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2202      	movs	r2, #2
 800a98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3304      	adds	r3, #4
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f000 fcaf 	bl	800b2fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68da      	ldr	r2, [r3, #12]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0201 	orr.w	r2, r2, #1
 800a9c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f003 0307 	and.w	r3, r3, #7
 800a9d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b06      	cmp	r3, #6
 800a9d8:	d007      	beq.n	800a9ea <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f042 0201 	orr.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e01d      	b.n	800aa46 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d106      	bne.n	800aa24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7fa face 	bl	8004fc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2202      	movs	r2, #2
 800aa28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3304      	adds	r3, #4
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f000 fc60 	bl	800b2fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f001 f85e 	bl	800bb24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a15      	ldr	r2, [pc, #84]	; (800aac4 <HAL_TIM_PWM_Start+0x74>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d004      	beq.n	800aa7c <HAL_TIM_PWM_Start+0x2c>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <HAL_TIM_PWM_Start+0x78>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d101      	bne.n	800aa80 <HAL_TIM_PWM_Start+0x30>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e000      	b.n	800aa82 <HAL_TIM_PWM_Start+0x32>
 800aa80:	2300      	movs	r3, #0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d007      	beq.n	800aa96 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2b06      	cmp	r3, #6
 800aaa6:	d007      	beq.n	800aab8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f042 0201 	orr.w	r2, r2, #1
 800aab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	40010000 	.word	0x40010000
 800aac8:	40010400 	.word	0x40010400

0800aacc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	e01d      	b.n	800ab1a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f815 	bl	800ab22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2202      	movs	r2, #2
 800aafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	3304      	adds	r3, #4
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4610      	mov	r0, r2
 800ab0c:	f000 fbf6 	bl	800b2fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ab2a:	bf00      	nop
 800ab2c:	370c      	adds	r7, #12
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
	...

0800ab38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b0c      	cmp	r3, #12
 800ab46:	d841      	bhi.n	800abcc <HAL_TIM_IC_Start_IT+0x94>
 800ab48:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <HAL_TIM_IC_Start_IT+0x18>)
 800ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4e:	bf00      	nop
 800ab50:	0800ab85 	.word	0x0800ab85
 800ab54:	0800abcd 	.word	0x0800abcd
 800ab58:	0800abcd 	.word	0x0800abcd
 800ab5c:	0800abcd 	.word	0x0800abcd
 800ab60:	0800ab97 	.word	0x0800ab97
 800ab64:	0800abcd 	.word	0x0800abcd
 800ab68:	0800abcd 	.word	0x0800abcd
 800ab6c:	0800abcd 	.word	0x0800abcd
 800ab70:	0800aba9 	.word	0x0800aba9
 800ab74:	0800abcd 	.word	0x0800abcd
 800ab78:	0800abcd 	.word	0x0800abcd
 800ab7c:	0800abcd 	.word	0x0800abcd
 800ab80:	0800abbb 	.word	0x0800abbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f042 0202 	orr.w	r2, r2, #2
 800ab92:	60da      	str	r2, [r3, #12]
      break;
 800ab94:	e01b      	b.n	800abce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f042 0204 	orr.w	r2, r2, #4
 800aba4:	60da      	str	r2, [r3, #12]
      break;
 800aba6:	e012      	b.n	800abce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 0208 	orr.w	r2, r2, #8
 800abb6:	60da      	str	r2, [r3, #12]
      break;
 800abb8:	e009      	b.n	800abce <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68da      	ldr	r2, [r3, #12]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f042 0210 	orr.w	r2, r2, #16
 800abc8:	60da      	str	r2, [r3, #12]
      break;
 800abca:	e000      	b.n	800abce <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800abcc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2201      	movs	r2, #1
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 ffa4 	bl	800bb24 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b06      	cmp	r3, #6
 800abec:	d007      	beq.n	800abfe <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f042 0201 	orr.w	r2, r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	f003 0302 	and.w	r3, r3, #2
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d122      	bne.n	800ac64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d11b      	bne.n	800ac64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f06f 0202 	mvn.w	r2, #2
 800ac34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	f003 0303 	and.w	r3, r3, #3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7f8 ffe8 	bl	8003c20 <HAL_TIM_IC_CaptureCallback>
 800ac50:	e005      	b.n	800ac5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fb3e 	bl	800b2d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7f9 f94d 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d122      	bne.n	800acb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	d11b      	bne.n	800acb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f06f 0204 	mvn.w	r2, #4
 800ac88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7f8 ffbe 	bl	8003c20 <HAL_TIM_IC_CaptureCallback>
 800aca4:	e005      	b.n	800acb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fb14 	bl	800b2d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7f9 f923 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	f003 0308 	and.w	r3, r3, #8
 800acc2:	2b08      	cmp	r3, #8
 800acc4:	d122      	bne.n	800ad0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f003 0308 	and.w	r3, r3, #8
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	d11b      	bne.n	800ad0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f06f 0208 	mvn.w	r2, #8
 800acdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2204      	movs	r2, #4
 800ace2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7f8 ff94 	bl	8003c20 <HAL_TIM_IC_CaptureCallback>
 800acf8:	e005      	b.n	800ad06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 faea 	bl	800b2d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7f9 f8f9 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	f003 0310 	and.w	r3, r3, #16
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d122      	bne.n	800ad60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f003 0310 	and.w	r3, r3, #16
 800ad24:	2b10      	cmp	r3, #16
 800ad26:	d11b      	bne.n	800ad60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f06f 0210 	mvn.w	r2, #16
 800ad30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2208      	movs	r2, #8
 800ad36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7f8 ff6a 	bl	8003c20 <HAL_TIM_IC_CaptureCallback>
 800ad4c:	e005      	b.n	800ad5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fac0 	bl	800b2d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f7f9 f8cf 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d10e      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d107      	bne.n	800ad8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f06f 0201 	mvn.w	r2, #1
 800ad84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7f8 fffc 	bl	8003d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad96:	2b80      	cmp	r3, #128	; 0x80
 800ad98:	d10e      	bne.n	800adb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada4:	2b80      	cmp	r3, #128	; 0x80
 800ada6:	d107      	bne.n	800adb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800adb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 ffb4 	bl	800bd20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc2:	2b40      	cmp	r3, #64	; 0x40
 800adc4:	d10e      	bne.n	800ade4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add0:	2b40      	cmp	r3, #64	; 0x40
 800add2:	d107      	bne.n	800ade4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800addc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fa82 	bl	800b2e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b20      	cmp	r3, #32
 800adf0:	d10e      	bne.n	800ae10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b20      	cmp	r3, #32
 800adfe:	d107      	bne.n	800ae10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f06f 0220 	mvn.w	r2, #32
 800ae08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 ff7e 	bl	800bd0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae10:	bf00      	nop
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d101      	bne.n	800ae32 <HAL_TIM_IC_ConfigChannel+0x1a>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e08a      	b.n	800af48 <HAL_TIM_IC_ConfigChannel+0x130>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11b      	bne.n	800ae80 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	6819      	ldr	r1, [r3, #0]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	685a      	ldr	r2, [r3, #4]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f000 fca0 	bl	800b79c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	699a      	ldr	r2, [r3, #24]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f022 020c 	bic.w	r2, r2, #12
 800ae6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6999      	ldr	r1, [r3, #24]
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	619a      	str	r2, [r3, #24]
 800ae7e:	e05a      	b.n	800af36 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d11c      	bne.n	800aec0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	6819      	ldr	r1, [r3, #0]
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f000 fd24 	bl	800b8e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	699a      	ldr	r2, [r3, #24]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800aea8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	6999      	ldr	r1, [r3, #24]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	021a      	lsls	r2, r3, #8
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	619a      	str	r2, [r3, #24]
 800aebe:	e03a      	b.n	800af36 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d11b      	bne.n	800aefe <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6819      	ldr	r1, [r3, #0]
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	f000 fd71 	bl	800b9bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	69da      	ldr	r2, [r3, #28]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f022 020c 	bic.w	r2, r2, #12
 800aee8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	69d9      	ldr	r1, [r3, #28]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	61da      	str	r2, [r3, #28]
 800aefc:	e01b      	b.n	800af36 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6818      	ldr	r0, [r3, #0]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	6819      	ldr	r1, [r3, #0]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	f000 fd91 	bl	800ba34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	69da      	ldr	r2, [r3, #28]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800af20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	69d9      	ldr	r1, [r3, #28]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	021a      	lsls	r2, r3, #8
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af62:	2b01      	cmp	r3, #1
 800af64:	d101      	bne.n	800af6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800af66:	2302      	movs	r3, #2
 800af68:	e0b4      	b.n	800b0d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2202      	movs	r2, #2
 800af76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b0c      	cmp	r3, #12
 800af7e:	f200 809f 	bhi.w	800b0c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800af82:	a201      	add	r2, pc, #4	; (adr r2, 800af88 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800af84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af88:	0800afbd 	.word	0x0800afbd
 800af8c:	0800b0c1 	.word	0x0800b0c1
 800af90:	0800b0c1 	.word	0x0800b0c1
 800af94:	0800b0c1 	.word	0x0800b0c1
 800af98:	0800affd 	.word	0x0800affd
 800af9c:	0800b0c1 	.word	0x0800b0c1
 800afa0:	0800b0c1 	.word	0x0800b0c1
 800afa4:	0800b0c1 	.word	0x0800b0c1
 800afa8:	0800b03f 	.word	0x0800b03f
 800afac:	0800b0c1 	.word	0x0800b0c1
 800afb0:	0800b0c1 	.word	0x0800b0c1
 800afb4:	0800b0c1 	.word	0x0800b0c1
 800afb8:	0800b07f 	.word	0x0800b07f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fa3a 	bl	800b43c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	699a      	ldr	r2, [r3, #24]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f042 0208 	orr.w	r2, r2, #8
 800afd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	699a      	ldr	r2, [r3, #24]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f022 0204 	bic.w	r2, r2, #4
 800afe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6999      	ldr	r1, [r3, #24]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	691a      	ldr	r2, [r3, #16]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	619a      	str	r2, [r3, #24]
      break;
 800affa:	e062      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 fa8a 	bl	800b51c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	699a      	ldr	r2, [r3, #24]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	699a      	ldr	r2, [r3, #24]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	6999      	ldr	r1, [r3, #24]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	021a      	lsls	r2, r3, #8
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	619a      	str	r2, [r3, #24]
      break;
 800b03c:	e041      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68b9      	ldr	r1, [r7, #8]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 fadf 	bl	800b608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	69da      	ldr	r2, [r3, #28]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f042 0208 	orr.w	r2, r2, #8
 800b058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	69da      	ldr	r2, [r3, #28]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f022 0204 	bic.w	r2, r2, #4
 800b068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	69d9      	ldr	r1, [r3, #28]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	691a      	ldr	r2, [r3, #16]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	61da      	str	r2, [r3, #28]
      break;
 800b07c:	e021      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68b9      	ldr	r1, [r7, #8]
 800b084:	4618      	mov	r0, r3
 800b086:	f000 fb33 	bl	800b6f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69da      	ldr	r2, [r3, #28]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69da      	ldr	r2, [r3, #28]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	69d9      	ldr	r1, [r3, #28]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	021a      	lsls	r2, r3, #8
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	61da      	str	r2, [r3, #28]
      break;
 800b0be:	e000      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b0c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d101      	bne.n	800b0f4 <HAL_TIM_ConfigClockSource+0x18>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e0a6      	b.n	800b242 <HAL_TIM_ConfigClockSource+0x166>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2202      	movs	r2, #2
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b11a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b40      	cmp	r3, #64	; 0x40
 800b12a:	d067      	beq.n	800b1fc <HAL_TIM_ConfigClockSource+0x120>
 800b12c:	2b40      	cmp	r3, #64	; 0x40
 800b12e:	d80b      	bhi.n	800b148 <HAL_TIM_ConfigClockSource+0x6c>
 800b130:	2b10      	cmp	r3, #16
 800b132:	d073      	beq.n	800b21c <HAL_TIM_ConfigClockSource+0x140>
 800b134:	2b10      	cmp	r3, #16
 800b136:	d802      	bhi.n	800b13e <HAL_TIM_ConfigClockSource+0x62>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d06f      	beq.n	800b21c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b13c:	e078      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b13e:	2b20      	cmp	r3, #32
 800b140:	d06c      	beq.n	800b21c <HAL_TIM_ConfigClockSource+0x140>
 800b142:	2b30      	cmp	r3, #48	; 0x30
 800b144:	d06a      	beq.n	800b21c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b146:	e073      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b148:	2b70      	cmp	r3, #112	; 0x70
 800b14a:	d00d      	beq.n	800b168 <HAL_TIM_ConfigClockSource+0x8c>
 800b14c:	2b70      	cmp	r3, #112	; 0x70
 800b14e:	d804      	bhi.n	800b15a <HAL_TIM_ConfigClockSource+0x7e>
 800b150:	2b50      	cmp	r3, #80	; 0x50
 800b152:	d033      	beq.n	800b1bc <HAL_TIM_ConfigClockSource+0xe0>
 800b154:	2b60      	cmp	r3, #96	; 0x60
 800b156:	d041      	beq.n	800b1dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b158:	e06a      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b15a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b15e:	d066      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x152>
 800b160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b164:	d017      	beq.n	800b196 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b166:	e063      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6818      	ldr	r0, [r3, #0]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	6899      	ldr	r1, [r3, #8]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685a      	ldr	r2, [r3, #4]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f000 fcb4 	bl	800bae4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b18a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	609a      	str	r2, [r3, #8]
      break;
 800b194:	e04c      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6899      	ldr	r1, [r3, #8]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f000 fc9d 	bl	800bae4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	689a      	ldr	r2, [r3, #8]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1b8:	609a      	str	r2, [r3, #8]
      break;
 800b1ba:	e039      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6818      	ldr	r0, [r3, #0]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	6859      	ldr	r1, [r3, #4]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	f000 fb5b 	bl	800b884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2150      	movs	r1, #80	; 0x50
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 fc6a 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b1da:	e029      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	6859      	ldr	r1, [r3, #4]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f000 fbb7 	bl	800b95c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2160      	movs	r1, #96	; 0x60
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fc5a 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b1fa:	e019      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6818      	ldr	r0, [r3, #0]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	6859      	ldr	r1, [r3, #4]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	461a      	mov	r2, r3
 800b20a:	f000 fb3b 	bl	800b884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2140      	movs	r1, #64	; 0x40
 800b214:	4618      	mov	r0, r3
 800b216:	f000 fc4a 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b21a:	e009      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4619      	mov	r1, r3
 800b226:	4610      	mov	r0, r2
 800b228:	f000 fc41 	bl	800baae <TIM_ITRx_SetConfig>
      break;
 800b22c:	e000      	b.n	800b230 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b22e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
	...

0800b24c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b256:	2300      	movs	r3, #0
 800b258:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	2b0c      	cmp	r3, #12
 800b25e:	d831      	bhi.n	800b2c4 <HAL_TIM_ReadCapturedValue+0x78>
 800b260:	a201      	add	r2, pc, #4	; (adr r2, 800b268 <HAL_TIM_ReadCapturedValue+0x1c>)
 800b262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b266:	bf00      	nop
 800b268:	0800b29d 	.word	0x0800b29d
 800b26c:	0800b2c5 	.word	0x0800b2c5
 800b270:	0800b2c5 	.word	0x0800b2c5
 800b274:	0800b2c5 	.word	0x0800b2c5
 800b278:	0800b2a7 	.word	0x0800b2a7
 800b27c:	0800b2c5 	.word	0x0800b2c5
 800b280:	0800b2c5 	.word	0x0800b2c5
 800b284:	0800b2c5 	.word	0x0800b2c5
 800b288:	0800b2b1 	.word	0x0800b2b1
 800b28c:	0800b2c5 	.word	0x0800b2c5
 800b290:	0800b2c5 	.word	0x0800b2c5
 800b294:	0800b2c5 	.word	0x0800b2c5
 800b298:	0800b2bb 	.word	0x0800b2bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a2:	60fb      	str	r3, [r7, #12]

      break;
 800b2a4:	e00f      	b.n	800b2c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ac:	60fb      	str	r3, [r7, #12]

      break;
 800b2ae:	e00a      	b.n	800b2c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b6:	60fb      	str	r3, [r7, #12]

      break;
 800b2b8:	e005      	b.n	800b2c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2c0:	60fb      	str	r3, [r7, #12]

      break;
 800b2c2:	e000      	b.n	800b2c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800b2c4:	bf00      	nop
  }

  return tmpreg;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2dc:	bf00      	nop
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2f0:	bf00      	nop
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a40      	ldr	r2, [pc, #256]	; (800b410 <TIM_Base_SetConfig+0x114>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d013      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31a:	d00f      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a3d      	ldr	r2, [pc, #244]	; (800b414 <TIM_Base_SetConfig+0x118>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d00b      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a3c      	ldr	r2, [pc, #240]	; (800b418 <TIM_Base_SetConfig+0x11c>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d007      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a3b      	ldr	r2, [pc, #236]	; (800b41c <TIM_Base_SetConfig+0x120>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d003      	beq.n	800b33c <TIM_Base_SetConfig+0x40>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a3a      	ldr	r2, [pc, #232]	; (800b420 <TIM_Base_SetConfig+0x124>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d108      	bne.n	800b34e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a2f      	ldr	r2, [pc, #188]	; (800b410 <TIM_Base_SetConfig+0x114>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d02b      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b35c:	d027      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a2c      	ldr	r2, [pc, #176]	; (800b414 <TIM_Base_SetConfig+0x118>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d023      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a2b      	ldr	r2, [pc, #172]	; (800b418 <TIM_Base_SetConfig+0x11c>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d01f      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a2a      	ldr	r2, [pc, #168]	; (800b41c <TIM_Base_SetConfig+0x120>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d01b      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a29      	ldr	r2, [pc, #164]	; (800b420 <TIM_Base_SetConfig+0x124>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d017      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a28      	ldr	r2, [pc, #160]	; (800b424 <TIM_Base_SetConfig+0x128>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d013      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a27      	ldr	r2, [pc, #156]	; (800b428 <TIM_Base_SetConfig+0x12c>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d00f      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a26      	ldr	r2, [pc, #152]	; (800b42c <TIM_Base_SetConfig+0x130>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00b      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a25      	ldr	r2, [pc, #148]	; (800b430 <TIM_Base_SetConfig+0x134>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d007      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a24      	ldr	r2, [pc, #144]	; (800b434 <TIM_Base_SetConfig+0x138>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d003      	beq.n	800b3ae <TIM_Base_SetConfig+0xb2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a23      	ldr	r2, [pc, #140]	; (800b438 <TIM_Base_SetConfig+0x13c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d108      	bne.n	800b3c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	4a0a      	ldr	r2, [pc, #40]	; (800b410 <TIM_Base_SetConfig+0x114>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d003      	beq.n	800b3f4 <TIM_Base_SetConfig+0xf8>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a0c      	ldr	r2, [pc, #48]	; (800b420 <TIM_Base_SetConfig+0x124>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d103      	bne.n	800b3fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	691a      	ldr	r2, [r3, #16]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	615a      	str	r2, [r3, #20]
}
 800b402:	bf00      	nop
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	40010000 	.word	0x40010000
 800b414:	40000400 	.word	0x40000400
 800b418:	40000800 	.word	0x40000800
 800b41c:	40000c00 	.word	0x40000c00
 800b420:	40010400 	.word	0x40010400
 800b424:	40014000 	.word	0x40014000
 800b428:	40014400 	.word	0x40014400
 800b42c:	40014800 	.word	0x40014800
 800b430:	40001800 	.word	0x40001800
 800b434:	40001c00 	.word	0x40001c00
 800b438:	40002000 	.word	0x40002000

0800b43c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b087      	sub	sp, #28
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	f023 0201 	bic.w	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f023 0303 	bic.w	r3, r3, #3
 800b472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f023 0302 	bic.w	r3, r3, #2
 800b484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a20      	ldr	r2, [pc, #128]	; (800b514 <TIM_OC1_SetConfig+0xd8>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d003      	beq.n	800b4a0 <TIM_OC1_SetConfig+0x64>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a1f      	ldr	r2, [pc, #124]	; (800b518 <TIM_OC1_SetConfig+0xdc>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d10c      	bne.n	800b4ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f023 0308 	bic.w	r3, r3, #8
 800b4a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f023 0304 	bic.w	r3, r3, #4
 800b4b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a15      	ldr	r2, [pc, #84]	; (800b514 <TIM_OC1_SetConfig+0xd8>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d003      	beq.n	800b4ca <TIM_OC1_SetConfig+0x8e>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a14      	ldr	r2, [pc, #80]	; (800b518 <TIM_OC1_SetConfig+0xdc>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d111      	bne.n	800b4ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	621a      	str	r2, [r3, #32]
}
 800b508:	bf00      	nop
 800b50a:	371c      	adds	r7, #28
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	40010000 	.word	0x40010000
 800b518:	40010400 	.word	0x40010400

0800b51c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b087      	sub	sp, #28
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	f023 0210 	bic.w	r2, r3, #16
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	021b      	lsls	r3, r3, #8
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f023 0320 	bic.w	r3, r3, #32
 800b566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	011b      	lsls	r3, r3, #4
 800b56e:	697a      	ldr	r2, [r7, #20]
 800b570:	4313      	orrs	r3, r2
 800b572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a22      	ldr	r2, [pc, #136]	; (800b600 <TIM_OC2_SetConfig+0xe4>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d003      	beq.n	800b584 <TIM_OC2_SetConfig+0x68>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a21      	ldr	r2, [pc, #132]	; (800b604 <TIM_OC2_SetConfig+0xe8>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d10d      	bne.n	800b5a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b58a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	011b      	lsls	r3, r3, #4
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	4313      	orrs	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b59e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a17      	ldr	r2, [pc, #92]	; (800b600 <TIM_OC2_SetConfig+0xe4>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d003      	beq.n	800b5b0 <TIM_OC2_SetConfig+0x94>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a16      	ldr	r2, [pc, #88]	; (800b604 <TIM_OC2_SetConfig+0xe8>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d113      	bne.n	800b5d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	695b      	ldr	r3, [r3, #20]
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	693a      	ldr	r2, [r7, #16]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	621a      	str	r2, [r3, #32]
}
 800b5f2:	bf00      	nop
 800b5f4:	371c      	adds	r7, #28
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	40010000 	.word	0x40010000
 800b604:	40010400 	.word	0x40010400

0800b608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b608:	b480      	push	{r7}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a1b      	ldr	r3, [r3, #32]
 800b616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a1b      	ldr	r3, [r3, #32]
 800b622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 0303 	bic.w	r3, r3, #3
 800b63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	021b      	lsls	r3, r3, #8
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a21      	ldr	r2, [pc, #132]	; (800b6e8 <TIM_OC3_SetConfig+0xe0>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d003      	beq.n	800b66e <TIM_OC3_SetConfig+0x66>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a20      	ldr	r2, [pc, #128]	; (800b6ec <TIM_OC3_SetConfig+0xe4>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d10d      	bne.n	800b68a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	021b      	lsls	r3, r3, #8
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	4313      	orrs	r3, r2
 800b680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a16      	ldr	r2, [pc, #88]	; (800b6e8 <TIM_OC3_SetConfig+0xe0>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d003      	beq.n	800b69a <TIM_OC3_SetConfig+0x92>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a15      	ldr	r2, [pc, #84]	; (800b6ec <TIM_OC3_SetConfig+0xe4>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d113      	bne.n	800b6c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b6a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	695b      	ldr	r3, [r3, #20]
 800b6ae:	011b      	lsls	r3, r3, #4
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	011b      	lsls	r3, r3, #4
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	685a      	ldr	r2, [r3, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	621a      	str	r2, [r3, #32]
}
 800b6dc:	bf00      	nop
 800b6de:	371c      	adds	r7, #28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	40010000 	.word	0x40010000
 800b6ec:	40010400 	.word	0x40010400

0800b6f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b087      	sub	sp, #28
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a1b      	ldr	r3, [r3, #32]
 800b70a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	021b      	lsls	r3, r3, #8
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	4313      	orrs	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b73a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	031b      	lsls	r3, r3, #12
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	4313      	orrs	r3, r2
 800b746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4a12      	ldr	r2, [pc, #72]	; (800b794 <TIM_OC4_SetConfig+0xa4>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d003      	beq.n	800b758 <TIM_OC4_SetConfig+0x68>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	4a11      	ldr	r2, [pc, #68]	; (800b798 <TIM_OC4_SetConfig+0xa8>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d109      	bne.n	800b76c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b75e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	695b      	ldr	r3, [r3, #20]
 800b764:	019b      	lsls	r3, r3, #6
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	4313      	orrs	r3, r2
 800b76a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	693a      	ldr	r2, [r7, #16]
 800b784:	621a      	str	r2, [r3, #32]
}
 800b786:	bf00      	nop
 800b788:	371c      	adds	r7, #28
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	40010000 	.word	0x40010000
 800b798:	40010400 	.word	0x40010400

0800b79c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b087      	sub	sp, #28
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	f023 0201 	bic.w	r2, r3, #1
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4a28      	ldr	r2, [pc, #160]	; (800b868 <TIM_TI1_SetConfig+0xcc>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d01b      	beq.n	800b802 <TIM_TI1_SetConfig+0x66>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d0:	d017      	beq.n	800b802 <TIM_TI1_SetConfig+0x66>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4a25      	ldr	r2, [pc, #148]	; (800b86c <TIM_TI1_SetConfig+0xd0>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d013      	beq.n	800b802 <TIM_TI1_SetConfig+0x66>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	4a24      	ldr	r2, [pc, #144]	; (800b870 <TIM_TI1_SetConfig+0xd4>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00f      	beq.n	800b802 <TIM_TI1_SetConfig+0x66>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	4a23      	ldr	r2, [pc, #140]	; (800b874 <TIM_TI1_SetConfig+0xd8>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00b      	beq.n	800b802 <TIM_TI1_SetConfig+0x66>
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	4a22      	ldr	r2, [pc, #136]	; (800b878 <TIM_TI1_SetConfig+0xdc>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d007      	beq.n	800b802 <TIM_TI1_SetConfig+0x66>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	4a21      	ldr	r2, [pc, #132]	; (800b87c <TIM_TI1_SetConfig+0xe0>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d003      	beq.n	800b802 <TIM_TI1_SetConfig+0x66>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	4a20      	ldr	r2, [pc, #128]	; (800b880 <TIM_TI1_SetConfig+0xe4>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d101      	bne.n	800b806 <TIM_TI1_SetConfig+0x6a>
 800b802:	2301      	movs	r3, #1
 800b804:	e000      	b.n	800b808 <TIM_TI1_SetConfig+0x6c>
 800b806:	2300      	movs	r3, #0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d008      	beq.n	800b81e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f023 0303 	bic.w	r3, r3, #3
 800b812:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4313      	orrs	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]
 800b81c:	e003      	b.n	800b826 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f043 0301 	orr.w	r3, r3, #1
 800b824:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b82c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	b2db      	uxtb	r3, r3
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	4313      	orrs	r3, r2
 800b838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f023 030a 	bic.w	r3, r3, #10
 800b840:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	f003 030a 	and.w	r3, r3, #10
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	697a      	ldr	r2, [r7, #20]
 800b852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	40010000 	.word	0x40010000
 800b86c:	40000400 	.word	0x40000400
 800b870:	40000800 	.word	0x40000800
 800b874:	40000c00 	.word	0x40000c00
 800b878:	40010400 	.word	0x40010400
 800b87c:	40014000 	.word	0x40014000
 800b880:	40001800 	.word	0x40001800

0800b884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6a1b      	ldr	r3, [r3, #32]
 800b894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	f023 0201 	bic.w	r2, r3, #1
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f023 030a 	bic.w	r3, r3, #10
 800b8c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	693a      	ldr	r2, [r7, #16]
 800b8ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	621a      	str	r2, [r3, #32]
}
 800b8d6:	bf00      	nop
 800b8d8:	371c      	adds	r7, #28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b087      	sub	sp, #28
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	60f8      	str	r0, [r7, #12]
 800b8ea:	60b9      	str	r1, [r7, #8]
 800b8ec:	607a      	str	r2, [r7, #4]
 800b8ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
 800b8f4:	f023 0210 	bic.w	r2, r3, #16
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b90e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	021b      	lsls	r3, r3, #8
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4313      	orrs	r3, r2
 800b918:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	031b      	lsls	r3, r3, #12
 800b926:	b29b      	uxth	r3, r3
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b934:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	011b      	lsls	r3, r3, #4
 800b93a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	4313      	orrs	r3, r2
 800b942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	621a      	str	r2, [r3, #32]
}
 800b950:	bf00      	nop
 800b952:	371c      	adds	r7, #28
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	f023 0210 	bic.w	r2, r3, #16
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	699b      	ldr	r3, [r3, #24]
 800b978:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b986:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	031b      	lsls	r3, r3, #12
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	4313      	orrs	r3, r2
 800b990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b998:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	621a      	str	r2, [r3, #32]
}
 800b9b0:	bf00      	nop
 800b9b2:	371c      	adds	r7, #28
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6a1b      	ldr	r3, [r3, #32]
 800b9e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f023 0303 	bic.w	r3, r3, #3
 800b9e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ba0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	021b      	lsls	r3, r3, #8
 800ba12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	621a      	str	r2, [r3, #32]
}
 800ba28:	bf00      	nop
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	021b      	lsls	r3, r3, #8
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	031b      	lsls	r3, r3, #12
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ba86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	031b      	lsls	r3, r3, #12
 800ba8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	621a      	str	r2, [r3, #32]
}
 800baa2:	bf00      	nop
 800baa4:	371c      	adds	r7, #28
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800baae:	b480      	push	{r7}
 800bab0:	b085      	sub	sp, #20
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4313      	orrs	r3, r2
 800bacc:	f043 0307 	orr.w	r3, r3, #7
 800bad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	609a      	str	r2, [r3, #8]
}
 800bad8:	bf00      	nop
 800bada:	3714      	adds	r7, #20
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
 800baf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bafe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	021a      	lsls	r2, r3, #8
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	609a      	str	r2, [r3, #8]
}
 800bb18:	bf00      	nop
 800bb1a:	371c      	adds	r7, #28
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f003 031f 	and.w	r3, r3, #31
 800bb36:	2201      	movs	r2, #1
 800bb38:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6a1a      	ldr	r2, [r3, #32]
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	43db      	mvns	r3, r3
 800bb46:	401a      	ands	r2, r3
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a1a      	ldr	r2, [r3, #32]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f003 031f 	and.w	r3, r3, #31
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	fa01 f303 	lsl.w	r3, r1, r3
 800bb5c:	431a      	orrs	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	621a      	str	r2, [r3, #32]
}
 800bb62:	bf00      	nop
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
	...

0800bb70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e05a      	b.n	800bc3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2202      	movs	r2, #2
 800bb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a21      	ldr	r2, [pc, #132]	; (800bc4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d022      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbd4:	d01d      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a1d      	ldr	r2, [pc, #116]	; (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d018      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4a1b      	ldr	r2, [pc, #108]	; (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d013      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a1a      	ldr	r2, [pc, #104]	; (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00e      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a18      	ldr	r2, [pc, #96]	; (800bc5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d009      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a17      	ldr	r2, [pc, #92]	; (800bc60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d004      	beq.n	800bc12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a15      	ldr	r2, [pc, #84]	; (800bc64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d10c      	bne.n	800bc2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3714      	adds	r7, #20
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	40010000 	.word	0x40010000
 800bc50:	40000400 	.word	0x40000400
 800bc54:	40000800 	.word	0x40000800
 800bc58:	40000c00 	.word	0x40000c00
 800bc5c:	40010400 	.word	0x40010400
 800bc60:	40014000 	.word	0x40014000
 800bc64:	40001800 	.word	0x40001800

0800bc68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d101      	bne.n	800bc84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bc80:	2302      	movs	r3, #2
 800bc82:	e03d      	b.n	800bd00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd34:	b084      	sub	sp, #16
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b084      	sub	sp, #16
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	f107 001c 	add.w	r0, r7, #28
 800bd42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d122      	bne.n	800bd92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bd60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d105      	bne.n	800bd86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 fab4 	bl	800d2f4 <USB_CoreReset>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	73fb      	strb	r3, [r7, #15]
 800bd90:	e01a      	b.n	800bdc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f001 faa8 	bl	800d2f4 <USB_CoreReset>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	639a      	str	r2, [r3, #56]	; 0x38
 800bdba:	e005      	b.n	800bdc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d10b      	bne.n	800bde6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	f043 0206 	orr.w	r2, r3, #6
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	f043 0220 	orr.w	r2, r3, #32
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3710      	adds	r7, #16
 800bdec:	46bd      	mov	sp, r7
 800bdee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdf2:	b004      	add	sp, #16
 800bdf4:	4770      	bx	lr
	...

0800bdf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b087      	sub	sp, #28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	4613      	mov	r3, r2
 800be04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800be06:	79fb      	ldrb	r3, [r7, #7]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d165      	bne.n	800bed8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	4a41      	ldr	r2, [pc, #260]	; (800bf14 <USB_SetTurnaroundTime+0x11c>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d906      	bls.n	800be22 <USB_SetTurnaroundTime+0x2a>
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4a40      	ldr	r2, [pc, #256]	; (800bf18 <USB_SetTurnaroundTime+0x120>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d802      	bhi.n	800be22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800be1c:	230f      	movs	r3, #15
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e062      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	4a3c      	ldr	r2, [pc, #240]	; (800bf18 <USB_SetTurnaroundTime+0x120>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d906      	bls.n	800be38 <USB_SetTurnaroundTime+0x40>
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	4a3b      	ldr	r2, [pc, #236]	; (800bf1c <USB_SetTurnaroundTime+0x124>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d802      	bhi.n	800be38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800be32:	230e      	movs	r3, #14
 800be34:	617b      	str	r3, [r7, #20]
 800be36:	e057      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	4a38      	ldr	r2, [pc, #224]	; (800bf1c <USB_SetTurnaroundTime+0x124>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d906      	bls.n	800be4e <USB_SetTurnaroundTime+0x56>
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	4a37      	ldr	r2, [pc, #220]	; (800bf20 <USB_SetTurnaroundTime+0x128>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d802      	bhi.n	800be4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be48:	230d      	movs	r3, #13
 800be4a:	617b      	str	r3, [r7, #20]
 800be4c:	e04c      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4a33      	ldr	r2, [pc, #204]	; (800bf20 <USB_SetTurnaroundTime+0x128>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d906      	bls.n	800be64 <USB_SetTurnaroundTime+0x6c>
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	4a32      	ldr	r2, [pc, #200]	; (800bf24 <USB_SetTurnaroundTime+0x12c>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d802      	bhi.n	800be64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be5e:	230c      	movs	r3, #12
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	e041      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4a2f      	ldr	r2, [pc, #188]	; (800bf24 <USB_SetTurnaroundTime+0x12c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d906      	bls.n	800be7a <USB_SetTurnaroundTime+0x82>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	4a2e      	ldr	r2, [pc, #184]	; (800bf28 <USB_SetTurnaroundTime+0x130>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d802      	bhi.n	800be7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be74:	230b      	movs	r3, #11
 800be76:	617b      	str	r3, [r7, #20]
 800be78:	e036      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	4a2a      	ldr	r2, [pc, #168]	; (800bf28 <USB_SetTurnaroundTime+0x130>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d906      	bls.n	800be90 <USB_SetTurnaroundTime+0x98>
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	4a29      	ldr	r2, [pc, #164]	; (800bf2c <USB_SetTurnaroundTime+0x134>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d802      	bhi.n	800be90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800be8a:	230a      	movs	r3, #10
 800be8c:	617b      	str	r3, [r7, #20]
 800be8e:	e02b      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4a26      	ldr	r2, [pc, #152]	; (800bf2c <USB_SetTurnaroundTime+0x134>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d906      	bls.n	800bea6 <USB_SetTurnaroundTime+0xae>
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	4a25      	ldr	r2, [pc, #148]	; (800bf30 <USB_SetTurnaroundTime+0x138>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d802      	bhi.n	800bea6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bea0:	2309      	movs	r3, #9
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e020      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4a21      	ldr	r2, [pc, #132]	; (800bf30 <USB_SetTurnaroundTime+0x138>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d906      	bls.n	800bebc <USB_SetTurnaroundTime+0xc4>
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	4a20      	ldr	r2, [pc, #128]	; (800bf34 <USB_SetTurnaroundTime+0x13c>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d802      	bhi.n	800bebc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800beb6:	2308      	movs	r3, #8
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	e015      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4a1d      	ldr	r2, [pc, #116]	; (800bf34 <USB_SetTurnaroundTime+0x13c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d906      	bls.n	800bed2 <USB_SetTurnaroundTime+0xda>
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	4a1c      	ldr	r2, [pc, #112]	; (800bf38 <USB_SetTurnaroundTime+0x140>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d802      	bhi.n	800bed2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800becc:	2307      	movs	r3, #7
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	e00a      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bed2:	2306      	movs	r3, #6
 800bed4:	617b      	str	r3, [r7, #20]
 800bed6:	e007      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bede:	2309      	movs	r3, #9
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	e001      	b.n	800bee8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bee4:	2309      	movs	r3, #9
 800bee6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	029b      	lsls	r3, r3, #10
 800befc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bf00:	431a      	orrs	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	371c      	adds	r7, #28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	00d8acbf 	.word	0x00d8acbf
 800bf18:	00e4e1bf 	.word	0x00e4e1bf
 800bf1c:	00f423ff 	.word	0x00f423ff
 800bf20:	0106737f 	.word	0x0106737f
 800bf24:	011a499f 	.word	0x011a499f
 800bf28:	01312cff 	.word	0x01312cff
 800bf2c:	014ca43f 	.word	0x014ca43f
 800bf30:	016e35ff 	.word	0x016e35ff
 800bf34:	01a6ab1f 	.word	0x01a6ab1f
 800bf38:	01e847ff 	.word	0x01e847ff

0800bf3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f043 0201 	orr.w	r2, r3, #1
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f023 0201 	bic.w	r2, r3, #1
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf98:	78fb      	ldrb	r3, [r7, #3]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d106      	bne.n	800bfac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	60da      	str	r2, [r3, #12]
 800bfaa:	e00b      	b.n	800bfc4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bfac:	78fb      	ldrb	r3, [r7, #3]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d106      	bne.n	800bfc0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60da      	str	r2, [r3, #12]
 800bfbe:	e001      	b.n	800bfc4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e003      	b.n	800bfcc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bfc4:	2032      	movs	r0, #50	; 0x32
 800bfc6:	f7f9 f9bf 	bl	8005348 <HAL_Delay>

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bfe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bfee:	2300      	movs	r3, #0
 800bff0:	613b      	str	r3, [r7, #16]
 800bff2:	e009      	b.n	800c008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	3340      	adds	r3, #64	; 0x40
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	3301      	adds	r3, #1
 800c006:	613b      	str	r3, [r7, #16]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b0e      	cmp	r3, #14
 800c00c:	d9f2      	bls.n	800bff4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11c      	bne.n	800c04e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c022:	f043 0302 	orr.w	r3, r3, #2
 800c026:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c044:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
 800c04c:	e00b      	b.n	800c066 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c052:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c06c:	461a      	mov	r2, r3
 800c06e:	2300      	movs	r3, #0
 800c070:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c078:	4619      	mov	r1, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c080:	461a      	mov	r2, r3
 800c082:	680b      	ldr	r3, [r1, #0]
 800c084:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d10c      	bne.n	800c0a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d104      	bne.n	800c09c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c092:	2100      	movs	r1, #0
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f949 	bl	800c32c <USB_SetDevSpeed>
 800c09a:	e008      	b.n	800c0ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c09c:	2101      	movs	r1, #1
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f944 	bl	800c32c <USB_SetDevSpeed>
 800c0a4:	e003      	b.n	800c0ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0a6:	2103      	movs	r1, #3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f93f 	bl	800c32c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0ae:	2110      	movs	r1, #16
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f8f3 	bl	800c29c <USB_FlushTxFifo>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f911 	bl	800c2e8 <USB_FlushRxFifo>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	2300      	movs	r3, #0
 800c0da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	e043      	b.n	800c182 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	015a      	lsls	r2, r3, #5
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	4413      	add	r3, r2
 800c102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c10c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c110:	d118      	bne.n	800c144 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10a      	bne.n	800c12e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c124:	461a      	mov	r2, r3
 800c126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	e013      	b.n	800c156 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13a:	461a      	mov	r2, r3
 800c13c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	e008      	b.n	800c156 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c150:	461a      	mov	r2, r3
 800c152:	2300      	movs	r3, #0
 800c154:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	015a      	lsls	r2, r3, #5
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	4413      	add	r3, r2
 800c15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c162:	461a      	mov	r2, r3
 800c164:	2300      	movs	r3, #0
 800c166:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c174:	461a      	mov	r2, r3
 800c176:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c17a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	3301      	adds	r3, #1
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	429a      	cmp	r2, r3
 800c188:	d3b7      	bcc.n	800c0fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c18a:	2300      	movs	r3, #0
 800c18c:	613b      	str	r3, [r7, #16]
 800c18e:	e043      	b.n	800c218 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	015a      	lsls	r2, r3, #5
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1a6:	d118      	bne.n	800c1da <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10a      	bne.n	800c1c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	e013      	b.n	800c1ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	e008      	b.n	800c1ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20a:	461a      	mov	r2, r3
 800c20c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c210:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	3301      	adds	r3, #1
 800c216:	613b      	str	r3, [r7, #16]
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d3b7      	bcc.n	800c190 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c22e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c232:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c240:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	2b00      	cmp	r3, #0
 800c246:	d105      	bne.n	800c254 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	f043 0210 	orr.w	r2, r3, #16
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	699a      	ldr	r2, [r3, #24]
 800c258:	4b0f      	ldr	r3, [pc, #60]	; (800c298 <USB_DevInit+0x2c4>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c262:	2b00      	cmp	r3, #0
 800c264:	d005      	beq.n	800c272 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	f043 0208 	orr.w	r2, r3, #8
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c274:	2b01      	cmp	r3, #1
 800c276:	d107      	bne.n	800c288 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c280:	f043 0304 	orr.w	r3, r3, #4
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c288:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c294:	b004      	add	sp, #16
 800c296:	4770      	bx	lr
 800c298:	803c3800 	.word	0x803c3800

0800c29c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	019b      	lsls	r3, r3, #6
 800c2ae:	f043 0220 	orr.w	r2, r3, #32
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	4a09      	ldr	r2, [pc, #36]	; (800c2e4 <USB_FlushTxFifo+0x48>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d901      	bls.n	800c2c8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	e006      	b.n	800c2d6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	f003 0320 	and.w	r3, r3, #32
 800c2d0:	2b20      	cmp	r3, #32
 800c2d2:	d0f0      	beq.n	800c2b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	00030d40 	.word	0x00030d40

0800c2e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2210      	movs	r2, #16
 800c2f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a09      	ldr	r2, [pc, #36]	; (800c328 <USB_FlushRxFifo+0x40>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d901      	bls.n	800c30c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c308:	2303      	movs	r3, #3
 800c30a:	e006      	b.n	800c31a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	f003 0310 	and.w	r3, r3, #16
 800c314:	2b10      	cmp	r3, #16
 800c316:	d0f0      	beq.n	800c2fa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3714      	adds	r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	00030d40 	.word	0x00030d40

0800c32c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	460b      	mov	r3, r1
 800c336:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	68f9      	ldr	r1, [r7, #12]
 800c348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c34c:	4313      	orrs	r3, r2
 800c34e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c35e:	b480      	push	{r7}
 800c360:	b087      	sub	sp, #28
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f003 0306 	and.w	r3, r3, #6
 800c376:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d102      	bne.n	800c384 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c37e:	2300      	movs	r3, #0
 800c380:	75fb      	strb	r3, [r7, #23]
 800c382:	e00a      	b.n	800c39a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b02      	cmp	r3, #2
 800c388:	d002      	beq.n	800c390 <USB_GetDevSpeed+0x32>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b06      	cmp	r3, #6
 800c38e:	d102      	bne.n	800c396 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c390:	2302      	movs	r3, #2
 800c392:	75fb      	strb	r3, [r7, #23]
 800c394:	e001      	b.n	800c39a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c396:	230f      	movs	r3, #15
 800c398:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	785b      	ldrb	r3, [r3, #1]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d13a      	bne.n	800c43a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ca:	69da      	ldr	r2, [r3, #28]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	f003 030f 	and.w	r3, r3, #15
 800c3d4:	2101      	movs	r1, #1
 800c3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	68f9      	ldr	r1, [r7, #12]
 800c3de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d155      	bne.n	800c4a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	015a      	lsls	r2, r3, #5
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4413      	add	r3, r2
 800c404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	78db      	ldrb	r3, [r3, #3]
 800c416:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c418:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	059b      	lsls	r3, r3, #22
 800c41e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c420:	4313      	orrs	r3, r2
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	0151      	lsls	r1, r2, #5
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	440a      	add	r2, r1
 800c42a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c42e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c436:	6013      	str	r3, [r2, #0]
 800c438:	e036      	b.n	800c4a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c440:	69da      	ldr	r2, [r3, #28]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	2101      	movs	r1, #1
 800c44c:	fa01 f303 	lsl.w	r3, r1, r3
 800c450:	041b      	lsls	r3, r3, #16
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c458:	4313      	orrs	r3, r2
 800c45a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d11a      	bne.n	800c4a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	78db      	ldrb	r3, [r3, #3]
 800c48c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c48e:	430b      	orrs	r3, r1
 800c490:	4313      	orrs	r3, r2
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	0151      	lsls	r1, r2, #5
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	440a      	add	r2, r1
 800c49a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c49e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr
	...

0800c4b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	785b      	ldrb	r3, [r3, #1]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d161      	bne.n	800c598 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	015a      	lsls	r2, r3, #5
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4413      	add	r3, r2
 800c4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4ea:	d11f      	bne.n	800c52c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	0151      	lsls	r1, r2, #5
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	440a      	add	r2, r1
 800c502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c50a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	015a      	lsls	r2, r3, #5
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	4413      	add	r3, r2
 800c514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	0151      	lsls	r1, r2, #5
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	440a      	add	r2, r1
 800c522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c52a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	f003 030f 	and.w	r3, r3, #15
 800c53c:	2101      	movs	r1, #1
 800c53e:	fa01 f303 	lsl.w	r3, r1, r3
 800c542:	b29b      	uxth	r3, r3
 800c544:	43db      	mvns	r3, r3
 800c546:	68f9      	ldr	r1, [r7, #12]
 800c548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c54c:	4013      	ands	r3, r2
 800c54e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c556:	69da      	ldr	r2, [r3, #28]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	f003 030f 	and.w	r3, r3, #15
 800c560:	2101      	movs	r1, #1
 800c562:	fa01 f303 	lsl.w	r3, r1, r3
 800c566:	b29b      	uxth	r3, r3
 800c568:	43db      	mvns	r3, r3
 800c56a:	68f9      	ldr	r1, [r7, #12]
 800c56c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c570:	4013      	ands	r3, r2
 800c572:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	0159      	lsls	r1, r3, #5
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	440b      	add	r3, r1
 800c58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58e:	4619      	mov	r1, r3
 800c590:	4b35      	ldr	r3, [pc, #212]	; (800c668 <USB_DeactivateEndpoint+0x1b0>)
 800c592:	4013      	ands	r3, r2
 800c594:	600b      	str	r3, [r1, #0]
 800c596:	e060      	b.n	800c65a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	015a      	lsls	r2, r3, #5
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4413      	add	r3, r2
 800c5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5ae:	d11f      	bne.n	800c5f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	015a      	lsls	r2, r3, #5
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	0151      	lsls	r1, r2, #5
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	440a      	add	r2, r1
 800c5c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	0151      	lsls	r1, r2, #5
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	440a      	add	r2, r1
 800c5e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	f003 030f 	and.w	r3, r3, #15
 800c600:	2101      	movs	r1, #1
 800c602:	fa01 f303 	lsl.w	r3, r1, r3
 800c606:	041b      	lsls	r3, r3, #16
 800c608:	43db      	mvns	r3, r3
 800c60a:	68f9      	ldr	r1, [r7, #12]
 800c60c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c610:	4013      	ands	r3, r2
 800c612:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c61a:	69da      	ldr	r2, [r3, #28]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 030f 	and.w	r3, r3, #15
 800c624:	2101      	movs	r1, #1
 800c626:	fa01 f303 	lsl.w	r3, r1, r3
 800c62a:	041b      	lsls	r3, r3, #16
 800c62c:	43db      	mvns	r3, r3
 800c62e:	68f9      	ldr	r1, [r7, #12]
 800c630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c634:	4013      	ands	r3, r2
 800c636:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	015a      	lsls	r2, r3, #5
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	4413      	add	r3, r2
 800c640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	0159      	lsls	r1, r3, #5
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	440b      	add	r3, r1
 800c64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c652:	4619      	mov	r1, r3
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <USB_DeactivateEndpoint+0x1b4>)
 800c656:	4013      	ands	r3, r2
 800c658:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	ec337800 	.word	0xec337800
 800c66c:	eff37800 	.word	0xeff37800

0800c670 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08a      	sub	sp, #40	; 0x28
 800c674:	af02      	add	r7, sp, #8
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	4613      	mov	r3, r2
 800c67c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	785b      	ldrb	r3, [r3, #1]
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	f040 815c 	bne.w	800c94a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d132      	bne.n	800c700 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	015a      	lsls	r2, r3, #5
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	69ba      	ldr	r2, [r7, #24]
 800c6aa:	0151      	lsls	r1, r2, #5
 800c6ac:	69fa      	ldr	r2, [r7, #28]
 800c6ae:	440a      	add	r2, r1
 800c6b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	015a      	lsls	r2, r3, #5
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	69ba      	ldr	r2, [r7, #24]
 800c6ce:	0151      	lsls	r1, r2, #5
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	440a      	add	r2, r1
 800c6d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	69ba      	ldr	r2, [r7, #24]
 800c6ee:	0151      	lsls	r1, r2, #5
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	440a      	add	r2, r1
 800c6f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6f8:	0cdb      	lsrs	r3, r3, #19
 800c6fa:	04db      	lsls	r3, r3, #19
 800c6fc:	6113      	str	r3, [r2, #16]
 800c6fe:	e074      	b.n	800c7ea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	015a      	lsls	r2, r3, #5
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	4413      	add	r3, r2
 800c708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	69ba      	ldr	r2, [r7, #24]
 800c710:	0151      	lsls	r1, r2, #5
 800c712:	69fa      	ldr	r2, [r7, #28]
 800c714:	440a      	add	r2, r1
 800c716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71a:	0cdb      	lsrs	r3, r3, #19
 800c71c:	04db      	lsls	r3, r3, #19
 800c71e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	69ba      	ldr	r2, [r7, #24]
 800c730:	0151      	lsls	r1, r2, #5
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	440a      	add	r2, r1
 800c736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c73a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c73e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c742:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	015a      	lsls	r2, r3, #5
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c750:	691a      	ldr	r2, [r3, #16]
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	6959      	ldr	r1, [r3, #20]
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	440b      	add	r3, r1
 800c75c:	1e59      	subs	r1, r3, #1
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	fbb1 f3f3 	udiv	r3, r1, r3
 800c766:	04d9      	lsls	r1, r3, #19
 800c768:	4b9d      	ldr	r3, [pc, #628]	; (800c9e0 <USB_EPStartXfer+0x370>)
 800c76a:	400b      	ands	r3, r1
 800c76c:	69b9      	ldr	r1, [r7, #24]
 800c76e:	0148      	lsls	r0, r1, #5
 800c770:	69f9      	ldr	r1, [r7, #28]
 800c772:	4401      	add	r1, r0
 800c774:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c778:	4313      	orrs	r3, r2
 800c77a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c788:	691a      	ldr	r2, [r3, #16]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	695b      	ldr	r3, [r3, #20]
 800c78e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c792:	69b9      	ldr	r1, [r7, #24]
 800c794:	0148      	lsls	r0, r1, #5
 800c796:	69f9      	ldr	r1, [r7, #28]
 800c798:	4401      	add	r1, r0
 800c79a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	78db      	ldrb	r3, [r3, #3]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d11f      	bne.n	800c7ea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	015a      	lsls	r2, r3, #5
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	69ba      	ldr	r2, [r7, #24]
 800c7ba:	0151      	lsls	r1, r2, #5
 800c7bc:	69fa      	ldr	r2, [r7, #28]
 800c7be:	440a      	add	r2, r1
 800c7c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7c4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c7c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	015a      	lsls	r2, r3, #5
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	69ba      	ldr	r2, [r7, #24]
 800c7da:	0151      	lsls	r1, r2, #5
 800c7dc:	69fa      	ldr	r2, [r7, #28]
 800c7de:	440a      	add	r2, r1
 800c7e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c7ea:	79fb      	ldrb	r3, [r7, #7]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d14b      	bne.n	800c888 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	691b      	ldr	r3, [r3, #16]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d009      	beq.n	800c80c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	015a      	lsls	r2, r3, #5
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	4413      	add	r3, r2
 800c800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c804:	461a      	mov	r2, r3
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	78db      	ldrb	r3, [r3, #3]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d128      	bne.n	800c866 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c820:	2b00      	cmp	r3, #0
 800c822:	d110      	bne.n	800c846 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	015a      	lsls	r2, r3, #5
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	4413      	add	r3, r2
 800c82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	69ba      	ldr	r2, [r7, #24]
 800c834:	0151      	lsls	r1, r2, #5
 800c836:	69fa      	ldr	r2, [r7, #28]
 800c838:	440a      	add	r2, r1
 800c83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c83e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	e00f      	b.n	800c866 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	69ba      	ldr	r2, [r7, #24]
 800c856:	0151      	lsls	r1, r2, #5
 800c858:	69fa      	ldr	r2, [r7, #28]
 800c85a:	440a      	add	r2, r1
 800c85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c864:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	0151      	lsls	r1, r2, #5
 800c878:	69fa      	ldr	r2, [r7, #28]
 800c87a:	440a      	add	r2, r1
 800c87c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c880:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	e12f      	b.n	800cae8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	69ba      	ldr	r2, [r7, #24]
 800c898:	0151      	lsls	r1, r2, #5
 800c89a:	69fa      	ldr	r2, [r7, #28]
 800c89c:	440a      	add	r2, r1
 800c89e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c8a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	78db      	ldrb	r3, [r3, #3]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d015      	beq.n	800c8dc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	695b      	ldr	r3, [r3, #20]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 8117 	beq.w	800cae8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	f003 030f 	and.w	r3, r3, #15
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c8d0:	69f9      	ldr	r1, [r7, #28]
 800c8d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	634b      	str	r3, [r1, #52]	; 0x34
 800c8da:	e105      	b.n	800cae8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d110      	bne.n	800c90e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	015a      	lsls	r2, r3, #5
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	0151      	lsls	r1, r2, #5
 800c8fe:	69fa      	ldr	r2, [r7, #28]
 800c900:	440a      	add	r2, r1
 800c902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c90a:	6013      	str	r3, [r2, #0]
 800c90c:	e00f      	b.n	800c92e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	015a      	lsls	r2, r3, #5
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	4413      	add	r3, r2
 800c916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	0151      	lsls	r1, r2, #5
 800c920:	69fa      	ldr	r2, [r7, #28]
 800c922:	440a      	add	r2, r1
 800c924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c92c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	68d9      	ldr	r1, [r3, #12]
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	781a      	ldrb	r2, [r3, #0]
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	b298      	uxth	r0, r3
 800c93c:	79fb      	ldrb	r3, [r7, #7]
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	4603      	mov	r3, r0
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 fa2b 	bl	800cd9e <USB_WritePacket>
 800c948:	e0ce      	b.n	800cae8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	015a      	lsls	r2, r3, #5
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	4413      	add	r3, r2
 800c952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	69ba      	ldr	r2, [r7, #24]
 800c95a:	0151      	lsls	r1, r2, #5
 800c95c:	69fa      	ldr	r2, [r7, #28]
 800c95e:	440a      	add	r2, r1
 800c960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c964:	0cdb      	lsrs	r3, r3, #19
 800c966:	04db      	lsls	r3, r3, #19
 800c968:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	015a      	lsls	r2, r3, #5
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	4413      	add	r3, r2
 800c972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	69ba      	ldr	r2, [r7, #24]
 800c97a:	0151      	lsls	r1, r2, #5
 800c97c:	69fa      	ldr	r2, [r7, #28]
 800c97e:	440a      	add	r2, r1
 800c980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c984:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c988:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c98c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	695b      	ldr	r3, [r3, #20]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d126      	bne.n	800c9e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a2:	691a      	ldr	r2, [r3, #16]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ac:	69b9      	ldr	r1, [r7, #24]
 800c9ae:	0148      	lsls	r0, r1, #5
 800c9b0:	69f9      	ldr	r1, [r7, #28]
 800c9b2:	4401      	add	r1, r0
 800c9b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	69ba      	ldr	r2, [r7, #24]
 800c9cc:	0151      	lsls	r1, r2, #5
 800c9ce:	69fa      	ldr	r2, [r7, #28]
 800c9d0:	440a      	add	r2, r1
 800c9d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9da:	6113      	str	r3, [r2, #16]
 800c9dc:	e036      	b.n	800ca4c <USB_EPStartXfer+0x3dc>
 800c9de:	bf00      	nop
 800c9e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	695a      	ldr	r2, [r3, #20]
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	1e5a      	subs	r2, r3, #1
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	015a      	lsls	r2, r3, #5
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	4413      	add	r3, r2
 800ca02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca06:	691a      	ldr	r2, [r3, #16]
 800ca08:	8afb      	ldrh	r3, [r7, #22]
 800ca0a:	04d9      	lsls	r1, r3, #19
 800ca0c:	4b39      	ldr	r3, [pc, #228]	; (800caf4 <USB_EPStartXfer+0x484>)
 800ca0e:	400b      	ands	r3, r1
 800ca10:	69b9      	ldr	r1, [r7, #24]
 800ca12:	0148      	lsls	r0, r1, #5
 800ca14:	69f9      	ldr	r1, [r7, #28]
 800ca16:	4401      	add	r1, r0
 800ca18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	015a      	lsls	r2, r3, #5
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	4413      	add	r3, r2
 800ca28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2c:	691a      	ldr	r2, [r3, #16]
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	8af9      	ldrh	r1, [r7, #22]
 800ca34:	fb01 f303 	mul.w	r3, r1, r3
 800ca38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca3c:	69b9      	ldr	r1, [r7, #24]
 800ca3e:	0148      	lsls	r0, r1, #5
 800ca40:	69f9      	ldr	r1, [r7, #28]
 800ca42:	4401      	add	r1, r0
 800ca44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ca4c:	79fb      	ldrb	r3, [r7, #7]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d10d      	bne.n	800ca6e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d009      	beq.n	800ca6e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	68d9      	ldr	r1, [r3, #12]
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	015a      	lsls	r2, r3, #5
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	4413      	add	r3, r2
 800ca66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6a:	460a      	mov	r2, r1
 800ca6c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	78db      	ldrb	r3, [r3, #3]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d128      	bne.n	800cac8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d110      	bne.n	800caa8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	015a      	lsls	r2, r3, #5
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	69ba      	ldr	r2, [r7, #24]
 800ca96:	0151      	lsls	r1, r2, #5
 800ca98:	69fa      	ldr	r2, [r7, #28]
 800ca9a:	440a      	add	r2, r1
 800ca9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	e00f      	b.n	800cac8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	015a      	lsls	r2, r3, #5
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	4413      	add	r3, r2
 800cab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	0151      	lsls	r1, r2, #5
 800caba:	69fa      	ldr	r2, [r7, #28]
 800cabc:	440a      	add	r2, r1
 800cabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cac6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	015a      	lsls	r2, r3, #5
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	4413      	add	r3, r2
 800cad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	69ba      	ldr	r2, [r7, #24]
 800cad8:	0151      	lsls	r1, r2, #5
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	440a      	add	r2, r1
 800cade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3720      	adds	r7, #32
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	1ff80000 	.word	0x1ff80000

0800caf8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b087      	sub	sp, #28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	4613      	mov	r3, r2
 800cb04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	785b      	ldrb	r3, [r3, #1]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	f040 80cd 	bne.w	800ccb4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d132      	bne.n	800cb88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	0151      	lsls	r1, r2, #5
 800cb34:	697a      	ldr	r2, [r7, #20]
 800cb36:	440a      	add	r2, r1
 800cb38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	015a      	lsls	r2, r3, #5
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	0151      	lsls	r1, r2, #5
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	440a      	add	r2, r1
 800cb5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	693a      	ldr	r2, [r7, #16]
 800cb76:	0151      	lsls	r1, r2, #5
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	440a      	add	r2, r1
 800cb7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb80:	0cdb      	lsrs	r3, r3, #19
 800cb82:	04db      	lsls	r3, r3, #19
 800cb84:	6113      	str	r3, [r2, #16]
 800cb86:	e04e      	b.n	800cc26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb94:	691b      	ldr	r3, [r3, #16]
 800cb96:	693a      	ldr	r2, [r7, #16]
 800cb98:	0151      	lsls	r1, r2, #5
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	440a      	add	r2, r1
 800cb9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cba2:	0cdb      	lsrs	r3, r3, #19
 800cba4:	04db      	lsls	r3, r3, #19
 800cba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	0151      	lsls	r1, r2, #5
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	440a      	add	r2, r1
 800cbbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cbc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cbca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	695a      	ldr	r2, [r3, #20]
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d903      	bls.n	800cbe0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	689a      	ldr	r2, [r3, #8]
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	015a      	lsls	r2, r3, #5
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbec:	691b      	ldr	r3, [r3, #16]
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	0151      	lsls	r1, r2, #5
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	440a      	add	r2, r1
 800cbf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0c:	691a      	ldr	r2, [r3, #16]
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	695b      	ldr	r3, [r3, #20]
 800cc12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc16:	6939      	ldr	r1, [r7, #16]
 800cc18:	0148      	lsls	r0, r1, #5
 800cc1a:	6979      	ldr	r1, [r7, #20]
 800cc1c:	4401      	add	r1, r0
 800cc1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cc22:	4313      	orrs	r3, r2
 800cc24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc26:	79fb      	ldrb	r3, [r7, #7]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d11e      	bne.n	800cc6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d009      	beq.n	800cc48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc40:	461a      	mov	r2, r3
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	691b      	ldr	r3, [r3, #16]
 800cc46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	015a      	lsls	r2, r3, #5
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	4413      	add	r3, r2
 800cc50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	693a      	ldr	r2, [r7, #16]
 800cc58:	0151      	lsls	r1, r2, #5
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	440a      	add	r2, r1
 800cc5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	e092      	b.n	800cd90 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	0151      	lsls	r1, r2, #5
 800cc7c:	697a      	ldr	r2, [r7, #20]
 800cc7e:	440a      	add	r2, r1
 800cc80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	695b      	ldr	r3, [r3, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d07e      	beq.n	800cd90 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	f003 030f 	and.w	r3, r3, #15
 800cca2:	2101      	movs	r1, #1
 800cca4:	fa01 f303 	lsl.w	r3, r1, r3
 800cca8:	6979      	ldr	r1, [r7, #20]
 800ccaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	634b      	str	r3, [r1, #52]	; 0x34
 800ccb2:	e06d      	b.n	800cd90 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	0151      	lsls	r1, r2, #5
 800ccc6:	697a      	ldr	r2, [r7, #20]
 800ccc8:	440a      	add	r2, r1
 800ccca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccce:	0cdb      	lsrs	r3, r3, #19
 800ccd0:	04db      	lsls	r3, r3, #19
 800ccd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	015a      	lsls	r2, r3, #5
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	4413      	add	r3, r2
 800ccdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	0151      	lsls	r1, r2, #5
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	440a      	add	r2, r1
 800ccea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ccf2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ccf6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	695b      	ldr	r3, [r3, #20]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d003      	beq.n	800cd08 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	689a      	ldr	r2, [r3, #8]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	015a      	lsls	r2, r3, #5
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	4413      	add	r3, r2
 800cd10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	693a      	ldr	r2, [r7, #16]
 800cd18:	0151      	lsls	r1, r2, #5
 800cd1a:	697a      	ldr	r2, [r7, #20]
 800cd1c:	440a      	add	r2, r1
 800cd1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	015a      	lsls	r2, r3, #5
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	4413      	add	r3, r2
 800cd30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd34:	691a      	ldr	r2, [r3, #16]
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd3e:	6939      	ldr	r1, [r7, #16]
 800cd40:	0148      	lsls	r0, r1, #5
 800cd42:	6979      	ldr	r1, [r7, #20]
 800cd44:	4401      	add	r1, r0
 800cd46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cd4e:	79fb      	ldrb	r3, [r7, #7]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d10d      	bne.n	800cd70 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d009      	beq.n	800cd70 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	68d9      	ldr	r1, [r3, #12]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	015a      	lsls	r2, r3, #5
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	4413      	add	r3, r2
 800cd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd6c:	460a      	mov	r2, r1
 800cd6e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	015a      	lsls	r2, r3, #5
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	4413      	add	r3, r2
 800cd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	693a      	ldr	r2, [r7, #16]
 800cd80:	0151      	lsls	r1, r2, #5
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	440a      	add	r2, r1
 800cd86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	371c      	adds	r7, #28
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr

0800cd9e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b089      	sub	sp, #36	; 0x24
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	60f8      	str	r0, [r7, #12]
 800cda6:	60b9      	str	r1, [r7, #8]
 800cda8:	4611      	mov	r1, r2
 800cdaa:	461a      	mov	r2, r3
 800cdac:	460b      	mov	r3, r1
 800cdae:	71fb      	strb	r3, [r7, #7]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cdbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d11a      	bne.n	800cdfa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cdc4:	88bb      	ldrh	r3, [r7, #4]
 800cdc6:	3303      	adds	r3, #3
 800cdc8:	089b      	lsrs	r3, r3, #2
 800cdca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cdcc:	2300      	movs	r3, #0
 800cdce:	61bb      	str	r3, [r7, #24]
 800cdd0:	e00f      	b.n	800cdf2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	031a      	lsls	r2, r3, #12
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	4413      	add	r3, r2
 800cdda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdde:	461a      	mov	r2, r3
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	3304      	adds	r3, #4
 800cdea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	69ba      	ldr	r2, [r7, #24]
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d3eb      	bcc.n	800cdd2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3724      	adds	r7, #36	; 0x24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b089      	sub	sp, #36	; 0x24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	4613      	mov	r3, r2
 800ce14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ce1e:	88fb      	ldrh	r3, [r7, #6]
 800ce20:	3303      	adds	r3, #3
 800ce22:	089b      	lsrs	r3, r3, #2
 800ce24:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ce26:	2300      	movs	r3, #0
 800ce28:	61bb      	str	r3, [r7, #24]
 800ce2a:	e00b      	b.n	800ce44 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	3304      	adds	r3, #4
 800ce3c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	3301      	adds	r3, #1
 800ce42:	61bb      	str	r3, [r7, #24]
 800ce44:	69ba      	ldr	r2, [r7, #24]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d3ef      	bcc.n	800ce2c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ce4c:	69fb      	ldr	r3, [r7, #28]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3724      	adds	r7, #36	; 0x24
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b085      	sub	sp, #20
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	785b      	ldrb	r3, [r3, #1]
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d12c      	bne.n	800ced0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	015a      	lsls	r2, r3, #5
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	db12      	blt.n	800ceae <USB_EPSetStall+0x54>
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00f      	beq.n	800ceae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	015a      	lsls	r2, r3, #5
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	4413      	add	r3, r2
 800ce96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68ba      	ldr	r2, [r7, #8]
 800ce9e:	0151      	lsls	r1, r2, #5
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	440a      	add	r2, r1
 800cea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cea8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ceac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	015a      	lsls	r2, r3, #5
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	0151      	lsls	r1, r2, #5
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	440a      	add	r2, r1
 800cec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	e02b      	b.n	800cf28 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	015a      	lsls	r2, r3, #5
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	db12      	blt.n	800cf08 <USB_EPSetStall+0xae>
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00f      	beq.n	800cf08 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	015a      	lsls	r2, r3, #5
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	4413      	add	r3, r2
 800cef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	68ba      	ldr	r2, [r7, #8]
 800cef8:	0151      	lsls	r1, r2, #5
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	440a      	add	r2, r1
 800cefe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf06:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	015a      	lsls	r2, r3, #5
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	4413      	add	r3, r2
 800cf10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	0151      	lsls	r1, r2, #5
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	440a      	add	r2, r1
 800cf1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3714      	adds	r7, #20
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf36:	b480      	push	{r7}
 800cf38:	b085      	sub	sp, #20
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	6078      	str	r0, [r7, #4]
 800cf3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	785b      	ldrb	r3, [r3, #1]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d128      	bne.n	800cfa4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	0151      	lsls	r1, r2, #5
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	440a      	add	r2, r1
 800cf68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	78db      	ldrb	r3, [r3, #3]
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d003      	beq.n	800cf82 <USB_EPClearStall+0x4c>
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	78db      	ldrb	r3, [r3, #3]
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d138      	bne.n	800cff4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	015a      	lsls	r2, r3, #5
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4413      	add	r3, r2
 800cf8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	0151      	lsls	r1, r2, #5
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	440a      	add	r2, r1
 800cf98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfa0:	6013      	str	r3, [r2, #0]
 800cfa2:	e027      	b.n	800cff4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	015a      	lsls	r2, r3, #5
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	0151      	lsls	r1, r2, #5
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	440a      	add	r2, r1
 800cfba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cfc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	78db      	ldrb	r3, [r3, #3]
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d003      	beq.n	800cfd4 <USB_EPClearStall+0x9e>
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	78db      	ldrb	r3, [r3, #3]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d10f      	bne.n	800cff4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68ba      	ldr	r2, [r7, #8]
 800cfe4:	0151      	lsls	r1, r2, #5
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	440a      	add	r2, r1
 800cfea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cff2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d002:	b480      	push	{r7}
 800d004:	b085      	sub	sp, #20
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
 800d00a:	460b      	mov	r3, r1
 800d00c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d020:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d024:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	011b      	lsls	r3, r3, #4
 800d032:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d036:	68f9      	ldr	r1, [r7, #12]
 800d038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d03c:	4313      	orrs	r3, r2
 800d03e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b084      	sub	sp, #16
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	68fa      	ldr	r2, [r7, #12]
 800d064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d068:	f023 0302 	bic.w	r3, r3, #2
 800d06c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d06e:	2003      	movs	r0, #3
 800d070:	f7f8 f96a 	bl	8005348 <HAL_Delay>

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d098:	f043 0302 	orr.w	r3, r3, #2
 800d09c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d09e:	2003      	movs	r0, #3
 800d0a0:	f7f8 f952 	bl	8005348 <HAL_Delay>

  return HAL_OK;
 800d0a4:	2300      	movs	r3, #0
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}

0800d0ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b085      	sub	sp, #20
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	695b      	ldr	r3, [r3, #20]
 800d0ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	4013      	ands	r3, r2
 800d0c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0f0:	69db      	ldr	r3, [r3, #28]
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	0c1b      	lsrs	r3, r3, #16
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	4013      	ands	r3, r2
 800d12a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	b29b      	uxth	r3, r3
}
 800d130:	4618      	mov	r0, r3
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d14c:	78fb      	ldrb	r3, [r7, #3]
 800d14e:	015a      	lsls	r2, r3, #5
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4413      	add	r3, r2
 800d154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d162:	695b      	ldr	r3, [r3, #20]
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	4013      	ands	r3, r2
 800d168:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d16a:	68bb      	ldr	r3, [r7, #8]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d178:	b480      	push	{r7}
 800d17a:	b087      	sub	sp, #28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d19a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d19c:	78fb      	ldrb	r3, [r7, #3]
 800d19e:	f003 030f 	and.w	r3, r3, #15
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	fa22 f303 	lsr.w	r3, r2, r3
 800d1a8:	01db      	lsls	r3, r3, #7
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d1b2:	78fb      	ldrb	r3, [r7, #3]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d1c6:	68bb      	ldr	r3, [r7, #8]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	371c      	adds	r7, #28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	f003 0301 	and.w	r3, r3, #1
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d20a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d20e:	f023 0307 	bic.w	r3, r3, #7
 800d212:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d226:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3714      	adds	r7, #20
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
	...

0800d238 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d238:	b480      	push	{r7}
 800d23a:	b087      	sub	sp, #28
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	460b      	mov	r3, r1
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	333c      	adds	r3, #60	; 0x3c
 800d24e:	3304      	adds	r3, #4
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	4a26      	ldr	r2, [pc, #152]	; (800d2f0 <USB_EP0_OutStart+0xb8>)
 800d258:	4293      	cmp	r3, r2
 800d25a:	d90a      	bls.n	800d272 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d26c:	d101      	bne.n	800d272 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	e037      	b.n	800d2e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d278:	461a      	mov	r2, r3
 800d27a:	2300      	movs	r3, #0
 800d27c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d28c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	697a      	ldr	r2, [r7, #20]
 800d29c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2a0:	f043 0318 	orr.w	r3, r3, #24
 800d2a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ac:	691b      	ldr	r3, [r3, #16]
 800d2ae:	697a      	ldr	r2, [r7, #20]
 800d2b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d2b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d2ba:	7afb      	ldrb	r3, [r7, #11]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d10f      	bne.n	800d2e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d2da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d2de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	371c      	adds	r7, #28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	4f54300a 	.word	0x4f54300a

0800d2f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b085      	sub	sp, #20
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	3301      	adds	r3, #1
 800d304:	60fb      	str	r3, [r7, #12]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4a13      	ldr	r2, [pc, #76]	; (800d358 <USB_CoreReset+0x64>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d901      	bls.n	800d312 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d30e:	2303      	movs	r3, #3
 800d310:	e01b      	b.n	800d34a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	daf2      	bge.n	800d300 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d31a:	2300      	movs	r3, #0
 800d31c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	f043 0201 	orr.w	r2, r3, #1
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3301      	adds	r3, #1
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	4a09      	ldr	r2, [pc, #36]	; (800d358 <USB_CoreReset+0x64>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d901      	bls.n	800d33c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d338:	2303      	movs	r3, #3
 800d33a:	e006      	b.n	800d34a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	2b01      	cmp	r3, #1
 800d346:	d0f0      	beq.n	800d32a <USB_CoreReset+0x36>

  return HAL_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	00030d40 	.word	0x00030d40

0800d35c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d368:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d36c:	f002 f8d6 	bl	800f51c <malloc>
 800d370:	4603      	mov	r3, r0
 800d372:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d105      	bne.n	800d386 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d382:	2302      	movs	r3, #2
 800d384:	e066      	b.n	800d454 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7c1b      	ldrb	r3, [r3, #16]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d119      	bne.n	800d3ca <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d39a:	2202      	movs	r2, #2
 800d39c:	2181      	movs	r1, #129	; 0x81
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f001 ff43 	bl	800f22a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d3aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f001 ff39 	bl	800f22a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2210      	movs	r2, #16
 800d3c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d3c8:	e016      	b.n	800d3f8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d3ca:	2340      	movs	r3, #64	; 0x40
 800d3cc:	2202      	movs	r2, #2
 800d3ce:	2181      	movs	r1, #129	; 0x81
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f001 ff2a 	bl	800f22a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d3dc:	2340      	movs	r3, #64	; 0x40
 800d3de:	2202      	movs	r2, #2
 800d3e0:	2101      	movs	r1, #1
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f001 ff21 	bl	800f22a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2210      	movs	r2, #16
 800d3f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d3f8:	2308      	movs	r3, #8
 800d3fa:	2203      	movs	r2, #3
 800d3fc:	2182      	movs	r1, #130	; 0x82
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f001 ff13 	bl	800f22a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2201      	movs	r2, #1
 800d408:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2200      	movs	r2, #0
 800d422:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7c1b      	ldrb	r3, [r3, #16]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d109      	bne.n	800d442 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d434:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d438:	2101      	movs	r1, #1
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f001 ffe4 	bl	800f408 <USBD_LL_PrepareReceive>
 800d440:	e007      	b.n	800d452 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d448:	2340      	movs	r3, #64	; 0x40
 800d44a:	2101      	movs	r1, #1
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f001 ffdb 	bl	800f408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d46c:	2181      	movs	r1, #129	; 0x81
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f001 ff01 	bl	800f276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d47a:	2101      	movs	r1, #1
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f001 fefa 	bl	800f276 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d48a:	2182      	movs	r1, #130	; 0x82
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f001 fef2 	bl	800f276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00e      	beq.n	800d4ca <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f002 f835 	bl	800f52c <free>
    pdev->pClassData = NULL;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d03a      	beq.n	800d574 <USBD_CDC_Setup+0xa0>
 800d4fe:	2b20      	cmp	r3, #32
 800d500:	f040 8097 	bne.w	800d632 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	88db      	ldrh	r3, [r3, #6]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d029      	beq.n	800d560 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	b25b      	sxtb	r3, r3
 800d512:	2b00      	cmp	r3, #0
 800d514:	da11      	bge.n	800d53a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800d522:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	88d2      	ldrh	r2, [r2, #6]
 800d528:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d52a:	6939      	ldr	r1, [r7, #16]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	88db      	ldrh	r3, [r3, #6]
 800d530:	461a      	mov	r2, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f001 fa6d 	bl	800ea12 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800d538:	e082      	b.n	800d640 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	785a      	ldrb	r2, [r3, #1]
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	88db      	ldrh	r3, [r3, #6]
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d550:	6939      	ldr	r1, [r7, #16]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	88db      	ldrh	r3, [r3, #6]
 800d556:	461a      	mov	r2, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f001 fa86 	bl	800ea6a <USBD_CtlPrepareRx>
    break;
 800d55e:	e06f      	b.n	800d640 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	7850      	ldrb	r0, [r2, #1]
 800d56c:	2200      	movs	r2, #0
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	4798      	blx	r3
    break;
 800d572:	e065      	b.n	800d640 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	785b      	ldrb	r3, [r3, #1]
 800d578:	2b0b      	cmp	r3, #11
 800d57a:	d84f      	bhi.n	800d61c <USBD_CDC_Setup+0x148>
 800d57c:	a201      	add	r2, pc, #4	; (adr r2, 800d584 <USBD_CDC_Setup+0xb0>)
 800d57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d582:	bf00      	nop
 800d584:	0800d5b5 	.word	0x0800d5b5
 800d588:	0800d62b 	.word	0x0800d62b
 800d58c:	0800d61d 	.word	0x0800d61d
 800d590:	0800d61d 	.word	0x0800d61d
 800d594:	0800d61d 	.word	0x0800d61d
 800d598:	0800d61d 	.word	0x0800d61d
 800d59c:	0800d61d 	.word	0x0800d61d
 800d5a0:	0800d61d 	.word	0x0800d61d
 800d5a4:	0800d61d 	.word	0x0800d61d
 800d5a8:	0800d61d 	.word	0x0800d61d
 800d5ac:	0800d5dd 	.word	0x0800d5dd
 800d5b0:	0800d605 	.word	0x0800d605
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d107      	bne.n	800d5ce <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d5be:	f107 030c 	add.w	r3, r7, #12
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f001 fa23 	bl	800ea12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d5cc:	e030      	b.n	800d630 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 f9ad 	bl	800e930 <USBD_CtlError>
        ret = USBD_FAIL;
 800d5d6:	2303      	movs	r3, #3
 800d5d8:	75fb      	strb	r3, [r7, #23]
      break;
 800d5da:	e029      	b.n	800d630 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d107      	bne.n	800d5f6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d5e6:	f107 030f 	add.w	r3, r7, #15
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f001 fa0f 	bl	800ea12 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d5f4:	e01c      	b.n	800d630 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f001 f999 	bl	800e930 <USBD_CtlError>
        ret = USBD_FAIL;
 800d5fe:	2303      	movs	r3, #3
 800d600:	75fb      	strb	r3, [r7, #23]
      break;
 800d602:	e015      	b.n	800d630 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	d00f      	beq.n	800d62e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800d60e:	6839      	ldr	r1, [r7, #0]
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f001 f98d 	bl	800e930 <USBD_CtlError>
        ret = USBD_FAIL;
 800d616:	2303      	movs	r3, #3
 800d618:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d61a:	e008      	b.n	800d62e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f001 f986 	bl	800e930 <USBD_CtlError>
      ret = USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	75fb      	strb	r3, [r7, #23]
      break;
 800d628:	e002      	b.n	800d630 <USBD_CDC_Setup+0x15c>
      break;
 800d62a:	bf00      	nop
 800d62c:	e008      	b.n	800d640 <USBD_CDC_Setup+0x16c>
      break;
 800d62e:	bf00      	nop
    }
    break;
 800d630:	e006      	b.n	800d640 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f001 f97b 	bl	800e930 <USBD_CtlError>
    ret = USBD_FAIL;
 800d63a:	2303      	movs	r3, #3
 800d63c:	75fb      	strb	r3, [r7, #23]
    break;
 800d63e:	bf00      	nop
  }

  return (uint8_t)ret;
 800d640:	7dfb      	ldrb	r3, [r7, #23]
}
 800d642:	4618      	mov	r0, r3
 800d644:	3718      	adds	r7, #24
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop

0800d64c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d65e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d666:	2b00      	cmp	r3, #0
 800d668:	d101      	bne.n	800d66e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d66a:	2303      	movs	r3, #3
 800d66c:	e049      	b.n	800d702 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d674:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	6879      	ldr	r1, [r7, #4]
 800d67a:	4613      	mov	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4413      	add	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	440b      	add	r3, r1
 800d684:	3318      	adds	r3, #24
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d029      	beq.n	800d6e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d68c:	78fa      	ldrb	r2, [r7, #3]
 800d68e:	6879      	ldr	r1, [r7, #4]
 800d690:	4613      	mov	r3, r2
 800d692:	009b      	lsls	r3, r3, #2
 800d694:	4413      	add	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	440b      	add	r3, r1
 800d69a:	3318      	adds	r3, #24
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	78f9      	ldrb	r1, [r7, #3]
 800d6a0:	68f8      	ldr	r0, [r7, #12]
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	00db      	lsls	r3, r3, #3
 800d6a6:	1a5b      	subs	r3, r3, r1
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4403      	add	r3, r0
 800d6ac:	3344      	adds	r3, #68	; 0x44
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d6b4:	fb03 f301 	mul.w	r3, r3, r1
 800d6b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d110      	bne.n	800d6e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d6be:	78fa      	ldrb	r2, [r7, #3]
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	440b      	add	r3, r1
 800d6cc:	3318      	adds	r3, #24
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d6d2:	78f9      	ldrb	r1, [r7, #3]
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f001 fe74 	bl	800f3c6 <USBD_LL_Transmit>
 800d6de:	e00f      	b.n	800d700 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	68ba      	ldr	r2, [r7, #8]
 800d6f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d6fc:	78fa      	ldrb	r2, [r7, #3]
 800d6fe:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b084      	sub	sp, #16
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	460b      	mov	r3, r1
 800d714:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d71c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d728:	2303      	movs	r3, #3
 800d72a:	e015      	b.n	800d758 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d72c:	78fb      	ldrb	r3, [r7, #3]
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f001 fe8a 	bl	800f44a <USBD_LL_GetRxDataSize>
 800d736:	4602      	mov	r2, r0
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d752:	4611      	mov	r1, r2
 800d754:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d756:	2300      	movs	r3, #0
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3710      	adds	r7, #16
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d76e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d015      	beq.n	800d7a6 <USBD_CDC_EP0_RxReady+0x46>
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d780:	2bff      	cmp	r3, #255	; 0xff
 800d782:	d010      	beq.n	800d7a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d792:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d79a:	b292      	uxth	r2, r2
 800d79c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	22ff      	movs	r2, #255	; 0xff
 800d7a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3710      	adds	r7, #16
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2243      	movs	r2, #67	; 0x43
 800d7bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d7be:	4b03      	ldr	r3, [pc, #12]	; (800d7cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	200000dc 	.word	0x200000dc

0800d7d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2243      	movs	r2, #67	; 0x43
 800d7dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d7de:	4b03      	ldr	r3, [pc, #12]	; (800d7ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	20000098 	.word	0x20000098

0800d7f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2243      	movs	r2, #67	; 0x43
 800d7fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d7fe:	4b03      	ldr	r3, [pc, #12]	; (800d80c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	20000120 	.word	0x20000120

0800d810 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	220a      	movs	r2, #10
 800d81c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d81e:	4b03      	ldr	r3, [pc, #12]	; (800d82c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d820:	4618      	mov	r0, r3
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	20000054 	.word	0x20000054

0800d830 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d101      	bne.n	800d844 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d840:	2303      	movs	r3, #3
 800d842:	e004      	b.n	800d84e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b087      	sub	sp, #28
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d86c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	68ba      	ldr	r2, [r7, #8]
 800d872:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	371c      	adds	r7, #28
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr

0800d88c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d89c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	683a      	ldr	r2, [r7, #0]
 800d8a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e016      	b.n	800d900 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7c1b      	ldrb	r3, [r3, #16]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d109      	bne.n	800d8ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f001 fd8e 	bl	800f408 <USBD_LL_PrepareReceive>
 800d8ec:	e007      	b.n	800d8fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8f4:	2340      	movs	r3, #64	; 0x40
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f001 fd85 	bl	800f408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	4613      	mov	r3, r2
 800d914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e025      	b.n	800d96c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d926:	2b00      	cmp	r3, #0
 800d928:	d003      	beq.n	800d932 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d003      	beq.n	800d944 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	68ba      	ldr	r2, [r7, #8]
 800d94e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2201      	movs	r2, #1
 800d956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	79fa      	ldrb	r2, [r7, #7]
 800d95e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f001 fbfb 	bl	800f15c <USBD_LL_Init>
 800d966:	4603      	mov	r3, r0
 800d968:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d97e:	2300      	movs	r3, #0
 800d980:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d988:	2303      	movs	r3, #3
 800d98a:	e010      	b.n	800d9ae <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99c:	f107 020e 	add.w	r2, r7, #14
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	4798      	blx	r3
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800d9ac:	2300      	movs	r3, #0
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f001 fc18 	bl	800f1f4 <USBD_LL_Start>
 800d9c4:	4603      	mov	r3, r0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b083      	sub	sp, #12
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d9d6:	2300      	movs	r3, #0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d009      	beq.n	800da12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	78fa      	ldrb	r2, [r7, #3]
 800da08:	4611      	mov	r1, r2
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	4798      	blx	r3
 800da0e:	4603      	mov	r3, r0
 800da10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800da12:	7bfb      	ldrb	r3, [r7, #15]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d007      	beq.n	800da42 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	78fa      	ldrb	r2, [r7, #3]
 800da3c:	4611      	mov	r1, r2
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	4798      	blx	r3
  }

  return USBD_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da5c:	6839      	ldr	r1, [r7, #0]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 ff2c 	bl	800e8bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800da72:	461a      	mov	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da80:	f003 031f 	and.w	r3, r3, #31
 800da84:	2b01      	cmp	r3, #1
 800da86:	d00e      	beq.n	800daa6 <USBD_LL_SetupStage+0x5a>
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d302      	bcc.n	800da92 <USBD_LL_SetupStage+0x46>
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d014      	beq.n	800daba <USBD_LL_SetupStage+0x6e>
 800da90:	e01d      	b.n	800dace <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da98:	4619      	mov	r1, r3
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 fa18 	bl	800ded0 <USBD_StdDevReq>
 800daa0:	4603      	mov	r3, r0
 800daa2:	73fb      	strb	r3, [r7, #15]
      break;
 800daa4:	e020      	b.n	800dae8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800daac:	4619      	mov	r1, r3
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fa7c 	bl	800dfac <USBD_StdItfReq>
 800dab4:	4603      	mov	r3, r0
 800dab6:	73fb      	strb	r3, [r7, #15]
      break;
 800dab8:	e016      	b.n	800dae8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fab8 	bl	800e038 <USBD_StdEPReq>
 800dac8:	4603      	mov	r3, r0
 800daca:	73fb      	strb	r3, [r7, #15]
      break;
 800dacc:	e00c      	b.n	800dae8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dad4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	4619      	mov	r1, r3
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f001 fbe9 	bl	800f2b4 <USBD_LL_StallEP>
 800dae2:	4603      	mov	r3, r0
 800dae4:	73fb      	strb	r3, [r7, #15]
      break;
 800dae6:	bf00      	nop
  }

  return ret;
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b086      	sub	sp, #24
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	60f8      	str	r0, [r7, #12]
 800dafa:	460b      	mov	r3, r1
 800dafc:	607a      	str	r2, [r7, #4]
 800dafe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800db00:	7afb      	ldrb	r3, [r7, #11]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d137      	bne.n	800db76 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800db0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800db14:	2b03      	cmp	r3, #3
 800db16:	d14a      	bne.n	800dbae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	689a      	ldr	r2, [r3, #8]
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	429a      	cmp	r2, r3
 800db22:	d913      	bls.n	800db4c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	689a      	ldr	r2, [r3, #8]
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	1ad2      	subs	r2, r2, r3
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	68da      	ldr	r2, [r3, #12]
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	4293      	cmp	r3, r2
 800db3c:	bf28      	it	cs
 800db3e:	4613      	movcs	r3, r2
 800db40:	461a      	mov	r2, r3
 800db42:	6879      	ldr	r1, [r7, #4]
 800db44:	68f8      	ldr	r0, [r7, #12]
 800db46:	f000 ffad 	bl	800eaa4 <USBD_CtlContinueRx>
 800db4a:	e030      	b.n	800dbae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db52:	691b      	ldr	r3, [r3, #16]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d00a      	beq.n	800db6e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800db5e:	2b03      	cmp	r3, #3
 800db60:	d105      	bne.n	800db6e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f000 ffa9 	bl	800eac6 <USBD_CtlSendStatus>
 800db74:	e01b      	b.n	800dbae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db7c:	699b      	ldr	r3, [r3, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d013      	beq.n	800dbaa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800db88:	2b03      	cmp	r3, #3
 800db8a:	d10e      	bne.n	800dbaa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	7afa      	ldrb	r2, [r7, #11]
 800db96:	4611      	mov	r1, r2
 800db98:	68f8      	ldr	r0, [r7, #12]
 800db9a:	4798      	blx	r3
 800db9c:	4603      	mov	r3, r0
 800db9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d003      	beq.n	800dbae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	e002      	b.n	800dbb0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	e000      	b.n	800dbb0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	607a      	str	r2, [r7, #4]
 800dbc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dbc6:	7afb      	ldrb	r3, [r7, #11]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d16a      	bne.n	800dca2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	3314      	adds	r3, #20
 800dbd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d155      	bne.n	800dc88 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	689a      	ldr	r2, [r3, #8]
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d914      	bls.n	800dc12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	689a      	ldr	r2, [r3, #8]
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	1ad2      	subs	r2, r2, r3
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f000 ff22 	bl	800ea48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc04:	2300      	movs	r3, #0
 800dc06:	2200      	movs	r2, #0
 800dc08:	2100      	movs	r1, #0
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f001 fbfc 	bl	800f408 <USBD_LL_PrepareReceive>
 800dc10:	e03a      	b.n	800dc88 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	68da      	ldr	r2, [r3, #12]
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d11c      	bne.n	800dc58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	685a      	ldr	r2, [r3, #4]
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d316      	bcc.n	800dc58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d20f      	bcs.n	800dc58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc38:	2200      	movs	r2, #0
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f000 ff03 	bl	800ea48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2100      	movs	r1, #0
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f001 fbd9 	bl	800f408 <USBD_LL_PrepareReceive>
 800dc56:	e017      	b.n	800dc88 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00a      	beq.n	800dc7a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d105      	bne.n	800dc7a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc7a:	2180      	movs	r1, #128	; 0x80
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f001 fb19 	bl	800f2b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f000 ff32 	bl	800eaec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d123      	bne.n	800dcda <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f7ff fe9b 	bl	800d9ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dca0:	e01b      	b.n	800dcda <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d013      	beq.n	800dcd6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800dcb4:	2b03      	cmp	r3, #3
 800dcb6:	d10e      	bne.n	800dcd6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcbe:	695b      	ldr	r3, [r3, #20]
 800dcc0:	7afa      	ldrb	r2, [r7, #11]
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	68f8      	ldr	r0, [r7, #12]
 800dcc6:	4798      	blx	r3
 800dcc8:	4603      	mov	r3, r0
 800dcca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800dccc:	7dfb      	ldrb	r3, [r7, #23]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	e002      	b.n	800dcdc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e000      	b.n	800dcdc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3718      	adds	r7, #24
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d009      	beq.n	800dd28 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	6852      	ldr	r2, [r2, #4]
 800dd20:	b2d2      	uxtb	r2, r2
 800dd22:	4611      	mov	r1, r2
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd28:	2340      	movs	r3, #64	; 0x40
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f001 fa7b 	bl	800f22a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2240      	movs	r2, #64	; 0x40
 800dd40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd44:	2340      	movs	r3, #64	; 0x40
 800dd46:	2200      	movs	r2, #0
 800dd48:	2180      	movs	r1, #128	; 0x80
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 fa6d 	bl	800f22a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2240      	movs	r2, #64	; 0x40
 800dd5a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dd66:	b480      	push	{r7}
 800dd68:	b083      	sub	sp, #12
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	460b      	mov	r3, r1
 800dd70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	78fa      	ldrb	r2, [r7, #3]
 800dd76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	370c      	adds	r7, #12
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dd86:	b480      	push	{r7}
 800dd88:	b083      	sub	sp, #12
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2204      	movs	r2, #4
 800dd9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dda2:	2300      	movs	r3, #0
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddbe:	2b04      	cmp	r3, #4
 800ddc0:	d105      	bne.n	800ddce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	370c      	adds	r7, #12
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d10b      	bne.n	800de06 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf4:	69db      	ldr	r3, [r3, #28]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d005      	beq.n	800de06 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de00:	69db      	ldr	r3, [r3, #28]
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr

0800de2a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800de2a:	b480      	push	{r7}
 800de2c:	b083      	sub	sp, #12
 800de2e:	af00      	add	r7, sp, #0
 800de30:	6078      	str	r0, [r7, #4]
 800de32:	460b      	mov	r3, r1
 800de34:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	370c      	adds	r7, #12
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de4c:	2300      	movs	r3, #0
}
 800de4e:	4618      	mov	r0, r3
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b082      	sub	sp, #8
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2201      	movs	r2, #1
 800de66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de70:	2b00      	cmp	r3, #0
 800de72:	d009      	beq.n	800de88 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	6852      	ldr	r2, [r2, #4]
 800de80:	b2d2      	uxtb	r2, r2
 800de82:	4611      	mov	r1, r2
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	4798      	blx	r3
  }

  return USBD_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800de92:	b480      	push	{r7}
 800de94:	b087      	sub	sp, #28
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	3301      	adds	r3, #1
 800dea8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800deb0:	8a3b      	ldrh	r3, [r7, #16]
 800deb2:	021b      	lsls	r3, r3, #8
 800deb4:	b21a      	sxth	r2, r3
 800deb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800deba:	4313      	orrs	r3, r2
 800debc:	b21b      	sxth	r3, r3
 800debe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dec0:	89fb      	ldrh	r3, [r7, #14]
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	371c      	adds	r7, #28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
	...

0800ded0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dee6:	2b20      	cmp	r3, #32
 800dee8:	d004      	beq.n	800def4 <USBD_StdDevReq+0x24>
 800deea:	2b40      	cmp	r3, #64	; 0x40
 800deec:	d002      	beq.n	800def4 <USBD_StdDevReq+0x24>
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00a      	beq.n	800df08 <USBD_StdDevReq+0x38>
 800def2:	e050      	b.n	800df96 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	4798      	blx	r3
 800df02:	4603      	mov	r3, r0
 800df04:	73fb      	strb	r3, [r7, #15]
    break;
 800df06:	e04b      	b.n	800dfa0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	785b      	ldrb	r3, [r3, #1]
 800df0c:	2b09      	cmp	r3, #9
 800df0e:	d83c      	bhi.n	800df8a <USBD_StdDevReq+0xba>
 800df10:	a201      	add	r2, pc, #4	; (adr r2, 800df18 <USBD_StdDevReq+0x48>)
 800df12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df16:	bf00      	nop
 800df18:	0800df6d 	.word	0x0800df6d
 800df1c:	0800df81 	.word	0x0800df81
 800df20:	0800df8b 	.word	0x0800df8b
 800df24:	0800df77 	.word	0x0800df77
 800df28:	0800df8b 	.word	0x0800df8b
 800df2c:	0800df4b 	.word	0x0800df4b
 800df30:	0800df41 	.word	0x0800df41
 800df34:	0800df8b 	.word	0x0800df8b
 800df38:	0800df63 	.word	0x0800df63
 800df3c:	0800df55 	.word	0x0800df55
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f9ce 	bl	800e2e4 <USBD_GetDescriptor>
      break;
 800df48:	e024      	b.n	800df94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 fb33 	bl	800e5b8 <USBD_SetAddress>
      break;
 800df52:	e01f      	b.n	800df94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800df54:	6839      	ldr	r1, [r7, #0]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 fb70 	bl	800e63c <USBD_SetConfig>
 800df5c:	4603      	mov	r3, r0
 800df5e:	73fb      	strb	r3, [r7, #15]
      break;
 800df60:	e018      	b.n	800df94 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800df62:	6839      	ldr	r1, [r7, #0]
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 fc0d 	bl	800e784 <USBD_GetConfig>
      break;
 800df6a:	e013      	b.n	800df94 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fc3c 	bl	800e7ec <USBD_GetStatus>
      break;
 800df74:	e00e      	b.n	800df94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800df76:	6839      	ldr	r1, [r7, #0]
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 fc6a 	bl	800e852 <USBD_SetFeature>
      break;
 800df7e:	e009      	b.n	800df94 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800df80:	6839      	ldr	r1, [r7, #0]
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 fc79 	bl	800e87a <USBD_ClrFeature>
      break;
 800df88:	e004      	b.n	800df94 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800df8a:	6839      	ldr	r1, [r7, #0]
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 fccf 	bl	800e930 <USBD_CtlError>
      break;
 800df92:	bf00      	nop
    }
    break;
 800df94:	e004      	b.n	800dfa0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fcc9 	bl	800e930 <USBD_CtlError>
    break;
 800df9e:	bf00      	nop
  }

  return ret;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop

0800dfac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d003      	beq.n	800dfce <USBD_StdItfReq+0x22>
 800dfc6:	2b40      	cmp	r3, #64	; 0x40
 800dfc8:	d001      	beq.n	800dfce <USBD_StdItfReq+0x22>
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d12a      	bne.n	800e024 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	d81d      	bhi.n	800e016 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	889b      	ldrh	r3, [r3, #4]
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d813      	bhi.n	800e00c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	6839      	ldr	r1, [r7, #0]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	4798      	blx	r3
 800dff2:	4603      	mov	r3, r0
 800dff4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	88db      	ldrh	r3, [r3, #6]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d110      	bne.n	800e020 <USBD_StdItfReq+0x74>
 800dffe:	7bfb      	ldrb	r3, [r7, #15]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10d      	bne.n	800e020 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fd5e 	bl	800eac6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e00a:	e009      	b.n	800e020 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 fc8e 	bl	800e930 <USBD_CtlError>
      break;
 800e014:	e004      	b.n	800e020 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e016:	6839      	ldr	r1, [r7, #0]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 fc89 	bl	800e930 <USBD_CtlError>
      break;
 800e01e:	e000      	b.n	800e022 <USBD_StdItfReq+0x76>
      break;
 800e020:	bf00      	nop
    }
    break;
 800e022:	e004      	b.n	800e02e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e024:	6839      	ldr	r1, [r7, #0]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fc82 	bl	800e930 <USBD_CtlError>
    break;
 800e02c:	bf00      	nop
  }

  return ret;
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3710      	adds	r7, #16
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e042:	2300      	movs	r3, #0
 800e044:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	889b      	ldrh	r3, [r3, #4]
 800e04a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e054:	2b20      	cmp	r3, #32
 800e056:	d004      	beq.n	800e062 <USBD_StdEPReq+0x2a>
 800e058:	2b40      	cmp	r3, #64	; 0x40
 800e05a:	d002      	beq.n	800e062 <USBD_StdEPReq+0x2a>
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00a      	beq.n	800e076 <USBD_StdEPReq+0x3e>
 800e060:	e135      	b.n	800e2ce <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	6839      	ldr	r1, [r7, #0]
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	4798      	blx	r3
 800e070:	4603      	mov	r3, r0
 800e072:	73fb      	strb	r3, [r7, #15]
    break;
 800e074:	e130      	b.n	800e2d8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	785b      	ldrb	r3, [r3, #1]
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d03e      	beq.n	800e0fc <USBD_StdEPReq+0xc4>
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d002      	beq.n	800e088 <USBD_StdEPReq+0x50>
 800e082:	2b00      	cmp	r3, #0
 800e084:	d077      	beq.n	800e176 <USBD_StdEPReq+0x13e>
 800e086:	e11c      	b.n	800e2c2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e08e:	2b02      	cmp	r3, #2
 800e090:	d002      	beq.n	800e098 <USBD_StdEPReq+0x60>
 800e092:	2b03      	cmp	r3, #3
 800e094:	d015      	beq.n	800e0c2 <USBD_StdEPReq+0x8a>
 800e096:	e02b      	b.n	800e0f0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e098:	7bbb      	ldrb	r3, [r7, #14]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00c      	beq.n	800e0b8 <USBD_StdEPReq+0x80>
 800e09e:	7bbb      	ldrb	r3, [r7, #14]
 800e0a0:	2b80      	cmp	r3, #128	; 0x80
 800e0a2:	d009      	beq.n	800e0b8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0a4:	7bbb      	ldrb	r3, [r7, #14]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f001 f903 	bl	800f2b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0ae:	2180      	movs	r1, #128	; 0x80
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f001 f8ff 	bl	800f2b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e0b6:	e020      	b.n	800e0fa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800e0b8:	6839      	ldr	r1, [r7, #0]
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 fc38 	bl	800e930 <USBD_CtlError>
        break;
 800e0c0:	e01b      	b.n	800e0fa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	885b      	ldrh	r3, [r3, #2]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10e      	bne.n	800e0e8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e0ca:	7bbb      	ldrb	r3, [r7, #14]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00b      	beq.n	800e0e8 <USBD_StdEPReq+0xb0>
 800e0d0:	7bbb      	ldrb	r3, [r7, #14]
 800e0d2:	2b80      	cmp	r3, #128	; 0x80
 800e0d4:	d008      	beq.n	800e0e8 <USBD_StdEPReq+0xb0>
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	88db      	ldrh	r3, [r3, #6]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d104      	bne.n	800e0e8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0de:	7bbb      	ldrb	r3, [r7, #14]
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f001 f8e6 	bl	800f2b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f000 fcec 	bl	800eac6 <USBD_CtlSendStatus>

        break;
 800e0ee:	e004      	b.n	800e0fa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800e0f0:	6839      	ldr	r1, [r7, #0]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 fc1c 	bl	800e930 <USBD_CtlError>
        break;
 800e0f8:	bf00      	nop
      }
      break;
 800e0fa:	e0e7      	b.n	800e2cc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e102:	2b02      	cmp	r3, #2
 800e104:	d002      	beq.n	800e10c <USBD_StdEPReq+0xd4>
 800e106:	2b03      	cmp	r3, #3
 800e108:	d015      	beq.n	800e136 <USBD_StdEPReq+0xfe>
 800e10a:	e02d      	b.n	800e168 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e10c:	7bbb      	ldrb	r3, [r7, #14]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00c      	beq.n	800e12c <USBD_StdEPReq+0xf4>
 800e112:	7bbb      	ldrb	r3, [r7, #14]
 800e114:	2b80      	cmp	r3, #128	; 0x80
 800e116:	d009      	beq.n	800e12c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e118:	7bbb      	ldrb	r3, [r7, #14]
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f001 f8c9 	bl	800f2b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e122:	2180      	movs	r1, #128	; 0x80
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f001 f8c5 	bl	800f2b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e12a:	e023      	b.n	800e174 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 fbfe 	bl	800e930 <USBD_CtlError>
        break;
 800e134:	e01e      	b.n	800e174 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	885b      	ldrh	r3, [r3, #2]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d119      	bne.n	800e172 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e13e:	7bbb      	ldrb	r3, [r7, #14]
 800e140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e144:	2b00      	cmp	r3, #0
 800e146:	d004      	beq.n	800e152 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e148:	7bbb      	ldrb	r3, [r7, #14]
 800e14a:	4619      	mov	r1, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f001 f8d0 	bl	800f2f2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 fcb7 	bl	800eac6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	6839      	ldr	r1, [r7, #0]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	4798      	blx	r3
        }
        break;
 800e166:	e004      	b.n	800e172 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 fbe0 	bl	800e930 <USBD_CtlError>
        break;
 800e170:	e000      	b.n	800e174 <USBD_StdEPReq+0x13c>
        break;
 800e172:	bf00      	nop
      }
      break;
 800e174:	e0aa      	b.n	800e2cc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	d002      	beq.n	800e186 <USBD_StdEPReq+0x14e>
 800e180:	2b03      	cmp	r3, #3
 800e182:	d032      	beq.n	800e1ea <USBD_StdEPReq+0x1b2>
 800e184:	e097      	b.n	800e2b6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e186:	7bbb      	ldrb	r3, [r7, #14]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d007      	beq.n	800e19c <USBD_StdEPReq+0x164>
 800e18c:	7bbb      	ldrb	r3, [r7, #14]
 800e18e:	2b80      	cmp	r3, #128	; 0x80
 800e190:	d004      	beq.n	800e19c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 fbcb 	bl	800e930 <USBD_CtlError>
          break;
 800e19a:	e091      	b.n	800e2c0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e19c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	da0b      	bge.n	800e1bc <USBD_StdEPReq+0x184>
 800e1a4:	7bbb      	ldrb	r3, [r7, #14]
 800e1a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	4413      	add	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	3310      	adds	r3, #16
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	e00b      	b.n	800e1d4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e1bc:	7bbb      	ldrb	r3, [r7, #14]
 800e1be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4413      	add	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2202      	movs	r2, #2
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fc15 	bl	800ea12 <USBD_CtlSendData>
        break;
 800e1e8:	e06a      	b.n	800e2c0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e1ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	da11      	bge.n	800e216 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e1f2:	7bbb      	ldrb	r3, [r7, #14]
 800e1f4:	f003 020f 	and.w	r2, r3, #15
 800e1f8:	6879      	ldr	r1, [r7, #4]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	440b      	add	r3, r1
 800e204:	3324      	adds	r3, #36	; 0x24
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d117      	bne.n	800e23c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fb8e 	bl	800e930 <USBD_CtlError>
            break;
 800e214:	e054      	b.n	800e2c0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e216:	7bbb      	ldrb	r3, [r7, #14]
 800e218:	f003 020f 	and.w	r2, r3, #15
 800e21c:	6879      	ldr	r1, [r7, #4]
 800e21e:	4613      	mov	r3, r2
 800e220:	009b      	lsls	r3, r3, #2
 800e222:	4413      	add	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	440b      	add	r3, r1
 800e228:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d104      	bne.n	800e23c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e232:	6839      	ldr	r1, [r7, #0]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 fb7b 	bl	800e930 <USBD_CtlError>
            break;
 800e23a:	e041      	b.n	800e2c0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e23c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e240:	2b00      	cmp	r3, #0
 800e242:	da0b      	bge.n	800e25c <USBD_StdEPReq+0x224>
 800e244:	7bbb      	ldrb	r3, [r7, #14]
 800e246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e24a:	4613      	mov	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	3310      	adds	r3, #16
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	4413      	add	r3, r2
 800e258:	3304      	adds	r3, #4
 800e25a:	e00b      	b.n	800e274 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e25c:	7bbb      	ldrb	r3, [r7, #14]
 800e25e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e262:	4613      	mov	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4413      	add	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	4413      	add	r3, r2
 800e272:	3304      	adds	r3, #4
 800e274:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e276:	7bbb      	ldrb	r3, [r7, #14]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <USBD_StdEPReq+0x24a>
 800e27c:	7bbb      	ldrb	r3, [r7, #14]
 800e27e:	2b80      	cmp	r3, #128	; 0x80
 800e280:	d103      	bne.n	800e28a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2200      	movs	r2, #0
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	e00e      	b.n	800e2a8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e28a:	7bbb      	ldrb	r3, [r7, #14]
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f001 f84e 	bl	800f330 <USBD_LL_IsStallEP>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d003      	beq.n	800e2a2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2201      	movs	r2, #1
 800e29e:	601a      	str	r2, [r3, #0]
 800e2a0:	e002      	b.n	800e2a8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fbaf 	bl	800ea12 <USBD_CtlSendData>
          break;
 800e2b4:	e004      	b.n	800e2c0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 fb39 	bl	800e930 <USBD_CtlError>
        break;
 800e2be:	bf00      	nop
      }
      break;
 800e2c0:	e004      	b.n	800e2cc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800e2c2:	6839      	ldr	r1, [r7, #0]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fb33 	bl	800e930 <USBD_CtlError>
      break;
 800e2ca:	bf00      	nop
    }
    break;
 800e2cc:	e004      	b.n	800e2d8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800e2ce:	6839      	ldr	r1, [r7, #0]
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 fb2d 	bl	800e930 <USBD_CtlError>
    break;
 800e2d6:	bf00      	nop
  }

  return ret;
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
	...

0800e2e4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	885b      	ldrh	r3, [r3, #2]
 800e2fe:	0a1b      	lsrs	r3, r3, #8
 800e300:	b29b      	uxth	r3, r3
 800e302:	3b01      	subs	r3, #1
 800e304:	2b06      	cmp	r3, #6
 800e306:	f200 8128 	bhi.w	800e55a <USBD_GetDescriptor+0x276>
 800e30a:	a201      	add	r2, pc, #4	; (adr r2, 800e310 <USBD_GetDescriptor+0x2c>)
 800e30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e310:	0800e32d 	.word	0x0800e32d
 800e314:	0800e345 	.word	0x0800e345
 800e318:	0800e385 	.word	0x0800e385
 800e31c:	0800e55b 	.word	0x0800e55b
 800e320:	0800e55b 	.word	0x0800e55b
 800e324:	0800e4fb 	.word	0x0800e4fb
 800e328:	0800e527 	.word	0x0800e527
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	7c12      	ldrb	r2, [r2, #16]
 800e338:	f107 0108 	add.w	r1, r7, #8
 800e33c:	4610      	mov	r0, r2
 800e33e:	4798      	blx	r3
 800e340:	60f8      	str	r0, [r7, #12]
    break;
 800e342:	e112      	b.n	800e56a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	7c1b      	ldrb	r3, [r3, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10d      	bne.n	800e368 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e354:	f107 0208 	add.w	r2, r7, #8
 800e358:	4610      	mov	r0, r2
 800e35a:	4798      	blx	r3
 800e35c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3301      	adds	r3, #1
 800e362:	2202      	movs	r2, #2
 800e364:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e366:	e100      	b.n	800e56a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e370:	f107 0208 	add.w	r2, r7, #8
 800e374:	4610      	mov	r0, r2
 800e376:	4798      	blx	r3
 800e378:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	3301      	adds	r3, #1
 800e37e:	2202      	movs	r2, #2
 800e380:	701a      	strb	r2, [r3, #0]
    break;
 800e382:	e0f2      	b.n	800e56a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	885b      	ldrh	r3, [r3, #2]
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	f200 80ac 	bhi.w	800e4e8 <USBD_GetDescriptor+0x204>
 800e390:	a201      	add	r2, pc, #4	; (adr r2, 800e398 <USBD_GetDescriptor+0xb4>)
 800e392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e396:	bf00      	nop
 800e398:	0800e3b1 	.word	0x0800e3b1
 800e39c:	0800e3e5 	.word	0x0800e3e5
 800e3a0:	0800e419 	.word	0x0800e419
 800e3a4:	0800e44d 	.word	0x0800e44d
 800e3a8:	0800e481 	.word	0x0800e481
 800e3ac:	0800e4b5 	.word	0x0800e4b5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00b      	beq.n	800e3d4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	7c12      	ldrb	r2, [r2, #16]
 800e3c8:	f107 0108 	add.w	r1, r7, #8
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	4798      	blx	r3
 800e3d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3d2:	e091      	b.n	800e4f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 faaa 	bl	800e930 <USBD_CtlError>
        err++;
 800e3dc:	7afb      	ldrb	r3, [r7, #11]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	72fb      	strb	r3, [r7, #11]
      break;
 800e3e2:	e089      	b.n	800e4f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00b      	beq.n	800e408 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	7c12      	ldrb	r2, [r2, #16]
 800e3fc:	f107 0108 	add.w	r1, r7, #8
 800e400:	4610      	mov	r0, r2
 800e402:	4798      	blx	r3
 800e404:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e406:	e077      	b.n	800e4f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fa90 	bl	800e930 <USBD_CtlError>
        err++;
 800e410:	7afb      	ldrb	r3, [r7, #11]
 800e412:	3301      	adds	r3, #1
 800e414:	72fb      	strb	r3, [r7, #11]
      break;
 800e416:	e06f      	b.n	800e4f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00b      	beq.n	800e43c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	7c12      	ldrb	r2, [r2, #16]
 800e430:	f107 0108 	add.w	r1, r7, #8
 800e434:	4610      	mov	r0, r2
 800e436:	4798      	blx	r3
 800e438:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e43a:	e05d      	b.n	800e4f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f000 fa76 	bl	800e930 <USBD_CtlError>
        err++;
 800e444:	7afb      	ldrb	r3, [r7, #11]
 800e446:	3301      	adds	r3, #1
 800e448:	72fb      	strb	r3, [r7, #11]
      break;
 800e44a:	e055      	b.n	800e4f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00b      	beq.n	800e470 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	7c12      	ldrb	r2, [r2, #16]
 800e464:	f107 0108 	add.w	r1, r7, #8
 800e468:	4610      	mov	r0, r2
 800e46a:	4798      	blx	r3
 800e46c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e46e:	e043      	b.n	800e4f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e470:	6839      	ldr	r1, [r7, #0]
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fa5c 	bl	800e930 <USBD_CtlError>
        err++;
 800e478:	7afb      	ldrb	r3, [r7, #11]
 800e47a:	3301      	adds	r3, #1
 800e47c:	72fb      	strb	r3, [r7, #11]
      break;
 800e47e:	e03b      	b.n	800e4f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e486:	695b      	ldr	r3, [r3, #20]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00b      	beq.n	800e4a4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	7c12      	ldrb	r2, [r2, #16]
 800e498:	f107 0108 	add.w	r1, r7, #8
 800e49c:	4610      	mov	r0, r2
 800e49e:	4798      	blx	r3
 800e4a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4a2:	e029      	b.n	800e4f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e4a4:	6839      	ldr	r1, [r7, #0]
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fa42 	bl	800e930 <USBD_CtlError>
        err++;
 800e4ac:	7afb      	ldrb	r3, [r7, #11]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	72fb      	strb	r3, [r7, #11]
      break;
 800e4b2:	e021      	b.n	800e4f8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d00b      	beq.n	800e4d8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4c6:	699b      	ldr	r3, [r3, #24]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	7c12      	ldrb	r2, [r2, #16]
 800e4cc:	f107 0108 	add.w	r1, r7, #8
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	4798      	blx	r3
 800e4d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4d6:	e00f      	b.n	800e4f8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fa28 	bl	800e930 <USBD_CtlError>
        err++;
 800e4e0:	7afb      	ldrb	r3, [r7, #11]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	72fb      	strb	r3, [r7, #11]
      break;
 800e4e6:	e007      	b.n	800e4f8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fa20 	bl	800e930 <USBD_CtlError>
      err++;
 800e4f0:	7afb      	ldrb	r3, [r7, #11]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e4f6:	bf00      	nop
    }
    break;
 800e4f8:	e037      	b.n	800e56a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	7c1b      	ldrb	r3, [r3, #16]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d109      	bne.n	800e516 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50a:	f107 0208 	add.w	r2, r7, #8
 800e50e:	4610      	mov	r0, r2
 800e510:	4798      	blx	r3
 800e512:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e514:	e029      	b.n	800e56a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fa09 	bl	800e930 <USBD_CtlError>
      err++;
 800e51e:	7afb      	ldrb	r3, [r7, #11]
 800e520:	3301      	adds	r3, #1
 800e522:	72fb      	strb	r3, [r7, #11]
    break;
 800e524:	e021      	b.n	800e56a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7c1b      	ldrb	r3, [r3, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10d      	bne.n	800e54a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e536:	f107 0208 	add.w	r2, r7, #8
 800e53a:	4610      	mov	r0, r2
 800e53c:	4798      	blx	r3
 800e53e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	3301      	adds	r3, #1
 800e544:	2207      	movs	r2, #7
 800e546:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e548:	e00f      	b.n	800e56a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800e54a:	6839      	ldr	r1, [r7, #0]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f9ef 	bl	800e930 <USBD_CtlError>
      err++;
 800e552:	7afb      	ldrb	r3, [r7, #11]
 800e554:	3301      	adds	r3, #1
 800e556:	72fb      	strb	r3, [r7, #11]
    break;
 800e558:	e007      	b.n	800e56a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f9e7 	bl	800e930 <USBD_CtlError>
    err++;
 800e562:	7afb      	ldrb	r3, [r7, #11]
 800e564:	3301      	adds	r3, #1
 800e566:	72fb      	strb	r3, [r7, #11]
    break;
 800e568:	bf00      	nop
  }

  if (err != 0U)
 800e56a:	7afb      	ldrb	r3, [r7, #11]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d11e      	bne.n	800e5ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	88db      	ldrh	r3, [r3, #6]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d016      	beq.n	800e5a6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800e578:	893b      	ldrh	r3, [r7, #8]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d00e      	beq.n	800e59c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	88da      	ldrh	r2, [r3, #6]
 800e582:	893b      	ldrh	r3, [r7, #8]
 800e584:	4293      	cmp	r3, r2
 800e586:	bf28      	it	cs
 800e588:	4613      	movcs	r3, r2
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e58e:	893b      	ldrh	r3, [r7, #8]
 800e590:	461a      	mov	r2, r3
 800e592:	68f9      	ldr	r1, [r7, #12]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 fa3c 	bl	800ea12 <USBD_CtlSendData>
 800e59a:	e009      	b.n	800e5b0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f9c6 	bl	800e930 <USBD_CtlError>
 800e5a4:	e004      	b.n	800e5b0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fa8d 	bl	800eac6 <USBD_CtlSendStatus>
 800e5ac:	e000      	b.n	800e5b0 <USBD_GetDescriptor+0x2cc>
    return;
 800e5ae:	bf00      	nop
    }
  }
}
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop

0800e5b8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	889b      	ldrh	r3, [r3, #4]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d130      	bne.n	800e62c <USBD_SetAddress+0x74>
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	88db      	ldrh	r3, [r3, #6]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d12c      	bne.n	800e62c <USBD_SetAddress+0x74>
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	885b      	ldrh	r3, [r3, #2]
 800e5d6:	2b7f      	cmp	r3, #127	; 0x7f
 800e5d8:	d828      	bhi.n	800e62c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	885b      	ldrh	r3, [r3, #2]
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ec:	2b03      	cmp	r3, #3
 800e5ee:	d104      	bne.n	800e5fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e5f0:	6839      	ldr	r1, [r7, #0]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f99c 	bl	800e930 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5f8:	e01c      	b.n	800e634 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	7bfa      	ldrb	r2, [r7, #15]
 800e5fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e602:	7bfb      	ldrb	r3, [r7, #15]
 800e604:	4619      	mov	r1, r3
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 febe 	bl	800f388 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 fa5a 	bl	800eac6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e612:	7bfb      	ldrb	r3, [r7, #15]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d004      	beq.n	800e622 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2202      	movs	r2, #2
 800e61c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e620:	e008      	b.n	800e634 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e62a:	e003      	b.n	800e634 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e62c:	6839      	ldr	r1, [r7, #0]
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f000 f97e 	bl	800e930 <USBD_CtlError>
  }
}
 800e634:	bf00      	nop
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b084      	sub	sp, #16
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	885b      	ldrh	r3, [r3, #2]
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	4b4b      	ldr	r3, [pc, #300]	; (800e780 <USBD_SetConfig+0x144>)
 800e652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e654:	4b4a      	ldr	r3, [pc, #296]	; (800e780 <USBD_SetConfig+0x144>)
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d905      	bls.n	800e668 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e65c:	6839      	ldr	r1, [r7, #0]
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 f966 	bl	800e930 <USBD_CtlError>
    return USBD_FAIL;
 800e664:	2303      	movs	r3, #3
 800e666:	e087      	b.n	800e778 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d002      	beq.n	800e678 <USBD_SetConfig+0x3c>
 800e672:	2b03      	cmp	r3, #3
 800e674:	d025      	beq.n	800e6c2 <USBD_SetConfig+0x86>
 800e676:	e071      	b.n	800e75c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e678:	4b41      	ldr	r3, [pc, #260]	; (800e780 <USBD_SetConfig+0x144>)
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d01c      	beq.n	800e6ba <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e680:	4b3f      	ldr	r3, [pc, #252]	; (800e780 <USBD_SetConfig+0x144>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	461a      	mov	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e68a:	4b3d      	ldr	r3, [pc, #244]	; (800e780 <USBD_SetConfig+0x144>)
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	4619      	mov	r1, r3
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7ff f9a7 	bl	800d9e4 <USBD_SetClassConfig>
 800e696:	4603      	mov	r3, r0
 800e698:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e6a0:	6839      	ldr	r1, [r7, #0]
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f000 f944 	bl	800e930 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e6a8:	e065      	b.n	800e776 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fa0b 	bl	800eac6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2203      	movs	r2, #3
 800e6b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e6b8:	e05d      	b.n	800e776 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 fa03 	bl	800eac6 <USBD_CtlSendStatus>
    break;
 800e6c0:	e059      	b.n	800e776 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e6c2:	4b2f      	ldr	r3, [pc, #188]	; (800e780 <USBD_SetConfig+0x144>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d112      	bne.n	800e6f0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2202      	movs	r2, #2
 800e6ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800e6d2:	4b2b      	ldr	r3, [pc, #172]	; (800e780 <USBD_SetConfig+0x144>)
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e6dc:	4b28      	ldr	r3, [pc, #160]	; (800e780 <USBD_SetConfig+0x144>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7ff f99a 	bl	800da1c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 f9ec 	bl	800eac6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e6ee:	e042      	b.n	800e776 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e6f0:	4b23      	ldr	r3, [pc, #140]	; (800e780 <USBD_SetConfig+0x144>)
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d02a      	beq.n	800e754 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	b2db      	uxtb	r3, r3
 800e704:	4619      	mov	r1, r3
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f7ff f988 	bl	800da1c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e70c:	4b1c      	ldr	r3, [pc, #112]	; (800e780 <USBD_SetConfig+0x144>)
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	461a      	mov	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e716:	4b1a      	ldr	r3, [pc, #104]	; (800e780 <USBD_SetConfig+0x144>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7ff f961 	bl	800d9e4 <USBD_SetClassConfig>
 800e722:	4603      	mov	r3, r0
 800e724:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e726:	7bfb      	ldrb	r3, [r7, #15]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00f      	beq.n	800e74c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f8fe 	bl	800e930 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	4619      	mov	r1, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff f96d 	bl	800da1c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2202      	movs	r2, #2
 800e746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e74a:	e014      	b.n	800e776 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 f9ba 	bl	800eac6 <USBD_CtlSendStatus>
    break;
 800e752:	e010      	b.n	800e776 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f9b6 	bl	800eac6 <USBD_CtlSendStatus>
    break;
 800e75a:	e00c      	b.n	800e776 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f8e6 	bl	800e930 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e764:	4b06      	ldr	r3, [pc, #24]	; (800e780 <USBD_SetConfig+0x144>)
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f7ff f956 	bl	800da1c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e770:	2303      	movs	r3, #3
 800e772:	73fb      	strb	r3, [r7, #15]
    break;
 800e774:	bf00      	nop
  }

  return ret;
 800e776:	7bfb      	ldrb	r3, [r7, #15]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	200002bd 	.word	0x200002bd

0800e784 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	88db      	ldrh	r3, [r3, #6]
 800e792:	2b01      	cmp	r3, #1
 800e794:	d004      	beq.n	800e7a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 f8c9 	bl	800e930 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e79e:	e021      	b.n	800e7e4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	db17      	blt.n	800e7da <USBD_GetConfig+0x56>
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	dd02      	ble.n	800e7b4 <USBD_GetConfig+0x30>
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	d00b      	beq.n	800e7ca <USBD_GetConfig+0x46>
 800e7b2:	e012      	b.n	800e7da <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3308      	adds	r3, #8
 800e7be:	2201      	movs	r2, #1
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 f925 	bl	800ea12 <USBD_CtlSendData>
      break;
 800e7c8:	e00c      	b.n	800e7e4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f91d 	bl	800ea12 <USBD_CtlSendData>
      break;
 800e7d8:	e004      	b.n	800e7e4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800e7da:	6839      	ldr	r1, [r7, #0]
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f8a7 	bl	800e930 <USBD_CtlError>
      break;
 800e7e2:	bf00      	nop
}
 800e7e4:	bf00      	nop
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d81e      	bhi.n	800e840 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	88db      	ldrh	r3, [r3, #6]
 800e806:	2b02      	cmp	r3, #2
 800e808:	d004      	beq.n	800e814 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e80a:	6839      	ldr	r1, [r7, #0]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f88f 	bl	800e930 <USBD_CtlError>
      break;
 800e812:	e01a      	b.n	800e84a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2201      	movs	r2, #1
 800e818:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e820:	2b00      	cmp	r3, #0
 800e822:	d005      	beq.n	800e830 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	f043 0202 	orr.w	r2, r3, #2
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	330c      	adds	r3, #12
 800e834:	2202      	movs	r2, #2
 800e836:	4619      	mov	r1, r3
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f8ea 	bl	800ea12 <USBD_CtlSendData>
    break;
 800e83e:	e004      	b.n	800e84a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e840:	6839      	ldr	r1, [r7, #0]
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 f874 	bl	800e930 <USBD_CtlError>
    break;
 800e848:	bf00      	nop
  }
}
 800e84a:	bf00      	nop
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b082      	sub	sp, #8
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	885b      	ldrh	r3, [r3, #2]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d106      	bne.n	800e872 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2201      	movs	r2, #1
 800e868:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 f92a 	bl	800eac6 <USBD_CtlSendStatus>
  }
}
 800e872:	bf00      	nop
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b082      	sub	sp, #8
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e88a:	3b01      	subs	r3, #1
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	d80b      	bhi.n	800e8a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	885b      	ldrh	r3, [r3, #2]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d10c      	bne.n	800e8b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 f910 	bl	800eac6 <USBD_CtlSendStatus>
      }
      break;
 800e8a6:	e004      	b.n	800e8b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f840 	bl	800e930 <USBD_CtlError>
      break;
 800e8b0:	e000      	b.n	800e8b4 <USBD_ClrFeature+0x3a>
      break;
 800e8b2:	bf00      	nop
  }
}
 800e8b4:	bf00      	nop
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	781a      	ldrb	r2, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	781a      	ldrb	r2, [r3, #0]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f7ff fad3 	bl	800de92 <SWAPBYTE>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff fac6 	bl	800de92 <SWAPBYTE>
 800e906:	4603      	mov	r3, r0
 800e908:	461a      	mov	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	3301      	adds	r3, #1
 800e912:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	3301      	adds	r3, #1
 800e918:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e91a:	68f8      	ldr	r0, [r7, #12]
 800e91c:	f7ff fab9 	bl	800de92 <SWAPBYTE>
 800e920:	4603      	mov	r3, r0
 800e922:	461a      	mov	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	80da      	strh	r2, [r3, #6]
}
 800e928:	bf00      	nop
 800e92a:	3710      	adds	r7, #16
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e93a:	2180      	movs	r1, #128	; 0x80
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fcb9 	bl	800f2b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e942:	2100      	movs	r1, #0
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fcb5 	bl	800f2b4 <USBD_LL_StallEP>
}
 800e94a:	bf00      	nop
 800e94c:	3708      	adds	r7, #8
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b086      	sub	sp, #24
 800e956:	af00      	add	r7, sp, #0
 800e958:	60f8      	str	r0, [r7, #12]
 800e95a:	60b9      	str	r1, [r7, #8]
 800e95c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e95e:	2300      	movs	r3, #0
 800e960:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d036      	beq.n	800e9d6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e96c:	6938      	ldr	r0, [r7, #16]
 800e96e:	f000 f836 	bl	800e9de <USBD_GetLen>
 800e972:	4603      	mov	r3, r0
 800e974:	3301      	adds	r3, #1
 800e976:	b29b      	uxth	r3, r3
 800e978:	005b      	lsls	r3, r3, #1
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e980:	7dfb      	ldrb	r3, [r7, #23]
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	4413      	add	r3, r2
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	7812      	ldrb	r2, [r2, #0]
 800e98a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
 800e98e:	3301      	adds	r3, #1
 800e990:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e992:	7dfb      	ldrb	r3, [r7, #23]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	4413      	add	r3, r2
 800e998:	2203      	movs	r2, #3
 800e99a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e99c:	7dfb      	ldrb	r3, [r7, #23]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e9a2:	e013      	b.n	800e9cc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e9a4:	7dfb      	ldrb	r3, [r7, #23]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	7812      	ldrb	r2, [r2, #0]
 800e9ae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	613b      	str	r3, [r7, #16]
    idx++;
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
 800e9be:	68ba      	ldr	r2, [r7, #8]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	701a      	strb	r2, [r3, #0]
    idx++;
 800e9c6:	7dfb      	ldrb	r3, [r7, #23]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d1e7      	bne.n	800e9a4 <USBD_GetString+0x52>
 800e9d4:	e000      	b.n	800e9d8 <USBD_GetString+0x86>
    return;
 800e9d6:	bf00      	nop
  }
}
 800e9d8:	3718      	adds	r7, #24
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e9de:	b480      	push	{r7}
 800e9e0:	b085      	sub	sp, #20
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e9ee:	e005      	b.n	800e9fc <USBD_GetLen+0x1e>
  {
    len++;
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d1f5      	bne.n	800e9f0 <USBD_GetLen+0x12>
  }

  return len;
 800ea04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	60f8      	str	r0, [r7, #12]
 800ea1a:	60b9      	str	r1, [r7, #8]
 800ea1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2202      	movs	r2, #2
 800ea22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	68ba      	ldr	r2, [r7, #8]
 800ea36:	2100      	movs	r1, #0
 800ea38:	68f8      	ldr	r0, [r7, #12]
 800ea3a:	f000 fcc4 	bl	800f3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	2100      	movs	r1, #0
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f000 fcb3 	bl	800f3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800ea60:	2300      	movs	r3, #0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3710      	adds	r7, #16
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	60b9      	str	r1, [r7, #8]
 800ea74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2203      	movs	r2, #3
 800ea7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	2100      	movs	r1, #0
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f000 fcb7 	bl	800f408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68ba      	ldr	r2, [r7, #8]
 800eab4:	2100      	movs	r1, #0
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f000 fca6 	bl	800f408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2204      	movs	r2, #4
 800ead2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ead6:	2300      	movs	r3, #0
 800ead8:	2200      	movs	r2, #0
 800eada:	2100      	movs	r1, #0
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fc72 	bl	800f3c6 <USBD_LL_Transmit>

  return USBD_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2205      	movs	r2, #5
 800eaf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eafc:	2300      	movs	r3, #0
 800eafe:	2200      	movs	r2, #0
 800eb00:	2100      	movs	r1, #0
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 fc80 	bl	800f408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
	...

0800eb14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	4912      	ldr	r1, [pc, #72]	; (800eb64 <MX_USB_DEVICE_Init+0x50>)
 800eb1c:	4812      	ldr	r0, [pc, #72]	; (800eb68 <MX_USB_DEVICE_Init+0x54>)
 800eb1e:	f7fe fef3 	bl	800d908 <USBD_Init>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d001      	beq.n	800eb2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eb28:	f7f5 f9f0 	bl	8003f0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800eb2c:	490f      	ldr	r1, [pc, #60]	; (800eb6c <MX_USB_DEVICE_Init+0x58>)
 800eb2e:	480e      	ldr	r0, [pc, #56]	; (800eb68 <MX_USB_DEVICE_Init+0x54>)
 800eb30:	f7fe ff20 	bl	800d974 <USBD_RegisterClass>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d001      	beq.n	800eb3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800eb3a:	f7f5 f9e7 	bl	8003f0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800eb3e:	490c      	ldr	r1, [pc, #48]	; (800eb70 <MX_USB_DEVICE_Init+0x5c>)
 800eb40:	4809      	ldr	r0, [pc, #36]	; (800eb68 <MX_USB_DEVICE_Init+0x54>)
 800eb42:	f7fe fe75 	bl	800d830 <USBD_CDC_RegisterInterface>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d001      	beq.n	800eb50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800eb4c:	f7f5 f9de 	bl	8003f0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800eb50:	4805      	ldr	r0, [pc, #20]	; (800eb68 <MX_USB_DEVICE_Init+0x54>)
 800eb52:	f7fe ff30 	bl	800d9b6 <USBD_Start>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800eb5c:	f7f5 f9d6 	bl	8003f0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eb60:	bf00      	nop
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	20000178 	.word	0x20000178
 800eb68:	20002814 	.word	0x20002814
 800eb6c:	20000060 	.word	0x20000060
 800eb70:	20000164 	.word	0x20000164

0800eb74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eb78:	2200      	movs	r2, #0
 800eb7a:	4905      	ldr	r1, [pc, #20]	; (800eb90 <CDC_Init_FS+0x1c>)
 800eb7c:	4805      	ldr	r0, [pc, #20]	; (800eb94 <CDC_Init_FS+0x20>)
 800eb7e:	f7fe fe6c 	bl	800d85a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eb82:	4905      	ldr	r1, [pc, #20]	; (800eb98 <CDC_Init_FS+0x24>)
 800eb84:	4803      	ldr	r0, [pc, #12]	; (800eb94 <CDC_Init_FS+0x20>)
 800eb86:	f7fe fe81 	bl	800d88c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eb8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	200032e4 	.word	0x200032e4
 800eb94:	20002814 	.word	0x20002814
 800eb98:	20002ae4 	.word	0x20002ae4

0800eb9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	6039      	str	r1, [r7, #0]
 800ebb6:	71fb      	strb	r3, [r7, #7]
 800ebb8:	4613      	mov	r3, r2
 800ebba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ebbc:	79fb      	ldrb	r3, [r7, #7]
 800ebbe:	2b23      	cmp	r3, #35	; 0x23
 800ebc0:	d84a      	bhi.n	800ec58 <CDC_Control_FS+0xac>
 800ebc2:	a201      	add	r2, pc, #4	; (adr r2, 800ebc8 <CDC_Control_FS+0x1c>)
 800ebc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc8:	0800ec59 	.word	0x0800ec59
 800ebcc:	0800ec59 	.word	0x0800ec59
 800ebd0:	0800ec59 	.word	0x0800ec59
 800ebd4:	0800ec59 	.word	0x0800ec59
 800ebd8:	0800ec59 	.word	0x0800ec59
 800ebdc:	0800ec59 	.word	0x0800ec59
 800ebe0:	0800ec59 	.word	0x0800ec59
 800ebe4:	0800ec59 	.word	0x0800ec59
 800ebe8:	0800ec59 	.word	0x0800ec59
 800ebec:	0800ec59 	.word	0x0800ec59
 800ebf0:	0800ec59 	.word	0x0800ec59
 800ebf4:	0800ec59 	.word	0x0800ec59
 800ebf8:	0800ec59 	.word	0x0800ec59
 800ebfc:	0800ec59 	.word	0x0800ec59
 800ec00:	0800ec59 	.word	0x0800ec59
 800ec04:	0800ec59 	.word	0x0800ec59
 800ec08:	0800ec59 	.word	0x0800ec59
 800ec0c:	0800ec59 	.word	0x0800ec59
 800ec10:	0800ec59 	.word	0x0800ec59
 800ec14:	0800ec59 	.word	0x0800ec59
 800ec18:	0800ec59 	.word	0x0800ec59
 800ec1c:	0800ec59 	.word	0x0800ec59
 800ec20:	0800ec59 	.word	0x0800ec59
 800ec24:	0800ec59 	.word	0x0800ec59
 800ec28:	0800ec59 	.word	0x0800ec59
 800ec2c:	0800ec59 	.word	0x0800ec59
 800ec30:	0800ec59 	.word	0x0800ec59
 800ec34:	0800ec59 	.word	0x0800ec59
 800ec38:	0800ec59 	.word	0x0800ec59
 800ec3c:	0800ec59 	.word	0x0800ec59
 800ec40:	0800ec59 	.word	0x0800ec59
 800ec44:	0800ec59 	.word	0x0800ec59
 800ec48:	0800ec59 	.word	0x0800ec59
 800ec4c:	0800ec59 	.word	0x0800ec59
 800ec50:	0800ec59 	.word	0x0800ec59
 800ec54:	0800ec59 	.word	0x0800ec59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ec58:	bf00      	nop
  }

  return (USBD_OK);
 800ec5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ec72:	6879      	ldr	r1, [r7, #4]
 800ec74:	4805      	ldr	r0, [pc, #20]	; (800ec8c <CDC_Receive_FS+0x24>)
 800ec76:	f7fe fe09 	bl	800d88c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ec7a:	4804      	ldr	r0, [pc, #16]	; (800ec8c <CDC_Receive_FS+0x24>)
 800ec7c:	f7fe fe1a 	bl	800d8b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ec80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20002814 	.word	0x20002814

0800ec90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b087      	sub	sp, #28
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	371c      	adds	r7, #28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	4603      	mov	r3, r0
 800ecbc:	6039      	str	r1, [r7, #0]
 800ecbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2212      	movs	r2, #18
 800ecc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ecc6:	4b03      	ldr	r3, [pc, #12]	; (800ecd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr
 800ecd4:	20000194 	.word	0x20000194

0800ecd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	4603      	mov	r3, r0
 800ece0:	6039      	str	r1, [r7, #0]
 800ece2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	2204      	movs	r2, #4
 800ece8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ecea:	4b03      	ldr	r3, [pc, #12]	; (800ecf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	200001a8 	.word	0x200001a8

0800ecfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	6039      	str	r1, [r7, #0]
 800ed06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d105      	bne.n	800ed1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ed0e:	683a      	ldr	r2, [r7, #0]
 800ed10:	4907      	ldr	r1, [pc, #28]	; (800ed30 <USBD_FS_ProductStrDescriptor+0x34>)
 800ed12:	4808      	ldr	r0, [pc, #32]	; (800ed34 <USBD_FS_ProductStrDescriptor+0x38>)
 800ed14:	f7ff fe1d 	bl	800e952 <USBD_GetString>
 800ed18:	e004      	b.n	800ed24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ed1a:	683a      	ldr	r2, [r7, #0]
 800ed1c:	4904      	ldr	r1, [pc, #16]	; (800ed30 <USBD_FS_ProductStrDescriptor+0x34>)
 800ed1e:	4805      	ldr	r0, [pc, #20]	; (800ed34 <USBD_FS_ProductStrDescriptor+0x38>)
 800ed20:	f7ff fe17 	bl	800e952 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed24:	4b02      	ldr	r3, [pc, #8]	; (800ed30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20003ae4 	.word	0x20003ae4
 800ed34:	080123ac 	.word	0x080123ac

0800ed38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	6039      	str	r1, [r7, #0]
 800ed42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ed44:	683a      	ldr	r2, [r7, #0]
 800ed46:	4904      	ldr	r1, [pc, #16]	; (800ed58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ed48:	4804      	ldr	r0, [pc, #16]	; (800ed5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ed4a:	f7ff fe02 	bl	800e952 <USBD_GetString>
  return USBD_StrDesc;
 800ed4e:	4b02      	ldr	r3, [pc, #8]	; (800ed58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}
 800ed58:	20003ae4 	.word	0x20003ae4
 800ed5c:	080123c4 	.word	0x080123c4

0800ed60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	6039      	str	r1, [r7, #0]
 800ed6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	221a      	movs	r2, #26
 800ed70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ed72:	f000 f843 	bl	800edfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ed76:	4b02      	ldr	r3, [pc, #8]	; (800ed80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3708      	adds	r7, #8
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}
 800ed80:	200001ac 	.word	0x200001ac

0800ed84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	6039      	str	r1, [r7, #0]
 800ed8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ed90:	79fb      	ldrb	r3, [r7, #7]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d105      	bne.n	800eda2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	4907      	ldr	r1, [pc, #28]	; (800edb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ed9a:	4808      	ldr	r0, [pc, #32]	; (800edbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ed9c:	f7ff fdd9 	bl	800e952 <USBD_GetString>
 800eda0:	e004      	b.n	800edac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	4904      	ldr	r1, [pc, #16]	; (800edb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eda6:	4805      	ldr	r0, [pc, #20]	; (800edbc <USBD_FS_ConfigStrDescriptor+0x38>)
 800eda8:	f7ff fdd3 	bl	800e952 <USBD_GetString>
  }
  return USBD_StrDesc;
 800edac:	4b02      	ldr	r3, [pc, #8]	; (800edb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3708      	adds	r7, #8
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}
 800edb6:	bf00      	nop
 800edb8:	20003ae4 	.word	0x20003ae4
 800edbc:	080123d8 	.word	0x080123d8

0800edc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	4603      	mov	r3, r0
 800edc8:	6039      	str	r1, [r7, #0]
 800edca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800edcc:	79fb      	ldrb	r3, [r7, #7]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d105      	bne.n	800edde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800edd2:	683a      	ldr	r2, [r7, #0]
 800edd4:	4907      	ldr	r1, [pc, #28]	; (800edf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800edd6:	4808      	ldr	r0, [pc, #32]	; (800edf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800edd8:	f7ff fdbb 	bl	800e952 <USBD_GetString>
 800eddc:	e004      	b.n	800ede8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800edde:	683a      	ldr	r2, [r7, #0]
 800ede0:	4904      	ldr	r1, [pc, #16]	; (800edf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ede2:	4805      	ldr	r0, [pc, #20]	; (800edf8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ede4:	f7ff fdb5 	bl	800e952 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ede8:	4b02      	ldr	r3, [pc, #8]	; (800edf4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800edea:	4618      	mov	r0, r3
 800edec:	3708      	adds	r7, #8
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	20003ae4 	.word	0x20003ae4
 800edf8:	080123e4 	.word	0x080123e4

0800edfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ee02:	4b0f      	ldr	r3, [pc, #60]	; (800ee40 <Get_SerialNum+0x44>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ee08:	4b0e      	ldr	r3, [pc, #56]	; (800ee44 <Get_SerialNum+0x48>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ee0e:	4b0e      	ldr	r3, [pc, #56]	; (800ee48 <Get_SerialNum+0x4c>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4413      	add	r3, r2
 800ee1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d009      	beq.n	800ee36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ee22:	2208      	movs	r2, #8
 800ee24:	4909      	ldr	r1, [pc, #36]	; (800ee4c <Get_SerialNum+0x50>)
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f000 f814 	bl	800ee54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ee2c:	2204      	movs	r2, #4
 800ee2e:	4908      	ldr	r1, [pc, #32]	; (800ee50 <Get_SerialNum+0x54>)
 800ee30:	68b8      	ldr	r0, [r7, #8]
 800ee32:	f000 f80f 	bl	800ee54 <IntToUnicode>
  }
}
 800ee36:	bf00      	nop
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	1fff7a10 	.word	0x1fff7a10
 800ee44:	1fff7a14 	.word	0x1fff7a14
 800ee48:	1fff7a18 	.word	0x1fff7a18
 800ee4c:	200001ae 	.word	0x200001ae
 800ee50:	200001be 	.word	0x200001be

0800ee54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b087      	sub	sp, #28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	4613      	mov	r3, r2
 800ee60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ee62:	2300      	movs	r3, #0
 800ee64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ee66:	2300      	movs	r3, #0
 800ee68:	75fb      	strb	r3, [r7, #23]
 800ee6a:	e027      	b.n	800eebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	0f1b      	lsrs	r3, r3, #28
 800ee70:	2b09      	cmp	r3, #9
 800ee72:	d80b      	bhi.n	800ee8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	0f1b      	lsrs	r3, r3, #28
 800ee78:	b2da      	uxtb	r2, r3
 800ee7a:	7dfb      	ldrb	r3, [r7, #23]
 800ee7c:	005b      	lsls	r3, r3, #1
 800ee7e:	4619      	mov	r1, r3
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	440b      	add	r3, r1
 800ee84:	3230      	adds	r2, #48	; 0x30
 800ee86:	b2d2      	uxtb	r2, r2
 800ee88:	701a      	strb	r2, [r3, #0]
 800ee8a:	e00a      	b.n	800eea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	0f1b      	lsrs	r3, r3, #28
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
 800ee94:	005b      	lsls	r3, r3, #1
 800ee96:	4619      	mov	r1, r3
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	440b      	add	r3, r1
 800ee9c:	3237      	adds	r2, #55	; 0x37
 800ee9e:	b2d2      	uxtb	r2, r2
 800eea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	011b      	lsls	r3, r3, #4
 800eea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eea8:	7dfb      	ldrb	r3, [r7, #23]
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	3301      	adds	r3, #1
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eeb6:	7dfb      	ldrb	r3, [r7, #23]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	75fb      	strb	r3, [r7, #23]
 800eebc:	7dfa      	ldrb	r2, [r7, #23]
 800eebe:	79fb      	ldrb	r3, [r7, #7]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d3d3      	bcc.n	800ee6c <IntToUnicode+0x18>
  }
}
 800eec4:	bf00      	nop
 800eec6:	371c      	adds	r7, #28
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b08a      	sub	sp, #40	; 0x28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eed8:	f107 0314 	add.w	r3, r7, #20
 800eedc:	2200      	movs	r2, #0
 800eede:	601a      	str	r2, [r3, #0]
 800eee0:	605a      	str	r2, [r3, #4]
 800eee2:	609a      	str	r2, [r3, #8]
 800eee4:	60da      	str	r2, [r3, #12]
 800eee6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eef0:	d13a      	bne.n	800ef68 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eef2:	2300      	movs	r3, #0
 800eef4:	613b      	str	r3, [r7, #16]
 800eef6:	4b1e      	ldr	r3, [pc, #120]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800eef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eefa:	4a1d      	ldr	r2, [pc, #116]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800eefc:	f043 0301 	orr.w	r3, r3, #1
 800ef00:	6313      	str	r3, [r2, #48]	; 0x30
 800ef02:	4b1b      	ldr	r3, [pc, #108]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800ef04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef06:	f003 0301 	and.w	r3, r3, #1
 800ef0a:	613b      	str	r3, [r7, #16]
 800ef0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ef0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ef12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef14:	2302      	movs	r3, #2
 800ef16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef1c:	2303      	movs	r3, #3
 800ef1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef20:	230a      	movs	r3, #10
 800ef22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef24:	f107 0314 	add.w	r3, r7, #20
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4812      	ldr	r0, [pc, #72]	; (800ef74 <HAL_PCD_MspInit+0xa4>)
 800ef2c:	f7f6 fe58 	bl	8005be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef30:	4b0f      	ldr	r3, [pc, #60]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800ef32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef34:	4a0e      	ldr	r2, [pc, #56]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800ef36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef3a:	6353      	str	r3, [r2, #52]	; 0x34
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	4b0b      	ldr	r3, [pc, #44]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800ef42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef44:	4a0a      	ldr	r2, [pc, #40]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800ef46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef4a:	6453      	str	r3, [r2, #68]	; 0x44
 800ef4c:	4b08      	ldr	r3, [pc, #32]	; (800ef70 <HAL_PCD_MspInit+0xa0>)
 800ef4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef54:	60fb      	str	r3, [r7, #12]
 800ef56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2100      	movs	r1, #0
 800ef5c:	2043      	movs	r0, #67	; 0x43
 800ef5e:	f7f6 faf0 	bl	8005542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ef62:	2043      	movs	r0, #67	; 0x43
 800ef64:	f7f6 fb09 	bl	800557a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ef68:	bf00      	nop
 800ef6a:	3728      	adds	r7, #40	; 0x28
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	40023800 	.word	0x40023800
 800ef74:	40020000 	.word	0x40020000

0800ef78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	4610      	mov	r0, r2
 800ef90:	f7fe fd5c 	bl	800da4c <USBD_LL_SetupStage>
}
 800ef94:	bf00      	nop
 800ef96:	3708      	adds	r7, #8
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b082      	sub	sp, #8
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	460b      	mov	r3, r1
 800efa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800efae:	78fa      	ldrb	r2, [r7, #3]
 800efb0:	6879      	ldr	r1, [r7, #4]
 800efb2:	4613      	mov	r3, r2
 800efb4:	00db      	lsls	r3, r3, #3
 800efb6:	1a9b      	subs	r3, r3, r2
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	440b      	add	r3, r1
 800efbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	78fb      	ldrb	r3, [r7, #3]
 800efc4:	4619      	mov	r1, r3
 800efc6:	f7fe fd94 	bl	800daf2 <USBD_LL_DataOutStage>
}
 800efca:	bf00      	nop
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b082      	sub	sp, #8
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	460b      	mov	r3, r1
 800efdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800efe4:	78fa      	ldrb	r2, [r7, #3]
 800efe6:	6879      	ldr	r1, [r7, #4]
 800efe8:	4613      	mov	r3, r2
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	1a9b      	subs	r3, r3, r2
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	440b      	add	r3, r1
 800eff2:	3348      	adds	r3, #72	; 0x48
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	78fb      	ldrb	r3, [r7, #3]
 800eff8:	4619      	mov	r1, r3
 800effa:	f7fe fddd 	bl	800dbb8 <USBD_LL_DataInStage>
}
 800effe:	bf00      	nop
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f006:	b580      	push	{r7, lr}
 800f008:	b082      	sub	sp, #8
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f014:	4618      	mov	r0, r3
 800f016:	f7fe fee1 	bl	800dddc <USBD_LL_SOF>
}
 800f01a:	bf00      	nop
 800f01c:	3708      	adds	r7, #8
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f02a:	2301      	movs	r3, #1
 800f02c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d102      	bne.n	800f03c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f036:	2300      	movs	r3, #0
 800f038:	73fb      	strb	r3, [r7, #15]
 800f03a:	e008      	b.n	800f04e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	68db      	ldr	r3, [r3, #12]
 800f040:	2b02      	cmp	r3, #2
 800f042:	d102      	bne.n	800f04a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f044:	2301      	movs	r3, #1
 800f046:	73fb      	strb	r3, [r7, #15]
 800f048:	e001      	b.n	800f04e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f04a:	f7f4 ff5f 	bl	8003f0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f054:	7bfa      	ldrb	r2, [r7, #15]
 800f056:	4611      	mov	r1, r2
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe fe84 	bl	800dd66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f064:	4618      	mov	r0, r3
 800f066:	f7fe fe3d 	bl	800dce4 <USBD_LL_Reset>
}
 800f06a:	bf00      	nop
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
	...

0800f074 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe fe7f 	bl	800dd86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	6812      	ldr	r2, [r2, #0]
 800f096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f09a:	f043 0301 	orr.w	r3, r3, #1
 800f09e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6a1b      	ldr	r3, [r3, #32]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d005      	beq.n	800f0b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f0a8:	4b04      	ldr	r3, [pc, #16]	; (800f0bc <HAL_PCD_SuspendCallback+0x48>)
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	4a03      	ldr	r2, [pc, #12]	; (800f0bc <HAL_PCD_SuspendCallback+0x48>)
 800f0ae:	f043 0306 	orr.w	r3, r3, #6
 800f0b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f0b4:	bf00      	nop
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	e000ed00 	.word	0xe000ed00

0800f0c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fe fe6e 	bl	800ddb0 <USBD_LL_Resume>
}
 800f0d4:	bf00      	nop
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f0ee:	78fa      	ldrb	r2, [r7, #3]
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fe fe99 	bl	800de2a <USBD_LL_IsoOUTIncomplete>
}
 800f0f8:	bf00      	nop
 800f0fa:	3708      	adds	r7, #8
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	460b      	mov	r3, r1
 800f10a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f112:	78fa      	ldrb	r2, [r7, #3]
 800f114:	4611      	mov	r1, r2
 800f116:	4618      	mov	r0, r3
 800f118:	f7fe fe7a 	bl	800de10 <USBD_LL_IsoINIncomplete>
}
 800f11c:	bf00      	nop
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f132:	4618      	mov	r0, r3
 800f134:	f7fe fe86 	bl	800de44 <USBD_LL_DevConnected>
}
 800f138:	bf00      	nop
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fe fe83 	bl	800de5a <USBD_LL_DevDisconnected>
}
 800f154:	bf00      	nop
 800f156:	3708      	adds	r7, #8
 800f158:	46bd      	mov	sp, r7
 800f15a:	bd80      	pop	{r7, pc}

0800f15c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d13c      	bne.n	800f1e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f16c:	4a20      	ldr	r2, [pc, #128]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a1e      	ldr	r2, [pc, #120]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f178:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f17c:	4b1c      	ldr	r3, [pc, #112]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f17e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f182:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f184:	4b1a      	ldr	r3, [pc, #104]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f186:	2204      	movs	r2, #4
 800f188:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f18a:	4b19      	ldr	r3, [pc, #100]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f18c:	2202      	movs	r2, #2
 800f18e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f190:	4b17      	ldr	r3, [pc, #92]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f192:	2200      	movs	r2, #0
 800f194:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f196:	4b16      	ldr	r3, [pc, #88]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f198:	2202      	movs	r2, #2
 800f19a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f19c:	4b14      	ldr	r3, [pc, #80]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f19e:	2200      	movs	r2, #0
 800f1a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f1a2:	4b13      	ldr	r3, [pc, #76]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f1a8:	4b11      	ldr	r3, [pc, #68]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f1ae:	4b10      	ldr	r3, [pc, #64]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f1b4:	4b0e      	ldr	r3, [pc, #56]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f1ba:	480d      	ldr	r0, [pc, #52]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1bc:	f7f9 fc37 	bl	8008a2e <HAL_PCD_Init>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d001      	beq.n	800f1ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f1c6:	f7f4 fea1 	bl	8003f0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f1ca:	2180      	movs	r1, #128	; 0x80
 800f1cc:	4808      	ldr	r0, [pc, #32]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1ce:	f7fa fd94 	bl	8009cfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f1d2:	2240      	movs	r2, #64	; 0x40
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	4806      	ldr	r0, [pc, #24]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1d8:	f7fa fd48 	bl	8009c6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f1dc:	2280      	movs	r2, #128	; 0x80
 800f1de:	2101      	movs	r1, #1
 800f1e0:	4803      	ldr	r0, [pc, #12]	; (800f1f0 <USBD_LL_Init+0x94>)
 800f1e2:	f7fa fd43 	bl	8009c6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3708      	adds	r7, #8
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20003ce4 	.word	0x20003ce4

0800f1f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f200:	2300      	movs	r3, #0
 800f202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7f9 fd2c 	bl	8008c68 <HAL_PCD_Start>
 800f210:	4603      	mov	r3, r0
 800f212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f214:	7bfb      	ldrb	r3, [r7, #15]
 800f216:	4618      	mov	r0, r3
 800f218:	f000 f92a 	bl	800f470 <USBD_Get_USB_Status>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f220:	7bbb      	ldrb	r3, [r7, #14]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b084      	sub	sp, #16
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	4608      	mov	r0, r1
 800f234:	4611      	mov	r1, r2
 800f236:	461a      	mov	r2, r3
 800f238:	4603      	mov	r3, r0
 800f23a:	70fb      	strb	r3, [r7, #3]
 800f23c:	460b      	mov	r3, r1
 800f23e:	70bb      	strb	r3, [r7, #2]
 800f240:	4613      	mov	r3, r2
 800f242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f244:	2300      	movs	r3, #0
 800f246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f248:	2300      	movs	r3, #0
 800f24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f252:	78bb      	ldrb	r3, [r7, #2]
 800f254:	883a      	ldrh	r2, [r7, #0]
 800f256:	78f9      	ldrb	r1, [r7, #3]
 800f258:	f7fa f910 	bl	800947c <HAL_PCD_EP_Open>
 800f25c:	4603      	mov	r3, r0
 800f25e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	4618      	mov	r0, r3
 800f264:	f000 f904 	bl	800f470 <USBD_Get_USB_Status>
 800f268:	4603      	mov	r3, r0
 800f26a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f26c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3710      	adds	r7, #16
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}

0800f276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f276:	b580      	push	{r7, lr}
 800f278:	b084      	sub	sp, #16
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
 800f27e:	460b      	mov	r3, r1
 800f280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f282:	2300      	movs	r3, #0
 800f284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f286:	2300      	movs	r3, #0
 800f288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f290:	78fa      	ldrb	r2, [r7, #3]
 800f292:	4611      	mov	r1, r2
 800f294:	4618      	mov	r0, r3
 800f296:	f7fa f959 	bl	800954c <HAL_PCD_EP_Close>
 800f29a:	4603      	mov	r3, r0
 800f29c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f29e:	7bfb      	ldrb	r3, [r7, #15]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f000 f8e5 	bl	800f470 <USBD_Get_USB_Status>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2ce:	78fa      	ldrb	r2, [r7, #3]
 800f2d0:	4611      	mov	r1, r2
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fa fa31 	bl	800973a <HAL_PCD_EP_SetStall>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f000 f8c6 	bl	800f470 <USBD_Get_USB_Status>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b084      	sub	sp, #16
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2fe:	2300      	movs	r3, #0
 800f300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f302:	2300      	movs	r3, #0
 800f304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f30c:	78fa      	ldrb	r2, [r7, #3]
 800f30e:	4611      	mov	r1, r2
 800f310:	4618      	mov	r0, r3
 800f312:	f7fa fa76 	bl	8009802 <HAL_PCD_EP_ClrStall>
 800f316:	4603      	mov	r3, r0
 800f318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 f8a7 	bl	800f470 <USBD_Get_USB_Status>
 800f322:	4603      	mov	r3, r0
 800f324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f326:	7bbb      	ldrb	r3, [r7, #14]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f330:	b480      	push	{r7}
 800f332:	b085      	sub	sp, #20
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f342:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	da0b      	bge.n	800f364 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f34c:	78fb      	ldrb	r3, [r7, #3]
 800f34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f352:	68f9      	ldr	r1, [r7, #12]
 800f354:	4613      	mov	r3, r2
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	1a9b      	subs	r3, r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	440b      	add	r3, r1
 800f35e:	333e      	adds	r3, #62	; 0x3e
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	e00b      	b.n	800f37c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f364:	78fb      	ldrb	r3, [r7, #3]
 800f366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	4613      	mov	r3, r2
 800f36e:	00db      	lsls	r3, r3, #3
 800f370:	1a9b      	subs	r3, r3, r2
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	440b      	add	r3, r1
 800f376:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f37a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3714      	adds	r7, #20
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	460b      	mov	r3, r1
 800f392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f394:	2300      	movs	r3, #0
 800f396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f398:	2300      	movs	r3, #0
 800f39a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f3a2:	78fa      	ldrb	r2, [r7, #3]
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fa f843 	bl	8009432 <HAL_PCD_SetAddress>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 f85c 	bl	800f470 <USBD_Get_USB_Status>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b086      	sub	sp, #24
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	60f8      	str	r0, [r7, #12]
 800f3ce:	607a      	str	r2, [r7, #4]
 800f3d0:	603b      	str	r3, [r7, #0]
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f3e4:	7af9      	ldrb	r1, [r7, #11]
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	f7fa f95c 	bl	80096a6 <HAL_PCD_EP_Transmit>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3f2:	7dfb      	ldrb	r3, [r7, #23]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 f83b 	bl	800f470 <USBD_Get_USB_Status>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f3fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	607a      	str	r2, [r7, #4]
 800f412:	603b      	str	r3, [r7, #0]
 800f414:	460b      	mov	r3, r1
 800f416:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f418:	2300      	movs	r3, #0
 800f41a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f41c:	2300      	movs	r3, #0
 800f41e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f426:	7af9      	ldrb	r1, [r7, #11]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	f7fa f8d8 	bl	80095e0 <HAL_PCD_EP_Receive>
 800f430:	4603      	mov	r3, r0
 800f432:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f434:	7dfb      	ldrb	r3, [r7, #23]
 800f436:	4618      	mov	r0, r3
 800f438:	f000 f81a 	bl	800f470 <USBD_Get_USB_Status>
 800f43c:	4603      	mov	r3, r0
 800f43e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f440:	7dbb      	ldrb	r3, [r7, #22]
}
 800f442:	4618      	mov	r0, r3
 800f444:	3718      	adds	r7, #24
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b082      	sub	sp, #8
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
 800f452:	460b      	mov	r3, r1
 800f454:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f45c:	78fa      	ldrb	r2, [r7, #3]
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f7fa f908 	bl	8009676 <HAL_PCD_EP_GetRxCount>
 800f466:	4603      	mov	r3, r0
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	4603      	mov	r3, r0
 800f478:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f47a:	2300      	movs	r3, #0
 800f47c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f47e:	79fb      	ldrb	r3, [r7, #7]
 800f480:	2b03      	cmp	r3, #3
 800f482:	d817      	bhi.n	800f4b4 <USBD_Get_USB_Status+0x44>
 800f484:	a201      	add	r2, pc, #4	; (adr r2, 800f48c <USBD_Get_USB_Status+0x1c>)
 800f486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48a:	bf00      	nop
 800f48c:	0800f49d 	.word	0x0800f49d
 800f490:	0800f4a3 	.word	0x0800f4a3
 800f494:	0800f4a9 	.word	0x0800f4a9
 800f498:	0800f4af 	.word	0x0800f4af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f49c:	2300      	movs	r3, #0
 800f49e:	73fb      	strb	r3, [r7, #15]
    break;
 800f4a0:	e00b      	b.n	800f4ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800f4a6:	e008      	b.n	800f4ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800f4ac:	e005      	b.n	800f4ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b2:	e002      	b.n	800f4ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f4b4:	2303      	movs	r3, #3
 800f4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800f4b8:	bf00      	nop
  }
  return usb_status;
 800f4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3714      	adds	r7, #20
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <__errno>:
 800f4c8:	4b01      	ldr	r3, [pc, #4]	; (800f4d0 <__errno+0x8>)
 800f4ca:	6818      	ldr	r0, [r3, #0]
 800f4cc:	4770      	bx	lr
 800f4ce:	bf00      	nop
 800f4d0:	200001c8 	.word	0x200001c8

0800f4d4 <__libc_init_array>:
 800f4d4:	b570      	push	{r4, r5, r6, lr}
 800f4d6:	4e0d      	ldr	r6, [pc, #52]	; (800f50c <__libc_init_array+0x38>)
 800f4d8:	4c0d      	ldr	r4, [pc, #52]	; (800f510 <__libc_init_array+0x3c>)
 800f4da:	1ba4      	subs	r4, r4, r6
 800f4dc:	10a4      	asrs	r4, r4, #2
 800f4de:	2500      	movs	r5, #0
 800f4e0:	42a5      	cmp	r5, r4
 800f4e2:	d109      	bne.n	800f4f8 <__libc_init_array+0x24>
 800f4e4:	4e0b      	ldr	r6, [pc, #44]	; (800f514 <__libc_init_array+0x40>)
 800f4e6:	4c0c      	ldr	r4, [pc, #48]	; (800f518 <__libc_init_array+0x44>)
 800f4e8:	f002 ff28 	bl	801233c <_init>
 800f4ec:	1ba4      	subs	r4, r4, r6
 800f4ee:	10a4      	asrs	r4, r4, #2
 800f4f0:	2500      	movs	r5, #0
 800f4f2:	42a5      	cmp	r5, r4
 800f4f4:	d105      	bne.n	800f502 <__libc_init_array+0x2e>
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}
 800f4f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4fc:	4798      	blx	r3
 800f4fe:	3501      	adds	r5, #1
 800f500:	e7ee      	b.n	800f4e0 <__libc_init_array+0xc>
 800f502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f506:	4798      	blx	r3
 800f508:	3501      	adds	r5, #1
 800f50a:	e7f2      	b.n	800f4f2 <__libc_init_array+0x1e>
 800f50c:	08012678 	.word	0x08012678
 800f510:	08012678 	.word	0x08012678
 800f514:	08012678 	.word	0x08012678
 800f518:	0801267c 	.word	0x0801267c

0800f51c <malloc>:
 800f51c:	4b02      	ldr	r3, [pc, #8]	; (800f528 <malloc+0xc>)
 800f51e:	4601      	mov	r1, r0
 800f520:	6818      	ldr	r0, [r3, #0]
 800f522:	f000 b861 	b.w	800f5e8 <_malloc_r>
 800f526:	bf00      	nop
 800f528:	200001c8 	.word	0x200001c8

0800f52c <free>:
 800f52c:	4b02      	ldr	r3, [pc, #8]	; (800f538 <free+0xc>)
 800f52e:	4601      	mov	r1, r0
 800f530:	6818      	ldr	r0, [r3, #0]
 800f532:	f000 b80b 	b.w	800f54c <_free_r>
 800f536:	bf00      	nop
 800f538:	200001c8 	.word	0x200001c8

0800f53c <memset>:
 800f53c:	4402      	add	r2, r0
 800f53e:	4603      	mov	r3, r0
 800f540:	4293      	cmp	r3, r2
 800f542:	d100      	bne.n	800f546 <memset+0xa>
 800f544:	4770      	bx	lr
 800f546:	f803 1b01 	strb.w	r1, [r3], #1
 800f54a:	e7f9      	b.n	800f540 <memset+0x4>

0800f54c <_free_r>:
 800f54c:	b538      	push	{r3, r4, r5, lr}
 800f54e:	4605      	mov	r5, r0
 800f550:	2900      	cmp	r1, #0
 800f552:	d045      	beq.n	800f5e0 <_free_r+0x94>
 800f554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f558:	1f0c      	subs	r4, r1, #4
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	bfb8      	it	lt
 800f55e:	18e4      	addlt	r4, r4, r3
 800f560:	f000 f8d4 	bl	800f70c <__malloc_lock>
 800f564:	4a1f      	ldr	r2, [pc, #124]	; (800f5e4 <_free_r+0x98>)
 800f566:	6813      	ldr	r3, [r2, #0]
 800f568:	4610      	mov	r0, r2
 800f56a:	b933      	cbnz	r3, 800f57a <_free_r+0x2e>
 800f56c:	6063      	str	r3, [r4, #4]
 800f56e:	6014      	str	r4, [r2, #0]
 800f570:	4628      	mov	r0, r5
 800f572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f576:	f000 b8ca 	b.w	800f70e <__malloc_unlock>
 800f57a:	42a3      	cmp	r3, r4
 800f57c:	d90c      	bls.n	800f598 <_free_r+0x4c>
 800f57e:	6821      	ldr	r1, [r4, #0]
 800f580:	1862      	adds	r2, r4, r1
 800f582:	4293      	cmp	r3, r2
 800f584:	bf04      	itt	eq
 800f586:	681a      	ldreq	r2, [r3, #0]
 800f588:	685b      	ldreq	r3, [r3, #4]
 800f58a:	6063      	str	r3, [r4, #4]
 800f58c:	bf04      	itt	eq
 800f58e:	1852      	addeq	r2, r2, r1
 800f590:	6022      	streq	r2, [r4, #0]
 800f592:	6004      	str	r4, [r0, #0]
 800f594:	e7ec      	b.n	800f570 <_free_r+0x24>
 800f596:	4613      	mov	r3, r2
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	b10a      	cbz	r2, 800f5a0 <_free_r+0x54>
 800f59c:	42a2      	cmp	r2, r4
 800f59e:	d9fa      	bls.n	800f596 <_free_r+0x4a>
 800f5a0:	6819      	ldr	r1, [r3, #0]
 800f5a2:	1858      	adds	r0, r3, r1
 800f5a4:	42a0      	cmp	r0, r4
 800f5a6:	d10b      	bne.n	800f5c0 <_free_r+0x74>
 800f5a8:	6820      	ldr	r0, [r4, #0]
 800f5aa:	4401      	add	r1, r0
 800f5ac:	1858      	adds	r0, r3, r1
 800f5ae:	4282      	cmp	r2, r0
 800f5b0:	6019      	str	r1, [r3, #0]
 800f5b2:	d1dd      	bne.n	800f570 <_free_r+0x24>
 800f5b4:	6810      	ldr	r0, [r2, #0]
 800f5b6:	6852      	ldr	r2, [r2, #4]
 800f5b8:	605a      	str	r2, [r3, #4]
 800f5ba:	4401      	add	r1, r0
 800f5bc:	6019      	str	r1, [r3, #0]
 800f5be:	e7d7      	b.n	800f570 <_free_r+0x24>
 800f5c0:	d902      	bls.n	800f5c8 <_free_r+0x7c>
 800f5c2:	230c      	movs	r3, #12
 800f5c4:	602b      	str	r3, [r5, #0]
 800f5c6:	e7d3      	b.n	800f570 <_free_r+0x24>
 800f5c8:	6820      	ldr	r0, [r4, #0]
 800f5ca:	1821      	adds	r1, r4, r0
 800f5cc:	428a      	cmp	r2, r1
 800f5ce:	bf04      	itt	eq
 800f5d0:	6811      	ldreq	r1, [r2, #0]
 800f5d2:	6852      	ldreq	r2, [r2, #4]
 800f5d4:	6062      	str	r2, [r4, #4]
 800f5d6:	bf04      	itt	eq
 800f5d8:	1809      	addeq	r1, r1, r0
 800f5da:	6021      	streq	r1, [r4, #0]
 800f5dc:	605c      	str	r4, [r3, #4]
 800f5de:	e7c7      	b.n	800f570 <_free_r+0x24>
 800f5e0:	bd38      	pop	{r3, r4, r5, pc}
 800f5e2:	bf00      	nop
 800f5e4:	200002c0 	.word	0x200002c0

0800f5e8 <_malloc_r>:
 800f5e8:	b570      	push	{r4, r5, r6, lr}
 800f5ea:	1ccd      	adds	r5, r1, #3
 800f5ec:	f025 0503 	bic.w	r5, r5, #3
 800f5f0:	3508      	adds	r5, #8
 800f5f2:	2d0c      	cmp	r5, #12
 800f5f4:	bf38      	it	cc
 800f5f6:	250c      	movcc	r5, #12
 800f5f8:	2d00      	cmp	r5, #0
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	db01      	blt.n	800f602 <_malloc_r+0x1a>
 800f5fe:	42a9      	cmp	r1, r5
 800f600:	d903      	bls.n	800f60a <_malloc_r+0x22>
 800f602:	230c      	movs	r3, #12
 800f604:	6033      	str	r3, [r6, #0]
 800f606:	2000      	movs	r0, #0
 800f608:	bd70      	pop	{r4, r5, r6, pc}
 800f60a:	f000 f87f 	bl	800f70c <__malloc_lock>
 800f60e:	4a21      	ldr	r2, [pc, #132]	; (800f694 <_malloc_r+0xac>)
 800f610:	6814      	ldr	r4, [r2, #0]
 800f612:	4621      	mov	r1, r4
 800f614:	b991      	cbnz	r1, 800f63c <_malloc_r+0x54>
 800f616:	4c20      	ldr	r4, [pc, #128]	; (800f698 <_malloc_r+0xb0>)
 800f618:	6823      	ldr	r3, [r4, #0]
 800f61a:	b91b      	cbnz	r3, 800f624 <_malloc_r+0x3c>
 800f61c:	4630      	mov	r0, r6
 800f61e:	f000 f83d 	bl	800f69c <_sbrk_r>
 800f622:	6020      	str	r0, [r4, #0]
 800f624:	4629      	mov	r1, r5
 800f626:	4630      	mov	r0, r6
 800f628:	f000 f838 	bl	800f69c <_sbrk_r>
 800f62c:	1c43      	adds	r3, r0, #1
 800f62e:	d124      	bne.n	800f67a <_malloc_r+0x92>
 800f630:	230c      	movs	r3, #12
 800f632:	6033      	str	r3, [r6, #0]
 800f634:	4630      	mov	r0, r6
 800f636:	f000 f86a 	bl	800f70e <__malloc_unlock>
 800f63a:	e7e4      	b.n	800f606 <_malloc_r+0x1e>
 800f63c:	680b      	ldr	r3, [r1, #0]
 800f63e:	1b5b      	subs	r3, r3, r5
 800f640:	d418      	bmi.n	800f674 <_malloc_r+0x8c>
 800f642:	2b0b      	cmp	r3, #11
 800f644:	d90f      	bls.n	800f666 <_malloc_r+0x7e>
 800f646:	600b      	str	r3, [r1, #0]
 800f648:	50cd      	str	r5, [r1, r3]
 800f64a:	18cc      	adds	r4, r1, r3
 800f64c:	4630      	mov	r0, r6
 800f64e:	f000 f85e 	bl	800f70e <__malloc_unlock>
 800f652:	f104 000b 	add.w	r0, r4, #11
 800f656:	1d23      	adds	r3, r4, #4
 800f658:	f020 0007 	bic.w	r0, r0, #7
 800f65c:	1ac3      	subs	r3, r0, r3
 800f65e:	d0d3      	beq.n	800f608 <_malloc_r+0x20>
 800f660:	425a      	negs	r2, r3
 800f662:	50e2      	str	r2, [r4, r3]
 800f664:	e7d0      	b.n	800f608 <_malloc_r+0x20>
 800f666:	428c      	cmp	r4, r1
 800f668:	684b      	ldr	r3, [r1, #4]
 800f66a:	bf16      	itet	ne
 800f66c:	6063      	strne	r3, [r4, #4]
 800f66e:	6013      	streq	r3, [r2, #0]
 800f670:	460c      	movne	r4, r1
 800f672:	e7eb      	b.n	800f64c <_malloc_r+0x64>
 800f674:	460c      	mov	r4, r1
 800f676:	6849      	ldr	r1, [r1, #4]
 800f678:	e7cc      	b.n	800f614 <_malloc_r+0x2c>
 800f67a:	1cc4      	adds	r4, r0, #3
 800f67c:	f024 0403 	bic.w	r4, r4, #3
 800f680:	42a0      	cmp	r0, r4
 800f682:	d005      	beq.n	800f690 <_malloc_r+0xa8>
 800f684:	1a21      	subs	r1, r4, r0
 800f686:	4630      	mov	r0, r6
 800f688:	f000 f808 	bl	800f69c <_sbrk_r>
 800f68c:	3001      	adds	r0, #1
 800f68e:	d0cf      	beq.n	800f630 <_malloc_r+0x48>
 800f690:	6025      	str	r5, [r4, #0]
 800f692:	e7db      	b.n	800f64c <_malloc_r+0x64>
 800f694:	200002c0 	.word	0x200002c0
 800f698:	200002c4 	.word	0x200002c4

0800f69c <_sbrk_r>:
 800f69c:	b538      	push	{r3, r4, r5, lr}
 800f69e:	4c06      	ldr	r4, [pc, #24]	; (800f6b8 <_sbrk_r+0x1c>)
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	4608      	mov	r0, r1
 800f6a6:	6023      	str	r3, [r4, #0]
 800f6a8:	f7f4 fd2e 	bl	8004108 <_sbrk>
 800f6ac:	1c43      	adds	r3, r0, #1
 800f6ae:	d102      	bne.n	800f6b6 <_sbrk_r+0x1a>
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	b103      	cbz	r3, 800f6b6 <_sbrk_r+0x1a>
 800f6b4:	602b      	str	r3, [r5, #0]
 800f6b6:	bd38      	pop	{r3, r4, r5, pc}
 800f6b8:	200040ec 	.word	0x200040ec

0800f6bc <siprintf>:
 800f6bc:	b40e      	push	{r1, r2, r3}
 800f6be:	b500      	push	{lr}
 800f6c0:	b09c      	sub	sp, #112	; 0x70
 800f6c2:	ab1d      	add	r3, sp, #116	; 0x74
 800f6c4:	9002      	str	r0, [sp, #8]
 800f6c6:	9006      	str	r0, [sp, #24]
 800f6c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6cc:	4809      	ldr	r0, [pc, #36]	; (800f6f4 <siprintf+0x38>)
 800f6ce:	9107      	str	r1, [sp, #28]
 800f6d0:	9104      	str	r1, [sp, #16]
 800f6d2:	4909      	ldr	r1, [pc, #36]	; (800f6f8 <siprintf+0x3c>)
 800f6d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6d8:	9105      	str	r1, [sp, #20]
 800f6da:	6800      	ldr	r0, [r0, #0]
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	a902      	add	r1, sp, #8
 800f6e0:	f000 f870 	bl	800f7c4 <_svfiprintf_r>
 800f6e4:	9b02      	ldr	r3, [sp, #8]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	701a      	strb	r2, [r3, #0]
 800f6ea:	b01c      	add	sp, #112	; 0x70
 800f6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6f0:	b003      	add	sp, #12
 800f6f2:	4770      	bx	lr
 800f6f4:	200001c8 	.word	0x200001c8
 800f6f8:	ffff0208 	.word	0xffff0208

0800f6fc <strcpy>:
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f702:	f803 2b01 	strb.w	r2, [r3], #1
 800f706:	2a00      	cmp	r2, #0
 800f708:	d1f9      	bne.n	800f6fe <strcpy+0x2>
 800f70a:	4770      	bx	lr

0800f70c <__malloc_lock>:
 800f70c:	4770      	bx	lr

0800f70e <__malloc_unlock>:
 800f70e:	4770      	bx	lr

0800f710 <__ssputs_r>:
 800f710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f714:	688e      	ldr	r6, [r1, #8]
 800f716:	429e      	cmp	r6, r3
 800f718:	4682      	mov	sl, r0
 800f71a:	460c      	mov	r4, r1
 800f71c:	4690      	mov	r8, r2
 800f71e:	4699      	mov	r9, r3
 800f720:	d837      	bhi.n	800f792 <__ssputs_r+0x82>
 800f722:	898a      	ldrh	r2, [r1, #12]
 800f724:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f728:	d031      	beq.n	800f78e <__ssputs_r+0x7e>
 800f72a:	6825      	ldr	r5, [r4, #0]
 800f72c:	6909      	ldr	r1, [r1, #16]
 800f72e:	1a6f      	subs	r7, r5, r1
 800f730:	6965      	ldr	r5, [r4, #20]
 800f732:	2302      	movs	r3, #2
 800f734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f738:	fb95 f5f3 	sdiv	r5, r5, r3
 800f73c:	f109 0301 	add.w	r3, r9, #1
 800f740:	443b      	add	r3, r7
 800f742:	429d      	cmp	r5, r3
 800f744:	bf38      	it	cc
 800f746:	461d      	movcc	r5, r3
 800f748:	0553      	lsls	r3, r2, #21
 800f74a:	d530      	bpl.n	800f7ae <__ssputs_r+0x9e>
 800f74c:	4629      	mov	r1, r5
 800f74e:	f7ff ff4b 	bl	800f5e8 <_malloc_r>
 800f752:	4606      	mov	r6, r0
 800f754:	b950      	cbnz	r0, 800f76c <__ssputs_r+0x5c>
 800f756:	230c      	movs	r3, #12
 800f758:	f8ca 3000 	str.w	r3, [sl]
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f762:	81a3      	strh	r3, [r4, #12]
 800f764:	f04f 30ff 	mov.w	r0, #4294967295
 800f768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f76c:	463a      	mov	r2, r7
 800f76e:	6921      	ldr	r1, [r4, #16]
 800f770:	f000 faa8 	bl	800fcc4 <memcpy>
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	6126      	str	r6, [r4, #16]
 800f782:	6165      	str	r5, [r4, #20]
 800f784:	443e      	add	r6, r7
 800f786:	1bed      	subs	r5, r5, r7
 800f788:	6026      	str	r6, [r4, #0]
 800f78a:	60a5      	str	r5, [r4, #8]
 800f78c:	464e      	mov	r6, r9
 800f78e:	454e      	cmp	r6, r9
 800f790:	d900      	bls.n	800f794 <__ssputs_r+0x84>
 800f792:	464e      	mov	r6, r9
 800f794:	4632      	mov	r2, r6
 800f796:	4641      	mov	r1, r8
 800f798:	6820      	ldr	r0, [r4, #0]
 800f79a:	f000 fa9e 	bl	800fcda <memmove>
 800f79e:	68a3      	ldr	r3, [r4, #8]
 800f7a0:	1b9b      	subs	r3, r3, r6
 800f7a2:	60a3      	str	r3, [r4, #8]
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	441e      	add	r6, r3
 800f7a8:	6026      	str	r6, [r4, #0]
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	e7dc      	b.n	800f768 <__ssputs_r+0x58>
 800f7ae:	462a      	mov	r2, r5
 800f7b0:	f000 faac 	bl	800fd0c <_realloc_r>
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d1e2      	bne.n	800f780 <__ssputs_r+0x70>
 800f7ba:	6921      	ldr	r1, [r4, #16]
 800f7bc:	4650      	mov	r0, sl
 800f7be:	f7ff fec5 	bl	800f54c <_free_r>
 800f7c2:	e7c8      	b.n	800f756 <__ssputs_r+0x46>

0800f7c4 <_svfiprintf_r>:
 800f7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c8:	461d      	mov	r5, r3
 800f7ca:	898b      	ldrh	r3, [r1, #12]
 800f7cc:	061f      	lsls	r7, r3, #24
 800f7ce:	b09d      	sub	sp, #116	; 0x74
 800f7d0:	4680      	mov	r8, r0
 800f7d2:	460c      	mov	r4, r1
 800f7d4:	4616      	mov	r6, r2
 800f7d6:	d50f      	bpl.n	800f7f8 <_svfiprintf_r+0x34>
 800f7d8:	690b      	ldr	r3, [r1, #16]
 800f7da:	b96b      	cbnz	r3, 800f7f8 <_svfiprintf_r+0x34>
 800f7dc:	2140      	movs	r1, #64	; 0x40
 800f7de:	f7ff ff03 	bl	800f5e8 <_malloc_r>
 800f7e2:	6020      	str	r0, [r4, #0]
 800f7e4:	6120      	str	r0, [r4, #16]
 800f7e6:	b928      	cbnz	r0, 800f7f4 <_svfiprintf_r+0x30>
 800f7e8:	230c      	movs	r3, #12
 800f7ea:	f8c8 3000 	str.w	r3, [r8]
 800f7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f2:	e0c8      	b.n	800f986 <_svfiprintf_r+0x1c2>
 800f7f4:	2340      	movs	r3, #64	; 0x40
 800f7f6:	6163      	str	r3, [r4, #20]
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f7fc:	2320      	movs	r3, #32
 800f7fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f802:	2330      	movs	r3, #48	; 0x30
 800f804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f808:	9503      	str	r5, [sp, #12]
 800f80a:	f04f 0b01 	mov.w	fp, #1
 800f80e:	4637      	mov	r7, r6
 800f810:	463d      	mov	r5, r7
 800f812:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f816:	b10b      	cbz	r3, 800f81c <_svfiprintf_r+0x58>
 800f818:	2b25      	cmp	r3, #37	; 0x25
 800f81a:	d13e      	bne.n	800f89a <_svfiprintf_r+0xd6>
 800f81c:	ebb7 0a06 	subs.w	sl, r7, r6
 800f820:	d00b      	beq.n	800f83a <_svfiprintf_r+0x76>
 800f822:	4653      	mov	r3, sl
 800f824:	4632      	mov	r2, r6
 800f826:	4621      	mov	r1, r4
 800f828:	4640      	mov	r0, r8
 800f82a:	f7ff ff71 	bl	800f710 <__ssputs_r>
 800f82e:	3001      	adds	r0, #1
 800f830:	f000 80a4 	beq.w	800f97c <_svfiprintf_r+0x1b8>
 800f834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f836:	4453      	add	r3, sl
 800f838:	9309      	str	r3, [sp, #36]	; 0x24
 800f83a:	783b      	ldrb	r3, [r7, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f000 809d 	beq.w	800f97c <_svfiprintf_r+0x1b8>
 800f842:	2300      	movs	r3, #0
 800f844:	f04f 32ff 	mov.w	r2, #4294967295
 800f848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f84c:	9304      	str	r3, [sp, #16]
 800f84e:	9307      	str	r3, [sp, #28]
 800f850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f854:	931a      	str	r3, [sp, #104]	; 0x68
 800f856:	462f      	mov	r7, r5
 800f858:	2205      	movs	r2, #5
 800f85a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f85e:	4850      	ldr	r0, [pc, #320]	; (800f9a0 <_svfiprintf_r+0x1dc>)
 800f860:	f7f0 fcbe 	bl	80001e0 <memchr>
 800f864:	9b04      	ldr	r3, [sp, #16]
 800f866:	b9d0      	cbnz	r0, 800f89e <_svfiprintf_r+0xda>
 800f868:	06d9      	lsls	r1, r3, #27
 800f86a:	bf44      	itt	mi
 800f86c:	2220      	movmi	r2, #32
 800f86e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f872:	071a      	lsls	r2, r3, #28
 800f874:	bf44      	itt	mi
 800f876:	222b      	movmi	r2, #43	; 0x2b
 800f878:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f87c:	782a      	ldrb	r2, [r5, #0]
 800f87e:	2a2a      	cmp	r2, #42	; 0x2a
 800f880:	d015      	beq.n	800f8ae <_svfiprintf_r+0xea>
 800f882:	9a07      	ldr	r2, [sp, #28]
 800f884:	462f      	mov	r7, r5
 800f886:	2000      	movs	r0, #0
 800f888:	250a      	movs	r5, #10
 800f88a:	4639      	mov	r1, r7
 800f88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f890:	3b30      	subs	r3, #48	; 0x30
 800f892:	2b09      	cmp	r3, #9
 800f894:	d94d      	bls.n	800f932 <_svfiprintf_r+0x16e>
 800f896:	b1b8      	cbz	r0, 800f8c8 <_svfiprintf_r+0x104>
 800f898:	e00f      	b.n	800f8ba <_svfiprintf_r+0xf6>
 800f89a:	462f      	mov	r7, r5
 800f89c:	e7b8      	b.n	800f810 <_svfiprintf_r+0x4c>
 800f89e:	4a40      	ldr	r2, [pc, #256]	; (800f9a0 <_svfiprintf_r+0x1dc>)
 800f8a0:	1a80      	subs	r0, r0, r2
 800f8a2:	fa0b f000 	lsl.w	r0, fp, r0
 800f8a6:	4318      	orrs	r0, r3
 800f8a8:	9004      	str	r0, [sp, #16]
 800f8aa:	463d      	mov	r5, r7
 800f8ac:	e7d3      	b.n	800f856 <_svfiprintf_r+0x92>
 800f8ae:	9a03      	ldr	r2, [sp, #12]
 800f8b0:	1d11      	adds	r1, r2, #4
 800f8b2:	6812      	ldr	r2, [r2, #0]
 800f8b4:	9103      	str	r1, [sp, #12]
 800f8b6:	2a00      	cmp	r2, #0
 800f8b8:	db01      	blt.n	800f8be <_svfiprintf_r+0xfa>
 800f8ba:	9207      	str	r2, [sp, #28]
 800f8bc:	e004      	b.n	800f8c8 <_svfiprintf_r+0x104>
 800f8be:	4252      	negs	r2, r2
 800f8c0:	f043 0302 	orr.w	r3, r3, #2
 800f8c4:	9207      	str	r2, [sp, #28]
 800f8c6:	9304      	str	r3, [sp, #16]
 800f8c8:	783b      	ldrb	r3, [r7, #0]
 800f8ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f8cc:	d10c      	bne.n	800f8e8 <_svfiprintf_r+0x124>
 800f8ce:	787b      	ldrb	r3, [r7, #1]
 800f8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f8d2:	d133      	bne.n	800f93c <_svfiprintf_r+0x178>
 800f8d4:	9b03      	ldr	r3, [sp, #12]
 800f8d6:	1d1a      	adds	r2, r3, #4
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	9203      	str	r2, [sp, #12]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bfb8      	it	lt
 800f8e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8e4:	3702      	adds	r7, #2
 800f8e6:	9305      	str	r3, [sp, #20]
 800f8e8:	4d2e      	ldr	r5, [pc, #184]	; (800f9a4 <_svfiprintf_r+0x1e0>)
 800f8ea:	7839      	ldrb	r1, [r7, #0]
 800f8ec:	2203      	movs	r2, #3
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f7f0 fc76 	bl	80001e0 <memchr>
 800f8f4:	b138      	cbz	r0, 800f906 <_svfiprintf_r+0x142>
 800f8f6:	2340      	movs	r3, #64	; 0x40
 800f8f8:	1b40      	subs	r0, r0, r5
 800f8fa:	fa03 f000 	lsl.w	r0, r3, r0
 800f8fe:	9b04      	ldr	r3, [sp, #16]
 800f900:	4303      	orrs	r3, r0
 800f902:	3701      	adds	r7, #1
 800f904:	9304      	str	r3, [sp, #16]
 800f906:	7839      	ldrb	r1, [r7, #0]
 800f908:	4827      	ldr	r0, [pc, #156]	; (800f9a8 <_svfiprintf_r+0x1e4>)
 800f90a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f90e:	2206      	movs	r2, #6
 800f910:	1c7e      	adds	r6, r7, #1
 800f912:	f7f0 fc65 	bl	80001e0 <memchr>
 800f916:	2800      	cmp	r0, #0
 800f918:	d038      	beq.n	800f98c <_svfiprintf_r+0x1c8>
 800f91a:	4b24      	ldr	r3, [pc, #144]	; (800f9ac <_svfiprintf_r+0x1e8>)
 800f91c:	bb13      	cbnz	r3, 800f964 <_svfiprintf_r+0x1a0>
 800f91e:	9b03      	ldr	r3, [sp, #12]
 800f920:	3307      	adds	r3, #7
 800f922:	f023 0307 	bic.w	r3, r3, #7
 800f926:	3308      	adds	r3, #8
 800f928:	9303      	str	r3, [sp, #12]
 800f92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f92c:	444b      	add	r3, r9
 800f92e:	9309      	str	r3, [sp, #36]	; 0x24
 800f930:	e76d      	b.n	800f80e <_svfiprintf_r+0x4a>
 800f932:	fb05 3202 	mla	r2, r5, r2, r3
 800f936:	2001      	movs	r0, #1
 800f938:	460f      	mov	r7, r1
 800f93a:	e7a6      	b.n	800f88a <_svfiprintf_r+0xc6>
 800f93c:	2300      	movs	r3, #0
 800f93e:	3701      	adds	r7, #1
 800f940:	9305      	str	r3, [sp, #20]
 800f942:	4619      	mov	r1, r3
 800f944:	250a      	movs	r5, #10
 800f946:	4638      	mov	r0, r7
 800f948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f94c:	3a30      	subs	r2, #48	; 0x30
 800f94e:	2a09      	cmp	r2, #9
 800f950:	d903      	bls.n	800f95a <_svfiprintf_r+0x196>
 800f952:	2b00      	cmp	r3, #0
 800f954:	d0c8      	beq.n	800f8e8 <_svfiprintf_r+0x124>
 800f956:	9105      	str	r1, [sp, #20]
 800f958:	e7c6      	b.n	800f8e8 <_svfiprintf_r+0x124>
 800f95a:	fb05 2101 	mla	r1, r5, r1, r2
 800f95e:	2301      	movs	r3, #1
 800f960:	4607      	mov	r7, r0
 800f962:	e7f0      	b.n	800f946 <_svfiprintf_r+0x182>
 800f964:	ab03      	add	r3, sp, #12
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	4622      	mov	r2, r4
 800f96a:	4b11      	ldr	r3, [pc, #68]	; (800f9b0 <_svfiprintf_r+0x1ec>)
 800f96c:	a904      	add	r1, sp, #16
 800f96e:	4640      	mov	r0, r8
 800f970:	f3af 8000 	nop.w
 800f974:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f978:	4681      	mov	r9, r0
 800f97a:	d1d6      	bne.n	800f92a <_svfiprintf_r+0x166>
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	065b      	lsls	r3, r3, #25
 800f980:	f53f af35 	bmi.w	800f7ee <_svfiprintf_r+0x2a>
 800f984:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f986:	b01d      	add	sp, #116	; 0x74
 800f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	ab03      	add	r3, sp, #12
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	4622      	mov	r2, r4
 800f992:	4b07      	ldr	r3, [pc, #28]	; (800f9b0 <_svfiprintf_r+0x1ec>)
 800f994:	a904      	add	r1, sp, #16
 800f996:	4640      	mov	r0, r8
 800f998:	f000 f882 	bl	800faa0 <_printf_i>
 800f99c:	e7ea      	b.n	800f974 <_svfiprintf_r+0x1b0>
 800f99e:	bf00      	nop
 800f9a0:	08012414 	.word	0x08012414
 800f9a4:	0801241a 	.word	0x0801241a
 800f9a8:	0801241e 	.word	0x0801241e
 800f9ac:	00000000 	.word	0x00000000
 800f9b0:	0800f711 	.word	0x0800f711

0800f9b4 <_printf_common>:
 800f9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b8:	4691      	mov	r9, r2
 800f9ba:	461f      	mov	r7, r3
 800f9bc:	688a      	ldr	r2, [r1, #8]
 800f9be:	690b      	ldr	r3, [r1, #16]
 800f9c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	bfb8      	it	lt
 800f9c8:	4613      	movlt	r3, r2
 800f9ca:	f8c9 3000 	str.w	r3, [r9]
 800f9ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9d2:	4606      	mov	r6, r0
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	b112      	cbz	r2, 800f9de <_printf_common+0x2a>
 800f9d8:	3301      	adds	r3, #1
 800f9da:	f8c9 3000 	str.w	r3, [r9]
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	0699      	lsls	r1, r3, #26
 800f9e2:	bf42      	ittt	mi
 800f9e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f9e8:	3302      	addmi	r3, #2
 800f9ea:	f8c9 3000 	strmi.w	r3, [r9]
 800f9ee:	6825      	ldr	r5, [r4, #0]
 800f9f0:	f015 0506 	ands.w	r5, r5, #6
 800f9f4:	d107      	bne.n	800fa06 <_printf_common+0x52>
 800f9f6:	f104 0a19 	add.w	sl, r4, #25
 800f9fa:	68e3      	ldr	r3, [r4, #12]
 800f9fc:	f8d9 2000 	ldr.w	r2, [r9]
 800fa00:	1a9b      	subs	r3, r3, r2
 800fa02:	42ab      	cmp	r3, r5
 800fa04:	dc28      	bgt.n	800fa58 <_printf_common+0xa4>
 800fa06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fa0a:	6822      	ldr	r2, [r4, #0]
 800fa0c:	3300      	adds	r3, #0
 800fa0e:	bf18      	it	ne
 800fa10:	2301      	movne	r3, #1
 800fa12:	0692      	lsls	r2, r2, #26
 800fa14:	d42d      	bmi.n	800fa72 <_printf_common+0xbe>
 800fa16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	47c0      	blx	r8
 800fa20:	3001      	adds	r0, #1
 800fa22:	d020      	beq.n	800fa66 <_printf_common+0xb2>
 800fa24:	6823      	ldr	r3, [r4, #0]
 800fa26:	68e5      	ldr	r5, [r4, #12]
 800fa28:	f8d9 2000 	ldr.w	r2, [r9]
 800fa2c:	f003 0306 	and.w	r3, r3, #6
 800fa30:	2b04      	cmp	r3, #4
 800fa32:	bf08      	it	eq
 800fa34:	1aad      	subeq	r5, r5, r2
 800fa36:	68a3      	ldr	r3, [r4, #8]
 800fa38:	6922      	ldr	r2, [r4, #16]
 800fa3a:	bf0c      	ite	eq
 800fa3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa40:	2500      	movne	r5, #0
 800fa42:	4293      	cmp	r3, r2
 800fa44:	bfc4      	itt	gt
 800fa46:	1a9b      	subgt	r3, r3, r2
 800fa48:	18ed      	addgt	r5, r5, r3
 800fa4a:	f04f 0900 	mov.w	r9, #0
 800fa4e:	341a      	adds	r4, #26
 800fa50:	454d      	cmp	r5, r9
 800fa52:	d11a      	bne.n	800fa8a <_printf_common+0xd6>
 800fa54:	2000      	movs	r0, #0
 800fa56:	e008      	b.n	800fa6a <_printf_common+0xb6>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	4652      	mov	r2, sl
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	4630      	mov	r0, r6
 800fa60:	47c0      	blx	r8
 800fa62:	3001      	adds	r0, #1
 800fa64:	d103      	bne.n	800fa6e <_printf_common+0xba>
 800fa66:	f04f 30ff 	mov.w	r0, #4294967295
 800fa6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa6e:	3501      	adds	r5, #1
 800fa70:	e7c3      	b.n	800f9fa <_printf_common+0x46>
 800fa72:	18e1      	adds	r1, r4, r3
 800fa74:	1c5a      	adds	r2, r3, #1
 800fa76:	2030      	movs	r0, #48	; 0x30
 800fa78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa7c:	4422      	add	r2, r4
 800fa7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa86:	3302      	adds	r3, #2
 800fa88:	e7c5      	b.n	800fa16 <_printf_common+0x62>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	4622      	mov	r2, r4
 800fa8e:	4639      	mov	r1, r7
 800fa90:	4630      	mov	r0, r6
 800fa92:	47c0      	blx	r8
 800fa94:	3001      	adds	r0, #1
 800fa96:	d0e6      	beq.n	800fa66 <_printf_common+0xb2>
 800fa98:	f109 0901 	add.w	r9, r9, #1
 800fa9c:	e7d8      	b.n	800fa50 <_printf_common+0x9c>
	...

0800faa0 <_printf_i>:
 800faa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faa4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800faa8:	460c      	mov	r4, r1
 800faaa:	7e09      	ldrb	r1, [r1, #24]
 800faac:	b085      	sub	sp, #20
 800faae:	296e      	cmp	r1, #110	; 0x6e
 800fab0:	4617      	mov	r7, r2
 800fab2:	4606      	mov	r6, r0
 800fab4:	4698      	mov	r8, r3
 800fab6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fab8:	f000 80b3 	beq.w	800fc22 <_printf_i+0x182>
 800fabc:	d822      	bhi.n	800fb04 <_printf_i+0x64>
 800fabe:	2963      	cmp	r1, #99	; 0x63
 800fac0:	d036      	beq.n	800fb30 <_printf_i+0x90>
 800fac2:	d80a      	bhi.n	800fada <_printf_i+0x3a>
 800fac4:	2900      	cmp	r1, #0
 800fac6:	f000 80b9 	beq.w	800fc3c <_printf_i+0x19c>
 800faca:	2958      	cmp	r1, #88	; 0x58
 800facc:	f000 8083 	beq.w	800fbd6 <_printf_i+0x136>
 800fad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fad4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fad8:	e032      	b.n	800fb40 <_printf_i+0xa0>
 800fada:	2964      	cmp	r1, #100	; 0x64
 800fadc:	d001      	beq.n	800fae2 <_printf_i+0x42>
 800fade:	2969      	cmp	r1, #105	; 0x69
 800fae0:	d1f6      	bne.n	800fad0 <_printf_i+0x30>
 800fae2:	6820      	ldr	r0, [r4, #0]
 800fae4:	6813      	ldr	r3, [r2, #0]
 800fae6:	0605      	lsls	r5, r0, #24
 800fae8:	f103 0104 	add.w	r1, r3, #4
 800faec:	d52a      	bpl.n	800fb44 <_printf_i+0xa4>
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6011      	str	r1, [r2, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	da03      	bge.n	800fafe <_printf_i+0x5e>
 800faf6:	222d      	movs	r2, #45	; 0x2d
 800faf8:	425b      	negs	r3, r3
 800fafa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fafe:	486f      	ldr	r0, [pc, #444]	; (800fcbc <_printf_i+0x21c>)
 800fb00:	220a      	movs	r2, #10
 800fb02:	e039      	b.n	800fb78 <_printf_i+0xd8>
 800fb04:	2973      	cmp	r1, #115	; 0x73
 800fb06:	f000 809d 	beq.w	800fc44 <_printf_i+0x1a4>
 800fb0a:	d808      	bhi.n	800fb1e <_printf_i+0x7e>
 800fb0c:	296f      	cmp	r1, #111	; 0x6f
 800fb0e:	d020      	beq.n	800fb52 <_printf_i+0xb2>
 800fb10:	2970      	cmp	r1, #112	; 0x70
 800fb12:	d1dd      	bne.n	800fad0 <_printf_i+0x30>
 800fb14:	6823      	ldr	r3, [r4, #0]
 800fb16:	f043 0320 	orr.w	r3, r3, #32
 800fb1a:	6023      	str	r3, [r4, #0]
 800fb1c:	e003      	b.n	800fb26 <_printf_i+0x86>
 800fb1e:	2975      	cmp	r1, #117	; 0x75
 800fb20:	d017      	beq.n	800fb52 <_printf_i+0xb2>
 800fb22:	2978      	cmp	r1, #120	; 0x78
 800fb24:	d1d4      	bne.n	800fad0 <_printf_i+0x30>
 800fb26:	2378      	movs	r3, #120	; 0x78
 800fb28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb2c:	4864      	ldr	r0, [pc, #400]	; (800fcc0 <_printf_i+0x220>)
 800fb2e:	e055      	b.n	800fbdc <_printf_i+0x13c>
 800fb30:	6813      	ldr	r3, [r2, #0]
 800fb32:	1d19      	adds	r1, r3, #4
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6011      	str	r1, [r2, #0]
 800fb38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb40:	2301      	movs	r3, #1
 800fb42:	e08c      	b.n	800fc5e <_printf_i+0x1be>
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	6011      	str	r1, [r2, #0]
 800fb48:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb4c:	bf18      	it	ne
 800fb4e:	b21b      	sxthne	r3, r3
 800fb50:	e7cf      	b.n	800faf2 <_printf_i+0x52>
 800fb52:	6813      	ldr	r3, [r2, #0]
 800fb54:	6825      	ldr	r5, [r4, #0]
 800fb56:	1d18      	adds	r0, r3, #4
 800fb58:	6010      	str	r0, [r2, #0]
 800fb5a:	0628      	lsls	r0, r5, #24
 800fb5c:	d501      	bpl.n	800fb62 <_printf_i+0xc2>
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	e002      	b.n	800fb68 <_printf_i+0xc8>
 800fb62:	0668      	lsls	r0, r5, #25
 800fb64:	d5fb      	bpl.n	800fb5e <_printf_i+0xbe>
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	4854      	ldr	r0, [pc, #336]	; (800fcbc <_printf_i+0x21c>)
 800fb6a:	296f      	cmp	r1, #111	; 0x6f
 800fb6c:	bf14      	ite	ne
 800fb6e:	220a      	movne	r2, #10
 800fb70:	2208      	moveq	r2, #8
 800fb72:	2100      	movs	r1, #0
 800fb74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb78:	6865      	ldr	r5, [r4, #4]
 800fb7a:	60a5      	str	r5, [r4, #8]
 800fb7c:	2d00      	cmp	r5, #0
 800fb7e:	f2c0 8095 	blt.w	800fcac <_printf_i+0x20c>
 800fb82:	6821      	ldr	r1, [r4, #0]
 800fb84:	f021 0104 	bic.w	r1, r1, #4
 800fb88:	6021      	str	r1, [r4, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d13d      	bne.n	800fc0a <_printf_i+0x16a>
 800fb8e:	2d00      	cmp	r5, #0
 800fb90:	f040 808e 	bne.w	800fcb0 <_printf_i+0x210>
 800fb94:	4665      	mov	r5, ip
 800fb96:	2a08      	cmp	r2, #8
 800fb98:	d10b      	bne.n	800fbb2 <_printf_i+0x112>
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	07db      	lsls	r3, r3, #31
 800fb9e:	d508      	bpl.n	800fbb2 <_printf_i+0x112>
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	6862      	ldr	r2, [r4, #4]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	bfde      	ittt	le
 800fba8:	2330      	movle	r3, #48	; 0x30
 800fbaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbb2:	ebac 0305 	sub.w	r3, ip, r5
 800fbb6:	6123      	str	r3, [r4, #16]
 800fbb8:	f8cd 8000 	str.w	r8, [sp]
 800fbbc:	463b      	mov	r3, r7
 800fbbe:	aa03      	add	r2, sp, #12
 800fbc0:	4621      	mov	r1, r4
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7ff fef6 	bl	800f9b4 <_printf_common>
 800fbc8:	3001      	adds	r0, #1
 800fbca:	d14d      	bne.n	800fc68 <_printf_i+0x1c8>
 800fbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd0:	b005      	add	sp, #20
 800fbd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd6:	4839      	ldr	r0, [pc, #228]	; (800fcbc <_printf_i+0x21c>)
 800fbd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fbdc:	6813      	ldr	r3, [r2, #0]
 800fbde:	6821      	ldr	r1, [r4, #0]
 800fbe0:	1d1d      	adds	r5, r3, #4
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6015      	str	r5, [r2, #0]
 800fbe6:	060a      	lsls	r2, r1, #24
 800fbe8:	d50b      	bpl.n	800fc02 <_printf_i+0x162>
 800fbea:	07ca      	lsls	r2, r1, #31
 800fbec:	bf44      	itt	mi
 800fbee:	f041 0120 	orrmi.w	r1, r1, #32
 800fbf2:	6021      	strmi	r1, [r4, #0]
 800fbf4:	b91b      	cbnz	r3, 800fbfe <_printf_i+0x15e>
 800fbf6:	6822      	ldr	r2, [r4, #0]
 800fbf8:	f022 0220 	bic.w	r2, r2, #32
 800fbfc:	6022      	str	r2, [r4, #0]
 800fbfe:	2210      	movs	r2, #16
 800fc00:	e7b7      	b.n	800fb72 <_printf_i+0xd2>
 800fc02:	064d      	lsls	r5, r1, #25
 800fc04:	bf48      	it	mi
 800fc06:	b29b      	uxthmi	r3, r3
 800fc08:	e7ef      	b.n	800fbea <_printf_i+0x14a>
 800fc0a:	4665      	mov	r5, ip
 800fc0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc10:	fb02 3311 	mls	r3, r2, r1, r3
 800fc14:	5cc3      	ldrb	r3, [r0, r3]
 800fc16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fc1a:	460b      	mov	r3, r1
 800fc1c:	2900      	cmp	r1, #0
 800fc1e:	d1f5      	bne.n	800fc0c <_printf_i+0x16c>
 800fc20:	e7b9      	b.n	800fb96 <_printf_i+0xf6>
 800fc22:	6813      	ldr	r3, [r2, #0]
 800fc24:	6825      	ldr	r5, [r4, #0]
 800fc26:	6961      	ldr	r1, [r4, #20]
 800fc28:	1d18      	adds	r0, r3, #4
 800fc2a:	6010      	str	r0, [r2, #0]
 800fc2c:	0628      	lsls	r0, r5, #24
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	d501      	bpl.n	800fc36 <_printf_i+0x196>
 800fc32:	6019      	str	r1, [r3, #0]
 800fc34:	e002      	b.n	800fc3c <_printf_i+0x19c>
 800fc36:	066a      	lsls	r2, r5, #25
 800fc38:	d5fb      	bpl.n	800fc32 <_printf_i+0x192>
 800fc3a:	8019      	strh	r1, [r3, #0]
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	6123      	str	r3, [r4, #16]
 800fc40:	4665      	mov	r5, ip
 800fc42:	e7b9      	b.n	800fbb8 <_printf_i+0x118>
 800fc44:	6813      	ldr	r3, [r2, #0]
 800fc46:	1d19      	adds	r1, r3, #4
 800fc48:	6011      	str	r1, [r2, #0]
 800fc4a:	681d      	ldr	r5, [r3, #0]
 800fc4c:	6862      	ldr	r2, [r4, #4]
 800fc4e:	2100      	movs	r1, #0
 800fc50:	4628      	mov	r0, r5
 800fc52:	f7f0 fac5 	bl	80001e0 <memchr>
 800fc56:	b108      	cbz	r0, 800fc5c <_printf_i+0x1bc>
 800fc58:	1b40      	subs	r0, r0, r5
 800fc5a:	6060      	str	r0, [r4, #4]
 800fc5c:	6863      	ldr	r3, [r4, #4]
 800fc5e:	6123      	str	r3, [r4, #16]
 800fc60:	2300      	movs	r3, #0
 800fc62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc66:	e7a7      	b.n	800fbb8 <_printf_i+0x118>
 800fc68:	6923      	ldr	r3, [r4, #16]
 800fc6a:	462a      	mov	r2, r5
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	4630      	mov	r0, r6
 800fc70:	47c0      	blx	r8
 800fc72:	3001      	adds	r0, #1
 800fc74:	d0aa      	beq.n	800fbcc <_printf_i+0x12c>
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	079b      	lsls	r3, r3, #30
 800fc7a:	d413      	bmi.n	800fca4 <_printf_i+0x204>
 800fc7c:	68e0      	ldr	r0, [r4, #12]
 800fc7e:	9b03      	ldr	r3, [sp, #12]
 800fc80:	4298      	cmp	r0, r3
 800fc82:	bfb8      	it	lt
 800fc84:	4618      	movlt	r0, r3
 800fc86:	e7a3      	b.n	800fbd0 <_printf_i+0x130>
 800fc88:	2301      	movs	r3, #1
 800fc8a:	464a      	mov	r2, r9
 800fc8c:	4639      	mov	r1, r7
 800fc8e:	4630      	mov	r0, r6
 800fc90:	47c0      	blx	r8
 800fc92:	3001      	adds	r0, #1
 800fc94:	d09a      	beq.n	800fbcc <_printf_i+0x12c>
 800fc96:	3501      	adds	r5, #1
 800fc98:	68e3      	ldr	r3, [r4, #12]
 800fc9a:	9a03      	ldr	r2, [sp, #12]
 800fc9c:	1a9b      	subs	r3, r3, r2
 800fc9e:	42ab      	cmp	r3, r5
 800fca0:	dcf2      	bgt.n	800fc88 <_printf_i+0x1e8>
 800fca2:	e7eb      	b.n	800fc7c <_printf_i+0x1dc>
 800fca4:	2500      	movs	r5, #0
 800fca6:	f104 0919 	add.w	r9, r4, #25
 800fcaa:	e7f5      	b.n	800fc98 <_printf_i+0x1f8>
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1ac      	bne.n	800fc0a <_printf_i+0x16a>
 800fcb0:	7803      	ldrb	r3, [r0, #0]
 800fcb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcba:	e76c      	b.n	800fb96 <_printf_i+0xf6>
 800fcbc:	08012425 	.word	0x08012425
 800fcc0:	08012436 	.word	0x08012436

0800fcc4 <memcpy>:
 800fcc4:	b510      	push	{r4, lr}
 800fcc6:	1e43      	subs	r3, r0, #1
 800fcc8:	440a      	add	r2, r1
 800fcca:	4291      	cmp	r1, r2
 800fccc:	d100      	bne.n	800fcd0 <memcpy+0xc>
 800fcce:	bd10      	pop	{r4, pc}
 800fcd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcd8:	e7f7      	b.n	800fcca <memcpy+0x6>

0800fcda <memmove>:
 800fcda:	4288      	cmp	r0, r1
 800fcdc:	b510      	push	{r4, lr}
 800fcde:	eb01 0302 	add.w	r3, r1, r2
 800fce2:	d807      	bhi.n	800fcf4 <memmove+0x1a>
 800fce4:	1e42      	subs	r2, r0, #1
 800fce6:	4299      	cmp	r1, r3
 800fce8:	d00a      	beq.n	800fd00 <memmove+0x26>
 800fcea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcee:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fcf2:	e7f8      	b.n	800fce6 <memmove+0xc>
 800fcf4:	4283      	cmp	r3, r0
 800fcf6:	d9f5      	bls.n	800fce4 <memmove+0xa>
 800fcf8:	1881      	adds	r1, r0, r2
 800fcfa:	1ad2      	subs	r2, r2, r3
 800fcfc:	42d3      	cmn	r3, r2
 800fcfe:	d100      	bne.n	800fd02 <memmove+0x28>
 800fd00:	bd10      	pop	{r4, pc}
 800fd02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd06:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fd0a:	e7f7      	b.n	800fcfc <memmove+0x22>

0800fd0c <_realloc_r>:
 800fd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0e:	4607      	mov	r7, r0
 800fd10:	4614      	mov	r4, r2
 800fd12:	460e      	mov	r6, r1
 800fd14:	b921      	cbnz	r1, 800fd20 <_realloc_r+0x14>
 800fd16:	4611      	mov	r1, r2
 800fd18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd1c:	f7ff bc64 	b.w	800f5e8 <_malloc_r>
 800fd20:	b922      	cbnz	r2, 800fd2c <_realloc_r+0x20>
 800fd22:	f7ff fc13 	bl	800f54c <_free_r>
 800fd26:	4625      	mov	r5, r4
 800fd28:	4628      	mov	r0, r5
 800fd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd2c:	f000 f814 	bl	800fd58 <_malloc_usable_size_r>
 800fd30:	42a0      	cmp	r0, r4
 800fd32:	d20f      	bcs.n	800fd54 <_realloc_r+0x48>
 800fd34:	4621      	mov	r1, r4
 800fd36:	4638      	mov	r0, r7
 800fd38:	f7ff fc56 	bl	800f5e8 <_malloc_r>
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d0f2      	beq.n	800fd28 <_realloc_r+0x1c>
 800fd42:	4631      	mov	r1, r6
 800fd44:	4622      	mov	r2, r4
 800fd46:	f7ff ffbd 	bl	800fcc4 <memcpy>
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4638      	mov	r0, r7
 800fd4e:	f7ff fbfd 	bl	800f54c <_free_r>
 800fd52:	e7e9      	b.n	800fd28 <_realloc_r+0x1c>
 800fd54:	4635      	mov	r5, r6
 800fd56:	e7e7      	b.n	800fd28 <_realloc_r+0x1c>

0800fd58 <_malloc_usable_size_r>:
 800fd58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd5c:	1f18      	subs	r0, r3, #4
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	bfbc      	itt	lt
 800fd62:	580b      	ldrlt	r3, [r1, r0]
 800fd64:	18c0      	addlt	r0, r0, r3
 800fd66:	4770      	bx	lr

0800fd68 <round>:
 800fd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6a:	ec57 6b10 	vmov	r6, r7, d0
 800fd6e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800fd72:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800fd76:	2c13      	cmp	r4, #19
 800fd78:	463b      	mov	r3, r7
 800fd7a:	463d      	mov	r5, r7
 800fd7c:	dc17      	bgt.n	800fdae <round+0x46>
 800fd7e:	2c00      	cmp	r4, #0
 800fd80:	da09      	bge.n	800fd96 <round+0x2e>
 800fd82:	3401      	adds	r4, #1
 800fd84:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800fd88:	d103      	bne.n	800fd92 <round+0x2a>
 800fd8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fd8e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd92:	2100      	movs	r1, #0
 800fd94:	e02c      	b.n	800fdf0 <round+0x88>
 800fd96:	4a18      	ldr	r2, [pc, #96]	; (800fdf8 <round+0x90>)
 800fd98:	4122      	asrs	r2, r4
 800fd9a:	4217      	tst	r7, r2
 800fd9c:	d100      	bne.n	800fda0 <round+0x38>
 800fd9e:	b19e      	cbz	r6, 800fdc8 <round+0x60>
 800fda0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fda4:	4123      	asrs	r3, r4
 800fda6:	442b      	add	r3, r5
 800fda8:	ea23 0302 	bic.w	r3, r3, r2
 800fdac:	e7f1      	b.n	800fd92 <round+0x2a>
 800fdae:	2c33      	cmp	r4, #51	; 0x33
 800fdb0:	dd0d      	ble.n	800fdce <round+0x66>
 800fdb2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800fdb6:	d107      	bne.n	800fdc8 <round+0x60>
 800fdb8:	4630      	mov	r0, r6
 800fdba:	4639      	mov	r1, r7
 800fdbc:	ee10 2a10 	vmov	r2, s0
 800fdc0:	f7f0 fa64 	bl	800028c <__adddf3>
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	460f      	mov	r7, r1
 800fdc8:	ec47 6b10 	vmov	d0, r6, r7
 800fdcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdce:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800fdd2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd6:	40d0      	lsrs	r0, r2
 800fdd8:	4206      	tst	r6, r0
 800fdda:	d0f5      	beq.n	800fdc8 <round+0x60>
 800fddc:	2201      	movs	r2, #1
 800fdde:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800fde2:	fa02 f404 	lsl.w	r4, r2, r4
 800fde6:	1931      	adds	r1, r6, r4
 800fde8:	bf28      	it	cs
 800fdea:	189b      	addcs	r3, r3, r2
 800fdec:	ea21 0100 	bic.w	r1, r1, r0
 800fdf0:	461f      	mov	r7, r3
 800fdf2:	460e      	mov	r6, r1
 800fdf4:	e7e8      	b.n	800fdc8 <round+0x60>
 800fdf6:	bf00      	nop
 800fdf8:	000fffff 	.word	0x000fffff
 800fdfc:	00000000 	.word	0x00000000

0800fe00 <sin>:
 800fe00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe02:	ec51 0b10 	vmov	r0, r1, d0
 800fe06:	4a20      	ldr	r2, [pc, #128]	; (800fe88 <sin+0x88>)
 800fe08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	dc07      	bgt.n	800fe20 <sin+0x20>
 800fe10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800fe80 <sin+0x80>
 800fe14:	2000      	movs	r0, #0
 800fe16:	f002 f82b 	bl	8011e70 <__kernel_sin>
 800fe1a:	ec51 0b10 	vmov	r0, r1, d0
 800fe1e:	e007      	b.n	800fe30 <sin+0x30>
 800fe20:	4a1a      	ldr	r2, [pc, #104]	; (800fe8c <sin+0x8c>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	dd09      	ble.n	800fe3a <sin+0x3a>
 800fe26:	ee10 2a10 	vmov	r2, s0
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	f7f0 fa2c 	bl	8000288 <__aeabi_dsub>
 800fe30:	ec41 0b10 	vmov	d0, r0, r1
 800fe34:	b005      	add	sp, #20
 800fe36:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe3a:	4668      	mov	r0, sp
 800fe3c:	f001 f96c 	bl	8011118 <__ieee754_rem_pio2>
 800fe40:	f000 0003 	and.w	r0, r0, #3
 800fe44:	2801      	cmp	r0, #1
 800fe46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fe4a:	ed9d 0b00 	vldr	d0, [sp]
 800fe4e:	d004      	beq.n	800fe5a <sin+0x5a>
 800fe50:	2802      	cmp	r0, #2
 800fe52:	d005      	beq.n	800fe60 <sin+0x60>
 800fe54:	b970      	cbnz	r0, 800fe74 <sin+0x74>
 800fe56:	2001      	movs	r0, #1
 800fe58:	e7dd      	b.n	800fe16 <sin+0x16>
 800fe5a:	f001 fc01 	bl	8011660 <__kernel_cos>
 800fe5e:	e7dc      	b.n	800fe1a <sin+0x1a>
 800fe60:	2001      	movs	r0, #1
 800fe62:	f002 f805 	bl	8011e70 <__kernel_sin>
 800fe66:	ec53 2b10 	vmov	r2, r3, d0
 800fe6a:	ee10 0a10 	vmov	r0, s0
 800fe6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fe72:	e7dd      	b.n	800fe30 <sin+0x30>
 800fe74:	f001 fbf4 	bl	8011660 <__kernel_cos>
 800fe78:	e7f5      	b.n	800fe66 <sin+0x66>
 800fe7a:	bf00      	nop
 800fe7c:	f3af 8000 	nop.w
	...
 800fe88:	3fe921fb 	.word	0x3fe921fb
 800fe8c:	7fefffff 	.word	0x7fefffff

0800fe90 <asin>:
 800fe90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe92:	ed2d 8b02 	vpush	{d8}
 800fe96:	4e26      	ldr	r6, [pc, #152]	; (800ff30 <asin+0xa0>)
 800fe98:	b08b      	sub	sp, #44	; 0x2c
 800fe9a:	ec55 4b10 	vmov	r4, r5, d0
 800fe9e:	f000 fa1b 	bl	80102d8 <__ieee754_asin>
 800fea2:	f996 3000 	ldrsb.w	r3, [r6]
 800fea6:	eeb0 8a40 	vmov.f32	s16, s0
 800feaa:	eef0 8a60 	vmov.f32	s17, s1
 800feae:	3301      	adds	r3, #1
 800feb0:	d036      	beq.n	800ff20 <asin+0x90>
 800feb2:	4622      	mov	r2, r4
 800feb4:	462b      	mov	r3, r5
 800feb6:	4620      	mov	r0, r4
 800feb8:	4629      	mov	r1, r5
 800feba:	f7f0 fe37 	bl	8000b2c <__aeabi_dcmpun>
 800febe:	4607      	mov	r7, r0
 800fec0:	bb70      	cbnz	r0, 800ff20 <asin+0x90>
 800fec2:	ec45 4b10 	vmov	d0, r4, r5
 800fec6:	f002 f88d 	bl	8011fe4 <fabs>
 800feca:	2200      	movs	r2, #0
 800fecc:	4b19      	ldr	r3, [pc, #100]	; (800ff34 <asin+0xa4>)
 800fece:	ec51 0b10 	vmov	r0, r1, d0
 800fed2:	f7f0 fe21 	bl	8000b18 <__aeabi_dcmpgt>
 800fed6:	b318      	cbz	r0, 800ff20 <asin+0x90>
 800fed8:	2301      	movs	r3, #1
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	4816      	ldr	r0, [pc, #88]	; (800ff38 <asin+0xa8>)
 800fede:	4b17      	ldr	r3, [pc, #92]	; (800ff3c <asin+0xac>)
 800fee0:	9301      	str	r3, [sp, #4]
 800fee2:	9708      	str	r7, [sp, #32]
 800fee4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800fee8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800feec:	f002 f914 	bl	8012118 <nan>
 800fef0:	f996 3000 	ldrsb.w	r3, [r6]
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	ed8d 0b06 	vstr	d0, [sp, #24]
 800fefa:	d104      	bne.n	800ff06 <asin+0x76>
 800fefc:	f7ff fae4 	bl	800f4c8 <__errno>
 800ff00:	2321      	movs	r3, #33	; 0x21
 800ff02:	6003      	str	r3, [r0, #0]
 800ff04:	e004      	b.n	800ff10 <asin+0x80>
 800ff06:	4668      	mov	r0, sp
 800ff08:	f002 f902 	bl	8012110 <matherr>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	d0f5      	beq.n	800fefc <asin+0x6c>
 800ff10:	9b08      	ldr	r3, [sp, #32]
 800ff12:	b11b      	cbz	r3, 800ff1c <asin+0x8c>
 800ff14:	f7ff fad8 	bl	800f4c8 <__errno>
 800ff18:	9b08      	ldr	r3, [sp, #32]
 800ff1a:	6003      	str	r3, [r0, #0]
 800ff1c:	ed9d 8b06 	vldr	d8, [sp, #24]
 800ff20:	eeb0 0a48 	vmov.f32	s0, s16
 800ff24:	eef0 0a68 	vmov.f32	s1, s17
 800ff28:	b00b      	add	sp, #44	; 0x2c
 800ff2a:	ecbd 8b02 	vpop	{d8}
 800ff2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff30:	2000022c 	.word	0x2000022c
 800ff34:	3ff00000 	.word	0x3ff00000
 800ff38:	08012419 	.word	0x08012419
 800ff3c:	08012447 	.word	0x08012447

0800ff40 <pow>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	ed2d 8b04 	vpush	{d8-d9}
 800ff48:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801021c <pow+0x2dc>
 800ff4c:	b08d      	sub	sp, #52	; 0x34
 800ff4e:	ec57 6b10 	vmov	r6, r7, d0
 800ff52:	ec55 4b11 	vmov	r4, r5, d1
 800ff56:	f000 fbcf 	bl	80106f8 <__ieee754_pow>
 800ff5a:	f999 3000 	ldrsb.w	r3, [r9]
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	3301      	adds	r3, #1
 800ff62:	eeb0 8a40 	vmov.f32	s16, s0
 800ff66:	eef0 8a60 	vmov.f32	s17, s1
 800ff6a:	46c8      	mov	r8, r9
 800ff6c:	d05f      	beq.n	801002e <pow+0xee>
 800ff6e:	4622      	mov	r2, r4
 800ff70:	462b      	mov	r3, r5
 800ff72:	4620      	mov	r0, r4
 800ff74:	4629      	mov	r1, r5
 800ff76:	f7f0 fdd9 	bl	8000b2c <__aeabi_dcmpun>
 800ff7a:	4683      	mov	fp, r0
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d156      	bne.n	801002e <pow+0xee>
 800ff80:	4632      	mov	r2, r6
 800ff82:	463b      	mov	r3, r7
 800ff84:	4630      	mov	r0, r6
 800ff86:	4639      	mov	r1, r7
 800ff88:	f7f0 fdd0 	bl	8000b2c <__aeabi_dcmpun>
 800ff8c:	9001      	str	r0, [sp, #4]
 800ff8e:	b1e8      	cbz	r0, 800ffcc <pow+0x8c>
 800ff90:	2200      	movs	r2, #0
 800ff92:	2300      	movs	r3, #0
 800ff94:	4620      	mov	r0, r4
 800ff96:	4629      	mov	r1, r5
 800ff98:	f7f0 fd96 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	d046      	beq.n	801002e <pow+0xee>
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	9302      	str	r3, [sp, #8]
 800ffa4:	4b96      	ldr	r3, [pc, #600]	; (8010200 <pow+0x2c0>)
 800ffa6:	9303      	str	r3, [sp, #12]
 800ffa8:	4b96      	ldr	r3, [pc, #600]	; (8010204 <pow+0x2c4>)
 800ffaa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ffae:	2200      	movs	r2, #0
 800ffb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ffb4:	9b00      	ldr	r3, [sp, #0]
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ffbc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ffc0:	d033      	beq.n	801002a <pow+0xea>
 800ffc2:	a802      	add	r0, sp, #8
 800ffc4:	f002 f8a4 	bl	8012110 <matherr>
 800ffc8:	bb48      	cbnz	r0, 801001e <pow+0xde>
 800ffca:	e05d      	b.n	8010088 <pow+0x148>
 800ffcc:	f04f 0a00 	mov.w	sl, #0
 800ffd0:	f04f 0b00 	mov.w	fp, #0
 800ffd4:	4652      	mov	r2, sl
 800ffd6:	465b      	mov	r3, fp
 800ffd8:	4630      	mov	r0, r6
 800ffda:	4639      	mov	r1, r7
 800ffdc:	f7f0 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 800ffe0:	ec4b ab19 	vmov	d9, sl, fp
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d054      	beq.n	8010092 <pow+0x152>
 800ffe8:	4652      	mov	r2, sl
 800ffea:	465b      	mov	r3, fp
 800ffec:	4620      	mov	r0, r4
 800ffee:	4629      	mov	r1, r5
 800fff0:	f7f0 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800fff4:	4680      	mov	r8, r0
 800fff6:	b318      	cbz	r0, 8010040 <pow+0x100>
 800fff8:	2301      	movs	r3, #1
 800fffa:	9302      	str	r3, [sp, #8]
 800fffc:	4b80      	ldr	r3, [pc, #512]	; (8010200 <pow+0x2c0>)
 800fffe:	9303      	str	r3, [sp, #12]
 8010000:	9b01      	ldr	r3, [sp, #4]
 8010002:	930a      	str	r3, [sp, #40]	; 0x28
 8010004:	9b00      	ldr	r3, [sp, #0]
 8010006:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801000a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801000e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d0d5      	beq.n	800ffc2 <pow+0x82>
 8010016:	4b7b      	ldr	r3, [pc, #492]	; (8010204 <pow+0x2c4>)
 8010018:	2200      	movs	r2, #0
 801001a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801001e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010020:	b11b      	cbz	r3, 801002a <pow+0xea>
 8010022:	f7ff fa51 	bl	800f4c8 <__errno>
 8010026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010028:	6003      	str	r3, [r0, #0]
 801002a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801002e:	eeb0 0a48 	vmov.f32	s0, s16
 8010032:	eef0 0a68 	vmov.f32	s1, s17
 8010036:	b00d      	add	sp, #52	; 0x34
 8010038:	ecbd 8b04 	vpop	{d8-d9}
 801003c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010040:	ec45 4b10 	vmov	d0, r4, r5
 8010044:	f001 ffd7 	bl	8011ff6 <finite>
 8010048:	2800      	cmp	r0, #0
 801004a:	d0f0      	beq.n	801002e <pow+0xee>
 801004c:	4652      	mov	r2, sl
 801004e:	465b      	mov	r3, fp
 8010050:	4620      	mov	r0, r4
 8010052:	4629      	mov	r1, r5
 8010054:	f7f0 fd42 	bl	8000adc <__aeabi_dcmplt>
 8010058:	2800      	cmp	r0, #0
 801005a:	d0e8      	beq.n	801002e <pow+0xee>
 801005c:	2301      	movs	r3, #1
 801005e:	9302      	str	r3, [sp, #8]
 8010060:	4b67      	ldr	r3, [pc, #412]	; (8010200 <pow+0x2c0>)
 8010062:	9303      	str	r3, [sp, #12]
 8010064:	f999 3000 	ldrsb.w	r3, [r9]
 8010068:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801006c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010070:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010074:	b913      	cbnz	r3, 801007c <pow+0x13c>
 8010076:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801007a:	e7a2      	b.n	800ffc2 <pow+0x82>
 801007c:	4962      	ldr	r1, [pc, #392]	; (8010208 <pow+0x2c8>)
 801007e:	2000      	movs	r0, #0
 8010080:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010084:	2b02      	cmp	r3, #2
 8010086:	d19c      	bne.n	800ffc2 <pow+0x82>
 8010088:	f7ff fa1e 	bl	800f4c8 <__errno>
 801008c:	2321      	movs	r3, #33	; 0x21
 801008e:	6003      	str	r3, [r0, #0]
 8010090:	e7c5      	b.n	801001e <pow+0xde>
 8010092:	eeb0 0a48 	vmov.f32	s0, s16
 8010096:	eef0 0a68 	vmov.f32	s1, s17
 801009a:	f001 ffac 	bl	8011ff6 <finite>
 801009e:	9000      	str	r0, [sp, #0]
 80100a0:	2800      	cmp	r0, #0
 80100a2:	f040 8081 	bne.w	80101a8 <pow+0x268>
 80100a6:	ec47 6b10 	vmov	d0, r6, r7
 80100aa:	f001 ffa4 	bl	8011ff6 <finite>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	d07a      	beq.n	80101a8 <pow+0x268>
 80100b2:	ec45 4b10 	vmov	d0, r4, r5
 80100b6:	f001 ff9e 	bl	8011ff6 <finite>
 80100ba:	2800      	cmp	r0, #0
 80100bc:	d074      	beq.n	80101a8 <pow+0x268>
 80100be:	ec53 2b18 	vmov	r2, r3, d8
 80100c2:	ee18 0a10 	vmov	r0, s16
 80100c6:	4619      	mov	r1, r3
 80100c8:	f7f0 fd30 	bl	8000b2c <__aeabi_dcmpun>
 80100cc:	f999 9000 	ldrsb.w	r9, [r9]
 80100d0:	4b4b      	ldr	r3, [pc, #300]	; (8010200 <pow+0x2c0>)
 80100d2:	b1b0      	cbz	r0, 8010102 <pow+0x1c2>
 80100d4:	2201      	movs	r2, #1
 80100d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80100da:	9b00      	ldr	r3, [sp, #0]
 80100dc:	930a      	str	r3, [sp, #40]	; 0x28
 80100de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80100e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80100e6:	f1b9 0f00 	cmp.w	r9, #0
 80100ea:	d0c4      	beq.n	8010076 <pow+0x136>
 80100ec:	4652      	mov	r2, sl
 80100ee:	465b      	mov	r3, fp
 80100f0:	4650      	mov	r0, sl
 80100f2:	4659      	mov	r1, fp
 80100f4:	f7f0 fbaa 	bl	800084c <__aeabi_ddiv>
 80100f8:	f1b9 0f02 	cmp.w	r9, #2
 80100fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010100:	e7c1      	b.n	8010086 <pow+0x146>
 8010102:	2203      	movs	r2, #3
 8010104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010108:	900a      	str	r0, [sp, #40]	; 0x28
 801010a:	4629      	mov	r1, r5
 801010c:	4620      	mov	r0, r4
 801010e:	2200      	movs	r2, #0
 8010110:	4b3e      	ldr	r3, [pc, #248]	; (801020c <pow+0x2cc>)
 8010112:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010116:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801011a:	f7f0 fa6d 	bl	80005f8 <__aeabi_dmul>
 801011e:	4604      	mov	r4, r0
 8010120:	460d      	mov	r5, r1
 8010122:	f1b9 0f00 	cmp.w	r9, #0
 8010126:	d124      	bne.n	8010172 <pow+0x232>
 8010128:	4b39      	ldr	r3, [pc, #228]	; (8010210 <pow+0x2d0>)
 801012a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801012e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010132:	4630      	mov	r0, r6
 8010134:	4652      	mov	r2, sl
 8010136:	465b      	mov	r3, fp
 8010138:	4639      	mov	r1, r7
 801013a:	f7f0 fccf 	bl	8000adc <__aeabi_dcmplt>
 801013e:	2800      	cmp	r0, #0
 8010140:	d056      	beq.n	80101f0 <pow+0x2b0>
 8010142:	ec45 4b10 	vmov	d0, r4, r5
 8010146:	f001 ffef 	bl	8012128 <rint>
 801014a:	4622      	mov	r2, r4
 801014c:	462b      	mov	r3, r5
 801014e:	ec51 0b10 	vmov	r0, r1, d0
 8010152:	f7f0 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010156:	b920      	cbnz	r0, 8010162 <pow+0x222>
 8010158:	4b2e      	ldr	r3, [pc, #184]	; (8010214 <pow+0x2d4>)
 801015a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801015e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010162:	f998 3000 	ldrsb.w	r3, [r8]
 8010166:	2b02      	cmp	r3, #2
 8010168:	d142      	bne.n	80101f0 <pow+0x2b0>
 801016a:	f7ff f9ad 	bl	800f4c8 <__errno>
 801016e:	2322      	movs	r3, #34	; 0x22
 8010170:	e78d      	b.n	801008e <pow+0x14e>
 8010172:	4b29      	ldr	r3, [pc, #164]	; (8010218 <pow+0x2d8>)
 8010174:	2200      	movs	r2, #0
 8010176:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801017a:	4630      	mov	r0, r6
 801017c:	4652      	mov	r2, sl
 801017e:	465b      	mov	r3, fp
 8010180:	4639      	mov	r1, r7
 8010182:	f7f0 fcab 	bl	8000adc <__aeabi_dcmplt>
 8010186:	2800      	cmp	r0, #0
 8010188:	d0eb      	beq.n	8010162 <pow+0x222>
 801018a:	ec45 4b10 	vmov	d0, r4, r5
 801018e:	f001 ffcb 	bl	8012128 <rint>
 8010192:	4622      	mov	r2, r4
 8010194:	462b      	mov	r3, r5
 8010196:	ec51 0b10 	vmov	r0, r1, d0
 801019a:	f7f0 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d1df      	bne.n	8010162 <pow+0x222>
 80101a2:	2200      	movs	r2, #0
 80101a4:	4b18      	ldr	r3, [pc, #96]	; (8010208 <pow+0x2c8>)
 80101a6:	e7da      	b.n	801015e <pow+0x21e>
 80101a8:	2200      	movs	r2, #0
 80101aa:	2300      	movs	r3, #0
 80101ac:	ec51 0b18 	vmov	r0, r1, d8
 80101b0:	f7f0 fc8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80101b4:	2800      	cmp	r0, #0
 80101b6:	f43f af3a 	beq.w	801002e <pow+0xee>
 80101ba:	ec47 6b10 	vmov	d0, r6, r7
 80101be:	f001 ff1a 	bl	8011ff6 <finite>
 80101c2:	2800      	cmp	r0, #0
 80101c4:	f43f af33 	beq.w	801002e <pow+0xee>
 80101c8:	ec45 4b10 	vmov	d0, r4, r5
 80101cc:	f001 ff13 	bl	8011ff6 <finite>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	f43f af2c 	beq.w	801002e <pow+0xee>
 80101d6:	2304      	movs	r3, #4
 80101d8:	9302      	str	r3, [sp, #8]
 80101da:	4b09      	ldr	r3, [pc, #36]	; (8010200 <pow+0x2c0>)
 80101dc:	9303      	str	r3, [sp, #12]
 80101de:	2300      	movs	r3, #0
 80101e0:	930a      	str	r3, [sp, #40]	; 0x28
 80101e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80101e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80101ea:	ed8d 9b08 	vstr	d9, [sp, #32]
 80101ee:	e7b8      	b.n	8010162 <pow+0x222>
 80101f0:	a802      	add	r0, sp, #8
 80101f2:	f001 ff8d 	bl	8012110 <matherr>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	f47f af11 	bne.w	801001e <pow+0xde>
 80101fc:	e7b5      	b.n	801016a <pow+0x22a>
 80101fe:	bf00      	nop
 8010200:	0801244c 	.word	0x0801244c
 8010204:	3ff00000 	.word	0x3ff00000
 8010208:	fff00000 	.word	0xfff00000
 801020c:	3fe00000 	.word	0x3fe00000
 8010210:	47efffff 	.word	0x47efffff
 8010214:	c7efffff 	.word	0xc7efffff
 8010218:	7ff00000 	.word	0x7ff00000
 801021c:	2000022c 	.word	0x2000022c

08010220 <sqrt>:
 8010220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010224:	ed2d 8b02 	vpush	{d8}
 8010228:	b08b      	sub	sp, #44	; 0x2c
 801022a:	ec55 4b10 	vmov	r4, r5, d0
 801022e:	f001 f965 	bl	80114fc <__ieee754_sqrt>
 8010232:	4b26      	ldr	r3, [pc, #152]	; (80102cc <sqrt+0xac>)
 8010234:	eeb0 8a40 	vmov.f32	s16, s0
 8010238:	eef0 8a60 	vmov.f32	s17, s1
 801023c:	f993 6000 	ldrsb.w	r6, [r3]
 8010240:	1c73      	adds	r3, r6, #1
 8010242:	d02a      	beq.n	801029a <sqrt+0x7a>
 8010244:	4622      	mov	r2, r4
 8010246:	462b      	mov	r3, r5
 8010248:	4620      	mov	r0, r4
 801024a:	4629      	mov	r1, r5
 801024c:	f7f0 fc6e 	bl	8000b2c <__aeabi_dcmpun>
 8010250:	4607      	mov	r7, r0
 8010252:	bb10      	cbnz	r0, 801029a <sqrt+0x7a>
 8010254:	f04f 0800 	mov.w	r8, #0
 8010258:	f04f 0900 	mov.w	r9, #0
 801025c:	4642      	mov	r2, r8
 801025e:	464b      	mov	r3, r9
 8010260:	4620      	mov	r0, r4
 8010262:	4629      	mov	r1, r5
 8010264:	f7f0 fc3a 	bl	8000adc <__aeabi_dcmplt>
 8010268:	b1b8      	cbz	r0, 801029a <sqrt+0x7a>
 801026a:	2301      	movs	r3, #1
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	4b18      	ldr	r3, [pc, #96]	; (80102d0 <sqrt+0xb0>)
 8010270:	9301      	str	r3, [sp, #4]
 8010272:	9708      	str	r7, [sp, #32]
 8010274:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010278:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801027c:	b9b6      	cbnz	r6, 80102ac <sqrt+0x8c>
 801027e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8010282:	4668      	mov	r0, sp
 8010284:	f001 ff44 	bl	8012110 <matherr>
 8010288:	b1d0      	cbz	r0, 80102c0 <sqrt+0xa0>
 801028a:	9b08      	ldr	r3, [sp, #32]
 801028c:	b11b      	cbz	r3, 8010296 <sqrt+0x76>
 801028e:	f7ff f91b 	bl	800f4c8 <__errno>
 8010292:	9b08      	ldr	r3, [sp, #32]
 8010294:	6003      	str	r3, [r0, #0]
 8010296:	ed9d 8b06 	vldr	d8, [sp, #24]
 801029a:	eeb0 0a48 	vmov.f32	s0, s16
 801029e:	eef0 0a68 	vmov.f32	s1, s17
 80102a2:	b00b      	add	sp, #44	; 0x2c
 80102a4:	ecbd 8b02 	vpop	{d8}
 80102a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102ac:	4642      	mov	r2, r8
 80102ae:	464b      	mov	r3, r9
 80102b0:	4640      	mov	r0, r8
 80102b2:	4649      	mov	r1, r9
 80102b4:	f7f0 faca 	bl	800084c <__aeabi_ddiv>
 80102b8:	2e02      	cmp	r6, #2
 80102ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80102be:	d1e0      	bne.n	8010282 <sqrt+0x62>
 80102c0:	f7ff f902 	bl	800f4c8 <__errno>
 80102c4:	2321      	movs	r3, #33	; 0x21
 80102c6:	6003      	str	r3, [r0, #0]
 80102c8:	e7df      	b.n	801028a <sqrt+0x6a>
 80102ca:	bf00      	nop
 80102cc:	2000022c 	.word	0x2000022c
 80102d0:	08012450 	.word	0x08012450
 80102d4:	00000000 	.word	0x00000000

080102d8 <__ieee754_asin>:
 80102d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102dc:	ec55 4b10 	vmov	r4, r5, d0
 80102e0:	4bcb      	ldr	r3, [pc, #812]	; (8010610 <__ieee754_asin+0x338>)
 80102e2:	b087      	sub	sp, #28
 80102e4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80102e8:	429f      	cmp	r7, r3
 80102ea:	9501      	str	r5, [sp, #4]
 80102ec:	dd31      	ble.n	8010352 <__ieee754_asin+0x7a>
 80102ee:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80102f2:	ee10 3a10 	vmov	r3, s0
 80102f6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80102fa:	433b      	orrs	r3, r7
 80102fc:	d117      	bne.n	801032e <__ieee754_asin+0x56>
 80102fe:	a3aa      	add	r3, pc, #680	; (adr r3, 80105a8 <__ieee754_asin+0x2d0>)
 8010300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010304:	ee10 0a10 	vmov	r0, s0
 8010308:	4629      	mov	r1, r5
 801030a:	f7f0 f975 	bl	80005f8 <__aeabi_dmul>
 801030e:	a3a8      	add	r3, pc, #672	; (adr r3, 80105b0 <__ieee754_asin+0x2d8>)
 8010310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	4620      	mov	r0, r4
 801031a:	4629      	mov	r1, r5
 801031c:	f7f0 f96c 	bl	80005f8 <__aeabi_dmul>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	4630      	mov	r0, r6
 8010326:	4639      	mov	r1, r7
 8010328:	f7ef ffb0 	bl	800028c <__adddf3>
 801032c:	e00a      	b.n	8010344 <__ieee754_asin+0x6c>
 801032e:	ee10 2a10 	vmov	r2, s0
 8010332:	462b      	mov	r3, r5
 8010334:	4620      	mov	r0, r4
 8010336:	4629      	mov	r1, r5
 8010338:	f7ef ffa6 	bl	8000288 <__aeabi_dsub>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	f7f0 fa84 	bl	800084c <__aeabi_ddiv>
 8010344:	4604      	mov	r4, r0
 8010346:	460d      	mov	r5, r1
 8010348:	ec45 4b10 	vmov	d0, r4, r5
 801034c:	b007      	add	sp, #28
 801034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010352:	4bb0      	ldr	r3, [pc, #704]	; (8010614 <__ieee754_asin+0x33c>)
 8010354:	429f      	cmp	r7, r3
 8010356:	dc11      	bgt.n	801037c <__ieee754_asin+0xa4>
 8010358:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801035c:	f280 80ae 	bge.w	80104bc <__ieee754_asin+0x1e4>
 8010360:	a395      	add	r3, pc, #596	; (adr r3, 80105b8 <__ieee754_asin+0x2e0>)
 8010362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010366:	ee10 0a10 	vmov	r0, s0
 801036a:	4629      	mov	r1, r5
 801036c:	f7ef ff8e 	bl	800028c <__adddf3>
 8010370:	2200      	movs	r2, #0
 8010372:	4ba9      	ldr	r3, [pc, #676]	; (8010618 <__ieee754_asin+0x340>)
 8010374:	f7f0 fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8010378:	2800      	cmp	r0, #0
 801037a:	d1e5      	bne.n	8010348 <__ieee754_asin+0x70>
 801037c:	ec45 4b10 	vmov	d0, r4, r5
 8010380:	f001 fe30 	bl	8011fe4 <fabs>
 8010384:	2000      	movs	r0, #0
 8010386:	ec53 2b10 	vmov	r2, r3, d0
 801038a:	49a3      	ldr	r1, [pc, #652]	; (8010618 <__ieee754_asin+0x340>)
 801038c:	f7ef ff7c 	bl	8000288 <__aeabi_dsub>
 8010390:	2200      	movs	r2, #0
 8010392:	4ba2      	ldr	r3, [pc, #648]	; (801061c <__ieee754_asin+0x344>)
 8010394:	f7f0 f930 	bl	80005f8 <__aeabi_dmul>
 8010398:	a389      	add	r3, pc, #548	; (adr r3, 80105c0 <__ieee754_asin+0x2e8>)
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	4604      	mov	r4, r0
 80103a0:	460d      	mov	r5, r1
 80103a2:	f7f0 f929 	bl	80005f8 <__aeabi_dmul>
 80103a6:	a388      	add	r3, pc, #544	; (adr r3, 80105c8 <__ieee754_asin+0x2f0>)
 80103a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ac:	f7ef ff6e 	bl	800028c <__adddf3>
 80103b0:	4622      	mov	r2, r4
 80103b2:	462b      	mov	r3, r5
 80103b4:	f7f0 f920 	bl	80005f8 <__aeabi_dmul>
 80103b8:	a385      	add	r3, pc, #532	; (adr r3, 80105d0 <__ieee754_asin+0x2f8>)
 80103ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103be:	f7ef ff63 	bl	8000288 <__aeabi_dsub>
 80103c2:	4622      	mov	r2, r4
 80103c4:	462b      	mov	r3, r5
 80103c6:	f7f0 f917 	bl	80005f8 <__aeabi_dmul>
 80103ca:	a383      	add	r3, pc, #524	; (adr r3, 80105d8 <__ieee754_asin+0x300>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	f7ef ff5c 	bl	800028c <__adddf3>
 80103d4:	4622      	mov	r2, r4
 80103d6:	462b      	mov	r3, r5
 80103d8:	f7f0 f90e 	bl	80005f8 <__aeabi_dmul>
 80103dc:	a380      	add	r3, pc, #512	; (adr r3, 80105e0 <__ieee754_asin+0x308>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7ef ff51 	bl	8000288 <__aeabi_dsub>
 80103e6:	4622      	mov	r2, r4
 80103e8:	462b      	mov	r3, r5
 80103ea:	f7f0 f905 	bl	80005f8 <__aeabi_dmul>
 80103ee:	a37e      	add	r3, pc, #504	; (adr r3, 80105e8 <__ieee754_asin+0x310>)
 80103f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f4:	f7ef ff4a 	bl	800028c <__adddf3>
 80103f8:	4622      	mov	r2, r4
 80103fa:	462b      	mov	r3, r5
 80103fc:	f7f0 f8fc 	bl	80005f8 <__aeabi_dmul>
 8010400:	a37b      	add	r3, pc, #492	; (adr r3, 80105f0 <__ieee754_asin+0x318>)
 8010402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010406:	4680      	mov	r8, r0
 8010408:	4689      	mov	r9, r1
 801040a:	4620      	mov	r0, r4
 801040c:	4629      	mov	r1, r5
 801040e:	f7f0 f8f3 	bl	80005f8 <__aeabi_dmul>
 8010412:	a379      	add	r3, pc, #484	; (adr r3, 80105f8 <__ieee754_asin+0x320>)
 8010414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010418:	f7ef ff36 	bl	8000288 <__aeabi_dsub>
 801041c:	4622      	mov	r2, r4
 801041e:	462b      	mov	r3, r5
 8010420:	f7f0 f8ea 	bl	80005f8 <__aeabi_dmul>
 8010424:	a376      	add	r3, pc, #472	; (adr r3, 8010600 <__ieee754_asin+0x328>)
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	f7ef ff2f 	bl	800028c <__adddf3>
 801042e:	4622      	mov	r2, r4
 8010430:	462b      	mov	r3, r5
 8010432:	f7f0 f8e1 	bl	80005f8 <__aeabi_dmul>
 8010436:	a374      	add	r3, pc, #464	; (adr r3, 8010608 <__ieee754_asin+0x330>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	f7ef ff24 	bl	8000288 <__aeabi_dsub>
 8010440:	4622      	mov	r2, r4
 8010442:	462b      	mov	r3, r5
 8010444:	f7f0 f8d8 	bl	80005f8 <__aeabi_dmul>
 8010448:	4b73      	ldr	r3, [pc, #460]	; (8010618 <__ieee754_asin+0x340>)
 801044a:	2200      	movs	r2, #0
 801044c:	f7ef ff1e 	bl	800028c <__adddf3>
 8010450:	ec45 4b10 	vmov	d0, r4, r5
 8010454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010458:	f001 f850 	bl	80114fc <__ieee754_sqrt>
 801045c:	4b70      	ldr	r3, [pc, #448]	; (8010620 <__ieee754_asin+0x348>)
 801045e:	429f      	cmp	r7, r3
 8010460:	ec5b ab10 	vmov	sl, fp, d0
 8010464:	f340 80de 	ble.w	8010624 <__ieee754_asin+0x34c>
 8010468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801046c:	4640      	mov	r0, r8
 801046e:	4649      	mov	r1, r9
 8010470:	f7f0 f9ec 	bl	800084c <__aeabi_ddiv>
 8010474:	4652      	mov	r2, sl
 8010476:	465b      	mov	r3, fp
 8010478:	f7f0 f8be 	bl	80005f8 <__aeabi_dmul>
 801047c:	4652      	mov	r2, sl
 801047e:	465b      	mov	r3, fp
 8010480:	f7ef ff04 	bl	800028c <__adddf3>
 8010484:	4602      	mov	r2, r0
 8010486:	460b      	mov	r3, r1
 8010488:	f7ef ff00 	bl	800028c <__adddf3>
 801048c:	a348      	add	r3, pc, #288	; (adr r3, 80105b0 <__ieee754_asin+0x2d8>)
 801048e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010492:	f7ef fef9 	bl	8000288 <__aeabi_dsub>
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	a143      	add	r1, pc, #268	; (adr r1, 80105a8 <__ieee754_asin+0x2d0>)
 801049c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104a0:	f7ef fef2 	bl	8000288 <__aeabi_dsub>
 80104a4:	9b01      	ldr	r3, [sp, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	bfdc      	itt	le
 80104aa:	4602      	movle	r2, r0
 80104ac:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80104b0:	4604      	mov	r4, r0
 80104b2:	460d      	mov	r5, r1
 80104b4:	bfdc      	itt	le
 80104b6:	4614      	movle	r4, r2
 80104b8:	461d      	movle	r5, r3
 80104ba:	e745      	b.n	8010348 <__ieee754_asin+0x70>
 80104bc:	ee10 2a10 	vmov	r2, s0
 80104c0:	ee10 0a10 	vmov	r0, s0
 80104c4:	462b      	mov	r3, r5
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7f0 f896 	bl	80005f8 <__aeabi_dmul>
 80104cc:	a33c      	add	r3, pc, #240	; (adr r3, 80105c0 <__ieee754_asin+0x2e8>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	4606      	mov	r6, r0
 80104d4:	460f      	mov	r7, r1
 80104d6:	f7f0 f88f 	bl	80005f8 <__aeabi_dmul>
 80104da:	a33b      	add	r3, pc, #236	; (adr r3, 80105c8 <__ieee754_asin+0x2f0>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	f7ef fed4 	bl	800028c <__adddf3>
 80104e4:	4632      	mov	r2, r6
 80104e6:	463b      	mov	r3, r7
 80104e8:	f7f0 f886 	bl	80005f8 <__aeabi_dmul>
 80104ec:	a338      	add	r3, pc, #224	; (adr r3, 80105d0 <__ieee754_asin+0x2f8>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	f7ef fec9 	bl	8000288 <__aeabi_dsub>
 80104f6:	4632      	mov	r2, r6
 80104f8:	463b      	mov	r3, r7
 80104fa:	f7f0 f87d 	bl	80005f8 <__aeabi_dmul>
 80104fe:	a336      	add	r3, pc, #216	; (adr r3, 80105d8 <__ieee754_asin+0x300>)
 8010500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010504:	f7ef fec2 	bl	800028c <__adddf3>
 8010508:	4632      	mov	r2, r6
 801050a:	463b      	mov	r3, r7
 801050c:	f7f0 f874 	bl	80005f8 <__aeabi_dmul>
 8010510:	a333      	add	r3, pc, #204	; (adr r3, 80105e0 <__ieee754_asin+0x308>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7ef feb7 	bl	8000288 <__aeabi_dsub>
 801051a:	4632      	mov	r2, r6
 801051c:	463b      	mov	r3, r7
 801051e:	f7f0 f86b 	bl	80005f8 <__aeabi_dmul>
 8010522:	a331      	add	r3, pc, #196	; (adr r3, 80105e8 <__ieee754_asin+0x310>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	f7ef feb0 	bl	800028c <__adddf3>
 801052c:	4632      	mov	r2, r6
 801052e:	463b      	mov	r3, r7
 8010530:	f7f0 f862 	bl	80005f8 <__aeabi_dmul>
 8010534:	a32e      	add	r3, pc, #184	; (adr r3, 80105f0 <__ieee754_asin+0x318>)
 8010536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053a:	4680      	mov	r8, r0
 801053c:	4689      	mov	r9, r1
 801053e:	4630      	mov	r0, r6
 8010540:	4639      	mov	r1, r7
 8010542:	f7f0 f859 	bl	80005f8 <__aeabi_dmul>
 8010546:	a32c      	add	r3, pc, #176	; (adr r3, 80105f8 <__ieee754_asin+0x320>)
 8010548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054c:	f7ef fe9c 	bl	8000288 <__aeabi_dsub>
 8010550:	4632      	mov	r2, r6
 8010552:	463b      	mov	r3, r7
 8010554:	f7f0 f850 	bl	80005f8 <__aeabi_dmul>
 8010558:	a329      	add	r3, pc, #164	; (adr r3, 8010600 <__ieee754_asin+0x328>)
 801055a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055e:	f7ef fe95 	bl	800028c <__adddf3>
 8010562:	4632      	mov	r2, r6
 8010564:	463b      	mov	r3, r7
 8010566:	f7f0 f847 	bl	80005f8 <__aeabi_dmul>
 801056a:	a327      	add	r3, pc, #156	; (adr r3, 8010608 <__ieee754_asin+0x330>)
 801056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010570:	f7ef fe8a 	bl	8000288 <__aeabi_dsub>
 8010574:	4632      	mov	r2, r6
 8010576:	463b      	mov	r3, r7
 8010578:	f7f0 f83e 	bl	80005f8 <__aeabi_dmul>
 801057c:	2200      	movs	r2, #0
 801057e:	4b26      	ldr	r3, [pc, #152]	; (8010618 <__ieee754_asin+0x340>)
 8010580:	f7ef fe84 	bl	800028c <__adddf3>
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4640      	mov	r0, r8
 801058a:	4649      	mov	r1, r9
 801058c:	f7f0 f95e 	bl	800084c <__aeabi_ddiv>
 8010590:	4622      	mov	r2, r4
 8010592:	462b      	mov	r3, r5
 8010594:	f7f0 f830 	bl	80005f8 <__aeabi_dmul>
 8010598:	4602      	mov	r2, r0
 801059a:	460b      	mov	r3, r1
 801059c:	4620      	mov	r0, r4
 801059e:	4629      	mov	r1, r5
 80105a0:	e6c2      	b.n	8010328 <__ieee754_asin+0x50>
 80105a2:	bf00      	nop
 80105a4:	f3af 8000 	nop.w
 80105a8:	54442d18 	.word	0x54442d18
 80105ac:	3ff921fb 	.word	0x3ff921fb
 80105b0:	33145c07 	.word	0x33145c07
 80105b4:	3c91a626 	.word	0x3c91a626
 80105b8:	8800759c 	.word	0x8800759c
 80105bc:	7e37e43c 	.word	0x7e37e43c
 80105c0:	0dfdf709 	.word	0x0dfdf709
 80105c4:	3f023de1 	.word	0x3f023de1
 80105c8:	7501b288 	.word	0x7501b288
 80105cc:	3f49efe0 	.word	0x3f49efe0
 80105d0:	b5688f3b 	.word	0xb5688f3b
 80105d4:	3fa48228 	.word	0x3fa48228
 80105d8:	0e884455 	.word	0x0e884455
 80105dc:	3fc9c155 	.word	0x3fc9c155
 80105e0:	03eb6f7d 	.word	0x03eb6f7d
 80105e4:	3fd4d612 	.word	0x3fd4d612
 80105e8:	55555555 	.word	0x55555555
 80105ec:	3fc55555 	.word	0x3fc55555
 80105f0:	b12e9282 	.word	0xb12e9282
 80105f4:	3fb3b8c5 	.word	0x3fb3b8c5
 80105f8:	1b8d0159 	.word	0x1b8d0159
 80105fc:	3fe6066c 	.word	0x3fe6066c
 8010600:	9c598ac8 	.word	0x9c598ac8
 8010604:	40002ae5 	.word	0x40002ae5
 8010608:	1c8a2d4b 	.word	0x1c8a2d4b
 801060c:	40033a27 	.word	0x40033a27
 8010610:	3fefffff 	.word	0x3fefffff
 8010614:	3fdfffff 	.word	0x3fdfffff
 8010618:	3ff00000 	.word	0x3ff00000
 801061c:	3fe00000 	.word	0x3fe00000
 8010620:	3fef3332 	.word	0x3fef3332
 8010624:	ee10 2a10 	vmov	r2, s0
 8010628:	ee10 0a10 	vmov	r0, s0
 801062c:	465b      	mov	r3, fp
 801062e:	4659      	mov	r1, fp
 8010630:	f7ef fe2c 	bl	800028c <__adddf3>
 8010634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801063c:	4640      	mov	r0, r8
 801063e:	4649      	mov	r1, r9
 8010640:	f7f0 f904 	bl	800084c <__aeabi_ddiv>
 8010644:	4602      	mov	r2, r0
 8010646:	460b      	mov	r3, r1
 8010648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801064c:	f7ef ffd4 	bl	80005f8 <__aeabi_dmul>
 8010650:	2600      	movs	r6, #0
 8010652:	4680      	mov	r8, r0
 8010654:	4689      	mov	r9, r1
 8010656:	4632      	mov	r2, r6
 8010658:	465b      	mov	r3, fp
 801065a:	4630      	mov	r0, r6
 801065c:	4659      	mov	r1, fp
 801065e:	f7ef ffcb 	bl	80005f8 <__aeabi_dmul>
 8010662:	4602      	mov	r2, r0
 8010664:	460b      	mov	r3, r1
 8010666:	4620      	mov	r0, r4
 8010668:	4629      	mov	r1, r5
 801066a:	f7ef fe0d 	bl	8000288 <__aeabi_dsub>
 801066e:	4632      	mov	r2, r6
 8010670:	4604      	mov	r4, r0
 8010672:	460d      	mov	r5, r1
 8010674:	465b      	mov	r3, fp
 8010676:	4650      	mov	r0, sl
 8010678:	4659      	mov	r1, fp
 801067a:	f7ef fe07 	bl	800028c <__adddf3>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	4620      	mov	r0, r4
 8010684:	4629      	mov	r1, r5
 8010686:	f7f0 f8e1 	bl	800084c <__aeabi_ddiv>
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	f7ef fdfd 	bl	800028c <__adddf3>
 8010692:	4602      	mov	r2, r0
 8010694:	460b      	mov	r3, r1
 8010696:	a114      	add	r1, pc, #80	; (adr r1, 80106e8 <__ieee754_asin+0x410>)
 8010698:	e9d1 0100 	ldrd	r0, r1, [r1]
 801069c:	f7ef fdf4 	bl	8000288 <__aeabi_dsub>
 80106a0:	4602      	mov	r2, r0
 80106a2:	460b      	mov	r3, r1
 80106a4:	4640      	mov	r0, r8
 80106a6:	4649      	mov	r1, r9
 80106a8:	f7ef fdee 	bl	8000288 <__aeabi_dsub>
 80106ac:	465f      	mov	r7, fp
 80106ae:	4604      	mov	r4, r0
 80106b0:	460d      	mov	r5, r1
 80106b2:	4632      	mov	r2, r6
 80106b4:	465b      	mov	r3, fp
 80106b6:	4630      	mov	r0, r6
 80106b8:	4639      	mov	r1, r7
 80106ba:	f7ef fde7 	bl	800028c <__adddf3>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	a10b      	add	r1, pc, #44	; (adr r1, 80106f0 <__ieee754_asin+0x418>)
 80106c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106c8:	f7ef fdde 	bl	8000288 <__aeabi_dsub>
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	4620      	mov	r0, r4
 80106d2:	4629      	mov	r1, r5
 80106d4:	f7ef fdd8 	bl	8000288 <__aeabi_dsub>
 80106d8:	4602      	mov	r2, r0
 80106da:	460b      	mov	r3, r1
 80106dc:	a104      	add	r1, pc, #16	; (adr r1, 80106f0 <__ieee754_asin+0x418>)
 80106de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106e2:	e6dd      	b.n	80104a0 <__ieee754_asin+0x1c8>
 80106e4:	f3af 8000 	nop.w
 80106e8:	33145c07 	.word	0x33145c07
 80106ec:	3c91a626 	.word	0x3c91a626
 80106f0:	54442d18 	.word	0x54442d18
 80106f4:	3fe921fb 	.word	0x3fe921fb

080106f8 <__ieee754_pow>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	b091      	sub	sp, #68	; 0x44
 80106fe:	ed8d 1b00 	vstr	d1, [sp]
 8010702:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010706:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801070a:	ea58 0302 	orrs.w	r3, r8, r2
 801070e:	ec57 6b10 	vmov	r6, r7, d0
 8010712:	f000 84be 	beq.w	8011092 <__ieee754_pow+0x99a>
 8010716:	4b7a      	ldr	r3, [pc, #488]	; (8010900 <__ieee754_pow+0x208>)
 8010718:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801071c:	429c      	cmp	r4, r3
 801071e:	463d      	mov	r5, r7
 8010720:	ee10 aa10 	vmov	sl, s0
 8010724:	dc09      	bgt.n	801073a <__ieee754_pow+0x42>
 8010726:	d103      	bne.n	8010730 <__ieee754_pow+0x38>
 8010728:	b93e      	cbnz	r6, 801073a <__ieee754_pow+0x42>
 801072a:	45a0      	cmp	r8, r4
 801072c:	dc0d      	bgt.n	801074a <__ieee754_pow+0x52>
 801072e:	e001      	b.n	8010734 <__ieee754_pow+0x3c>
 8010730:	4598      	cmp	r8, r3
 8010732:	dc02      	bgt.n	801073a <__ieee754_pow+0x42>
 8010734:	4598      	cmp	r8, r3
 8010736:	d10e      	bne.n	8010756 <__ieee754_pow+0x5e>
 8010738:	b16a      	cbz	r2, 8010756 <__ieee754_pow+0x5e>
 801073a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801073e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010742:	ea54 030a 	orrs.w	r3, r4, sl
 8010746:	f000 84a4 	beq.w	8011092 <__ieee754_pow+0x99a>
 801074a:	486e      	ldr	r0, [pc, #440]	; (8010904 <__ieee754_pow+0x20c>)
 801074c:	b011      	add	sp, #68	; 0x44
 801074e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010752:	f001 bce1 	b.w	8012118 <nan>
 8010756:	2d00      	cmp	r5, #0
 8010758:	da53      	bge.n	8010802 <__ieee754_pow+0x10a>
 801075a:	4b6b      	ldr	r3, [pc, #428]	; (8010908 <__ieee754_pow+0x210>)
 801075c:	4598      	cmp	r8, r3
 801075e:	dc4d      	bgt.n	80107fc <__ieee754_pow+0x104>
 8010760:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010764:	4598      	cmp	r8, r3
 8010766:	dd4c      	ble.n	8010802 <__ieee754_pow+0x10a>
 8010768:	ea4f 5328 	mov.w	r3, r8, asr #20
 801076c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010770:	2b14      	cmp	r3, #20
 8010772:	dd26      	ble.n	80107c2 <__ieee754_pow+0xca>
 8010774:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010778:	fa22 f103 	lsr.w	r1, r2, r3
 801077c:	fa01 f303 	lsl.w	r3, r1, r3
 8010780:	4293      	cmp	r3, r2
 8010782:	d13e      	bne.n	8010802 <__ieee754_pow+0x10a>
 8010784:	f001 0101 	and.w	r1, r1, #1
 8010788:	f1c1 0b02 	rsb	fp, r1, #2
 801078c:	2a00      	cmp	r2, #0
 801078e:	d15b      	bne.n	8010848 <__ieee754_pow+0x150>
 8010790:	4b5b      	ldr	r3, [pc, #364]	; (8010900 <__ieee754_pow+0x208>)
 8010792:	4598      	cmp	r8, r3
 8010794:	d124      	bne.n	80107e0 <__ieee754_pow+0xe8>
 8010796:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801079a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801079e:	ea53 030a 	orrs.w	r3, r3, sl
 80107a2:	f000 8476 	beq.w	8011092 <__ieee754_pow+0x99a>
 80107a6:	4b59      	ldr	r3, [pc, #356]	; (801090c <__ieee754_pow+0x214>)
 80107a8:	429c      	cmp	r4, r3
 80107aa:	dd2d      	ble.n	8010808 <__ieee754_pow+0x110>
 80107ac:	f1b9 0f00 	cmp.w	r9, #0
 80107b0:	f280 8473 	bge.w	801109a <__ieee754_pow+0x9a2>
 80107b4:	2000      	movs	r0, #0
 80107b6:	2100      	movs	r1, #0
 80107b8:	ec41 0b10 	vmov	d0, r0, r1
 80107bc:	b011      	add	sp, #68	; 0x44
 80107be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c2:	2a00      	cmp	r2, #0
 80107c4:	d13e      	bne.n	8010844 <__ieee754_pow+0x14c>
 80107c6:	f1c3 0314 	rsb	r3, r3, #20
 80107ca:	fa48 f103 	asr.w	r1, r8, r3
 80107ce:	fa01 f303 	lsl.w	r3, r1, r3
 80107d2:	4543      	cmp	r3, r8
 80107d4:	f040 8469 	bne.w	80110aa <__ieee754_pow+0x9b2>
 80107d8:	f001 0101 	and.w	r1, r1, #1
 80107dc:	f1c1 0b02 	rsb	fp, r1, #2
 80107e0:	4b4b      	ldr	r3, [pc, #300]	; (8010910 <__ieee754_pow+0x218>)
 80107e2:	4598      	cmp	r8, r3
 80107e4:	d118      	bne.n	8010818 <__ieee754_pow+0x120>
 80107e6:	f1b9 0f00 	cmp.w	r9, #0
 80107ea:	f280 845a 	bge.w	80110a2 <__ieee754_pow+0x9aa>
 80107ee:	4948      	ldr	r1, [pc, #288]	; (8010910 <__ieee754_pow+0x218>)
 80107f0:	4632      	mov	r2, r6
 80107f2:	463b      	mov	r3, r7
 80107f4:	2000      	movs	r0, #0
 80107f6:	f7f0 f829 	bl	800084c <__aeabi_ddiv>
 80107fa:	e7dd      	b.n	80107b8 <__ieee754_pow+0xc0>
 80107fc:	f04f 0b02 	mov.w	fp, #2
 8010800:	e7c4      	b.n	801078c <__ieee754_pow+0x94>
 8010802:	f04f 0b00 	mov.w	fp, #0
 8010806:	e7c1      	b.n	801078c <__ieee754_pow+0x94>
 8010808:	f1b9 0f00 	cmp.w	r9, #0
 801080c:	dad2      	bge.n	80107b4 <__ieee754_pow+0xbc>
 801080e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010812:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010816:	e7cf      	b.n	80107b8 <__ieee754_pow+0xc0>
 8010818:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801081c:	d106      	bne.n	801082c <__ieee754_pow+0x134>
 801081e:	4632      	mov	r2, r6
 8010820:	463b      	mov	r3, r7
 8010822:	4610      	mov	r0, r2
 8010824:	4619      	mov	r1, r3
 8010826:	f7ef fee7 	bl	80005f8 <__aeabi_dmul>
 801082a:	e7c5      	b.n	80107b8 <__ieee754_pow+0xc0>
 801082c:	4b39      	ldr	r3, [pc, #228]	; (8010914 <__ieee754_pow+0x21c>)
 801082e:	4599      	cmp	r9, r3
 8010830:	d10a      	bne.n	8010848 <__ieee754_pow+0x150>
 8010832:	2d00      	cmp	r5, #0
 8010834:	db08      	blt.n	8010848 <__ieee754_pow+0x150>
 8010836:	ec47 6b10 	vmov	d0, r6, r7
 801083a:	b011      	add	sp, #68	; 0x44
 801083c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010840:	f000 be5c 	b.w	80114fc <__ieee754_sqrt>
 8010844:	f04f 0b00 	mov.w	fp, #0
 8010848:	ec47 6b10 	vmov	d0, r6, r7
 801084c:	f001 fbca 	bl	8011fe4 <fabs>
 8010850:	ec51 0b10 	vmov	r0, r1, d0
 8010854:	f1ba 0f00 	cmp.w	sl, #0
 8010858:	d127      	bne.n	80108aa <__ieee754_pow+0x1b2>
 801085a:	b124      	cbz	r4, 8010866 <__ieee754_pow+0x16e>
 801085c:	4b2c      	ldr	r3, [pc, #176]	; (8010910 <__ieee754_pow+0x218>)
 801085e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010862:	429a      	cmp	r2, r3
 8010864:	d121      	bne.n	80108aa <__ieee754_pow+0x1b2>
 8010866:	f1b9 0f00 	cmp.w	r9, #0
 801086a:	da05      	bge.n	8010878 <__ieee754_pow+0x180>
 801086c:	4602      	mov	r2, r0
 801086e:	460b      	mov	r3, r1
 8010870:	2000      	movs	r0, #0
 8010872:	4927      	ldr	r1, [pc, #156]	; (8010910 <__ieee754_pow+0x218>)
 8010874:	f7ef ffea 	bl	800084c <__aeabi_ddiv>
 8010878:	2d00      	cmp	r5, #0
 801087a:	da9d      	bge.n	80107b8 <__ieee754_pow+0xc0>
 801087c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010880:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010884:	ea54 030b 	orrs.w	r3, r4, fp
 8010888:	d108      	bne.n	801089c <__ieee754_pow+0x1a4>
 801088a:	4602      	mov	r2, r0
 801088c:	460b      	mov	r3, r1
 801088e:	4610      	mov	r0, r2
 8010890:	4619      	mov	r1, r3
 8010892:	f7ef fcf9 	bl	8000288 <__aeabi_dsub>
 8010896:	4602      	mov	r2, r0
 8010898:	460b      	mov	r3, r1
 801089a:	e7ac      	b.n	80107f6 <__ieee754_pow+0xfe>
 801089c:	f1bb 0f01 	cmp.w	fp, #1
 80108a0:	d18a      	bne.n	80107b8 <__ieee754_pow+0xc0>
 80108a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108a6:	4619      	mov	r1, r3
 80108a8:	e786      	b.n	80107b8 <__ieee754_pow+0xc0>
 80108aa:	0fed      	lsrs	r5, r5, #31
 80108ac:	1e6b      	subs	r3, r5, #1
 80108ae:	930d      	str	r3, [sp, #52]	; 0x34
 80108b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80108b4:	d102      	bne.n	80108bc <__ieee754_pow+0x1c4>
 80108b6:	4632      	mov	r2, r6
 80108b8:	463b      	mov	r3, r7
 80108ba:	e7e8      	b.n	801088e <__ieee754_pow+0x196>
 80108bc:	4b16      	ldr	r3, [pc, #88]	; (8010918 <__ieee754_pow+0x220>)
 80108be:	4598      	cmp	r8, r3
 80108c0:	f340 80fe 	ble.w	8010ac0 <__ieee754_pow+0x3c8>
 80108c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80108c8:	4598      	cmp	r8, r3
 80108ca:	dd0a      	ble.n	80108e2 <__ieee754_pow+0x1ea>
 80108cc:	4b0f      	ldr	r3, [pc, #60]	; (801090c <__ieee754_pow+0x214>)
 80108ce:	429c      	cmp	r4, r3
 80108d0:	dc0d      	bgt.n	80108ee <__ieee754_pow+0x1f6>
 80108d2:	f1b9 0f00 	cmp.w	r9, #0
 80108d6:	f6bf af6d 	bge.w	80107b4 <__ieee754_pow+0xbc>
 80108da:	a307      	add	r3, pc, #28	; (adr r3, 80108f8 <__ieee754_pow+0x200>)
 80108dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e0:	e79f      	b.n	8010822 <__ieee754_pow+0x12a>
 80108e2:	4b0e      	ldr	r3, [pc, #56]	; (801091c <__ieee754_pow+0x224>)
 80108e4:	429c      	cmp	r4, r3
 80108e6:	ddf4      	ble.n	80108d2 <__ieee754_pow+0x1da>
 80108e8:	4b09      	ldr	r3, [pc, #36]	; (8010910 <__ieee754_pow+0x218>)
 80108ea:	429c      	cmp	r4, r3
 80108ec:	dd18      	ble.n	8010920 <__ieee754_pow+0x228>
 80108ee:	f1b9 0f00 	cmp.w	r9, #0
 80108f2:	dcf2      	bgt.n	80108da <__ieee754_pow+0x1e2>
 80108f4:	e75e      	b.n	80107b4 <__ieee754_pow+0xbc>
 80108f6:	bf00      	nop
 80108f8:	8800759c 	.word	0x8800759c
 80108fc:	7e37e43c 	.word	0x7e37e43c
 8010900:	7ff00000 	.word	0x7ff00000
 8010904:	08012419 	.word	0x08012419
 8010908:	433fffff 	.word	0x433fffff
 801090c:	3fefffff 	.word	0x3fefffff
 8010910:	3ff00000 	.word	0x3ff00000
 8010914:	3fe00000 	.word	0x3fe00000
 8010918:	41e00000 	.word	0x41e00000
 801091c:	3feffffe 	.word	0x3feffffe
 8010920:	2200      	movs	r2, #0
 8010922:	4b63      	ldr	r3, [pc, #396]	; (8010ab0 <__ieee754_pow+0x3b8>)
 8010924:	f7ef fcb0 	bl	8000288 <__aeabi_dsub>
 8010928:	a355      	add	r3, pc, #340	; (adr r3, 8010a80 <__ieee754_pow+0x388>)
 801092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092e:	4604      	mov	r4, r0
 8010930:	460d      	mov	r5, r1
 8010932:	f7ef fe61 	bl	80005f8 <__aeabi_dmul>
 8010936:	a354      	add	r3, pc, #336	; (adr r3, 8010a88 <__ieee754_pow+0x390>)
 8010938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093c:	4606      	mov	r6, r0
 801093e:	460f      	mov	r7, r1
 8010940:	4620      	mov	r0, r4
 8010942:	4629      	mov	r1, r5
 8010944:	f7ef fe58 	bl	80005f8 <__aeabi_dmul>
 8010948:	2200      	movs	r2, #0
 801094a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801094e:	4b59      	ldr	r3, [pc, #356]	; (8010ab4 <__ieee754_pow+0x3bc>)
 8010950:	4620      	mov	r0, r4
 8010952:	4629      	mov	r1, r5
 8010954:	f7ef fe50 	bl	80005f8 <__aeabi_dmul>
 8010958:	4602      	mov	r2, r0
 801095a:	460b      	mov	r3, r1
 801095c:	a14c      	add	r1, pc, #304	; (adr r1, 8010a90 <__ieee754_pow+0x398>)
 801095e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010962:	f7ef fc91 	bl	8000288 <__aeabi_dsub>
 8010966:	4622      	mov	r2, r4
 8010968:	462b      	mov	r3, r5
 801096a:	f7ef fe45 	bl	80005f8 <__aeabi_dmul>
 801096e:	4602      	mov	r2, r0
 8010970:	460b      	mov	r3, r1
 8010972:	2000      	movs	r0, #0
 8010974:	4950      	ldr	r1, [pc, #320]	; (8010ab8 <__ieee754_pow+0x3c0>)
 8010976:	f7ef fc87 	bl	8000288 <__aeabi_dsub>
 801097a:	4622      	mov	r2, r4
 801097c:	462b      	mov	r3, r5
 801097e:	4680      	mov	r8, r0
 8010980:	4689      	mov	r9, r1
 8010982:	4620      	mov	r0, r4
 8010984:	4629      	mov	r1, r5
 8010986:	f7ef fe37 	bl	80005f8 <__aeabi_dmul>
 801098a:	4602      	mov	r2, r0
 801098c:	460b      	mov	r3, r1
 801098e:	4640      	mov	r0, r8
 8010990:	4649      	mov	r1, r9
 8010992:	f7ef fe31 	bl	80005f8 <__aeabi_dmul>
 8010996:	a340      	add	r3, pc, #256	; (adr r3, 8010a98 <__ieee754_pow+0x3a0>)
 8010998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099c:	f7ef fe2c 	bl	80005f8 <__aeabi_dmul>
 80109a0:	4602      	mov	r2, r0
 80109a2:	460b      	mov	r3, r1
 80109a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109a8:	f7ef fc6e 	bl	8000288 <__aeabi_dsub>
 80109ac:	4602      	mov	r2, r0
 80109ae:	460b      	mov	r3, r1
 80109b0:	4604      	mov	r4, r0
 80109b2:	460d      	mov	r5, r1
 80109b4:	4630      	mov	r0, r6
 80109b6:	4639      	mov	r1, r7
 80109b8:	f7ef fc68 	bl	800028c <__adddf3>
 80109bc:	2000      	movs	r0, #0
 80109be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109c2:	4632      	mov	r2, r6
 80109c4:	463b      	mov	r3, r7
 80109c6:	f7ef fc5f 	bl	8000288 <__aeabi_dsub>
 80109ca:	4602      	mov	r2, r0
 80109cc:	460b      	mov	r3, r1
 80109ce:	4620      	mov	r0, r4
 80109d0:	4629      	mov	r1, r5
 80109d2:	f7ef fc59 	bl	8000288 <__aeabi_dsub>
 80109d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80109d8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80109dc:	4313      	orrs	r3, r2
 80109de:	4606      	mov	r6, r0
 80109e0:	460f      	mov	r7, r1
 80109e2:	f040 81eb 	bne.w	8010dbc <__ieee754_pow+0x6c4>
 80109e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010aa0 <__ieee754_pow+0x3a8>
 80109ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80109ee:	2400      	movs	r4, #0
 80109f0:	4622      	mov	r2, r4
 80109f2:	462b      	mov	r3, r5
 80109f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80109fc:	f7ef fc44 	bl	8000288 <__aeabi_dsub>
 8010a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a04:	f7ef fdf8 	bl	80005f8 <__aeabi_dmul>
 8010a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a0c:	4680      	mov	r8, r0
 8010a0e:	4689      	mov	r9, r1
 8010a10:	4630      	mov	r0, r6
 8010a12:	4639      	mov	r1, r7
 8010a14:	f7ef fdf0 	bl	80005f8 <__aeabi_dmul>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	4649      	mov	r1, r9
 8010a20:	f7ef fc34 	bl	800028c <__adddf3>
 8010a24:	4622      	mov	r2, r4
 8010a26:	462b      	mov	r3, r5
 8010a28:	4680      	mov	r8, r0
 8010a2a:	4689      	mov	r9, r1
 8010a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a30:	f7ef fde2 	bl	80005f8 <__aeabi_dmul>
 8010a34:	460b      	mov	r3, r1
 8010a36:	4604      	mov	r4, r0
 8010a38:	460d      	mov	r5, r1
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	4649      	mov	r1, r9
 8010a3e:	4640      	mov	r0, r8
 8010a40:	e9cd 4500 	strd	r4, r5, [sp]
 8010a44:	f7ef fc22 	bl	800028c <__adddf3>
 8010a48:	4b1c      	ldr	r3, [pc, #112]	; (8010abc <__ieee754_pow+0x3c4>)
 8010a4a:	4299      	cmp	r1, r3
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	460f      	mov	r7, r1
 8010a50:	468b      	mov	fp, r1
 8010a52:	f340 82f7 	ble.w	8011044 <__ieee754_pow+0x94c>
 8010a56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010a5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010a5e:	4303      	orrs	r3, r0
 8010a60:	f000 81ea 	beq.w	8010e38 <__ieee754_pow+0x740>
 8010a64:	a310      	add	r3, pc, #64	; (adr r3, 8010aa8 <__ieee754_pow+0x3b0>)
 8010a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a6e:	f7ef fdc3 	bl	80005f8 <__aeabi_dmul>
 8010a72:	a30d      	add	r3, pc, #52	; (adr r3, 8010aa8 <__ieee754_pow+0x3b0>)
 8010a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a78:	e6d5      	b.n	8010826 <__ieee754_pow+0x12e>
 8010a7a:	bf00      	nop
 8010a7c:	f3af 8000 	nop.w
 8010a80:	60000000 	.word	0x60000000
 8010a84:	3ff71547 	.word	0x3ff71547
 8010a88:	f85ddf44 	.word	0xf85ddf44
 8010a8c:	3e54ae0b 	.word	0x3e54ae0b
 8010a90:	55555555 	.word	0x55555555
 8010a94:	3fd55555 	.word	0x3fd55555
 8010a98:	652b82fe 	.word	0x652b82fe
 8010a9c:	3ff71547 	.word	0x3ff71547
 8010aa0:	00000000 	.word	0x00000000
 8010aa4:	bff00000 	.word	0xbff00000
 8010aa8:	8800759c 	.word	0x8800759c
 8010aac:	7e37e43c 	.word	0x7e37e43c
 8010ab0:	3ff00000 	.word	0x3ff00000
 8010ab4:	3fd00000 	.word	0x3fd00000
 8010ab8:	3fe00000 	.word	0x3fe00000
 8010abc:	408fffff 	.word	0x408fffff
 8010ac0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010ac4:	f04f 0200 	mov.w	r2, #0
 8010ac8:	da05      	bge.n	8010ad6 <__ieee754_pow+0x3de>
 8010aca:	4bd3      	ldr	r3, [pc, #844]	; (8010e18 <__ieee754_pow+0x720>)
 8010acc:	f7ef fd94 	bl	80005f8 <__aeabi_dmul>
 8010ad0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010ad4:	460c      	mov	r4, r1
 8010ad6:	1523      	asrs	r3, r4, #20
 8010ad8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010adc:	4413      	add	r3, r2
 8010ade:	9309      	str	r3, [sp, #36]	; 0x24
 8010ae0:	4bce      	ldr	r3, [pc, #824]	; (8010e1c <__ieee754_pow+0x724>)
 8010ae2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010ae6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010aea:	429c      	cmp	r4, r3
 8010aec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010af0:	dd08      	ble.n	8010b04 <__ieee754_pow+0x40c>
 8010af2:	4bcb      	ldr	r3, [pc, #812]	; (8010e20 <__ieee754_pow+0x728>)
 8010af4:	429c      	cmp	r4, r3
 8010af6:	f340 815e 	ble.w	8010db6 <__ieee754_pow+0x6be>
 8010afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010afc:	3301      	adds	r3, #1
 8010afe:	9309      	str	r3, [sp, #36]	; 0x24
 8010b00:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010b04:	f04f 0a00 	mov.w	sl, #0
 8010b08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010b0c:	930c      	str	r3, [sp, #48]	; 0x30
 8010b0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b10:	4bc4      	ldr	r3, [pc, #784]	; (8010e24 <__ieee754_pow+0x72c>)
 8010b12:	4413      	add	r3, r2
 8010b14:	ed93 7b00 	vldr	d7, [r3]
 8010b18:	4629      	mov	r1, r5
 8010b1a:	ec53 2b17 	vmov	r2, r3, d7
 8010b1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010b22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010b26:	f7ef fbaf 	bl	8000288 <__aeabi_dsub>
 8010b2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b2e:	4606      	mov	r6, r0
 8010b30:	460f      	mov	r7, r1
 8010b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b36:	f7ef fba9 	bl	800028c <__adddf3>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	2000      	movs	r0, #0
 8010b40:	49b9      	ldr	r1, [pc, #740]	; (8010e28 <__ieee754_pow+0x730>)
 8010b42:	f7ef fe83 	bl	800084c <__aeabi_ddiv>
 8010b46:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	4630      	mov	r0, r6
 8010b50:	4639      	mov	r1, r7
 8010b52:	f7ef fd51 	bl	80005f8 <__aeabi_dmul>
 8010b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b5a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010b5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010b62:	2300      	movs	r3, #0
 8010b64:	9302      	str	r3, [sp, #8]
 8010b66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010b6a:	106d      	asrs	r5, r5, #1
 8010b6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010b70:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010b74:	2200      	movs	r2, #0
 8010b76:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010b7a:	4640      	mov	r0, r8
 8010b7c:	4649      	mov	r1, r9
 8010b7e:	4614      	mov	r4, r2
 8010b80:	461d      	mov	r5, r3
 8010b82:	f7ef fd39 	bl	80005f8 <__aeabi_dmul>
 8010b86:	4602      	mov	r2, r0
 8010b88:	460b      	mov	r3, r1
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	4639      	mov	r1, r7
 8010b8e:	f7ef fb7b 	bl	8000288 <__aeabi_dsub>
 8010b92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010b96:	4606      	mov	r6, r0
 8010b98:	460f      	mov	r7, r1
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	f7ef fb73 	bl	8000288 <__aeabi_dsub>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010baa:	f7ef fb6d 	bl	8000288 <__aeabi_dsub>
 8010bae:	4642      	mov	r2, r8
 8010bb0:	464b      	mov	r3, r9
 8010bb2:	f7ef fd21 	bl	80005f8 <__aeabi_dmul>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	460b      	mov	r3, r1
 8010bba:	4630      	mov	r0, r6
 8010bbc:	4639      	mov	r1, r7
 8010bbe:	f7ef fb63 	bl	8000288 <__aeabi_dsub>
 8010bc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010bc6:	f7ef fd17 	bl	80005f8 <__aeabi_dmul>
 8010bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010bce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	f7ef fd0f 	bl	80005f8 <__aeabi_dmul>
 8010bda:	a37b      	add	r3, pc, #492	; (adr r3, 8010dc8 <__ieee754_pow+0x6d0>)
 8010bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be0:	4604      	mov	r4, r0
 8010be2:	460d      	mov	r5, r1
 8010be4:	f7ef fd08 	bl	80005f8 <__aeabi_dmul>
 8010be8:	a379      	add	r3, pc, #484	; (adr r3, 8010dd0 <__ieee754_pow+0x6d8>)
 8010bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bee:	f7ef fb4d 	bl	800028c <__adddf3>
 8010bf2:	4622      	mov	r2, r4
 8010bf4:	462b      	mov	r3, r5
 8010bf6:	f7ef fcff 	bl	80005f8 <__aeabi_dmul>
 8010bfa:	a377      	add	r3, pc, #476	; (adr r3, 8010dd8 <__ieee754_pow+0x6e0>)
 8010bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c00:	f7ef fb44 	bl	800028c <__adddf3>
 8010c04:	4622      	mov	r2, r4
 8010c06:	462b      	mov	r3, r5
 8010c08:	f7ef fcf6 	bl	80005f8 <__aeabi_dmul>
 8010c0c:	a374      	add	r3, pc, #464	; (adr r3, 8010de0 <__ieee754_pow+0x6e8>)
 8010c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c12:	f7ef fb3b 	bl	800028c <__adddf3>
 8010c16:	4622      	mov	r2, r4
 8010c18:	462b      	mov	r3, r5
 8010c1a:	f7ef fced 	bl	80005f8 <__aeabi_dmul>
 8010c1e:	a372      	add	r3, pc, #456	; (adr r3, 8010de8 <__ieee754_pow+0x6f0>)
 8010c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c24:	f7ef fb32 	bl	800028c <__adddf3>
 8010c28:	4622      	mov	r2, r4
 8010c2a:	462b      	mov	r3, r5
 8010c2c:	f7ef fce4 	bl	80005f8 <__aeabi_dmul>
 8010c30:	a36f      	add	r3, pc, #444	; (adr r3, 8010df0 <__ieee754_pow+0x6f8>)
 8010c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c36:	f7ef fb29 	bl	800028c <__adddf3>
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	460f      	mov	r7, r1
 8010c40:	462b      	mov	r3, r5
 8010c42:	4620      	mov	r0, r4
 8010c44:	4629      	mov	r1, r5
 8010c46:	f7ef fcd7 	bl	80005f8 <__aeabi_dmul>
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	4630      	mov	r0, r6
 8010c50:	4639      	mov	r1, r7
 8010c52:	f7ef fcd1 	bl	80005f8 <__aeabi_dmul>
 8010c56:	4642      	mov	r2, r8
 8010c58:	4604      	mov	r4, r0
 8010c5a:	460d      	mov	r5, r1
 8010c5c:	464b      	mov	r3, r9
 8010c5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c62:	f7ef fb13 	bl	800028c <__adddf3>
 8010c66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c6a:	f7ef fcc5 	bl	80005f8 <__aeabi_dmul>
 8010c6e:	4622      	mov	r2, r4
 8010c70:	462b      	mov	r3, r5
 8010c72:	f7ef fb0b 	bl	800028c <__adddf3>
 8010c76:	4642      	mov	r2, r8
 8010c78:	4606      	mov	r6, r0
 8010c7a:	460f      	mov	r7, r1
 8010c7c:	464b      	mov	r3, r9
 8010c7e:	4640      	mov	r0, r8
 8010c80:	4649      	mov	r1, r9
 8010c82:	f7ef fcb9 	bl	80005f8 <__aeabi_dmul>
 8010c86:	2200      	movs	r2, #0
 8010c88:	4b68      	ldr	r3, [pc, #416]	; (8010e2c <__ieee754_pow+0x734>)
 8010c8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010c8e:	f7ef fafd 	bl	800028c <__adddf3>
 8010c92:	4632      	mov	r2, r6
 8010c94:	463b      	mov	r3, r7
 8010c96:	f7ef faf9 	bl	800028c <__adddf3>
 8010c9a:	9802      	ldr	r0, [sp, #8]
 8010c9c:	460d      	mov	r5, r1
 8010c9e:	4604      	mov	r4, r0
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	4640      	mov	r0, r8
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	f7ef fca6 	bl	80005f8 <__aeabi_dmul>
 8010cac:	2200      	movs	r2, #0
 8010cae:	4680      	mov	r8, r0
 8010cb0:	4689      	mov	r9, r1
 8010cb2:	4b5e      	ldr	r3, [pc, #376]	; (8010e2c <__ieee754_pow+0x734>)
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	4629      	mov	r1, r5
 8010cb8:	f7ef fae6 	bl	8000288 <__aeabi_dsub>
 8010cbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010cc0:	f7ef fae2 	bl	8000288 <__aeabi_dsub>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4630      	mov	r0, r6
 8010cca:	4639      	mov	r1, r7
 8010ccc:	f7ef fadc 	bl	8000288 <__aeabi_dsub>
 8010cd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010cd4:	f7ef fc90 	bl	80005f8 <__aeabi_dmul>
 8010cd8:	4622      	mov	r2, r4
 8010cda:	4606      	mov	r6, r0
 8010cdc:	460f      	mov	r7, r1
 8010cde:	462b      	mov	r3, r5
 8010ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ce4:	f7ef fc88 	bl	80005f8 <__aeabi_dmul>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	460b      	mov	r3, r1
 8010cec:	4630      	mov	r0, r6
 8010cee:	4639      	mov	r1, r7
 8010cf0:	f7ef facc 	bl	800028c <__adddf3>
 8010cf4:	4606      	mov	r6, r0
 8010cf6:	460f      	mov	r7, r1
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	4640      	mov	r0, r8
 8010cfe:	4649      	mov	r1, r9
 8010d00:	f7ef fac4 	bl	800028c <__adddf3>
 8010d04:	9802      	ldr	r0, [sp, #8]
 8010d06:	a33c      	add	r3, pc, #240	; (adr r3, 8010df8 <__ieee754_pow+0x700>)
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	460d      	mov	r5, r1
 8010d10:	f7ef fc72 	bl	80005f8 <__aeabi_dmul>
 8010d14:	4642      	mov	r2, r8
 8010d16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010d1a:	464b      	mov	r3, r9
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	4629      	mov	r1, r5
 8010d20:	f7ef fab2 	bl	8000288 <__aeabi_dsub>
 8010d24:	4602      	mov	r2, r0
 8010d26:	460b      	mov	r3, r1
 8010d28:	4630      	mov	r0, r6
 8010d2a:	4639      	mov	r1, r7
 8010d2c:	f7ef faac 	bl	8000288 <__aeabi_dsub>
 8010d30:	a333      	add	r3, pc, #204	; (adr r3, 8010e00 <__ieee754_pow+0x708>)
 8010d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d36:	f7ef fc5f 	bl	80005f8 <__aeabi_dmul>
 8010d3a:	a333      	add	r3, pc, #204	; (adr r3, 8010e08 <__ieee754_pow+0x710>)
 8010d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d40:	4606      	mov	r6, r0
 8010d42:	460f      	mov	r7, r1
 8010d44:	4620      	mov	r0, r4
 8010d46:	4629      	mov	r1, r5
 8010d48:	f7ef fc56 	bl	80005f8 <__aeabi_dmul>
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	460b      	mov	r3, r1
 8010d50:	4630      	mov	r0, r6
 8010d52:	4639      	mov	r1, r7
 8010d54:	f7ef fa9a 	bl	800028c <__adddf3>
 8010d58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d5a:	4b35      	ldr	r3, [pc, #212]	; (8010e30 <__ieee754_pow+0x738>)
 8010d5c:	4413      	add	r3, r2
 8010d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d62:	f7ef fa93 	bl	800028c <__adddf3>
 8010d66:	4604      	mov	r4, r0
 8010d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d6a:	460d      	mov	r5, r1
 8010d6c:	f7ef fbda 	bl	8000524 <__aeabi_i2d>
 8010d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d72:	4b30      	ldr	r3, [pc, #192]	; (8010e34 <__ieee754_pow+0x73c>)
 8010d74:	4413      	add	r3, r2
 8010d76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010d7a:	4606      	mov	r6, r0
 8010d7c:	460f      	mov	r7, r1
 8010d7e:	4622      	mov	r2, r4
 8010d80:	462b      	mov	r3, r5
 8010d82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d86:	f7ef fa81 	bl	800028c <__adddf3>
 8010d8a:	4642      	mov	r2, r8
 8010d8c:	464b      	mov	r3, r9
 8010d8e:	f7ef fa7d 	bl	800028c <__adddf3>
 8010d92:	4632      	mov	r2, r6
 8010d94:	463b      	mov	r3, r7
 8010d96:	f7ef fa79 	bl	800028c <__adddf3>
 8010d9a:	9802      	ldr	r0, [sp, #8]
 8010d9c:	4632      	mov	r2, r6
 8010d9e:	463b      	mov	r3, r7
 8010da0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010da4:	f7ef fa70 	bl	8000288 <__aeabi_dsub>
 8010da8:	4642      	mov	r2, r8
 8010daa:	464b      	mov	r3, r9
 8010dac:	f7ef fa6c 	bl	8000288 <__aeabi_dsub>
 8010db0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010db4:	e607      	b.n	80109c6 <__ieee754_pow+0x2ce>
 8010db6:	f04f 0a01 	mov.w	sl, #1
 8010dba:	e6a5      	b.n	8010b08 <__ieee754_pow+0x410>
 8010dbc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010e10 <__ieee754_pow+0x718>
 8010dc0:	e613      	b.n	80109ea <__ieee754_pow+0x2f2>
 8010dc2:	bf00      	nop
 8010dc4:	f3af 8000 	nop.w
 8010dc8:	4a454eef 	.word	0x4a454eef
 8010dcc:	3fca7e28 	.word	0x3fca7e28
 8010dd0:	93c9db65 	.word	0x93c9db65
 8010dd4:	3fcd864a 	.word	0x3fcd864a
 8010dd8:	a91d4101 	.word	0xa91d4101
 8010ddc:	3fd17460 	.word	0x3fd17460
 8010de0:	518f264d 	.word	0x518f264d
 8010de4:	3fd55555 	.word	0x3fd55555
 8010de8:	db6fabff 	.word	0xdb6fabff
 8010dec:	3fdb6db6 	.word	0x3fdb6db6
 8010df0:	33333303 	.word	0x33333303
 8010df4:	3fe33333 	.word	0x3fe33333
 8010df8:	e0000000 	.word	0xe0000000
 8010dfc:	3feec709 	.word	0x3feec709
 8010e00:	dc3a03fd 	.word	0xdc3a03fd
 8010e04:	3feec709 	.word	0x3feec709
 8010e08:	145b01f5 	.word	0x145b01f5
 8010e0c:	be3e2fe0 	.word	0xbe3e2fe0
 8010e10:	00000000 	.word	0x00000000
 8010e14:	3ff00000 	.word	0x3ff00000
 8010e18:	43400000 	.word	0x43400000
 8010e1c:	0003988e 	.word	0x0003988e
 8010e20:	000bb679 	.word	0x000bb679
 8010e24:	08012458 	.word	0x08012458
 8010e28:	3ff00000 	.word	0x3ff00000
 8010e2c:	40080000 	.word	0x40080000
 8010e30:	08012478 	.word	0x08012478
 8010e34:	08012468 	.word	0x08012468
 8010e38:	a3b4      	add	r3, pc, #720	; (adr r3, 801110c <__ieee754_pow+0xa14>)
 8010e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e3e:	4640      	mov	r0, r8
 8010e40:	4649      	mov	r1, r9
 8010e42:	f7ef fa23 	bl	800028c <__adddf3>
 8010e46:	4622      	mov	r2, r4
 8010e48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e4c:	462b      	mov	r3, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	4639      	mov	r1, r7
 8010e52:	f7ef fa19 	bl	8000288 <__aeabi_dsub>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e5e:	f7ef fe5b 	bl	8000b18 <__aeabi_dcmpgt>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	f47f adfe 	bne.w	8010a64 <__ieee754_pow+0x36c>
 8010e68:	4aa3      	ldr	r2, [pc, #652]	; (80110f8 <__ieee754_pow+0xa00>)
 8010e6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	f340 810a 	ble.w	8011088 <__ieee754_pow+0x990>
 8010e74:	151b      	asrs	r3, r3, #20
 8010e76:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010e7a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010e7e:	fa4a f303 	asr.w	r3, sl, r3
 8010e82:	445b      	add	r3, fp
 8010e84:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010e88:	4e9c      	ldr	r6, [pc, #624]	; (80110fc <__ieee754_pow+0xa04>)
 8010e8a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010e8e:	4116      	asrs	r6, r2
 8010e90:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010e94:	2000      	movs	r0, #0
 8010e96:	ea23 0106 	bic.w	r1, r3, r6
 8010e9a:	f1c2 0214 	rsb	r2, r2, #20
 8010e9e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010ea2:	fa4a fa02 	asr.w	sl, sl, r2
 8010ea6:	f1bb 0f00 	cmp.w	fp, #0
 8010eaa:	4602      	mov	r2, r0
 8010eac:	460b      	mov	r3, r1
 8010eae:	4620      	mov	r0, r4
 8010eb0:	4629      	mov	r1, r5
 8010eb2:	bfb8      	it	lt
 8010eb4:	f1ca 0a00 	rsblt	sl, sl, #0
 8010eb8:	f7ef f9e6 	bl	8000288 <__aeabi_dsub>
 8010ebc:	e9cd 0100 	strd	r0, r1, [sp]
 8010ec0:	4642      	mov	r2, r8
 8010ec2:	464b      	mov	r3, r9
 8010ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ec8:	f7ef f9e0 	bl	800028c <__adddf3>
 8010ecc:	2000      	movs	r0, #0
 8010ece:	a378      	add	r3, pc, #480	; (adr r3, 80110b0 <__ieee754_pow+0x9b8>)
 8010ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed4:	4604      	mov	r4, r0
 8010ed6:	460d      	mov	r5, r1
 8010ed8:	f7ef fb8e 	bl	80005f8 <__aeabi_dmul>
 8010edc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ee0:	4606      	mov	r6, r0
 8010ee2:	460f      	mov	r7, r1
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	f7ef f9ce 	bl	8000288 <__aeabi_dsub>
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	4640      	mov	r0, r8
 8010ef2:	4649      	mov	r1, r9
 8010ef4:	f7ef f9c8 	bl	8000288 <__aeabi_dsub>
 8010ef8:	a36f      	add	r3, pc, #444	; (adr r3, 80110b8 <__ieee754_pow+0x9c0>)
 8010efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efe:	f7ef fb7b 	bl	80005f8 <__aeabi_dmul>
 8010f02:	a36f      	add	r3, pc, #444	; (adr r3, 80110c0 <__ieee754_pow+0x9c8>)
 8010f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f08:	4680      	mov	r8, r0
 8010f0a:	4689      	mov	r9, r1
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	4629      	mov	r1, r5
 8010f10:	f7ef fb72 	bl	80005f8 <__aeabi_dmul>
 8010f14:	4602      	mov	r2, r0
 8010f16:	460b      	mov	r3, r1
 8010f18:	4640      	mov	r0, r8
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	f7ef f9b6 	bl	800028c <__adddf3>
 8010f20:	4604      	mov	r4, r0
 8010f22:	460d      	mov	r5, r1
 8010f24:	4602      	mov	r2, r0
 8010f26:	460b      	mov	r3, r1
 8010f28:	4630      	mov	r0, r6
 8010f2a:	4639      	mov	r1, r7
 8010f2c:	f7ef f9ae 	bl	800028c <__adddf3>
 8010f30:	4632      	mov	r2, r6
 8010f32:	463b      	mov	r3, r7
 8010f34:	4680      	mov	r8, r0
 8010f36:	4689      	mov	r9, r1
 8010f38:	f7ef f9a6 	bl	8000288 <__aeabi_dsub>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	4620      	mov	r0, r4
 8010f42:	4629      	mov	r1, r5
 8010f44:	f7ef f9a0 	bl	8000288 <__aeabi_dsub>
 8010f48:	4642      	mov	r2, r8
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	460f      	mov	r7, r1
 8010f4e:	464b      	mov	r3, r9
 8010f50:	4640      	mov	r0, r8
 8010f52:	4649      	mov	r1, r9
 8010f54:	f7ef fb50 	bl	80005f8 <__aeabi_dmul>
 8010f58:	a35b      	add	r3, pc, #364	; (adr r3, 80110c8 <__ieee754_pow+0x9d0>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	4604      	mov	r4, r0
 8010f60:	460d      	mov	r5, r1
 8010f62:	f7ef fb49 	bl	80005f8 <__aeabi_dmul>
 8010f66:	a35a      	add	r3, pc, #360	; (adr r3, 80110d0 <__ieee754_pow+0x9d8>)
 8010f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f6c:	f7ef f98c 	bl	8000288 <__aeabi_dsub>
 8010f70:	4622      	mov	r2, r4
 8010f72:	462b      	mov	r3, r5
 8010f74:	f7ef fb40 	bl	80005f8 <__aeabi_dmul>
 8010f78:	a357      	add	r3, pc, #348	; (adr r3, 80110d8 <__ieee754_pow+0x9e0>)
 8010f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f7e:	f7ef f985 	bl	800028c <__adddf3>
 8010f82:	4622      	mov	r2, r4
 8010f84:	462b      	mov	r3, r5
 8010f86:	f7ef fb37 	bl	80005f8 <__aeabi_dmul>
 8010f8a:	a355      	add	r3, pc, #340	; (adr r3, 80110e0 <__ieee754_pow+0x9e8>)
 8010f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f90:	f7ef f97a 	bl	8000288 <__aeabi_dsub>
 8010f94:	4622      	mov	r2, r4
 8010f96:	462b      	mov	r3, r5
 8010f98:	f7ef fb2e 	bl	80005f8 <__aeabi_dmul>
 8010f9c:	a352      	add	r3, pc, #328	; (adr r3, 80110e8 <__ieee754_pow+0x9f0>)
 8010f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa2:	f7ef f973 	bl	800028c <__adddf3>
 8010fa6:	4622      	mov	r2, r4
 8010fa8:	462b      	mov	r3, r5
 8010faa:	f7ef fb25 	bl	80005f8 <__aeabi_dmul>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	4649      	mov	r1, r9
 8010fb6:	f7ef f967 	bl	8000288 <__aeabi_dsub>
 8010fba:	4604      	mov	r4, r0
 8010fbc:	460d      	mov	r5, r1
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	4649      	mov	r1, r9
 8010fc6:	f7ef fb17 	bl	80005f8 <__aeabi_dmul>
 8010fca:	2200      	movs	r2, #0
 8010fcc:	e9cd 0100 	strd	r0, r1, [sp]
 8010fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	f7ef f956 	bl	8000288 <__aeabi_dsub>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fe4:	f7ef fc32 	bl	800084c <__aeabi_ddiv>
 8010fe8:	4632      	mov	r2, r6
 8010fea:	4604      	mov	r4, r0
 8010fec:	460d      	mov	r5, r1
 8010fee:	463b      	mov	r3, r7
 8010ff0:	4640      	mov	r0, r8
 8010ff2:	4649      	mov	r1, r9
 8010ff4:	f7ef fb00 	bl	80005f8 <__aeabi_dmul>
 8010ff8:	4632      	mov	r2, r6
 8010ffa:	463b      	mov	r3, r7
 8010ffc:	f7ef f946 	bl	800028c <__adddf3>
 8011000:	4602      	mov	r2, r0
 8011002:	460b      	mov	r3, r1
 8011004:	4620      	mov	r0, r4
 8011006:	4629      	mov	r1, r5
 8011008:	f7ef f93e 	bl	8000288 <__aeabi_dsub>
 801100c:	4642      	mov	r2, r8
 801100e:	464b      	mov	r3, r9
 8011010:	f7ef f93a 	bl	8000288 <__aeabi_dsub>
 8011014:	4602      	mov	r2, r0
 8011016:	460b      	mov	r3, r1
 8011018:	2000      	movs	r0, #0
 801101a:	4939      	ldr	r1, [pc, #228]	; (8011100 <__ieee754_pow+0xa08>)
 801101c:	f7ef f934 	bl	8000288 <__aeabi_dsub>
 8011020:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011024:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011028:	4602      	mov	r2, r0
 801102a:	460b      	mov	r3, r1
 801102c:	da2f      	bge.n	801108e <__ieee754_pow+0x996>
 801102e:	4650      	mov	r0, sl
 8011030:	ec43 2b10 	vmov	d0, r2, r3
 8011034:	f001 f8fc 	bl	8012230 <scalbn>
 8011038:	ec51 0b10 	vmov	r0, r1, d0
 801103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011040:	f7ff bbf1 	b.w	8010826 <__ieee754_pow+0x12e>
 8011044:	4b2f      	ldr	r3, [pc, #188]	; (8011104 <__ieee754_pow+0xa0c>)
 8011046:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801104a:	429e      	cmp	r6, r3
 801104c:	f77f af0c 	ble.w	8010e68 <__ieee754_pow+0x770>
 8011050:	4b2d      	ldr	r3, [pc, #180]	; (8011108 <__ieee754_pow+0xa10>)
 8011052:	440b      	add	r3, r1
 8011054:	4303      	orrs	r3, r0
 8011056:	d00b      	beq.n	8011070 <__ieee754_pow+0x978>
 8011058:	a325      	add	r3, pc, #148	; (adr r3, 80110f0 <__ieee754_pow+0x9f8>)
 801105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011062:	f7ef fac9 	bl	80005f8 <__aeabi_dmul>
 8011066:	a322      	add	r3, pc, #136	; (adr r3, 80110f0 <__ieee754_pow+0x9f8>)
 8011068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106c:	f7ff bbdb 	b.w	8010826 <__ieee754_pow+0x12e>
 8011070:	4622      	mov	r2, r4
 8011072:	462b      	mov	r3, r5
 8011074:	f7ef f908 	bl	8000288 <__aeabi_dsub>
 8011078:	4642      	mov	r2, r8
 801107a:	464b      	mov	r3, r9
 801107c:	f7ef fd42 	bl	8000b04 <__aeabi_dcmpge>
 8011080:	2800      	cmp	r0, #0
 8011082:	f43f aef1 	beq.w	8010e68 <__ieee754_pow+0x770>
 8011086:	e7e7      	b.n	8011058 <__ieee754_pow+0x960>
 8011088:	f04f 0a00 	mov.w	sl, #0
 801108c:	e718      	b.n	8010ec0 <__ieee754_pow+0x7c8>
 801108e:	4621      	mov	r1, r4
 8011090:	e7d4      	b.n	801103c <__ieee754_pow+0x944>
 8011092:	2000      	movs	r0, #0
 8011094:	491a      	ldr	r1, [pc, #104]	; (8011100 <__ieee754_pow+0xa08>)
 8011096:	f7ff bb8f 	b.w	80107b8 <__ieee754_pow+0xc0>
 801109a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801109e:	f7ff bb8b 	b.w	80107b8 <__ieee754_pow+0xc0>
 80110a2:	4630      	mov	r0, r6
 80110a4:	4639      	mov	r1, r7
 80110a6:	f7ff bb87 	b.w	80107b8 <__ieee754_pow+0xc0>
 80110aa:	4693      	mov	fp, r2
 80110ac:	f7ff bb98 	b.w	80107e0 <__ieee754_pow+0xe8>
 80110b0:	00000000 	.word	0x00000000
 80110b4:	3fe62e43 	.word	0x3fe62e43
 80110b8:	fefa39ef 	.word	0xfefa39ef
 80110bc:	3fe62e42 	.word	0x3fe62e42
 80110c0:	0ca86c39 	.word	0x0ca86c39
 80110c4:	be205c61 	.word	0xbe205c61
 80110c8:	72bea4d0 	.word	0x72bea4d0
 80110cc:	3e663769 	.word	0x3e663769
 80110d0:	c5d26bf1 	.word	0xc5d26bf1
 80110d4:	3ebbbd41 	.word	0x3ebbbd41
 80110d8:	af25de2c 	.word	0xaf25de2c
 80110dc:	3f11566a 	.word	0x3f11566a
 80110e0:	16bebd93 	.word	0x16bebd93
 80110e4:	3f66c16c 	.word	0x3f66c16c
 80110e8:	5555553e 	.word	0x5555553e
 80110ec:	3fc55555 	.word	0x3fc55555
 80110f0:	c2f8f359 	.word	0xc2f8f359
 80110f4:	01a56e1f 	.word	0x01a56e1f
 80110f8:	3fe00000 	.word	0x3fe00000
 80110fc:	000fffff 	.word	0x000fffff
 8011100:	3ff00000 	.word	0x3ff00000
 8011104:	4090cbff 	.word	0x4090cbff
 8011108:	3f6f3400 	.word	0x3f6f3400
 801110c:	652b82fe 	.word	0x652b82fe
 8011110:	3c971547 	.word	0x3c971547
 8011114:	00000000 	.word	0x00000000

08011118 <__ieee754_rem_pio2>:
 8011118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111c:	ec57 6b10 	vmov	r6, r7, d0
 8011120:	4bc3      	ldr	r3, [pc, #780]	; (8011430 <__ieee754_rem_pio2+0x318>)
 8011122:	b08d      	sub	sp, #52	; 0x34
 8011124:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011128:	4598      	cmp	r8, r3
 801112a:	4604      	mov	r4, r0
 801112c:	9704      	str	r7, [sp, #16]
 801112e:	dc07      	bgt.n	8011140 <__ieee754_rem_pio2+0x28>
 8011130:	2200      	movs	r2, #0
 8011132:	2300      	movs	r3, #0
 8011134:	ed84 0b00 	vstr	d0, [r4]
 8011138:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801113c:	2500      	movs	r5, #0
 801113e:	e027      	b.n	8011190 <__ieee754_rem_pio2+0x78>
 8011140:	4bbc      	ldr	r3, [pc, #752]	; (8011434 <__ieee754_rem_pio2+0x31c>)
 8011142:	4598      	cmp	r8, r3
 8011144:	dc75      	bgt.n	8011232 <__ieee754_rem_pio2+0x11a>
 8011146:	9b04      	ldr	r3, [sp, #16]
 8011148:	4dbb      	ldr	r5, [pc, #748]	; (8011438 <__ieee754_rem_pio2+0x320>)
 801114a:	2b00      	cmp	r3, #0
 801114c:	ee10 0a10 	vmov	r0, s0
 8011150:	a3a9      	add	r3, pc, #676	; (adr r3, 80113f8 <__ieee754_rem_pio2+0x2e0>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	4639      	mov	r1, r7
 8011158:	dd36      	ble.n	80111c8 <__ieee754_rem_pio2+0xb0>
 801115a:	f7ef f895 	bl	8000288 <__aeabi_dsub>
 801115e:	45a8      	cmp	r8, r5
 8011160:	4606      	mov	r6, r0
 8011162:	460f      	mov	r7, r1
 8011164:	d018      	beq.n	8011198 <__ieee754_rem_pio2+0x80>
 8011166:	a3a6      	add	r3, pc, #664	; (adr r3, 8011400 <__ieee754_rem_pio2+0x2e8>)
 8011168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116c:	f7ef f88c 	bl	8000288 <__aeabi_dsub>
 8011170:	4602      	mov	r2, r0
 8011172:	460b      	mov	r3, r1
 8011174:	e9c4 2300 	strd	r2, r3, [r4]
 8011178:	4630      	mov	r0, r6
 801117a:	4639      	mov	r1, r7
 801117c:	f7ef f884 	bl	8000288 <__aeabi_dsub>
 8011180:	a39f      	add	r3, pc, #636	; (adr r3, 8011400 <__ieee754_rem_pio2+0x2e8>)
 8011182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011186:	f7ef f87f 	bl	8000288 <__aeabi_dsub>
 801118a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801118e:	2501      	movs	r5, #1
 8011190:	4628      	mov	r0, r5
 8011192:	b00d      	add	sp, #52	; 0x34
 8011194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011198:	a39b      	add	r3, pc, #620	; (adr r3, 8011408 <__ieee754_rem_pio2+0x2f0>)
 801119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119e:	f7ef f873 	bl	8000288 <__aeabi_dsub>
 80111a2:	a39b      	add	r3, pc, #620	; (adr r3, 8011410 <__ieee754_rem_pio2+0x2f8>)
 80111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a8:	4606      	mov	r6, r0
 80111aa:	460f      	mov	r7, r1
 80111ac:	f7ef f86c 	bl	8000288 <__aeabi_dsub>
 80111b0:	4602      	mov	r2, r0
 80111b2:	460b      	mov	r3, r1
 80111b4:	e9c4 2300 	strd	r2, r3, [r4]
 80111b8:	4630      	mov	r0, r6
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7ef f864 	bl	8000288 <__aeabi_dsub>
 80111c0:	a393      	add	r3, pc, #588	; (adr r3, 8011410 <__ieee754_rem_pio2+0x2f8>)
 80111c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c6:	e7de      	b.n	8011186 <__ieee754_rem_pio2+0x6e>
 80111c8:	f7ef f860 	bl	800028c <__adddf3>
 80111cc:	45a8      	cmp	r8, r5
 80111ce:	4606      	mov	r6, r0
 80111d0:	460f      	mov	r7, r1
 80111d2:	d016      	beq.n	8011202 <__ieee754_rem_pio2+0xea>
 80111d4:	a38a      	add	r3, pc, #552	; (adr r3, 8011400 <__ieee754_rem_pio2+0x2e8>)
 80111d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111da:	f7ef f857 	bl	800028c <__adddf3>
 80111de:	4602      	mov	r2, r0
 80111e0:	460b      	mov	r3, r1
 80111e2:	e9c4 2300 	strd	r2, r3, [r4]
 80111e6:	4630      	mov	r0, r6
 80111e8:	4639      	mov	r1, r7
 80111ea:	f7ef f84d 	bl	8000288 <__aeabi_dsub>
 80111ee:	a384      	add	r3, pc, #528	; (adr r3, 8011400 <__ieee754_rem_pio2+0x2e8>)
 80111f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f4:	f7ef f84a 	bl	800028c <__adddf3>
 80111f8:	f04f 35ff 	mov.w	r5, #4294967295
 80111fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011200:	e7c6      	b.n	8011190 <__ieee754_rem_pio2+0x78>
 8011202:	a381      	add	r3, pc, #516	; (adr r3, 8011408 <__ieee754_rem_pio2+0x2f0>)
 8011204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011208:	f7ef f840 	bl	800028c <__adddf3>
 801120c:	a380      	add	r3, pc, #512	; (adr r3, 8011410 <__ieee754_rem_pio2+0x2f8>)
 801120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011212:	4606      	mov	r6, r0
 8011214:	460f      	mov	r7, r1
 8011216:	f7ef f839 	bl	800028c <__adddf3>
 801121a:	4602      	mov	r2, r0
 801121c:	460b      	mov	r3, r1
 801121e:	e9c4 2300 	strd	r2, r3, [r4]
 8011222:	4630      	mov	r0, r6
 8011224:	4639      	mov	r1, r7
 8011226:	f7ef f82f 	bl	8000288 <__aeabi_dsub>
 801122a:	a379      	add	r3, pc, #484	; (adr r3, 8011410 <__ieee754_rem_pio2+0x2f8>)
 801122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011230:	e7e0      	b.n	80111f4 <__ieee754_rem_pio2+0xdc>
 8011232:	4b82      	ldr	r3, [pc, #520]	; (801143c <__ieee754_rem_pio2+0x324>)
 8011234:	4598      	cmp	r8, r3
 8011236:	f300 80d0 	bgt.w	80113da <__ieee754_rem_pio2+0x2c2>
 801123a:	f000 fed3 	bl	8011fe4 <fabs>
 801123e:	ec57 6b10 	vmov	r6, r7, d0
 8011242:	ee10 0a10 	vmov	r0, s0
 8011246:	a374      	add	r3, pc, #464	; (adr r3, 8011418 <__ieee754_rem_pio2+0x300>)
 8011248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124c:	4639      	mov	r1, r7
 801124e:	f7ef f9d3 	bl	80005f8 <__aeabi_dmul>
 8011252:	2200      	movs	r2, #0
 8011254:	4b7a      	ldr	r3, [pc, #488]	; (8011440 <__ieee754_rem_pio2+0x328>)
 8011256:	f7ef f819 	bl	800028c <__adddf3>
 801125a:	f7ef fc7d 	bl	8000b58 <__aeabi_d2iz>
 801125e:	4605      	mov	r5, r0
 8011260:	f7ef f960 	bl	8000524 <__aeabi_i2d>
 8011264:	a364      	add	r3, pc, #400	; (adr r3, 80113f8 <__ieee754_rem_pio2+0x2e0>)
 8011266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801126e:	f7ef f9c3 	bl	80005f8 <__aeabi_dmul>
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	4630      	mov	r0, r6
 8011278:	4639      	mov	r1, r7
 801127a:	f7ef f805 	bl	8000288 <__aeabi_dsub>
 801127e:	a360      	add	r3, pc, #384	; (adr r3, 8011400 <__ieee754_rem_pio2+0x2e8>)
 8011280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011284:	4682      	mov	sl, r0
 8011286:	468b      	mov	fp, r1
 8011288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801128c:	f7ef f9b4 	bl	80005f8 <__aeabi_dmul>
 8011290:	2d1f      	cmp	r5, #31
 8011292:	4606      	mov	r6, r0
 8011294:	460f      	mov	r7, r1
 8011296:	dc0c      	bgt.n	80112b2 <__ieee754_rem_pio2+0x19a>
 8011298:	1e6a      	subs	r2, r5, #1
 801129a:	4b6a      	ldr	r3, [pc, #424]	; (8011444 <__ieee754_rem_pio2+0x32c>)
 801129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112a0:	4543      	cmp	r3, r8
 80112a2:	d006      	beq.n	80112b2 <__ieee754_rem_pio2+0x19a>
 80112a4:	4632      	mov	r2, r6
 80112a6:	463b      	mov	r3, r7
 80112a8:	4650      	mov	r0, sl
 80112aa:	4659      	mov	r1, fp
 80112ac:	f7ee ffec 	bl	8000288 <__aeabi_dsub>
 80112b0:	e00e      	b.n	80112d0 <__ieee754_rem_pio2+0x1b8>
 80112b2:	4632      	mov	r2, r6
 80112b4:	463b      	mov	r3, r7
 80112b6:	4650      	mov	r0, sl
 80112b8:	4659      	mov	r1, fp
 80112ba:	f7ee ffe5 	bl	8000288 <__aeabi_dsub>
 80112be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80112c2:	9305      	str	r3, [sp, #20]
 80112c4:	9a05      	ldr	r2, [sp, #20]
 80112c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	2b10      	cmp	r3, #16
 80112ce:	dc02      	bgt.n	80112d6 <__ieee754_rem_pio2+0x1be>
 80112d0:	e9c4 0100 	strd	r0, r1, [r4]
 80112d4:	e039      	b.n	801134a <__ieee754_rem_pio2+0x232>
 80112d6:	a34c      	add	r3, pc, #304	; (adr r3, 8011408 <__ieee754_rem_pio2+0x2f0>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112e0:	f7ef f98a 	bl	80005f8 <__aeabi_dmul>
 80112e4:	4606      	mov	r6, r0
 80112e6:	460f      	mov	r7, r1
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	4650      	mov	r0, sl
 80112ee:	4659      	mov	r1, fp
 80112f0:	f7ee ffca 	bl	8000288 <__aeabi_dsub>
 80112f4:	4602      	mov	r2, r0
 80112f6:	460b      	mov	r3, r1
 80112f8:	4680      	mov	r8, r0
 80112fa:	4689      	mov	r9, r1
 80112fc:	4650      	mov	r0, sl
 80112fe:	4659      	mov	r1, fp
 8011300:	f7ee ffc2 	bl	8000288 <__aeabi_dsub>
 8011304:	4632      	mov	r2, r6
 8011306:	463b      	mov	r3, r7
 8011308:	f7ee ffbe 	bl	8000288 <__aeabi_dsub>
 801130c:	a340      	add	r3, pc, #256	; (adr r3, 8011410 <__ieee754_rem_pio2+0x2f8>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	4606      	mov	r6, r0
 8011314:	460f      	mov	r7, r1
 8011316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801131a:	f7ef f96d 	bl	80005f8 <__aeabi_dmul>
 801131e:	4632      	mov	r2, r6
 8011320:	463b      	mov	r3, r7
 8011322:	f7ee ffb1 	bl	8000288 <__aeabi_dsub>
 8011326:	4602      	mov	r2, r0
 8011328:	460b      	mov	r3, r1
 801132a:	4606      	mov	r6, r0
 801132c:	460f      	mov	r7, r1
 801132e:	4640      	mov	r0, r8
 8011330:	4649      	mov	r1, r9
 8011332:	f7ee ffa9 	bl	8000288 <__aeabi_dsub>
 8011336:	9a05      	ldr	r2, [sp, #20]
 8011338:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	2b31      	cmp	r3, #49	; 0x31
 8011340:	dc20      	bgt.n	8011384 <__ieee754_rem_pio2+0x26c>
 8011342:	e9c4 0100 	strd	r0, r1, [r4]
 8011346:	46c2      	mov	sl, r8
 8011348:	46cb      	mov	fp, r9
 801134a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801134e:	4650      	mov	r0, sl
 8011350:	4642      	mov	r2, r8
 8011352:	464b      	mov	r3, r9
 8011354:	4659      	mov	r1, fp
 8011356:	f7ee ff97 	bl	8000288 <__aeabi_dsub>
 801135a:	463b      	mov	r3, r7
 801135c:	4632      	mov	r2, r6
 801135e:	f7ee ff93 	bl	8000288 <__aeabi_dsub>
 8011362:	9b04      	ldr	r3, [sp, #16]
 8011364:	2b00      	cmp	r3, #0
 8011366:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801136a:	f6bf af11 	bge.w	8011190 <__ieee754_rem_pio2+0x78>
 801136e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011372:	6063      	str	r3, [r4, #4]
 8011374:	f8c4 8000 	str.w	r8, [r4]
 8011378:	60a0      	str	r0, [r4, #8]
 801137a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801137e:	60e3      	str	r3, [r4, #12]
 8011380:	426d      	negs	r5, r5
 8011382:	e705      	b.n	8011190 <__ieee754_rem_pio2+0x78>
 8011384:	a326      	add	r3, pc, #152	; (adr r3, 8011420 <__ieee754_rem_pio2+0x308>)
 8011386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801138e:	f7ef f933 	bl	80005f8 <__aeabi_dmul>
 8011392:	4606      	mov	r6, r0
 8011394:	460f      	mov	r7, r1
 8011396:	4602      	mov	r2, r0
 8011398:	460b      	mov	r3, r1
 801139a:	4640      	mov	r0, r8
 801139c:	4649      	mov	r1, r9
 801139e:	f7ee ff73 	bl	8000288 <__aeabi_dsub>
 80113a2:	4602      	mov	r2, r0
 80113a4:	460b      	mov	r3, r1
 80113a6:	4682      	mov	sl, r0
 80113a8:	468b      	mov	fp, r1
 80113aa:	4640      	mov	r0, r8
 80113ac:	4649      	mov	r1, r9
 80113ae:	f7ee ff6b 	bl	8000288 <__aeabi_dsub>
 80113b2:	4632      	mov	r2, r6
 80113b4:	463b      	mov	r3, r7
 80113b6:	f7ee ff67 	bl	8000288 <__aeabi_dsub>
 80113ba:	a31b      	add	r3, pc, #108	; (adr r3, 8011428 <__ieee754_rem_pio2+0x310>)
 80113bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c0:	4606      	mov	r6, r0
 80113c2:	460f      	mov	r7, r1
 80113c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113c8:	f7ef f916 	bl	80005f8 <__aeabi_dmul>
 80113cc:	4632      	mov	r2, r6
 80113ce:	463b      	mov	r3, r7
 80113d0:	f7ee ff5a 	bl	8000288 <__aeabi_dsub>
 80113d4:	4606      	mov	r6, r0
 80113d6:	460f      	mov	r7, r1
 80113d8:	e764      	b.n	80112a4 <__ieee754_rem_pio2+0x18c>
 80113da:	4b1b      	ldr	r3, [pc, #108]	; (8011448 <__ieee754_rem_pio2+0x330>)
 80113dc:	4598      	cmp	r8, r3
 80113de:	dd35      	ble.n	801144c <__ieee754_rem_pio2+0x334>
 80113e0:	ee10 2a10 	vmov	r2, s0
 80113e4:	463b      	mov	r3, r7
 80113e6:	4630      	mov	r0, r6
 80113e8:	4639      	mov	r1, r7
 80113ea:	f7ee ff4d 	bl	8000288 <__aeabi_dsub>
 80113ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113f2:	e9c4 0100 	strd	r0, r1, [r4]
 80113f6:	e6a1      	b.n	801113c <__ieee754_rem_pio2+0x24>
 80113f8:	54400000 	.word	0x54400000
 80113fc:	3ff921fb 	.word	0x3ff921fb
 8011400:	1a626331 	.word	0x1a626331
 8011404:	3dd0b461 	.word	0x3dd0b461
 8011408:	1a600000 	.word	0x1a600000
 801140c:	3dd0b461 	.word	0x3dd0b461
 8011410:	2e037073 	.word	0x2e037073
 8011414:	3ba3198a 	.word	0x3ba3198a
 8011418:	6dc9c883 	.word	0x6dc9c883
 801141c:	3fe45f30 	.word	0x3fe45f30
 8011420:	2e000000 	.word	0x2e000000
 8011424:	3ba3198a 	.word	0x3ba3198a
 8011428:	252049c1 	.word	0x252049c1
 801142c:	397b839a 	.word	0x397b839a
 8011430:	3fe921fb 	.word	0x3fe921fb
 8011434:	4002d97b 	.word	0x4002d97b
 8011438:	3ff921fb 	.word	0x3ff921fb
 801143c:	413921fb 	.word	0x413921fb
 8011440:	3fe00000 	.word	0x3fe00000
 8011444:	08012488 	.word	0x08012488
 8011448:	7fefffff 	.word	0x7fefffff
 801144c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011450:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011454:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011458:	4630      	mov	r0, r6
 801145a:	460f      	mov	r7, r1
 801145c:	f7ef fb7c 	bl	8000b58 <__aeabi_d2iz>
 8011460:	f7ef f860 	bl	8000524 <__aeabi_i2d>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	4630      	mov	r0, r6
 801146a:	4639      	mov	r1, r7
 801146c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011470:	f7ee ff0a 	bl	8000288 <__aeabi_dsub>
 8011474:	2200      	movs	r2, #0
 8011476:	4b1f      	ldr	r3, [pc, #124]	; (80114f4 <__ieee754_rem_pio2+0x3dc>)
 8011478:	f7ef f8be 	bl	80005f8 <__aeabi_dmul>
 801147c:	460f      	mov	r7, r1
 801147e:	4606      	mov	r6, r0
 8011480:	f7ef fb6a 	bl	8000b58 <__aeabi_d2iz>
 8011484:	f7ef f84e 	bl	8000524 <__aeabi_i2d>
 8011488:	4602      	mov	r2, r0
 801148a:	460b      	mov	r3, r1
 801148c:	4630      	mov	r0, r6
 801148e:	4639      	mov	r1, r7
 8011490:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011494:	f7ee fef8 	bl	8000288 <__aeabi_dsub>
 8011498:	2200      	movs	r2, #0
 801149a:	4b16      	ldr	r3, [pc, #88]	; (80114f4 <__ieee754_rem_pio2+0x3dc>)
 801149c:	f7ef f8ac 	bl	80005f8 <__aeabi_dmul>
 80114a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80114a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80114a8:	f04f 0803 	mov.w	r8, #3
 80114ac:	2600      	movs	r6, #0
 80114ae:	2700      	movs	r7, #0
 80114b0:	4632      	mov	r2, r6
 80114b2:	463b      	mov	r3, r7
 80114b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80114b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80114bc:	f7ef fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80114c0:	b9b0      	cbnz	r0, 80114f0 <__ieee754_rem_pio2+0x3d8>
 80114c2:	4b0d      	ldr	r3, [pc, #52]	; (80114f8 <__ieee754_rem_pio2+0x3e0>)
 80114c4:	9301      	str	r3, [sp, #4]
 80114c6:	2302      	movs	r3, #2
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	462a      	mov	r2, r5
 80114cc:	4643      	mov	r3, r8
 80114ce:	4621      	mov	r1, r4
 80114d0:	a806      	add	r0, sp, #24
 80114d2:	f000 f98d 	bl	80117f0 <__kernel_rem_pio2>
 80114d6:	9b04      	ldr	r3, [sp, #16]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	4605      	mov	r5, r0
 80114dc:	f6bf ae58 	bge.w	8011190 <__ieee754_rem_pio2+0x78>
 80114e0:	6863      	ldr	r3, [r4, #4]
 80114e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80114e6:	6063      	str	r3, [r4, #4]
 80114e8:	68e3      	ldr	r3, [r4, #12]
 80114ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80114ee:	e746      	b.n	801137e <__ieee754_rem_pio2+0x266>
 80114f0:	46d0      	mov	r8, sl
 80114f2:	e7dd      	b.n	80114b0 <__ieee754_rem_pio2+0x398>
 80114f4:	41700000 	.word	0x41700000
 80114f8:	08012508 	.word	0x08012508

080114fc <__ieee754_sqrt>:
 80114fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011500:	4955      	ldr	r1, [pc, #340]	; (8011658 <__ieee754_sqrt+0x15c>)
 8011502:	ec55 4b10 	vmov	r4, r5, d0
 8011506:	43a9      	bics	r1, r5
 8011508:	462b      	mov	r3, r5
 801150a:	462a      	mov	r2, r5
 801150c:	d112      	bne.n	8011534 <__ieee754_sqrt+0x38>
 801150e:	ee10 2a10 	vmov	r2, s0
 8011512:	ee10 0a10 	vmov	r0, s0
 8011516:	4629      	mov	r1, r5
 8011518:	f7ef f86e 	bl	80005f8 <__aeabi_dmul>
 801151c:	4602      	mov	r2, r0
 801151e:	460b      	mov	r3, r1
 8011520:	4620      	mov	r0, r4
 8011522:	4629      	mov	r1, r5
 8011524:	f7ee feb2 	bl	800028c <__adddf3>
 8011528:	4604      	mov	r4, r0
 801152a:	460d      	mov	r5, r1
 801152c:	ec45 4b10 	vmov	d0, r4, r5
 8011530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011534:	2d00      	cmp	r5, #0
 8011536:	ee10 0a10 	vmov	r0, s0
 801153a:	4621      	mov	r1, r4
 801153c:	dc0f      	bgt.n	801155e <__ieee754_sqrt+0x62>
 801153e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011542:	4330      	orrs	r0, r6
 8011544:	d0f2      	beq.n	801152c <__ieee754_sqrt+0x30>
 8011546:	b155      	cbz	r5, 801155e <__ieee754_sqrt+0x62>
 8011548:	ee10 2a10 	vmov	r2, s0
 801154c:	4620      	mov	r0, r4
 801154e:	4629      	mov	r1, r5
 8011550:	f7ee fe9a 	bl	8000288 <__aeabi_dsub>
 8011554:	4602      	mov	r2, r0
 8011556:	460b      	mov	r3, r1
 8011558:	f7ef f978 	bl	800084c <__aeabi_ddiv>
 801155c:	e7e4      	b.n	8011528 <__ieee754_sqrt+0x2c>
 801155e:	151b      	asrs	r3, r3, #20
 8011560:	d073      	beq.n	801164a <__ieee754_sqrt+0x14e>
 8011562:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011566:	07dd      	lsls	r5, r3, #31
 8011568:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801156c:	bf48      	it	mi
 801156e:	0fc8      	lsrmi	r0, r1, #31
 8011570:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011574:	bf44      	itt	mi
 8011576:	0049      	lslmi	r1, r1, #1
 8011578:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801157c:	2500      	movs	r5, #0
 801157e:	1058      	asrs	r0, r3, #1
 8011580:	0fcb      	lsrs	r3, r1, #31
 8011582:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011586:	0049      	lsls	r1, r1, #1
 8011588:	2316      	movs	r3, #22
 801158a:	462c      	mov	r4, r5
 801158c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011590:	19a7      	adds	r7, r4, r6
 8011592:	4297      	cmp	r7, r2
 8011594:	bfde      	ittt	le
 8011596:	19bc      	addle	r4, r7, r6
 8011598:	1bd2      	suble	r2, r2, r7
 801159a:	19ad      	addle	r5, r5, r6
 801159c:	0fcf      	lsrs	r7, r1, #31
 801159e:	3b01      	subs	r3, #1
 80115a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80115a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80115a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80115ac:	d1f0      	bne.n	8011590 <__ieee754_sqrt+0x94>
 80115ae:	f04f 0c20 	mov.w	ip, #32
 80115b2:	469e      	mov	lr, r3
 80115b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80115b8:	42a2      	cmp	r2, r4
 80115ba:	eb06 070e 	add.w	r7, r6, lr
 80115be:	dc02      	bgt.n	80115c6 <__ieee754_sqrt+0xca>
 80115c0:	d112      	bne.n	80115e8 <__ieee754_sqrt+0xec>
 80115c2:	428f      	cmp	r7, r1
 80115c4:	d810      	bhi.n	80115e8 <__ieee754_sqrt+0xec>
 80115c6:	2f00      	cmp	r7, #0
 80115c8:	eb07 0e06 	add.w	lr, r7, r6
 80115cc:	da42      	bge.n	8011654 <__ieee754_sqrt+0x158>
 80115ce:	f1be 0f00 	cmp.w	lr, #0
 80115d2:	db3f      	blt.n	8011654 <__ieee754_sqrt+0x158>
 80115d4:	f104 0801 	add.w	r8, r4, #1
 80115d8:	1b12      	subs	r2, r2, r4
 80115da:	428f      	cmp	r7, r1
 80115dc:	bf88      	it	hi
 80115de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80115e2:	1bc9      	subs	r1, r1, r7
 80115e4:	4433      	add	r3, r6
 80115e6:	4644      	mov	r4, r8
 80115e8:	0052      	lsls	r2, r2, #1
 80115ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80115ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80115f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80115f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80115fa:	d1dd      	bne.n	80115b8 <__ieee754_sqrt+0xbc>
 80115fc:	430a      	orrs	r2, r1
 80115fe:	d006      	beq.n	801160e <__ieee754_sqrt+0x112>
 8011600:	1c5c      	adds	r4, r3, #1
 8011602:	bf13      	iteet	ne
 8011604:	3301      	addne	r3, #1
 8011606:	3501      	addeq	r5, #1
 8011608:	4663      	moveq	r3, ip
 801160a:	f023 0301 	bicne.w	r3, r3, #1
 801160e:	106a      	asrs	r2, r5, #1
 8011610:	085b      	lsrs	r3, r3, #1
 8011612:	07e9      	lsls	r1, r5, #31
 8011614:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011618:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801161c:	bf48      	it	mi
 801161e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011622:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011626:	461c      	mov	r4, r3
 8011628:	e780      	b.n	801152c <__ieee754_sqrt+0x30>
 801162a:	0aca      	lsrs	r2, r1, #11
 801162c:	3815      	subs	r0, #21
 801162e:	0549      	lsls	r1, r1, #21
 8011630:	2a00      	cmp	r2, #0
 8011632:	d0fa      	beq.n	801162a <__ieee754_sqrt+0x12e>
 8011634:	02d6      	lsls	r6, r2, #11
 8011636:	d50a      	bpl.n	801164e <__ieee754_sqrt+0x152>
 8011638:	f1c3 0420 	rsb	r4, r3, #32
 801163c:	fa21 f404 	lsr.w	r4, r1, r4
 8011640:	1e5d      	subs	r5, r3, #1
 8011642:	4099      	lsls	r1, r3
 8011644:	4322      	orrs	r2, r4
 8011646:	1b43      	subs	r3, r0, r5
 8011648:	e78b      	b.n	8011562 <__ieee754_sqrt+0x66>
 801164a:	4618      	mov	r0, r3
 801164c:	e7f0      	b.n	8011630 <__ieee754_sqrt+0x134>
 801164e:	0052      	lsls	r2, r2, #1
 8011650:	3301      	adds	r3, #1
 8011652:	e7ef      	b.n	8011634 <__ieee754_sqrt+0x138>
 8011654:	46a0      	mov	r8, r4
 8011656:	e7bf      	b.n	80115d8 <__ieee754_sqrt+0xdc>
 8011658:	7ff00000 	.word	0x7ff00000
 801165c:	00000000 	.word	0x00000000

08011660 <__kernel_cos>:
 8011660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011664:	ec59 8b10 	vmov	r8, r9, d0
 8011668:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801166c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011670:	ed2d 8b02 	vpush	{d8}
 8011674:	eeb0 8a41 	vmov.f32	s16, s2
 8011678:	eef0 8a61 	vmov.f32	s17, s3
 801167c:	da07      	bge.n	801168e <__kernel_cos+0x2e>
 801167e:	ee10 0a10 	vmov	r0, s0
 8011682:	4649      	mov	r1, r9
 8011684:	f7ef fa68 	bl	8000b58 <__aeabi_d2iz>
 8011688:	2800      	cmp	r0, #0
 801168a:	f000 8089 	beq.w	80117a0 <__kernel_cos+0x140>
 801168e:	4642      	mov	r2, r8
 8011690:	464b      	mov	r3, r9
 8011692:	4640      	mov	r0, r8
 8011694:	4649      	mov	r1, r9
 8011696:	f7ee ffaf 	bl	80005f8 <__aeabi_dmul>
 801169a:	2200      	movs	r2, #0
 801169c:	4b4e      	ldr	r3, [pc, #312]	; (80117d8 <__kernel_cos+0x178>)
 801169e:	4604      	mov	r4, r0
 80116a0:	460d      	mov	r5, r1
 80116a2:	f7ee ffa9 	bl	80005f8 <__aeabi_dmul>
 80116a6:	a340      	add	r3, pc, #256	; (adr r3, 80117a8 <__kernel_cos+0x148>)
 80116a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ac:	4682      	mov	sl, r0
 80116ae:	468b      	mov	fp, r1
 80116b0:	4620      	mov	r0, r4
 80116b2:	4629      	mov	r1, r5
 80116b4:	f7ee ffa0 	bl	80005f8 <__aeabi_dmul>
 80116b8:	a33d      	add	r3, pc, #244	; (adr r3, 80117b0 <__kernel_cos+0x150>)
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	f7ee fde5 	bl	800028c <__adddf3>
 80116c2:	4622      	mov	r2, r4
 80116c4:	462b      	mov	r3, r5
 80116c6:	f7ee ff97 	bl	80005f8 <__aeabi_dmul>
 80116ca:	a33b      	add	r3, pc, #236	; (adr r3, 80117b8 <__kernel_cos+0x158>)
 80116cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d0:	f7ee fdda 	bl	8000288 <__aeabi_dsub>
 80116d4:	4622      	mov	r2, r4
 80116d6:	462b      	mov	r3, r5
 80116d8:	f7ee ff8e 	bl	80005f8 <__aeabi_dmul>
 80116dc:	a338      	add	r3, pc, #224	; (adr r3, 80117c0 <__kernel_cos+0x160>)
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	f7ee fdd3 	bl	800028c <__adddf3>
 80116e6:	4622      	mov	r2, r4
 80116e8:	462b      	mov	r3, r5
 80116ea:	f7ee ff85 	bl	80005f8 <__aeabi_dmul>
 80116ee:	a336      	add	r3, pc, #216	; (adr r3, 80117c8 <__kernel_cos+0x168>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	f7ee fdc8 	bl	8000288 <__aeabi_dsub>
 80116f8:	4622      	mov	r2, r4
 80116fa:	462b      	mov	r3, r5
 80116fc:	f7ee ff7c 	bl	80005f8 <__aeabi_dmul>
 8011700:	a333      	add	r3, pc, #204	; (adr r3, 80117d0 <__kernel_cos+0x170>)
 8011702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011706:	f7ee fdc1 	bl	800028c <__adddf3>
 801170a:	4622      	mov	r2, r4
 801170c:	462b      	mov	r3, r5
 801170e:	f7ee ff73 	bl	80005f8 <__aeabi_dmul>
 8011712:	4622      	mov	r2, r4
 8011714:	462b      	mov	r3, r5
 8011716:	f7ee ff6f 	bl	80005f8 <__aeabi_dmul>
 801171a:	ec53 2b18 	vmov	r2, r3, d8
 801171e:	4604      	mov	r4, r0
 8011720:	460d      	mov	r5, r1
 8011722:	4640      	mov	r0, r8
 8011724:	4649      	mov	r1, r9
 8011726:	f7ee ff67 	bl	80005f8 <__aeabi_dmul>
 801172a:	460b      	mov	r3, r1
 801172c:	4602      	mov	r2, r0
 801172e:	4629      	mov	r1, r5
 8011730:	4620      	mov	r0, r4
 8011732:	f7ee fda9 	bl	8000288 <__aeabi_dsub>
 8011736:	4b29      	ldr	r3, [pc, #164]	; (80117dc <__kernel_cos+0x17c>)
 8011738:	429e      	cmp	r6, r3
 801173a:	4680      	mov	r8, r0
 801173c:	4689      	mov	r9, r1
 801173e:	dc11      	bgt.n	8011764 <__kernel_cos+0x104>
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	4650      	mov	r0, sl
 8011746:	4659      	mov	r1, fp
 8011748:	f7ee fd9e 	bl	8000288 <__aeabi_dsub>
 801174c:	460b      	mov	r3, r1
 801174e:	4924      	ldr	r1, [pc, #144]	; (80117e0 <__kernel_cos+0x180>)
 8011750:	4602      	mov	r2, r0
 8011752:	2000      	movs	r0, #0
 8011754:	f7ee fd98 	bl	8000288 <__aeabi_dsub>
 8011758:	ecbd 8b02 	vpop	{d8}
 801175c:	ec41 0b10 	vmov	d0, r0, r1
 8011760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011764:	4b1f      	ldr	r3, [pc, #124]	; (80117e4 <__kernel_cos+0x184>)
 8011766:	491e      	ldr	r1, [pc, #120]	; (80117e0 <__kernel_cos+0x180>)
 8011768:	429e      	cmp	r6, r3
 801176a:	bfcc      	ite	gt
 801176c:	4d1e      	ldrgt	r5, [pc, #120]	; (80117e8 <__kernel_cos+0x188>)
 801176e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011772:	2400      	movs	r4, #0
 8011774:	4622      	mov	r2, r4
 8011776:	462b      	mov	r3, r5
 8011778:	2000      	movs	r0, #0
 801177a:	f7ee fd85 	bl	8000288 <__aeabi_dsub>
 801177e:	4622      	mov	r2, r4
 8011780:	4606      	mov	r6, r0
 8011782:	460f      	mov	r7, r1
 8011784:	462b      	mov	r3, r5
 8011786:	4650      	mov	r0, sl
 8011788:	4659      	mov	r1, fp
 801178a:	f7ee fd7d 	bl	8000288 <__aeabi_dsub>
 801178e:	4642      	mov	r2, r8
 8011790:	464b      	mov	r3, r9
 8011792:	f7ee fd79 	bl	8000288 <__aeabi_dsub>
 8011796:	4602      	mov	r2, r0
 8011798:	460b      	mov	r3, r1
 801179a:	4630      	mov	r0, r6
 801179c:	4639      	mov	r1, r7
 801179e:	e7d9      	b.n	8011754 <__kernel_cos+0xf4>
 80117a0:	2000      	movs	r0, #0
 80117a2:	490f      	ldr	r1, [pc, #60]	; (80117e0 <__kernel_cos+0x180>)
 80117a4:	e7d8      	b.n	8011758 <__kernel_cos+0xf8>
 80117a6:	bf00      	nop
 80117a8:	be8838d4 	.word	0xbe8838d4
 80117ac:	bda8fae9 	.word	0xbda8fae9
 80117b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80117b4:	3e21ee9e 	.word	0x3e21ee9e
 80117b8:	809c52ad 	.word	0x809c52ad
 80117bc:	3e927e4f 	.word	0x3e927e4f
 80117c0:	19cb1590 	.word	0x19cb1590
 80117c4:	3efa01a0 	.word	0x3efa01a0
 80117c8:	16c15177 	.word	0x16c15177
 80117cc:	3f56c16c 	.word	0x3f56c16c
 80117d0:	5555554c 	.word	0x5555554c
 80117d4:	3fa55555 	.word	0x3fa55555
 80117d8:	3fe00000 	.word	0x3fe00000
 80117dc:	3fd33332 	.word	0x3fd33332
 80117e0:	3ff00000 	.word	0x3ff00000
 80117e4:	3fe90000 	.word	0x3fe90000
 80117e8:	3fd20000 	.word	0x3fd20000
 80117ec:	00000000 	.word	0x00000000

080117f0 <__kernel_rem_pio2>:
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	ed2d 8b02 	vpush	{d8}
 80117f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80117fc:	1ed4      	subs	r4, r2, #3
 80117fe:	9308      	str	r3, [sp, #32]
 8011800:	9101      	str	r1, [sp, #4]
 8011802:	4bc5      	ldr	r3, [pc, #788]	; (8011b18 <__kernel_rem_pio2+0x328>)
 8011804:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011806:	9009      	str	r0, [sp, #36]	; 0x24
 8011808:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801180c:	9304      	str	r3, [sp, #16]
 801180e:	9b08      	ldr	r3, [sp, #32]
 8011810:	3b01      	subs	r3, #1
 8011812:	9307      	str	r3, [sp, #28]
 8011814:	2318      	movs	r3, #24
 8011816:	fb94 f4f3 	sdiv	r4, r4, r3
 801181a:	f06f 0317 	mvn.w	r3, #23
 801181e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011822:	fb04 3303 	mla	r3, r4, r3, r3
 8011826:	eb03 0a02 	add.w	sl, r3, r2
 801182a:	9b04      	ldr	r3, [sp, #16]
 801182c:	9a07      	ldr	r2, [sp, #28]
 801182e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011b08 <__kernel_rem_pio2+0x318>
 8011832:	eb03 0802 	add.w	r8, r3, r2
 8011836:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011838:	1aa7      	subs	r7, r4, r2
 801183a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801183e:	ae22      	add	r6, sp, #136	; 0x88
 8011840:	2500      	movs	r5, #0
 8011842:	4545      	cmp	r5, r8
 8011844:	dd13      	ble.n	801186e <__kernel_rem_pio2+0x7e>
 8011846:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011b08 <__kernel_rem_pio2+0x318>
 801184a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801184e:	2600      	movs	r6, #0
 8011850:	9b04      	ldr	r3, [sp, #16]
 8011852:	429e      	cmp	r6, r3
 8011854:	dc32      	bgt.n	80118bc <__kernel_rem_pio2+0xcc>
 8011856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011858:	9302      	str	r3, [sp, #8]
 801185a:	9b08      	ldr	r3, [sp, #32]
 801185c:	199d      	adds	r5, r3, r6
 801185e:	ab22      	add	r3, sp, #136	; 0x88
 8011860:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011864:	9306      	str	r3, [sp, #24]
 8011866:	ec59 8b18 	vmov	r8, r9, d8
 801186a:	2700      	movs	r7, #0
 801186c:	e01f      	b.n	80118ae <__kernel_rem_pio2+0xbe>
 801186e:	42ef      	cmn	r7, r5
 8011870:	d407      	bmi.n	8011882 <__kernel_rem_pio2+0x92>
 8011872:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011876:	f7ee fe55 	bl	8000524 <__aeabi_i2d>
 801187a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801187e:	3501      	adds	r5, #1
 8011880:	e7df      	b.n	8011842 <__kernel_rem_pio2+0x52>
 8011882:	ec51 0b18 	vmov	r0, r1, d8
 8011886:	e7f8      	b.n	801187a <__kernel_rem_pio2+0x8a>
 8011888:	9906      	ldr	r1, [sp, #24]
 801188a:	9d02      	ldr	r5, [sp, #8]
 801188c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011890:	9106      	str	r1, [sp, #24]
 8011892:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011896:	9502      	str	r5, [sp, #8]
 8011898:	f7ee feae 	bl	80005f8 <__aeabi_dmul>
 801189c:	4602      	mov	r2, r0
 801189e:	460b      	mov	r3, r1
 80118a0:	4640      	mov	r0, r8
 80118a2:	4649      	mov	r1, r9
 80118a4:	f7ee fcf2 	bl	800028c <__adddf3>
 80118a8:	3701      	adds	r7, #1
 80118aa:	4680      	mov	r8, r0
 80118ac:	4689      	mov	r9, r1
 80118ae:	9b07      	ldr	r3, [sp, #28]
 80118b0:	429f      	cmp	r7, r3
 80118b2:	dde9      	ble.n	8011888 <__kernel_rem_pio2+0x98>
 80118b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80118b8:	3601      	adds	r6, #1
 80118ba:	e7c9      	b.n	8011850 <__kernel_rem_pio2+0x60>
 80118bc:	9b04      	ldr	r3, [sp, #16]
 80118be:	aa0e      	add	r2, sp, #56	; 0x38
 80118c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118c4:	930c      	str	r3, [sp, #48]	; 0x30
 80118c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80118c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80118cc:	9c04      	ldr	r4, [sp, #16]
 80118ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80118d0:	ab9a      	add	r3, sp, #616	; 0x268
 80118d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80118d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80118e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80118e6:	ab9a      	add	r3, sp, #616	; 0x268
 80118e8:	445b      	add	r3, fp
 80118ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80118ee:	2500      	movs	r5, #0
 80118f0:	1b63      	subs	r3, r4, r5
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	dc78      	bgt.n	80119e8 <__kernel_rem_pio2+0x1f8>
 80118f6:	4650      	mov	r0, sl
 80118f8:	ec49 8b10 	vmov	d0, r8, r9
 80118fc:	f000 fc98 	bl	8012230 <scalbn>
 8011900:	ec57 6b10 	vmov	r6, r7, d0
 8011904:	2200      	movs	r2, #0
 8011906:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801190a:	ee10 0a10 	vmov	r0, s0
 801190e:	4639      	mov	r1, r7
 8011910:	f7ee fe72 	bl	80005f8 <__aeabi_dmul>
 8011914:	ec41 0b10 	vmov	d0, r0, r1
 8011918:	f000 fb76 	bl	8012008 <floor>
 801191c:	2200      	movs	r2, #0
 801191e:	ec51 0b10 	vmov	r0, r1, d0
 8011922:	4b7e      	ldr	r3, [pc, #504]	; (8011b1c <__kernel_rem_pio2+0x32c>)
 8011924:	f7ee fe68 	bl	80005f8 <__aeabi_dmul>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	4630      	mov	r0, r6
 801192e:	4639      	mov	r1, r7
 8011930:	f7ee fcaa 	bl	8000288 <__aeabi_dsub>
 8011934:	460f      	mov	r7, r1
 8011936:	4606      	mov	r6, r0
 8011938:	f7ef f90e 	bl	8000b58 <__aeabi_d2iz>
 801193c:	9006      	str	r0, [sp, #24]
 801193e:	f7ee fdf1 	bl	8000524 <__aeabi_i2d>
 8011942:	4602      	mov	r2, r0
 8011944:	460b      	mov	r3, r1
 8011946:	4630      	mov	r0, r6
 8011948:	4639      	mov	r1, r7
 801194a:	f7ee fc9d 	bl	8000288 <__aeabi_dsub>
 801194e:	f1ba 0f00 	cmp.w	sl, #0
 8011952:	4606      	mov	r6, r0
 8011954:	460f      	mov	r7, r1
 8011956:	dd6c      	ble.n	8011a32 <__kernel_rem_pio2+0x242>
 8011958:	1e62      	subs	r2, r4, #1
 801195a:	ab0e      	add	r3, sp, #56	; 0x38
 801195c:	f1ca 0118 	rsb	r1, sl, #24
 8011960:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011964:	9d06      	ldr	r5, [sp, #24]
 8011966:	fa40 f301 	asr.w	r3, r0, r1
 801196a:	441d      	add	r5, r3
 801196c:	408b      	lsls	r3, r1
 801196e:	1ac0      	subs	r0, r0, r3
 8011970:	ab0e      	add	r3, sp, #56	; 0x38
 8011972:	9506      	str	r5, [sp, #24]
 8011974:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011978:	f1ca 0317 	rsb	r3, sl, #23
 801197c:	fa40 f303 	asr.w	r3, r0, r3
 8011980:	9302      	str	r3, [sp, #8]
 8011982:	9b02      	ldr	r3, [sp, #8]
 8011984:	2b00      	cmp	r3, #0
 8011986:	dd62      	ble.n	8011a4e <__kernel_rem_pio2+0x25e>
 8011988:	9b06      	ldr	r3, [sp, #24]
 801198a:	2200      	movs	r2, #0
 801198c:	3301      	adds	r3, #1
 801198e:	9306      	str	r3, [sp, #24]
 8011990:	4615      	mov	r5, r2
 8011992:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011996:	4294      	cmp	r4, r2
 8011998:	f300 8095 	bgt.w	8011ac6 <__kernel_rem_pio2+0x2d6>
 801199c:	f1ba 0f00 	cmp.w	sl, #0
 80119a0:	dd07      	ble.n	80119b2 <__kernel_rem_pio2+0x1c2>
 80119a2:	f1ba 0f01 	cmp.w	sl, #1
 80119a6:	f000 80a2 	beq.w	8011aee <__kernel_rem_pio2+0x2fe>
 80119aa:	f1ba 0f02 	cmp.w	sl, #2
 80119ae:	f000 80c1 	beq.w	8011b34 <__kernel_rem_pio2+0x344>
 80119b2:	9b02      	ldr	r3, [sp, #8]
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d14a      	bne.n	8011a4e <__kernel_rem_pio2+0x25e>
 80119b8:	4632      	mov	r2, r6
 80119ba:	463b      	mov	r3, r7
 80119bc:	2000      	movs	r0, #0
 80119be:	4958      	ldr	r1, [pc, #352]	; (8011b20 <__kernel_rem_pio2+0x330>)
 80119c0:	f7ee fc62 	bl	8000288 <__aeabi_dsub>
 80119c4:	4606      	mov	r6, r0
 80119c6:	460f      	mov	r7, r1
 80119c8:	2d00      	cmp	r5, #0
 80119ca:	d040      	beq.n	8011a4e <__kernel_rem_pio2+0x25e>
 80119cc:	4650      	mov	r0, sl
 80119ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011b10 <__kernel_rem_pio2+0x320>
 80119d2:	f000 fc2d 	bl	8012230 <scalbn>
 80119d6:	4630      	mov	r0, r6
 80119d8:	4639      	mov	r1, r7
 80119da:	ec53 2b10 	vmov	r2, r3, d0
 80119de:	f7ee fc53 	bl	8000288 <__aeabi_dsub>
 80119e2:	4606      	mov	r6, r0
 80119e4:	460f      	mov	r7, r1
 80119e6:	e032      	b.n	8011a4e <__kernel_rem_pio2+0x25e>
 80119e8:	2200      	movs	r2, #0
 80119ea:	4b4e      	ldr	r3, [pc, #312]	; (8011b24 <__kernel_rem_pio2+0x334>)
 80119ec:	4640      	mov	r0, r8
 80119ee:	4649      	mov	r1, r9
 80119f0:	f7ee fe02 	bl	80005f8 <__aeabi_dmul>
 80119f4:	f7ef f8b0 	bl	8000b58 <__aeabi_d2iz>
 80119f8:	f7ee fd94 	bl	8000524 <__aeabi_i2d>
 80119fc:	2200      	movs	r2, #0
 80119fe:	4b4a      	ldr	r3, [pc, #296]	; (8011b28 <__kernel_rem_pio2+0x338>)
 8011a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a04:	f7ee fdf8 	bl	80005f8 <__aeabi_dmul>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	4640      	mov	r0, r8
 8011a0e:	4649      	mov	r1, r9
 8011a10:	f7ee fc3a 	bl	8000288 <__aeabi_dsub>
 8011a14:	f7ef f8a0 	bl	8000b58 <__aeabi_d2iz>
 8011a18:	ab0e      	add	r3, sp, #56	; 0x38
 8011a1a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011a1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a26:	f7ee fc31 	bl	800028c <__adddf3>
 8011a2a:	3501      	adds	r5, #1
 8011a2c:	4680      	mov	r8, r0
 8011a2e:	4689      	mov	r9, r1
 8011a30:	e75e      	b.n	80118f0 <__kernel_rem_pio2+0x100>
 8011a32:	d105      	bne.n	8011a40 <__kernel_rem_pio2+0x250>
 8011a34:	1e63      	subs	r3, r4, #1
 8011a36:	aa0e      	add	r2, sp, #56	; 0x38
 8011a38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a3c:	15c3      	asrs	r3, r0, #23
 8011a3e:	e79f      	b.n	8011980 <__kernel_rem_pio2+0x190>
 8011a40:	2200      	movs	r2, #0
 8011a42:	4b3a      	ldr	r3, [pc, #232]	; (8011b2c <__kernel_rem_pio2+0x33c>)
 8011a44:	f7ef f85e 	bl	8000b04 <__aeabi_dcmpge>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	d139      	bne.n	8011ac0 <__kernel_rem_pio2+0x2d0>
 8011a4c:	9002      	str	r0, [sp, #8]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	2300      	movs	r3, #0
 8011a52:	4630      	mov	r0, r6
 8011a54:	4639      	mov	r1, r7
 8011a56:	f7ef f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	f000 80c7 	beq.w	8011bee <__kernel_rem_pio2+0x3fe>
 8011a60:	1e65      	subs	r5, r4, #1
 8011a62:	462b      	mov	r3, r5
 8011a64:	2200      	movs	r2, #0
 8011a66:	9904      	ldr	r1, [sp, #16]
 8011a68:	428b      	cmp	r3, r1
 8011a6a:	da6a      	bge.n	8011b42 <__kernel_rem_pio2+0x352>
 8011a6c:	2a00      	cmp	r2, #0
 8011a6e:	f000 8088 	beq.w	8011b82 <__kernel_rem_pio2+0x392>
 8011a72:	ab0e      	add	r3, sp, #56	; 0x38
 8011a74:	f1aa 0a18 	sub.w	sl, sl, #24
 8011a78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f000 80b4 	beq.w	8011bea <__kernel_rem_pio2+0x3fa>
 8011a82:	4650      	mov	r0, sl
 8011a84:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011b10 <__kernel_rem_pio2+0x320>
 8011a88:	f000 fbd2 	bl	8012230 <scalbn>
 8011a8c:	00ec      	lsls	r4, r5, #3
 8011a8e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011a90:	191e      	adds	r6, r3, r4
 8011a92:	ec59 8b10 	vmov	r8, r9, d0
 8011a96:	f106 0a08 	add.w	sl, r6, #8
 8011a9a:	462f      	mov	r7, r5
 8011a9c:	2f00      	cmp	r7, #0
 8011a9e:	f280 80df 	bge.w	8011c60 <__kernel_rem_pio2+0x470>
 8011aa2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011b08 <__kernel_rem_pio2+0x318>
 8011aa6:	f04f 0a00 	mov.w	sl, #0
 8011aaa:	eba5 030a 	sub.w	r3, r5, sl
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	f2c0 810a 	blt.w	8011cc8 <__kernel_rem_pio2+0x4d8>
 8011ab4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011b30 <__kernel_rem_pio2+0x340>
 8011ab8:	ec59 8b18 	vmov	r8, r9, d8
 8011abc:	2700      	movs	r7, #0
 8011abe:	e0f5      	b.n	8011cac <__kernel_rem_pio2+0x4bc>
 8011ac0:	2302      	movs	r3, #2
 8011ac2:	9302      	str	r3, [sp, #8]
 8011ac4:	e760      	b.n	8011988 <__kernel_rem_pio2+0x198>
 8011ac6:	ab0e      	add	r3, sp, #56	; 0x38
 8011ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011acc:	b94d      	cbnz	r5, 8011ae2 <__kernel_rem_pio2+0x2f2>
 8011ace:	b12b      	cbz	r3, 8011adc <__kernel_rem_pio2+0x2ec>
 8011ad0:	a80e      	add	r0, sp, #56	; 0x38
 8011ad2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011ad6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011ada:	2301      	movs	r3, #1
 8011adc:	3201      	adds	r2, #1
 8011ade:	461d      	mov	r5, r3
 8011ae0:	e759      	b.n	8011996 <__kernel_rem_pio2+0x1a6>
 8011ae2:	a80e      	add	r0, sp, #56	; 0x38
 8011ae4:	1acb      	subs	r3, r1, r3
 8011ae6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011aea:	462b      	mov	r3, r5
 8011aec:	e7f6      	b.n	8011adc <__kernel_rem_pio2+0x2ec>
 8011aee:	1e62      	subs	r2, r4, #1
 8011af0:	ab0e      	add	r3, sp, #56	; 0x38
 8011af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011af6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011afa:	a90e      	add	r1, sp, #56	; 0x38
 8011afc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011b00:	e757      	b.n	80119b2 <__kernel_rem_pio2+0x1c2>
 8011b02:	bf00      	nop
 8011b04:	f3af 8000 	nop.w
	...
 8011b14:	3ff00000 	.word	0x3ff00000
 8011b18:	08012650 	.word	0x08012650
 8011b1c:	40200000 	.word	0x40200000
 8011b20:	3ff00000 	.word	0x3ff00000
 8011b24:	3e700000 	.word	0x3e700000
 8011b28:	41700000 	.word	0x41700000
 8011b2c:	3fe00000 	.word	0x3fe00000
 8011b30:	08012610 	.word	0x08012610
 8011b34:	1e62      	subs	r2, r4, #1
 8011b36:	ab0e      	add	r3, sp, #56	; 0x38
 8011b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b40:	e7db      	b.n	8011afa <__kernel_rem_pio2+0x30a>
 8011b42:	a90e      	add	r1, sp, #56	; 0x38
 8011b44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011b48:	3b01      	subs	r3, #1
 8011b4a:	430a      	orrs	r2, r1
 8011b4c:	e78b      	b.n	8011a66 <__kernel_rem_pio2+0x276>
 8011b4e:	3301      	adds	r3, #1
 8011b50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011b54:	2900      	cmp	r1, #0
 8011b56:	d0fa      	beq.n	8011b4e <__kernel_rem_pio2+0x35e>
 8011b58:	9a08      	ldr	r2, [sp, #32]
 8011b5a:	4422      	add	r2, r4
 8011b5c:	00d2      	lsls	r2, r2, #3
 8011b5e:	a922      	add	r1, sp, #136	; 0x88
 8011b60:	18e3      	adds	r3, r4, r3
 8011b62:	9206      	str	r2, [sp, #24]
 8011b64:	440a      	add	r2, r1
 8011b66:	9302      	str	r3, [sp, #8]
 8011b68:	f10b 0108 	add.w	r1, fp, #8
 8011b6c:	f102 0308 	add.w	r3, r2, #8
 8011b70:	1c66      	adds	r6, r4, #1
 8011b72:	910a      	str	r1, [sp, #40]	; 0x28
 8011b74:	2500      	movs	r5, #0
 8011b76:	930d      	str	r3, [sp, #52]	; 0x34
 8011b78:	9b02      	ldr	r3, [sp, #8]
 8011b7a:	42b3      	cmp	r3, r6
 8011b7c:	da04      	bge.n	8011b88 <__kernel_rem_pio2+0x398>
 8011b7e:	461c      	mov	r4, r3
 8011b80:	e6a6      	b.n	80118d0 <__kernel_rem_pio2+0xe0>
 8011b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b84:	2301      	movs	r3, #1
 8011b86:	e7e3      	b.n	8011b50 <__kernel_rem_pio2+0x360>
 8011b88:	9b06      	ldr	r3, [sp, #24]
 8011b8a:	18ef      	adds	r7, r5, r3
 8011b8c:	ab22      	add	r3, sp, #136	; 0x88
 8011b8e:	441f      	add	r7, r3
 8011b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011b96:	f7ee fcc5 	bl	8000524 <__aeabi_i2d>
 8011b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b9c:	461c      	mov	r4, r3
 8011b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ba0:	e9c7 0100 	strd	r0, r1, [r7]
 8011ba4:	eb03 0b05 	add.w	fp, r3, r5
 8011ba8:	2700      	movs	r7, #0
 8011baa:	f04f 0800 	mov.w	r8, #0
 8011bae:	f04f 0900 	mov.w	r9, #0
 8011bb2:	9b07      	ldr	r3, [sp, #28]
 8011bb4:	429f      	cmp	r7, r3
 8011bb6:	dd08      	ble.n	8011bca <__kernel_rem_pio2+0x3da>
 8011bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bba:	aa72      	add	r2, sp, #456	; 0x1c8
 8011bbc:	18eb      	adds	r3, r5, r3
 8011bbe:	4413      	add	r3, r2
 8011bc0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011bc4:	3601      	adds	r6, #1
 8011bc6:	3508      	adds	r5, #8
 8011bc8:	e7d6      	b.n	8011b78 <__kernel_rem_pio2+0x388>
 8011bca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011bce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011bd2:	f7ee fd11 	bl	80005f8 <__aeabi_dmul>
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	460b      	mov	r3, r1
 8011bda:	4640      	mov	r0, r8
 8011bdc:	4649      	mov	r1, r9
 8011bde:	f7ee fb55 	bl	800028c <__adddf3>
 8011be2:	3701      	adds	r7, #1
 8011be4:	4680      	mov	r8, r0
 8011be6:	4689      	mov	r9, r1
 8011be8:	e7e3      	b.n	8011bb2 <__kernel_rem_pio2+0x3c2>
 8011bea:	3d01      	subs	r5, #1
 8011bec:	e741      	b.n	8011a72 <__kernel_rem_pio2+0x282>
 8011bee:	f1ca 0000 	rsb	r0, sl, #0
 8011bf2:	ec47 6b10 	vmov	d0, r6, r7
 8011bf6:	f000 fb1b 	bl	8012230 <scalbn>
 8011bfa:	ec57 6b10 	vmov	r6, r7, d0
 8011bfe:	2200      	movs	r2, #0
 8011c00:	4b99      	ldr	r3, [pc, #612]	; (8011e68 <__kernel_rem_pio2+0x678>)
 8011c02:	ee10 0a10 	vmov	r0, s0
 8011c06:	4639      	mov	r1, r7
 8011c08:	f7ee ff7c 	bl	8000b04 <__aeabi_dcmpge>
 8011c0c:	b1f8      	cbz	r0, 8011c4e <__kernel_rem_pio2+0x45e>
 8011c0e:	2200      	movs	r2, #0
 8011c10:	4b96      	ldr	r3, [pc, #600]	; (8011e6c <__kernel_rem_pio2+0x67c>)
 8011c12:	4630      	mov	r0, r6
 8011c14:	4639      	mov	r1, r7
 8011c16:	f7ee fcef 	bl	80005f8 <__aeabi_dmul>
 8011c1a:	f7ee ff9d 	bl	8000b58 <__aeabi_d2iz>
 8011c1e:	4680      	mov	r8, r0
 8011c20:	f7ee fc80 	bl	8000524 <__aeabi_i2d>
 8011c24:	2200      	movs	r2, #0
 8011c26:	4b90      	ldr	r3, [pc, #576]	; (8011e68 <__kernel_rem_pio2+0x678>)
 8011c28:	f7ee fce6 	bl	80005f8 <__aeabi_dmul>
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4602      	mov	r2, r0
 8011c30:	4639      	mov	r1, r7
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7ee fb28 	bl	8000288 <__aeabi_dsub>
 8011c38:	f7ee ff8e 	bl	8000b58 <__aeabi_d2iz>
 8011c3c:	1c65      	adds	r5, r4, #1
 8011c3e:	ab0e      	add	r3, sp, #56	; 0x38
 8011c40:	f10a 0a18 	add.w	sl, sl, #24
 8011c44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c48:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011c4c:	e719      	b.n	8011a82 <__kernel_rem_pio2+0x292>
 8011c4e:	4630      	mov	r0, r6
 8011c50:	4639      	mov	r1, r7
 8011c52:	f7ee ff81 	bl	8000b58 <__aeabi_d2iz>
 8011c56:	ab0e      	add	r3, sp, #56	; 0x38
 8011c58:	4625      	mov	r5, r4
 8011c5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c5e:	e710      	b.n	8011a82 <__kernel_rem_pio2+0x292>
 8011c60:	ab0e      	add	r3, sp, #56	; 0x38
 8011c62:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011c66:	f7ee fc5d 	bl	8000524 <__aeabi_i2d>
 8011c6a:	4642      	mov	r2, r8
 8011c6c:	464b      	mov	r3, r9
 8011c6e:	f7ee fcc3 	bl	80005f8 <__aeabi_dmul>
 8011c72:	2200      	movs	r2, #0
 8011c74:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011c78:	4b7c      	ldr	r3, [pc, #496]	; (8011e6c <__kernel_rem_pio2+0x67c>)
 8011c7a:	4640      	mov	r0, r8
 8011c7c:	4649      	mov	r1, r9
 8011c7e:	f7ee fcbb 	bl	80005f8 <__aeabi_dmul>
 8011c82:	3f01      	subs	r7, #1
 8011c84:	4680      	mov	r8, r0
 8011c86:	4689      	mov	r9, r1
 8011c88:	e708      	b.n	8011a9c <__kernel_rem_pio2+0x2ac>
 8011c8a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c92:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011c96:	f7ee fcaf 	bl	80005f8 <__aeabi_dmul>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	4640      	mov	r0, r8
 8011ca0:	4649      	mov	r1, r9
 8011ca2:	f7ee faf3 	bl	800028c <__adddf3>
 8011ca6:	3701      	adds	r7, #1
 8011ca8:	4680      	mov	r8, r0
 8011caa:	4689      	mov	r9, r1
 8011cac:	9b04      	ldr	r3, [sp, #16]
 8011cae:	429f      	cmp	r7, r3
 8011cb0:	dc01      	bgt.n	8011cb6 <__kernel_rem_pio2+0x4c6>
 8011cb2:	45ba      	cmp	sl, r7
 8011cb4:	dae9      	bge.n	8011c8a <__kernel_rem_pio2+0x49a>
 8011cb6:	ab4a      	add	r3, sp, #296	; 0x128
 8011cb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011cbc:	e9c3 8900 	strd	r8, r9, [r3]
 8011cc0:	f10a 0a01 	add.w	sl, sl, #1
 8011cc4:	3e08      	subs	r6, #8
 8011cc6:	e6f0      	b.n	8011aaa <__kernel_rem_pio2+0x2ba>
 8011cc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011cca:	2b03      	cmp	r3, #3
 8011ccc:	d85b      	bhi.n	8011d86 <__kernel_rem_pio2+0x596>
 8011cce:	e8df f003 	tbb	[pc, r3]
 8011cd2:	264a      	.short	0x264a
 8011cd4:	0226      	.short	0x0226
 8011cd6:	ab9a      	add	r3, sp, #616	; 0x268
 8011cd8:	441c      	add	r4, r3
 8011cda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011cde:	46a2      	mov	sl, r4
 8011ce0:	46ab      	mov	fp, r5
 8011ce2:	f1bb 0f00 	cmp.w	fp, #0
 8011ce6:	dc6c      	bgt.n	8011dc2 <__kernel_rem_pio2+0x5d2>
 8011ce8:	46a2      	mov	sl, r4
 8011cea:	46ab      	mov	fp, r5
 8011cec:	f1bb 0f01 	cmp.w	fp, #1
 8011cf0:	f300 8086 	bgt.w	8011e00 <__kernel_rem_pio2+0x610>
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	2100      	movs	r1, #0
 8011cf8:	2d01      	cmp	r5, #1
 8011cfa:	f300 80a0 	bgt.w	8011e3e <__kernel_rem_pio2+0x64e>
 8011cfe:	9b02      	ldr	r3, [sp, #8]
 8011d00:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011d04:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	f040 809e 	bne.w	8011e4a <__kernel_rem_pio2+0x65a>
 8011d0e:	9b01      	ldr	r3, [sp, #4]
 8011d10:	e9c3 7800 	strd	r7, r8, [r3]
 8011d14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011d18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011d1c:	e033      	b.n	8011d86 <__kernel_rem_pio2+0x596>
 8011d1e:	3408      	adds	r4, #8
 8011d20:	ab4a      	add	r3, sp, #296	; 0x128
 8011d22:	441c      	add	r4, r3
 8011d24:	462e      	mov	r6, r5
 8011d26:	2000      	movs	r0, #0
 8011d28:	2100      	movs	r1, #0
 8011d2a:	2e00      	cmp	r6, #0
 8011d2c:	da3a      	bge.n	8011da4 <__kernel_rem_pio2+0x5b4>
 8011d2e:	9b02      	ldr	r3, [sp, #8]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d03d      	beq.n	8011db0 <__kernel_rem_pio2+0x5c0>
 8011d34:	4602      	mov	r2, r0
 8011d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d3a:	9c01      	ldr	r4, [sp, #4]
 8011d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8011d40:	4602      	mov	r2, r0
 8011d42:	460b      	mov	r3, r1
 8011d44:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011d48:	f7ee fa9e 	bl	8000288 <__aeabi_dsub>
 8011d4c:	ae4c      	add	r6, sp, #304	; 0x130
 8011d4e:	2401      	movs	r4, #1
 8011d50:	42a5      	cmp	r5, r4
 8011d52:	da30      	bge.n	8011db6 <__kernel_rem_pio2+0x5c6>
 8011d54:	9b02      	ldr	r3, [sp, #8]
 8011d56:	b113      	cbz	r3, 8011d5e <__kernel_rem_pio2+0x56e>
 8011d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d5c:	4619      	mov	r1, r3
 8011d5e:	9b01      	ldr	r3, [sp, #4]
 8011d60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011d64:	e00f      	b.n	8011d86 <__kernel_rem_pio2+0x596>
 8011d66:	ab9a      	add	r3, sp, #616	; 0x268
 8011d68:	441c      	add	r4, r3
 8011d6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011d6e:	2000      	movs	r0, #0
 8011d70:	2100      	movs	r1, #0
 8011d72:	2d00      	cmp	r5, #0
 8011d74:	da10      	bge.n	8011d98 <__kernel_rem_pio2+0x5a8>
 8011d76:	9b02      	ldr	r3, [sp, #8]
 8011d78:	b113      	cbz	r3, 8011d80 <__kernel_rem_pio2+0x590>
 8011d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d7e:	4619      	mov	r1, r3
 8011d80:	9b01      	ldr	r3, [sp, #4]
 8011d82:	e9c3 0100 	strd	r0, r1, [r3]
 8011d86:	9b06      	ldr	r3, [sp, #24]
 8011d88:	f003 0007 	and.w	r0, r3, #7
 8011d8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011d90:	ecbd 8b02 	vpop	{d8}
 8011d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d98:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d9c:	f7ee fa76 	bl	800028c <__adddf3>
 8011da0:	3d01      	subs	r5, #1
 8011da2:	e7e6      	b.n	8011d72 <__kernel_rem_pio2+0x582>
 8011da4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011da8:	f7ee fa70 	bl	800028c <__adddf3>
 8011dac:	3e01      	subs	r6, #1
 8011dae:	e7bc      	b.n	8011d2a <__kernel_rem_pio2+0x53a>
 8011db0:	4602      	mov	r2, r0
 8011db2:	460b      	mov	r3, r1
 8011db4:	e7c1      	b.n	8011d3a <__kernel_rem_pio2+0x54a>
 8011db6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011dba:	f7ee fa67 	bl	800028c <__adddf3>
 8011dbe:	3401      	adds	r4, #1
 8011dc0:	e7c6      	b.n	8011d50 <__kernel_rem_pio2+0x560>
 8011dc2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8011dc6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011dca:	4640      	mov	r0, r8
 8011dcc:	ec53 2b17 	vmov	r2, r3, d7
 8011dd0:	4649      	mov	r1, r9
 8011dd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011dd6:	f7ee fa59 	bl	800028c <__adddf3>
 8011dda:	4602      	mov	r2, r0
 8011ddc:	460b      	mov	r3, r1
 8011dde:	4606      	mov	r6, r0
 8011de0:	460f      	mov	r7, r1
 8011de2:	4640      	mov	r0, r8
 8011de4:	4649      	mov	r1, r9
 8011de6:	f7ee fa4f 	bl	8000288 <__aeabi_dsub>
 8011dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dee:	f7ee fa4d 	bl	800028c <__adddf3>
 8011df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011df6:	e9ca 0100 	strd	r0, r1, [sl]
 8011dfa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011dfe:	e770      	b.n	8011ce2 <__kernel_rem_pio2+0x4f2>
 8011e00:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011e04:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011e08:	4630      	mov	r0, r6
 8011e0a:	ec53 2b17 	vmov	r2, r3, d7
 8011e0e:	4639      	mov	r1, r7
 8011e10:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011e14:	f7ee fa3a 	bl	800028c <__adddf3>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	4680      	mov	r8, r0
 8011e1e:	4689      	mov	r9, r1
 8011e20:	4630      	mov	r0, r6
 8011e22:	4639      	mov	r1, r7
 8011e24:	f7ee fa30 	bl	8000288 <__aeabi_dsub>
 8011e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e2c:	f7ee fa2e 	bl	800028c <__adddf3>
 8011e30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011e34:	e9ca 0100 	strd	r0, r1, [sl]
 8011e38:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011e3c:	e756      	b.n	8011cec <__kernel_rem_pio2+0x4fc>
 8011e3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e42:	f7ee fa23 	bl	800028c <__adddf3>
 8011e46:	3d01      	subs	r5, #1
 8011e48:	e756      	b.n	8011cf8 <__kernel_rem_pio2+0x508>
 8011e4a:	9b01      	ldr	r3, [sp, #4]
 8011e4c:	9a01      	ldr	r2, [sp, #4]
 8011e4e:	601f      	str	r7, [r3, #0]
 8011e50:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011e54:	605c      	str	r4, [r3, #4]
 8011e56:	609d      	str	r5, [r3, #8]
 8011e58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011e5c:	60d3      	str	r3, [r2, #12]
 8011e5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e62:	6110      	str	r0, [r2, #16]
 8011e64:	6153      	str	r3, [r2, #20]
 8011e66:	e78e      	b.n	8011d86 <__kernel_rem_pio2+0x596>
 8011e68:	41700000 	.word	0x41700000
 8011e6c:	3e700000 	.word	0x3e700000

08011e70 <__kernel_sin>:
 8011e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e74:	ec55 4b10 	vmov	r4, r5, d0
 8011e78:	b085      	sub	sp, #20
 8011e7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011e82:	ed8d 1b00 	vstr	d1, [sp]
 8011e86:	9002      	str	r0, [sp, #8]
 8011e88:	da06      	bge.n	8011e98 <__kernel_sin+0x28>
 8011e8a:	ee10 0a10 	vmov	r0, s0
 8011e8e:	4629      	mov	r1, r5
 8011e90:	f7ee fe62 	bl	8000b58 <__aeabi_d2iz>
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d051      	beq.n	8011f3c <__kernel_sin+0xcc>
 8011e98:	4622      	mov	r2, r4
 8011e9a:	462b      	mov	r3, r5
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	f7ee fbaa 	bl	80005f8 <__aeabi_dmul>
 8011ea4:	4682      	mov	sl, r0
 8011ea6:	468b      	mov	fp, r1
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	460b      	mov	r3, r1
 8011eac:	4620      	mov	r0, r4
 8011eae:	4629      	mov	r1, r5
 8011eb0:	f7ee fba2 	bl	80005f8 <__aeabi_dmul>
 8011eb4:	a341      	add	r3, pc, #260	; (adr r3, 8011fbc <__kernel_sin+0x14c>)
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	4680      	mov	r8, r0
 8011ebc:	4689      	mov	r9, r1
 8011ebe:	4650      	mov	r0, sl
 8011ec0:	4659      	mov	r1, fp
 8011ec2:	f7ee fb99 	bl	80005f8 <__aeabi_dmul>
 8011ec6:	a33f      	add	r3, pc, #252	; (adr r3, 8011fc4 <__kernel_sin+0x154>)
 8011ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ecc:	f7ee f9dc 	bl	8000288 <__aeabi_dsub>
 8011ed0:	4652      	mov	r2, sl
 8011ed2:	465b      	mov	r3, fp
 8011ed4:	f7ee fb90 	bl	80005f8 <__aeabi_dmul>
 8011ed8:	a33c      	add	r3, pc, #240	; (adr r3, 8011fcc <__kernel_sin+0x15c>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7ee f9d5 	bl	800028c <__adddf3>
 8011ee2:	4652      	mov	r2, sl
 8011ee4:	465b      	mov	r3, fp
 8011ee6:	f7ee fb87 	bl	80005f8 <__aeabi_dmul>
 8011eea:	a33a      	add	r3, pc, #232	; (adr r3, 8011fd4 <__kernel_sin+0x164>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	f7ee f9ca 	bl	8000288 <__aeabi_dsub>
 8011ef4:	4652      	mov	r2, sl
 8011ef6:	465b      	mov	r3, fp
 8011ef8:	f7ee fb7e 	bl	80005f8 <__aeabi_dmul>
 8011efc:	a337      	add	r3, pc, #220	; (adr r3, 8011fdc <__kernel_sin+0x16c>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	f7ee f9c3 	bl	800028c <__adddf3>
 8011f06:	9b02      	ldr	r3, [sp, #8]
 8011f08:	4606      	mov	r6, r0
 8011f0a:	460f      	mov	r7, r1
 8011f0c:	b9db      	cbnz	r3, 8011f46 <__kernel_sin+0xd6>
 8011f0e:	4602      	mov	r2, r0
 8011f10:	460b      	mov	r3, r1
 8011f12:	4650      	mov	r0, sl
 8011f14:	4659      	mov	r1, fp
 8011f16:	f7ee fb6f 	bl	80005f8 <__aeabi_dmul>
 8011f1a:	a325      	add	r3, pc, #148	; (adr r3, 8011fb0 <__kernel_sin+0x140>)
 8011f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f20:	f7ee f9b2 	bl	8000288 <__aeabi_dsub>
 8011f24:	4642      	mov	r2, r8
 8011f26:	464b      	mov	r3, r9
 8011f28:	f7ee fb66 	bl	80005f8 <__aeabi_dmul>
 8011f2c:	4602      	mov	r2, r0
 8011f2e:	460b      	mov	r3, r1
 8011f30:	4620      	mov	r0, r4
 8011f32:	4629      	mov	r1, r5
 8011f34:	f7ee f9aa 	bl	800028c <__adddf3>
 8011f38:	4604      	mov	r4, r0
 8011f3a:	460d      	mov	r5, r1
 8011f3c:	ec45 4b10 	vmov	d0, r4, r5
 8011f40:	b005      	add	sp, #20
 8011f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f46:	2200      	movs	r2, #0
 8011f48:	4b1b      	ldr	r3, [pc, #108]	; (8011fb8 <__kernel_sin+0x148>)
 8011f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f4e:	f7ee fb53 	bl	80005f8 <__aeabi_dmul>
 8011f52:	4632      	mov	r2, r6
 8011f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f58:	463b      	mov	r3, r7
 8011f5a:	4640      	mov	r0, r8
 8011f5c:	4649      	mov	r1, r9
 8011f5e:	f7ee fb4b 	bl	80005f8 <__aeabi_dmul>
 8011f62:	4602      	mov	r2, r0
 8011f64:	460b      	mov	r3, r1
 8011f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f6a:	f7ee f98d 	bl	8000288 <__aeabi_dsub>
 8011f6e:	4652      	mov	r2, sl
 8011f70:	465b      	mov	r3, fp
 8011f72:	f7ee fb41 	bl	80005f8 <__aeabi_dmul>
 8011f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f7a:	f7ee f985 	bl	8000288 <__aeabi_dsub>
 8011f7e:	a30c      	add	r3, pc, #48	; (adr r3, 8011fb0 <__kernel_sin+0x140>)
 8011f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f84:	4606      	mov	r6, r0
 8011f86:	460f      	mov	r7, r1
 8011f88:	4640      	mov	r0, r8
 8011f8a:	4649      	mov	r1, r9
 8011f8c:	f7ee fb34 	bl	80005f8 <__aeabi_dmul>
 8011f90:	4602      	mov	r2, r0
 8011f92:	460b      	mov	r3, r1
 8011f94:	4630      	mov	r0, r6
 8011f96:	4639      	mov	r1, r7
 8011f98:	f7ee f978 	bl	800028c <__adddf3>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	f7ee f970 	bl	8000288 <__aeabi_dsub>
 8011fa8:	e7c6      	b.n	8011f38 <__kernel_sin+0xc8>
 8011faa:	bf00      	nop
 8011fac:	f3af 8000 	nop.w
 8011fb0:	55555549 	.word	0x55555549
 8011fb4:	3fc55555 	.word	0x3fc55555
 8011fb8:	3fe00000 	.word	0x3fe00000
 8011fbc:	5acfd57c 	.word	0x5acfd57c
 8011fc0:	3de5d93a 	.word	0x3de5d93a
 8011fc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8011fc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8011fcc:	57b1fe7d 	.word	0x57b1fe7d
 8011fd0:	3ec71de3 	.word	0x3ec71de3
 8011fd4:	19c161d5 	.word	0x19c161d5
 8011fd8:	3f2a01a0 	.word	0x3f2a01a0
 8011fdc:	1110f8a6 	.word	0x1110f8a6
 8011fe0:	3f811111 	.word	0x3f811111

08011fe4 <fabs>:
 8011fe4:	ec51 0b10 	vmov	r0, r1, d0
 8011fe8:	ee10 2a10 	vmov	r2, s0
 8011fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ff0:	ec43 2b10 	vmov	d0, r2, r3
 8011ff4:	4770      	bx	lr

08011ff6 <finite>:
 8011ff6:	ee10 3a90 	vmov	r3, s1
 8011ffa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011ffe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012002:	0fc0      	lsrs	r0, r0, #31
 8012004:	4770      	bx	lr
	...

08012008 <floor>:
 8012008:	ec51 0b10 	vmov	r0, r1, d0
 801200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012010:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012014:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012018:	2e13      	cmp	r6, #19
 801201a:	460c      	mov	r4, r1
 801201c:	ee10 5a10 	vmov	r5, s0
 8012020:	4680      	mov	r8, r0
 8012022:	dc34      	bgt.n	801208e <floor+0x86>
 8012024:	2e00      	cmp	r6, #0
 8012026:	da16      	bge.n	8012056 <floor+0x4e>
 8012028:	a335      	add	r3, pc, #212	; (adr r3, 8012100 <floor+0xf8>)
 801202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202e:	f7ee f92d 	bl	800028c <__adddf3>
 8012032:	2200      	movs	r2, #0
 8012034:	2300      	movs	r3, #0
 8012036:	f7ee fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 801203a:	b148      	cbz	r0, 8012050 <floor+0x48>
 801203c:	2c00      	cmp	r4, #0
 801203e:	da59      	bge.n	80120f4 <floor+0xec>
 8012040:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012044:	4a30      	ldr	r2, [pc, #192]	; (8012108 <floor+0x100>)
 8012046:	432b      	orrs	r3, r5
 8012048:	2500      	movs	r5, #0
 801204a:	42ab      	cmp	r3, r5
 801204c:	bf18      	it	ne
 801204e:	4614      	movne	r4, r2
 8012050:	4621      	mov	r1, r4
 8012052:	4628      	mov	r0, r5
 8012054:	e025      	b.n	80120a2 <floor+0x9a>
 8012056:	4f2d      	ldr	r7, [pc, #180]	; (801210c <floor+0x104>)
 8012058:	4137      	asrs	r7, r6
 801205a:	ea01 0307 	and.w	r3, r1, r7
 801205e:	4303      	orrs	r3, r0
 8012060:	d01f      	beq.n	80120a2 <floor+0x9a>
 8012062:	a327      	add	r3, pc, #156	; (adr r3, 8012100 <floor+0xf8>)
 8012064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012068:	f7ee f910 	bl	800028c <__adddf3>
 801206c:	2200      	movs	r2, #0
 801206e:	2300      	movs	r3, #0
 8012070:	f7ee fd52 	bl	8000b18 <__aeabi_dcmpgt>
 8012074:	2800      	cmp	r0, #0
 8012076:	d0eb      	beq.n	8012050 <floor+0x48>
 8012078:	2c00      	cmp	r4, #0
 801207a:	bfbe      	ittt	lt
 801207c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012080:	fa43 f606 	asrlt.w	r6, r3, r6
 8012084:	19a4      	addlt	r4, r4, r6
 8012086:	ea24 0407 	bic.w	r4, r4, r7
 801208a:	2500      	movs	r5, #0
 801208c:	e7e0      	b.n	8012050 <floor+0x48>
 801208e:	2e33      	cmp	r6, #51	; 0x33
 8012090:	dd0b      	ble.n	80120aa <floor+0xa2>
 8012092:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012096:	d104      	bne.n	80120a2 <floor+0x9a>
 8012098:	ee10 2a10 	vmov	r2, s0
 801209c:	460b      	mov	r3, r1
 801209e:	f7ee f8f5 	bl	800028c <__adddf3>
 80120a2:	ec41 0b10 	vmov	d0, r0, r1
 80120a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120aa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80120ae:	f04f 33ff 	mov.w	r3, #4294967295
 80120b2:	fa23 f707 	lsr.w	r7, r3, r7
 80120b6:	4207      	tst	r7, r0
 80120b8:	d0f3      	beq.n	80120a2 <floor+0x9a>
 80120ba:	a311      	add	r3, pc, #68	; (adr r3, 8012100 <floor+0xf8>)
 80120bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c0:	f7ee f8e4 	bl	800028c <__adddf3>
 80120c4:	2200      	movs	r2, #0
 80120c6:	2300      	movs	r3, #0
 80120c8:	f7ee fd26 	bl	8000b18 <__aeabi_dcmpgt>
 80120cc:	2800      	cmp	r0, #0
 80120ce:	d0bf      	beq.n	8012050 <floor+0x48>
 80120d0:	2c00      	cmp	r4, #0
 80120d2:	da02      	bge.n	80120da <floor+0xd2>
 80120d4:	2e14      	cmp	r6, #20
 80120d6:	d103      	bne.n	80120e0 <floor+0xd8>
 80120d8:	3401      	adds	r4, #1
 80120da:	ea25 0507 	bic.w	r5, r5, r7
 80120de:	e7b7      	b.n	8012050 <floor+0x48>
 80120e0:	2301      	movs	r3, #1
 80120e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80120e6:	fa03 f606 	lsl.w	r6, r3, r6
 80120ea:	4435      	add	r5, r6
 80120ec:	4545      	cmp	r5, r8
 80120ee:	bf38      	it	cc
 80120f0:	18e4      	addcc	r4, r4, r3
 80120f2:	e7f2      	b.n	80120da <floor+0xd2>
 80120f4:	2500      	movs	r5, #0
 80120f6:	462c      	mov	r4, r5
 80120f8:	e7aa      	b.n	8012050 <floor+0x48>
 80120fa:	bf00      	nop
 80120fc:	f3af 8000 	nop.w
 8012100:	8800759c 	.word	0x8800759c
 8012104:	7e37e43c 	.word	0x7e37e43c
 8012108:	bff00000 	.word	0xbff00000
 801210c:	000fffff 	.word	0x000fffff

08012110 <matherr>:
 8012110:	2000      	movs	r0, #0
 8012112:	4770      	bx	lr
 8012114:	0000      	movs	r0, r0
	...

08012118 <nan>:
 8012118:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012120 <nan+0x8>
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop
 8012120:	00000000 	.word	0x00000000
 8012124:	7ff80000 	.word	0x7ff80000

08012128 <rint>:
 8012128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801212a:	ec51 0b10 	vmov	r0, r1, d0
 801212e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012132:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012136:	2e13      	cmp	r6, #19
 8012138:	460b      	mov	r3, r1
 801213a:	ee10 4a10 	vmov	r4, s0
 801213e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012142:	dc56      	bgt.n	80121f2 <rint+0xca>
 8012144:	2e00      	cmp	r6, #0
 8012146:	da2b      	bge.n	80121a0 <rint+0x78>
 8012148:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801214c:	4302      	orrs	r2, r0
 801214e:	d023      	beq.n	8012198 <rint+0x70>
 8012150:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012154:	4302      	orrs	r2, r0
 8012156:	4254      	negs	r4, r2
 8012158:	4314      	orrs	r4, r2
 801215a:	0c4b      	lsrs	r3, r1, #17
 801215c:	0b24      	lsrs	r4, r4, #12
 801215e:	045b      	lsls	r3, r3, #17
 8012160:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012164:	ea44 0103 	orr.w	r1, r4, r3
 8012168:	460b      	mov	r3, r1
 801216a:	492f      	ldr	r1, [pc, #188]	; (8012228 <rint+0x100>)
 801216c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012170:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012174:	4602      	mov	r2, r0
 8012176:	4639      	mov	r1, r7
 8012178:	4630      	mov	r0, r6
 801217a:	f7ee f887 	bl	800028c <__adddf3>
 801217e:	e9cd 0100 	strd	r0, r1, [sp]
 8012182:	463b      	mov	r3, r7
 8012184:	4632      	mov	r2, r6
 8012186:	e9dd 0100 	ldrd	r0, r1, [sp]
 801218a:	f7ee f87d 	bl	8000288 <__aeabi_dsub>
 801218e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012192:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012196:	4639      	mov	r1, r7
 8012198:	ec41 0b10 	vmov	d0, r0, r1
 801219c:	b003      	add	sp, #12
 801219e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121a0:	4a22      	ldr	r2, [pc, #136]	; (801222c <rint+0x104>)
 80121a2:	4132      	asrs	r2, r6
 80121a4:	ea01 0702 	and.w	r7, r1, r2
 80121a8:	4307      	orrs	r7, r0
 80121aa:	d0f5      	beq.n	8012198 <rint+0x70>
 80121ac:	0852      	lsrs	r2, r2, #1
 80121ae:	4011      	ands	r1, r2
 80121b0:	430c      	orrs	r4, r1
 80121b2:	d00b      	beq.n	80121cc <rint+0xa4>
 80121b4:	ea23 0202 	bic.w	r2, r3, r2
 80121b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80121bc:	2e13      	cmp	r6, #19
 80121be:	fa43 f306 	asr.w	r3, r3, r6
 80121c2:	bf0c      	ite	eq
 80121c4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80121c8:	2400      	movne	r4, #0
 80121ca:	4313      	orrs	r3, r2
 80121cc:	4916      	ldr	r1, [pc, #88]	; (8012228 <rint+0x100>)
 80121ce:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80121d2:	4622      	mov	r2, r4
 80121d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80121d8:	4620      	mov	r0, r4
 80121da:	4629      	mov	r1, r5
 80121dc:	f7ee f856 	bl	800028c <__adddf3>
 80121e0:	e9cd 0100 	strd	r0, r1, [sp]
 80121e4:	4622      	mov	r2, r4
 80121e6:	462b      	mov	r3, r5
 80121e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121ec:	f7ee f84c 	bl	8000288 <__aeabi_dsub>
 80121f0:	e7d2      	b.n	8012198 <rint+0x70>
 80121f2:	2e33      	cmp	r6, #51	; 0x33
 80121f4:	dd07      	ble.n	8012206 <rint+0xde>
 80121f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80121fa:	d1cd      	bne.n	8012198 <rint+0x70>
 80121fc:	ee10 2a10 	vmov	r2, s0
 8012200:	f7ee f844 	bl	800028c <__adddf3>
 8012204:	e7c8      	b.n	8012198 <rint+0x70>
 8012206:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801220a:	f04f 32ff 	mov.w	r2, #4294967295
 801220e:	40f2      	lsrs	r2, r6
 8012210:	4210      	tst	r0, r2
 8012212:	d0c1      	beq.n	8012198 <rint+0x70>
 8012214:	0852      	lsrs	r2, r2, #1
 8012216:	4210      	tst	r0, r2
 8012218:	bf1f      	itttt	ne
 801221a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801221e:	ea20 0202 	bicne.w	r2, r0, r2
 8012222:	4134      	asrne	r4, r6
 8012224:	4314      	orrne	r4, r2
 8012226:	e7d1      	b.n	80121cc <rint+0xa4>
 8012228:	08012660 	.word	0x08012660
 801222c:	000fffff 	.word	0x000fffff

08012230 <scalbn>:
 8012230:	b570      	push	{r4, r5, r6, lr}
 8012232:	ec55 4b10 	vmov	r4, r5, d0
 8012236:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801223a:	4606      	mov	r6, r0
 801223c:	462b      	mov	r3, r5
 801223e:	b9aa      	cbnz	r2, 801226c <scalbn+0x3c>
 8012240:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012244:	4323      	orrs	r3, r4
 8012246:	d03b      	beq.n	80122c0 <scalbn+0x90>
 8012248:	4b31      	ldr	r3, [pc, #196]	; (8012310 <scalbn+0xe0>)
 801224a:	4629      	mov	r1, r5
 801224c:	2200      	movs	r2, #0
 801224e:	ee10 0a10 	vmov	r0, s0
 8012252:	f7ee f9d1 	bl	80005f8 <__aeabi_dmul>
 8012256:	4b2f      	ldr	r3, [pc, #188]	; (8012314 <scalbn+0xe4>)
 8012258:	429e      	cmp	r6, r3
 801225a:	4604      	mov	r4, r0
 801225c:	460d      	mov	r5, r1
 801225e:	da12      	bge.n	8012286 <scalbn+0x56>
 8012260:	a327      	add	r3, pc, #156	; (adr r3, 8012300 <scalbn+0xd0>)
 8012262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012266:	f7ee f9c7 	bl	80005f8 <__aeabi_dmul>
 801226a:	e009      	b.n	8012280 <scalbn+0x50>
 801226c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012270:	428a      	cmp	r2, r1
 8012272:	d10c      	bne.n	801228e <scalbn+0x5e>
 8012274:	ee10 2a10 	vmov	r2, s0
 8012278:	4620      	mov	r0, r4
 801227a:	4629      	mov	r1, r5
 801227c:	f7ee f806 	bl	800028c <__adddf3>
 8012280:	4604      	mov	r4, r0
 8012282:	460d      	mov	r5, r1
 8012284:	e01c      	b.n	80122c0 <scalbn+0x90>
 8012286:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801228a:	460b      	mov	r3, r1
 801228c:	3a36      	subs	r2, #54	; 0x36
 801228e:	4432      	add	r2, r6
 8012290:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012294:	428a      	cmp	r2, r1
 8012296:	dd0b      	ble.n	80122b0 <scalbn+0x80>
 8012298:	ec45 4b11 	vmov	d1, r4, r5
 801229c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012308 <scalbn+0xd8>
 80122a0:	f000 f83c 	bl	801231c <copysign>
 80122a4:	a318      	add	r3, pc, #96	; (adr r3, 8012308 <scalbn+0xd8>)
 80122a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122aa:	ec51 0b10 	vmov	r0, r1, d0
 80122ae:	e7da      	b.n	8012266 <scalbn+0x36>
 80122b0:	2a00      	cmp	r2, #0
 80122b2:	dd08      	ble.n	80122c6 <scalbn+0x96>
 80122b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80122bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80122c0:	ec45 4b10 	vmov	d0, r4, r5
 80122c4:	bd70      	pop	{r4, r5, r6, pc}
 80122c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80122ca:	da0d      	bge.n	80122e8 <scalbn+0xb8>
 80122cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80122d0:	429e      	cmp	r6, r3
 80122d2:	ec45 4b11 	vmov	d1, r4, r5
 80122d6:	dce1      	bgt.n	801229c <scalbn+0x6c>
 80122d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012300 <scalbn+0xd0>
 80122dc:	f000 f81e 	bl	801231c <copysign>
 80122e0:	a307      	add	r3, pc, #28	; (adr r3, 8012300 <scalbn+0xd0>)
 80122e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e6:	e7e0      	b.n	80122aa <scalbn+0x7a>
 80122e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122ec:	3236      	adds	r2, #54	; 0x36
 80122ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80122f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80122f6:	4620      	mov	r0, r4
 80122f8:	4629      	mov	r1, r5
 80122fa:	2200      	movs	r2, #0
 80122fc:	4b06      	ldr	r3, [pc, #24]	; (8012318 <scalbn+0xe8>)
 80122fe:	e7b2      	b.n	8012266 <scalbn+0x36>
 8012300:	c2f8f359 	.word	0xc2f8f359
 8012304:	01a56e1f 	.word	0x01a56e1f
 8012308:	8800759c 	.word	0x8800759c
 801230c:	7e37e43c 	.word	0x7e37e43c
 8012310:	43500000 	.word	0x43500000
 8012314:	ffff3cb0 	.word	0xffff3cb0
 8012318:	3c900000 	.word	0x3c900000

0801231c <copysign>:
 801231c:	ec51 0b10 	vmov	r0, r1, d0
 8012320:	ee11 0a90 	vmov	r0, s3
 8012324:	ee10 2a10 	vmov	r2, s0
 8012328:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801232c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012330:	ea41 0300 	orr.w	r3, r1, r0
 8012334:	ec43 2b10 	vmov	d0, r2, r3
 8012338:	4770      	bx	lr
	...

0801233c <_init>:
 801233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233e:	bf00      	nop
 8012340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012342:	bc08      	pop	{r3}
 8012344:	469e      	mov	lr, r3
 8012346:	4770      	bx	lr

08012348 <_fini>:
 8012348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801234a:	bf00      	nop
 801234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801234e:	bc08      	pop	{r3}
 8012350:	469e      	mov	lr, r3
 8012352:	4770      	bx	lr
