
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008638  08008638  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008640  08008640  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08008648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  20000140  08008788  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd0  08008788  00020cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a14d  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000353e  00000000  00000000  0003a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001440  00000000  00000000  0003d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003ec40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023464  00000000  00000000  0003ff08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012abc  00000000  00000000  0006336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8cfc  00000000  00000000  00075e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eb24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005668  00000000  00000000  0013eba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000140 	.word	0x20000140
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008558 	.word	0x08008558

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000144 	.word	0x20000144
 80001c4:	08008558 	.word	0x08008558

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fdb6 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f820 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fabe 	bl	8000a54 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f89e 	bl	8000618 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004dc:	f000 f8ca 	bl	8000674 <MX_I2C2_Init>
  MX_RTC_Init();
 80004e0:	f000 f8f6 	bl	80006d0 <MX_RTC_Init>
  MX_TIM3_Init();
 80004e4:	f000 f91a 	bl	800071c <MX_TIM3_Init>
  MX_TIM5_Init();
 80004e8:	f000 f992 	bl	8000810 <MX_TIM5_Init>
  MX_TIM8_Init();
 80004ec:	f000 f9ee 	bl	80008cc <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f007 fabc 	bl	8007a6c <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80004f4:	2102      	movs	r1, #2
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <main+0x48>)
 80004f8:	f001 f8f9 	bl	80016ee <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 80004fc:	2104      	movs	r1, #4
 80004fe:	4804      	ldr	r0, [pc, #16]	; (8000510 <main+0x48>)
 8000500:	f001 f8f5 	bl	80016ee <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 fe0a 	bl	8001120 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800050c:	e7f2      	b.n	80004f4 <main+0x2c>
 800050e:	bf00      	nop
 8000510:	40020800 	.word	0x40020800

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b098      	sub	sp, #96	; 0x60
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f007 ff56 	bl	80083d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <SystemClock_Config+0xfc>)
 800054c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054e:	4a30      	ldr	r2, [pc, #192]	; (8000610 <SystemClock_Config+0xfc>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	6413      	str	r3, [r2, #64]	; 0x40
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <SystemClock_Config+0xfc>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <SystemClock_Config+0x100>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a2a      	ldr	r2, [pc, #168]	; (8000614 <SystemClock_Config+0x100>)
 800056c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0x100>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800057e:	2305      	movs	r3, #5
 8000580:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000590:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000596:	2310      	movs	r3, #16
 8000598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800059e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a4:	2307      	movs	r3, #7
 80005a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fb43 	bl	8002c38 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80005b8:	f000 fac2 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d4:	f107 031c 	add.w	r3, r7, #28
 80005d8:	2105      	movs	r1, #5
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fd9c 	bl	8003118 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005e6:	f000 faab 	bl	8000b40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 ff69 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000604:	f000 fa9c 	bl	8000b40 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3760      	adds	r7, #96	; 0x60
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f001 f865 	bl	8001724 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 fa6e 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200002a8 	.word	0x200002a8
 800066c:	40005400 	.word	0x40005400
 8000670:	00061a80 	.word	0x00061a80

08000674 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C2_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <MX_I2C2_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C2_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_I2C2_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C2_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2C2_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_I2C2_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000696:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_I2C2_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2C2_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_I2C2_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2C2_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_I2C2_Init+0x50>)
 80006b2:	f001 f837 	bl	8001724 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 fa40 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200002fc 	.word	0x200002fc
 80006c8:	40005800 	.word	0x40005800
 80006cc:	00061a80 	.word	0x00061a80

080006d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_RTC_Init+0x44>)
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <MX_RTC_Init+0x48>)
 80006d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_RTC_Init+0x44>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_RTC_Init+0x44>)
 80006e2:	227f      	movs	r2, #127	; 0x7f
 80006e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_RTC_Init+0x44>)
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_RTC_Init+0x44>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_RTC_Init+0x44>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_RTC_Init+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_RTC_Init+0x44>)
 8000700:	f002 ffc8 	bl	8003694 <HAL_RTC_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800070a:	f000 fa19 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200003d0 	.word	0x200003d0
 8000718:	40002800 	.word	0x40002800

0800071c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_TIM3_Init+0xec>)
 8000740:	4a32      	ldr	r2, [pc, #200]	; (800080c <MX_TIM3_Init+0xf0>)
 8000742:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_TIM3_Init+0xec>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_TIM3_Init+0xec>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_TIM3_Init+0xec>)
 8000752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000756:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_TIM3_Init+0xec>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_TIM3_Init+0xec>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000764:	4828      	ldr	r0, [pc, #160]	; (8000808 <MX_TIM3_Init+0xec>)
 8000766:	f003 f8a5 	bl	80038b4 <HAL_TIM_OC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000770:	f000 f9e6 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4619      	mov	r1, r3
 8000782:	4821      	ldr	r0, [pc, #132]	; (8000808 <MX_TIM3_Init+0xec>)
 8000784:	f003 feb4 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800078e:	f000 f9d7 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	4619      	mov	r1, r3
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <MX_TIM3_Init+0xec>)
 80007aa:	f003 f8d9 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80007b4:	f000 f9c4 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2204      	movs	r2, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_TIM3_Init+0xec>)
 80007c0:	f003 f8ce 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80007ca:	f000 f9b9 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2208      	movs	r2, #8
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_TIM3_Init+0xec>)
 80007d6:	f003 f8c3 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80007e0:	f000 f9ae 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	220c      	movs	r2, #12
 80007e8:	4619      	mov	r1, r3
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <MX_TIM3_Init+0xec>)
 80007ec:	f003 f8b8 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80007f6:	f000 f9a3 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007fa:	4803      	ldr	r0, [pc, #12]	; (8000808 <MX_TIM3_Init+0xec>)
 80007fc:	f000 faee 	bl	8000ddc <HAL_TIM_MspPostInit>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000390 	.word	0x20000390
 800080c:	40000400 	.word	0x40000400

08000810 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	f107 0310 	add.w	r3, r7, #16
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_TIM5_Init+0xb4>)
 800082e:	4a26      	ldr	r2, [pc, #152]	; (80008c8 <MX_TIM5_Init+0xb8>)
 8000830:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_TIM5_Init+0xb4>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_TIM5_Init+0xb4>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_TIM5_Init+0xb4>)
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_TIM5_Init+0xb4>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_TIM5_Init+0xb4>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000852:	481c      	ldr	r0, [pc, #112]	; (80008c4 <MX_TIM5_Init+0xb4>)
 8000854:	f003 f859 	bl	800390a <HAL_TIM_IC_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f96f 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	4814      	ldr	r0, [pc, #80]	; (80008c4 <MX_TIM5_Init+0xb4>)
 8000872:	f003 fe3d 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800087c:	f000 f960 	bl	8000b40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000884:	2301      	movs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	480b      	ldr	r0, [pc, #44]	; (80008c4 <MX_TIM5_Init+0xb4>)
 8000898:	f003 f8c2 	bl	8003a20 <HAL_TIM_IC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80008a2:	f000 f94d 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	2204      	movs	r2, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_TIM5_Init+0xb4>)
 80008ae:	f003 f8b7 	bl	8003a20 <HAL_TIM_IC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 80008b8:	f000 f942 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000350 	.word	0x20000350
 80008c8:	40000c00 	.word	0x40000c00

080008cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b096      	sub	sp, #88	; 0x58
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2220      	movs	r2, #32
 8000902:	2100      	movs	r1, #0
 8000904:	4618      	mov	r0, r3
 8000906:	f007 fd65 	bl	80083d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800090a:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <MX_TIM8_Init+0x180>)
 800090c:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <MX_TIM8_Init+0x184>)
 800090e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000910:	4b4e      	ldr	r3, [pc, #312]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800091c:	4b4b      	ldr	r3, [pc, #300]	; (8000a4c <MX_TIM8_Init+0x180>)
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800092a:	4b48      	ldr	r3, [pc, #288]	; (8000a4c <MX_TIM8_Init+0x180>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000936:	4845      	ldr	r0, [pc, #276]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000938:	f002 ff91 	bl	800385e <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000942:	f000 f8fd 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000950:	4619      	mov	r1, r3
 8000952:	483e      	ldr	r0, [pc, #248]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000954:	f003 f900 	bl	8003b58 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800095e:	f000 f8ef 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000962:	483a      	ldr	r0, [pc, #232]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000964:	f002 ffa6 	bl	80038b4 <HAL_TIM_OC_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800096e:	f000 f8e7 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800097a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800097e:	4619      	mov	r1, r3
 8000980:	4832      	ldr	r0, [pc, #200]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000982:	f003 fdb5 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800098c:	f000 f8d8 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099c:	2300      	movs	r3, #0
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	2200      	movs	r2, #0
 80009b2:	4619      	mov	r1, r3
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_TIM8_Init+0x180>)
 80009b6:	f002 ffd3 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80009c0:	f000 f8be 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	2204      	movs	r2, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <MX_TIM8_Init+0x180>)
 80009ce:	f002 ffc7 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80009d8:	f000 f8b2 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e0:	2208      	movs	r2, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	4819      	ldr	r0, [pc, #100]	; (8000a4c <MX_TIM8_Init+0x180>)
 80009e6:	f002 ffbb 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80009f0:	f000 f8a6 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	220c      	movs	r2, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM8_Init+0x180>)
 80009fe:	f002 ffaf 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000a08:	f000 f89a 	bl	8000b40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000a30:	f003 fdda 	bl	80045e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000a3a:	f000 f881 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <MX_TIM8_Init+0x180>)
 8000a40:	f000 f9cc 	bl	8000ddc <HAL_TIM_MspPostInit>

}
 8000a44:	bf00      	nop
 8000a46:	3758      	adds	r7, #88	; 0x58
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000268 	.word	0x20000268
 8000a50:	40010400 	.word	0x40010400

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a30      	ldr	r2, [pc, #192]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_GPIO_Init+0xe0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	2106      	movs	r1, #6
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <MX_GPIO_Init+0xe4>)
 8000ae0:	f000 fdec 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000aea:	4814      	ldr	r0, [pc, #80]	; (8000b3c <MX_GPIO_Init+0xe8>)
 8000aec:	f000 fde6 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000af0:	2306      	movs	r3, #6
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_GPIO_Init+0xe4>)
 8000b08:	f000 fc3e 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000b0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_GPIO_Init+0xe8>)
 8000b26:	f000 fc2f 	bl	8001388 <HAL_GPIO_Init>

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020400 	.word	0x40020400

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
	...

08000b50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <HAL_I2C_MspInit+0xe8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12c      	bne.n	8000c1c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bde:	23c0      	movs	r3, #192	; 0xc0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be2:	2312      	movs	r3, #18
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bee:	2304      	movs	r3, #4
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4825      	ldr	r0, [pc, #148]	; (8000c90 <HAL_I2C_MspInit+0xf0>)
 8000bfa:	f000 fbc5 	bl	8001388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c1a:	e031      	b.n	8000c80 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <HAL_I2C_MspInit+0xf4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12c      	bne.n	8000c80 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c48:	2312      	movs	r3, #18
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c54:	2304      	movs	r3, #4
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480c      	ldr	r0, [pc, #48]	; (8000c90 <HAL_I2C_MspInit+0xf0>)
 8000c60:	f000 fb92 	bl	8001388 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_I2C_MspInit+0xec>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3730      	adds	r7, #48	; 0x30
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40005800 	.word	0x40005800

08000c98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <HAL_RTC_MspInit+0x24>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d102      	bne.n	8000cb0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_RTC_MspInit+0x28>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40002800 	.word	0x40002800
 8000cc0:	42470e3c 	.word	0x42470e3c

08000cc4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_TIM_OC_MspInit+0x3c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d10d      	bne.n	8000cf2 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_TIM_OC_MspInit+0x40>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <HAL_TIM_OC_MspInit+0x40>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_TIM_OC_MspInit+0x40>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40000400 	.word	0x40000400
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_TIM_IC_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12b      	bne.n	8000d82 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_TIM_IC_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_TIM_IC_MspInit+0x88>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_TIM_IC_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_TIM_IC_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <HAL_TIM_IC_MspInit+0x88>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_TIM_IC_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d62:	2303      	movs	r3, #3
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d72:	2302      	movs	r3, #2
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <HAL_TIM_IC_MspInit+0x8c>)
 8000d7e:	f000 fb03 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40000c00 	.word	0x40000c00
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_TIM_Base_MspInit+0x3c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10d      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_TIM_Base_MspInit+0x40>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <HAL_TIM_Base_MspInit+0x40>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_TIM_Base_MspInit+0x40>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40010400 	.word	0x40010400
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a33      	ldr	r2, [pc, #204]	; (8000ec8 <HAL_TIM_MspPostInit+0xec>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d13c      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b32      	ldr	r3, [pc, #200]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e36:	23c0      	movs	r3, #192	; 0xc0
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e46:	2302      	movs	r3, #2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481f      	ldr	r0, [pc, #124]	; (8000ed0 <HAL_TIM_MspPostInit+0xf4>)
 8000e52:	f000 fa99 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e56:	2303      	movs	r3, #3
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e66:	2302      	movs	r3, #2
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <HAL_TIM_MspPostInit+0xf8>)
 8000e72:	f000 fa89 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000e76:	e023      	b.n	8000ec0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_TIM_MspPostInit+0xfc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d11e      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_TIM_MspPostInit+0xf0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e9e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <HAL_TIM_MspPostInit+0x100>)
 8000ebc:	f000 fa64 	bl	8001388 <HAL_GPIO_Init>
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40000400 	.word	0x40000400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020400 	.word	0x40020400
 8000ed8:	40010400 	.word	0x40010400
 8000edc:	40020800 	.word	0x40020800

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f8d4 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <OTG_FS_IRQHandler+0x10>)
 8000f42:	f000 fea7 	bl	8001c94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200008c4 	.word	0x200008c4

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f007 f9ee 	bl	8008360 <__errno>
 8000f84:	4602      	mov	r2, r0
 8000f86:	230c      	movs	r3, #12
 8000f88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20020000 	.word	0x20020000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	2000015c 	.word	0x2000015c
 8000fb8:	20000cd0 	.word	0x20000cd0

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <SystemInit+0x28>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <SystemInit+0x28>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SystemInit+0x28>)
 8000fd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fee:	e003      	b.n	8000ff8 <LoopCopyDataInit>

08000ff0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ff2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff6:	3104      	adds	r1, #4

08000ff8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ffc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001000:	d3f6      	bcc.n	8000ff0 <CopyDataInit>
  ldr  r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001004:	e002      	b.n	800100c <LoopFillZerobss>

08001006 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001006:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001008:	f842 3b04 	str.w	r3, [r2], #4

0800100c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001010:	d3f9      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffd3 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f007 f9a9 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fa55 	bl	80004c8 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001024:	08008648 	.word	0x08008648
  ldr  r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800102c:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 8001030:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 8001034:	20000cd0 	.word	0x20000cd0

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f94d 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fd6e 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f965 	bl	800136e <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f92d 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	200003f0 	.word	0x200003f0

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200003f0 	.word	0x200003f0

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_Delay+0x40>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffde 	bl	8001108 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db0a      	blt.n	800122e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <__NVIC_SetPriority+0x4c>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800122c:	e00a      	b.n	8001244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4908      	ldr	r1, [pc, #32]	; (8001254 <__NVIC_SetPriority+0x50>)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	3b04      	subs	r3, #4
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	440b      	add	r3, r1
 8001242:	761a      	strb	r2, [r3, #24]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000e100 	.word	0xe000e100
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	; 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f1c3 0307 	rsb	r3, r3, #7
 8001272:	2b04      	cmp	r3, #4
 8001274:	bf28      	it	cs
 8001276:	2304      	movcs	r3, #4
 8001278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3304      	adds	r3, #4
 800127e:	2b06      	cmp	r3, #6
 8001280:	d902      	bls.n	8001288 <NVIC_EncodePriority+0x30>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3b03      	subs	r3, #3
 8001286:	e000      	b.n	800128a <NVIC_EncodePriority+0x32>
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 32ff 	mov.w	r2, #4294967295
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a0:	f04f 31ff 	mov.w	r1, #4294967295
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	4313      	orrs	r3, r2
         );
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3724      	adds	r7, #36	; 0x24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff8e 	bl	8001204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff29 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff3e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff8e 	bl	8001258 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5d 	bl	8001204 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff31 	bl	80011c8 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffa2 	bl	80012c0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e16b      	b.n	800167c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 815a 	bne.w	8001676 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d00b      	beq.n	80013e2 <HAL_GPIO_Init+0x5a>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d6:	2b11      	cmp	r3, #17
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0xfc>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	69b9      	ldr	r1, [r7, #24]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80b4 	beq.w	8001676 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_GPIO_Init+0x308>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a5e      	ldr	r2, [pc, #376]	; (8001690 <HAL_GPIO_Init+0x308>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <HAL_GPIO_Init+0x308>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152a:	4a5a      	ldr	r2, [pc, #360]	; (8001694 <HAL_GPIO_Init+0x30c>)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	3302      	adds	r3, #2
 8001532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	220f      	movs	r2, #15
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a51      	ldr	r2, [pc, #324]	; (8001698 <HAL_GPIO_Init+0x310>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d02b      	beq.n	80015ae <HAL_GPIO_Init+0x226>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a50      	ldr	r2, [pc, #320]	; (800169c <HAL_GPIO_Init+0x314>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x222>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_GPIO_Init+0x318>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x21e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_GPIO_Init+0x31c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x21a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_GPIO_Init+0x320>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x216>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x324>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x212>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x328>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x32c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x20a>
 800158e:	2307      	movs	r3, #7
 8001590:	e00e      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 8001592:	2308      	movs	r3, #8
 8001594:	e00c      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 8001596:	2306      	movs	r3, #6
 8001598:	e00a      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 800159a:	2305      	movs	r3, #5
 800159c:	e008      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 800159e:	2304      	movs	r3, #4
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 80015a2:	2303      	movs	r3, #3
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x228>
 80015ae:	2300      	movs	r3, #0
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	f002 0203 	and.w	r2, r2, #3
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	4093      	lsls	r3, r2
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c0:	4934      	ldr	r1, [pc, #208]	; (8001694 <HAL_GPIO_Init+0x30c>)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_GPIO_Init+0x330>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f2:	4a31      	ldr	r2, [pc, #196]	; (80016b8 <HAL_GPIO_Init+0x330>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f8:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_GPIO_Init+0x330>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <HAL_GPIO_Init+0x330>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_GPIO_Init+0x330>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <HAL_GPIO_Init+0x330>)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_GPIO_Init+0x330>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001670:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <HAL_GPIO_Init+0x330>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3301      	adds	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	f67f ae90 	bls.w	80013a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001684:	bf00      	nop
 8001686:	3724      	adds	r7, #36	; 0x24
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800
 8001694:	40013800 	.word	0x40013800
 8001698:	40020000 	.word	0x40020000
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020c00 	.word	0x40020c00
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40021400 	.word	0x40021400
 80016b0:	40021800 	.word	0x40021800
 80016b4:	40021c00 	.word	0x40021c00
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	401a      	ands	r2, r3
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	429a      	cmp	r2, r3
 8001706:	d104      	bne.n	8001712 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001708:	887b      	ldrh	r3, [r7, #2]
 800170a:	041a      	lsls	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001710:	e002      	b.n	8001718 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e11f      	b.n	8001976 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fa28 	bl	8000ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001788:	f001 fe8e 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 800178c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a7b      	ldr	r2, [pc, #492]	; (8001980 <HAL_I2C_Init+0x25c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d807      	bhi.n	80017a8 <HAL_I2C_Init+0x84>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a7a      	ldr	r2, [pc, #488]	; (8001984 <HAL_I2C_Init+0x260>)
 800179c:	4293      	cmp	r3, r2
 800179e:	bf94      	ite	ls
 80017a0:	2301      	movls	r3, #1
 80017a2:	2300      	movhi	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e006      	b.n	80017b6 <HAL_I2C_Init+0x92>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4a77      	ldr	r2, [pc, #476]	; (8001988 <HAL_I2C_Init+0x264>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	bf94      	ite	ls
 80017b0:	2301      	movls	r3, #1
 80017b2:	2300      	movhi	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0db      	b.n	8001976 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a72      	ldr	r2, [pc, #456]	; (800198c <HAL_I2C_Init+0x268>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	0c9b      	lsrs	r3, r3, #18
 80017c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	430a      	orrs	r2, r1
 80017dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	4a64      	ldr	r2, [pc, #400]	; (8001980 <HAL_I2C_Init+0x25c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d802      	bhi.n	80017f8 <HAL_I2C_Init+0xd4>
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	e009      	b.n	800180c <HAL_I2C_Init+0xe8>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	4a63      	ldr	r2, [pc, #396]	; (8001990 <HAL_I2C_Init+0x26c>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	3301      	adds	r3, #1
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800181e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4956      	ldr	r1, [pc, #344]	; (8001980 <HAL_I2C_Init+0x25c>)
 8001828:	428b      	cmp	r3, r1
 800182a:	d80d      	bhi.n	8001848 <HAL_I2C_Init+0x124>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e59      	subs	r1, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fbb1 f3f3 	udiv	r3, r1, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	2b04      	cmp	r3, #4
 8001842:	bf38      	it	cc
 8001844:	2304      	movcc	r3, #4
 8001846:	e04f      	b.n	80018e8 <HAL_I2C_Init+0x1c4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d111      	bne.n	8001874 <HAL_I2C_Init+0x150>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e58      	subs	r0, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001862:	3301      	adds	r3, #1
 8001864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e012      	b.n	800189a <HAL_I2C_Init+0x176>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e58      	subs	r0, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	0099      	lsls	r1, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Init+0x17e>
 800189e:	2301      	movs	r3, #1
 80018a0:	e022      	b.n	80018e8 <HAL_I2C_Init+0x1c4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10e      	bne.n	80018c8 <HAL_I2C_Init+0x1a4>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1e58      	subs	r0, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6859      	ldr	r1, [r3, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	440b      	add	r3, r1
 80018b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018c6:	e00f      	b.n	80018e8 <HAL_I2C_Init+0x1c4>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1e58      	subs	r0, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	0099      	lsls	r1, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	fbb0 f3f3 	udiv	r3, r0, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	6809      	ldr	r1, [r1, #0]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001916:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6911      	ldr	r1, [r2, #16]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68d2      	ldr	r2, [r2, #12]
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	430b      	orrs	r3, r1
 800192a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	000186a0 	.word	0x000186a0
 8001984:	001e847f 	.word	0x001e847f
 8001988:	003d08ff 	.word	0x003d08ff
 800198c:	431bde83 	.word	0x431bde83
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001996:	b08f      	sub	sp, #60	; 0x3c
 8001998:	af0a      	add	r7, sp, #40	; 0x28
 800199a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e10f      	b.n	8001bc6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d106      	bne.n	80019c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f006 f9d9 	bl	8007d78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 ff66 	bl	80048b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	687e      	ldr	r6, [r7, #4]
 80019f2:	466d      	mov	r5, sp
 80019f4:	f106 0410 	add.w	r4, r6, #16
 80019f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a08:	1d33      	adds	r3, r6, #4
 8001a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a0c:	6838      	ldr	r0, [r7, #0]
 8001a0e:	f002 fe3d 	bl	800468c <USB_CoreInit>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0d0      	b.n	8001bc6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 ff54 	bl	80048d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e04a      	b.n	8001acc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	1a9b      	subs	r3, r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	333d      	adds	r3, #61	; 0x3d
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	333c      	adds	r3, #60	; 0x3c
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	b298      	uxth	r0, r3
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3342      	adds	r3, #66	; 0x42
 8001a72:	4602      	mov	r2, r0
 8001a74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	333f      	adds	r3, #63	; 0x3f
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	3344      	adds	r3, #68	; 0x44
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	3348      	adds	r3, #72	; 0x48
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3350      	adds	r3, #80	; 0x50
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3af      	bcc.n	8001a36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e044      	b.n	8001b66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	3301      	adds	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3b5      	bcc.n	8001adc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	687e      	ldr	r6, [r7, #4]
 8001b78:	466d      	mov	r5, sp
 8001b7a:	f106 0410 	add.w	r4, r6, #16
 8001b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b8e:	1d33      	adds	r3, r6, #4
 8001b90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b92:	6838      	ldr	r0, [r7, #0]
 8001b94:	f002 feca 	bl	800492c <USB_DevInit>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00d      	b.n	8001bc6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fe7c 	bl	80058bc <USB_DevDisconnect>

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_PCD_Start+0x1c>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e020      	b.n	8001c2c <HAL_PCD_Start+0x5e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d109      	bne.n	8001c0e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fe3a 	bl	800588c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fe39 	bl	8004894 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_PCD_Stop+0x16>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e020      	b.n	8001c8c <HAL_PCD_Stop+0x58>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 fe2d 	bl	80048b6 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 fd9e 	bl	80057a2 <USB_StopDevice>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_PCD_Stop+0x44>
  {
    __HAL_UNLOCK(hpcd);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e009      	b.n	8001c8c <HAL_PCD_Stop+0x58>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fe1d 	bl	80058bc <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08d      	sub	sp, #52	; 0x34
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 feb1 	bl	8005a12 <USB_GetMode>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f040 839d 	bne.w	80023f2 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 fe15 	bl	80058ec <USB_ReadInterrupts>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8393 	beq.w	80023f0 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fe0c 	bl	80058ec <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d107      	bne.n	8001cee <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 0202 	and.w	r2, r2, #2
 8001cec:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fdfa 	bl	80058ec <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d161      	bne.n	8001dc6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0210 	bic.w	r2, r2, #16
 8001d10:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3304      	adds	r3, #4
 8001d30:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	0c5b      	lsrs	r3, r3, #17
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d124      	bne.n	8001d88 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d035      	beq.n	8001db6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	6a38      	ldr	r0, [r7, #32]
 8001d5e:	f003 fc23 	bl	80055a8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d6e:	441a      	add	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d80:	441a      	add	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	e016      	b.n	8001db6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	0c5b      	lsrs	r3, r3, #17
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d110      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6a38      	ldr	r0, [r7, #32]
 8001da0:	f003 fc02 	bl	80055a8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001db0:	441a      	add	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699a      	ldr	r2, [r3, #24]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0210 	orr.w	r2, r2, #16
 8001dc4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fd8e 	bl	80058ec <USB_ReadInterrupts>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001dda:	d16e      	bne.n	8001eba <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fd94 	bl	8005912 <USB_ReadDevAllOutEpInterrupt>
 8001dea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001dec:	e062      	b.n	8001eb4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d057      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 fdb9 	bl	800597a <USB_ReadDevOutEPInterrupt>
 8001e08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e20:	461a      	mov	r2, r3
 8001e22:	2301      	movs	r3, #1
 8001e24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fd4f 	bl	80028cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00c      	beq.n	8001e52 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e44:	461a      	mov	r2, r3
 8001e46:	2308      	movs	r3, #8
 8001e48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fe49 	bl	8002ae4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e84:	461a      	mov	r2, r3
 8001e86:	2320      	movs	r3, #32
 8001e88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	3301      	adds	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d199      	bne.n	8001dee <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fd14 	bl	80058ec <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ece:	f040 80c0 	bne.w	8002052 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fd35 	bl	8005946 <USB_ReadDevAllInEpInterrupt>
 8001edc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ee2:	e0b2      	b.n	800204a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a7 	beq.w	800203e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	4611      	mov	r1, r2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fd5b 	bl	80059b6 <USB_ReadDevInEPInterrupt>
 8001f00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d057      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	2201      	movs	r2, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69f9      	ldr	r1, [r7, #28]
 8001f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2301      	movs	r3, #1
 8001f40:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d132      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	3348      	adds	r3, #72	; 0x48
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4403      	add	r3, r0
 8001f6a:	3344      	adds	r3, #68	; 0x44
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4419      	add	r1, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4403      	add	r3, r0
 8001f7e:	3348      	adds	r3, #72	; 0x48
 8001f80:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d113      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x31c>
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	3350      	adds	r3, #80	; 0x50
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d108      	bne.n	8001fb0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fa8:	461a      	mov	r2, r3
 8001faa:	2101      	movs	r1, #1
 8001fac:	f003 fd62 	bl	8005a74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f005 ff6d 	bl	8007e96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d008      	beq.n	8002010 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800200a:	461a      	mov	r2, r3
 800200c:	2340      	movs	r3, #64	; 0x40
 800200e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d008      	beq.n	800202c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002026:	461a      	mov	r2, r3
 8002028:	2302      	movs	r3, #2
 800202a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fbb9 	bl	80027b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	3301      	adds	r3, #1
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f af49 	bne.w	8001ee4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fc48 	bl	80058ec <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002066:	d122      	bne.n	80020ae <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800208e:	2100      	movs	r1, #0
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fdc5 	bl	8002c20 <HAL_PCDEx_LPM_Callback>
 8002096:	e002      	b.n	800209e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f005 ff73 	bl	8007f84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80020ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fc1a 	bl	80058ec <USB_ReadInterrupts>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c2:	d112      	bne.n	80020ea <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d102      	bne.n	80020da <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f005 ff2f 	bl	8007f38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80020e8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 fbfc 	bl	80058ec <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fe:	f040 80c7 	bne.w	8002290 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2110      	movs	r1, #16
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fd69 	bl	8004bf4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002126:	e056      	b.n	80021d6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002134:	461a      	mov	r2, r3
 8002136:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800213a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	015a      	lsls	r2, r3, #5
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800214c:	0151      	lsls	r1, r2, #5
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	440a      	add	r2, r1
 8002152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002156:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800215a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800216c:	0151      	lsls	r1, r2, #5
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	440a      	add	r2, r1
 8002172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800217a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800217c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002188:	461a      	mov	r2, r3
 800218a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800218e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a0:	0151      	lsls	r1, r2, #5
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	440a      	add	r2, r1
 80021a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c0:	0151      	lsls	r1, r2, #5
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	440a      	add	r2, r1
 80021c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80021ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	3301      	adds	r3, #1
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3a3      	bcc.n	8002128 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80021f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d016      	beq.n	800222a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800220c:	f043 030b 	orr.w	r3, r3, #11
 8002210:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002222:	f043 030b 	orr.w	r3, r3, #11
 8002226:	6453      	str	r3, [r2, #68]	; 0x44
 8002228:	e015      	b.n	8002256 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800223c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002240:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002250:	f043 030b 	orr.w	r3, r3, #11
 8002254:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002264:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002268:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800227a:	461a      	mov	r2, r3
 800227c:	f003 fbfa 	bl	8005a74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800228e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f003 fb29 	bl	80058ec <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a4:	d124      	bne.n	80022f0 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f003 fbbf 	bl	8005a2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fcfe 	bl	8004cb6 <USB_GetDevSpeed>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681c      	ldr	r4, [r3, #0]
 80022c6:	f001 f8e3 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80022ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	4620      	mov	r0, r4
 80022d6:	f002 fa3b 	bl	8004750 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f005 fe03 	bl	8007ee6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80022ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 faf9 	bl	80058ec <USB_ReadInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d10a      	bne.n	800231a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f005 fde0 	bl	8007eca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f002 0208 	and.w	r2, r2, #8
 8002318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fae4 	bl	80058ec <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800232e:	d10f      	bne.n	8002350 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f005 fe42 	bl	8007fc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800234e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f003 fac9 	bl	80058ec <USB_ReadInterrupts>
 800235a:	4603      	mov	r3, r0
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002364:	d10f      	bne.n	8002386 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f005 fe15 	bl	8007fa0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f003 faae 	bl	80058ec <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239a:	d10a      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f005 fe23 	bl	8007fe8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80023b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fa98 	bl	80058ec <USB_ReadInterrupts>
 80023bc:	4603      	mov	r3, r0
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d115      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f005 fe13 	bl	8008004 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	e000      	b.n	80023f2 <HAL_PCD_IRQHandler+0x75e>
      return;
 80023f0:	bf00      	nop
    }
  }
}
 80023f2:	3734      	adds	r7, #52	; 0x34
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}

080023f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_PCD_SetAddress+0x1a>
 800240e:	2302      	movs	r3, #2
 8002410:	e013      	b.n	800243a <HAL_PCD_SetAddress+0x42>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fa08 	bl	8005840 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	4608      	mov	r0, r1
 800244c:	4611      	mov	r1, r2
 800244e:	461a      	mov	r2, r3
 8002450:	4603      	mov	r3, r0
 8002452:	70fb      	strb	r3, [r7, #3]
 8002454:	460b      	mov	r3, r1
 8002456:	803b      	strh	r3, [r7, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da0f      	bge.n	8002488 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 020f 	and.w	r2, r3, #15
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	3338      	adds	r3, #56	; 0x38
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4413      	add	r3, r2
 800247c:	3304      	adds	r3, #4
 800247e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	705a      	strb	r2, [r3, #1]
 8002486:	e00f      	b.n	80024a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 020f 	and.w	r2, r3, #15
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	3304      	adds	r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024b4:	883a      	ldrh	r2, [r7, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	78ba      	ldrb	r2, [r7, #2]
 80024be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	785b      	ldrb	r3, [r3, #1]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024d2:	78bb      	ldrb	r3, [r7, #2]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d102      	bne.n	80024de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_PCD_EP_Open+0xaa>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e00e      	b.n	800250a <HAL_PCD_EP_Open+0xc8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fc00 	bl	8004d00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002508:	7afb      	ldrb	r3, [r7, #11]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	460b      	mov	r3, r1
 8002520:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002522:	7afb      	ldrb	r3, [r7, #11]
 8002524:	f003 020f 	and.w	r2, r3, #15
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	3304      	adds	r3, #4
 800253a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2200      	movs	r2, #0
 8002552:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002554:	7afb      	ldrb	r3, [r7, #11]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	b2da      	uxtb	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d102      	bne.n	800256e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800256e:	7afb      	ldrb	r3, [r7, #11]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	6979      	ldr	r1, [r7, #20]
 8002586:	f002 fe87 	bl	8005298 <USB_EP0StartXfer>
 800258a:	e008      	b.n	800259e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	6979      	ldr	r1, [r7, #20]
 800259a:	f002 fc39 	bl	8004e10 <USB_EPStartXfer>
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b8:	7afb      	ldrb	r3, [r7, #11]
 80025ba:	f003 020f 	and.w	r2, r3, #15
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2201      	movs	r2, #1
 80025e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d102      	bne.n	8002602 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002602:	7afb      	ldrb	r3, [r7, #11]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	6979      	ldr	r1, [r7, #20]
 800261a:	f002 fe3d 	bl	8005298 <USB_EP0StartXfer>
 800261e:	e008      	b.n	8002632 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6979      	ldr	r1, [r7, #20]
 800262e:	f002 fbef 	bl	8004e10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d901      	bls.n	800265a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e050      	b.n	80026fc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800265a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265e:	2b00      	cmp	r3, #0
 8002660:	da0f      	bge.n	8002682 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3338      	adds	r3, #56	; 0x38
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	3304      	adds	r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	705a      	strb	r2, [r3, #1]
 8002680:	e00d      	b.n	800269e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	3304      	adds	r3, #4
 8002696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_PCD_EP_SetStall+0x82>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e01e      	b.n	80026fc <HAL_PCD_EP_SetStall+0xc0>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68f9      	ldr	r1, [r7, #12]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 ff94 	bl	80055fa <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	b2d9      	uxtb	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026ec:	461a      	mov	r2, r3
 80026ee:	f003 f9c1 	bl	8005a74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	f003 020f 	and.w	r2, r3, #15
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d901      	bls.n	8002722 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e042      	b.n	80027a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002726:	2b00      	cmp	r3, #0
 8002728:	da0f      	bge.n	800274a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	f003 020f 	and.w	r2, r3, #15
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	3338      	adds	r3, #56	; 0x38
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	3304      	adds	r3, #4
 8002740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	705a      	strb	r2, [r3, #1]
 8002748:	e00f      	b.n	800276a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	f003 020f 	and.w	r2, r3, #15
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	b2da      	uxtb	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_PCD_EP_ClrStall+0x86>
 8002786:	2302      	movs	r3, #2
 8002788:	e00e      	b.n	80027a8 <HAL_PCD_EP_ClrStall+0xa4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	4618      	mov	r0, r3
 800279a:	f002 ff9c 	bl	80056d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	3338      	adds	r3, #56	; 0x38
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d901      	bls.n	80027e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e06c      	b.n	80028c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d902      	bls.n	8002804 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	3303      	adds	r3, #3
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800280c:	e02b      	b.n	8002866 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	429a      	cmp	r2, r3
 8002822:	d902      	bls.n	800282a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3303      	adds	r3, #3
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002842:	b2db      	uxtb	r3, r3
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	4603      	mov	r3, r0
 8002848:	6978      	ldr	r0, [r7, #20]
 800284a:	f002 fe78 	bl	800553e <USB_WritePacket>

    ep->xfer_buff  += len;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	441a      	add	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	441a      	add	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	b29b      	uxth	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	429a      	cmp	r2, r3
 800287a:	d809      	bhi.n	8002890 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002884:	429a      	cmp	r2, r3
 8002886:	d203      	bcs.n	8002890 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1be      	bne.n	800280e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	429a      	cmp	r2, r3
 800289a:	d811      	bhi.n	80028c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	2201      	movs	r2, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	6939      	ldr	r1, [r7, #16]
 80028b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028bc:	4013      	ands	r3, r2
 80028be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	333c      	adds	r3, #60	; 0x3c
 80028e4:	3304      	adds	r3, #4
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	f040 80a0 	bne.w	8002a44 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4a72      	ldr	r2, [pc, #456]	; (8002adc <PCD_EP_OutXfrComplete_int+0x210>)
 8002912:	4293      	cmp	r3, r2
 8002914:	f240 80dd 	bls.w	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80d7 	beq.w	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002930:	461a      	mov	r2, r3
 8002932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002936:	6093      	str	r3, [r2, #8]
 8002938:	e0cb      	b.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	2320      	movs	r3, #32
 8002954:	6093      	str	r3, [r2, #8]
 8002956:	e0bc      	b.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 80b7 	bne.w	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <PCD_EP_OutXfrComplete_int+0x210>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d90f      	bls.n	800298c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002982:	461a      	mov	r2, r3
 8002984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002988:	6093      	str	r3, [r2, #8]
 800298a:	e0a2      	b.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800299e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	0159      	lsls	r1, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	440b      	add	r3, r1
 80029a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80029b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4403      	add	r3, r0
 80029c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80029c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029da:	6819      	ldr	r1, [r3, #0]
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4403      	add	r3, r0
 80029ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4419      	add	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4403      	add	r3, r0
 8002a00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a04:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d114      	bne.n	8002a36 <PCD_EP_OutXfrComplete_int+0x16a>
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d108      	bne.n	8002a36 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2101      	movs	r1, #1
 8002a32:	f003 f81f 	bl	8005a74 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f005 fa0f 	bl	8007e60 <HAL_PCD_DataOutStageCallback>
 8002a42:	e046      	b.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d124      	bne.n	8002a96 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a68:	6093      	str	r3, [r2, #8]
 8002a6a:	e032      	b.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a82:	461a      	mov	r2, r3
 8002a84:	2320      	movs	r3, #32
 8002a86:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f005 f9e6 	bl	8007e60 <HAL_PCD_DataOutStageCallback>
 8002a94:	e01d      	b.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d114      	bne.n	8002ac6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	f002 ffd7 	bl	8005a74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f005 f9c7 	bl	8007e60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	4f54300a 	.word	0x4f54300a
 8002ae0:	4f54310a 	.word	0x4f54310a

08002ae4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	333c      	adds	r3, #60	; 0x3c
 8002afc:	3304      	adds	r3, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d90e      	bls.n	8002b38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b30:	461a      	mov	r2, r3
 8002b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f005 f97f 	bl	8007e3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <PCD_EP_OutSetupPacket_int+0x88>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d90c      	bls.n	8002b60 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d108      	bne.n	8002b60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	f002 ff8a 	bl	8005a74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	4f54300a 	.word	0x4f54300a

08002b70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d107      	bne.n	8002b9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b8e:	883b      	ldrh	r3, [r7, #0]
 8002b90:	0419      	lsls	r1, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b9c:	e028      	b.n	8002bf0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	4413      	add	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e00d      	b.n	8002bce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	3340      	adds	r3, #64	; 0x40
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3ec      	bcc.n	8002bb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bd8:	883b      	ldrh	r3, [r7, #0]
 8002bda:	0418      	lsls	r0, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	4302      	orrs	r2, r0
 8002be8:	3340      	adds	r3, #64	; 0x40
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e25b      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d075      	beq.n	8002d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c56:	4ba3      	ldr	r3, [pc, #652]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d00c      	beq.n	8002c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4ba0      	ldr	r3, [pc, #640]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d112      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6e:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7a:	d10b      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7c:	4b99      	ldr	r3, [pc, #612]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d05b      	beq.n	8002d40 <HAL_RCC_OscConfig+0x108>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d157      	bne.n	8002d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e236      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d106      	bne.n	8002cac <HAL_RCC_OscConfig+0x74>
 8002c9e:	4b91      	ldr	r3, [pc, #580]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a90      	ldr	r2, [pc, #576]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e01d      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x98>
 8002cb6:	4b8b      	ldr	r3, [pc, #556]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a8a      	ldr	r2, [pc, #552]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a87      	ldr	r2, [pc, #540]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0xb0>
 8002cd0:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b81      	ldr	r3, [pc, #516]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a80      	ldr	r2, [pc, #512]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fa0a 	bl	8001108 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fa06 	bl	8001108 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1fb      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xc0>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe f9f6 	bl	8001108 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe f9f2 	bl	8001108 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e1e7      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0xe8>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d11c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	4b5c      	ldr	r3, [pc, #368]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x152>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e1bb      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4952      	ldr	r1, [pc, #328]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	e03a      	b.n	8002e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d020      	beq.n	8002dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <HAL_RCC_OscConfig+0x2b0>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe f9ab 	bl	8001108 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe f9a7 	bl	8001108 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e19c      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc8:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4940      	ldr	r1, [pc, #256]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]
 8002de8:	e015      	b.n	8002e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dea:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCC_OscConfig+0x2b0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe f98a 	bl	8001108 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df8:	f7fe f986 	bl	8001108 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e17b      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d030      	beq.n	8002e84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x2b4>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fe f96a 	bl	8001108 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fe f966 	bl	8001108 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e15b      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0x200>
 8002e56:	e015      	b.n	8002e84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x2b4>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe f953 	bl	8001108 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e66:	f7fe f94f 	bl	8001108 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e144      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a0 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_OscConfig+0x2ac>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d121      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <HAL_RCC_OscConfig+0x2b8>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fe f915 	bl	8001108 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e011      	b.n	8002f06 <HAL_RCC_OscConfig+0x2ce>
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
 8002ef0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef4:	f7fe f908 	bl	8001108 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0fd      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x2f0>
 8002f1a:	4b7d      	ldr	r3, [pc, #500]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a7c      	ldr	r2, [pc, #496]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	e01c      	b.n	8002f62 <HAL_RCC_OscConfig+0x32a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x312>
 8002f30:	4b77      	ldr	r3, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	4a76      	ldr	r2, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3c:	4b74      	ldr	r3, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a73      	ldr	r2, [pc, #460]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e00b      	b.n	8002f62 <HAL_RCC_OscConfig+0x32a>
 8002f4a:	4b71      	ldr	r3, [pc, #452]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a70      	ldr	r2, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	4b6e      	ldr	r3, [pc, #440]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5a:	4a6d      	ldr	r2, [pc, #436]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d015      	beq.n	8002f96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f8cd 	bl	8001108 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fe f8c9 	bl	8001108 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0bc      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	4b61      	ldr	r3, [pc, #388]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ee      	beq.n	8002f72 <HAL_RCC_OscConfig+0x33a>
 8002f94:	e014      	b.n	8002fc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f8b7 	bl	8001108 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f8b3 	bl	8001108 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0a6      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb4:	4b56      	ldr	r3, [pc, #344]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc6:	4b52      	ldr	r3, [pc, #328]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a51      	ldr	r2, [pc, #324]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8092 	beq.w	8003100 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fdc:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d05c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d141      	bne.n	8003074 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <HAL_RCC_OscConfig+0x4dc>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff6:	f7fe f887 	bl	8001108 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffe:	f7fe f883 	bl	8001108 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e078      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003010:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	061b      	lsls	r3, r3, #24
 8003040:	4933      	ldr	r1, [pc, #204]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_RCC_OscConfig+0x4dc>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe f85c 	bl	8001108 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f858 	bl	8001108 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e04d      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x41c>
 8003072:	e045      	b.n	8003100 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b27      	ldr	r3, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x4dc>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe f845 	bl	8001108 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe f841 	bl	8001108 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e036      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003094:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f0      	bne.n	8003082 <HAL_RCC_OscConfig+0x44a>
 80030a0:	e02e      	b.n	8003100 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e029      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_RCC_OscConfig+0x4d8>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d11c      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d115      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10d      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000
 8003110:	40023800 	.word	0x40023800
 8003114:	42470060 	.word	0x42470060

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cc      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d90c      	bls.n	8003154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a58      	ldr	r2, [pc, #352]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a52      	ldr	r2, [pc, #328]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800318e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b3f      	ldr	r3, [pc, #252]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3b      	ldr	r3, [pc, #236]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e067      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4934      	ldr	r1, [pc, #208]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fd ff7e 	bl	8001108 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fd ff7a 	bl	8001108 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d20c      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f821 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80032a2:	4601      	mov	r1, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
 80032b2:	fa21 f303 	lsr.w	r3, r1, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	; (80032dc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fede 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08008620 	.word	0x08008620
 80032dc:	20000000 	.word	0x20000000
 80032e0:	20000004 	.word	0x20000004

080032e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	2300      	movs	r3, #0
 80032f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b04      	cmp	r3, #4
 8003304:	d007      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x32>
 8003306:	2b08      	cmp	r3, #8
 8003308:	d008      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x38>
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 80b4 	bne.w	8003478 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b5e      	ldr	r3, [pc, #376]	; (800348c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003312:	60bb      	str	r3, [r7, #8]
       break;
 8003314:	e0b3      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003316:	4b5d      	ldr	r3, [pc, #372]	; (800348c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003318:	60bb      	str	r3, [r7, #8]
      break;
 800331a:	e0b0      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04a      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b55      	ldr	r3, [pc, #340]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	ea03 0501 	and.w	r5, r3, r1
 8003348:	ea04 0602 	and.w	r6, r4, r2
 800334c:	4629      	mov	r1, r5
 800334e:	4632      	mov	r2, r6
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	0154      	lsls	r4, r2, #5
 800335a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800335e:	014b      	lsls	r3, r1, #5
 8003360:	4619      	mov	r1, r3
 8003362:	4622      	mov	r2, r4
 8003364:	1b49      	subs	r1, r1, r5
 8003366:	eb62 0206 	sbc.w	r2, r2, r6
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	0194      	lsls	r4, r2, #6
 8003374:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003378:	018b      	lsls	r3, r1, #6
 800337a:	1a5b      	subs	r3, r3, r1
 800337c:	eb64 0402 	sbc.w	r4, r4, r2
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	00e2      	lsls	r2, r4, #3
 800338a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800338e:	00d9      	lsls	r1, r3, #3
 8003390:	460b      	mov	r3, r1
 8003392:	4614      	mov	r4, r2
 8003394:	195b      	adds	r3, r3, r5
 8003396:	eb44 0406 	adc.w	r4, r4, r6
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	02a2      	lsls	r2, r4, #10
 80033a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033a8:	0299      	lsls	r1, r3, #10
 80033aa:	460b      	mov	r3, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	4621      	mov	r1, r4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f04f 0400 	mov.w	r4, #0
 80033b8:	461a      	mov	r2, r3
 80033ba:	4623      	mov	r3, r4
 80033bc:	f7fc ff04 	bl	80001c8 <__aeabi_uldivmod>
 80033c0:	4603      	mov	r3, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	e049      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	ea03 0501 	and.w	r5, r3, r1
 80033de:	ea04 0602 	and.w	r6, r4, r2
 80033e2:	4629      	mov	r1, r5
 80033e4:	4632      	mov	r2, r6
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	0154      	lsls	r4, r2, #5
 80033f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033f4:	014b      	lsls	r3, r1, #5
 80033f6:	4619      	mov	r1, r3
 80033f8:	4622      	mov	r2, r4
 80033fa:	1b49      	subs	r1, r1, r5
 80033fc:	eb62 0206 	sbc.w	r2, r2, r6
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	f04f 0400 	mov.w	r4, #0
 8003408:	0194      	lsls	r4, r2, #6
 800340a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800340e:	018b      	lsls	r3, r1, #6
 8003410:	1a5b      	subs	r3, r3, r1
 8003412:	eb64 0402 	sbc.w	r4, r4, r2
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	00e2      	lsls	r2, r4, #3
 8003420:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003424:	00d9      	lsls	r1, r3, #3
 8003426:	460b      	mov	r3, r1
 8003428:	4614      	mov	r4, r2
 800342a:	195b      	adds	r3, r3, r5
 800342c:	eb44 0406 	adc.w	r4, r4, r6
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	02a2      	lsls	r2, r4, #10
 800343a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800343e:	0299      	lsls	r1, r3, #10
 8003440:	460b      	mov	r3, r1
 8003442:	4614      	mov	r4, r2
 8003444:	4618      	mov	r0, r3
 8003446:	4621      	mov	r1, r4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f04f 0400 	mov.w	r4, #0
 800344e:	461a      	mov	r2, r3
 8003450:	4623      	mov	r3, r4
 8003452:	f7fc feb9 	bl	80001c8 <__aeabi_uldivmod>
 8003456:	4603      	mov	r3, r0
 8003458:	460c      	mov	r4, r1
 800345a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800345c:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	3301      	adds	r3, #1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	60bb      	str	r3, [r7, #8]
      break;
 8003476:	e002      	b.n	800347e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800347a:	60bb      	str	r3, [r7, #8]
      break;
 800347c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800347e:	68bb      	ldr	r3, [r7, #8]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	00f42400 	.word	0x00f42400

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4601      	mov	r1, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4a03      	ldr	r2, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08008630 	.word	0x08008630

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d035      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034f8:	4b62      	ldr	r3, [pc, #392]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034fe:	f7fd fe03 	bl	8001108 <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003506:	f7fd fdff 	bl	8001108 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0b0      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003518:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	019a      	lsls	r2, r3, #6
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	071b      	lsls	r3, r3, #28
 8003530:	4955      	ldr	r1, [pc, #340]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003538:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800353e:	f7fd fde3 	bl	8001108 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003546:	f7fd fddf 	bl	8001108 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e090      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8083 	beq.w	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a43      	ldr	r2, [pc, #268]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800358e:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3e      	ldr	r2, [pc, #248]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800359a:	f7fd fdb5 	bl	8001108 <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fd fdb1 	bl	8001108 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e062      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035b4:	4b35      	ldr	r3, [pc, #212]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c0:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02f      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d028      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035de:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e8:	4b29      	ldr	r3, [pc, #164]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ee:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80035f4:	4a24      	ldr	r2, [pc, #144]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d114      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd fd7f 	bl	8001108 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd fd7b 	bl	8001108 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	; 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e02a      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ee      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363c:	d10d      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800364e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003652:	490d      	ldr	r1, [pc, #52]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
 8003658:	e005      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003660:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003664:	6093      	str	r3, [r2, #8]
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003668:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	4905      	ldr	r1, [pc, #20]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	42470068 	.word	0x42470068
 8003688:	40023800 	.word	0x40023800
 800368c:	40007000 	.word	0x40007000
 8003690:	42470e40 	.word	0x42470e40

08003694 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e083      	b.n	80037ae <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7f5b      	ldrb	r3, [r3, #29]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd faee 	bl	8000c98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	22ca      	movs	r2, #202	; 0xca
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2253      	movs	r2, #83	; 0x53
 80036d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f897 	bl	8003806 <RTC_EnterInitMode>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2204      	movs	r2, #4
 80036ea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e05e      	b.n	80037ae <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6919      	ldr	r1, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	041a      	lsls	r2, r3, #16
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10e      	bne.n	800377c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f829 	bl	80037b6 <HAL_RTC_WaitForSynchro>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	22ff      	movs	r2, #255	; 0xff
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e018      	b.n	80037ae <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800378a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	22ff      	movs	r2, #255	; 0xff
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037d2:	f7fd fc99 	bl	8001108 <HAL_GetTick>
 80037d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037d8:	e009      	b.n	80037ee <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037da:	f7fd fc95 	bl	8001108 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037e8:	d901      	bls.n	80037ee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e007      	b.n	80037fe <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ee      	beq.n	80037da <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d119      	bne.n	8003854 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800382a:	f7fd fc6d 	bl	8001108 <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003830:	e009      	b.n	8003846 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003832:	f7fd fc69 	bl	8001108 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003840:	d901      	bls.n	8003846 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e007      	b.n	8003856 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ee      	beq.n	8003832 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e01d      	b.n	80038ac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7fd fa87 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	4619      	mov	r1, r3
 800389c:	4610      	mov	r0, r2
 800389e:	f000 fa13 	bl	8003cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e01d      	b.n	8003902 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd f9f2 	bl	8000cc4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f000 f9e8 	bl	8003cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e01d      	b.n	8003958 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd f9e9 	bl	8000d08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	4619      	mov	r1, r3
 8003948:	4610      	mov	r0, r2
 800394a:	f000 f9bd 	bl	8003cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_TIM_OC_ConfigChannel+0x1a>
 8003976:	2302      	movs	r3, #2
 8003978:	e04e      	b.n	8003a18 <HAL_TIM_OC_ConfigChannel+0xb8>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	d839      	bhi.n	8003a04 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039cd 	.word	0x080039cd
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003a05 	.word	0x08003a05
 80039a4:	08003a05 	.word	0x08003a05
 80039a8:	080039db 	.word	0x080039db
 80039ac:	08003a05 	.word	0x08003a05
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003a05 	.word	0x08003a05
 80039b8:	080039e9 	.word	0x080039e9
 80039bc:	08003a05 	.word	0x08003a05
 80039c0:	08003a05 	.word	0x08003a05
 80039c4:	08003a05 	.word	0x08003a05
 80039c8:	080039f7 	.word	0x080039f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fa18 	bl	8003e08 <TIM_OC1_SetConfig>
      break;
 80039d8:	e015      	b.n	8003a06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fa81 	bl	8003ee8 <TIM_OC2_SetConfig>
      break;
 80039e6:	e00e      	b.n	8003a06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 faf0 	bl	8003fd4 <TIM_OC3_SetConfig>
      break;
 80039f4:	e007      	b.n	8003a06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fb5d 	bl	80040bc <TIM_OC4_SetConfig>
      break;
 8003a02:	e000      	b.n	8003a06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003a04:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e08a      	b.n	8003b50 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6819      	ldr	r1, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f000 fb82 	bl	8004168 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 020c 	bic.w	r2, r2, #12
 8003a72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6999      	ldr	r1, [r3, #24]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	e05a      	b.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f000 fc06 	bl	80042ae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ab0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6999      	ldr	r1, [r3, #24]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	021a      	lsls	r2, r3, #8
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	619a      	str	r2, [r3, #24]
 8003ac6:	e03a      	b.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d11b      	bne.n	8003b06 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f000 fc53 	bl	8004388 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 020c 	bic.w	r2, r2, #12
 8003af0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
 8003b04:	e01b      	b.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f000 fc73 	bl	8004400 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	021a      	lsls	r2, r3, #8
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_ConfigClockSource+0x18>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0a6      	b.n	8003cbe <HAL_TIM_ConfigClockSource+0x166>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d067      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0x120>
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d80b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x6c>
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d073      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x140>
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d802      	bhi.n	8003bba <HAL_TIM_ConfigClockSource+0x62>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d06f      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003bb8:	e078      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d06c      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x140>
 8003bbe:	2b30      	cmp	r3, #48	; 0x30
 8003bc0:	d06a      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003bc2:	e073      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bc4:	2b70      	cmp	r3, #112	; 0x70
 8003bc6:	d00d      	beq.n	8003be4 <HAL_TIM_ConfigClockSource+0x8c>
 8003bc8:	2b70      	cmp	r3, #112	; 0x70
 8003bca:	d804      	bhi.n	8003bd6 <HAL_TIM_ConfigClockSource+0x7e>
 8003bcc:	2b50      	cmp	r3, #80	; 0x50
 8003bce:	d033      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0xe0>
 8003bd0:	2b60      	cmp	r3, #96	; 0x60
 8003bd2:	d041      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003bd4:	e06a      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bda:	d066      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x152>
 8003bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be0:	d017      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003be2:	e063      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6899      	ldr	r1, [r3, #8]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f000 fc5c 	bl	80044b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c06:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]
      break;
 8003c10:	e04c      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f000 fc45 	bl	80044b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c34:	609a      	str	r2, [r3, #8]
      break;
 8003c36:	e039      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	461a      	mov	r2, r3
 8003c46:	f000 fb03 	bl	8004250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2150      	movs	r1, #80	; 0x50
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 fc12 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003c56:	e029      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	461a      	mov	r2, r3
 8003c66:	f000 fb5f 	bl	8004328 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2160      	movs	r1, #96	; 0x60
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fc02 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003c76:	e019      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f000 fae3 	bl	8004250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2140      	movs	r1, #64	; 0x40
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fbf2 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003c96:	e009      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f000 fbe9 	bl	800447a <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e000      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003caa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a40      	ldr	r2, [pc, #256]	; (8003ddc <TIM_Base_SetConfig+0x114>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d00f      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3d      	ldr	r2, [pc, #244]	; (8003de0 <TIM_Base_SetConfig+0x118>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00b      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3c      	ldr	r2, [pc, #240]	; (8003de4 <TIM_Base_SetConfig+0x11c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3b      	ldr	r2, [pc, #236]	; (8003de8 <TIM_Base_SetConfig+0x120>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0x40>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a3a      	ldr	r2, [pc, #232]	; (8003dec <TIM_Base_SetConfig+0x124>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d108      	bne.n	8003d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2f      	ldr	r2, [pc, #188]	; (8003ddc <TIM_Base_SetConfig+0x114>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d02b      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d027      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2c      	ldr	r2, [pc, #176]	; (8003de0 <TIM_Base_SetConfig+0x118>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d023      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <TIM_Base_SetConfig+0x11c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01f      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <TIM_Base_SetConfig+0x120>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01b      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a29      	ldr	r2, [pc, #164]	; (8003dec <TIM_Base_SetConfig+0x124>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d017      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <TIM_Base_SetConfig+0x128>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <TIM_Base_SetConfig+0x12c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <TIM_Base_SetConfig+0x130>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <TIM_Base_SetConfig+0x134>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <TIM_Base_SetConfig+0x138>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <TIM_Base_SetConfig+0x13c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <TIM_Base_SetConfig+0x114>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_Base_SetConfig+0xf8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <TIM_Base_SetConfig+0x124>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d103      	bne.n	8003dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	615a      	str	r2, [r3, #20]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40000c00 	.word	0x40000c00
 8003dec:	40010400 	.word	0x40010400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800
 8003dfc:	40001800 	.word	0x40001800
 8003e00:	40001c00 	.word	0x40001c00
 8003e04:	40002000 	.word	0x40002000

08003e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 0302 	bic.w	r3, r3, #2
 8003e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <TIM_OC1_SetConfig+0xd8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_OC1_SetConfig+0x64>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <TIM_OC1_SetConfig+0xdc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10c      	bne.n	8003e86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f023 0308 	bic.w	r3, r3, #8
 8003e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <TIM_OC1_SetConfig+0xd8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d003      	beq.n	8003e96 <TIM_OC1_SetConfig+0x8e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <TIM_OC1_SetConfig+0xdc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d111      	bne.n	8003eba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0210 	bic.w	r2, r3, #16
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0320 	bic.w	r3, r3, #32
 8003f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <TIM_OC2_SetConfig+0xe4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_OC2_SetConfig+0x68>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <TIM_OC2_SetConfig+0xe8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10d      	bne.n	8003f6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a17      	ldr	r2, [pc, #92]	; (8003fcc <TIM_OC2_SetConfig+0xe4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC2_SetConfig+0x94>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a16      	ldr	r2, [pc, #88]	; (8003fd0 <TIM_OC2_SetConfig+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d113      	bne.n	8003fa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40010400 	.word	0x40010400

08003fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800401c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <TIM_OC3_SetConfig+0xe0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_OC3_SetConfig+0x66>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a20      	ldr	r2, [pc, #128]	; (80040b8 <TIM_OC3_SetConfig+0xe4>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10d      	bne.n	8004056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <TIM_OC3_SetConfig+0xe0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_OC3_SetConfig+0x92>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <TIM_OC3_SetConfig+0xe4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d113      	bne.n	800408e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800406c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40010400 	.word	0x40010400

080040bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	031b      	lsls	r3, r3, #12
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a12      	ldr	r2, [pc, #72]	; (8004160 <TIM_OC4_SetConfig+0xa4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_OC4_SetConfig+0x68>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a11      	ldr	r2, [pc, #68]	; (8004164 <TIM_OC4_SetConfig+0xa8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d109      	bne.n	8004138 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800412a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	019b      	lsls	r3, r3, #6
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40010400 	.word	0x40010400

08004168 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a28      	ldr	r2, [pc, #160]	; (8004234 <TIM_TI1_SetConfig+0xcc>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01b      	beq.n	80041ce <TIM_TI1_SetConfig+0x66>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419c:	d017      	beq.n	80041ce <TIM_TI1_SetConfig+0x66>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <TIM_TI1_SetConfig+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d013      	beq.n	80041ce <TIM_TI1_SetConfig+0x66>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a24      	ldr	r2, [pc, #144]	; (800423c <TIM_TI1_SetConfig+0xd4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00f      	beq.n	80041ce <TIM_TI1_SetConfig+0x66>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <TIM_TI1_SetConfig+0xd8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00b      	beq.n	80041ce <TIM_TI1_SetConfig+0x66>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a22      	ldr	r2, [pc, #136]	; (8004244 <TIM_TI1_SetConfig+0xdc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d007      	beq.n	80041ce <TIM_TI1_SetConfig+0x66>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a21      	ldr	r2, [pc, #132]	; (8004248 <TIM_TI1_SetConfig+0xe0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d003      	beq.n	80041ce <TIM_TI1_SetConfig+0x66>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a20      	ldr	r2, [pc, #128]	; (800424c <TIM_TI1_SetConfig+0xe4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d101      	bne.n	80041d2 <TIM_TI1_SetConfig+0x6a>
 80041ce:	2301      	movs	r3, #1
 80041d0:	e000      	b.n	80041d4 <TIM_TI1_SetConfig+0x6c>
 80041d2:	2300      	movs	r3, #0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e003      	b.n	80041f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f023 030a 	bic.w	r3, r3, #10
 800420c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 030a 	and.w	r3, r3, #10
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000
 8004238:	40000400 	.word	0x40000400
 800423c:	40000800 	.word	0x40000800
 8004240:	40000c00 	.word	0x40000c00
 8004244:	40010400 	.word	0x40010400
 8004248:	40014000 	.word	0x40014000
 800424c:	40001800 	.word	0x40001800

08004250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800427a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f023 030a 	bic.w	r3, r3, #10
 800428c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 0210 	bic.w	r2, r3, #16
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004300:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 0210 	bic.w	r2, r3, #16
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004352:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	031b      	lsls	r3, r3, #12
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004364:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	621a      	str	r2, [r3, #32]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 0303 	bic.w	r3, r3, #3
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80043d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	621a      	str	r2, [r3, #32]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800443e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	031b      	lsls	r3, r3, #12
 8004444:	b29b      	uxth	r3, r3
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004452:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	031b      	lsls	r3, r3, #12
 8004458:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	f043 0307 	orr.w	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	021a      	lsls	r2, r3, #8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004504:	2302      	movs	r3, #2
 8004506:	e05a      	b.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d022      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d01d      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d018      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1b      	ldr	r2, [pc, #108]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00e      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d10c      	bne.n	80045ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40001800 	.word	0x40001800

080045e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004600:	2302      	movs	r3, #2
 8004602:	e03d      	b.n	8004680 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800468c:	b084      	sub	sp, #16
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	f107 001c 	add.w	r0, r7, #28
 800469a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d122      	bne.n	80046ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f001 fa26 	bl	8005b30 <USB_CoreReset>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	e01a      	b.n	8004720 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 fa1a 	bl	8005b30 <USB_CoreReset>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	639a      	str	r2, [r3, #56]	; 0x38
 8004712:	e005      	b.n	8004720 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10b      	bne.n	800473e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f043 0206 	orr.w	r2, r3, #6
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f043 0220 	orr.w	r2, r3, #32
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800474a:	b004      	add	sp, #16
 800474c:	4770      	bx	lr
	...

08004750 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d165      	bne.n	8004830 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4a41      	ldr	r2, [pc, #260]	; (800486c <USB_SetTurnaroundTime+0x11c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d906      	bls.n	800477a <USB_SetTurnaroundTime+0x2a>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a40      	ldr	r2, [pc, #256]	; (8004870 <USB_SetTurnaroundTime+0x120>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d802      	bhi.n	800477a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004774:	230f      	movs	r3, #15
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e062      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4a3c      	ldr	r2, [pc, #240]	; (8004870 <USB_SetTurnaroundTime+0x120>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d906      	bls.n	8004790 <USB_SetTurnaroundTime+0x40>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4a3b      	ldr	r2, [pc, #236]	; (8004874 <USB_SetTurnaroundTime+0x124>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d802      	bhi.n	8004790 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800478a:	230e      	movs	r3, #14
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e057      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a38      	ldr	r2, [pc, #224]	; (8004874 <USB_SetTurnaroundTime+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d906      	bls.n	80047a6 <USB_SetTurnaroundTime+0x56>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a37      	ldr	r2, [pc, #220]	; (8004878 <USB_SetTurnaroundTime+0x128>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d802      	bhi.n	80047a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047a0:	230d      	movs	r3, #13
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e04c      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a33      	ldr	r2, [pc, #204]	; (8004878 <USB_SetTurnaroundTime+0x128>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d906      	bls.n	80047bc <USB_SetTurnaroundTime+0x6c>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a32      	ldr	r2, [pc, #200]	; (800487c <USB_SetTurnaroundTime+0x12c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d802      	bhi.n	80047bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047b6:	230c      	movs	r3, #12
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e041      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a2f      	ldr	r2, [pc, #188]	; (800487c <USB_SetTurnaroundTime+0x12c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d906      	bls.n	80047d2 <USB_SetTurnaroundTime+0x82>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a2e      	ldr	r2, [pc, #184]	; (8004880 <USB_SetTurnaroundTime+0x130>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d802      	bhi.n	80047d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047cc:	230b      	movs	r3, #11
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e036      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <USB_SetTurnaroundTime+0x130>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d906      	bls.n	80047e8 <USB_SetTurnaroundTime+0x98>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a29      	ldr	r2, [pc, #164]	; (8004884 <USB_SetTurnaroundTime+0x134>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d802      	bhi.n	80047e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80047e2:	230a      	movs	r3, #10
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e02b      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a26      	ldr	r2, [pc, #152]	; (8004884 <USB_SetTurnaroundTime+0x134>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d906      	bls.n	80047fe <USB_SetTurnaroundTime+0xae>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a25      	ldr	r2, [pc, #148]	; (8004888 <USB_SetTurnaroundTime+0x138>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d802      	bhi.n	80047fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80047f8:	2309      	movs	r3, #9
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e020      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a21      	ldr	r2, [pc, #132]	; (8004888 <USB_SetTurnaroundTime+0x138>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d906      	bls.n	8004814 <USB_SetTurnaroundTime+0xc4>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4a20      	ldr	r2, [pc, #128]	; (800488c <USB_SetTurnaroundTime+0x13c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d802      	bhi.n	8004814 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800480e:	2308      	movs	r3, #8
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e015      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a1d      	ldr	r2, [pc, #116]	; (800488c <USB_SetTurnaroundTime+0x13c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d906      	bls.n	800482a <USB_SetTurnaroundTime+0xda>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <USB_SetTurnaroundTime+0x140>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d802      	bhi.n	800482a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004824:	2307      	movs	r3, #7
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e00a      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800482a:	2306      	movs	r3, #6
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e007      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004836:	2309      	movs	r3, #9
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e001      	b.n	8004840 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800483c:	2309      	movs	r3, #9
 800483e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	029b      	lsls	r3, r3, #10
 8004854:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	00d8acbf 	.word	0x00d8acbf
 8004870:	00e4e1bf 	.word	0x00e4e1bf
 8004874:	00f423ff 	.word	0x00f423ff
 8004878:	0106737f 	.word	0x0106737f
 800487c:	011a499f 	.word	0x011a499f
 8004880:	01312cff 	.word	0x01312cff
 8004884:	014ca43f 	.word	0x014ca43f
 8004888:	016e35ff 	.word	0x016e35ff
 800488c:	01a6ab1f 	.word	0x01a6ab1f
 8004890:	01e847ff 	.word	0x01e847ff

08004894 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d106      	bne.n	8004904 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	e00b      	b.n	800491c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	e001      	b.n	800491c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e003      	b.n	8004924 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800491c:	2032      	movs	r0, #50	; 0x32
 800491e:	f7fc fbff 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800492c:	b084      	sub	sp, #16
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800493a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e009      	b.n	8004960 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3340      	adds	r3, #64	; 0x40
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	2200      	movs	r2, #0
 8004958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3301      	adds	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b0e      	cmp	r3, #14
 8004964:	d9f2      	bls.n	800494c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11c      	bne.n	80049a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
 80049a4:	e00b      	b.n	80049be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049c4:	461a      	mov	r2, r3
 80049c6:	2300      	movs	r3, #0
 80049c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d0:	4619      	mov	r1, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d8:	461a      	mov	r2, r3
 80049da:	680b      	ldr	r3, [r1, #0]
 80049dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10c      	bne.n	80049fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ea:	2100      	movs	r1, #0
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f949 	bl	8004c84 <USB_SetDevSpeed>
 80049f2:	e008      	b.n	8004a06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049f4:	2101      	movs	r1, #1
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f944 	bl	8004c84 <USB_SetDevSpeed>
 80049fc:	e003      	b.n	8004a06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049fe:	2103      	movs	r1, #3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f93f 	bl	8004c84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a06:	2110      	movs	r1, #16
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8f3 	bl	8004bf4 <USB_FlushTxFifo>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f911 	bl	8004c40 <USB_FlushRxFifo>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	461a      	mov	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	e043      	b.n	8004ada <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a68:	d118      	bne.n	8004a9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e013      	b.n	8004aae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a92:	461a      	mov	r2, r3
 8004a94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e008      	b.n	8004aae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	461a      	mov	r2, r3
 8004ace:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d3b7      	bcc.n	8004a52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	e043      	b.n	8004b70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004afe:	d118      	bne.n	8004b32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b12:	461a      	mov	r2, r3
 8004b14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e013      	b.n	8004b44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	e008      	b.n	8004b44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	461a      	mov	r2, r3
 8004b40:	2300      	movs	r3, #0
 8004b42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	461a      	mov	r2, r3
 8004b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d3b7      	bcc.n	8004ae8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f043 0210 	orr.w	r2, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699a      	ldr	r2, [r3, #24]
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <USB_DevInit+0x2c4>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f043 0208 	orr.w	r2, r3, #8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d107      	bne.n	8004be0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bd8:	f043 0304 	orr.w	r3, r3, #4
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bec:	b004      	add	sp, #16
 8004bee:	4770      	bx	lr
 8004bf0:	803c3800 	.word	0x803c3800

08004bf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	019b      	lsls	r3, r3, #6
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <USB_FlushTxFifo+0x48>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e006      	b.n	8004c2e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d0f0      	beq.n	8004c0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	00030d40 	.word	0x00030d40

08004c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <USB_FlushRxFifo+0x40>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e006      	b.n	8004c72 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d0f0      	beq.n	8004c52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	00030d40 	.word	0x00030d40

08004c84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0306 	and.w	r3, r3, #6
 8004cce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
 8004cda:	e00a      	b.n	8004cf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d002      	beq.n	8004ce8 <USB_GetDevSpeed+0x32>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b06      	cmp	r3, #6
 8004ce6:	d102      	bne.n	8004cee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	75fb      	strb	r3, [r7, #23]
 8004cec:	e001      	b.n	8004cf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cee:	230f      	movs	r3, #15
 8004cf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d13a      	bne.n	8004d92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d155      	bne.n	8004e00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	78db      	ldrb	r3, [r3, #3]
 8004d6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	059b      	lsls	r3, r3, #22
 8004d76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e036      	b.n	8004e00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d11a      	bne.n	8004e00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	78db      	ldrb	r3, [r3, #3]
 8004de4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004de6:	430b      	orrs	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 815c 	bne.w	80050ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d132      	bne.n	8004ea0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	0cdb      	lsrs	r3, r3, #19
 8004e9a:	04db      	lsls	r3, r3, #19
 8004e9c:	6113      	str	r3, [r2, #16]
 8004e9e:	e074      	b.n	8004f8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	0cdb      	lsrs	r3, r3, #19
 8004ebc:	04db      	lsls	r3, r3, #19
 8004ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6959      	ldr	r1, [r3, #20]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	440b      	add	r3, r1
 8004efc:	1e59      	subs	r1, r3, #1
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f06:	04d9      	lsls	r1, r3, #19
 8004f08:	4b9d      	ldr	r3, [pc, #628]	; (8005180 <USB_EPStartXfer+0x370>)
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	0148      	lsls	r0, r1, #5
 8004f10:	69f9      	ldr	r1, [r7, #28]
 8004f12:	4401      	add	r1, r0
 8004f14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	69b9      	ldr	r1, [r7, #24]
 8004f34:	0148      	lsls	r0, r1, #5
 8004f36:	69f9      	ldr	r1, [r7, #28]
 8004f38:	4401      	add	r1, r0
 8004f3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	78db      	ldrb	r3, [r3, #3]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d11f      	bne.n	8004f8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d14b      	bne.n	8005028 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d128      	bne.n	8005006 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e00f      	b.n	8005006 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e12f      	b.n	8005288 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005046:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d015      	beq.n	800507c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8117 	beq.w	8005288 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	69f9      	ldr	r1, [r7, #28]
 8005072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005076:	4313      	orrs	r3, r2
 8005078:	634b      	str	r3, [r1, #52]	; 0x34
 800507a:	e105      	b.n	8005288 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e00f      	b.n	80050ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	68d9      	ldr	r1, [r3, #12]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	b298      	uxth	r0, r3
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4603      	mov	r3, r0
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa2b 	bl	800553e <USB_WritePacket>
 80050e8:	e0ce      	b.n	8005288 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005104:	0cdb      	lsrs	r3, r3, #19
 8005106:	04db      	lsls	r3, r3, #19
 8005108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005128:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800512c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d126      	bne.n	8005184 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514c:	69b9      	ldr	r1, [r7, #24]
 800514e:	0148      	lsls	r0, r1, #5
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	4401      	add	r1, r0
 8005154:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800517a:	6113      	str	r3, [r2, #16]
 800517c:	e036      	b.n	80051ec <USB_EPStartXfer+0x3dc>
 800517e:	bf00      	nop
 8005180:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4413      	add	r3, r2
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	8afb      	ldrh	r3, [r7, #22]
 80051aa:	04d9      	lsls	r1, r3, #19
 80051ac:	4b39      	ldr	r3, [pc, #228]	; (8005294 <USB_EPStartXfer+0x484>)
 80051ae:	400b      	ands	r3, r1
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	0148      	lsls	r0, r1, #5
 80051b4:	69f9      	ldr	r1, [r7, #28]
 80051b6:	4401      	add	r1, r0
 80051b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	8af9      	ldrh	r1, [r7, #22]
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051dc:	69b9      	ldr	r1, [r7, #24]
 80051de:	0148      	lsls	r0, r1, #5
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	4401      	add	r1, r0
 80051e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e8:	4313      	orrs	r3, r2
 80051ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d10d      	bne.n	800520e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	68d9      	ldr	r1, [r3, #12]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	460a      	mov	r2, r1
 800520c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d128      	bne.n	8005268 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d110      	bne.n	8005248 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e00f      	b.n	8005268 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005266:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005286:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	1ff80000 	.word	0x1ff80000

08005298 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f040 80cd 	bne.w	8005454 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d132      	bne.n	8005328 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	0cdb      	lsrs	r3, r3, #19
 8005322:	04db      	lsls	r3, r3, #19
 8005324:	6113      	str	r3, [r2, #16]
 8005326:	e04e      	b.n	80053c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005342:	0cdb      	lsrs	r3, r3, #19
 8005344:	04db      	lsls	r3, r3, #19
 8005346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005362:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005366:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800536a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d903      	bls.n	8005380 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800539e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	0148      	lsls	r0, r1, #5
 80053ba:	6979      	ldr	r1, [r7, #20]
 80053bc:	4401      	add	r1, r0
 80053be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d11e      	bne.n	800540a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e092      	b.n	8005530 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005428:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d07e      	beq.n	8005530 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544e:	4313      	orrs	r3, r2
 8005450:	634b      	str	r3, [r1, #52]	; 0x34
 8005452:	e06d      	b.n	8005530 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546e:	0cdb      	lsrs	r3, r3, #19
 8005470:	04db      	lsls	r3, r3, #19
 8005472:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005492:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005496:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	0148      	lsls	r0, r1, #5
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	4401      	add	r1, r0
 80054e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ea:	4313      	orrs	r3, r2
 80054ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10d      	bne.n	8005510 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	68d9      	ldr	r1, [r3, #12]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	460a      	mov	r2, r1
 800550e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800552e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800553e:	b480      	push	{r7}
 8005540:	b089      	sub	sp, #36	; 0x24
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	4611      	mov	r1, r2
 800554a:	461a      	mov	r2, r3
 800554c:	460b      	mov	r3, r1
 800554e:	71fb      	strb	r3, [r7, #7]
 8005550:	4613      	mov	r3, r2
 8005552:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800555c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11a      	bne.n	800559a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005564:	88bb      	ldrh	r3, [r7, #4]
 8005566:	3303      	adds	r3, #3
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e00f      	b.n	8005592 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	031a      	lsls	r2, r3, #12
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	461a      	mov	r2, r3
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3304      	adds	r3, #4
 800558a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	3301      	adds	r3, #1
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	429a      	cmp	r2, r3
 8005598:	d3eb      	bcc.n	8005572 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3724      	adds	r7, #36	; 0x24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	3303      	adds	r3, #3
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e00b      	b.n	80055e4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	3304      	adds	r3, #4
 80055dc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	3301      	adds	r3, #1
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d3ef      	bcc.n	80055cc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80055ec:	69fb      	ldr	r3, [r7, #28]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3724      	adds	r7, #36	; 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d12c      	bne.n	8005670 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	db12      	blt.n	800564e <USB_EPSetStall+0x54>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00f      	beq.n	800564e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005648:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800564c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e02b      	b.n	80056c8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	db12      	blt.n	80056a8 <USB_EPSetStall+0xae>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00f      	beq.n	80056a8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056a6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d128      	bne.n	8005744 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d003      	beq.n	8005722 <USB_EPClearStall+0x4c>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	78db      	ldrb	r3, [r3, #3]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d138      	bne.n	8005794 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	e027      	b.n	8005794 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005762:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	78db      	ldrb	r3, [r3, #3]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d003      	beq.n	8005774 <USB_EPClearStall+0x9e>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	78db      	ldrb	r3, [r3, #3]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d10f      	bne.n	8005794 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005792:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e016      	b.n	80057e2 <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	461a      	mov	r2, r3
 80057c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057c6:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	461a      	mov	r2, r3
 80057d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	3301      	adds	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b0e      	cmp	r3, #14
 80057e6:	d9e5      	bls.n	80057b4 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ee:	461a      	mov	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	461a      	mov	r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff fa17 	bl	8004c40 <USB_FlushRxFifo>
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <USB_StopDevice+0x7e>
  {
    return ret;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	e00b      	b.n	8005838 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8005820:	2110      	movs	r1, #16
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff f9e6 	bl	8004bf4 <USB_FlushTxFifo>
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <USB_StopDevice+0x94>
  {
    return ret;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	e000      	b.n	8005838 <USB_StopDevice+0x96>
  }

  return ret;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005862:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800587a:	4313      	orrs	r3, r2
 800587c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a6:	f023 0302 	bic.w	r3, r3, #2
 80058aa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80058ac:	2003      	movs	r0, #3
 80058ae:	f7fb fc37 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d6:	f043 0302 	orr.w	r3, r3, #2
 80058da:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80058dc:	2003      	movs	r0, #3
 80058de:	f7fb fc1f 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4013      	ands	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4013      	ands	r3, r2
 8005934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	0c1b      	lsrs	r3, r3, #16
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	b29b      	uxth	r3, r3
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4013      	ands	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059a8:	68bb      	ldr	r3, [r7, #8]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	fa22 f303 	lsr.w	r3, r2, r3
 80059e6:	01db      	lsls	r3, r3, #7
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4013      	ands	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a04:	68bb      	ldr	r3, [r7, #8]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a4c:	f023 0307 	bic.w	r3, r3, #7
 8005a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	333c      	adds	r3, #60	; 0x3c
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4a26      	ldr	r2, [pc, #152]	; (8005b2c <USB_EP0_OutStart+0xb8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d90a      	bls.n	8005aae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa8:	d101      	bne.n	8005aae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e037      	b.n	8005b1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005adc:	f043 0318 	orr.w	r3, r3, #24
 8005ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005af4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005af6:	7afb      	ldrb	r3, [r7, #11]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d10f      	bne.n	8005b1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	4f54300a 	.word	0x4f54300a

08005b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <USB_CoreReset+0x64>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d901      	bls.n	8005b4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e01b      	b.n	8005b86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	daf2      	bge.n	8005b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f043 0201 	orr.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a09      	ldr	r2, [pc, #36]	; (8005b94 <USB_CoreReset+0x64>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d901      	bls.n	8005b78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e006      	b.n	8005b86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d0f0      	beq.n	8005b66 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	00030d40 	.word	0x00030d40

08005b98 <__NVIC_SystemReset>:
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b9c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <__NVIC_SystemReset+0x20>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005ba8:	4903      	ldr	r1, [pc, #12]	; (8005bb8 <__NVIC_SystemReset+0x20>)
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <__NVIC_SystemReset+0x24>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60cb      	str	r3, [r1, #12]
 8005bb0:	f3bf 8f4f 	dsb	sy
    __NOP();
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <__NVIC_SystemReset+0x1c>
 8005bb8:	e000ed00 	.word	0xe000ed00
 8005bbc:	05fa0004 	.word	0x05fa0004

08005bc0 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005bcc:	f240 401c 	movw	r0, #1052	; 0x41c
 8005bd0:	f002 fbf0 	bl	80083b4 <malloc>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <USBD_DFU_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005be6:	2302      	movs	r3, #2
 8005be8:	e03f      	b.n	8005c6a <USBD_DFU_Init+0xaa>
  }

  pdev->pClassData = (void *)hdfu;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c00:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4798      	blx	r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <USBD_DFU_Init+0xa8>
  {
    return (uint8_t)USBD_FAIL;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e000      	b.n	8005c6a <USBD_DFU_Init+0xaa>
  }

  return (uint8_t)USBD_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e027      	b.n	8005cdc <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c92:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f002 fb79 	bl	80083c4 <free>
  pdev->pClassData = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cf4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d03f      	beq.n	8005d92 <USBD_DFU_Setup+0xae>
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	f040 80c3 	bne.w	8005e9e <USBD_DFU_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d830      	bhi.n	8005d82 <USBD_DFU_Setup+0x9e>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <USBD_DFU_Setup+0x44>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d45 	.word	0x08005d45
 8005d30:	08005d4f 	.word	0x08005d4f
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d61 	.word	0x08005d61
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	08005d71 	.word	0x08005d71
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa62 	bl	8006210 <DFU_Download>
      break;
 8005d4c:	e020      	b.n	8005d90 <USBD_DFU_Setup+0xac>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fac7 	bl	80062e4 <DFU_Upload>
      break;
 8005d56:	e01b      	b.n	8005d90 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fb9b 	bl	8006494 <DFU_GetStatus>
      break;
 8005d5e:	e017      	b.n	8005d90 <USBD_DFU_Setup+0xac>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fc49 	bl	80065f8 <DFU_ClearStatus>
      break;
 8005d66:	e013      	b.n	8005d90 <USBD_DFU_Setup+0xac>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fc95 	bl	8006698 <DFU_GetState>
      break;
 8005d6e:	e00f      	b.n	8005d90 <USBD_DFU_Setup+0xac>

    case DFU_ABORT:
      DFU_Abort(pdev);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fca5 	bl	80066c0 <DFU_Abort>
      break;
 8005d76:	e00b      	b.n	8005d90 <USBD_DFU_Setup+0xac>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f9e8 	bl	8006150 <DFU_Detach>
      break;
 8005d80:	e006      	b.n	8005d90 <USBD_DFU_Setup+0xac>

    default:
      USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fd7f 	bl	8007888 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	77fb      	strb	r3, [r7, #31]
      break;
 8005d8e:	bf00      	nop
    }
    break;
 8005d90:	e08c      	b.n	8005eac <USBD_DFU_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b0b      	cmp	r3, #11
 8005d98:	d878      	bhi.n	8005e8c <USBD_DFU_Setup+0x1a8>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <USBD_DFU_Setup+0xbc>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005dd1 	.word	0x08005dd1
 8005da4:	08005e9b 	.word	0x08005e9b
 8005da8:	08005e8d 	.word	0x08005e8d
 8005dac:	08005e8d 	.word	0x08005e8d
 8005db0:	08005e8d 	.word	0x08005e8d
 8005db4:	08005e8d 	.word	0x08005e8d
 8005db8:	08005df9 	.word	0x08005df9
 8005dbc:	08005e8d 	.word	0x08005e8d
 8005dc0:	08005e8d 	.word	0x08005e8d
 8005dc4:	08005e8d 	.word	0x08005e8d
 8005dc8:	08005e23 	.word	0x08005e23
 8005dcc:	08005e4d 	.word	0x08005e4d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d107      	bne.n	8005dea <USBD_DFU_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dda:	f107 030e 	add.w	r3, r7, #14
 8005dde:	2202      	movs	r2, #2
 8005de0:	4619      	mov	r1, r3
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 fdc1 	bl	800796a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005de8:	e058      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fd4b 	bl	8007888 <USBD_CtlError>
        ret = USBD_FAIL;
 8005df2:	2303      	movs	r3, #3
 8005df4:	77fb      	strb	r3, [r7, #31]
      break;
 8005df6:	e051      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	885b      	ldrh	r3, [r3, #2]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b21      	cmp	r3, #33	; 0x21
 8005e02:	d107      	bne.n	8005e14 <USBD_DFU_Setup+0x130>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8005e04:	4b2c      	ldr	r3, [pc, #176]	; (8005eb8 <USBD_DFU_Setup+0x1d4>)
 8005e06:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	88db      	ldrh	r3, [r3, #6]
 8005e0c:	2b09      	cmp	r3, #9
 8005e0e:	bf28      	it	cs
 8005e10:	2309      	movcs	r3, #9
 8005e12:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e14:	8afb      	ldrh	r3, [r7, #22]
 8005e16:	461a      	mov	r2, r3
 8005e18:	69b9      	ldr	r1, [r7, #24]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f001 fda5 	bl	800796a <USBD_CtlSendData>
      break;
 8005e20:	e03c      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d108      	bne.n	8005e3e <USBD_DFU_Setup+0x15a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)hdfu->alt_setting, 1U);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005e32:	2201      	movs	r2, #1
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 fd97 	bl	800796a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e3c:	e02e      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f001 fd21 	bl	8007888 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e46:	2303      	movs	r3, #3
 8005e48:	77fb      	strb	r3, [r7, #31]
      break;
 8005e4a:	e027      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	885b      	ldrh	r3, [r3, #2]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d113      	bne.n	8005e7e <USBD_DFU_Setup+0x19a>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d107      	bne.n	8005e70 <USBD_DFU_Setup+0x18c>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	885b      	ldrh	r3, [r3, #2]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e6e:	e015      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 fd08 	bl	8007888 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e7c:	e00e      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 fd01 	bl	8007888 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e86:	2303      	movs	r3, #3
 8005e88:	77fb      	strb	r3, [r7, #31]
      break;
 8005e8a:	e007      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 fcfa 	bl	8007888 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	77fb      	strb	r3, [r7, #31]
      break;
 8005e98:	e000      	b.n	8005e9c <USBD_DFU_Setup+0x1b8>
      break;
 8005e9a:	bf00      	nop
    }
    break;
 8005e9c:	e006      	b.n	8005eac <USBD_DFU_Setup+0x1c8>

  default:
    USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fcf1 	bl	8007888 <USBD_CtlError>
    ret = USBD_FAIL;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	77fb      	strb	r3, [r7, #31]
    break;
 8005eaa:	bf00      	nop
  }

  return (uint8_t)ret;
 8005eac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000005a 	.word	0x2000005a

08005ebc <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	221b      	movs	r2, #27
 8005ec8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8005eca:	4b03      	ldr	r3, [pc, #12]	; (8005ed8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	20000048 	.word	0x20000048

08005edc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f02:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f0a:	61bb      	str	r3, [r7, #24]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	f040 80bc 	bne.w	8006090 <USBD_DFU_EP0_TxReady+0x19c>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d17a      	bne.n	8006018 <USBD_DFU_EP0_TxReady+0x124>
    {
      if(hdfu->wlength == 1U)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	f000 8092 	beq.w	8006052 <USBD_DFU_EP0_TxReady+0x15e>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* nothink to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	d15c      	bne.n	8005ff2 <USBD_DFU_EP0_TxReady+0xfe>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b21      	cmp	r3, #33	; 0x21
 8005f3e:	d124      	bne.n	8005f8a <USBD_DFU_EP0_TxReady+0x96>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	461a      	mov	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	789b      	ldrb	r3, [r3, #2]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	441a      	add	r2, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	041b      	lsls	r3, r3, #16
 8005f6c:	441a      	add	r2, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	791b      	ldrb	r3, [r3, #4]
 8005f7e:	061b      	lsls	r3, r3, #24
 8005f80:	441a      	add	r2, r3
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8005f88:	e063      	b.n	8006052 <USBD_DFU_EP0_TxReady+0x15e>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b41      	cmp	r3, #65	; 0x41
 8005f90:	d15f      	bne.n	8006052 <USBD_DFU_EP0_TxReady+0x15e>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	461a      	mov	r2, r3
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	789b      	ldrb	r3, [r3, #2]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	441a      	add	r2, r3
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	78db      	ldrb	r3, [r3, #3]
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	441a      	add	r2, r3
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	441a      	add	r2, r3
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d031      	beq.n	8006052 <USBD_DFU_EP0_TxReady+0x15e>
          {
            return (uint8_t)USBD_FAIL;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e057      	b.n	80060a2 <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8006006:	2301      	movs	r3, #1
 8006008:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800600a:	f107 030c 	add.w	r3, r7, #12
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 fc39 	bl	8007888 <USBD_CtlError>
 8006016:	e01c      	b.n	8006052 <USBD_DFU_EP0_TxReady+0x15e>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800601e:	2b01      	cmp	r3, #1
 8006020:	d917      	bls.n	8006052 <USBD_DFU_EP0_TxReady+0x15e>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8006028:	4b20      	ldr	r3, [pc, #128]	; (80060ac <USBD_DFU_EP0_TxReady+0x1b8>)
 800602a:	4413      	add	r3, r2
 800602c:	029a      	lsls	r2, r3, #10
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006034:	4413      	add	r3, r2
 8006036:	617b      	str	r3, [r7, #20]

        /* Preform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	69f8      	ldr	r0, [r7, #28]
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8006046:	4798      	blx	r3
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <USBD_DFU_EP0_TxReady+0x15e>
        {
          return (uint8_t)USBD_FAIL;
 800604e:	2303      	movs	r3, #3
 8006050:	e027      	b.n	80060a2 <USBD_DFU_EP0_TxReady+0x1ae>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	2200      	movs	r2, #0
 8006056:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	2200      	movs	r2, #0
 800605e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2203      	movs	r2, #3
 8006066:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800608e:	e007      	b.n	80060a0 <USBD_DFU_EP0_TxReady+0x1ac>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006096:	2b07      	cmp	r3, #7
 8006098:	d102      	bne.n	80060a0 <USBD_DFU_EP0_TxReady+0x1ac>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fb5e 	bl	800675c <DFU_Leave>
  else
  {
    /* .. */
  }

  return (uint8_t)USBD_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	003ffffe 	.word	0x003ffffe

080060b0 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
	...

080060c8 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	220a      	movs	r2, #10
 80060d4:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80060d6:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	20000064 	.word	0x20000064

080060e8 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	460b      	mov	r3, r1
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060fc:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	2b06      	cmp	r3, #6
 8006102:	d808      	bhi.n	8006116 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	4905      	ldr	r1, [pc, #20]	; (8006120 <USBD_DFU_GetUsrStringDesc+0x38>)
 800610c:	4618      	mov	r0, r3
 800610e:	f001 fbcc 	bl	80078aa <USBD_GetString>
    return USBD_StrDesc;
 8006112:	4b03      	ldr	r3, [pc, #12]	; (8006120 <USBD_DFU_GetUsrStringDesc+0x38>)
 8006114:	e000      	b.n	8006118 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8006116:	2300      	movs	r3, #0
  }
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000160 	.word	0x20000160

08006124 <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006134:	2303      	movs	r3, #3
 8006136:	e004      	b.n	8006142 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006160:	60fb      	str	r3, [r7, #12]

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006168:	2b02      	cmp	r3, #2
 800616a:	d013      	beq.n	8006194 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006172:	2b03      	cmp	r3, #3
 8006174:	d00e      	beq.n	8006194 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800617c:	2b05      	cmp	r3, #5
 800617e:	d009      	beq.n	8006194 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006186:	2b06      	cmp	r3, #6
 8006188:	d004      	beq.n	8006194 <DFU_Detach+0x44>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006190:	2b09      	cmp	r3, #9
 8006192:	d125      	bne.n	80061e0 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <DFU_Detach+0xbc>)
 80061e2:	7d5b      	ldrb	r3, [r3, #21]
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d006      	beq.n	80061fa <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fb62 	bl	80068b6 <USBD_Stop>
    (void)USBD_Start(pdev);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fb53 	bl	800689e <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 80061f8:	e004      	b.n	8006204 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	885b      	ldrh	r3, [r3, #2]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fa ff8e 	bl	8001120 <HAL_Delay>
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000048 	.word	0x20000048

08006210 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006220:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	88db      	ldrh	r3, [r3, #6]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d02d      	beq.n	8006286 <DFU_Download+0x76>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006230:	2b02      	cmp	r3, #2
 8006232:	d004      	beq.n	800623e <DFU_Download+0x2e>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800623a:	2b05      	cmp	r3, #5
 800623c:	d11e      	bne.n	800627c <DFU_Download+0x6c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	885b      	ldrh	r3, [r3, #2]
 8006242:	461a      	mov	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	88db      	ldrh	r3, [r3, #6]
 800624e:	461a      	mov	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2203      	movs	r2, #3
 800625a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800626a:	68f9      	ldr	r1, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006272:	461a      	mov	r2, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fba4 	bl	80079c2 <USBD_CtlPrepareRx>
 800627a:	e02e      	b.n	80062da <DFU_Download+0xca>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fb02 	bl	8007888 <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8006284:	e029      	b.n	80062da <DFU_Download+0xca>
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800628c:	2b05      	cmp	r3, #5
 800628e:	d004      	beq.n	800629a <DFU_Download+0x8a>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006296:	2b02      	cmp	r3, #2
 8006298:	d11a      	bne.n	80062d0 <DFU_Download+0xc0>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2206      	movs	r2, #6
 80062a6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80062ce:	e004      	b.n	80062da <DFU_Download+0xca>
      USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fad8 	bl	8007888 <USBD_CtlError>
}
 80062d8:	e7ff      	b.n	80062da <DFU_Download+0xca>
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062f4:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062fc:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  /* Data setup request */
  if (req->wLength > 0U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	88db      	ldrh	r3, [r3, #6]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 80a9 	beq.w	800645a <DFU_Upload+0x176>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800630e:	2b02      	cmp	r3, #2
 8006310:	d005      	beq.n	800631e <DFU_Upload+0x3a>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006318:	2b09      	cmp	r3, #9
 800631a:	f040 8091 	bne.w	8006440 <DFU_Upload+0x15c>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	885b      	ldrh	r3, [r3, #2]
 8006322:	461a      	mov	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	88db      	ldrh	r3, [r3, #6]
 800632e:	461a      	mov	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800633c:	2b00      	cmp	r3, #0
 800633e:	d12c      	bne.n	800639a <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006346:	2b03      	cmp	r3, #3
 8006348:	d901      	bls.n	800634e <DFU_Upload+0x6a>
 800634a:	2202      	movs	r2, #2
 800634c:	e000      	b.n	8006350 <DFU_Upload+0x6c>
 800634e:	2209      	movs	r2, #9
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2221      	movs	r2, #33	; 0x21
 8006384:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2241      	movs	r2, #65	; 0x41
 800638a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2203      	movs	r2, #3
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fae9 	bl	800796a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006398:	e076      	b.n	8006488 <DFU_Upload+0x1a4>
      }
      else if (hdfu->wblock_num > 1U)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d932      	bls.n	800640a <DFU_Upload+0x126>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2209      	movs	r2, #9
 80063a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80063d6:	4b2e      	ldr	r3, [pc, #184]	; (8006490 <DFU_Upload+0x1ac>)
 80063d8:	4413      	add	r3, r2
 80063da:	029a      	lsls	r2, r3, #10
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80063e2:	4413      	add	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	6979      	ldr	r1, [r7, #20]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80063f4:	4798      	blx	r3
 80063f6:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063fe:	461a      	mov	r2, r3
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fab1 	bl	800796a <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006408:	e03e      	b.n	8006488 <DFU_Upload+0x1a4>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	220f      	movs	r2, #15
 800640e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 8006436:	6839      	ldr	r1, [r7, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f001 fa25 	bl	8007888 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800643e:	e023      	b.n	8006488 <DFU_Upload+0x1a4>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fa18 	bl	8007888 <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 8006458:	e016      	b.n	8006488 <DFU_Upload+0x1a4>
    hdfu->dev_state = DFU_STATE_IDLE;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 8006486:	e7ff      	b.n	8006488 <DFU_Upload+0x1a4>
 8006488:	bf00      	nop
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	003ffffe 	.word	0x003ffffe

08006494 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064a2:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064aa:	60bb      	str	r3, [r7, #8]

  switch (hdfu->dev_state)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d002      	beq.n	80064bc <DFU_GetStatus+0x28>
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d051      	beq.n	800655e <DFU_GetStatus+0xca>
      }
    }
    break;

  default:
    break;
 80064ba:	e08e      	b.n	80065da <DFU_GetStatus+0x146>
    if (hdfu->wlength != 0U)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d034      	beq.n	8006530 <DFU_GetStatus+0x9c>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2204      	movs	r2, #4
 80064ca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10e      	bne.n	800651a <DFU_GetStatus+0x86>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b41      	cmp	r3, #65	; 0x41
 8006502:	d10a      	bne.n	800651a <DFU_GetStatus+0x86>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8006514:	2100      	movs	r1, #0
 8006516:	4798      	blx	r3
    break;
 8006518:	e05f      	b.n	80065da <DFU_GetStatus+0x146>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800652a:	2101      	movs	r1, #1
 800652c:	4798      	blx	r3
    break;
 800652e:	e054      	b.n	80065da <DFU_GetStatus+0x146>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2205      	movs	r2, #5
 8006534:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800655c:	e03d      	b.n	80065da <DFU_GetStatus+0x146>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8006564:	2b01      	cmp	r3, #1
 8006566:	d116      	bne.n	8006596 <DFU_GetStatus+0x102>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2207      	movs	r2, #7
 800656c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 8006594:	e020      	b.n	80065d8 <DFU_GetStatus+0x144>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11b      	bne.n	80065d8 <DFU_GetStatus+0x144>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80065a0:	4b14      	ldr	r3, [pc, #80]	; (80065f4 <DFU_GetStatus+0x160>)
 80065a2:	7d1b      	ldrb	r3, [r3, #20]
 80065a4:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <DFU_GetStatus+0x144>
        hdfu->dev_state = DFU_STATE_IDLE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 80065d8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80065e0:	2206      	movs	r2, #6
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 f9c0 	bl	800796a <USBD_CtlSendData>
}
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000048 	.word	0x20000048

080065f8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006606:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800660e:	2b0a      	cmp	r3, #10
 8006610:	d11e      	bne.n	8006650 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2202      	movs	r2, #2
 8006616:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /*bStatus*/
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
    hdfu->dev_status[5] = 0U; /*iString*/
  }
}
 800664e:	e01d      	b.n	800668c <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	220a      	movs	r2, #10
 8006654:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /*bStatus*/
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	220e      	movs	r2, #14
 800665c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /*bState*/
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 800668c:	bf00      	nop
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80066ae:	2201      	movs	r2, #1
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f959 	bl	800796a <USBD_CtlSendData>
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ce:	60fb      	str	r3, [r7, #12]


  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d013      	beq.n	8006702 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d00e      	beq.n	8006702 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	d009      	beq.n	8006702 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	d004      	beq.n	8006702 <DFU_Abort+0x42>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80066fe:	2b09      	cmp	r3, #9
 8006700:	d125      	bne.n	800674e <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2202      	movs	r2, #2
 8006706:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800676a:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <DFU_Leave+0x90>)
 8006776:	7d1b      	ldrb	r3, [r3, #20]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2206      	movs	r2, #6
 8006784:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 80067ac:	e01a      	b.n	80067e4 <DFU_Leave+0x88>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2208      	movs	r2, #8
 80067b2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f86b 	bl	80068b6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80067e0:	f7ff f9da 	bl	8005b98 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000048 	.word	0x20000048

080067f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006804:	2303      	movs	r3, #3
 8006806:	e025      	b.n	8006854 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	79fa      	ldrb	r2, [r7, #7]
 8006846:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f001 fbe9 	bl	8008020 <USBD_LL_Init>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006852:	7dfb      	ldrb	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006870:	2303      	movs	r3, #3
 8006872:	e010      	b.n	8006896 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	f107 020e 	add.w	r2, r7, #14
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	4602      	mov	r2, r0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 fc06 	bl	80080b8 <USBD_LL_Start>
 80068ac:	4603      	mov	r3, r0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <USBD_Stop+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6852      	ldr	r2, [r2, #4]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	4611      	mov	r1, r2
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
  }

  if (pdev->pConfDesc != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <USBD_Stop+0x38>
  {
    pdev->pConfDesc = NULL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Stop the low level driver */
  ret = USBD_LL_Stop(pdev);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 fbfd 	bl	80080ee <USBD_LL_Stop>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]

  return ret;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006924:	2303      	movs	r3, #3
 8006926:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	78fa      	ldrb	r2, [r7, #3]
 800693c:	4611      	mov	r1, r2
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	4798      	blx	r3
 8006942:	4603      	mov	r3, r0
 8006944:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d007      	beq.n	8006976 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	4611      	mov	r1, r2
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
  }

  return USBD_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3708      	adds	r7, #8
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 ff3e 	bl	8007814 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d00e      	beq.n	80069da <USBD_LL_SetupStage+0x5a>
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d302      	bcc.n	80069c6 <USBD_LL_SetupStage+0x46>
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d014      	beq.n	80069ee <USBD_LL_SetupStage+0x6e>
 80069c4:	e01d      	b.n	8006a02 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fa18 	bl	8006e04 <USBD_StdDevReq>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
      break;
 80069d8:	e020      	b.n	8006a1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa7c 	bl	8006ee0 <USBD_StdItfReq>
 80069e8:	4603      	mov	r3, r0
 80069ea:	73fb      	strb	r3, [r7, #15]
      break;
 80069ec:	e016      	b.n	8006a1c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fab8 	bl	8006f6c <USBD_StdEPReq>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006a00:	e00c      	b.n	8006a1c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fbad 	bl	8008170 <USBD_LL_StallEP>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1a:	bf00      	nop
  }

  return ret;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b086      	sub	sp, #24
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	460b      	mov	r3, r1
 8006a30:	607a      	str	r2, [r7, #4]
 8006a32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d137      	bne.n	8006aaa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d14a      	bne.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d913      	bls.n	8006a80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	bf28      	it	cs
 8006a72:	4613      	movcs	r3, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 ffbf 	bl	80079fc <USBD_CtlContinueRx>
 8006a7e:	e030      	b.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d105      	bne.n	8006aa2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 ffbb 	bl	8007a1e <USBD_CtlSendStatus>
 8006aa8:	e01b      	b.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d013      	beq.n	8006ade <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d10e      	bne.n	8006ade <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	7afa      	ldrb	r2, [r7, #11]
 8006aca:	4611      	mov	r1, r2
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	4798      	blx	r3
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	e002      	b.n	8006ae4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e000      	b.n	8006ae4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	460b      	mov	r3, r1
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d16a      	bne.n	8006bd6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3314      	adds	r3, #20
 8006b04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d155      	bne.n	8006bbc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d914      	bls.n	8006b46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 ff34 	bl	80079a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f001 fbc0 	bl	80082c4 <USBD_LL_PrepareReceive>
 8006b44:	e03a      	b.n	8006bbc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d11c      	bne.n	8006b8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d316      	bcc.n	8006b8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d20f      	bcs.n	8006b8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	2100      	movs	r1, #0
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 ff15 	bl	80079a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b7e:	2300      	movs	r3, #0
 8006b80:	2200      	movs	r2, #0
 8006b82:	2100      	movs	r1, #0
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f001 fb9d 	bl	80082c4 <USBD_LL_PrepareReceive>
 8006b8a:	e017      	b.n	8006bbc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d105      	bne.n	8006bae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bae:	2180      	movs	r1, #128	; 0x80
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f001 fadd 	bl	8008170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 ff44 	bl	8007a44 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d123      	bne.n	8006c0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fe9b 	bl	8006902 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006bd4:	e01b      	b.n	8006c0e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d10e      	bne.n	8006c0a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	7afa      	ldrb	r2, [r7, #11]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	4798      	blx	r3
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006c00:	7dfb      	ldrb	r3, [r7, #23]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	e002      	b.n	8006c10 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e000      	b.n	8006c10 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6852      	ldr	r2, [r2, #4]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	4611      	mov	r1, r2
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c5c:	2340      	movs	r3, #64	; 0x40
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fa5e 	bl	8008124 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fa50 	bl	8008124 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2240      	movs	r2, #64	; 0x40
 8006c8e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	78fa      	ldrb	r2, [r7, #3]
 8006caa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d105      	bne.n	8006d02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d10b      	bne.n	8006d3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6852      	ldr	r2, [r2, #4]
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	4611      	mov	r1, r2
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
  }

  return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006de4:	8a3b      	ldrh	r3, [r7, #16]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	b21a      	sxth	r2, r3
 8006dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b21b      	sxth	r3, r3
 8006df2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006df4:	89fb      	ldrh	r3, [r7, #14]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d004      	beq.n	8006e28 <USBD_StdDevReq+0x24>
 8006e1e:	2b40      	cmp	r3, #64	; 0x40
 8006e20:	d002      	beq.n	8006e28 <USBD_StdDevReq+0x24>
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <USBD_StdDevReq+0x38>
 8006e26:	e050      	b.n	8006eca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	4798      	blx	r3
 8006e36:	4603      	mov	r3, r0
 8006e38:	73fb      	strb	r3, [r7, #15]
    break;
 8006e3a:	e04b      	b.n	8006ed4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	785b      	ldrb	r3, [r3, #1]
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	d83c      	bhi.n	8006ebe <USBD_StdDevReq+0xba>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <USBD_StdDevReq+0x48>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006eb5 	.word	0x08006eb5
 8006e54:	08006ebf 	.word	0x08006ebf
 8006e58:	08006eab 	.word	0x08006eab
 8006e5c:	08006ebf 	.word	0x08006ebf
 8006e60:	08006e7f 	.word	0x08006e7f
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006ebf 	.word	0x08006ebf
 8006e6c:	08006e97 	.word	0x08006e97
 8006e70:	08006e89 	.word	0x08006e89
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9ce 	bl	8007218 <USBD_GetDescriptor>
      break;
 8006e7c:	e024      	b.n	8006ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb45 	bl	8007510 <USBD_SetAddress>
      break;
 8006e86:	e01f      	b.n	8006ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb82 	bl	8007594 <USBD_SetConfig>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]
      break;
 8006e94:	e018      	b.n	8006ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fc1f 	bl	80076dc <USBD_GetConfig>
      break;
 8006e9e:	e013      	b.n	8006ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fc4e 	bl	8007744 <USBD_GetStatus>
      break;
 8006ea8:	e00e      	b.n	8006ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc7c 	bl	80077aa <USBD_SetFeature>
      break;
 8006eb2:	e009      	b.n	8006ec8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc8b 	bl	80077d2 <USBD_ClrFeature>
      break;
 8006ebc:	e004      	b.n	8006ec8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fce1 	bl	8007888 <USBD_CtlError>
      break;
 8006ec6:	bf00      	nop
    }
    break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fcdb 	bl	8007888 <USBD_CtlError>
    break;
 8006ed2:	bf00      	nop
  }

  return ret;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d003      	beq.n	8006f02 <USBD_StdItfReq+0x22>
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d001      	beq.n	8006f02 <USBD_StdItfReq+0x22>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d12a      	bne.n	8006f58 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d81d      	bhi.n	8006f4a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	889b      	ldrh	r3, [r3, #4]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d813      	bhi.n	8006f40 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	4798      	blx	r3
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	88db      	ldrh	r3, [r3, #6]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d110      	bne.n	8006f54 <USBD_StdItfReq+0x74>
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10d      	bne.n	8006f54 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fd70 	bl	8007a1e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006f3e:	e009      	b.n	8006f54 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fca0 	bl	8007888 <USBD_CtlError>
      break;
 8006f48:	e004      	b.n	8006f54 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fc9b 	bl	8007888 <USBD_CtlError>
      break;
 8006f52:	e000      	b.n	8006f56 <USBD_StdItfReq+0x76>
      break;
 8006f54:	bf00      	nop
    }
    break;
 8006f56:	e004      	b.n	8006f62 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fc94 	bl	8007888 <USBD_CtlError>
    break;
 8006f60:	bf00      	nop
  }

  return ret;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	889b      	ldrh	r3, [r3, #4]
 8006f7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d004      	beq.n	8006f96 <USBD_StdEPReq+0x2a>
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d002      	beq.n	8006f96 <USBD_StdEPReq+0x2a>
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <USBD_StdEPReq+0x3e>
 8006f94:	e135      	b.n	8007202 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	4798      	blx	r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa8:	e130      	b.n	800720c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d03e      	beq.n	8007030 <USBD_StdEPReq+0xc4>
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d002      	beq.n	8006fbc <USBD_StdEPReq+0x50>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d077      	beq.n	80070aa <USBD_StdEPReq+0x13e>
 8006fba:	e11c      	b.n	80071f6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d002      	beq.n	8006fcc <USBD_StdEPReq+0x60>
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d015      	beq.n	8006ff6 <USBD_StdEPReq+0x8a>
 8006fca:	e02b      	b.n	8007024 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00c      	beq.n	8006fec <USBD_StdEPReq+0x80>
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b80      	cmp	r3, #128	; 0x80
 8006fd6:	d009      	beq.n	8006fec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f8c7 	bl	8008170 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fe2:	2180      	movs	r1, #128	; 0x80
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 f8c3 	bl	8008170 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006fea:	e020      	b.n	800702e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc4a 	bl	8007888 <USBD_CtlError>
        break;
 8006ff4:	e01b      	b.n	800702e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	885b      	ldrh	r3, [r3, #2]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10e      	bne.n	800701c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00b      	beq.n	800701c <USBD_StdEPReq+0xb0>
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d008      	beq.n	800701c <USBD_StdEPReq+0xb0>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	88db      	ldrh	r3, [r3, #6]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007012:	7bbb      	ldrb	r3, [r7, #14]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f8aa 	bl	8008170 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fcfe 	bl	8007a1e <USBD_CtlSendStatus>

        break;
 8007022:	e004      	b.n	800702e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fc2e 	bl	8007888 <USBD_CtlError>
        break;
 800702c:	bf00      	nop
      }
      break;
 800702e:	e0e7      	b.n	8007200 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007036:	2b02      	cmp	r3, #2
 8007038:	d002      	beq.n	8007040 <USBD_StdEPReq+0xd4>
 800703a:	2b03      	cmp	r3, #3
 800703c:	d015      	beq.n	800706a <USBD_StdEPReq+0xfe>
 800703e:	e02d      	b.n	800709c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <USBD_StdEPReq+0xf4>
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	2b80      	cmp	r3, #128	; 0x80
 800704a:	d009      	beq.n	8007060 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 f88d 	bl	8008170 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007056:	2180      	movs	r1, #128	; 0x80
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 f889 	bl	8008170 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800705e:	e023      	b.n	80070a8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fc10 	bl	8007888 <USBD_CtlError>
        break;
 8007068:	e01e      	b.n	80070a8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	885b      	ldrh	r3, [r3, #2]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d119      	bne.n	80070a6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f894 	bl	80081ae <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fcc9 	bl	8007a1e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
        }
        break;
 800709a:	e004      	b.n	80070a6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fbf2 	bl	8007888 <USBD_CtlError>
        break;
 80070a4:	e000      	b.n	80070a8 <USBD_StdEPReq+0x13c>
        break;
 80070a6:	bf00      	nop
      }
      break;
 80070a8:	e0aa      	b.n	8007200 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d002      	beq.n	80070ba <USBD_StdEPReq+0x14e>
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d032      	beq.n	800711e <USBD_StdEPReq+0x1b2>
 80070b8:	e097      	b.n	80071ea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <USBD_StdEPReq+0x164>
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b80      	cmp	r3, #128	; 0x80
 80070c4:	d004      	beq.n	80070d0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fbdd 	bl	8007888 <USBD_CtlError>
          break;
 80070ce:	e091      	b.n	80071f4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da0b      	bge.n	80070f0 <USBD_StdEPReq+0x184>
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	3310      	adds	r3, #16
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	3304      	adds	r3, #4
 80070ee:	e00b      	b.n	8007108 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	3304      	adds	r3, #4
 8007108:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2202      	movs	r2, #2
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fc27 	bl	800796a <USBD_CtlSendData>
        break;
 800711c:	e06a      	b.n	80071f4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800711e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007122:	2b00      	cmp	r3, #0
 8007124:	da11      	bge.n	800714a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	f003 020f 	and.w	r2, r3, #15
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	3324      	adds	r3, #36	; 0x24
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d117      	bne.n	8007170 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fba0 	bl	8007888 <USBD_CtlError>
            break;
 8007148:	e054      	b.n	80071f4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fb8d 	bl	8007888 <USBD_CtlError>
            break;
 800716e:	e041      	b.n	80071f4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da0b      	bge.n	8007190 <USBD_StdEPReq+0x224>
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	3310      	adds	r3, #16
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	3304      	adds	r3, #4
 800718e:	e00b      	b.n	80071a8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	3304      	adds	r3, #4
 80071a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <USBD_StdEPReq+0x24a>
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d103      	bne.n	80071be <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	e00e      	b.n	80071dc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 f812 	bl	80081ec <USBD_LL_IsStallEP>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e002      	b.n	80071dc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2202      	movs	r2, #2
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fbc1 	bl	800796a <USBD_CtlSendData>
          break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb4b 	bl	8007888 <USBD_CtlError>
        break;
 80071f2:	bf00      	nop
      }
      break;
 80071f4:	e004      	b.n	8007200 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fb45 	bl	8007888 <USBD_CtlError>
      break;
 80071fe:	bf00      	nop
    }
    break;
 8007200:	e004      	b.n	800720c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fb3f 	bl	8007888 <USBD_CtlError>
    break;
 800720a:	bf00      	nop
  }

  return ret;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	885b      	ldrh	r3, [r3, #2]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	2b06      	cmp	r3, #6
 800723a:	f200 813b 	bhi.w	80074b4 <USBD_GetDescriptor+0x29c>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <USBD_GetDescriptor+0x2c>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007261 	.word	0x08007261
 8007248:	08007279 	.word	0x08007279
 800724c:	080072b9 	.word	0x080072b9
 8007250:	080074b5 	.word	0x080074b5
 8007254:	080074b5 	.word	0x080074b5
 8007258:	08007455 	.word	0x08007455
 800725c:	08007481 	.word	0x08007481
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7c12      	ldrb	r2, [r2, #16]
 800726c:	f107 0108 	add.w	r1, r7, #8
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
    break;
 8007276:	e125      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7c1b      	ldrb	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10d      	bne.n	800729c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	f107 0208 	add.w	r2, r7, #8
 800728c:	4610      	mov	r0, r2
 800728e:	4798      	blx	r3
 8007290:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	2202      	movs	r2, #2
 8007298:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800729a:	e113      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	f107 0208 	add.w	r2, r7, #8
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
 80072ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	2202      	movs	r2, #2
 80072b4:	701a      	strb	r2, [r3, #0]
    break;
 80072b6:	e105      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	885b      	ldrh	r3, [r3, #2]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b05      	cmp	r3, #5
 80072c0:	f200 80ac 	bhi.w	800741c <USBD_GetDescriptor+0x204>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <USBD_GetDescriptor+0xb4>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072e5 	.word	0x080072e5
 80072d0:	08007319 	.word	0x08007319
 80072d4:	0800734d 	.word	0x0800734d
 80072d8:	08007381 	.word	0x08007381
 80072dc:	080073b5 	.word	0x080073b5
 80072e0:	080073e9 	.word	0x080073e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c12      	ldrb	r2, [r2, #16]
 80072fc:	f107 0108 	add.w	r1, r7, #8
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007306:	e0a4      	b.n	8007452 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fabc 	bl	8007888 <USBD_CtlError>
        err++;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	3301      	adds	r3, #1
 8007314:	72fb      	strb	r3, [r7, #11]
      break;
 8007316:	e09c      	b.n	8007452 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7c12      	ldrb	r2, [r2, #16]
 8007330:	f107 0108 	add.w	r1, r7, #8
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800733a:	e08a      	b.n	8007452 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 faa2 	bl	8007888 <USBD_CtlError>
        err++;
 8007344:	7afb      	ldrb	r3, [r7, #11]
 8007346:	3301      	adds	r3, #1
 8007348:	72fb      	strb	r3, [r7, #11]
      break;
 800734a:	e082      	b.n	8007452 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	7c12      	ldrb	r2, [r2, #16]
 8007364:	f107 0108 	add.w	r1, r7, #8
 8007368:	4610      	mov	r0, r2
 800736a:	4798      	blx	r3
 800736c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800736e:	e070      	b.n	8007452 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa88 	bl	8007888 <USBD_CtlError>
        err++;
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	3301      	adds	r3, #1
 800737c:	72fb      	strb	r3, [r7, #11]
      break;
 800737e:	e068      	b.n	8007452 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	7c12      	ldrb	r2, [r2, #16]
 8007398:	f107 0108 	add.w	r1, r7, #8
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
 80073a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073a2:	e056      	b.n	8007452 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa6e 	bl	8007888 <USBD_CtlError>
        err++;
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	3301      	adds	r3, #1
 80073b0:	72fb      	strb	r3, [r7, #11]
      break;
 80073b2:	e04e      	b.n	8007452 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	7c12      	ldrb	r2, [r2, #16]
 80073cc:	f107 0108 	add.w	r1, r7, #8
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073d6:	e03c      	b.n	8007452 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa54 	bl	8007888 <USBD_CtlError>
        err++;
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	3301      	adds	r3, #1
 80073e4:	72fb      	strb	r3, [r7, #11]
      break;
 80073e6:	e034      	b.n	8007452 <USBD_GetDescriptor+0x23a>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800740a:	e022      	b.n	8007452 <USBD_GetDescriptor+0x23a>
        USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa3a 	bl	8007888 <USBD_CtlError>
        err++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
      break;
 800741a:	e01a      	b.n	8007452 <USBD_GetDescriptor+0x23a>

    default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
      if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00c      	beq.n	8007442 <USBD_GetDescriptor+0x22a>
      {
        pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	8852      	ldrh	r2, [r2, #2]
 8007434:	b2d1      	uxtb	r1, r2
 8007436:	f107 0208 	add.w	r2, r7, #8
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
 800743e:	60f8      	str	r0, [r7, #12]
      }
#else
      USBD_CtlError(pdev, req);
      err++;
#endif
      break;
 8007440:	e006      	b.n	8007450 <USBD_GetDescriptor+0x238>
        USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa1f 	bl	8007888 <USBD_CtlError>
        err++;
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	3301      	adds	r3, #1
 800744e:	72fb      	strb	r3, [r7, #11]
      break;
 8007450:	bf00      	nop
    }
    break;
 8007452:	e037      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7c1b      	ldrb	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d109      	bne.n	8007470 <USBD_GetDescriptor+0x258>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007464:	f107 0208 	add.w	r2, r7, #8
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
 800746c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800746e:	e029      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fa08 	bl	8007888 <USBD_CtlError>
      err++;
 8007478:	7afb      	ldrb	r3, [r7, #11]
 800747a:	3301      	adds	r3, #1
 800747c:	72fb      	strb	r3, [r7, #11]
    break;
 800747e:	e021      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7c1b      	ldrb	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10d      	bne.n	80074a4 <USBD_GetDescriptor+0x28c>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	f107 0208 	add.w	r2, r7, #8
 8007494:	4610      	mov	r0, r2
 8007496:	4798      	blx	r3
 8007498:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	2207      	movs	r2, #7
 80074a0:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80074a2:	e00f      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>
      USBD_CtlError(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9ee 	bl	8007888 <USBD_CtlError>
      err++;
 80074ac:	7afb      	ldrb	r3, [r7, #11]
 80074ae:	3301      	adds	r3, #1
 80074b0:	72fb      	strb	r3, [r7, #11]
    break;
 80074b2:	e007      	b.n	80074c4 <USBD_GetDescriptor+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9e6 	bl	8007888 <USBD_CtlError>
    err++;
 80074bc:	7afb      	ldrb	r3, [r7, #11]
 80074be:	3301      	adds	r3, #1
 80074c0:	72fb      	strb	r3, [r7, #11]
    break;
 80074c2:	bf00      	nop
  }

  if (err != 0U)
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d11e      	bne.n	8007508 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	88db      	ldrh	r3, [r3, #6]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d016      	beq.n	8007500 <USBD_GetDescriptor+0x2e8>
    {
      if (len != 0U)
 80074d2:	893b      	ldrh	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <USBD_GetDescriptor+0x2de>
      {
        len = MIN(len, req->wLength);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	88da      	ldrh	r2, [r3, #6]
 80074dc:	893b      	ldrh	r3, [r7, #8]
 80074de:	4293      	cmp	r3, r2
 80074e0:	bf28      	it	cs
 80074e2:	4613      	movcs	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80074e8:	893b      	ldrh	r3, [r7, #8]
 80074ea:	461a      	mov	r2, r3
 80074ec:	68f9      	ldr	r1, [r7, #12]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa3b 	bl	800796a <USBD_CtlSendData>
 80074f4:	e009      	b.n	800750a <USBD_GetDescriptor+0x2f2>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9c5 	bl	8007888 <USBD_CtlError>
 80074fe:	e004      	b.n	800750a <USBD_GetDescriptor+0x2f2>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa8c 	bl	8007a1e <USBD_CtlSendStatus>
 8007506:	e000      	b.n	800750a <USBD_GetDescriptor+0x2f2>
    return;
 8007508:	bf00      	nop
    }
  }
}
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	889b      	ldrh	r3, [r3, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d130      	bne.n	8007584 <USBD_SetAddress+0x74>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	88db      	ldrh	r3, [r3, #6]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d12c      	bne.n	8007584 <USBD_SetAddress+0x74>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	885b      	ldrh	r3, [r3, #2]
 800752e:	2b7f      	cmp	r3, #127	; 0x7f
 8007530:	d828      	bhi.n	8007584 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	885b      	ldrh	r3, [r3, #2]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	2b03      	cmp	r3, #3
 8007546:	d104      	bne.n	8007552 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f99c 	bl	8007888 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007550:	e01c      	b.n	800758c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7bfa      	ldrb	r2, [r7, #15]
 8007556:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fe70 	bl	8008244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fa5a 	bl	8007a1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d004      	beq.n	800757a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007578:	e008      	b.n	800758c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007582:	e003      	b.n	800758c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f97e 	bl	8007888 <USBD_CtlError>
  }
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	885b      	ldrh	r3, [r3, #2]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	4b4b      	ldr	r3, [pc, #300]	; (80076d8 <USBD_SetConfig+0x144>)
 80075aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075ac:	4b4a      	ldr	r3, [pc, #296]	; (80076d8 <USBD_SetConfig+0x144>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d905      	bls.n	80075c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f966 	bl	8007888 <USBD_CtlError>
    return USBD_FAIL;
 80075bc:	2303      	movs	r3, #3
 80075be:	e087      	b.n	80076d0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d002      	beq.n	80075d0 <USBD_SetConfig+0x3c>
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d025      	beq.n	800761a <USBD_SetConfig+0x86>
 80075ce:	e071      	b.n	80076b4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80075d0:	4b41      	ldr	r3, [pc, #260]	; (80076d8 <USBD_SetConfig+0x144>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01c      	beq.n	8007612 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80075d8:	4b3f      	ldr	r3, [pc, #252]	; (80076d8 <USBD_SetConfig+0x144>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80075e2:	4b3d      	ldr	r3, [pc, #244]	; (80076d8 <USBD_SetConfig+0x144>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff f995 	bl	8006918 <USBD_SetClassConfig>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f944 	bl	8007888 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007600:	e065      	b.n	80076ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa0b 	bl	8007a1e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2203      	movs	r2, #3
 800760c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007610:	e05d      	b.n	80076ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa03 	bl	8007a1e <USBD_CtlSendStatus>
    break;
 8007618:	e059      	b.n	80076ce <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800761a:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <USBD_SetConfig+0x144>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d112      	bne.n	8007648 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800762a:	4b2b      	ldr	r3, [pc, #172]	; (80076d8 <USBD_SetConfig+0x144>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <USBD_SetConfig+0x144>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff f988 	bl	8006950 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f9ec 	bl	8007a1e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007646:	e042      	b.n	80076ce <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007648:	4b23      	ldr	r3, [pc, #140]	; (80076d8 <USBD_SetConfig+0x144>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d02a      	beq.n	80076ac <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff f976 	bl	8006950 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007664:	4b1c      	ldr	r3, [pc, #112]	; (80076d8 <USBD_SetConfig+0x144>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800766e:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <USBD_SetConfig+0x144>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff f94f 	bl	8006918 <USBD_SetClassConfig>
 800767a:	4603      	mov	r3, r0
 800767c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00f      	beq.n	80076a4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f8fe 	bl	8007888 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff f95b 	bl	8006950 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80076a2:	e014      	b.n	80076ce <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f9ba 	bl	8007a1e <USBD_CtlSendStatus>
    break;
 80076aa:	e010      	b.n	80076ce <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f9b6 	bl	8007a1e <USBD_CtlSendStatus>
    break;
 80076b2:	e00c      	b.n	80076ce <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8e6 	bl	8007888 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <USBD_SetConfig+0x144>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff f944 	bl	8006950 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80076c8:	2303      	movs	r3, #3
 80076ca:	73fb      	strb	r3, [r7, #15]
    break;
 80076cc:	bf00      	nop
  }

  return ret;
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	2000025f 	.word	0x2000025f

080076dc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	88db      	ldrh	r3, [r3, #6]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d004      	beq.n	80076f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f8c9 	bl	8007888 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80076f6:	e021      	b.n	800773c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	db17      	blt.n	8007732 <USBD_GetConfig+0x56>
 8007702:	2b02      	cmp	r3, #2
 8007704:	dd02      	ble.n	800770c <USBD_GetConfig+0x30>
 8007706:	2b03      	cmp	r3, #3
 8007708:	d00b      	beq.n	8007722 <USBD_GetConfig+0x46>
 800770a:	e012      	b.n	8007732 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3308      	adds	r3, #8
 8007716:	2201      	movs	r2, #1
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f925 	bl	800796a <USBD_CtlSendData>
      break;
 8007720:	e00c      	b.n	800773c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3304      	adds	r3, #4
 8007726:	2201      	movs	r2, #1
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f91d 	bl	800796a <USBD_CtlSendData>
      break;
 8007730:	e004      	b.n	800773c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f8a7 	bl	8007888 <USBD_CtlError>
      break;
 800773a:	bf00      	nop
}
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	3b01      	subs	r3, #1
 8007756:	2b02      	cmp	r3, #2
 8007758:	d81e      	bhi.n	8007798 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	88db      	ldrh	r3, [r3, #6]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d004      	beq.n	800776c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f88f 	bl	8007888 <USBD_CtlError>
      break;
 800776a:	e01a      	b.n	80077a2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f043 0202 	orr.w	r2, r3, #2
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	330c      	adds	r3, #12
 800778c:	2202      	movs	r2, #2
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8ea 	bl	800796a <USBD_CtlSendData>
    break;
 8007796:	e004      	b.n	80077a2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f874 	bl	8007888 <USBD_CtlError>
    break;
 80077a0:	bf00      	nop
  }
}
 80077a2:	bf00      	nop
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	885b      	ldrh	r3, [r3, #2]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d106      	bne.n	80077ca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f92a 	bl	8007a1e <USBD_CtlSendStatus>
  }
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e2:	3b01      	subs	r3, #1
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d80b      	bhi.n	8007800 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	885b      	ldrh	r3, [r3, #2]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d10c      	bne.n	800780a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f910 	bl	8007a1e <USBD_CtlSendStatus>
      }
      break;
 80077fe:	e004      	b.n	800780a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f840 	bl	8007888 <USBD_CtlError>
      break;
 8007808:	e000      	b.n	800780c <USBD_ClrFeature+0x3a>
      break;
 800780a:	bf00      	nop
  }
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	781a      	ldrb	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3301      	adds	r3, #1
 800782e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff fac1 	bl	8006dc6 <SWAPBYTE>
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff fab4 	bl	8006dc6 <SWAPBYTE>
 800785e:	4603      	mov	r3, r0
 8007860:	461a      	mov	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff faa7 	bl	8006dc6 <SWAPBYTE>
 8007878:	4603      	mov	r3, r0
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	80da      	strh	r2, [r3, #6]
}
 8007880:	bf00      	nop
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007892:	2180      	movs	r1, #128	; 0x80
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fc6b 	bl	8008170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800789a:	2100      	movs	r1, #0
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fc67 	bl	8008170 <USBD_LL_StallEP>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b086      	sub	sp, #24
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d036      	beq.n	800792e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078c4:	6938      	ldr	r0, [r7, #16]
 80078c6:	f000 f836 	bl	8007936 <USBD_GetLen>
 80078ca:	4603      	mov	r3, r0
 80078cc:	3301      	adds	r3, #1
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4413      	add	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	3301      	adds	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	4413      	add	r3, r2
 80078f0:	2203      	movs	r2, #3
 80078f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	3301      	adds	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80078fa:	e013      	b.n	8007924 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	4413      	add	r3, r2
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	7812      	ldrb	r2, [r2, #0]
 8007906:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	3301      	adds	r3, #1
 800790c:	613b      	str	r3, [r7, #16]
    idx++;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	3301      	adds	r3, #1
 8007912:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	4413      	add	r3, r2
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
    idx++;
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	3301      	adds	r3, #1
 8007922:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e7      	bne.n	80078fc <USBD_GetString+0x52>
 800792c:	e000      	b.n	8007930 <USBD_GetString+0x86>
    return;
 800792e:	bf00      	nop
  }
}
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007946:	e005      	b.n	8007954 <USBD_GetLen+0x1e>
  {
    len++;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	3301      	adds	r3, #1
 800794c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3301      	adds	r3, #1
 8007952:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f5      	bne.n	8007948 <USBD_GetLen+0x12>
  }

  return len;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2202      	movs	r2, #2
 800797a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	2100      	movs	r1, #0
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fc76 	bl	8008282 <USBD_LL_Transmit>

  return USBD_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	2100      	movs	r1, #0
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fc65 	bl	8008282 <USBD_LL_Transmit>

  return USBD_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	2100      	movs	r1, #0
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fc69 	bl	80082c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 fc58 	bl	80082c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fc24 	bl	8008282 <USBD_LL_Transmit>

  return USBD_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2205      	movs	r2, #5
 8007a50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a54:	2300      	movs	r3, #0
 8007a56:	2200      	movs	r2, #0
 8007a58:	2100      	movs	r1, #0
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fc32 	bl	80082c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a70:	2200      	movs	r2, #0
 8007a72:	4912      	ldr	r1, [pc, #72]	; (8007abc <MX_USB_DEVICE_Init+0x50>)
 8007a74:	4812      	ldr	r0, [pc, #72]	; (8007ac0 <MX_USB_DEVICE_Init+0x54>)
 8007a76:	f7fe febb 	bl	80067f0 <USBD_Init>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a80:	f7f9 f85e 	bl	8000b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8007a84:	490f      	ldr	r1, [pc, #60]	; (8007ac4 <MX_USB_DEVICE_Init+0x58>)
 8007a86:	480e      	ldr	r0, [pc, #56]	; (8007ac0 <MX_USB_DEVICE_Init+0x54>)
 8007a88:	f7fe fee8 	bl	800685c <USBD_RegisterClass>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a92:	f7f9 f855 	bl	8000b40 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8007a96:	490c      	ldr	r1, [pc, #48]	; (8007ac8 <MX_USB_DEVICE_Init+0x5c>)
 8007a98:	4809      	ldr	r0, [pc, #36]	; (8007ac0 <MX_USB_DEVICE_Init+0x54>)
 8007a9a:	f7fe fb43 	bl	8006124 <USBD_DFU_RegisterMedia>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007aa4:	f7f9 f84c 	bl	8000b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007aa8:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <MX_USB_DEVICE_Init+0x54>)
 8007aaa:	f7fe fef8 	bl	800689e <USBD_Start>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ab4:	f7f9 f844 	bl	8000b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ab8:	bf00      	nop
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000070 	.word	0x20000070
 8007ac0:	200003f4 	.word	0x200003f4
 8007ac4:	2000000c 	.word	0x2000000c
 8007ac8:	200000c0 	.word	0x200000c0

08007acc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2212      	movs	r2, #18
 8007adc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ade:	4b03      	ldr	r3, [pc, #12]	; (8007aec <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	2000008c 	.word	0x2000008c

08007af0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2204      	movs	r2, #4
 8007b00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	200000a0 	.word	0x200000a0

08007b14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	4907      	ldr	r1, [pc, #28]	; (8007b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b2a:	4808      	ldr	r0, [pc, #32]	; (8007b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b2c:	f7ff febd 	bl	80078aa <USBD_GetString>
 8007b30:	e004      	b.n	8007b3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4904      	ldr	r1, [pc, #16]	; (8007b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b36:	4805      	ldr	r0, [pc, #20]	; (8007b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007b38:	f7ff feb7 	bl	80078aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b3c:	4b02      	ldr	r3, [pc, #8]	; (8007b48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200006c4 	.word	0x200006c4
 8007b4c:	08008570 	.word	0x08008570

08007b50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	4603      	mov	r3, r0
 8007b58:	6039      	str	r1, [r7, #0]
 8007b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	4904      	ldr	r1, [pc, #16]	; (8007b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b60:	4804      	ldr	r0, [pc, #16]	; (8007b74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b62:	f7ff fea2 	bl	80078aa <USBD_GetString>
  return USBD_StrDesc;
 8007b66:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	200006c4 	.word	0x200006c4
 8007b74:	08008590 	.word	0x08008590

08007b78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	6039      	str	r1, [r7, #0]
 8007b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	221a      	movs	r2, #26
 8007b88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b8a:	f000 f843 	bl	8007c14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b8e:	4b02      	ldr	r3, [pc, #8]	; (8007b98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200000a4 	.word	0x200000a4

08007b9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	6039      	str	r1, [r7, #0]
 8007ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d105      	bne.n	8007bba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bb2:	4808      	ldr	r0, [pc, #32]	; (8007bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bb4:	f7ff fe79 	bl	80078aa <USBD_GetString>
 8007bb8:	e004      	b.n	8007bc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4904      	ldr	r1, [pc, #16]	; (8007bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bbe:	4805      	ldr	r0, [pc, #20]	; (8007bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc0:	f7ff fe73 	bl	80078aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bc4:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	200006c4 	.word	0x200006c4
 8007bd4:	080085a4 	.word	0x080085a4

08007bd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4603      	mov	r3, r0
 8007be0:	6039      	str	r1, [r7, #0]
 8007be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d105      	bne.n	8007bf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4907      	ldr	r1, [pc, #28]	; (8007c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bee:	4808      	ldr	r0, [pc, #32]	; (8007c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bf0:	f7ff fe5b 	bl	80078aa <USBD_GetString>
 8007bf4:	e004      	b.n	8007c00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	4904      	ldr	r1, [pc, #16]	; (8007c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bfa:	4805      	ldr	r0, [pc, #20]	; (8007c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bfc:	f7ff fe55 	bl	80078aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c00:	4b02      	ldr	r3, [pc, #8]	; (8007c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	200006c4 	.word	0x200006c4
 8007c10:	080085b0 	.word	0x080085b0

08007c14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <Get_SerialNum+0x44>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c20:	4b0e      	ldr	r3, [pc, #56]	; (8007c5c <Get_SerialNum+0x48>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c26:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <Get_SerialNum+0x4c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c3a:	2208      	movs	r2, #8
 8007c3c:	4909      	ldr	r1, [pc, #36]	; (8007c64 <Get_SerialNum+0x50>)
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f814 	bl	8007c6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c44:	2204      	movs	r2, #4
 8007c46:	4908      	ldr	r1, [pc, #32]	; (8007c68 <Get_SerialNum+0x54>)
 8007c48:	68b8      	ldr	r0, [r7, #8]
 8007c4a:	f000 f80f 	bl	8007c6c <IntToUnicode>
  }
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	1fff7a10 	.word	0x1fff7a10
 8007c5c:	1fff7a14 	.word	0x1fff7a14
 8007c60:	1fff7a18 	.word	0x1fff7a18
 8007c64:	200000a6 	.word	0x200000a6
 8007c68:	200000b6 	.word	0x200000b6

08007c6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
 8007c82:	e027      	b.n	8007cd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	0f1b      	lsrs	r3, r3, #28
 8007c88:	2b09      	cmp	r3, #9
 8007c8a:	d80b      	bhi.n	8007ca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	0f1b      	lsrs	r3, r3, #28
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	4619      	mov	r1, r3
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	440b      	add	r3, r1
 8007c9c:	3230      	adds	r2, #48	; 0x30
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e00a      	b.n	8007cba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	0f1b      	lsrs	r3, r3, #28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4619      	mov	r1, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3237      	adds	r2, #55	; 0x37
 8007cb6:	b2d2      	uxtb	r2, r2
 8007cb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4413      	add	r3, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
 8007cd4:	7dfa      	ldrb	r2, [r7, #23]
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d3d3      	bcc.n	8007c84 <IntToUnicode+0x18>
  }
}
 8007cdc:	bf00      	nop
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8007cec:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8007cfc:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8007d10:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8007d2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8007d44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d000      	beq.n	8007d68 <MEM_If_GetStatus_FS+0x16>
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8007d66:	e000      	b.n	8007d6a <MEM_If_GetStatus_FS+0x18>
    break;
 8007d68:	bf00      	nop
  }
  return (USBD_OK);
 8007d6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	; 0x28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d80:	f107 0314 	add.w	r3, r7, #20
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	605a      	str	r2, [r3, #4]
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d98:	d147      	bne.n	8007e2a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	4b25      	ldr	r3, [pc, #148]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	4a24      	ldr	r2, [pc, #144]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007da4:	f043 0301 	orr.w	r3, r3, #1
 8007da8:	6313      	str	r3, [r2, #48]	; 0x30
 8007daa:	4b22      	ldr	r3, [pc, #136]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dc4:	f107 0314 	add.w	r3, r7, #20
 8007dc8:	4619      	mov	r1, r3
 8007dca:	481b      	ldr	r0, [pc, #108]	; (8007e38 <HAL_PCD_MspInit+0xc0>)
 8007dcc:	f7f9 fadc 	bl	8001388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007dd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dde:	2303      	movs	r3, #3
 8007de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007de2:	230a      	movs	r3, #10
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de6:	f107 0314 	add.w	r3, r7, #20
 8007dea:	4619      	mov	r1, r3
 8007dec:	4812      	ldr	r0, [pc, #72]	; (8007e38 <HAL_PCD_MspInit+0xc0>)
 8007dee:	f7f9 facb 	bl	8001388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007df2:	4b10      	ldr	r3, [pc, #64]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	4a0f      	ldr	r2, [pc, #60]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfc:	6353      	str	r3, [r2, #52]	; 0x34
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e06:	4a0b      	ldr	r2, [pc, #44]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <HAL_PCD_MspInit+0xbc>)
 8007e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	2043      	movs	r0, #67	; 0x43
 8007e20:	f7f9 fa7b 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e24:	2043      	movs	r0, #67	; 0x43
 8007e26:	f7f9 fa94 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	3728      	adds	r7, #40	; 0x28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40020000 	.word	0x40020000

08007e3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f7fe fd94 	bl	8006980 <USBD_LL_SetupStage>
}
 8007e58:	bf00      	nop
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	f7fe fdcc 	bl	8006a26 <USBD_LL_DataOutStage>
}
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4613      	mov	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	440b      	add	r3, r1
 8007eb6:	3348      	adds	r3, #72	; 0x48
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f7fe fe15 	bl	8006aec <USBD_LL_DataInStage>
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fe ff19 	bl	8006d10 <USBD_LL_SOF>
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d102      	bne.n	8007f00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007efa:	2300      	movs	r3, #0
 8007efc:	73fb      	strb	r3, [r7, #15]
 8007efe:	e008      	b.n	8007f12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d102      	bne.n	8007f0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
 8007f0c:	e001      	b.n	8007f12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f0e:	f7f8 fe17 	bl	8000b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f18:	7bfa      	ldrb	r2, [r7, #15]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fe febc 	bl	8006c9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fe75 	bl	8006c18 <USBD_LL_Reset>
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe feb7 	bl	8006cba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f5e:	f043 0301 	orr.w	r3, r3, #1
 8007f62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <HAL_PCD_SuspendCallback+0x48>)
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <HAL_PCD_SuspendCallback+0x48>)
 8007f72:	f043 0306 	orr.w	r3, r3, #6
 8007f76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	e000ed00 	.word	0xe000ed00

08007f84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fea6 	bl	8006ce4 <USBD_LL_Resume>
}
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe fed1 	bl	8006d5e <USBD_LL_IsoOUTIncomplete>
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe feb2 	bl	8006d44 <USBD_LL_IsoINIncomplete>
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe febe 	bl	8006d78 <USBD_LL_DevConnected>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe febb 	bl	8006d8e <USBD_LL_DevDisconnected>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d13c      	bne.n	80080aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008030:	4a20      	ldr	r2, [pc, #128]	; (80080b4 <USBD_LL_Init+0x94>)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a1e      	ldr	r2, [pc, #120]	; (80080b4 <USBD_LL_Init+0x94>)
 800803c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008040:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <USBD_LL_Init+0x94>)
 8008042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008046:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008048:	4b1a      	ldr	r3, [pc, #104]	; (80080b4 <USBD_LL_Init+0x94>)
 800804a:	2204      	movs	r2, #4
 800804c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800804e:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <USBD_LL_Init+0x94>)
 8008050:	2202      	movs	r2, #2
 8008052:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008054:	4b17      	ldr	r3, [pc, #92]	; (80080b4 <USBD_LL_Init+0x94>)
 8008056:	2200      	movs	r2, #0
 8008058:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800805a:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <USBD_LL_Init+0x94>)
 800805c:	2202      	movs	r2, #2
 800805e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008060:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <USBD_LL_Init+0x94>)
 8008062:	2200      	movs	r2, #0
 8008064:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <USBD_LL_Init+0x94>)
 8008068:	2200      	movs	r2, #0
 800806a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800806c:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <USBD_LL_Init+0x94>)
 800806e:	2200      	movs	r2, #0
 8008070:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008072:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <USBD_LL_Init+0x94>)
 8008074:	2201      	movs	r2, #1
 8008076:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008078:	4b0e      	ldr	r3, [pc, #56]	; (80080b4 <USBD_LL_Init+0x94>)
 800807a:	2200      	movs	r2, #0
 800807c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800807e:	480d      	ldr	r0, [pc, #52]	; (80080b4 <USBD_LL_Init+0x94>)
 8008080:	f7f9 fc88 	bl	8001994 <HAL_PCD_Init>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800808a:	f7f8 fd59 	bl	8000b40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800808e:	2180      	movs	r1, #128	; 0x80
 8008090:	4808      	ldr	r0, [pc, #32]	; (80080b4 <USBD_LL_Init+0x94>)
 8008092:	f7fa fdb4 	bl	8002bfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008096:	2240      	movs	r2, #64	; 0x40
 8008098:	2100      	movs	r1, #0
 800809a:	4806      	ldr	r0, [pc, #24]	; (80080b4 <USBD_LL_Init+0x94>)
 800809c:	f7fa fd68 	bl	8002b70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	2101      	movs	r1, #1
 80080a4:	4803      	ldr	r0, [pc, #12]	; (80080b4 <USBD_LL_Init+0x94>)
 80080a6:	f7fa fd63 	bl	8002b70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	200008c4 	.word	0x200008c4

080080b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7f9 fd7d 	bl	8001bce <HAL_PCD_Start>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 f914 	bl	8008308 <USBD_Get_USB_Status>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008104:	4618      	mov	r0, r3
 8008106:	f7f9 fd95 	bl	8001c34 <HAL_PCD_Stop>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 f8f9 	bl	8008308 <USBD_Get_USB_Status>
 8008116:	4603      	mov	r3, r0
 8008118:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800811a:	7bbb      	ldrb	r3, [r7, #14]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4603      	mov	r3, r0
 8008134:	70fb      	strb	r3, [r7, #3]
 8008136:	460b      	mov	r3, r1
 8008138:	70bb      	strb	r3, [r7, #2]
 800813a:	4613      	mov	r3, r2
 800813c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800814c:	78bb      	ldrb	r3, [r7, #2]
 800814e:	883a      	ldrh	r2, [r7, #0]
 8008150:	78f9      	ldrb	r1, [r7, #3]
 8008152:	f7fa f976 	bl	8002442 <HAL_PCD_EP_Open>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f8d3 	bl	8008308 <USBD_Get_USB_Status>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008166:	7bbb      	ldrb	r3, [r7, #14]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800818a:	78fa      	ldrb	r2, [r7, #3]
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f7fa fa54 	bl	800263c <HAL_PCD_EP_SetStall>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 f8b4 	bl	8008308 <USBD_Get_USB_Status>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081c8:	78fa      	ldrb	r2, [r7, #3]
 80081ca:	4611      	mov	r1, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fa fa99 	bl	8002704 <HAL_PCD_EP_ClrStall>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 f895 	bl	8008308 <USBD_Get_USB_Status>
 80081de:	4603      	mov	r3, r0
 80081e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008204:	2b00      	cmp	r3, #0
 8008206:	da0b      	bge.n	8008220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008208:	78fb      	ldrb	r3, [r7, #3]
 800820a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	4613      	mov	r3, r2
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	1a9b      	subs	r3, r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	333e      	adds	r3, #62	; 0x3e
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	e00b      	b.n	8008238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	4613      	mov	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	440b      	add	r3, r1
 8008232:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008236:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f7fa f8c8 	bl	80023f8 <HAL_PCD_SetAddress>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f84a 	bl	8008308 <USBD_Get_USB_Status>
 8008274:	4603      	mov	r3, r0
 8008276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008278:	7bbb      	ldrb	r3, [r7, #14]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	607a      	str	r2, [r7, #4]
 800828c:	603b      	str	r3, [r7, #0]
 800828e:	460b      	mov	r3, r1
 8008290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082a0:	7af9      	ldrb	r1, [r7, #11]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	f7fa f97f 	bl	80025a8 <HAL_PCD_EP_Transmit>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 f829 	bl	8008308 <USBD_Get_USB_Status>
 80082b6:	4603      	mov	r3, r0
 80082b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3718      	adds	r7, #24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	460b      	mov	r3, r1
 80082d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082e2:	7af9      	ldrb	r1, [r7, #11]
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	f7fa f913 	bl	8002512 <HAL_PCD_EP_Receive>
 80082ec:	4603      	mov	r3, r0
 80082ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 f808 	bl	8008308 <USBD_Get_USB_Status>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d817      	bhi.n	800834c <USBD_Get_USB_Status+0x44>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <USBD_Get_USB_Status+0x1c>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008335 	.word	0x08008335
 8008328:	0800833b 	.word	0x0800833b
 800832c:	08008341 	.word	0x08008341
 8008330:	08008347 	.word	0x08008347
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	e00b      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800833a:	2303      	movs	r3, #3
 800833c:	73fb      	strb	r3, [r7, #15]
    break;
 800833e:	e008      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008340:	2301      	movs	r3, #1
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e005      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008346:	2303      	movs	r3, #3
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	e002      	b.n	8008352 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	73fb      	strb	r3, [r7, #15]
    break;
 8008350:	bf00      	nop
  }
  return usb_status;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <__errno>:
 8008360:	4b01      	ldr	r3, [pc, #4]	; (8008368 <__errno+0x8>)
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	200000dc 	.word	0x200000dc

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4e0d      	ldr	r6, [pc, #52]	; (80083a4 <__libc_init_array+0x38>)
 8008370:	4c0d      	ldr	r4, [pc, #52]	; (80083a8 <__libc_init_array+0x3c>)
 8008372:	1ba4      	subs	r4, r4, r6
 8008374:	10a4      	asrs	r4, r4, #2
 8008376:	2500      	movs	r5, #0
 8008378:	42a5      	cmp	r5, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	4e0b      	ldr	r6, [pc, #44]	; (80083ac <__libc_init_array+0x40>)
 800837e:	4c0c      	ldr	r4, [pc, #48]	; (80083b0 <__libc_init_array+0x44>)
 8008380:	f000 f8ea 	bl	8008558 <_init>
 8008384:	1ba4      	subs	r4, r4, r6
 8008386:	10a4      	asrs	r4, r4, #2
 8008388:	2500      	movs	r5, #0
 800838a:	42a5      	cmp	r5, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008394:	4798      	blx	r3
 8008396:	3501      	adds	r5, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800839e:	4798      	blx	r3
 80083a0:	3501      	adds	r5, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	08008640 	.word	0x08008640
 80083a8:	08008640 	.word	0x08008640
 80083ac:	08008640 	.word	0x08008640
 80083b0:	08008644 	.word	0x08008644

080083b4 <malloc>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <malloc+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f000 b861 	b.w	8008480 <_malloc_r>
 80083be:	bf00      	nop
 80083c0:	200000dc 	.word	0x200000dc

080083c4 <free>:
 80083c4:	4b02      	ldr	r3, [pc, #8]	; (80083d0 <free+0xc>)
 80083c6:	4601      	mov	r1, r0
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f000 b80b 	b.w	80083e4 <_free_r>
 80083ce:	bf00      	nop
 80083d0:	200000dc 	.word	0x200000dc

080083d4 <memset>:
 80083d4:	4402      	add	r2, r0
 80083d6:	4603      	mov	r3, r0
 80083d8:	4293      	cmp	r3, r2
 80083da:	d100      	bne.n	80083de <memset+0xa>
 80083dc:	4770      	bx	lr
 80083de:	f803 1b01 	strb.w	r1, [r3], #1
 80083e2:	e7f9      	b.n	80083d8 <memset+0x4>

080083e4 <_free_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4605      	mov	r5, r0
 80083e8:	2900      	cmp	r1, #0
 80083ea:	d045      	beq.n	8008478 <_free_r+0x94>
 80083ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f0:	1f0c      	subs	r4, r1, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfb8      	it	lt
 80083f6:	18e4      	addlt	r4, r4, r3
 80083f8:	f000 f8ac 	bl	8008554 <__malloc_lock>
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <_free_r+0x98>)
 80083fe:	6813      	ldr	r3, [r2, #0]
 8008400:	4610      	mov	r0, r2
 8008402:	b933      	cbnz	r3, 8008412 <_free_r+0x2e>
 8008404:	6063      	str	r3, [r4, #4]
 8008406:	6014      	str	r4, [r2, #0]
 8008408:	4628      	mov	r0, r5
 800840a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800840e:	f000 b8a2 	b.w	8008556 <__malloc_unlock>
 8008412:	42a3      	cmp	r3, r4
 8008414:	d90c      	bls.n	8008430 <_free_r+0x4c>
 8008416:	6821      	ldr	r1, [r4, #0]
 8008418:	1862      	adds	r2, r4, r1
 800841a:	4293      	cmp	r3, r2
 800841c:	bf04      	itt	eq
 800841e:	681a      	ldreq	r2, [r3, #0]
 8008420:	685b      	ldreq	r3, [r3, #4]
 8008422:	6063      	str	r3, [r4, #4]
 8008424:	bf04      	itt	eq
 8008426:	1852      	addeq	r2, r2, r1
 8008428:	6022      	streq	r2, [r4, #0]
 800842a:	6004      	str	r4, [r0, #0]
 800842c:	e7ec      	b.n	8008408 <_free_r+0x24>
 800842e:	4613      	mov	r3, r2
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	b10a      	cbz	r2, 8008438 <_free_r+0x54>
 8008434:	42a2      	cmp	r2, r4
 8008436:	d9fa      	bls.n	800842e <_free_r+0x4a>
 8008438:	6819      	ldr	r1, [r3, #0]
 800843a:	1858      	adds	r0, r3, r1
 800843c:	42a0      	cmp	r0, r4
 800843e:	d10b      	bne.n	8008458 <_free_r+0x74>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	4401      	add	r1, r0
 8008444:	1858      	adds	r0, r3, r1
 8008446:	4282      	cmp	r2, r0
 8008448:	6019      	str	r1, [r3, #0]
 800844a:	d1dd      	bne.n	8008408 <_free_r+0x24>
 800844c:	6810      	ldr	r0, [r2, #0]
 800844e:	6852      	ldr	r2, [r2, #4]
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	4401      	add	r1, r0
 8008454:	6019      	str	r1, [r3, #0]
 8008456:	e7d7      	b.n	8008408 <_free_r+0x24>
 8008458:	d902      	bls.n	8008460 <_free_r+0x7c>
 800845a:	230c      	movs	r3, #12
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	e7d3      	b.n	8008408 <_free_r+0x24>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428a      	cmp	r2, r1
 8008466:	bf04      	itt	eq
 8008468:	6811      	ldreq	r1, [r2, #0]
 800846a:	6852      	ldreq	r2, [r2, #4]
 800846c:	6062      	str	r2, [r4, #4]
 800846e:	bf04      	itt	eq
 8008470:	1809      	addeq	r1, r1, r0
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	605c      	str	r4, [r3, #4]
 8008476:	e7c7      	b.n	8008408 <_free_r+0x24>
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	20000260 	.word	0x20000260

08008480 <_malloc_r>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	1ccd      	adds	r5, r1, #3
 8008484:	f025 0503 	bic.w	r5, r5, #3
 8008488:	3508      	adds	r5, #8
 800848a:	2d0c      	cmp	r5, #12
 800848c:	bf38      	it	cc
 800848e:	250c      	movcc	r5, #12
 8008490:	2d00      	cmp	r5, #0
 8008492:	4606      	mov	r6, r0
 8008494:	db01      	blt.n	800849a <_malloc_r+0x1a>
 8008496:	42a9      	cmp	r1, r5
 8008498:	d903      	bls.n	80084a2 <_malloc_r+0x22>
 800849a:	230c      	movs	r3, #12
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	2000      	movs	r0, #0
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	f000 f857 	bl	8008554 <__malloc_lock>
 80084a6:	4a21      	ldr	r2, [pc, #132]	; (800852c <_malloc_r+0xac>)
 80084a8:	6814      	ldr	r4, [r2, #0]
 80084aa:	4621      	mov	r1, r4
 80084ac:	b991      	cbnz	r1, 80084d4 <_malloc_r+0x54>
 80084ae:	4c20      	ldr	r4, [pc, #128]	; (8008530 <_malloc_r+0xb0>)
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	b91b      	cbnz	r3, 80084bc <_malloc_r+0x3c>
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 f83d 	bl	8008534 <_sbrk_r>
 80084ba:	6020      	str	r0, [r4, #0]
 80084bc:	4629      	mov	r1, r5
 80084be:	4630      	mov	r0, r6
 80084c0:	f000 f838 	bl	8008534 <_sbrk_r>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d124      	bne.n	8008512 <_malloc_r+0x92>
 80084c8:	230c      	movs	r3, #12
 80084ca:	6033      	str	r3, [r6, #0]
 80084cc:	4630      	mov	r0, r6
 80084ce:	f000 f842 	bl	8008556 <__malloc_unlock>
 80084d2:	e7e4      	b.n	800849e <_malloc_r+0x1e>
 80084d4:	680b      	ldr	r3, [r1, #0]
 80084d6:	1b5b      	subs	r3, r3, r5
 80084d8:	d418      	bmi.n	800850c <_malloc_r+0x8c>
 80084da:	2b0b      	cmp	r3, #11
 80084dc:	d90f      	bls.n	80084fe <_malloc_r+0x7e>
 80084de:	600b      	str	r3, [r1, #0]
 80084e0:	50cd      	str	r5, [r1, r3]
 80084e2:	18cc      	adds	r4, r1, r3
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 f836 	bl	8008556 <__malloc_unlock>
 80084ea:	f104 000b 	add.w	r0, r4, #11
 80084ee:	1d23      	adds	r3, r4, #4
 80084f0:	f020 0007 	bic.w	r0, r0, #7
 80084f4:	1ac3      	subs	r3, r0, r3
 80084f6:	d0d3      	beq.n	80084a0 <_malloc_r+0x20>
 80084f8:	425a      	negs	r2, r3
 80084fa:	50e2      	str	r2, [r4, r3]
 80084fc:	e7d0      	b.n	80084a0 <_malloc_r+0x20>
 80084fe:	428c      	cmp	r4, r1
 8008500:	684b      	ldr	r3, [r1, #4]
 8008502:	bf16      	itet	ne
 8008504:	6063      	strne	r3, [r4, #4]
 8008506:	6013      	streq	r3, [r2, #0]
 8008508:	460c      	movne	r4, r1
 800850a:	e7eb      	b.n	80084e4 <_malloc_r+0x64>
 800850c:	460c      	mov	r4, r1
 800850e:	6849      	ldr	r1, [r1, #4]
 8008510:	e7cc      	b.n	80084ac <_malloc_r+0x2c>
 8008512:	1cc4      	adds	r4, r0, #3
 8008514:	f024 0403 	bic.w	r4, r4, #3
 8008518:	42a0      	cmp	r0, r4
 800851a:	d005      	beq.n	8008528 <_malloc_r+0xa8>
 800851c:	1a21      	subs	r1, r4, r0
 800851e:	4630      	mov	r0, r6
 8008520:	f000 f808 	bl	8008534 <_sbrk_r>
 8008524:	3001      	adds	r0, #1
 8008526:	d0cf      	beq.n	80084c8 <_malloc_r+0x48>
 8008528:	6025      	str	r5, [r4, #0]
 800852a:	e7db      	b.n	80084e4 <_malloc_r+0x64>
 800852c:	20000260 	.word	0x20000260
 8008530:	20000264 	.word	0x20000264

08008534 <_sbrk_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4c06      	ldr	r4, [pc, #24]	; (8008550 <_sbrk_r+0x1c>)
 8008538:	2300      	movs	r3, #0
 800853a:	4605      	mov	r5, r0
 800853c:	4608      	mov	r0, r1
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	f7f8 fd06 	bl	8000f50 <_sbrk>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d102      	bne.n	800854e <_sbrk_r+0x1a>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	b103      	cbz	r3, 800854e <_sbrk_r+0x1a>
 800854c:	602b      	str	r3, [r5, #0]
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	20000ccc 	.word	0x20000ccc

08008554 <__malloc_lock>:
 8008554:	4770      	bx	lr

08008556 <__malloc_unlock>:
 8008556:	4770      	bx	lr

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
