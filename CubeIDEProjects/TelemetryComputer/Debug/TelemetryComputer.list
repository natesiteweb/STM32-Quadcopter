
TelemetryComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080064bc  080064bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e8  080064e8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080064e8  080064e8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064e8  080064e8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080064f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d3c  20000048  08006538  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  08006538  00020d84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f10  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c73  00000000  00000000  00032f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c8  00000000  00000000  00035bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001178  00000000  00000000  00036ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ac7  00000000  00000000  00038038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa1a  00000000  00000000  0004daff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000771b8  00000000  00000000  0005d519  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d46d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db8  00000000  00000000  000d474c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	080064a4 	.word	0x080064a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	080064a4 	.word	0x080064a4

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 fecd 	bl	8001f28 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fff6 	bl	8001184 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000198:	2308      	movs	r3, #8
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 ff95 	bl	80020d8 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 ffe6 	bl	8001184 <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000f0 	.word	0x200000f0
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0308 	orr.w	r3, r3, #8
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0308 	and.w	r3, r3, #8
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f002 fa5e 	bl	80026e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010c00 	.word	0x40010c00

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000254:	4b39      	ldr	r3, [pc, #228]	; (800033c <MX_GPIO_Init+0xfc>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a38      	ldr	r2, [pc, #224]	; (800033c <MX_GPIO_Init+0xfc>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b36      	ldr	r3, [pc, #216]	; (800033c <MX_GPIO_Init+0xfc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0320 	and.w	r3, r3, #32
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	4b33      	ldr	r3, [pc, #204]	; (800033c <MX_GPIO_Init+0xfc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a32      	ldr	r2, [pc, #200]	; (800033c <MX_GPIO_Init+0xfc>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b30      	ldr	r3, [pc, #192]	; (800033c <MX_GPIO_Init+0xfc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0304 	and.w	r3, r3, #4
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000284:	4b2d      	ldr	r3, [pc, #180]	; (800033c <MX_GPIO_Init+0xfc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <MX_GPIO_Init+0xfc>)
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b2a      	ldr	r3, [pc, #168]	; (800033c <MX_GPIO_Init+0xfc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0308 	and.w	r3, r3, #8
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80002a2:	4827      	ldr	r0, [pc, #156]	; (8000340 <MX_GPIO_Init+0x100>)
 80002a4:	f002 fb7a 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ae:	4825      	ldr	r0, [pc, #148]	; (8000344 <MX_GPIO_Init+0x104>)
 80002b0:	f002 fb74 	bl	800299c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|NRF_CSN_Pin;
 80002b4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80002b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4619      	mov	r1, r3
 80002cc:	481c      	ldr	r0, [pc, #112]	; (8000340 <MX_GPIO_Init+0x100>)
 80002ce:	f002 fa0b 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80002d2:	2302      	movs	r3, #2
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <MX_GPIO_Init+0x108>)
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	4619      	mov	r1, r3
 80002e4:	4817      	ldr	r0, [pc, #92]	; (8000344 <MX_GPIO_Init+0x104>)
 80002e6:	f002 f9ff 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80002ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2302      	movs	r3, #2
 80002fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	4810      	ldr	r0, [pc, #64]	; (8000344 <MX_GPIO_Init+0x104>)
 8000304:	f002 f9f0 	bl	80026e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_GPIO_Init+0x10c>)
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	4808      	ldr	r0, [pc, #32]	; (8000340 <MX_GPIO_Init+0x100>)
 800031e:	f002 f9e3 	bl	80026e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2100      	movs	r1, #0
 8000326:	2028      	movs	r0, #40	; 0x28
 8000328:	f002 f8df 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800032c:	2028      	movs	r0, #40	; 0x28
 800032e:	f002 f8f8 	bl	8002522 <HAL_NVIC_EnableIRQ>

}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40010800 	.word	0x40010800
 8000344:	40010c00 	.word	0x40010c00
 8000348:	10110000 	.word	0x10110000
 800034c:	10210000 	.word	0x10210000

08000350 <GPS_Read>:
int32_t longitude = 0;

uint8_t waiting_for_gps_packet_sent = 0;

void GPS_Read()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	if(new_gps_line)
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <GPS_Read+0x54>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b2db      	uxtb	r3, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	f000 81b3 	beq.w	80006c8 <GPS_Read+0x378>
	{
		new_gps_line = 0;
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <GPS_Read+0x54>)
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]

		//HAL_UART_Transmit(&huart1, gps_buffer, gps_buffer_index, HAL_MAX_DELAY);

		if(gps_buffer[3] == 'L' && gps_buffer[4] == 'L' && gps_buffer[6] == ',')	//No GPS fix
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <GPS_Read+0x58>)
 800036a:	78db      	ldrb	r3, [r3, #3]
 800036c:	2b4c      	cmp	r3, #76	; 0x4c
 800036e:	d123      	bne.n	80003b8 <GPS_Read+0x68>
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <GPS_Read+0x58>)
 8000372:	791b      	ldrb	r3, [r3, #4]
 8000374:	2b4c      	cmp	r3, #76	; 0x4c
 8000376:	d11f      	bne.n	80003b8 <GPS_Read+0x68>
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <GPS_Read+0x58>)
 800037a:	799b      	ldrb	r3, [r3, #6]
 800037c:	2b2c      	cmp	r3, #44	; 0x2c
 800037e:	d11b      	bne.n	80003b8 <GPS_Read+0x68>
		{
			sat_count = 0;
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <GPS_Read+0x5c>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]

			if(gps_fix)
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <GPS_Read+0x60>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <GPS_Read+0x42>
			{
				GPS_Send_Packet();
 800038e:	f000 f9a9 	bl	80006e4 <GPS_Send_Packet>
			}

			gps_fix = 0;
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <GPS_Read+0x60>)
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <GPS_Read+0x64>)
 800039e:	f002 fafd 	bl	800299c <HAL_GPIO_WritePin>
 80003a2:	e014      	b.n	80003ce <GPS_Read+0x7e>
 80003a4:	20000064 	.word	0x20000064
 80003a8:	20000120 	.word	0x20000120
 80003ac:	20000066 	.word	0x20000066
 80003b0:	20000065 	.word	0x20000065
 80003b4:	40010800 	.word	0x40010800
		}
		else if(gps_buffer[3] == 'L' && gps_buffer[4] == 'L')						//GPS Fix
 80003b8:	4ba7      	ldr	r3, [pc, #668]	; (8000658 <GPS_Read+0x308>)
 80003ba:	78db      	ldrb	r3, [r3, #3]
 80003bc:	2b4c      	cmp	r3, #76	; 0x4c
 80003be:	d106      	bne.n	80003ce <GPS_Read+0x7e>
 80003c0:	4ba5      	ldr	r3, [pc, #660]	; (8000658 <GPS_Read+0x308>)
 80003c2:	791b      	ldrb	r3, [r3, #4]
 80003c4:	2b4c      	cmp	r3, #76	; 0x4c
 80003c6:	d102      	bne.n	80003ce <GPS_Read+0x7e>
		{
			gps_fix = 1;
 80003c8:	4ba4      	ldr	r3, [pc, #656]	; (800065c <GPS_Read+0x30c>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
		}

		if(gps_fix)
 80003ce:	4ba3      	ldr	r3, [pc, #652]	; (800065c <GPS_Read+0x30c>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	f000 8161 	beq.w	800069a <GPS_Read+0x34a>
		{
			if(gps_buffer[3] == 'G' && gps_buffer[4] == 'A' && (gps_buffer[43] == '1' || gps_buffer[43] == '2'))
 80003d8:	4b9f      	ldr	r3, [pc, #636]	; (8000658 <GPS_Read+0x308>)
 80003da:	78db      	ldrb	r3, [r3, #3]
 80003dc:	2b47      	cmp	r3, #71	; 0x47
 80003de:	f040 815c 	bne.w	800069a <GPS_Read+0x34a>
 80003e2:	4b9d      	ldr	r3, [pc, #628]	; (8000658 <GPS_Read+0x308>)
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	2b41      	cmp	r3, #65	; 0x41
 80003e8:	f040 8157 	bne.w	800069a <GPS_Read+0x34a>
 80003ec:	4b9a      	ldr	r3, [pc, #616]	; (8000658 <GPS_Read+0x308>)
 80003ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80003f2:	2b31      	cmp	r3, #49	; 0x31
 80003f4:	d005      	beq.n	8000402 <GPS_Read+0xb2>
 80003f6:	4b98      	ldr	r3, [pc, #608]	; (8000658 <GPS_Read+0x308>)
 80003f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80003fc:	2b32      	cmp	r3, #50	; 0x32
 80003fe:	f040 814c 	bne.w	800069a <GPS_Read+0x34a>
			{
				latitude = ((int32_t)gps_buffer[18] - 48) * 10000000;
 8000402:	4b95      	ldr	r3, [pc, #596]	; (8000658 <GPS_Read+0x308>)
 8000404:	7c9b      	ldrb	r3, [r3, #18]
 8000406:	3b30      	subs	r3, #48	; 0x30
 8000408:	4a95      	ldr	r2, [pc, #596]	; (8000660 <GPS_Read+0x310>)
 800040a:	fb02 f303 	mul.w	r3, r2, r3
 800040e:	4a95      	ldr	r2, [pc, #596]	; (8000664 <GPS_Read+0x314>)
 8000410:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[19] - 48) * 1000000;
 8000412:	4b91      	ldr	r3, [pc, #580]	; (8000658 <GPS_Read+0x308>)
 8000414:	7cdb      	ldrb	r3, [r3, #19]
 8000416:	3b30      	subs	r3, #48	; 0x30
 8000418:	4a93      	ldr	r2, [pc, #588]	; (8000668 <GPS_Read+0x318>)
 800041a:	fb02 f203 	mul.w	r2, r2, r3
 800041e:	4b91      	ldr	r3, [pc, #580]	; (8000664 <GPS_Read+0x314>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a8f      	ldr	r2, [pc, #572]	; (8000664 <GPS_Read+0x314>)
 8000426:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[21] - 48) * 100000;
 8000428:	4b8b      	ldr	r3, [pc, #556]	; (8000658 <GPS_Read+0x308>)
 800042a:	7d5b      	ldrb	r3, [r3, #21]
 800042c:	3b30      	subs	r3, #48	; 0x30
 800042e:	4a8f      	ldr	r2, [pc, #572]	; (800066c <GPS_Read+0x31c>)
 8000430:	fb02 f203 	mul.w	r2, r2, r3
 8000434:	4b8b      	ldr	r3, [pc, #556]	; (8000664 <GPS_Read+0x314>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4413      	add	r3, r2
 800043a:	4a8a      	ldr	r2, [pc, #552]	; (8000664 <GPS_Read+0x314>)
 800043c:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[22] - 48) * 10000;
 800043e:	4b86      	ldr	r3, [pc, #536]	; (8000658 <GPS_Read+0x308>)
 8000440:	7d9b      	ldrb	r3, [r3, #22]
 8000442:	3b30      	subs	r3, #48	; 0x30
 8000444:	f242 7210 	movw	r2, #10000	; 0x2710
 8000448:	fb02 f203 	mul.w	r2, r2, r3
 800044c:	4b85      	ldr	r3, [pc, #532]	; (8000664 <GPS_Read+0x314>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	4a84      	ldr	r2, [pc, #528]	; (8000664 <GPS_Read+0x314>)
 8000454:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[23] - 48) * 1000;
 8000456:	4b80      	ldr	r3, [pc, #512]	; (8000658 <GPS_Read+0x308>)
 8000458:	7ddb      	ldrb	r3, [r3, #23]
 800045a:	3b30      	subs	r3, #48	; 0x30
 800045c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000460:	fb02 f203 	mul.w	r2, r2, r3
 8000464:	4b7f      	ldr	r3, [pc, #508]	; (8000664 <GPS_Read+0x314>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4413      	add	r3, r2
 800046a:	4a7e      	ldr	r2, [pc, #504]	; (8000664 <GPS_Read+0x314>)
 800046c:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[24] - 48) * 100;
 800046e:	4b7a      	ldr	r3, [pc, #488]	; (8000658 <GPS_Read+0x308>)
 8000470:	7e1b      	ldrb	r3, [r3, #24]
 8000472:	3b30      	subs	r3, #48	; 0x30
 8000474:	2264      	movs	r2, #100	; 0x64
 8000476:	fb02 f203 	mul.w	r2, r2, r3
 800047a:	4b7a      	ldr	r3, [pc, #488]	; (8000664 <GPS_Read+0x314>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4413      	add	r3, r2
 8000480:	4a78      	ldr	r2, [pc, #480]	; (8000664 <GPS_Read+0x314>)
 8000482:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[25] - 48) * 10;
 8000484:	4b74      	ldr	r3, [pc, #464]	; (8000658 <GPS_Read+0x308>)
 8000486:	7e5b      	ldrb	r3, [r3, #25]
 8000488:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800048c:	4613      	mov	r3, r2
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4413      	add	r3, r2
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	461a      	mov	r2, r3
 8000496:	4b73      	ldr	r3, [pc, #460]	; (8000664 <GPS_Read+0x314>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4413      	add	r3, r2
 800049c:	4a71      	ldr	r2, [pc, #452]	; (8000664 <GPS_Read+0x314>)
 800049e:	6013      	str	r3, [r2, #0]
				latitude /= (int32_t)6;
 80004a0:	4b70      	ldr	r3, [pc, #448]	; (8000664 <GPS_Read+0x314>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a72      	ldr	r2, [pc, #456]	; (8000670 <GPS_Read+0x320>)
 80004a6:	fb82 1203 	smull	r1, r2, r2, r3
 80004aa:	17db      	asrs	r3, r3, #31
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	4a6d      	ldr	r2, [pc, #436]	; (8000664 <GPS_Read+0x314>)
 80004b0:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[16] - 48) * 100000000;
 80004b2:	4b69      	ldr	r3, [pc, #420]	; (8000658 <GPS_Read+0x308>)
 80004b4:	7c1b      	ldrb	r3, [r3, #16]
 80004b6:	3b30      	subs	r3, #48	; 0x30
 80004b8:	4a6e      	ldr	r2, [pc, #440]	; (8000674 <GPS_Read+0x324>)
 80004ba:	fb02 f203 	mul.w	r2, r2, r3
 80004be:	4b69      	ldr	r3, [pc, #420]	; (8000664 <GPS_Read+0x314>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4413      	add	r3, r2
 80004c4:	4a67      	ldr	r2, [pc, #412]	; (8000664 <GPS_Read+0x314>)
 80004c6:	6013      	str	r3, [r2, #0]
				latitude += ((int32_t)gps_buffer[17] - 48) * 10000000;
 80004c8:	4b63      	ldr	r3, [pc, #396]	; (8000658 <GPS_Read+0x308>)
 80004ca:	7c5b      	ldrb	r3, [r3, #17]
 80004cc:	3b30      	subs	r3, #48	; 0x30
 80004ce:	4a64      	ldr	r2, [pc, #400]	; (8000660 <GPS_Read+0x310>)
 80004d0:	fb02 f203 	mul.w	r2, r2, r3
 80004d4:	4b63      	ldr	r3, [pc, #396]	; (8000664 <GPS_Read+0x314>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4413      	add	r3, r2
 80004da:	4a62      	ldr	r2, [pc, #392]	; (8000664 <GPS_Read+0x314>)
 80004dc:	6013      	str	r3, [r2, #0]
				latitude /= (int32_t)10;
 80004de:	4b61      	ldr	r3, [pc, #388]	; (8000664 <GPS_Read+0x314>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a65      	ldr	r2, [pc, #404]	; (8000678 <GPS_Read+0x328>)
 80004e4:	fb82 1203 	smull	r1, r2, r2, r3
 80004e8:	1092      	asrs	r2, r2, #2
 80004ea:	17db      	asrs	r3, r3, #31
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4a5d      	ldr	r2, [pc, #372]	; (8000664 <GPS_Read+0x314>)
 80004f0:	6013      	str	r3, [r2, #0]

				longitude = ((int32_t)gps_buffer[32] - 48) * 10000000;
 80004f2:	4b59      	ldr	r3, [pc, #356]	; (8000658 <GPS_Read+0x308>)
 80004f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f8:	3b30      	subs	r3, #48	; 0x30
 80004fa:	4a59      	ldr	r2, [pc, #356]	; (8000660 <GPS_Read+0x310>)
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	4a5e      	ldr	r2, [pc, #376]	; (800067c <GPS_Read+0x32c>)
 8000502:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[33] - 48) * 1000000;
 8000504:	4b54      	ldr	r3, [pc, #336]	; (8000658 <GPS_Read+0x308>)
 8000506:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800050a:	3b30      	subs	r3, #48	; 0x30
 800050c:	4a56      	ldr	r2, [pc, #344]	; (8000668 <GPS_Read+0x318>)
 800050e:	fb02 f203 	mul.w	r2, r2, r3
 8000512:	4b5a      	ldr	r3, [pc, #360]	; (800067c <GPS_Read+0x32c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4413      	add	r3, r2
 8000518:	4a58      	ldr	r2, [pc, #352]	; (800067c <GPS_Read+0x32c>)
 800051a:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[35] - 48) * 100000;
 800051c:	4b4e      	ldr	r3, [pc, #312]	; (8000658 <GPS_Read+0x308>)
 800051e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000522:	3b30      	subs	r3, #48	; 0x30
 8000524:	4a51      	ldr	r2, [pc, #324]	; (800066c <GPS_Read+0x31c>)
 8000526:	fb02 f203 	mul.w	r2, r2, r3
 800052a:	4b54      	ldr	r3, [pc, #336]	; (800067c <GPS_Read+0x32c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4413      	add	r3, r2
 8000530:	4a52      	ldr	r2, [pc, #328]	; (800067c <GPS_Read+0x32c>)
 8000532:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[36] - 48) * 10000;
 8000534:	4b48      	ldr	r3, [pc, #288]	; (8000658 <GPS_Read+0x308>)
 8000536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800053a:	3b30      	subs	r3, #48	; 0x30
 800053c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000540:	fb02 f203 	mul.w	r2, r2, r3
 8000544:	4b4d      	ldr	r3, [pc, #308]	; (800067c <GPS_Read+0x32c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4413      	add	r3, r2
 800054a:	4a4c      	ldr	r2, [pc, #304]	; (800067c <GPS_Read+0x32c>)
 800054c:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[37] - 48) * 1000;
 800054e:	4b42      	ldr	r3, [pc, #264]	; (8000658 <GPS_Read+0x308>)
 8000550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000554:	3b30      	subs	r3, #48	; 0x30
 8000556:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800055a:	fb02 f203 	mul.w	r2, r2, r3
 800055e:	4b47      	ldr	r3, [pc, #284]	; (800067c <GPS_Read+0x32c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a45      	ldr	r2, [pc, #276]	; (800067c <GPS_Read+0x32c>)
 8000566:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[38] - 48) * 100;
 8000568:	4b3b      	ldr	r3, [pc, #236]	; (8000658 <GPS_Read+0x308>)
 800056a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800056e:	3b30      	subs	r3, #48	; 0x30
 8000570:	2264      	movs	r2, #100	; 0x64
 8000572:	fb02 f203 	mul.w	r2, r2, r3
 8000576:	4b41      	ldr	r3, [pc, #260]	; (800067c <GPS_Read+0x32c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a3f      	ldr	r2, [pc, #252]	; (800067c <GPS_Read+0x32c>)
 800057e:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[39] - 48) * 10;
 8000580:	4b35      	ldr	r3, [pc, #212]	; (8000658 <GPS_Read+0x308>)
 8000582:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000586:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	461a      	mov	r2, r3
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <GPS_Read+0x32c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4413      	add	r3, r2
 800059a:	4a38      	ldr	r2, [pc, #224]	; (800067c <GPS_Read+0x32c>)
 800059c:	6013      	str	r3, [r2, #0]
				longitude /= (int32_t)6;
 800059e:	4b37      	ldr	r3, [pc, #220]	; (800067c <GPS_Read+0x32c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a33      	ldr	r2, [pc, #204]	; (8000670 <GPS_Read+0x320>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a33      	ldr	r2, [pc, #204]	; (800067c <GPS_Read+0x32c>)
 80005ae:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[29] - 48) * 1000000000;
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <GPS_Read+0x308>)
 80005b2:	7f5b      	ldrb	r3, [r3, #29]
 80005b4:	3b30      	subs	r3, #48	; 0x30
 80005b6:	4a32      	ldr	r2, [pc, #200]	; (8000680 <GPS_Read+0x330>)
 80005b8:	fb02 f203 	mul.w	r2, r2, r3
 80005bc:	4b2f      	ldr	r3, [pc, #188]	; (800067c <GPS_Read+0x32c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a2e      	ldr	r2, [pc, #184]	; (800067c <GPS_Read+0x32c>)
 80005c4:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[30] - 48) * 100000000;
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <GPS_Read+0x308>)
 80005c8:	7f9b      	ldrb	r3, [r3, #30]
 80005ca:	3b30      	subs	r3, #48	; 0x30
 80005cc:	4a29      	ldr	r2, [pc, #164]	; (8000674 <GPS_Read+0x324>)
 80005ce:	fb02 f203 	mul.w	r2, r2, r3
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <GPS_Read+0x32c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <GPS_Read+0x32c>)
 80005da:	6013      	str	r3, [r2, #0]
				longitude += ((int32_t)gps_buffer[31] - 48) * 10000000;
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <GPS_Read+0x308>)
 80005de:	7fdb      	ldrb	r3, [r3, #31]
 80005e0:	3b30      	subs	r3, #48	; 0x30
 80005e2:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <GPS_Read+0x310>)
 80005e4:	fb02 f203 	mul.w	r2, r2, r3
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <GPS_Read+0x32c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <GPS_Read+0x32c>)
 80005f0:	6013      	str	r3, [r2, #0]
				longitude /= (int32_t)10;
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <GPS_Read+0x32c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a20      	ldr	r2, [pc, #128]	; (8000678 <GPS_Read+0x328>)
 80005f8:	fb82 1203 	smull	r1, r2, r2, r3
 80005fc:	1092      	asrs	r2, r2, #2
 80005fe:	17db      	asrs	r3, r3, #31
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <GPS_Read+0x32c>)
 8000604:	6013      	str	r3, [r2, #0]

				if (gps_buffer[27] == 'S')
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <GPS_Read+0x308>)
 8000608:	7edb      	ldrb	r3, [r3, #27]
 800060a:	2b53      	cmp	r3, #83	; 0x53
 800060c:	d104      	bne.n	8000618 <GPS_Read+0x2c8>
					latitude *= -1;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <GPS_Read+0x314>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	425b      	negs	r3, r3
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <GPS_Read+0x314>)
 8000616:	6013      	str	r3, [r2, #0]

				if (gps_buffer[41] == 'W')
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <GPS_Read+0x308>)
 800061a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800061e:	2b57      	cmp	r3, #87	; 0x57
 8000620:	d104      	bne.n	800062c <GPS_Read+0x2dc>
					longitude *= -1;
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <GPS_Read+0x32c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	425b      	negs	r3, r3
 8000628:	4a14      	ldr	r2, [pc, #80]	; (800067c <GPS_Read+0x32c>)
 800062a:	6013      	str	r3, [r2, #0]

				sat_count = (uint8_t)((int32_t)gps_buffer[45] - 48) * (uint8_t)10;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <GPS_Read+0x308>)
 800062e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000632:	461a      	mov	r2, r3
 8000634:	0092      	lsls	r2, r2, #2
 8000636:	4413      	add	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	3320      	adds	r3, #32
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <GPS_Read+0x334>)
 8000642:	701a      	strb	r2, [r3, #0]
				sat_count += (uint8_t)((int32_t)gps_buffer[46] - 48);
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <GPS_Read+0x308>)
 8000646:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <GPS_Read+0x334>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	3b30      	subs	r3, #48	; 0x30
 8000654:	b2da      	uxtb	r2, r3
 8000656:	e017      	b.n	8000688 <GPS_Read+0x338>
 8000658:	20000120 	.word	0x20000120
 800065c:	20000065 	.word	0x20000065
 8000660:	00989680 	.word	0x00989680
 8000664:	20000068 	.word	0x20000068
 8000668:	000f4240 	.word	0x000f4240
 800066c:	000186a0 	.word	0x000186a0
 8000670:	2aaaaaab 	.word	0x2aaaaaab
 8000674:	05f5e100 	.word	0x05f5e100
 8000678:	66666667 	.word	0x66666667
 800067c:	2000006c 	.word	0x2000006c
 8000680:	3b9aca00 	.word	0x3b9aca00
 8000684:	20000066 	.word	0x20000066
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <GPS_Read+0x380>)
 800068a:	701a      	strb	r2, [r3, #0]

				GPS_Send_Packet();
 800068c:	f000 f82a 	bl	80006e4 <GPS_Send_Packet>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	480f      	ldr	r0, [pc, #60]	; (80006d4 <GPS_Read+0x384>)
 8000696:	f002 f981 	bl	800299c <HAL_GPIO_WritePin>
			}
		}

		for(int32_t i = 0; i < 99; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	e007      	b.n	80006b0 <GPS_Read+0x360>
		{
			gps_buffer[i] = '-';
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <GPS_Read+0x388>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	222d      	movs	r2, #45	; 0x2d
 80006a8:	701a      	strb	r2, [r3, #0]
		for(int32_t i = 0; i < 99; i++)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b62      	cmp	r3, #98	; 0x62
 80006b4:	ddf4      	ble.n	80006a0 <GPS_Read+0x350>
		}

		gps_buffer_index = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <GPS_Read+0x38c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]

		USART2->CR1 |= USART_CR1_RXNEIE | USART_CR1_RE;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <GPS_Read+0x390>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <GPS_Read+0x390>)
 80006c2:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80006c6:	60d3      	str	r3, [r2, #12]
	}
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000066 	.word	0x20000066
 80006d4:	40010800 	.word	0x40010800
 80006d8:	20000120 	.word	0x20000120
 80006dc:	20000038 	.word	0x20000038
 80006e0:	40004400 	.word	0x40004400

080006e4 <GPS_Send_Packet>:

void GPS_Send_Packet()
{
 80006e4:	b490      	push	{r4, r7}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	if(!waiting_for_gps_packet_sent)
 80006ea:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <GPS_Send_Packet+0xc4>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d154      	bne.n	800079c <GPS_Send_Packet+0xb8>
	{
		packets_to_receive[packets_to_receive_counter].payload[0] = 0xFD;
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <GPS_Send_Packet+0xc8>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	492d      	ldr	r1, [pc, #180]	; (80007b0 <GPS_Send_Packet+0xcc>)
 80006fa:	4613      	mov	r3, r2
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	4413      	add	r3, r2
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	440b      	add	r3, r1
 8000706:	22fd      	movs	r2, #253	; 0xfd
 8000708:	701a      	strb	r2, [r3, #0]
		packets_to_receive[packets_to_receive_counter].payload[1] = sat_count;
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <GPS_Send_Packet+0xc8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <GPS_Send_Packet+0xd0>)
 8000712:	7818      	ldrb	r0, [r3, #0]
 8000714:	4926      	ldr	r1, [pc, #152]	; (80007b0 <GPS_Send_Packet+0xcc>)
 8000716:	4613      	mov	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	440b      	add	r3, r1
 8000722:	3301      	adds	r3, #1
 8000724:	4602      	mov	r2, r0
 8000726:	701a      	strb	r2, [r3, #0]

		//packets_to_receive[packets_to_receive_counter].width = packet_width;
		//packets_to_receive[packets_to_receive_counter].reliable = 1;

		for(int i = 0; i < 4; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	e026      	b.n	800077c <GPS_Send_Packet+0x98>
		{
			packets_to_receive[packets_to_receive_counter].payload[i + 2] = *((uint8_t *)&latitude + i);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <GPS_Send_Packet+0xd4>)
 8000732:	4413      	add	r3, r2
 8000734:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <GPS_Send_Packet+0xc8>)
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	3102      	adds	r1, #2
 800073c:	781c      	ldrb	r4, [r3, #0]
 800073e:	481c      	ldr	r0, [pc, #112]	; (80007b0 <GPS_Send_Packet+0xcc>)
 8000740:	4613      	mov	r3, r2
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4413      	add	r3, r2
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	4413      	add	r3, r2
 800074a:	4403      	add	r3, r0
 800074c:	440b      	add	r3, r1
 800074e:	4622      	mov	r2, r4
 8000750:	701a      	strb	r2, [r3, #0]
			packets_to_receive[packets_to_receive_counter].payload[i + 6] = *((uint8_t *)&longitude + i);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a19      	ldr	r2, [pc, #100]	; (80007bc <GPS_Send_Packet+0xd8>)
 8000756:	4413      	add	r3, r2
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <GPS_Send_Packet+0xc8>)
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	3106      	adds	r1, #6
 8000760:	781c      	ldrb	r4, [r3, #0]
 8000762:	4813      	ldr	r0, [pc, #76]	; (80007b0 <GPS_Send_Packet+0xcc>)
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	4403      	add	r3, r0
 8000770:	440b      	add	r3, r1
 8000772:	4622      	mov	r2, r4
 8000774:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 4; i++)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b03      	cmp	r3, #3
 8000780:	ddd5      	ble.n	800072e <GPS_Send_Packet+0x4a>
		}

		waiting_for_gps_packet_sent = 1;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <GPS_Send_Packet+0xc4>)
 8000784:	2201      	movs	r2, #1
 8000786:	701a      	strb	r2, [r3, #0]

		if(packets_to_receive_counter < 30)
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <GPS_Send_Packet+0xc8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b1d      	cmp	r3, #29
 800078e:	d805      	bhi.n	800079c <GPS_Send_Packet+0xb8>
			packets_to_receive_counter++;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <GPS_Send_Packet+0xc8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <GPS_Send_Packet+0xc8>)
 800079a:	701a      	strb	r2, [r3, #0]
	}
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc90      	pop	{r4, r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000070 	.word	0x20000070
 80007ac:	2000007e 	.word	0x2000007e
 80007b0:	2000075c 	.word	0x2000075c
 80007b4:	20000066 	.word	0x20000066
 80007b8:	20000068 	.word	0x20000068
 80007bc:	2000006c 	.word	0x2000006c

080007c0 <GPS_Init>:

void GPS_Init()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	HAL_Delay(250);
 80007c6:	20fa      	movs	r0, #250	; 0xfa
 80007c8:	f001 fb8c 	bl	8001ee4 <HAL_Delay>

	for(int32_t i = 0; i < 99; i++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	e007      	b.n	80007e2 <GPS_Init+0x22>
	{
		gps_buffer[i] = '-';
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <GPS_Init+0xb0>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	222d      	movs	r2, #45	; 0x2d
 80007da:	701a      	strb	r2, [r3, #0]
	for(int32_t i = 0; i < 99; i++)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b62      	cmp	r3, #98	; 0x62
 80007e6:	ddf4      	ble.n	80007d2 <GPS_Init+0x12>
	}

	Custom_GPS_Send(Disable_GPGSV, 11);
 80007e8:	210b      	movs	r1, #11
 80007ea:	4822      	ldr	r0, [pc, #136]	; (8000874 <GPS_Init+0xb4>)
 80007ec:	f000 f84c 	bl	8000888 <Custom_GPS_Send>
	//HAL_UART_Transmit(&huart2, Disable_GPGSV, 11, HAL_MAX_DELAY);
	HAL_Delay(250);
 80007f0:	20fa      	movs	r0, #250	; 0xfa
 80007f2:	f001 fb77 	bl	8001ee4 <HAL_Delay>
	Custom_GPS_Send(Set_to_5Hz, 14);
 80007f6:	210e      	movs	r1, #14
 80007f8:	481f      	ldr	r0, [pc, #124]	; (8000878 <GPS_Init+0xb8>)
 80007fa:	f000 f845 	bl	8000888 <Custom_GPS_Send>
	//HAL_UART_Transmit(&huart2, Set_to_5Hz, 14, HAL_MAX_DELAY);
	HAL_Delay(250);
 80007fe:	20fa      	movs	r0, #250	; 0xfa
 8000800:	f001 fb70 	bl	8001ee4 <HAL_Delay>
	Custom_GPS_Send(Set_to_57kbps, 28);
 8000804:	211c      	movs	r1, #28
 8000806:	481d      	ldr	r0, [pc, #116]	; (800087c <GPS_Init+0xbc>)
 8000808:	f000 f83e 	bl	8000888 <Custom_GPS_Send>
	//HAL_UART_Transmit(&huart2, Set_to_57kbps, 28, HAL_MAX_DELAY);
	HAL_Delay(250);
 800080c:	20fa      	movs	r0, #250	; 0xfa
 800080e:	f001 fb69 	bl	8001ee4 <HAL_Delay>
	//sprintf((char *)temp_uart_buffer, "%s", "Worked\n");
	//HAL_UART_Transmit(&huart1, temp_uart_buffer, 7, HAL_MAX_DELAY);
	//USART2->CR1 &= ~(USART_CR1_UE);
	//USART2->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), 57600);
	//USART2->BRR = 57600;
	HAL_UART_Abort(&huart2);
 8000812:	481b      	ldr	r0, [pc, #108]	; (8000880 <GPS_Init+0xc0>)
 8000814:	f005 fa87 	bl	8005d26 <HAL_UART_Abort>
	//HAL_UART_
	HAL_Delay(250);
 8000818:	20fa      	movs	r0, #250	; 0xfa
 800081a:	f001 fb63 	bl	8001ee4 <HAL_Delay>
	huart2.Init.BaudRate = 57600;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <GPS_Init+0xc0>)
 8000820:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000824:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <GPS_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <GPS_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <GPS_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <GPS_Init+0xc0>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <GPS_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <GPS_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <GPS_Init+0xc0>)
 800084c:	f005 fa1e 	bl	8005c8c <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <GPS_Init+0x9a>
	{
		Error_Handler();
 8000856:	f000 fc95 	bl	8001184 <Error_Handler>
	}

	USART2->CR1 |= USART_CR1_RXNEIE | USART_CR1_RE;
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <GPS_Init+0xc4>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <GPS_Init+0xc4>)
 8000860:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000864:	60d3      	str	r3, [r2, #12]
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000120 	.word	0x20000120
 8000874:	20000000 	.word	0x20000000
 8000878:	2000000c 	.word	0x2000000c
 800087c:	2000001c 	.word	0x2000001c
 8000880:	20000d40 	.word	0x20000d40
 8000884:	40004400 	.word	0x40004400

08000888 <Custom_GPS_Send>:

void Custom_GPS_Send(uint8_t *data, uint8_t size)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	uint8_t bytes_left = size;
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	73fb      	strb	r3, [r7, #15]

	USART2->CR1 |= USART_CR1_TE;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <Custom_GPS_Send+0x68>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <Custom_GPS_Send+0x68>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	60d3      	str	r3, [r2, #12]

	while(bytes_left > 0)
 80008a4:	e00f      	b.n	80008c6 <Custom_GPS_Send+0x3e>
	{
		USART2->DR = (uint8_t)(*data++);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <Custom_GPS_Send+0x68>)
 80008b0:	605a      	str	r2, [r3, #4]

		while((USART2->SR & USART_SR_TXE) == 0);
 80008b2:	bf00      	nop
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <Custom_GPS_Send+0x68>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0f9      	beq.n	80008b4 <Custom_GPS_Send+0x2c>
		bytes_left--;
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
	while(bytes_left > 0)
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1ec      	bne.n	80008a6 <Custom_GPS_Send+0x1e>
	}

	while((USART2->SR & USART_SR_TC) == 0);
 80008cc:	bf00      	nop
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <Custom_GPS_Send+0x68>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f9      	beq.n	80008ce <Custom_GPS_Send+0x46>

	USART2->CR1 &= ~(USART_CR1_TE);
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <Custom_GPS_Send+0x68>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <Custom_GPS_Send+0x68>)
 80008e0:	f023 0308 	bic.w	r3, r3, #8
 80008e4:	60d3      	str	r3, [r2, #12]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_I2C1_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x50>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_I2C1_Init+0x58>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 8;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C1_Init+0x50>)
 800090c:	2208      	movs	r2, #8
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_I2C1_Init+0x50>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_I2C1_Init+0x50>)
 8000932:	f002 f87b 	bl	8002a2c <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 fc22 	bl	8001184 <Error_Handler>
  }

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000184 	.word	0x20000184
 8000948:	40005400 	.word	0x40005400
 800094c:	00061a80 	.word	0x00061a80

08000950 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <HAL_I2C_MspInit+0x90>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d133      	bne.n	80009d8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_I2C_MspInit+0x94>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <HAL_I2C_MspInit+0x94>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_I2C_MspInit+0x94>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000988:	23c0      	movs	r3, #192	; 0xc0
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4813      	ldr	r0, [pc, #76]	; (80009e8 <HAL_I2C_MspInit+0x98>)
 800099c:	f001 fea4 	bl	80026e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_I2C_MspInit+0x94>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_I2C_MspInit+0x94>)
 80009a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009aa:	61d3      	str	r3, [r2, #28]
 80009ac:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_I2C_MspInit+0x94>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	201f      	movs	r0, #31
 80009be:	f001 fd94 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009c2:	201f      	movs	r0, #31
 80009c4:	f001 fdad 	bl	8002522 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2020      	movs	r0, #32
 80009ce:	f001 fd8c 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009d2:	2020      	movs	r0, #32
 80009d4:	f001 fda5 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40010c00 	.word	0x40010c00

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b090      	sub	sp, #64	; 0x40
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f001 fa15 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 fa8b 	bl	8000f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fa:	f7ff fc21 	bl	8000240 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009fe:	f7ff fba5 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a02:	f7ff ff77 	bl	80008f4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000a06:	f000 fe93 	bl	8001730 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000a0a:	f001 f895 	bl	8001b38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a0e:	f001 f8bd 	bl	8001b8c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a12:	f001 f8e5 	bl	8001be0 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000a16:	f001 f81b 	bl	8001a50 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  nrf_radio.spiHandle = &hspi2;
 8000a1a:	4bba      	ldr	r3, [pc, #744]	; (8000d04 <main+0x318>)
 8000a1c:	4aba      	ldr	r2, [pc, #744]	; (8000d08 <main+0x31c>)
 8000a1e:	601a      	str	r2, [r3, #0]
  nrf_radio.csnPinPort = NRF_CSN_GPIO_Port;
 8000a20:	4bb8      	ldr	r3, [pc, #736]	; (8000d04 <main+0x318>)
 8000a22:	4aba      	ldr	r2, [pc, #744]	; (8000d0c <main+0x320>)
 8000a24:	605a      	str	r2, [r3, #4]
  nrf_radio.cePinPort = NRF_CE_GPIO_Port;
 8000a26:	4bb7      	ldr	r3, [pc, #732]	; (8000d04 <main+0x318>)
 8000a28:	4ab9      	ldr	r2, [pc, #740]	; (8000d10 <main+0x324>)
 8000a2a:	609a      	str	r2, [r3, #8]
  nrf_radio.csnPin = NRF_CSN_Pin;
 8000a2c:	4bb5      	ldr	r3, [pc, #724]	; (8000d04 <main+0x318>)
 8000a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a32:	819a      	strh	r2, [r3, #12]
  nrf_radio.cePin = NRF_CE_Pin;
 8000a34:	4bb3      	ldr	r3, [pc, #716]	; (8000d04 <main+0x318>)
 8000a36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a3a:	81da      	strh	r2, [r3, #14]

  GPS_Init();
 8000a3c:	f7ff fec0 	bl	80007c0 <GPS_Init>

  HAL_Delay(500);
 8000a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a44:	f001 fa4e 	bl	8001ee4 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim4);
 8000a48:	48b2      	ldr	r0, [pc, #712]	; (8000d14 <main+0x328>)
 8000a4a:	f004 fdcb 	bl	80055e4 <HAL_TIM_Base_Start_IT>

  empty_data_packet.width = 1;
 8000a4e:	4bb2      	ldr	r3, [pc, #712]	; (8000d18 <main+0x32c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  empty_data_packet.reliable = 0;
 8000a56:	4bb0      	ldr	r3, [pc, #704]	; (8000d18 <main+0x32c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  unreliable_packet.width = 0;
 8000a5e:	4baf      	ldr	r3, [pc, #700]	; (8000d1c <main+0x330>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  current_i2c_packet.width = 0;
 8000a66:	4bae      	ldr	r3, [pc, #696]	; (8000d20 <main+0x334>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  for(int i = 0; i < 35; i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a72:	e011      	b.n	8000a98 <main+0xac>
  {
	  empty_data_packet.payload[i] = 0x00;
 8000a74:	4aa8      	ldr	r2, [pc, #672]	; (8000d18 <main+0x32c>)
 8000a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a78:	4413      	add	r3, r2
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	  unreliable_packet.payload[i] = 0x00;
 8000a7e:	4aa7      	ldr	r2, [pc, #668]	; (8000d1c <main+0x330>)
 8000a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a82:	4413      	add	r3, r2
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	  current_i2c_packet.payload[i] = 0x00;
 8000a88:	4aa5      	ldr	r2, [pc, #660]	; (8000d20 <main+0x334>)
 8000a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a8c:	4413      	add	r3, r2
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 8000a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a94:	3301      	adds	r3, #1
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a9a:	2b22      	cmp	r3, #34	; 0x22
 8000a9c:	ddea      	ble.n	8000a74 <main+0x88>
  }

  packet_to_send_to_master = &empty_data_packet;
 8000a9e:	4ba1      	ldr	r3, [pc, #644]	; (8000d24 <main+0x338>)
 8000aa0:	4a9d      	ldr	r2, [pc, #628]	; (8000d18 <main+0x32c>)
 8000aa2:	601a      	str	r2, [r3, #0]

  NRF24_Init(&nrf_radio);
 8000aa4:	4897      	ldr	r0, [pc, #604]	; (8000d04 <main+0x318>)
 8000aa6:	f000 fb73 	bl	8001190 <NRF24_Init>

  HAL_Delay(500);
 8000aaa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aae:	f001 fa19 	bl	8001ee4 <HAL_Delay>

  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35);
 8000ab2:	2223      	movs	r2, #35	; 0x23
 8000ab4:	499a      	ldr	r1, [pc, #616]	; (8000d20 <main+0x334>)
 8000ab6:	489c      	ldr	r0, [pc, #624]	; (8000d28 <main+0x33c>)
 8000ab8:	f002 f8e0 	bl	8002c7c <HAL_I2C_Slave_Receive_IT>

  test_i2c_last_received = GetMillis();
 8000abc:	f000 fb1c 	bl	80010f8 <GetMillis>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b9a      	ldr	r3, [pc, #616]	; (8000d2c <main+0x340>)
 8000ac4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000ac6:	4898      	ldr	r0, [pc, #608]	; (8000d28 <main+0x33c>)
 8000ac8:	f002 fa2a 	bl	8002f20 <HAL_I2C_EnableListen_IT>
	  else
	  {
		  //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
	  }*/

	  if(GetMillisDifference(&test_led_timer) > 500)
 8000acc:	4898      	ldr	r0, [pc, #608]	; (8000d30 <main+0x344>)
 8000ace:	f000 fb25 	bl	800111c <GetMillisDifference>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ad8:	d908      	bls.n	8000aec <main+0x100>
	  {
		  test_led_timer = GetMillis();
 8000ada:	f000 fb0d 	bl	80010f8 <GetMillis>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	4b93      	ldr	r3, [pc, #588]	; (8000d30 <main+0x344>)
 8000ae2:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4889      	ldr	r0, [pc, #548]	; (8000d0c <main+0x320>)
 8000ae8:	f001 ff70 	bl	80029cc <HAL_GPIO_TogglePin>
	  }


	  if(radio_irq_flag == 1)
 8000aec:	4b91      	ldr	r3, [pc, #580]	; (8000d34 <main+0x348>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	f040 809e 	bne.w	8000c34 <main+0x248>
	  {
		  radio_irq_flag = 0;
 8000af8:	4b8e      	ldr	r3, [pc, #568]	; (8000d34 <main+0x348>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]

		  uint8_t reg_value = NRF24_GetAddress(&nrf_radio, 7);
 8000afe:	2107      	movs	r1, #7
 8000b00:	4880      	ldr	r0, [pc, #512]	; (8000d04 <main+0x318>)
 8000b02:	f000 fd59 	bl	80015b8 <NRF24_GetAddress>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		  uint8_t tx_success = reg_value & (1 << 5);
 8000b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		  uint8_t rx_success = reg_value & (1 << 6);
 8000b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b20:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		  uint8_t tx_fail = reg_value & (1 << 4);
 8000b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	f887 3020 	strb.w	r3, [r7, #32]

		  if(tx_success)
 8000b30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d070      	beq.n	8000c1a <main+0x22e>
		  {
			  waiting_for_ack = 0;
 8000b38:	4b7f      	ldr	r3, [pc, #508]	; (8000d38 <main+0x34c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]

			  if(reliable_packet_to_gcs_counter > 0)
 8000b3e:	4b7f      	ldr	r3, [pc, #508]	; (8000d3c <main+0x350>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d053      	beq.n	8000bee <main+0x202>
			  {
				  //Get rid of first index of array and shift
				  for(int i = 0; i < reliable_packet_to_gcs_counter - 1; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b4a:	e044      	b.n	8000bd6 <main+0x1ea>
				  {
					  reliable_packets_to_gcs[i].width = reliable_packets_to_gcs[i+1].width;
 8000b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	497b      	ldr	r1, [pc, #492]	; (8000d40 <main+0x354>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	3323      	adds	r3, #35	; 0x23
 8000b60:	7818      	ldrb	r0, [r3, #0]
 8000b62:	4977      	ldr	r1, [pc, #476]	; (8000d40 <main+0x354>)
 8000b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	3323      	adds	r3, #35	; 0x23
 8000b74:	4602      	mov	r2, r0
 8000b76:	701a      	strb	r2, [r3, #0]
					  reliable_packets_to_gcs[i].reliable = 1;
 8000b78:	4971      	ldr	r1, [pc, #452]	; (8000d40 <main+0x354>)
 8000b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	4413      	add	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	3324      	adds	r3, #36	; 0x24
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]

					  for(int j = 0; j < 35; j++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	637b      	str	r3, [r7, #52]	; 0x34
 8000b92:	e01a      	b.n	8000bca <main+0x1de>
					  {
						  reliable_packets_to_gcs[i].payload[j] = reliable_packets_to_gcs[i+1].payload[j];
 8000b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	4969      	ldr	r1, [pc, #420]	; (8000d40 <main+0x354>)
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4413      	add	r3, r2
 8000ba4:	18ca      	adds	r2, r1, r3
 8000ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba8:	4413      	add	r3, r2
 8000baa:	7818      	ldrb	r0, [r3, #0]
 8000bac:	4964      	ldr	r1, [pc, #400]	; (8000d40 <main+0x354>)
 8000bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	18ca      	adds	r2, r1, r3
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	701a      	strb	r2, [r3, #0]
					  for(int j = 0; j < 35; j++)
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8000bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bcc:	2b22      	cmp	r3, #34	; 0x22
 8000bce:	dde1      	ble.n	8000b94 <main+0x1a8>
				  for(int i = 0; i < reliable_packet_to_gcs_counter - 1; i++)
 8000bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bd6:	4b59      	ldr	r3, [pc, #356]	; (8000d3c <main+0x350>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bde:	429a      	cmp	r2, r3
 8000be0:	dbb4      	blt.n	8000b4c <main+0x160>
					  }
				  }

				  reliable_packet_to_gcs_counter--;
 8000be2:	4b56      	ldr	r3, [pc, #344]	; (8000d3c <main+0x350>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b54      	ldr	r3, [pc, #336]	; (8000d3c <main+0x350>)
 8000bec:	701a      	strb	r2, [r3, #0]
			  }

			  if(rx_success)
 8000bee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00b      	beq.n	8000c0e <main+0x222>
			  {
				  NRF24_PacketRead(&nrf_radio);
 8000bf6:	4843      	ldr	r0, [pc, #268]	; (8000d04 <main+0x318>)
 8000bf8:	f000 fbd4 	bl	80013a4 <NRF24_PacketRead>
				  NRF24_FlushRX(&nrf_radio);
 8000bfc:	4841      	ldr	r0, [pc, #260]	; (8000d04 <main+0x318>)
 8000bfe:	f000 fd33 	bl	8001668 <NRF24_FlushRX>
				  NRF24_WriteBit(&nrf_radio, 7, 6, 1);
 8000c02:	2301      	movs	r3, #1
 8000c04:	2206      	movs	r2, #6
 8000c06:	2107      	movs	r1, #7
 8000c08:	483e      	ldr	r0, [pc, #248]	; (8000d04 <main+0x318>)
 8000c0a:	f000 fc77 	bl	80014fc <NRF24_WriteBit>
			  }

			  NRF24_WriteBit(&nrf_radio, 7, 5, 1);
 8000c0e:	2301      	movs	r3, #1
 8000c10:	2205      	movs	r2, #5
 8000c12:	2107      	movs	r1, #7
 8000c14:	483b      	ldr	r0, [pc, #236]	; (8000d04 <main+0x318>)
 8000c16:	f000 fc71 	bl	80014fc <NRF24_WriteBit>
		  }

		  if(tx_fail)
 8000c1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d008      	beq.n	8000c34 <main+0x248>
		  {
			  waiting_for_ack = 0;
 8000c22:	4b45      	ldr	r3, [pc, #276]	; (8000d38 <main+0x34c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
			  NRF24_WriteBit(&nrf_radio, 7, 4, 1);
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	2107      	movs	r1, #7
 8000c2e:	4835      	ldr	r0, [pc, #212]	; (8000d04 <main+0x318>)
 8000c30:	f000 fc64 	bl	80014fc <NRF24_WriteBit>
		  }
	  }

	  if(GetMicrosDifference(&time_since_last_radio_send) > 500 && (new_packet_to_send_available || reliable_packet_to_gcs_counter > 0) && waiting_for_ack == 0)
 8000c34:	4843      	ldr	r0, [pc, #268]	; (8000d44 <main+0x358>)
 8000c36:	f000 fa7f 	bl	8001138 <GetMicrosDifference>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c40:	d922      	bls.n	8000c88 <main+0x29c>
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <main+0x35c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d103      	bne.n	8000c54 <main+0x268>
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	; (8000d3c <main+0x350>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d019      	beq.n	8000c88 <main+0x29c>
 8000c54:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <main+0x34c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d114      	bne.n	8000c88 <main+0x29c>
	  {
		  time_since_last_radio_send = GetMicros();
 8000c5e:	f000 fa3f 	bl	80010e0 <GetMicros>
 8000c62:	4602      	mov	r2, r0
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <main+0x358>)
 8000c66:	601a      	str	r2, [r3, #0]

		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);

		  if(reliable_packet_to_gcs_counter > 0)
 8000c68:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <main+0x350>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d004      	beq.n	8000c7a <main+0x28e>
		  {
			  NRF24_PacketSend(&nrf_radio, &reliable_packets_to_gcs[0]);
 8000c70:	4933      	ldr	r1, [pc, #204]	; (8000d40 <main+0x354>)
 8000c72:	4824      	ldr	r0, [pc, #144]	; (8000d04 <main+0x318>)
 8000c74:	f000 fb34 	bl	80012e0 <NRF24_PacketSend>
 8000c78:	e006      	b.n	8000c88 <main+0x29c>
		  }
		  else
		  {
			  new_packet_to_send_available = 0;
 8000c7a:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <main+0x35c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
			  NRF24_PacketSend(&nrf_radio, &unreliable_packet);
 8000c80:	4926      	ldr	r1, [pc, #152]	; (8000d1c <main+0x330>)
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <main+0x318>)
 8000c84:	f000 fb2c 	bl	80012e0 <NRF24_PacketSend>
		  }
	  }

	  if(telem_i2c_send_done)
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <main+0x360>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8092 	beq.w	8000db8 <main+0x3cc>
	  {
		  telem_i2c_send_done = 0;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <main+0x360>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]

		  if(packets_to_receive_counter > 0)
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <main+0x364>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 808a 	beq.w	8000db8 <main+0x3cc>
		  {
			  if(packets_to_receive[0].payload[0] == 0xFD)
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <main+0x368>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2bfd      	cmp	r3, #253	; 0xfd
 8000cac:	d102      	bne.n	8000cb4 <main+0x2c8>
				  waiting_for_gps_packet_sent = 0;
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <main+0x36c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]

			  for(int i = 0; i < packets_to_receive_counter - 1; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb8:	e072      	b.n	8000da0 <main+0x3b4>
			  {
				  packets_to_receive[i].width = packets_to_receive[i+1].width;
 8000cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	4925      	ldr	r1, [pc, #148]	; (8000d54 <main+0x368>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3323      	adds	r3, #35	; 0x23
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2d8      	uxtb	r0, r3
 8000cd2:	4920      	ldr	r1, [pc, #128]	; (8000d54 <main+0x368>)
 8000cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	3323      	adds	r3, #35	; 0x23
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	701a      	strb	r2, [r3, #0]
				  packets_to_receive[i].reliable = 0;
 8000ce8:	491a      	ldr	r1, [pc, #104]	; (8000d54 <main+0x368>)
 8000cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cec:	4613      	mov	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3324      	adds	r3, #36	; 0x24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]

				  for(int j = 0; j < 35; j++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d02:	e047      	b.n	8000d94 <main+0x3a8>
 8000d04:	20000204 	.word	0x20000204
 8000d08:	20000c28 	.word	0x20000c28
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	20000c80 	.word	0x20000c80
 8000d18:	20000268 	.word	0x20000268
 8000d1c:	20000c00 	.word	0x20000c00
 8000d20:	20000294 	.word	0x20000294
 8000d24:	200001fc 	.word	0x200001fc
 8000d28:	20000184 	.word	0x20000184
 8000d2c:	20000290 	.word	0x20000290
 8000d30:	20000078 	.word	0x20000078
 8000d34:	2000007f 	.word	0x2000007f
 8000d38:	20000080 	.word	0x20000080
 8000d3c:	2000007d 	.word	0x2000007d
 8000d40:	200002bc 	.word	0x200002bc
 8000d44:	20000074 	.word	0x20000074
 8000d48:	20000072 	.word	0x20000072
 8000d4c:	2000007c 	.word	0x2000007c
 8000d50:	2000007e 	.word	0x2000007e
 8000d54:	2000075c 	.word	0x2000075c
 8000d58:	20000070 	.word	0x20000070
				  {
					  packets_to_receive[i].payload[j] = packets_to_receive[i+1].payload[j];
 8000d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4961      	ldr	r1, [pc, #388]	; (8000ee8 <main+0x4fc>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	18ca      	adds	r2, r1, r3
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	4413      	add	r3, r2
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	495c      	ldr	r1, [pc, #368]	; (8000ee8 <main+0x4fc>)
 8000d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	4413      	add	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	18ca      	adds	r2, r1, r3
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	4413      	add	r3, r2
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	701a      	strb	r2, [r3, #0]
				  for(int j = 0; j < 35; j++)
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	3301      	adds	r3, #1
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d96:	2b22      	cmp	r3, #34	; 0x22
 8000d98:	dde0      	ble.n	8000d5c <main+0x370>
			  for(int i = 0; i < packets_to_receive_counter - 1; i++)
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000da0:	4b52      	ldr	r3, [pc, #328]	; (8000eec <main+0x500>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da8:	429a      	cmp	r2, r3
 8000daa:	db86      	blt.n	8000cba <main+0x2ce>
				  }
			  }

			  packets_to_receive_counter--;
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <main+0x500>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b4d      	ldr	r3, [pc, #308]	; (8000eec <main+0x500>)
 8000db6:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(i2c_receive_flag)
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <main+0x504>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 808e 	beq.w	8000ee0 <main+0x4f4>
	  {
		  i2c_receive_flag = 0;
 8000dc4:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <main+0x504>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
		  new_packet_to_send_available = 1;
 8000dca:	4b4a      	ldr	r3, [pc, #296]	; (8000ef4 <main+0x508>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]

		  current_i2c_packet.width = current_i2c_packet.payload[32];
 8000dd0:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <main+0x50c>)
 8000dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <main+0x50c>)
 8000dda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		  current_i2c_packet.reliable = current_i2c_packet.payload[33];
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <main+0x50c>)
 8000de0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <main+0x50c>)
 8000de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		  if(current_i2c_packet.reliable && reliable_packet_to_gcs_counter < 31)
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <main+0x50c>)
 8000dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d044      	beq.n	8000e82 <main+0x496>
 8000df8:	4b40      	ldr	r3, [pc, #256]	; (8000efc <main+0x510>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b1e      	cmp	r3, #30
 8000dfe:	d840      	bhi.n	8000e82 <main+0x496>
		  {
			  reliable_packets_to_gcs[reliable_packet_to_gcs_counter].width = current_i2c_packet.width;
 8000e00:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <main+0x510>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <main+0x50c>)
 8000e08:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	493c      	ldr	r1, [pc, #240]	; (8000f00 <main+0x514>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4413      	add	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3323      	adds	r3, #35	; 0x23
 8000e1e:	4602      	mov	r2, r0
 8000e20:	701a      	strb	r2, [r3, #0]
			  reliable_packets_to_gcs[reliable_packet_to_gcs_counter].reliable = 1;
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <main+0x510>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	4935      	ldr	r1, [pc, #212]	; (8000f00 <main+0x514>)
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	3324      	adds	r3, #36	; 0x24
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 35; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e40:	e015      	b.n	8000e6e <main+0x482>
			  {
				  reliable_packets_to_gcs[reliable_packet_to_gcs_counter].payload[i] = current_i2c_packet.payload[i];
 8000e42:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <main+0x510>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	492b      	ldr	r1, [pc, #172]	; (8000ef8 <main+0x50c>)
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	440b      	add	r3, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2d8      	uxtb	r0, r3
 8000e52:	492b      	ldr	r1, [pc, #172]	; (8000f00 <main+0x514>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	18ca      	adds	r2, r1, r3
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	4413      	add	r3, r2
 8000e64:	4602      	mov	r2, r0
 8000e66:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 35; i++)
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e70:	2b22      	cmp	r3, #34	; 0x22
 8000e72:	dde6      	ble.n	8000e42 <main+0x456>
			  }

			  reliable_packet_to_gcs_counter++;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <main+0x510>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <main+0x510>)
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e023      	b.n	8000eca <main+0x4de>
		  }
		  else if(current_i2c_packet.reliable == 0)
 8000e82:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <main+0x50c>)
 8000e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d11d      	bne.n	8000eca <main+0x4de>
		  {
			  unreliable_packet.width = current_i2c_packet.width;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <main+0x50c>)
 8000e90:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <main+0x518>)
 8000e98:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			  unreliable_packet.reliable = 0;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <main+0x518>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			  for(int i = 0; i < 35; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea8:	e00c      	b.n	8000ec4 <main+0x4d8>
			  {
				  unreliable_packet.payload[i] = current_i2c_packet.payload[i];
 8000eaa:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <main+0x50c>)
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2d9      	uxtb	r1, r3
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <main+0x518>)
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	4413      	add	r3, r2
 8000eba:	460a      	mov	r2, r1
 8000ebc:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 35; i++)
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	2b22      	cmp	r3, #34	; 0x22
 8000ec8:	ddef      	ble.n	8000eaa <main+0x4be>
			  }
		  }

		  if(packets_to_receive_counter > 0)
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <main+0x500>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <main+0x4ee>
		  {
			  packet_to_send_to_master = &packets_to_receive[0];
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <main+0x51c>)
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <main+0x4fc>)
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e002      	b.n	8000ee0 <main+0x4f4>
		  }
		  else
		  {
			  packet_to_send_to_master = &empty_data_packet;
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <main+0x51c>)
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <main+0x520>)
 8000ede:	601a      	str	r2, [r3, #0]
		  }
	  }

	  GPS_Read();
 8000ee0:	f7ff fa36 	bl	8000350 <GPS_Read>
	  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000ee4:	e5ef      	b.n	8000ac6 <main+0xda>
 8000ee6:	bf00      	nop
 8000ee8:	2000075c 	.word	0x2000075c
 8000eec:	2000007e 	.word	0x2000007e
 8000ef0:	20000071 	.word	0x20000071
 8000ef4:	20000072 	.word	0x20000072
 8000ef8:	20000294 	.word	0x20000294
 8000efc:	2000007d 	.word	0x2000007d
 8000f00:	200002bc 	.word	0x200002bc
 8000f04:	20000c00 	.word	0x20000c00
 8000f08:	200001fc 	.word	0x200001fc
 8000f0c:	20000268 	.word	0x20000268

08000f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1a:	2228      	movs	r2, #40	; 0x28
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f005 fab8 	bl	8006494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f54:	2302      	movs	r3, #2
 8000f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fbb1 	bl	80046d0 <HAL_RCC_OscConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000f74:	f000 f906 	bl	8001184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f78:	230f      	movs	r3, #15
 8000f7a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f88:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2102      	movs	r1, #2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fe1b 	bl	8004bd0 <HAL_RCC_ClockConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa0:	f000 f8f0 	bl	8001184 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000fa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 ffab 	bl	8004f0c <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000fbc:	f000 f8e2 	bl	8001184 <Error_Handler>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3750      	adds	r7, #80	; 0x50
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin)
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fd8:	d102      	bne.n	8000fe0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		radio_irq_flag = 1;
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <HAL_GPIO_EXTI_Callback+0x24>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000007f 	.word	0x2000007f

08000ff0 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	803b      	strh	r3, [r7, #0]
	if(AddrMatchCode == (uint8_t)(0x04 << 1))
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	2b08      	cmp	r3, #8
 8001004:	d111      	bne.n	800102a <HAL_I2C_AddrCallback+0x3a>
	{
		if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d106      	bne.n	800101a <HAL_I2C_AddrCallback+0x2a>
		{
			if(HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35, I2C_FIRST_FRAME) != HAL_OK)
 800100c:	2301      	movs	r3, #1
 800100e:	2223      	movs	r2, #35	; 0x23
 8001010:	4908      	ldr	r1, [pc, #32]	; (8001034 <HAL_I2C_AddrCallback+0x44>)
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <HAL_I2C_AddrCallback+0x48>)
 8001014:	f001 ff12 	bl	8002e3c <HAL_I2C_Slave_Seq_Receive_IT>
			{
				//fail
			}
		}
	}
}
 8001018:	e007      	b.n	800102a <HAL_I2C_AddrCallback+0x3a>
			if(HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)(packet_to_send_to_master->payload), 34, I2C_LAST_FRAME) != HAL_OK)
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_I2C_AddrCallback+0x4c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	2320      	movs	r3, #32
 8001022:	2222      	movs	r2, #34	; 0x22
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <HAL_I2C_AddrCallback+0x48>)
 8001026:	f001 fe97 	bl	8002d58 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000294 	.word	0x20000294
 8001038:	20000184 	.word	0x20000184
 800103c:	200001fc 	.word	0x200001fc

08001040 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	i2c_receive_flag = 1;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_I2C_SlaveRxCpltCallback+0x18>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	20000071 	.word	0x20000071

08001070 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	telem_i2c_send_done = 1;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_I2C_SlaveTxCpltCallback+0x18>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
	//HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35);
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	2000007c 	.word	0x2000007c

0800108c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d10b      	bne.n	80010b4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		//Look into overflow
		micros_timer_base += 65000;//65536;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80010a4:	33e8      	adds	r3, #232	; 0xe8
 80010a6:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80010a8:	6013      	str	r3, [r2, #0]
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3341      	adds	r3, #65	; 0x41
 80010b0:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010b2:	6013      	str	r3, [r2, #0]
	}
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000c80 	.word	0x20000c80
 80010c4:	200001d8 	.word	0x200001d8
 80010c8:	20000200 	.word	0x20000200

080010cc <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	//HAL_I2C_STATE_BUSY;
	//HAL_I2C_GetError(&hi2c1);
	//sprintf((char *)temp_uart_buffer, "%lu%s", HAL_I2C_GetError(&hi2c1), "\r\n");

	//HAL_UART_Transmit_IT(&huart1, (uint8_t *)temp_uart_buffer, sizeof((uint8_t *)temp_uart_buffer));
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
	...

080010e0 <GetMicros>:

uint32_t GetMicros()
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim4);
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <GetMicros+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	//return 0;
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000c80 	.word	0x20000c80

080010f8 <GetMillis>:

uint32_t GetMillis()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 80010fc:	f7ff fff0 	bl	80010e0 <GetMicros>
 8001100:	4602      	mov	r2, r0
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <GetMillis+0x1c>)
 8001104:	fba3 2302 	umull	r2, r3, r3, r2
 8001108:	099a      	lsrs	r2, r3, #6
 800110a:	4b03      	ldr	r3, [pc, #12]	; (8001118 <GetMillis+0x20>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
}
 8001110:	4618      	mov	r0, r3
 8001112:	bd80      	pop	{r7, pc}
 8001114:	10624dd3 	.word	0x10624dd3
 8001118:	20000200 	.word	0x20000200

0800111c <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 8001124:	f7ff ffe8 	bl	80010f8 <GetMillis>
 8001128:	4602      	mov	r2, r0
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1ad3      	subs	r3, r2, r3
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8001140:	f7ff ffce 	bl	80010e0 <GetMicros>
 8001144:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	429a      	cmp	r2, r3
 8001152:	d905      	bls.n	8001160 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e00c      	b.n	800117a <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	429a      	cmp	r2, r3
 8001168:	d207      	bcs.n	800117a <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8001176:	33e8      	adds	r3, #232	; 0xe8
 8001178:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <NRF24_Init>:

volatile uint8_t radio_irq_flag = 0;
volatile uint8_t waiting_for_ack = 0;

void NRF24_Init(NRF24_RADIO *radio)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119e:	484e      	ldr	r0, [pc, #312]	; (80012d8 <NRF24_Init+0x148>)
 80011a0:	f001 fbfc 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	484c      	ldr	r0, [pc, #304]	; (80012dc <NRF24_Init+0x14c>)
 80011ac:	f001 fbf6 	bl	800299c <HAL_GPIO_WritePin>

	NRF24_WriteBit(radio, 0, 0, 1); //register#, bit#, and value 0 or 1, ::  0,0,1 RX Mode
 80011b0:	2301      	movs	r3, #1
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f9a0 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 0, 1, 1); //register, bit, and value 0,1,1 PowerUP
 80011bc:	2301      	movs	r3, #1
 80011be:	2201      	movs	r2, #1
 80011c0:	2100      	movs	r1, #0
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f99a 	bl	80014fc <NRF24_WriteBit>
	    //NRF24_WriteBit(radio, 0, 4, 1); //RT Mask turns off the RT interrupt
	    //NRF24_WriteBit(radio, 0, 5, 1); //TX Mask turns off the TX interrupt
	    //NRF24_WriteBit(radio, 0, 6, 1);

	NRF24_WriteBit(radio, 4, 4, 0);//1 wait 2750ms for AA
 80011c8:	2300      	movs	r3, #0
 80011ca:	2204      	movs	r2, #4
 80011cc:	2104      	movs	r1, #4
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f994 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 5, 0);//1
 80011d4:	2300      	movs	r3, #0
 80011d6:	2205      	movs	r2, #5
 80011d8:	2104      	movs	r1, #4
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f98e 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 6, 1);//0
 80011e0:	2301      	movs	r3, #1
 80011e2:	2206      	movs	r2, #6
 80011e4:	2104      	movs	r1, #4
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f988 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 7, 1);//1
 80011ec:	2301      	movs	r3, #1
 80011ee:	2207      	movs	r2, #7
 80011f0:	2104      	movs	r1, #4
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f982 	bl	80014fc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 4, 3, 0);
 80011f8:	2300      	movs	r3, #0
 80011fa:	2203      	movs	r2, #3
 80011fc:	2104      	movs	r1, #4
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f97c 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 2, 1);
 8001204:	2301      	movs	r3, #1
 8001206:	2202      	movs	r2, #2
 8001208:	2104      	movs	r1, #4
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f976 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 1, 0);
 8001210:	2300      	movs	r3, #0
 8001212:	2201      	movs	r2, #1
 8001214:	2104      	movs	r1, #4
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f970 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 0, 1);
 800121c:	2301      	movs	r3, #1
 800121e:	2200      	movs	r2, #0
 8001220:	2104      	movs	r1, #4
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f96a 	bl	80014fc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 6, 3, 0);
 8001228:	2300      	movs	r3, #0
 800122a:	2203      	movs	r2, #3
 800122c:	2106      	movs	r1, #6
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f964 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 6, 5, 1); //250kbps
 8001234:	2301      	movs	r3, #1
 8001236:	2205      	movs	r2, #5
 8001238:	2106      	movs	r1, #6
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f95e 	bl	80014fc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 5, 6, 1);
 8001240:	2301      	movs	r3, #1
 8001242:	2206      	movs	r2, #6
 8001244:	2105      	movs	r1, #5
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f958 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 5, 1);
 800124c:	2301      	movs	r3, #1
 800124e:	2205      	movs	r2, #5
 8001250:	2105      	movs	r1, #5
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f952 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 4, 0);
 8001258:	2300      	movs	r3, #0
 800125a:	2204      	movs	r2, #4
 800125c:	2105      	movs	r1, #5
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f94c 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 3, 1);
 8001264:	2301      	movs	r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	2105      	movs	r1, #5
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f946 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 2, 1);
 8001270:	2301      	movs	r3, #1
 8001272:	2202      	movs	r2, #2
 8001274:	2105      	movs	r1, #5
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f940 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 1, 1);
 800127c:	2301      	movs	r3, #1
 800127e:	2201      	movs	r2, #1
 8001280:	2105      	movs	r1, #5
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 f93a 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 0, 0);
 8001288:	2300      	movs	r3, #0
 800128a:	2200      	movs	r2, #0
 800128c:	2105      	movs	r1, #5
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f934 	bl	80014fc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 29, 2, 1);
 8001294:	2301      	movs	r3, #1
 8001296:	2202      	movs	r2, #2
 8001298:	211d      	movs	r1, #29
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f92e 	bl	80014fc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 29, 1, 1);
 80012a0:	2301      	movs	r3, #1
 80012a2:	2201      	movs	r2, #1
 80012a4:	211d      	movs	r1, #29
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f928 	bl	80014fc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 28, 0, 1);
 80012ac:	2301      	movs	r3, #1
 80012ae:	2200      	movs	r2, #0
 80012b0:	211c      	movs	r1, #28
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f922 	bl	80014fc <NRF24_WriteBit>

	NRF24_FlushRX(radio);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9d5 	bl	8001668 <NRF24_FlushRX>
	HAL_Delay(50);
 80012be:	2032      	movs	r0, #50	; 0x32
 80012c0:	f000 fe10 	bl	8001ee4 <HAL_Delay>
	NRF24_FlushTX(radio);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f9a7 	bl	8001618 <NRF24_FlushTX>

	NRF24_ClearInterrupts(radio);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f9f4 	bl	80016b8 <NRF24_ClearInterrupts>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	40010800 	.word	0x40010800

080012e0 <NRF24_PacketSend>:

uint32_t send_delay_timer;

void NRF24_PacketSend(NRF24_RADIO *radio, data_packet *packet)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	static uint8_t txBuf[2];
	static uint8_t rxBuf[2];

	waiting_for_ack = 1;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <NRF24_PacketSend+0xac>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]

	NRF24_FlushTX(radio);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f991 	bl	8001618 <NRF24_FlushTX>

	txBuf[0] = 0b10100000;
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <NRF24_PacketSend+0xb0>)
 80012f8:	22a0      	movs	r2, #160	; 0xa0
 80012fa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	4824      	ldr	r0, [pc, #144]	; (8001394 <NRF24_PacketSend+0xb4>)
 8001304:	f001 fb4a 	bl	800299c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 1, HAL_MAX_DELAY);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	4a20      	ldr	r2, [pc, #128]	; (8001398 <NRF24_PacketSend+0xb8>)
 8001316:	491e      	ldr	r1, [pc, #120]	; (8001390 <NRF24_PacketSend+0xb0>)
 8001318:	f003 ff0f 	bl	800513a <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(radio->spiHandle, packet->payload, radio->garbageRxBuf, packet->width, HAL_MAX_DELAY);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800132e:	b29c      	uxth	r4, r3
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4623      	mov	r3, r4
 8001338:	f003 feff 	bl	800513a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	4814      	ldr	r0, [pc, #80]	; (8001394 <NRF24_PacketSend+0xb4>)
 8001344:	f001 fb2a 	bl	800299c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	4813      	ldr	r0, [pc, #76]	; (800139c <NRF24_PacketSend+0xbc>)
 8001350:	f001 fb24 	bl	800299c <HAL_GPIO_WritePin>
	NRF24_WriteBit(radio, 0, 0, 0);//Go into TX mode
 8001354:	2300      	movs	r3, #0
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8ce 	bl	80014fc <NRF24_WriteBit>
	send_delay_timer = GetMicros();
 8001360:	f7ff febe 	bl	80010e0 <GetMicros>
 8001364:	4602      	mov	r2, r0
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <NRF24_PacketSend+0xc0>)
 8001368:	601a      	str	r2, [r3, #0]
	while(GetMicrosDifference(&send_delay_timer) < 20);
 800136a:	bf00      	nop
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <NRF24_PacketSend+0xc0>)
 800136e:	f7ff fee3 	bl	8001138 <GetMicrosDifference>
 8001372:	4603      	mov	r3, r0
 8001374:	2b13      	cmp	r3, #19
 8001376:	d9f9      	bls.n	800136c <NRF24_PacketSend+0x8c>
	//HAL_Delay(2);
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137e:	4807      	ldr	r0, [pc, #28]	; (800139c <NRF24_PacketSend+0xbc>)
 8001380:	f001 fb0c 	bl	800299c <HAL_GPIO_WritePin>
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	20000080 	.word	0x20000080
 8001390:	20000084 	.word	0x20000084
 8001394:	40010800 	.word	0x40010800
 8001398:	20000088 	.word	0x20000088
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	20000bfc 	.word	0x20000bfc

080013a4 <NRF24_PacketRead>:

void NRF24_PacketRead(NRF24_RADIO *radio)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	6078      	str	r0, [r7, #4]
	static uint8_t txBuf[32];
	static uint8_t rxBuf[32];
	static uint8_t packet_width;

	txBuf[0] = 0b01100000;
 80013ac:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <NRF24_PacketRead+0x140>)
 80013ae:	2260      	movs	r2, #96	; 0x60
 80013b0:	701a      	strb	r2, [r3, #0]
	txBuf[1] = 0;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <NRF24_PacketRead+0x140>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013be:	484a      	ldr	r0, [pc, #296]	; (80014e8 <NRF24_PacketRead+0x144>)
 80013c0:	f001 faec 	bl	800299c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2302      	movs	r3, #2
 80013d0:	4a46      	ldr	r2, [pc, #280]	; (80014ec <NRF24_PacketRead+0x148>)
 80013d2:	4944      	ldr	r1, [pc, #272]	; (80014e4 <NRF24_PacketRead+0x140>)
 80013d4:	f003 feb1 	bl	800513a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013de:	4842      	ldr	r0, [pc, #264]	; (80014e8 <NRF24_PacketRead+0x144>)
 80013e0:	f001 fadc 	bl	800299c <HAL_GPIO_WritePin>
	packet_width = rxBuf[1];
 80013e4:	4b41      	ldr	r3, [pc, #260]	; (80014ec <NRF24_PacketRead+0x148>)
 80013e6:	785a      	ldrb	r2, [r3, #1]
 80013e8:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <NRF24_PacketRead+0x14c>)
 80013ea:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 32; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e00c      	b.n	800140c <NRF24_PacketRead+0x68>
	{
		txBuf[i] = 0;
 80013f2:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <NRF24_PacketRead+0x140>)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
		rxBuf[i] = 0;
 80013fc:	4a3b      	ldr	r2, [pc, #236]	; (80014ec <NRF24_PacketRead+0x148>)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b1f      	cmp	r3, #31
 8001410:	ddef      	ble.n	80013f2 <NRF24_PacketRead+0x4e>
	}

	txBuf[0] = 0b01100001;
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <NRF24_PacketRead+0x140>)
 8001414:	2261      	movs	r2, #97	; 0x61
 8001416:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141e:	4832      	ldr	r0, [pc, #200]	; (80014e8 <NRF24_PacketRead+0x144>)
 8001420:	f001 fabc 	bl	800299c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, (uint8_t)(packet_width + 1), HAL_MAX_DELAY);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <NRF24_PacketRead+0x14c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	b29a      	uxth	r2, r3
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	4a2c      	ldr	r2, [pc, #176]	; (80014ec <NRF24_PacketRead+0x148>)
 800143c:	4929      	ldr	r1, [pc, #164]	; (80014e4 <NRF24_PacketRead+0x140>)
 800143e:	f003 fe7c 	bl	800513a <HAL_SPI_TransmitReceive>

	//HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, packet_width, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001448:	4827      	ldr	r0, [pc, #156]	; (80014e8 <NRF24_PacketRead+0x144>)
 800144a:	f001 faa7 	bl	800299c <HAL_GPIO_WritePin>

	if(rxBuf[1] != 0x00)
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <NRF24_PacketRead+0x148>)
 8001450:	785b      	ldrb	r3, [r3, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d042      	beq.n	80014dc <NRF24_PacketRead+0x138>
	{
		//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		packets_to_receive[packets_to_receive_counter].width = packet_width;
 8001456:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <NRF24_PacketRead+0x150>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <NRF24_PacketRead+0x14c>)
 800145e:	7818      	ldrb	r0, [r3, #0]
 8001460:	4925      	ldr	r1, [pc, #148]	; (80014f8 <NRF24_PacketRead+0x154>)
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	440b      	add	r3, r1
 800146e:	3323      	adds	r3, #35	; 0x23
 8001470:	4602      	mov	r2, r0
 8001472:	701a      	strb	r2, [r3, #0]
		packets_to_receive[packets_to_receive_counter].reliable = 1;
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <NRF24_PacketRead+0x150>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	491f      	ldr	r1, [pc, #124]	; (80014f8 <NRF24_PacketRead+0x154>)
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	440b      	add	r3, r1
 8001488:	3324      	adds	r3, #36	; 0x24
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]

		for(int i = 0; i < packet_width; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	e013      	b.n	80014bc <NRF24_PacketRead+0x118>
		{
			packets_to_receive[packets_to_receive_counter].payload[i] = rxBuf[i + 1];
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	3301      	adds	r3, #1
 8001498:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <NRF24_PacketRead+0x150>)
 800149a:	7812      	ldrb	r2, [r2, #0]
 800149c:	4913      	ldr	r1, [pc, #76]	; (80014ec <NRF24_PacketRead+0x148>)
 800149e:	5cc8      	ldrb	r0, [r1, r3]
 80014a0:	4915      	ldr	r1, [pc, #84]	; (80014f8 <NRF24_PacketRead+0x154>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	18ca      	adds	r2, r1, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	4602      	mov	r2, r0
 80014b4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < packet_width; i++)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3301      	adds	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <NRF24_PacketRead+0x14c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	4293      	cmp	r3, r2
 80014c6:	dbe5      	blt.n	8001494 <NRF24_PacketRead+0xf0>
		}

		if(packets_to_receive_counter < 30)
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <NRF24_PacketRead+0x150>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b1d      	cmp	r3, #29
 80014ce:	d805      	bhi.n	80014dc <NRF24_PacketRead+0x138>
			packets_to_receive_counter++;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <NRF24_PacketRead+0x150>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <NRF24_PacketRead+0x150>)
 80014da:	701a      	strb	r2, [r3, #0]
	}
}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000008c 	.word	0x2000008c
 80014e8:	40010800 	.word	0x40010800
 80014ec:	200000ac 	.word	0x200000ac
 80014f0:	200000cc 	.word	0x200000cc
 80014f4:	2000007e 	.word	0x2000007e
 80014f8:	2000075c 	.word	0x2000075c

080014fc <NRF24_WriteBit>:

/*
 * Change single bit in register
 */
void NRF24_WriteBit(NRF24_RADIO *radio, uint8_t address, uint8_t bit_add, uint8_t val)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af02      	add	r7, sp, #8
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	4608      	mov	r0, r1
 8001506:	4611      	mov	r1, r2
 8001508:	461a      	mov	r2, r3
 800150a:	4603      	mov	r3, r0
 800150c:	70fb      	strb	r3, [r7, #3]
 800150e:	460b      	mov	r3, r1
 8001510:	70bb      	strb	r3, [r7, #2]
 8001512:	4613      	mov	r3, r2
 8001514:	707b      	strb	r3, [r7, #1]
	static uint8_t txBuf[2];
	static uint8_t rxBuf[2];

	txBuf[0] = address + 32;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	3320      	adds	r3, #32
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <NRF24_WriteBit+0xb4>)
 800151e:	701a      	strb	r2, [r3, #0]
    txBuf[1] = NRF24_GetAddress(radio, address);
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f847 	bl	80015b8 <NRF24_GetAddress>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <NRF24_WriteBit+0xb4>)
 8001530:	705a      	strb	r2, [r3, #1]

	if(val == 1)
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d10d      	bne.n	8001554 <NRF24_WriteBit+0x58>
	{
		txBuf[1] |= 1 << bit_add;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <NRF24_WriteBit+0xb4>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	b25a      	sxtb	r2, r3
 800153e:	78bb      	ldrb	r3, [r7, #2]
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	b25b      	sxtb	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <NRF24_WriteBit+0xb4>)
 8001550:	705a      	strb	r2, [r3, #1]
 8001552:	e00e      	b.n	8001572 <NRF24_WriteBit+0x76>
	}
	else
	{
		txBuf[1] &= ~(1 << bit_add);
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <NRF24_WriteBit+0xb4>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	b25a      	sxtb	r2, r3
 800155a:	78bb      	ldrb	r3, [r7, #2]
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	b25b      	sxtb	r3, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	b25b      	sxtb	r3, r3
 8001568:	4013      	ands	r3, r2
 800156a:	b25b      	sxtb	r3, r3
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <NRF24_WriteBit+0xb4>)
 8001570:	705a      	strb	r2, [r3, #1]
	}

	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_RESET);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6858      	ldr	r0, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	899b      	ldrh	r3, [r3, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	f001 fa0d 	bl	800299c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2302      	movs	r3, #2
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <NRF24_WriteBit+0xb8>)
 8001590:	4907      	ldr	r1, [pc, #28]	; (80015b0 <NRF24_WriteBit+0xb4>)
 8001592:	f003 fdd2 	bl	800513a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_SET);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6858      	ldr	r0, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	899b      	ldrh	r3, [r3, #12]
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	f001 f9fb 	bl	800299c <HAL_GPIO_WritePin>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000d0 	.word	0x200000d0
 80015b4:	200000d4 	.word	0x200000d4

080015b8 <NRF24_GetAddress>:

/*
 * Get NRF24 radio register value
 */
uint8_t NRF24_GetAddress(NRF24_RADIO *radio, uint8_t address)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
	static uint8_t txBuf[2];
	txBuf[0] = address;
 80015c4:	4a12      	ldr	r2, [pc, #72]	; (8001610 <NRF24_GetAddress+0x58>)
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	7013      	strb	r3, [r2, #0]
	txBuf[1] = 0x00;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <NRF24_GetAddress+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	705a      	strb	r2, [r3, #1]

	static uint8_t reg_value[2];

	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_RESET);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6858      	ldr	r0, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	899b      	ldrh	r3, [r3, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	f001 f9de 	bl	800299c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, reg_value, 2, HAL_MAX_DELAY);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2302      	movs	r3, #2
 80015ec:	4a09      	ldr	r2, [pc, #36]	; (8001614 <NRF24_GetAddress+0x5c>)
 80015ee:	4908      	ldr	r1, [pc, #32]	; (8001610 <NRF24_GetAddress+0x58>)
 80015f0:	f003 fda3 	bl	800513a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_SET);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6858      	ldr	r0, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	899b      	ldrh	r3, [r3, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	f001 f9cc 	bl	800299c <HAL_GPIO_WritePin>

	return reg_value[1];
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <NRF24_GetAddress+0x5c>)
 8001606:	785b      	ldrb	r3, [r3, #1]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200000d8 	.word	0x200000d8
 8001614:	200000dc 	.word	0x200000dc

08001618 <NRF24_FlushTX>:

void NRF24_FlushTX(NRF24_RADIO *radio)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af02      	add	r7, sp, #8
 800161e:	6078      	str	r0, [r7, #4]
	static uint8_t txBuf[1];
	static uint8_t rxBuf[1];

	txBuf[0] = 0b11100001;//Flush TX
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <NRF24_FlushTX+0x44>)
 8001622:	22e1      	movs	r2, #225	; 0xe1
 8001624:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <NRF24_FlushTX+0x48>)
 800162e:	f001 f9b5 	bl	800299c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 1, HAL_MAX_DELAY);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <NRF24_FlushTX+0x4c>)
 8001640:	4906      	ldr	r1, [pc, #24]	; (800165c <NRF24_FlushTX+0x44>)
 8001642:	f003 fd7a 	bl	800513a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <NRF24_FlushTX+0x48>)
 800164e:	f001 f9a5 	bl	800299c <HAL_GPIO_WritePin>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000e0 	.word	0x200000e0
 8001660:	40010800 	.word	0x40010800
 8001664:	200000e4 	.word	0x200000e4

08001668 <NRF24_FlushRX>:

void NRF24_FlushRX(NRF24_RADIO *radio)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]
	static uint8_t txBuf[1];
	static uint8_t rxBuf[1];

	txBuf[0] = 0b11100010;//Flush RX
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <NRF24_FlushRX+0x44>)
 8001672:	22e2      	movs	r2, #226	; 0xe2
 8001674:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <NRF24_FlushRX+0x48>)
 800167e:	f001 f98d 	bl	800299c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 1, HAL_MAX_DELAY);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <NRF24_FlushRX+0x4c>)
 8001690:	4906      	ldr	r1, [pc, #24]	; (80016ac <NRF24_FlushRX+0x44>)
 8001692:	f003 fd52 	bl	800513a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <NRF24_FlushRX+0x48>)
 800169e:	f001 f97d 	bl	800299c <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000e8 	.word	0x200000e8
 80016b0:	40010800 	.word	0x40010800
 80016b4:	200000ec 	.word	0x200000ec

080016b8 <NRF24_ClearInterrupts>:

void NRF24_ClearInterrupts(NRF24_RADIO *radio)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if((NRF24_GetAddress(radio, 7) >> 4) & 0x01)//RT interrupt
 80016c0:	2107      	movs	r1, #7
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff78 	bl	80015b8 <NRF24_GetAddress>
 80016c8:	4603      	mov	r3, r0
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d005      	beq.n	80016e2 <NRF24_ClearInterrupts+0x2a>
	{
		NRF24_WriteBit(radio, 7, 4, 1);
 80016d6:	2301      	movs	r3, #1
 80016d8:	2204      	movs	r2, #4
 80016da:	2107      	movs	r1, #7
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff0d 	bl	80014fc <NRF24_WriteBit>
	}

	if((NRF24_GetAddress(radio, 7) >> 5) & 0x01)//TX interrupt
 80016e2:	2107      	movs	r1, #7
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff67 	bl	80015b8 <NRF24_GetAddress>
 80016ea:	4603      	mov	r3, r0
 80016ec:	095b      	lsrs	r3, r3, #5
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <NRF24_ClearInterrupts+0x4c>
	{
		NRF24_WriteBit(radio, 7, 5, 1);
 80016f8:	2301      	movs	r3, #1
 80016fa:	2205      	movs	r2, #5
 80016fc:	2107      	movs	r1, #7
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fefc 	bl	80014fc <NRF24_WriteBit>
	}

	if((NRF24_GetAddress(radio, 7) >> 6) & 0x01)//RX interrupt
 8001704:	2107      	movs	r1, #7
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff56 	bl	80015b8 <NRF24_GetAddress>
 800170c:	4603      	mov	r3, r0
 800170e:	099b      	lsrs	r3, r3, #6
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <NRF24_ClearInterrupts+0x6e>
	{
		NRF24_WriteBit(radio, 7, 6, 1);
 800171a:	2301      	movs	r3, #1
 800171c:	2206      	movs	r2, #6
 800171e:	2107      	movs	r1, #7
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff feeb 	bl	80014fc <NRF24_WriteBit>
	}
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_SPI2_Init+0x64>)
 8001736:	4a18      	ldr	r2, [pc, #96]	; (8001798 <MX_SPI2_Init+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_SPI2_Init+0x64>)
 800173c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001740:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_SPI2_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_SPI2_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_SPI2_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_SPI2_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_SPI2_Init+0x64>)
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_SPI2_Init+0x64>)
 8001764:	2210      	movs	r2, #16
 8001766:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <MX_SPI2_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_SPI2_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MX_SPI2_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_SPI2_Init+0x64>)
 800177c:	220a      	movs	r2, #10
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_SPI2_Init+0x64>)
 8001782:	f003 fc79 	bl	8005078 <HAL_SPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800178c:	f7ff fcfa 	bl	8001184 <Error_Handler>
  }

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000c28 	.word	0x20000c28
 8001798:	40003800 	.word	0x40003800

0800179c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_SPI_MspInit+0x8c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d131      	bne.n	8001820 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_SPI_MspInit+0x90>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_SPI_MspInit+0x90>)
 80017c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c6:	61d3      	str	r3, [r2, #28]
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_SPI_MspInit+0x90>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_SPI_MspInit+0x90>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_SPI_MspInit+0x90>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_SPI_MspInit+0x90>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80017ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	4619      	mov	r1, r3
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <HAL_SPI_MspInit+0x94>)
 8001802:	f000 ff71 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_SPI_MspInit+0x94>)
 800181c:	f000 ff64 	bl	80026e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40003800 	.word	0x40003800
 800182c:	40021000 	.word	0x40021000
 8001830:	40010c00 	.word	0x40010c00

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_MspInit+0x5c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_MspInit+0x5c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_MspInit+0x5c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x5c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_MspInit+0x5c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_MspInit+0x60>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_MspInit+0x60>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <HardFault_Handler+0x4>

080018aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <MemManage_Handler+0x4>

080018b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <BusFault_Handler+0x4>

080018b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <UsageFault_Handler+0x4>

080018bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 fae2 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM4_IRQHandler+0x10>)
 80018f2:	f003 fe9a 	bl	800562a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000c80 	.word	0x20000c80

08001900 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <I2C1_EV_IRQHandler+0x10>)
 8001906:	f001 fb40 	bl	8002f8a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000184 	.word	0x20000184

08001914 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <I2C1_ER_IRQHandler+0x10>)
 800191a:	f001 fc9c 	bl	8003256 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000184 	.word	0x20000184

08001928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <USART1_IRQHandler+0x10>)
 800192e:	f004 fa7d 	bl	8005e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000d00 	.word	0x20000d00

0800193c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	if((USART2->SR & USART_SR_RXNE) != 0 && (USART2->CR1 & USART_CR1_RXNEIE))
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <USART2_IRQHandler+0x8c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	2b00      	cmp	r3, #0
 800194c:	d035      	beq.n	80019ba <USART2_IRQHandler+0x7e>
 800194e:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <USART2_IRQHandler+0x8c>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b00      	cmp	r3, #0
 8001958:	d02f      	beq.n	80019ba <USART2_IRQHandler+0x7e>
	{
		uint8_t tmp = (uint8_t)(USART2->DR & 0xFF);
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <USART2_IRQHandler+0x8c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	71fb      	strb	r3, [r7, #7]

		if(tmp == '$')
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b24      	cmp	r3, #36	; 0x24
 8001964:	d103      	bne.n	800196e <USART2_IRQHandler+0x32>
		{
			gps_buffer_index = 0;
 8001966:	4b19      	ldr	r3, [pc, #100]	; (80019cc <USART2_IRQHandler+0x90>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e012      	b.n	8001994 <USART2_IRQHandler+0x58>
			{
				gps_buffer[i] = '-';
			}*/

		}
		else if(gps_buffer_index < 98)
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <USART2_IRQHandler+0x90>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b61      	cmp	r3, #97	; 0x61
 8001976:	d822      	bhi.n	80019be <USART2_IRQHandler+0x82>
		{
			gps_buffer[gps_buffer_index] = tmp;
 8001978:	4b14      	ldr	r3, [pc, #80]	; (80019cc <USART2_IRQHandler+0x90>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4619      	mov	r1, r3
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <USART2_IRQHandler+0x94>)
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	5453      	strb	r3, [r2, r1]
			gps_buffer_index++;
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <USART2_IRQHandler+0x90>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <USART2_IRQHandler+0x90>)
 8001992:	701a      	strb	r2, [r3, #0]
		}
		else
			return;

		if(tmp == '*')
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b2a      	cmp	r3, #42	; 0x2a
 8001998:	d10f      	bne.n	80019ba <USART2_IRQHandler+0x7e>
		{
			USART2->CR1 &= ~(USART_CR1_RE);
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <USART2_IRQHandler+0x8c>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <USART2_IRQHandler+0x8c>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	60d3      	str	r3, [r2, #12]
			USART2->CR1 &= ~(USART_CR1_RXNEIE);
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <USART2_IRQHandler+0x8c>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <USART2_IRQHandler+0x8c>)
 80019ac:	f023 0320 	bic.w	r3, r3, #32
 80019b0:	60d3      	str	r3, [r2, #12]

			new_gps_line = 1;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <USART2_IRQHandler+0x98>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]

			return;
 80019b8:	e002      	b.n	80019c0 <USART2_IRQHandler+0x84>
		}
	}

	return;
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <USART2_IRQHandler+0x84>
			return;
 80019be:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40004400 	.word	0x40004400
 80019cc:	20000038 	.word	0x20000038
 80019d0:	20000120 	.word	0x20000120
 80019d4:	20000064 	.word	0x20000064

080019d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80019dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019e0:	f001 f80c 	bl	80029fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <SystemInit+0x5c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <SystemInit+0x5c>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <SystemInit+0x5c>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4911      	ldr	r1, [pc, #68]	; (8001a44 <SystemInit+0x5c>)
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <SystemInit+0x60>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <SystemInit+0x5c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <SystemInit+0x5c>)
 8001a0a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <SystemInit+0x5c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SystemInit+0x5c>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <SystemInit+0x5c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <SystemInit+0x5c>)
 8001a26:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a2a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SystemInit+0x5c>)
 8001a2e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a32:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SystemInit+0x64>)
 8001a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a3a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	f8ff0000 	.word	0xf8ff0000
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a64:	463b      	mov	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <MX_TIM4_Init+0x98>)
 8001a70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001a74:	2247      	movs	r2, #71	; 0x47
 8001a76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001a80:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001a84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a92:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001a94:	f003 fd7b 	bl	800558e <HAL_TIM_Base_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001a9e:	f7ff fb71 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001ab0:	f003 fec3 	bl	800583a <HAL_TIM_ConfigClockSource>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f7ff fb63 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <MX_TIM4_Init+0x94>)
 8001acc:	f004 f888 	bl	8005be0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001ad6:	f7ff fb55 	bl	8001184 <Error_Handler>
  }

}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000c80 	.word	0x20000c80
 8001ae8:	40000800 	.word	0x40000800

08001aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d113      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201e      	movs	r0, #30
 8001b1c:	f000 fce5 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b20:	201e      	movs	r0, #30
 8001b22:	f000 fcfe 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40000800 	.word	0x40000800
 8001b34:	40021000 	.word	0x40021000

08001b38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <MX_USART1_UART_Init+0x50>)
 8001b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_USART1_UART_Init+0x4c>)
 8001b70:	f004 f88c 	bl	8005c8c <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b7a:	f7ff fb03 	bl	8001184 <Error_Handler>
  }

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000d00 	.word	0x20000d00
 8001b88:	40013800 	.word	0x40013800

08001b8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <MX_USART2_UART_Init+0x50>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001b98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	f004 f862 	bl	8005c8c <HAL_UART_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bce:	f7ff fad9 	bl	8001184 <Error_Handler>
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000d40 	.word	0x20000d40
 8001bdc:	40004400 	.word	0x40004400

08001be0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <MX_USART3_UART_Init+0x50>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_USART3_UART_Init+0x4c>)
 8001c18:	f004 f838 	bl	8005c8c <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c22:	f7ff faaf 	bl	8001184 <Error_Handler>
  }

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000cc0 	.word	0x20000cc0
 8001c30:	40004800 	.word	0x40004800

08001c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <HAL_UART_MspInit+0x188>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d13a      	bne.n	8001cca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c54:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a59      	ldr	r2, [pc, #356]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b54      	ldr	r3, [pc, #336]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a53      	ldr	r2, [pc, #332]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b51      	ldr	r3, [pc, #324]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0320 	add.w	r3, r7, #32
 8001c96:	4619      	mov	r1, r3
 8001c98:	484a      	ldr	r0, [pc, #296]	; (8001dc4 <HAL_UART_MspInit+0x190>)
 8001c9a:	f000 fd25 	bl	80026e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 0320 	add.w	r3, r7, #32
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4844      	ldr	r0, [pc, #272]	; (8001dc4 <HAL_UART_MspInit+0x190>)
 8001cb4:	f000 fd18 	bl	80026e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2025      	movs	r0, #37	; 0x25
 8001cbe:	f000 fc14 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cc2:	2025      	movs	r0, #37	; 0x25
 8001cc4:	f000 fc2d 	bl	8002522 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cc8:	e074      	b.n	8001db4 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	; (8001dc8 <HAL_UART_MspInit+0x194>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d138      	bne.n	8001d46 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd4:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a39      	ldr	r2, [pc, #228]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cde:	61d3      	str	r3, [r2, #28]
 8001ce0:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a33      	ldr	r2, [pc, #204]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SAT_TX_Pin;
 8001d04:	2304      	movs	r3, #4
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SAT_TX_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0320 	add.w	r3, r7, #32
 8001d14:	4619      	mov	r1, r3
 8001d16:	482b      	ldr	r0, [pc, #172]	; (8001dc4 <HAL_UART_MspInit+0x190>)
 8001d18:	f000 fce6 	bl	80026e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAT_RX_Pin;
 8001d1c:	2308      	movs	r3, #8
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SAT_RX_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4825      	ldr	r0, [pc, #148]	; (8001dc4 <HAL_UART_MspInit+0x190>)
 8001d30:	f000 fcda 	bl	80026e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2026      	movs	r0, #38	; 0x26
 8001d3a:	f000 fbd6 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d3e:	2026      	movs	r0, #38	; 0x26
 8001d40:	f000 fbef 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001d44:	e036      	b.n	8001db4 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <HAL_UART_MspInit+0x198>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d131      	bne.n	8001db4 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d50:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d5a:	61d3      	str	r3, [r2, #28]
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_UART_MspInit+0x18c>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8001d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	4619      	mov	r1, r3
 8001d94:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <HAL_UART_MspInit+0x19c>)
 8001d96:	f000 fca7 	bl	80026e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8001d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8001da8:	f107 0320 	add.w	r3, r7, #32
 8001dac:	4619      	mov	r1, r3
 8001dae:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <HAL_UART_MspInit+0x19c>)
 8001db0:	f000 fc9a 	bl	80026e8 <HAL_GPIO_Init>
}
 8001db4:	bf00      	nop
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	40010c00 	.word	0x40010c00

08001dd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001dd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dd6:	e003      	b.n	8001de0 <LoopCopyDataInit>

08001dd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001ddc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dde:	3104      	adds	r1, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001de4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001de6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001de8:	d3f6      	bcc.n	8001dd8 <CopyDataInit>
  ldr r2, =_sbss
 8001dea:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dec:	e002      	b.n	8001df4 <LoopFillZerobss>

08001dee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001df0:	f842 3b04 	str.w	r3, [r2], #4

08001df4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001df6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001df8:	d3f9      	bcc.n	8001dee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dfa:	f7ff fdf5 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f004 fb25 	bl	800644c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e02:	f7fe fdf3 	bl	80009ec <main>
  bx lr
 8001e06:	4770      	bx	lr
  ldr r3, =_sidata
 8001e08:	080064f0 	.word	0x080064f0
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e10:	20000048 	.word	0x20000048
  ldr r2, =_sbss
 8001e14:	20000048 	.word	0x20000048
  ldr r3, = _ebss
 8001e18:	20000d84 	.word	0x20000d84

08001e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC1_2_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x28>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x28>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 fb4f 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fcfa 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40022000 	.word	0x40022000

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fb67 	bl	800253e <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 fb2f 	bl	80024ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	2000003c 	.word	0x2000003c
 8001ea4:	20000044 	.word	0x20000044
 8001ea8:	20000040 	.word	0x20000040

08001eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_IncTick+0x1c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_IncTick+0x20>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000044 	.word	0x20000044
 8001ecc:	20000d80 	.word	0x20000d80

08001ed0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b02      	ldr	r3, [pc, #8]	; (8001ee0 <HAL_GetTick+0x10>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	20000d80 	.word	0x20000d80

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fff0 	bl	8001ed0 <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_Delay+0x40>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffe0 	bl	8001ed0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000044 	.word	0x20000044

08001f28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0be      	b.n	80020c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe f92e 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f9ab 	bl	80022c8 <ADC_ConversionStop_Disable>
 8001f72:	4603      	mov	r3, r0
 8001f74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 8099 	bne.w	80020b6 <HAL_ADC_Init+0x18e>
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8095 	bne.w	80020b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f94:	f023 0302 	bic.w	r3, r3, #2
 8001f98:	f043 0202 	orr.w	r2, r3, #2
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7b1b      	ldrb	r3, [r3, #12]
 8001fae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fb0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc0:	d003      	beq.n	8001fca <HAL_ADC_Init+0xa2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_ADC_Init+0xa8>
 8001fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_Init+0xaa>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7d1b      	ldrb	r3, [r3, #20]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d119      	bne.n	8002014 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7b1b      	ldrb	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	035a      	lsls	r2, r3, #13
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e00b      	b.n	8002014 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <HAL_ADC_Init+0x1a8>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	430b      	orrs	r3, r1
 800203a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002044:	d003      	beq.n	800204e <HAL_ADC_Init+0x126>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d104      	bne.n	8002058 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	3b01      	subs	r3, #1
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	430a      	orrs	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_ADC_Init+0x1ac>)
 8002074:	4013      	ands	r3, r2
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	429a      	cmp	r2, r3
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002092:	e018      	b.n	80020c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	f023 0312 	bic.w	r3, r3, #18
 800209c:	f043 0210 	orr.w	r2, r3, #16
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b4:	e007      	b.n	80020c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	ffe1f7fd 	.word	0xffe1f7fd
 80020d4:	ff1f0efe 	.word	0xff1f0efe

080020d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x20>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e0dc      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x1da>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b06      	cmp	r3, #6
 8002106:	d81c      	bhi.n	8002142 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b05      	subs	r3, #5
 800211a:	221f      	movs	r2, #31
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	4019      	ands	r1, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b05      	subs	r3, #5
 8002134:	fa00 f203 	lsl.w	r2, r0, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	635a      	str	r2, [r3, #52]	; 0x34
 8002140:	e03c      	b.n	80021bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d81c      	bhi.n	8002184 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b23      	subs	r3, #35	; 0x23
 800215c:	221f      	movs	r2, #31
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	4019      	ands	r1, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b23      	subs	r3, #35	; 0x23
 8002176:	fa00 f203 	lsl.w	r2, r0, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
 8002182:	e01b      	b.n	80021bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3b41      	subs	r3, #65	; 0x41
 8002196:	221f      	movs	r2, #31
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b41      	subs	r3, #65	; 0x41
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	d91c      	bls.n	80021fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68d9      	ldr	r1, [r3, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	3b1e      	subs	r3, #30
 80021d6:	2207      	movs	r2, #7
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	4019      	ands	r1, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6898      	ldr	r0, [r3, #8]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	3b1e      	subs	r3, #30
 80021f0:	fa00 f203 	lsl.w	r2, r0, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	e019      	b.n	8002232 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6919      	ldr	r1, [r3, #16]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	2207      	movs	r2, #7
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	4019      	ands	r1, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6898      	ldr	r0, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	fa00 f203 	lsl.w	r2, r0, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b10      	cmp	r3, #16
 8002238:	d003      	beq.n	8002242 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800223e:	2b11      	cmp	r3, #17
 8002240:	d132      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1d      	ldr	r2, [pc, #116]	; (80022bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d125      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d126      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002268:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b10      	cmp	r3, #16
 8002270:	d11a      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9a      	lsrs	r2, r3, #18
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002288:	e002      	b.n	8002290 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3b01      	subs	r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f9      	bne.n	800228a <HAL_ADC_ConfigChannel+0x1b2>
 8002296:	e007      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f043 0220 	orr.w	r2, r3, #32
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	40012400 	.word	0x40012400
 80022c0:	2000003c 	.word	0x2000003c
 80022c4:	431bde83 	.word	0x431bde83

080022c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d127      	bne.n	8002332 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0201 	bic.w	r2, r2, #1
 80022f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022f2:	f7ff fded 	bl	8001ed0 <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f8:	e014      	b.n	8002324 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022fa:	f7ff fde9 	bl	8001ed0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d90d      	bls.n	8002324 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f043 0210 	orr.w	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e007      	b.n	8002334 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d0e3      	beq.n	80022fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60d3      	str	r3, [r2, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0b      	blt.n	80023ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4906      	ldr	r1, [pc, #24]	; (80023d4 <__NVIC_EnableIRQ+0x34>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295
 80024b4:	f7ff ff90 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff2d 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fc:	f7ff ff42 	bl	8002384 <__NVIC_GetPriorityGrouping>
 8002500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff90 	bl	800242c <NVIC_EncodePriority>
 800250c:	4602      	mov	r2, r0
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5f 	bl	80023d8 <__NVIC_SetPriority>
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff35 	bl	80023a0 <__NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffa2 	bl	8002490 <SysTick_Config>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002568:	2b02      	cmp	r3, #2
 800256a:	d008      	beq.n	800257e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2204      	movs	r2, #4
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e020      	b.n	80025c0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 020e 	bic.w	r2, r2, #14
 800258c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f202 	lsl.w	r2, r1, r2
 80025ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025be:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d005      	beq.n	80025ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2204      	movs	r2, #4
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e051      	b.n	8002692 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020e 	bic.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_DMA_Abort_IT+0xd0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d029      	beq.n	800266c <HAL_DMA_Abort_IT+0xa0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <HAL_DMA_Abort_IT+0xd4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d022      	beq.n	8002668 <HAL_DMA_Abort_IT+0x9c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_DMA_Abort_IT+0xd8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d01a      	beq.n	8002662 <HAL_DMA_Abort_IT+0x96>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_DMA_Abort_IT+0xdc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d012      	beq.n	800265c <HAL_DMA_Abort_IT+0x90>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_DMA_Abort_IT+0xe0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00a      	beq.n	8002656 <HAL_DMA_Abort_IT+0x8a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1a      	ldr	r2, [pc, #104]	; (80026b0 <HAL_DMA_Abort_IT+0xe4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d102      	bne.n	8002650 <HAL_DMA_Abort_IT+0x84>
 800264a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800264e:	e00e      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002654:	e00b      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800265a:	e008      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	e005      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002666:	e002      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 8002668:	2310      	movs	r3, #16
 800266a:	e000      	b.n	800266e <HAL_DMA_Abort_IT+0xa2>
 800266c:	2301      	movs	r3, #1
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_DMA_Abort_IT+0xe8>)
 8002670:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
    } 
  }
  return status;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40020008 	.word	0x40020008
 80026a0:	4002001c 	.word	0x4002001c
 80026a4:	40020030 	.word	0x40020030
 80026a8:	40020044 	.word	0x40020044
 80026ac:	40020058 	.word	0x40020058
 80026b0:	4002006c 	.word	0x4002006c
 80026b4:	40020000 	.word	0x40020000

080026b8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b08b      	sub	sp, #44	; 0x2c
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fa:	e127      	b.n	800294c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026fc:	2201      	movs	r2, #1
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 8116 	bne.w	8002946 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b12      	cmp	r3, #18
 8002720:	d034      	beq.n	800278c <HAL_GPIO_Init+0xa4>
 8002722:	2b12      	cmp	r3, #18
 8002724:	d80d      	bhi.n	8002742 <HAL_GPIO_Init+0x5a>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d02b      	beq.n	8002782 <HAL_GPIO_Init+0x9a>
 800272a:	2b02      	cmp	r3, #2
 800272c:	d804      	bhi.n	8002738 <HAL_GPIO_Init+0x50>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d031      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002732:	2b01      	cmp	r3, #1
 8002734:	d01c      	beq.n	8002770 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002736:	e048      	b.n	80027ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002738:	2b03      	cmp	r3, #3
 800273a:	d043      	beq.n	80027c4 <HAL_GPIO_Init+0xdc>
 800273c:	2b11      	cmp	r3, #17
 800273e:	d01b      	beq.n	8002778 <HAL_GPIO_Init+0x90>
          break;
 8002740:	e043      	b.n	80027ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002742:	4a89      	ldr	r2, [pc, #548]	; (8002968 <HAL_GPIO_Init+0x280>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d026      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002748:	4a87      	ldr	r2, [pc, #540]	; (8002968 <HAL_GPIO_Init+0x280>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d806      	bhi.n	800275c <HAL_GPIO_Init+0x74>
 800274e:	4a87      	ldr	r2, [pc, #540]	; (800296c <HAL_GPIO_Init+0x284>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d020      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002754:	4a86      	ldr	r2, [pc, #536]	; (8002970 <HAL_GPIO_Init+0x288>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01d      	beq.n	8002796 <HAL_GPIO_Init+0xae>
          break;
 800275a:	e036      	b.n	80027ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800275c:	4a85      	ldr	r2, [pc, #532]	; (8002974 <HAL_GPIO_Init+0x28c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002762:	4a85      	ldr	r2, [pc, #532]	; (8002978 <HAL_GPIO_Init+0x290>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d016      	beq.n	8002796 <HAL_GPIO_Init+0xae>
 8002768:	4a84      	ldr	r2, [pc, #528]	; (800297c <HAL_GPIO_Init+0x294>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0xae>
          break;
 800276e:	e02c      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e028      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	3304      	adds	r3, #4
 800277e:	623b      	str	r3, [r7, #32]
          break;
 8002780:	e023      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	3308      	adds	r3, #8
 8002788:	623b      	str	r3, [r7, #32]
          break;
 800278a:	e01e      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	330c      	adds	r3, #12
 8002792:	623b      	str	r3, [r7, #32]
          break;
 8002794:	e019      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800279e:	2304      	movs	r3, #4
 80027a0:	623b      	str	r3, [r7, #32]
          break;
 80027a2:	e012      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	611a      	str	r2, [r3, #16]
          break;
 80027b6:	e008      	b.n	80027ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b8:	2308      	movs	r3, #8
 80027ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	615a      	str	r2, [r3, #20]
          break;
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	d801      	bhi.n	80027d4 <HAL_GPIO_Init+0xec>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	e001      	b.n	80027d8 <HAL_GPIO_Init+0xf0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2bff      	cmp	r3, #255	; 0xff
 80027de:	d802      	bhi.n	80027e6 <HAL_GPIO_Init+0xfe>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	e002      	b.n	80027ec <HAL_GPIO_Init+0x104>
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3b08      	subs	r3, #8
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	210f      	movs	r1, #15
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	401a      	ands	r2, r3
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	431a      	orrs	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8096 	beq.w	8002946 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_GPIO_Init+0x298>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_GPIO_Init+0x298>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6193      	str	r3, [r2, #24]
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_GPIO_Init+0x298>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002832:	4a54      	ldr	r2, [pc, #336]	; (8002984 <HAL_GPIO_Init+0x29c>)
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_GPIO_Init+0x2a0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x19e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_GPIO_Init+0x2a4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x19a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a49      	ldr	r2, [pc, #292]	; (8002990 <HAL_GPIO_Init+0x2a8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x196>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a48      	ldr	r2, [pc, #288]	; (8002994 <HAL_GPIO_Init+0x2ac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x192>
 8002876:	2303      	movs	r3, #3
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 800287a:	2304      	movs	r3, #4
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x1a0>
 8002886:	2300      	movs	r3, #0
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002898:	493a      	ldr	r1, [pc, #232]	; (8002984 <HAL_GPIO_Init+0x29c>)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4938      	ldr	r1, [pc, #224]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
 80028be:	e006      	b.n	80028ce <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028c0:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	4933      	ldr	r1, [pc, #204]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	492e      	ldr	r1, [pc, #184]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
 80028e6:	e006      	b.n	80028f6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4929      	ldr	r1, [pc, #164]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	4924      	ldr	r1, [pc, #144]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
 800290e:	e006      	b.n	800291e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	43db      	mvns	r3, r3
 8002918:	491f      	ldr	r1, [pc, #124]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 800291a:	4013      	ands	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	491a      	ldr	r1, [pc, #104]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
 8002936:	e006      	b.n	8002946 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	43db      	mvns	r3, r3
 8002940:	4915      	ldr	r1, [pc, #84]	; (8002998 <HAL_GPIO_Init+0x2b0>)
 8002942:	4013      	ands	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f47f aed0 	bne.w	80026fc <HAL_GPIO_Init+0x14>
  }
}
 800295c:	bf00      	nop
 800295e:	372c      	adds	r7, #44	; 0x2c
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	10210000 	.word	0x10210000
 800296c:	10110000 	.word	0x10110000
 8002970:	10120000 	.word	0x10120000
 8002974:	10310000 	.word	0x10310000
 8002978:	10320000 	.word	0x10320000
 800297c:	10220000 	.word	0x10220000
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	40010800 	.word	0x40010800
 800298c:	40010c00 	.word	0x40010c00
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	40010400 	.word	0x40010400

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e4:	887a      	ldrh	r2, [r7, #2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fad4 	bl	8000fc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e10f      	b.n	8002c5e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fd ff7c 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a70:	f002 fa06 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 8002a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4a7b      	ldr	r2, [pc, #492]	; (8002c68 <HAL_I2C_Init+0x23c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d807      	bhi.n	8002a90 <HAL_I2C_Init+0x64>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a7a      	ldr	r2, [pc, #488]	; (8002c6c <HAL_I2C_Init+0x240>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	bf94      	ite	ls
 8002a88:	2301      	movls	r3, #1
 8002a8a:	2300      	movhi	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e006      	b.n	8002a9e <HAL_I2C_Init+0x72>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a77      	ldr	r2, [pc, #476]	; (8002c70 <HAL_I2C_Init+0x244>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bf94      	ite	ls
 8002a98:	2301      	movls	r3, #1
 8002a9a:	2300      	movhi	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0db      	b.n	8002c5e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a72      	ldr	r2, [pc, #456]	; (8002c74 <HAL_I2C_Init+0x248>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9b      	lsrs	r3, r3, #18
 8002ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a64      	ldr	r2, [pc, #400]	; (8002c68 <HAL_I2C_Init+0x23c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d802      	bhi.n	8002ae0 <HAL_I2C_Init+0xb4>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3301      	adds	r3, #1
 8002ade:	e009      	b.n	8002af4 <HAL_I2C_Init+0xc8>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_I2C_Init+0x24c>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	099b      	lsrs	r3, r3, #6
 8002af2:	3301      	adds	r3, #1
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	4956      	ldr	r1, [pc, #344]	; (8002c68 <HAL_I2C_Init+0x23c>)
 8002b10:	428b      	cmp	r3, r1
 8002b12:	d80d      	bhi.n	8002b30 <HAL_I2C_Init+0x104>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e59      	subs	r1, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	bf38      	it	cc
 8002b2c:	2304      	movcc	r3, #4
 8002b2e:	e04f      	b.n	8002bd0 <HAL_I2C_Init+0x1a4>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d111      	bne.n	8002b5c <HAL_I2C_Init+0x130>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	440b      	add	r3, r1
 8002b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e012      	b.n	8002b82 <HAL_I2C_Init+0x156>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Init+0x15e>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e022      	b.n	8002bd0 <HAL_I2C_Init+0x1a4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10e      	bne.n	8002bb0 <HAL_I2C_Init+0x184>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e58      	subs	r0, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	440b      	add	r3, r1
 8002ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bae:	e00f      	b.n	8002bd0 <HAL_I2C_Init+0x1a4>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e58      	subs	r0, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	0099      	lsls	r1, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	6809      	ldr	r1, [r1, #0]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69da      	ldr	r2, [r3, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6911      	ldr	r1, [r2, #16]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68d2      	ldr	r2, [r2, #12]
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	000186a0 	.word	0x000186a0
 8002c6c:	001e847f 	.word	0x001e847f
 8002c70:	003d08ff 	.word	0x003d08ff
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	10624dd3 	.word	0x10624dd3

08002c7c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d158      	bne.n	8002d48 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_I2C_Slave_Receive_IT+0x26>
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e051      	b.n	8002d4a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_I2C_Slave_Receive_IT+0x38>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e04a      	b.n	8002d4a <HAL_I2C_Slave_Receive_IT+0xce>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d007      	beq.n	8002cda <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2222      	movs	r2, #34	; 0x22
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <HAL_I2C_Slave_Receive_IT+0xd8>)
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d2a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002d42:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	ffff0000 	.word	0xffff0000

08002d58 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d74:	2b28      	cmp	r3, #40	; 0x28
 8002d76:	d15b      	bne.n	8002e30 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d002      	beq.n	8002d84 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e054      	b.n	8002e32 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e04d      	b.n	8002e32 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d007      	beq.n	8002dbc <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2229      	movs	r2, #41	; 0x29
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	88fa      	ldrh	r2, [r7, #6]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002e2a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e58:	2b28      	cmp	r3, #40	; 0x28
 8002e5a:	d15b      	bne.n	8002f14 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e054      	b.n	8002f16 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e04d      	b.n	8002f16 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d007      	beq.n	8002ea0 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	222a      	movs	r2, #42	; 0x2a
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f0e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d124      	bne.n	8002f7e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2228      	movs	r2, #40	; 0x28
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d007      	beq.n	8002f5a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f68:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f78:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b088      	sub	sp, #32
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002faa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b10      	cmp	r3, #16
 8002fb8:	d003      	beq.n	8002fc2 <HAL_I2C_EV_IRQHandler+0x38>
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	f040 80b6 	bne.w	800312e <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10d      	bne.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x6e>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002fe2:	d003      	beq.n	8002fec <HAL_I2C_EV_IRQHandler+0x62>
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002fea:	d101      	bne.n	8002ff0 <HAL_I2C_EV_IRQHandler+0x66>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x68>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	f000 8127 	beq.w	8003246 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00c      	beq.n	800301c <HAL_I2C_EV_IRQHandler+0x92>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	0a5b      	lsrs	r3, r3, #9
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f001 fb43 	bl	800469a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fcd2 	bl	80039be <I2C_Master_SB>
 800301a:	e087      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	08db      	lsrs	r3, r3, #3
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_I2C_EV_IRQHandler+0xb2>
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	0a5b      	lsrs	r3, r3, #9
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fd47 	bl	8003ac8 <I2C_Master_ADD10>
 800303a:	e077      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0xd2>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	0a5b      	lsrs	r3, r3, #9
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fd60 	bl	8003b1a <I2C_Master_ADDR>
 800305a:	e067      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d030      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003076:	f000 80e8 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	09db      	lsrs	r3, r3, #7
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00f      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0x11c>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	0a9b      	lsrs	r3, r3, #10
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0x11c>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9b3 	bl	800340a <I2C_MasterTransmit_TXE>
 80030a4:	e042      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80cb 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	0a5b      	lsrs	r3, r3, #9
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80c4 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa99 	bl	80035fa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030c8:	e0bf      	b.n	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d8:	f000 80b7 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00f      	beq.n	8003108 <HAL_I2C_EV_IRQHandler+0x17e>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <HAL_I2C_EV_IRQHandler+0x17e>
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 faf0 	bl	80036e6 <I2C_MasterReceive_RXNE>
 8003106:	e011      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 809a 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	0a5b      	lsrs	r3, r3, #9
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 8093 	beq.w	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 fb60 	bl	80037ea <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312a:	e08e      	b.n	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
 800312c:	e08d      	b.n	800324a <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e007      	b.n	8003150 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x1f8>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	0a5b      	lsrs	r3, r3, #9
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00c      	beq.n	8003182 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003178:	69b9      	ldr	r1, [r7, #24]
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 ff24 	bl	8003fc8 <I2C_Slave_ADDR>
 8003180:	e066      	b.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x218>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	0a5b      	lsrs	r3, r3, #9
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 ff58 	bl	8004050 <I2C_Slave_STOPF>
 80031a0:	e056      	b.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	2b21      	cmp	r3, #33	; 0x21
 80031a6:	d002      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x224>
 80031a8:	7bbb      	ldrb	r3, [r7, #14]
 80031aa:	2b29      	cmp	r3, #41	; 0x29
 80031ac:	d125      	bne.n	80031fa <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	09db      	lsrs	r3, r3, #7
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00f      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x250>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	0a9b      	lsrs	r3, r3, #10
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x250>
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fe3c 	bl	8003e50 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d8:	e039      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d033      	beq.n	800324e <HAL_I2C_EV_IRQHandler+0x2c4>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	0a5b      	lsrs	r3, r3, #9
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02d      	beq.n	800324e <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fe69 	bl	8003eca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f8:	e029      	b.n	800324e <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00f      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x29c>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	0a9b      	lsrs	r3, r3, #10
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x29c>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fe73 	bl	8003f0a <I2C_SlaveReceive_RXNE>
 8003224:	e014      	b.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00e      	beq.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fea1 	bl	8003f86 <I2C_SlaveReceive_BTF>
 8003244:	e004      	b.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800324e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b08a      	sub	sp, #40	; 0x28
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_I2C_ER_IRQHandler+0x56>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	0a1b      	lsrs	r3, r3, #8
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d010      	beq.n	80032ac <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800329a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	0a5b      	lsrs	r3, r3, #9
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <HAL_I2C_ER_IRQHandler+0x80>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	0a1b      	lsrs	r3, r3, #8
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80032d4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	0a9b      	lsrs	r3, r3, #10
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d041      	beq.n	8003366 <HAL_I2C_ER_IRQHandler+0x110>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d03b      	beq.n	8003366 <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f4:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800330c:	7efb      	ldrb	r3, [r7, #27]
 800330e:	2b20      	cmp	r3, #32
 8003310:	d112      	bne.n	8003338 <HAL_I2C_ER_IRQHandler+0xe2>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <HAL_I2C_ER_IRQHandler+0xe2>
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	2b21      	cmp	r3, #33	; 0x21
 800331c:	d008      	beq.n	8003330 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b29      	cmp	r3, #41	; 0x29
 8003322:	d005      	beq.n	8003330 <HAL_I2C_ER_IRQHandler+0xda>
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	2b28      	cmp	r3, #40	; 0x28
 8003328:	d106      	bne.n	8003338 <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b21      	cmp	r3, #33	; 0x21
 800332e:	d103      	bne.n	8003338 <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 ffbd 	bl	80042b0 <I2C_Slave_AF>
 8003336:	e016      	b.n	8003366 <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003340:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b10      	cmp	r3, #16
 8003354:	d107      	bne.n	8003366 <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003364:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	0adb      	lsrs	r3, r3, #11
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0x13a>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	0a1b      	lsrs	r3, r3, #8
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d008      	beq.n	8003390 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800338e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fff4 	bl	8004390 <I2C_ITError>
  }
}
 80033a8:	bf00      	nop
 80033aa:	3728      	adds	r7, #40	; 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr

0800340a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003418:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003420:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342c:	2b00      	cmp	r3, #0
 800342e:	d150      	bne.n	80034d2 <I2C_MasterTransmit_TXE+0xc8>
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b21      	cmp	r3, #33	; 0x21
 8003434:	d14d      	bne.n	80034d2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d01d      	beq.n	8003478 <I2C_MasterTransmit_TXE+0x6e>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b20      	cmp	r3, #32
 8003440:	d01a      	beq.n	8003478 <I2C_MasterTransmit_TXE+0x6e>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003448:	d016      	beq.n	8003478 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003458:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2211      	movs	r2, #17
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ff9d 	bl	80033b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003476:	e0bc      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003486:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d107      	bne.n	80034c2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff8a 	bl	80033d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034c0:	e097      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff ff70 	bl	80033b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d0:	e08f      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b21      	cmp	r3, #33	; 0x21
 80034d6:	d007      	beq.n	80034e8 <I2C_MasterTransmit_TXE+0xde>
 80034d8:	7bbb      	ldrb	r3, [r7, #14]
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	f040 8089 	bne.w	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	2b22      	cmp	r3, #34	; 0x22
 80034e4:	f040 8085 	bne.w	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d108      	bne.n	8003504 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003502:	e076      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d15d      	bne.n	80035cc <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11d      	bne.n	8003554 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10b      	bne.n	8003538 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	b2da      	uxtb	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003536:	e05c      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353c:	b29b      	uxth	r3, r3
 800353e:	121b      	asrs	r3, r3, #8
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003552:	e04e      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10b      	bne.n	8003574 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003560:	b2da      	uxtb	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003572:	e03e      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003578:	2b02      	cmp	r3, #2
 800357a:	d13a      	bne.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b22      	cmp	r3, #34	; 0x22
 8003586:	d108      	bne.n	800359a <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	e02b      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b21      	cmp	r3, #33	; 0x21
 80035a4:	d125      	bne.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035ca:	e012      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035f0:	e7ff      	b.n	80035f2 <I2C_MasterTransmit_TXE+0x1e8>
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b21      	cmp	r3, #33	; 0x21
 8003612:	d164      	bne.n	80036de <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d012      	beq.n	8003644 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8003642:	e04c      	b.n	80036de <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d01d      	beq.n	8003686 <I2C_MasterTransmit_BTF+0x8c>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b20      	cmp	r3, #32
 800364e:	d01a      	beq.n	8003686 <I2C_MasterTransmit_BTF+0x8c>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003656:	d016      	beq.n	8003686 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003666:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2211      	movs	r2, #17
 800366c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff fe96 	bl	80033b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003684:	e02b      	b.n	80036de <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003694:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d107      	bne.n	80036d0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff fe83 	bl	80033d4 <HAL_I2C_MemTxCpltCallback>
}
 80036ce:	e006      	b.n	80036de <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff fe69 	bl	80033b0 <HAL_I2C_MasterTxCpltCallback>
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b22      	cmp	r3, #34	; 0x22
 80036f8:	d173      	bne.n	80037e2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d920      	bls.n	800374a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d154      	bne.n	80037e2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003748:	e04b      	b.n	80037e2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	2b02      	cmp	r3, #2
 8003750:	d047      	beq.n	80037e2 <I2C_MasterReceive_RXNE+0xfc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <I2C_MasterReceive_RXNE+0x78>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d141      	bne.n	80037e2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d10a      	bne.n	80037ce <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fe0d 	bl	80033e6 <HAL_I2C_MemRxCpltCallback>
}
 80037cc:	e009      	b.n	80037e2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2212      	movs	r2, #18
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fdf0 	bl	80033c2 <HAL_I2C_MasterRxCpltCallback>
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d11b      	bne.n	800383a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003810:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003838:	e0bd      	b.n	80039b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b03      	cmp	r3, #3
 8003842:	d129      	bne.n	8003898 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003852:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d00a      	beq.n	8003870 <I2C_MasterReceive_BTF+0x86>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d007      	beq.n	8003870 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003896:	e08e      	b.n	80039b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d176      	bne.n	8003990 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d002      	beq.n	80038ae <I2C_MasterReceive_BTF+0xc4>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d108      	bne.n	80038c0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e019      	b.n	80038f4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d002      	beq.n	80038cc <I2C_MasterReceive_BTF+0xe2>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d108      	bne.n	80038de <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e00a      	b.n	80038f4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b10      	cmp	r3, #16
 80038e2:	d007      	beq.n	80038f4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800394e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d10a      	bne.n	800397a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fd37 	bl	80033e6 <HAL_I2C_MemRxCpltCallback>
}
 8003978:	e01d      	b.n	80039b6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2212      	movs	r2, #18
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fd1a 	bl	80033c2 <HAL_I2C_MasterRxCpltCallback>
}
 800398e:	e012      	b.n	80039b6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b40      	cmp	r3, #64	; 0x40
 80039d0:	d117      	bne.n	8003a02 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80039ec:	e067      	b.n	8003abe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]
}
 8003a00:	e05d      	b.n	8003abe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a0a:	d133      	bne.n	8003a74 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b21      	cmp	r3, #33	; 0x21
 8003a16:	d109      	bne.n	8003a2c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a28:	611a      	str	r2, [r3, #16]
 8003a2a:	e008      	b.n	8003a3e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <I2C_Master_SB+0x90>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d037      	beq.n	8003abe <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <I2C_Master_SB+0xa4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02d      	beq.n	8003abe <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a70:	605a      	str	r2, [r3, #4]
}
 8003a72:	e024      	b.n	8003abe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10e      	bne.n	8003a9a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	11db      	asrs	r3, r3, #7
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f003 0306 	and.w	r3, r3, #6
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f063 030f 	orn	r3, r3, #15
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]
}
 8003a98:	e011      	b.n	8003abe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d10d      	bne.n	8003abe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	11db      	asrs	r3, r3, #7
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 0306 	and.w	r3, r3, #6
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f063 030e 	orn	r3, r3, #14
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	611a      	str	r2, [r3, #16]
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d103      	bne.n	8003aec <I2C_Master_ADD10+0x24>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d011      	beq.n	8003b10 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d104      	bne.n	8003b00 <I2C_Master_ADD10+0x38>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b091      	sub	sp, #68	; 0x44
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b22      	cmp	r3, #34	; 0x22
 8003b42:	f040 8174 	bne.w	8003e2e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <I2C_Master_ADDR+0x54>
 8003b4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d10b      	bne.n	8003b6e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b56:	2300      	movs	r3, #0
 8003b58:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	e16b      	b.n	8003e46 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11d      	bne.n	8003bb2 <I2C_Master_ADDR+0x98>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b7e:	d118      	bne.n	8003bb2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	651a      	str	r2, [r3, #80]	; 0x50
 8003bb0:	e149      	b.n	8003e46 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d113      	bne.n	8003be4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e120      	b.n	8003e26 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	f040 808a 	bne.w	8003d04 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bf6:	d137      	bne.n	8003c68 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c06:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c16:	d113      	bne.n	8003c40 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c26:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	e0f2      	b.n	8003e26 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	623b      	str	r3, [r7, #32]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	e0de      	b.n	8003e26 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d02e      	beq.n	8003ccc <I2C_Master_ADDR+0x1b2>
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d02b      	beq.n	8003ccc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	2b12      	cmp	r3, #18
 8003c78:	d102      	bne.n	8003c80 <I2C_Master_ADDR+0x166>
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d125      	bne.n	8003ccc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d00e      	beq.n	8003ca4 <I2C_Master_ADDR+0x18a>
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d00b      	beq.n	8003ca4 <I2C_Master_ADDR+0x18a>
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d008      	beq.n	8003ca4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e007      	b.n	8003cb4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	e0ac      	b.n	8003e26 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cda:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e090      	b.n	8003e26 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d158      	bne.n	8003dc0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d021      	beq.n	8003d58 <I2C_Master_ADDR+0x23e>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d01e      	beq.n	8003d58 <I2C_Master_ADDR+0x23e>
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d01b      	beq.n	8003d58 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	e012      	b.n	8003d7e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d66:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8c:	d14b      	bne.n	8003e26 <I2C_Master_ADDR+0x30c>
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d94:	d00b      	beq.n	8003dae <I2C_Master_ADDR+0x294>
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d008      	beq.n	8003dae <I2C_Master_ADDR+0x294>
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d005      	beq.n	8003dae <I2C_Master_ADDR+0x294>
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d002      	beq.n	8003dae <I2C_Master_ADDR+0x294>
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d13b      	bne.n	8003e26 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e032      	b.n	8003e26 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dde:	d117      	bne.n	8003e10 <I2C_Master_ADDR+0x2f6>
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de6:	d00b      	beq.n	8003e00 <I2C_Master_ADDR+0x2e6>
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d008      	beq.n	8003e00 <I2C_Master_ADDR+0x2e6>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d005      	beq.n	8003e00 <I2C_Master_ADDR+0x2e6>
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d002      	beq.n	8003e00 <I2C_Master_ADDR+0x2e6>
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d107      	bne.n	8003e10 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e0e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e2c:	e00b      	b.n	8003e46 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
}
 8003e44:	e7ff      	b.n	8003e46 <I2C_Master_ADDR+0x32c>
 8003e46:	bf00      	nop
 8003e48:	3744      	adds	r7, #68	; 0x44
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02b      	beq.n	8003ec2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d114      	bne.n	8003ec2 <I2C_SlaveTransmit_TXE+0x72>
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	2b29      	cmp	r3, #41	; 0x29
 8003e9c:	d111      	bne.n	8003ec2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2221      	movs	r2, #33	; 0x21
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2228      	movs	r2, #40	; 0x28
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7fd f8d7 	bl	8001070 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d011      	beq.n	8003f00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f18:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02c      	beq.n	8003f7e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d114      	bne.n	8003f7e <I2C_SlaveReceive_RXNE+0x74>
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b2a      	cmp	r3, #42	; 0x2a
 8003f58:	d111      	bne.n	8003f7e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f68:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2222      	movs	r2, #34	; 0x22
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2228      	movs	r2, #40	; 0x28
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fd f86b 	bl	8001054 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d012      	beq.n	8003fbe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe2:	2b28      	cmp	r3, #40	; 0x28
 8003fe4:	d127      	bne.n	8004036 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	09db      	lsrs	r3, r3, #7
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	81bb      	strh	r3, [r7, #12]
 8004018:	e002      	b.n	8004020 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004028:	89ba      	ldrh	r2, [r7, #12]
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fc ffde 	bl	8000ff0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004034:	e008      	b.n	8004048 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f06f 0202 	mvn.w	r2, #2
 800403e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800406e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ac:	d172      	bne.n	8004194 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b22      	cmp	r3, #34	; 0x22
 80040b2:	d002      	beq.n	80040ba <I2C_Slave_STOPF+0x6a>
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b2a      	cmp	r3, #42	; 0x2a
 80040b8:	d135      	bne.n	8004126 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0204 	orr.w	r2, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fae0 	bl	80026b8 <HAL_DMA_GetState>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d049      	beq.n	8004192 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	4a69      	ldr	r2, [pc, #420]	; (80042a8 <I2C_Slave_STOPF+0x258>)
 8004104:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fa5e 	bl	80025cc <HAL_DMA_Abort_IT>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d03d      	beq.n	8004192 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004120:	4610      	mov	r0, r2
 8004122:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004124:	e035      	b.n	8004192 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	b29a      	uxth	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004158:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe faaa 	bl	80026b8 <HAL_DMA_GetState>
 8004164:	4603      	mov	r3, r0
 8004166:	2b01      	cmp	r3, #1
 8004168:	d014      	beq.n	8004194 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	4a4e      	ldr	r2, [pc, #312]	; (80042a8 <I2C_Slave_STOPF+0x258>)
 8004170:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	4618      	mov	r0, r3
 8004178:	f7fe fa28 	bl	80025cc <HAL_DMA_Abort_IT>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800418c:	4610      	mov	r0, r2
 800418e:	4798      	blx	r3
 8004190:	e000      	b.n	8004194 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004192:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d03e      	beq.n	800421c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d112      	bne.n	80041d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d112      	bne.n	8004206 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691a      	ldr	r2, [r3, #16]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	f043 0204 	orr.w	r2, r3, #4
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8b3 	bl	8004390 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800422a:	e039      	b.n	80042a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b2a      	cmp	r3, #42	; 0x2a
 8004230:	d109      	bne.n	8004246 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2228      	movs	r2, #40	; 0x28
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7fc ff07 	bl	8001054 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b28      	cmp	r3, #40	; 0x28
 8004250:	d111      	bne.n	8004276 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a15      	ldr	r2, [pc, #84]	; (80042ac <I2C_Slave_STOPF+0x25c>)
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fee6 	bl	8001040 <HAL_I2C_ListenCpltCallback>
}
 8004274:	e014      	b.n	80042a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	2b22      	cmp	r3, #34	; 0x22
 800427c:	d002      	beq.n	8004284 <I2C_Slave_STOPF+0x234>
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	2b22      	cmp	r3, #34	; 0x22
 8004282:	d10d      	bne.n	80042a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fc feda 	bl	8001054 <HAL_I2C_SlaveRxCpltCallback>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	080045bd 	.word	0x080045bd
 80042ac:	ffff0000 	.word	0xffff0000

080042b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d002      	beq.n	80042d2 <I2C_Slave_AF+0x22>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d129      	bne.n	8004326 <I2C_Slave_AF+0x76>
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b28      	cmp	r3, #40	; 0x28
 80042d6:	d126      	bne.n	8004326 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a2c      	ldr	r2, [pc, #176]	; (800438c <I2C_Slave_AF+0xdc>)
 80042dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004306:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fe8e 	bl	8001040 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004324:	e02e      	b.n	8004384 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b21      	cmp	r3, #33	; 0x21
 800432a:	d126      	bne.n	800437a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a17      	ldr	r2, [pc, #92]	; (800438c <I2C_Slave_AF+0xdc>)
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2221      	movs	r2, #33	; 0x21
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004356:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004360:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004370:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fe7c 	bl	8001070 <HAL_I2C_SlaveTxCpltCallback>
}
 8004378:	e004      	b.n	8004384 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004382:	615a      	str	r2, [r3, #20]
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	ffff0000 	.word	0xffff0000

08004390 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d10a      	bne.n	80043c2 <I2C_ITError+0x32>
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b22      	cmp	r3, #34	; 0x22
 80043b0:	d107      	bne.n	80043c2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043c8:	2b28      	cmp	r3, #40	; 0x28
 80043ca:	d107      	bne.n	80043dc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2228      	movs	r2, #40	; 0x28
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043da:	e015      	b.n	8004408 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ea:	d006      	beq.n	80043fa <I2C_ITError+0x6a>
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b60      	cmp	r3, #96	; 0x60
 80043f0:	d003      	beq.n	80043fa <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	d161      	bne.n	80044dc <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004426:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004430:	2b01      	cmp	r3, #1
 8004432:	d020      	beq.n	8004476 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	4a5e      	ldr	r2, [pc, #376]	; (80045b4 <I2C_ITError+0x224>)
 800443a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	4618      	mov	r0, r3
 8004442:	f7fe f8c3 	bl	80025cc <HAL_DMA_Abort_IT>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 8089 	beq.w	8004560 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004470:	4610      	mov	r0, r2
 8004472:	4798      	blx	r3
 8004474:	e074      	b.n	8004560 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	4a4e      	ldr	r2, [pc, #312]	; (80045b4 <I2C_ITError+0x224>)
 800447c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe f8a2 	bl	80025cc <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d068      	beq.n	8004560 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d10b      	bne.n	80044b4 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d6:	4610      	mov	r0, r2
 80044d8:	4798      	blx	r3
 80044da:	e041      	b.n	8004560 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b60      	cmp	r3, #96	; 0x60
 80044e6:	d125      	bne.n	8004534 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d10b      	bne.n	800451c <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fe ff63 	bl	80033f8 <HAL_I2C_AbortCpltCallback>
 8004532:	e015      	b.n	8004560 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d10b      	bne.n	800455a <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fdb6 	bl	80010cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004566:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b04      	cmp	r3, #4
 8004572:	d11b      	bne.n	80045ac <I2C_ITError+0x21c>
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b28      	cmp	r3, #40	; 0x28
 8004578:	d118      	bne.n	80045ac <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004588:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a0a      	ldr	r2, [pc, #40]	; (80045b8 <I2C_ITError+0x228>)
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fd4a 	bl	8001040 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	080045bd 	.word	0x080045bd
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d6:	2200      	movs	r2, #0
 80045d8:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	2200      	movs	r2, #0
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045fc:	2200      	movs	r2, #0
 80045fe:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	2200      	movs	r2, #0
 8004606:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b60      	cmp	r3, #96	; 0x60
 8004622:	d10e      	bne.n	8004642 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7fe fedc 	bl	80033f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004640:	e027      	b.n	8004692 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004642:	7afb      	ldrb	r3, [r7, #11]
 8004644:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004648:	2b28      	cmp	r3, #40	; 0x28
 800464a:	d117      	bne.n	800467c <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800466a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2228      	movs	r2, #40	; 0x28
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800467a:	e007      	b.n	800468c <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7fc fd1d 	bl	80010cc <HAL_I2C_ErrorCallback>
}
 8004692:	bf00      	nop
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80046aa:	d103      	bne.n	80046b4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80046b2:	e007      	b.n	80046c4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046bc:	d102      	bne.n	80046c4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2208      	movs	r2, #8
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e26c      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8087 	beq.w	80047fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f0:	4b92      	ldr	r3, [pc, #584]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d00c      	beq.n	8004716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046fc:	4b8f      	ldr	r3, [pc, #572]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	2b08      	cmp	r3, #8
 8004706:	d112      	bne.n	800472e <HAL_RCC_OscConfig+0x5e>
 8004708:	4b8c      	ldr	r3, [pc, #560]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d10b      	bne.n	800472e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004716:	4b89      	ldr	r3, [pc, #548]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d06c      	beq.n	80047fc <HAL_RCC_OscConfig+0x12c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d168      	bne.n	80047fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e246      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x76>
 8004738:	4b80      	ldr	r3, [pc, #512]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7f      	ldr	r2, [pc, #508]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e02e      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x98>
 800474e:	4b7b      	ldr	r3, [pc, #492]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7a      	ldr	r2, [pc, #488]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b78      	ldr	r3, [pc, #480]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a77      	ldr	r2, [pc, #476]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0xbc>
 8004772:	4b72      	ldr	r3, [pc, #456]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a71      	ldr	r2, [pc, #452]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b6f      	ldr	r3, [pc, #444]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6e      	ldr	r2, [pc, #440]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 800478c:	4b6b      	ldr	r3, [pc, #428]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6a      	ldr	r2, [pc, #424]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b68      	ldr	r3, [pc, #416]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a67      	ldr	r2, [pc, #412]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fd fb90 	bl	8001ed0 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd fb8c 	bl	8001ed0 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1fa      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b5d      	ldr	r3, [pc, #372]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0xe4>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fd fb7c 	bl	8001ed0 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fd fb78 	bl	8001ed0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1e6      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	4b53      	ldr	r3, [pc, #332]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x10c>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d063      	beq.n	80048d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480a:	4b4c      	ldr	r3, [pc, #304]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004816:	4b49      	ldr	r3, [pc, #292]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b08      	cmp	r3, #8
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x18c>
 8004822:	4b46      	ldr	r3, [pc, #280]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x176>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1ba      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3d      	ldr	r3, [pc, #244]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4939      	ldr	r1, [pc, #228]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b36      	ldr	r3, [pc, #216]	; (8004940 <HAL_RCC_OscConfig+0x270>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd fb31 	bl	8001ed0 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004872:	f7fd fb2d 	bl	8001ed0 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e19b      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4927      	ldr	r1, [pc, #156]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_RCC_OscConfig+0x270>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fd fb10 	bl	8001ed0 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fd fb0c 	bl	8001ed0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e17a      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03a      	beq.n	8004954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d019      	beq.n	800491a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <HAL_RCC_OscConfig+0x274>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ec:	f7fd faf0 	bl	8001ed0 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fd faec 	bl	8001ed0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e15a      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <HAL_RCC_OscConfig+0x26c>)
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004912:	2001      	movs	r0, #1
 8004914:	f000 fadc 	bl	8004ed0 <RCC_Delay>
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_RCC_OscConfig+0x274>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004920:	f7fd fad6 	bl	8001ed0 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004926:	e00f      	b.n	8004948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7fd fad2 	bl	8001ed0 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d908      	bls.n	8004948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e140      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	42420000 	.word	0x42420000
 8004944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	4b9e      	ldr	r3, [pc, #632]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e9      	bne.n	8004928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a6 	beq.w	8004aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004966:	4b97      	ldr	r3, [pc, #604]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	4b94      	ldr	r3, [pc, #592]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	4a93      	ldr	r2, [pc, #588]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497c:	61d3      	str	r3, [r2, #28]
 800497e:	4b91      	ldr	r3, [pc, #580]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498e:	4b8e      	ldr	r3, [pc, #568]	; (8004bc8 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d118      	bne.n	80049cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499a:	4b8b      	ldr	r3, [pc, #556]	; (8004bc8 <HAL_RCC_OscConfig+0x4f8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a8a      	ldr	r2, [pc, #552]	; (8004bc8 <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a6:	f7fd fa93 	bl	8001ed0 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fd fa8f 	bl	8001ed0 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b64      	cmp	r3, #100	; 0x64
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e0fd      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c0:	4b81      	ldr	r3, [pc, #516]	; (8004bc8 <HAL_RCC_OscConfig+0x4f8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d106      	bne.n	80049e2 <HAL_RCC_OscConfig+0x312>
 80049d4:	4b7b      	ldr	r3, [pc, #492]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4a7a      	ldr	r2, [pc, #488]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6213      	str	r3, [r2, #32]
 80049e0:	e02d      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x334>
 80049ea:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	4a75      	ldr	r2, [pc, #468]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6213      	str	r3, [r2, #32]
 80049f6:	4b73      	ldr	r3, [pc, #460]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4a72      	ldr	r2, [pc, #456]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	6213      	str	r3, [r2, #32]
 8004a02:	e01c      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d10c      	bne.n	8004a26 <HAL_RCC_OscConfig+0x356>
 8004a0c:	4b6d      	ldr	r3, [pc, #436]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4a6c      	ldr	r2, [pc, #432]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a12:	f043 0304 	orr.w	r3, r3, #4
 8004a16:	6213      	str	r3, [r2, #32]
 8004a18:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4a69      	ldr	r2, [pc, #420]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	6213      	str	r3, [r2, #32]
 8004a24:	e00b      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 8004a26:	4b67      	ldr	r3, [pc, #412]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4a66      	ldr	r2, [pc, #408]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	6213      	str	r3, [r2, #32]
 8004a32:	4b64      	ldr	r3, [pc, #400]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4a63      	ldr	r2, [pc, #396]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d015      	beq.n	8004a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a46:	f7fd fa43 	bl	8001ed0 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fd fa3f 	bl	8001ed0 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0ab      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a64:	4b57      	ldr	r3, [pc, #348]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ee      	beq.n	8004a4e <HAL_RCC_OscConfig+0x37e>
 8004a70:	e014      	b.n	8004a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7fd fa2d 	bl	8001ed0 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fd fa29 	bl	8001ed0 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e095      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a90:	4b4c      	ldr	r3, [pc, #304]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ee      	bne.n	8004a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa2:	4b48      	ldr	r3, [pc, #288]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4a47      	ldr	r2, [pc, #284]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8081 	beq.w	8004bba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab8:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d061      	beq.n	8004b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d146      	bne.n	8004b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	4b3f      	ldr	r3, [pc, #252]	; (8004bcc <HAL_RCC_OscConfig+0x4fc>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fd f9fd 	bl	8001ed0 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fd f9f9 	bl	8001ed0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e067      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aec:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d108      	bne.n	8004b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b02:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	492d      	ldr	r1, [pc, #180]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b14:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a19      	ldr	r1, [r3, #32]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	430b      	orrs	r3, r1
 8004b26:	4927      	ldr	r1, [pc, #156]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2c:	4b27      	ldr	r3, [pc, #156]	; (8004bcc <HAL_RCC_OscConfig+0x4fc>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fd f9cd 	bl	8001ed0 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd f9c9 	bl	8001ed0 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e037      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCC_OscConfig+0x46a>
 8004b58:	e02f      	b.n	8004bba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <HAL_RCC_OscConfig+0x4fc>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fd f9b6 	bl	8001ed0 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fd f9b2 	bl	8001ed0 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e020      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x498>
 8004b86:	e018      	b.n	8004bba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e013      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCC_OscConfig+0x4f4>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	42420060 	.word	0x42420060

08004bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e0d0      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be4:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d910      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	4b67      	ldr	r3, [pc, #412]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 0207 	bic.w	r2, r3, #7
 8004bfa:	4965      	ldr	r1, [pc, #404]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0b8      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c2c:	4b59      	ldr	r3, [pc, #356]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a52      	ldr	r2, [pc, #328]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b50      	ldr	r3, [pc, #320]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	494d      	ldr	r1, [pc, #308]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d040      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d115      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e07f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c8e:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e073      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e06b      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4936      	ldr	r1, [pc, #216]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc0:	f7fd f906 	bl	8001ed0 <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc6:	e00a      	b.n	8004cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc8:	f7fd f902 	bl	8001ed0 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e053      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 020c 	and.w	r2, r3, #12
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d1eb      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d210      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 0207 	bic.w	r2, r3, #7
 8004d06:	4922      	ldr	r1, [pc, #136]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e032      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4916      	ldr	r1, [pc, #88]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	490e      	ldr	r1, [pc, #56]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5e:	f000 f821 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d62:	4601      	mov	r1, r0
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x1c8>)
 8004d70:	5cd3      	ldrb	r3, [r2, r3]
 8004d72:	fa21 f303 	lsr.w	r3, r1, r3
 8004d76:	4a09      	ldr	r2, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1cc>)
 8004d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1d0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd f864 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40022000 	.word	0x40022000
 8004d94:	40021000 	.word	0x40021000
 8004d98:	080064d0 	.word	0x080064d0
 8004d9c:	2000003c 	.word	0x2000003c
 8004da0:	20000040 	.word	0x20000040

08004da4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da4:	b490      	push	{r4, r7}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004daa:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004dac:	1d3c      	adds	r4, r7, #4
 8004dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004db0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004db4:	4b28      	ldr	r3, [pc, #160]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dce:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x40>
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0x46>
 8004de2:	e02d      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004de4:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004de6:	623b      	str	r3, [r7, #32]
      break;
 8004de8:	e02d      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	0c9b      	lsrs	r3, r3, #18
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004df6:	4413      	add	r3, r2
 8004df8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dfc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d013      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e08:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	0c5b      	lsrs	r3, r3, #17
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e16:	4413      	add	r3, r2
 8004e18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e22:	fb02 f203 	mul.w	r2, r2, r3
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	e004      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	623b      	str	r3, [r7, #32]
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e42:	623b      	str	r3, [r7, #32]
      break;
 8004e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e46:	6a3b      	ldr	r3, [r7, #32]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3728      	adds	r7, #40	; 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc90      	pop	{r4, r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	080064bc 	.word	0x080064bc
 8004e58:	080064cc 	.word	0x080064cc
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	00f42400 	.word	0x00f42400
 8004e64:	003d0900 	.word	0x003d0900
 8004e68:	007a1200 	.word	0x007a1200

08004e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e70:	4b02      	ldr	r3, [pc, #8]	; (8004e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	2000003c 	.word	0x2000003c

08004e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e84:	f7ff fff2 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004e88:	4601      	mov	r1, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4a03      	ldr	r2, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e96:	5cd3      	ldrb	r3, [r2, r3]
 8004e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	080064e0 	.word	0x080064e0

08004ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004eac:	f7ff ffde 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0adb      	lsrs	r3, r3, #11
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4a03      	ldr	r2, [pc, #12]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	080064e0 	.word	0x080064e0

08004ed0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <RCC_Delay+0x34>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <RCC_Delay+0x38>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	0a5b      	lsrs	r3, r3, #9
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004eec:	bf00      	nop
  }
  while (Delay --);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1e5a      	subs	r2, r3, #1
 8004ef2:	60fa      	str	r2, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f9      	bne.n	8004eec <RCC_Delay+0x1c>
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000003c 	.word	0x2000003c
 8004f08:	10624dd3 	.word	0x10624dd3

08004f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d07d      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f2c:	4b4f      	ldr	r3, [pc, #316]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10d      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f38:	4b4c      	ldr	r3, [pc, #304]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	4a4b      	ldr	r2, [pc, #300]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f42:	61d3      	str	r3, [r2, #28]
 8004f44:	4b49      	ldr	r3, [pc, #292]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b46      	ldr	r3, [pc, #280]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d118      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f60:	4b43      	ldr	r3, [pc, #268]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a42      	ldr	r2, [pc, #264]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f6c:	f7fc ffb0 	bl	8001ed0 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f72:	e008      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f74:	f7fc ffac 	bl	8001ed0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e06d      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f86:	4b3a      	ldr	r3, [pc, #232]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d02e      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d027      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fb0:	4b2e      	ldr	r3, [pc, #184]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fba:	4b2e      	ldr	r3, [pc, #184]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc0:	4b2c      	ldr	r3, [pc, #176]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fc6:	4a29      	ldr	r2, [pc, #164]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d014      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fc ff7b 	bl	8001ed0 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fc ff77 	bl	8001ed0 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e036      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ee      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4917      	ldr	r1, [pc, #92]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500e:	4313      	orrs	r3, r2
 8005010:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d105      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005018:	4b14      	ldr	r3, [pc, #80]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4a13      	ldr	r2, [pc, #76]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005022:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005030:	4b0e      	ldr	r3, [pc, #56]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	490b      	ldr	r1, [pc, #44]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503e:	4313      	orrs	r3, r2
 8005040:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800504e:	4b07      	ldr	r3, [pc, #28]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4904      	ldr	r1, [pc, #16]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000
 8005070:	40007000 	.word	0x40007000
 8005074:	42420440 	.word	0x42420440

08005078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e053      	b.n	8005132 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fc fb79 	bl	800179c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	ea42 0103 	orr.w	r1, r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	0c1a      	lsrs	r2, r3, #16
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f002 0204 	and.w	r2, r2, #4
 8005110:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005120:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b08c      	sub	sp, #48	; 0x30
 800513e:	af00      	add	r7, sp, #0
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005148:	2301      	movs	r3, #1
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x26>
 800515c:	2302      	movs	r3, #2
 800515e:	e18a      	b.n	8005476 <HAL_SPI_TransmitReceive+0x33c>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005168:	f7fc feb2 	bl	8001ed0 <HAL_GetTick>
 800516c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800517e:	887b      	ldrh	r3, [r7, #2]
 8005180:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005186:	2b01      	cmp	r3, #1
 8005188:	d00f      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x70>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005190:	d107      	bne.n	80051a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <HAL_SPI_TransmitReceive+0x68>
 800519a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d003      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051a8:	e15b      	b.n	8005462 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x82>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x82>
 80051b6:	887b      	ldrh	r3, [r7, #2]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d103      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80051c2:	e14e      	b.n	8005462 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d003      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2205      	movs	r2, #5
 80051d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	887a      	ldrh	r2, [r7, #2]
 80051ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	887a      	ldrh	r2, [r7, #2]
 80051fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	887a      	ldrh	r2, [r7, #2]
 8005200:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d007      	beq.n	800522c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005234:	d178      	bne.n	8005328 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x10a>
 800523e:	8b7b      	ldrh	r3, [r7, #26]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d166      	bne.n	8005312 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	881a      	ldrh	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	1c9a      	adds	r2, r3, #2
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005268:	e053      	b.n	8005312 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d11b      	bne.n	80052b0 <HAL_SPI_TransmitReceive+0x176>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x176>
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	2b01      	cmp	r3, #1
 8005286:	d113      	bne.n	80052b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	1c9a      	adds	r2, r3, #2
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d119      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x1b8>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d014      	beq.n	80052f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	b292      	uxth	r2, r2
 80052d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	1c9a      	adds	r2, r3, #2
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052ee:	2301      	movs	r3, #1
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052f2:	f7fc fded 	bl	8001ed0 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052fe:	429a      	cmp	r2, r3
 8005300:	d807      	bhi.n	8005312 <HAL_SPI_TransmitReceive+0x1d8>
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d003      	beq.n	8005312 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005310:	e0a7      	b.n	8005462 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1a6      	bne.n	800526a <HAL_SPI_TransmitReceive+0x130>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1a1      	bne.n	800526a <HAL_SPI_TransmitReceive+0x130>
 8005326:	e07c      	b.n	8005422 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_SPI_TransmitReceive+0x1fc>
 8005330:	8b7b      	ldrh	r3, [r7, #26]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d16b      	bne.n	800540e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	330c      	adds	r3, #12
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800535c:	e057      	b.n	800540e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b02      	cmp	r3, #2
 800536a:	d11c      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x26c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d017      	beq.n	80053a6 <HAL_SPI_TransmitReceive+0x26c>
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d114      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	7812      	ldrb	r2, [r2, #0]
 8005388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d119      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x2ae>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d014      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053e4:	2301      	movs	r3, #1
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053e8:	f7fc fd72 	bl	8001ed0 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d803      	bhi.n	8005400 <HAL_SPI_TransmitReceive+0x2c6>
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fe:	d102      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x2cc>
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800540c:	e029      	b.n	8005462 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1a2      	bne.n	800535e <HAL_SPI_TransmitReceive+0x224>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d19d      	bne.n	800535e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 f893 	bl	8005552 <SPI_EndRxTxTransaction>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800543e:	e010      	b.n	8005462 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10b      	bne.n	8005460 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	e000      	b.n	8005462 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005460:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005476:	4618      	mov	r0, r3
 8005478:	3730      	adds	r7, #48	; 0x30
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800548e:	e04c      	b.n	800552a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	d048      	beq.n	800552a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005498:	f7fc fd1a 	bl	8001ed0 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d902      	bls.n	80054ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d13d      	bne.n	800552a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c6:	d111      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d0:	d004      	beq.n	80054dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054da:	d107      	bne.n	80054ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f4:	d10f      	bne.n	8005516 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e00f      	b.n	800554a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	bf0c      	ite	eq
 800553a:	2301      	moveq	r3, #1
 800553c:	2300      	movne	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	429a      	cmp	r2, r3
 8005546:	d1a3      	bne.n	8005490 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af02      	add	r7, sp, #8
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2200      	movs	r2, #0
 8005566:	2180      	movs	r1, #128	; 0x80
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff88 	bl	800547e <SPI_WaitFlagStateUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d007      	beq.n	8005584 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	f043 0220 	orr.w	r2, r3, #32
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e000      	b.n	8005586 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e01d      	b.n	80055dc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fc fa99 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 fa0f 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2b06      	cmp	r3, #6
 800560c:	d007      	beq.n	800561e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0201 	orr.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b02      	cmp	r3, #2
 800563e:	d122      	bne.n	8005686 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b02      	cmp	r3, #2
 800564c:	d11b      	bne.n	8005686 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f06f 0202 	mvn.w	r2, #2
 8005656:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f9a4 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 8005672:	e005      	b.n	8005680 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f997 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f9a6 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b04      	cmp	r3, #4
 8005692:	d122      	bne.n	80056da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d11b      	bne.n	80056da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f06f 0204 	mvn.w	r2, #4
 80056aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f97a 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 80056c6:	e005      	b.n	80056d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f96d 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f97c 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0308 	and.w	r3, r3, #8
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d122      	bne.n	800572e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d11b      	bne.n	800572e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 0208 	mvn.w	r2, #8
 80056fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2204      	movs	r2, #4
 8005704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f950 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 800571a:	e005      	b.n	8005728 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f943 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f952 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0310 	and.w	r3, r3, #16
 8005738:	2b10      	cmp	r3, #16
 800573a:	d122      	bne.n	8005782 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b10      	cmp	r3, #16
 8005748:	d11b      	bne.n	8005782 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f06f 0210 	mvn.w	r2, #16
 8005752:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2208      	movs	r2, #8
 8005758:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f926 	bl	80059ba <HAL_TIM_IC_CaptureCallback>
 800576e:	e005      	b.n	800577c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f919 	bl	80059a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f928 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10e      	bne.n	80057ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f06f 0201 	mvn.w	r2, #1
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f7fb fc6f 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b8:	2b80      	cmp	r3, #128	; 0x80
 80057ba:	d10e      	bne.n	80057da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c6:	2b80      	cmp	r3, #128	; 0x80
 80057c8:	d107      	bne.n	80057da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa50 	bl	8005c7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d10e      	bne.n	8005806 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	d107      	bne.n	8005806 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f8ec 	bl	80059de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d10e      	bne.n	8005832 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b20      	cmp	r3, #32
 8005820:	d107      	bne.n	8005832 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f06f 0220 	mvn.w	r2, #32
 800582a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fa1b 	bl	8005c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584a:	2b01      	cmp	r3, #1
 800584c:	d101      	bne.n	8005852 <HAL_TIM_ConfigClockSource+0x18>
 800584e:	2302      	movs	r3, #2
 8005850:	e0a6      	b.n	80059a0 <HAL_TIM_ConfigClockSource+0x166>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005870:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005878:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d067      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x120>
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d80b      	bhi.n	80058a6 <HAL_TIM_ConfigClockSource+0x6c>
 800588e:	2b10      	cmp	r3, #16
 8005890:	d073      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x140>
 8005892:	2b10      	cmp	r3, #16
 8005894:	d802      	bhi.n	800589c <HAL_TIM_ConfigClockSource+0x62>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d06f      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800589a:	e078      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800589c:	2b20      	cmp	r3, #32
 800589e:	d06c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x140>
 80058a0:	2b30      	cmp	r3, #48	; 0x30
 80058a2:	d06a      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x140>
      break;
 80058a4:	e073      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058a6:	2b70      	cmp	r3, #112	; 0x70
 80058a8:	d00d      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x8c>
 80058aa:	2b70      	cmp	r3, #112	; 0x70
 80058ac:	d804      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x7e>
 80058ae:	2b50      	cmp	r3, #80	; 0x50
 80058b0:	d033      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xe0>
 80058b2:	2b60      	cmp	r3, #96	; 0x60
 80058b4:	d041      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80058b6:	e06a      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058bc:	d066      	beq.n	800598c <HAL_TIM_ConfigClockSource+0x152>
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c2:	d017      	beq.n	80058f4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80058c4:	e063      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6899      	ldr	r1, [r3, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f000 f964 	bl	8005ba2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	609a      	str	r2, [r3, #8]
      break;
 80058f2:	e04c      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	6899      	ldr	r1, [r3, #8]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f000 f94d 	bl	8005ba2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005916:	609a      	str	r2, [r3, #8]
      break;
 8005918:	e039      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	461a      	mov	r2, r3
 8005928:	f000 f8c4 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2150      	movs	r1, #80	; 0x50
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f91b 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005938:	e029      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	461a      	mov	r2, r3
 8005948:	f000 f8e2 	bl	8005b10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2160      	movs	r1, #96	; 0x60
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f90b 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005958:	e019      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	461a      	mov	r2, r3
 8005968:	f000 f8a4 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2140      	movs	r1, #64	; 0x40
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f8fb 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 8005978:	e009      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f000 f8f2 	bl	8005b6e <TIM_ITRx_SetConfig>
      break;
 800598a:	e000      	b.n	800598e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800598c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <TIM_Base_SetConfig+0xb8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00b      	beq.n	8005a20 <TIM_Base_SetConfig+0x30>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d007      	beq.n	8005a20 <TIM_Base_SetConfig+0x30>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a26      	ldr	r2, [pc, #152]	; (8005aac <TIM_Base_SetConfig+0xbc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_Base_SetConfig+0x30>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <TIM_Base_SetConfig+0xc0>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <TIM_Base_SetConfig+0xb8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_Base_SetConfig+0x62>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d007      	beq.n	8005a52 <TIM_Base_SetConfig+0x62>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a19      	ldr	r2, [pc, #100]	; (8005aac <TIM_Base_SetConfig+0xbc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_Base_SetConfig+0x62>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <TIM_Base_SetConfig+0xc0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <TIM_Base_SetConfig+0xb8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d103      	bne.n	8005a98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	615a      	str	r2, [r3, #20]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800

08005ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 030a 	bic.w	r3, r3, #10
 8005af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f023 0210 	bic.w	r2, r3, #16
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	031b      	lsls	r3, r3, #12
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	621a      	str	r2, [r3, #32]
}
 8005b64:	bf00      	nop
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f043 0307 	orr.w	r3, r3, #7
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr

08005ba2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b087      	sub	sp, #28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	021a      	lsls	r2, r3, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	609a      	str	r2, [r3, #8]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e032      	b.n	8005c5e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c30:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e03f      	b.n	8005d1e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fb ffbe 	bl	8001c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	; 0x24
 8005cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fae1 	bl	8006298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8005d3c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0201 	bic.w	r2, r2, #1
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d024      	beq.n	8005da6 <HAL_UART_Abort+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d6a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d018      	beq.n	8005da6 <HAL_UART_Abort+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	2200      	movs	r2, #0
 8005d7a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fc fbe8 	bl	8002556 <HAL_DMA_Abort>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00c      	beq.n	8005da6 <HAL_UART_Abort+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fc fc9d 	bl	80026d0 <HAL_DMA_GetError>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d104      	bne.n	8005da6 <HAL_UART_Abort+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e03d      	b.n	8005e22 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d024      	beq.n	8005dfe <HAL_UART_Abort+0xd8>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d018      	beq.n	8005dfe <HAL_UART_Abort+0xd8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fc fbbc 	bl	8002556 <HAL_DMA_Abort>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00c      	beq.n	8005dfe <HAL_UART_Abort+0xd8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fc fc71 	bl	80026d0 <HAL_DMA_GetError>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d104      	bne.n	8005dfe <HAL_UART_Abort+0xd8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2210      	movs	r2, #16
 8005df8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e011      	b.n	8005e22 <HAL_UART_Abort+0xfc>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  huart->gState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_UART_IRQHandler+0x52>
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f98d 	bl	8006196 <UART_Receive_IT>
      return;
 8005e7c:	e0cc      	b.n	8006018 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 80ab 	beq.w	8005fdc <HAL_UART_IRQHandler+0x1b0>
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <HAL_UART_IRQHandler+0x70>
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 80a0 	beq.w	8005fdc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_UART_IRQHandler+0x90>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	f043 0201 	orr.w	r2, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_UART_IRQHandler+0xb0>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	f043 0202 	orr.w	r2, r3, #2
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_UART_IRQHandler+0xd0>
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	f043 0204 	orr.w	r2, r3, #4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_UART_IRQHandler+0xf0>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	f043 0208 	orr.w	r2, r3, #8
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d078      	beq.n	8006016 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <HAL_UART_IRQHandler+0x112>
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f92c 	bl	8006196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <HAL_UART_IRQHandler+0x13a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d031      	beq.n	8005fca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f877 	bl	800605a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d023      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f88:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d013      	beq.n	8005fba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f96:	4a22      	ldr	r2, [pc, #136]	; (8006020 <HAL_UART_IRQHandler+0x1f4>)
 8005f98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fc fb14 	bl	80025cc <HAL_DMA_Abort_IT>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d016      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb8:	e00e      	b.n	8005fd8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f844 	bl	8006048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e00a      	b.n	8005fd8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f840 	bl	8006048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	e006      	b.n	8005fd8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f83c 	bl	8006048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005fd6:	e01e      	b.n	8006016 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd8:	bf00      	nop
    return;
 8005fda:	e01c      	b.n	8006016 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x1cc>
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f863 	bl	80060bc <UART_Transmit_IT>
    return;
 8005ff6:	e00f      	b.n	8006018 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_UART_IRQHandler+0x1ec>
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8aa 	bl	8006166 <UART_EndTransmit_IT>
    return;
 8006012:	bf00      	nop
 8006014:	e000      	b.n	8006018 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006016:	bf00      	nop
  }
}
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	08006095 	.word	0x08006095

08006024 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006070:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr

08006094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff ffca 	bl	8006048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b4:	bf00      	nop
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b21      	cmp	r3, #33	; 0x21
 80060ce:	d144      	bne.n	800615a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d8:	d11a      	bne.n	8006110 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	1c9a      	adds	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	621a      	str	r2, [r3, #32]
 8006102:	e00e      	b.n	8006122 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]
 800610e:	e008      	b.n	8006122 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	1c59      	adds	r1, r3, #1
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6211      	str	r1, [r2, #32]
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29b      	uxth	r3, r3
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10f      	bne.n	8006156 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006144:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006154:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e000      	b.n	800615c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800615a:	2302      	movs	r3, #2
  }
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff ff4c 	bl	8006024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b22      	cmp	r3, #34	; 0x22
 80061a8:	d171      	bne.n	800628e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	d123      	bne.n	80061fc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10e      	bne.n	80061e0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	629a      	str	r2, [r3, #40]	; 0x28
 80061de:	e029      	b.n	8006234 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	629a      	str	r2, [r3, #40]	; 0x28
 80061fa:	e01b      	b.n	8006234 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6858      	ldr	r0, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6291      	str	r1, [r2, #40]	; 0x28
 8006214:	b2c2      	uxtb	r2, r0
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	e00c      	b.n	8006234 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	1c58      	adds	r0, r3, #1
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	6288      	str	r0, [r1, #40]	; 0x28
 800622c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29b      	uxth	r3, r3
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	4619      	mov	r1, r3
 8006242:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006244:	2b00      	cmp	r3, #0
 8006246:	d120      	bne.n	800628a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0220 	bic.w	r2, r2, #32
 8006256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fed8 	bl	8006036 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e002      	b.n	8006290 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800628e:	2302      	movs	r3, #2
  }
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062d2:	f023 030c 	bic.w	r3, r3, #12
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	430b      	orrs	r3, r1
 80062de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a52      	ldr	r2, [pc, #328]	; (8006444 <UART_SetConfig+0x1ac>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d14e      	bne.n	800639e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006300:	f7fe fdd2 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8006304:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	009a      	lsls	r2, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	4a4a      	ldr	r2, [pc, #296]	; (8006448 <UART_SetConfig+0x1b0>)
 800631e:	fba2 2303 	umull	r2, r3, r2, r3
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	0119      	lsls	r1, r3, #4
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009a      	lsls	r2, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	fbb2 f2f3 	udiv	r2, r2, r3
 800633c:	4b42      	ldr	r3, [pc, #264]	; (8006448 <UART_SetConfig+0x1b0>)
 800633e:	fba3 0302 	umull	r0, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2064      	movs	r0, #100	; 0x64
 8006346:	fb00 f303 	mul.w	r3, r0, r3
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	3332      	adds	r3, #50	; 0x32
 8006350:	4a3d      	ldr	r2, [pc, #244]	; (8006448 <UART_SetConfig+0x1b0>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800635c:	4419      	add	r1, r3
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009a      	lsls	r2, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	fbb2 f2f3 	udiv	r2, r2, r3
 8006374:	4b34      	ldr	r3, [pc, #208]	; (8006448 <UART_SetConfig+0x1b0>)
 8006376:	fba3 0302 	umull	r0, r3, r3, r2
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2064      	movs	r0, #100	; 0x64
 800637e:	fb00 f303 	mul.w	r3, r0, r3
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	3332      	adds	r3, #50	; 0x32
 8006388:	4a2f      	ldr	r2, [pc, #188]	; (8006448 <UART_SetConfig+0x1b0>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 020f 	and.w	r2, r3, #15
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	440a      	add	r2, r1
 800639a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800639c:	e04d      	b.n	800643a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800639e:	f7fe fd6f 	bl	8004e80 <HAL_RCC_GetPCLK1Freq>
 80063a2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009a      	lsls	r2, r3, #2
 80063ae:	441a      	add	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ba:	4a23      	ldr	r2, [pc, #140]	; (8006448 <UART_SetConfig+0x1b0>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	0119      	lsls	r1, r3, #4
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	009a      	lsls	r2, r3, #2
 80063ce:	441a      	add	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80063da:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <UART_SetConfig+0x1b0>)
 80063dc:	fba3 0302 	umull	r0, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	2064      	movs	r0, #100	; 0x64
 80063e4:	fb00 f303 	mul.w	r3, r0, r3
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	3332      	adds	r3, #50	; 0x32
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <UART_SetConfig+0x1b0>)
 80063f0:	fba2 2303 	umull	r2, r3, r2, r3
 80063f4:	095b      	lsrs	r3, r3, #5
 80063f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063fa:	4419      	add	r1, r3
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009a      	lsls	r2, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <UART_SetConfig+0x1b0>)
 8006414:	fba3 0302 	umull	r0, r3, r3, r2
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	2064      	movs	r0, #100	; 0x64
 800641c:	fb00 f303 	mul.w	r3, r0, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	3332      	adds	r3, #50	; 0x32
 8006426:	4a08      	ldr	r2, [pc, #32]	; (8006448 <UART_SetConfig+0x1b0>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	440a      	add	r2, r1
 8006438:	609a      	str	r2, [r3, #8]
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40013800 	.word	0x40013800
 8006448:	51eb851f 	.word	0x51eb851f

0800644c <__libc_init_array>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	2500      	movs	r5, #0
 8006450:	4e0c      	ldr	r6, [pc, #48]	; (8006484 <__libc_init_array+0x38>)
 8006452:	4c0d      	ldr	r4, [pc, #52]	; (8006488 <__libc_init_array+0x3c>)
 8006454:	1ba4      	subs	r4, r4, r6
 8006456:	10a4      	asrs	r4, r4, #2
 8006458:	42a5      	cmp	r5, r4
 800645a:	d109      	bne.n	8006470 <__libc_init_array+0x24>
 800645c:	f000 f822 	bl	80064a4 <_init>
 8006460:	2500      	movs	r5, #0
 8006462:	4e0a      	ldr	r6, [pc, #40]	; (800648c <__libc_init_array+0x40>)
 8006464:	4c0a      	ldr	r4, [pc, #40]	; (8006490 <__libc_init_array+0x44>)
 8006466:	1ba4      	subs	r4, r4, r6
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	42a5      	cmp	r5, r4
 800646c:	d105      	bne.n	800647a <__libc_init_array+0x2e>
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006474:	4798      	blx	r3
 8006476:	3501      	adds	r5, #1
 8006478:	e7ee      	b.n	8006458 <__libc_init_array+0xc>
 800647a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800647e:	4798      	blx	r3
 8006480:	3501      	adds	r5, #1
 8006482:	e7f2      	b.n	800646a <__libc_init_array+0x1e>
 8006484:	080064e8 	.word	0x080064e8
 8006488:	080064e8 	.word	0x080064e8
 800648c:	080064e8 	.word	0x080064e8
 8006490:	080064ec 	.word	0x080064ec

08006494 <memset>:
 8006494:	4603      	mov	r3, r0
 8006496:	4402      	add	r2, r0
 8006498:	4293      	cmp	r3, r2
 800649a:	d100      	bne.n	800649e <memset+0xa>
 800649c:	4770      	bx	lr
 800649e:	f803 1b01 	strb.w	r1, [r3], #1
 80064a2:	e7f9      	b.n	8006498 <memset+0x4>

080064a4 <_init>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	bf00      	nop
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr

080064b0 <_fini>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr
