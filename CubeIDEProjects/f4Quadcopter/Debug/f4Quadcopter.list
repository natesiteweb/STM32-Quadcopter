
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d730  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800d8b8  0800d8b8  0001d8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d92c  0800d92c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d92c  0800d92c  0001d92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d934  0800d934  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d938  0800d938  0001d938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d93c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003740  200001f0  0800db2c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003930  0800db2c  00023930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020647  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043f1  00000000  00000000  00040867  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  00044c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001428  00000000  00000000  00046278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a2e  00000000  00000000  000476a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016dfc  00000000  00000000  0006c0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9b5d  00000000  00000000  00082eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ca27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f48  00000000  00000000  0014caa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d8a0 	.word	0x0800d8a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	0800d8a0 	.word	0x0800d8a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_DMA_Init+0x6c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <MX_DMA_Init+0x6c>)
 8000e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_DMA_Init+0x6c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	200b      	movs	r0, #11
 8000e68:	f001 fe73 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e6c:	200b      	movs	r0, #11
 8000e6e:	f001 fe8c 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200e      	movs	r0, #14
 8000e78:	f001 fe6b 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e7c:	200e      	movs	r0, #14
 8000e7e:	f001 fe84 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2011      	movs	r0, #17
 8000e88:	f001 fe63 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e8c:	2011      	movs	r0, #17
 8000e8e:	f001 fe7c 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	202f      	movs	r0, #47	; 0x2f
 8000e98:	f001 fe5b 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e9c:	202f      	movs	r0, #47	; 0x2f
 8000e9e:	f001 fe74 	bl	8002b8a <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a30      	ldr	r2, [pc, #192]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_GPIO_Init+0xe0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2106      	movs	r1, #6
 8000f3a:	4816      	ldr	r0, [pc, #88]	; (8000f94 <MX_GPIO_Init+0xe4>)
 8000f3c:	f002 fb9c 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_GPIO_Init+0xe8>)
 8000f48:	f002 fb96 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_GPIO_Init+0xe4>)
 8000f64:	f002 f9d6 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000f68:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_GPIO_Init+0xe8>)
 8000f82:	f002 f9c7 	bl	8003314 <HAL_GPIO_Init>

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020400 	.word	0x40020400

08000f9c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fa2:	4a13      	ldr	r2, [pc, #76]	; (8000ff0 <MX_I2C1_Init+0x54>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_I2C1_Init+0x58>)
 8000faa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_I2C1_Init+0x50>)
 8000fda:	f002 fb81 	bl	80036e0 <HAL_I2C_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe4:	f000 fe96 	bl	8001d14 <Error_Handler>
  }

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002b0 	.word	0x200002b0
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	00061a80 	.word	0x00061a80

08000ff8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_I2C2_Init+0x50>)
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <MX_I2C2_Init+0x54>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_I2C2_Init+0x50>)
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_I2C2_Init+0x58>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_I2C2_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_I2C2_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_I2C2_Init+0x50>)
 8001016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <MX_I2C2_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_I2C2_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <MX_I2C2_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_I2C2_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_I2C2_Init+0x50>)
 8001036:	f002 fb53 	bl	80036e0 <HAL_I2C_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001040:	f000 fe68 	bl	8001d14 <Error_Handler>
  }

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000304 	.word	0x20000304
 800104c:	40005800 	.word	0x40005800
 8001050:	00061a80 	.word	0x00061a80

08001054 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a9d      	ldr	r2, [pc, #628]	; (80012e8 <HAL_I2C_MspInit+0x294>)
 8001072:	4293      	cmp	r3, r2
 8001074:	f040 8093 	bne.w	800119e <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	4b9b      	ldr	r3, [pc, #620]	; (80012ec <HAL_I2C_MspInit+0x298>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a9a      	ldr	r2, [pc, #616]	; (80012ec <HAL_I2C_MspInit+0x298>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b98      	ldr	r3, [pc, #608]	; (80012ec <HAL_I2C_MspInit+0x298>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001094:	23c0      	movs	r3, #192	; 0xc0
 8001096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	2301      	movs	r3, #1
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a4:	2304      	movs	r3, #4
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4619      	mov	r1, r3
 80010ae:	4890      	ldr	r0, [pc, #576]	; (80012f0 <HAL_I2C_MspInit+0x29c>)
 80010b0:	f002 f930 	bl	8003314 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a8b      	ldr	r2, [pc, #556]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80010be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b89      	ldr	r3, [pc, #548]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010d0:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 80010d2:	4a89      	ldr	r2, [pc, #548]	; (80012f8 <HAL_I2C_MspInit+0x2a4>)
 80010d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010d6:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 80010d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b85      	ldr	r3, [pc, #532]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f2:	4b80      	ldr	r3, [pc, #512]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f8:	4b7e      	ldr	r3, [pc, #504]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010fe:	4b7d      	ldr	r3, [pc, #500]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001104:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 8001106:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800110a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110c:	4b79      	ldr	r3, [pc, #484]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001112:	4878      	ldr	r0, [pc, #480]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 8001114:	f001 fd54 	bl	8002bc0 <HAL_DMA_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800111e:	f000 fdf9 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a73      	ldr	r2, [pc, #460]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 8001126:	639a      	str	r2, [r3, #56]	; 0x38
 8001128:	4a72      	ldr	r2, [pc, #456]	; (80012f4 <HAL_I2C_MspInit+0x2a0>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800112e:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001130:	4a73      	ldr	r2, [pc, #460]	; (8001300 <HAL_I2C_MspInit+0x2ac>)
 8001132:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001134:	4b71      	ldr	r3, [pc, #452]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800113a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800113c:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 800113e:	2240      	movs	r2, #64	; 0x40
 8001140:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b6e      	ldr	r3, [pc, #440]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 800114a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001150:	4b6a      	ldr	r3, [pc, #424]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800115c:	4b67      	ldr	r3, [pc, #412]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001162:	4b66      	ldr	r3, [pc, #408]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001164:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001168:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116a:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001170:	4862      	ldr	r0, [pc, #392]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001172:	f001 fd25 	bl	8002bc0 <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 800117c:	f000 fdca 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a5e      	ldr	r2, [pc, #376]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
 8001186:	4a5d      	ldr	r2, [pc, #372]	; (80012fc <HAL_I2C_MspInit+0x2a8>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	201f      	movs	r0, #31
 8001192:	f001 fcde 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001196:	201f      	movs	r0, #31
 8001198:	f001 fcf7 	bl	8002b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800119c:	e0a0      	b.n	80012e0 <HAL_I2C_MspInit+0x28c>
  else if(i2cHandle->Instance==I2C2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <HAL_I2C_MspInit+0x2b0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	f040 809b 	bne.w	80012e0 <HAL_I2C_MspInit+0x28c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	2312      	movs	r3, #18
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011d8:	2304      	movs	r3, #4
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4843      	ldr	r0, [pc, #268]	; (80012f0 <HAL_I2C_MspInit+0x29c>)
 80011e4:	f002 f896 	bl	8003314 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a3e      	ldr	r2, [pc, #248]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80011f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_I2C_MspInit+0x298>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 8001206:	4a41      	ldr	r2, [pc, #260]	; (800130c <HAL_I2C_MspInit+0x2b8>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 800120c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001210:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 8001214:	2240      	movs	r2, #64	; 0x40
 8001216:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001218:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800121e:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 8001220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001224:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 800123a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001240:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001246:	4830      	ldr	r0, [pc, #192]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 8001248:	f001 fcba 	bl	8002bc0 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_I2C_MspInit+0x202>
      Error_Handler();
 8001252:	f000 fd5f 	bl	8001d14 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 800125a:	635a      	str	r2, [r3, #52]	; 0x34
 800125c:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <HAL_I2C_MspInit+0x2b4>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 8001264:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <HAL_I2C_MspInit+0x2c0>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001268:	4b29      	ldr	r3, [pc, #164]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 800126a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800126e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 8001298:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80012a4:	481a      	ldr	r0, [pc, #104]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 80012a6:	f001 fc8b 	bl	8002bc0 <HAL_DMA_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_I2C_MspInit+0x260>
      Error_Handler();
 80012b0:	f000 fd30 	bl	8001d14 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_I2C_MspInit+0x2bc>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2021      	movs	r0, #33	; 0x21
 80012c6:	f001 fc44 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80012ca:	2021      	movs	r0, #33	; 0x21
 80012cc:	f001 fc5d 	bl	8002b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2022      	movs	r0, #34	; 0x22
 80012d6:	f001 fc3c 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80012da:	2022      	movs	r0, #34	; 0x22
 80012dc:	f001 fc55 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400
 80012f4:	20000418 	.word	0x20000418
 80012f8:	40026010 	.word	0x40026010
 80012fc:	20000250 	.word	0x20000250
 8001300:	400260a0 	.word	0x400260a0
 8001304:	40005800 	.word	0x40005800
 8001308:	200003b8 	.word	0x200003b8
 800130c:	400260b8 	.word	0x400260b8
 8001310:	20000358 	.word	0x20000358
 8001314:	40026058 	.word	0x40026058

08001318 <Setup_IMU>:
int16_t raw_imu_temp;
float gyro_x, gyro_y, gyro_z;
float acc_magnitude, acc_x, acc_y, acc_z;

void Setup_IMU()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af02      	add	r7, sp, #8
	imu_setup_buffer[0] = 0x6B;
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <Setup_IMU+0x90>)
 8001320:	226b      	movs	r2, #107	; 0x6b
 8001322:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x00;
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <Setup_IMU+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 800132a:	23d0      	movs	r3, #208	; 0xd0
 800132c:	b299      	uxth	r1, r3
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2302      	movs	r3, #2
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <Setup_IMU+0x90>)
 8001338:	481c      	ldr	r0, [pc, #112]	; (80013ac <Setup_IMU+0x94>)
 800133a:	f002 fb09 	bl	8003950 <HAL_I2C_Master_Transmit>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <Setup_IMU+0x98>)
 8001344:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8001346:	200a      	movs	r0, #10
 8001348:	f001 fb06 	bl	8002958 <HAL_Delay>

	imu_setup_buffer[0] = 0x1B;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <Setup_IMU+0x90>)
 800134e:	221b      	movs	r2, #27
 8001350:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x08;
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <Setup_IMU+0x90>)
 8001354:	2208      	movs	r2, #8
 8001356:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8001358:	23d0      	movs	r3, #208	; 0xd0
 800135a:	b299      	uxth	r1, r3
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2302      	movs	r3, #2
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <Setup_IMU+0x90>)
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <Setup_IMU+0x94>)
 8001368:	f002 faf2 	bl	8003950 <HAL_I2C_Master_Transmit>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <Setup_IMU+0x98>)
 8001372:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f001 faef 	bl	8002958 <HAL_Delay>

	imu_setup_buffer[0] = 0x1A;
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <Setup_IMU+0x90>)
 800137c:	221a      	movs	r2, #26
 800137e:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x03;
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <Setup_IMU+0x90>)
 8001382:	2203      	movs	r2, #3
 8001384:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8001386:	23d0      	movs	r3, #208	; 0xd0
 8001388:	b299      	uxth	r1, r3
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2302      	movs	r3, #2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <Setup_IMU+0x90>)
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <Setup_IMU+0x94>)
 8001396:	f002 fadb 	bl	8003950 <HAL_I2C_Master_Transmit>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <Setup_IMU+0x98>)
 80013a0:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000049c 	.word	0x2000049c
 80013ac:	200002b0 	.word	0x200002b0
 80013b0:	200004ba 	.word	0x200004ba
 80013b4:	00000000 	.word	0x00000000

080013b8 <Read_IMU>:

void Read_IMU()
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t *)raw_gyro_acc_buffer, 14, HAL_MAX_DELAY);//Implement failure logic later
 80013be:	23d0      	movs	r3, #208	; 0xd0
 80013c0:	b299      	uxth	r1, r3
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	230e      	movs	r3, #14
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4ba4      	ldr	r3, [pc, #656]	; (8001660 <Read_IMU+0x2a8>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	223b      	movs	r2, #59	; 0x3b
 80013d4:	48a3      	ldr	r0, [pc, #652]	; (8001664 <Read_IMU+0x2ac>)
 80013d6:	f002 fde5 	bl	8003fa4 <HAL_I2C_Mem_Read>
	raw_gyro_acc_data[3] = (int16_t)((raw_gyro_acc_buffer[0] << 8) | (raw_gyro_acc_buffer[1]));	//Acc X
 80013da:	4ba1      	ldr	r3, [pc, #644]	; (8001660 <Read_IMU+0x2a8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b9f      	ldr	r3, [pc, #636]	; (8001660 <Read_IMU+0x2a8>)
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	4b9e      	ldr	r3, [pc, #632]	; (8001668 <Read_IMU+0x2b0>)
 80013ee:	80da      	strh	r2, [r3, #6]
	raw_gyro_acc_data[4] = (int16_t)((raw_gyro_acc_buffer[2] << 8) | (raw_gyro_acc_buffer[3]));	//Acc Y
 80013f0:	4b9b      	ldr	r3, [pc, #620]	; (8001660 <Read_IMU+0x2a8>)
 80013f2:	789b      	ldrb	r3, [r3, #2]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	4b99      	ldr	r3, [pc, #612]	; (8001660 <Read_IMU+0x2a8>)
 80013fa:	78db      	ldrb	r3, [r3, #3]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b99      	ldr	r3, [pc, #612]	; (8001668 <Read_IMU+0x2b0>)
 8001404:	811a      	strh	r2, [r3, #8]
	raw_gyro_acc_data[5] = (int16_t)((raw_gyro_acc_buffer[4] << 8) | (raw_gyro_acc_buffer[5]));	//Acc Z
 8001406:	4b96      	ldr	r3, [pc, #600]	; (8001660 <Read_IMU+0x2a8>)
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	b21a      	sxth	r2, r3
 800140e:	4b94      	ldr	r3, [pc, #592]	; (8001660 <Read_IMU+0x2a8>)
 8001410:	795b      	ldrb	r3, [r3, #5]
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	b21a      	sxth	r2, r3
 8001418:	4b93      	ldr	r3, [pc, #588]	; (8001668 <Read_IMU+0x2b0>)
 800141a:	815a      	strh	r2, [r3, #10]
	raw_imu_temp = (int16_t)((raw_gyro_acc_buffer[6] << 8) | (raw_gyro_acc_buffer[7]));
 800141c:	4b90      	ldr	r3, [pc, #576]	; (8001660 <Read_IMU+0x2a8>)
 800141e:	799b      	ldrb	r3, [r3, #6]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b8e      	ldr	r3, [pc, #568]	; (8001660 <Read_IMU+0x2a8>)
 8001426:	79db      	ldrb	r3, [r3, #7]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b8f      	ldr	r3, [pc, #572]	; (800166c <Read_IMU+0x2b4>)
 8001430:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[0] = (int16_t)((raw_gyro_acc_buffer[8] << 8) | (raw_gyro_acc_buffer[9]));	//Gyro X
 8001432:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <Read_IMU+0x2a8>)
 8001434:	7a1b      	ldrb	r3, [r3, #8]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	4b89      	ldr	r3, [pc, #548]	; (8001660 <Read_IMU+0x2a8>)
 800143c:	7a5b      	ldrb	r3, [r3, #9]
 800143e:	b21b      	sxth	r3, r3
 8001440:	4313      	orrs	r3, r2
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b88      	ldr	r3, [pc, #544]	; (8001668 <Read_IMU+0x2b0>)
 8001446:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[1] = (int16_t)((raw_gyro_acc_buffer[10] << 8) | (raw_gyro_acc_buffer[11]));	//Gyro Y
 8001448:	4b85      	ldr	r3, [pc, #532]	; (8001660 <Read_IMU+0x2a8>)
 800144a:	7a9b      	ldrb	r3, [r3, #10]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21a      	sxth	r2, r3
 8001450:	4b83      	ldr	r3, [pc, #524]	; (8001660 <Read_IMU+0x2a8>)
 8001452:	7adb      	ldrb	r3, [r3, #11]
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b83      	ldr	r3, [pc, #524]	; (8001668 <Read_IMU+0x2b0>)
 800145c:	805a      	strh	r2, [r3, #2]
	raw_gyro_acc_data[2] = (int16_t)((raw_gyro_acc_buffer[12] << 8) | (raw_gyro_acc_buffer[13]));	//Gyro Z
 800145e:	4b80      	ldr	r3, [pc, #512]	; (8001660 <Read_IMU+0x2a8>)
 8001460:	7b1b      	ldrb	r3, [r3, #12]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <Read_IMU+0x2a8>)
 8001468:	7b5b      	ldrb	r3, [r3, #13]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b7d      	ldr	r3, [pc, #500]	; (8001668 <Read_IMU+0x2b0>)
 8001472:	809a      	strh	r2, [r3, #4]

	gyro_x = (float)raw_gyro_acc_data[0] / 65.5;
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <Read_IMU+0x2b0>)
 8001476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001482:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001670 <Read_IMU+0x2b8>
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	4b7a      	ldr	r3, [pc, #488]	; (8001674 <Read_IMU+0x2bc>)
 800148c:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)raw_gyro_acc_data[1] / 65.5;
 8001490:	4b75      	ldr	r3, [pc, #468]	; (8001668 <Read_IMU+0x2b0>)
 8001492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149e:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001670 <Read_IMU+0x2b8>
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	4b74      	ldr	r3, [pc, #464]	; (8001678 <Read_IMU+0x2c0>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)raw_gyro_acc_data[2] / 65.5;
 80014ac:	4b6e      	ldr	r3, [pc, #440]	; (8001668 <Read_IMU+0x2b0>)
 80014ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ba:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001670 <Read_IMU+0x2b8>
 80014be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c2:	4b6e      	ldr	r3, [pc, #440]	; (800167c <Read_IMU+0x2c4>)
 80014c4:	edc3 7a00 	vstr	s15, [r3]

	acc_magnitude = sqrt(((float)raw_gyro_acc_data[3] * (float)raw_gyro_acc_data[3]) + ((float)raw_gyro_acc_data[4] * (float)raw_gyro_acc_data[4]) + ((float)raw_gyro_acc_data[5] * (float)raw_gyro_acc_data[5]));
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <Read_IMU+0x2b0>)
 80014ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d6:	4b64      	ldr	r3, [pc, #400]	; (8001668 <Read_IMU+0x2b0>)
 80014d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <Read_IMU+0x2b0>)
 80014ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <Read_IMU+0x2b0>)
 80014f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150c:	4b56      	ldr	r3, [pc, #344]	; (8001668 <Read_IMU+0x2b0>)
 800150e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800151a:	4b53      	ldr	r3, [pc, #332]	; (8001668 <Read_IMU+0x2b0>)
 800151c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001530:	ee17 0a90 	vmov	r0, s15
 8001534:	f7fe ffac 	bl	8000490 <__aeabi_f2d>
 8001538:	4603      	mov	r3, r0
 800153a:	460c      	mov	r4, r1
 800153c:	ec44 3b10 	vmov	d0, r3, r4
 8001540:	f00b fe80 	bl	800d244 <sqrt>
 8001544:	ec54 3b10 	vmov	r3, r4, d0
 8001548:	4618      	mov	r0, r3
 800154a:	4621      	mov	r1, r4
 800154c:	f7ff faa8 	bl	8000aa0 <__aeabi_d2f>
 8001550:	4602      	mov	r2, r0
 8001552:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <Read_IMU+0x2c8>)
 8001554:	601a      	str	r2, [r3, #0]

	if(acc_magnitude != 0)
 8001556:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <Read_IMU+0x2c8>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d071      	beq.n	800164a <Read_IMU+0x292>
	{
		if(abs(raw_gyro_acc_data[4]) <= acc_magnitude)
 8001566:	4b40      	ldr	r3, [pc, #256]	; (8001668 <Read_IMU+0x2b0>)
 8001568:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	bfb8      	it	lt
 8001570:	425b      	neglt	r3, r3
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <Read_IMU+0x2c8>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	d826      	bhi.n	80015d8 <Read_IMU+0x220>
		{
			acc_x = asin((float)raw_gyro_acc_data[4] / acc_magnitude) * 57.296;
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <Read_IMU+0x2b0>)
 800158c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <Read_IMU+0x2c8>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015a2:	ee16 0a90 	vmov	r0, s13
 80015a6:	f7fe ff73 	bl	8000490 <__aeabi_f2d>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	ec44 3b10 	vmov	d0, r3, r4
 80015b2:	f00b fdef 	bl	800d194 <asin>
 80015b6:	ec51 0b10 	vmov	r0, r1, d0
 80015ba:	a327      	add	r3, pc, #156	; (adr r3, 8001658 <Read_IMU+0x2a0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe ffbe 	bl	8000540 <__aeabi_dmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff fa68 	bl	8000aa0 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <Read_IMU+0x2cc>)
 80015d4:	601a      	str	r2, [r3, #0]
		else if(abs(raw_gyro_acc_data[3]) < acc_magnitude)
		{
			acc_y = asin((float)raw_gyro_acc_data[3] / acc_magnitude) * 57.296;
		}
	}
}
 80015d6:	e038      	b.n	800164a <Read_IMU+0x292>
		else if(abs(raw_gyro_acc_data[3]) < acc_magnitude)
 80015d8:	4b23      	ldr	r3, [pc, #140]	; (8001668 <Read_IMU+0x2b0>)
 80015da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bfb8      	it	lt
 80015e2:	425b      	neglt	r3, r3
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <Read_IMU+0x2c8>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	d400      	bmi.n	80015fe <Read_IMU+0x246>
}
 80015fc:	e025      	b.n	800164a <Read_IMU+0x292>
			acc_y = asin((float)raw_gyro_acc_data[3] / acc_magnitude) * 57.296;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <Read_IMU+0x2b0>)
 8001600:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <Read_IMU+0x2c8>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001616:	ee16 0a90 	vmov	r0, s13
 800161a:	f7fe ff39 	bl	8000490 <__aeabi_f2d>
 800161e:	4603      	mov	r3, r0
 8001620:	460c      	mov	r4, r1
 8001622:	ec44 3b10 	vmov	d0, r3, r4
 8001626:	f00b fdb5 	bl	800d194 <asin>
 800162a:	ec51 0b10 	vmov	r0, r1, d0
 800162e:	a30a      	add	r3, pc, #40	; (adr r3, 8001658 <Read_IMU+0x2a0>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7fe ff84 	bl	8000540 <__aeabi_dmul>
 8001638:	4603      	mov	r3, r0
 800163a:	460c      	mov	r4, r1
 800163c:	4618      	mov	r0, r3
 800163e:	4621      	mov	r1, r4
 8001640:	f7ff fa2e 	bl	8000aa0 <__aeabi_d2f>
 8001644:	4602      	mov	r2, r0
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <Read_IMU+0x2d0>)
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3704      	adds	r7, #4
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	f3af 8000 	nop.w
 8001658:	53f7ced9 	.word	0x53f7ced9
 800165c:	404ca5e3 	.word	0x404ca5e3
 8001660:	200004c4 	.word	0x200004c4
 8001664:	200002b0 	.word	0x200002b0
 8001668:	20000484 	.word	0x20000484
 800166c:	2000047c 	.word	0x2000047c
 8001670:	42830000 	.word	0x42830000
 8001674:	20000490 	.word	0x20000490
 8001678:	20000480 	.word	0x20000480
 800167c:	200004bc 	.word	0x200004bc
 8001680:	20000494 	.word	0x20000494
 8001684:	20000498 	.word	0x20000498
 8001688:	20000478 	.word	0x20000478

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001692:	f001 f8ef 	bl	8002874 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 8001696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800169a:	f001 f95d 	bl	8002958 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169e:	f000 f903 	bl	80018a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a2:	f7ff fc05 	bl	8000eb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a6:	f7ff fbcb 	bl	8000e40 <MX_DMA_Init>
  MX_I2C1_Init();
 80016aa:	f7ff fc77 	bl	8000f9c <MX_I2C1_Init>
  MX_I2C2_Init();
 80016ae:	f7ff fca3 	bl	8000ff8 <MX_I2C2_Init>
  MX_RTC_Init();
 80016b2:	f000 fb37 	bl	8001d24 <MX_RTC_Init>
  MX_TIM3_Init();
 80016b6:	f000 fd9f 	bl	80021f8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80016ba:	f000 fe19 	bl	80022f0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80016be:	f000 fe87 	bl	80023d0 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 80016c2:	f00a ff91 	bl	800c5e8 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 80016c6:	f000 ff49 	bl	800255c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80016ca:	2100      	movs	r1, #0
 80016cc:	4862      	ldr	r0, [pc, #392]	; (8001858 <main+0x1cc>)
 80016ce:	f006 ff9d 	bl	800860c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80016d2:	4862      	ldr	r0, [pc, #392]	; (800185c <main+0x1d0>)
 80016d4:	f006 fed6 	bl	8008484 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);//Motor 1 - FL
 80016d8:	210c      	movs	r1, #12
 80016da:	4861      	ldr	r0, [pc, #388]	; (8001860 <main+0x1d4>)
 80016dc:	f006 ff22 	bl	8008524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);//Motor 2 - FR
 80016e0:	2108      	movs	r1, #8
 80016e2:	485f      	ldr	r0, [pc, #380]	; (8001860 <main+0x1d4>)
 80016e4:	f006 ff1e 	bl	8008524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);//Motor 3 - BR
 80016e8:	2104      	movs	r1, #4
 80016ea:	485d      	ldr	r0, [pc, #372]	; (8001860 <main+0x1d4>)
 80016ec:	f006 ff1a 	bl	8008524 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//Motor 4 - BL
 80016f0:	2100      	movs	r1, #0
 80016f2:	485b      	ldr	r0, [pc, #364]	; (8001860 <main+0x1d4>)
 80016f4:	f006 ff16 	bl	8008524 <HAL_TIM_PWM_Start>

  auto_packet_buffer[0].total_width = 0;
 80016f8:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <main+0x1d8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  auto_packet_buffer[0].var_count = 0;
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <main+0x1d8>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  auto_packet_buffer[0].id = 0x01;
 8001708:	4b56      	ldr	r3, [pc, #344]	; (8001864 <main+0x1d8>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
  AddToAutoBuffer(0, &(raw_gyro_acc_data[0]), 2);
 800170e:	2202      	movs	r2, #2
 8001710:	4955      	ldr	r1, [pc, #340]	; (8001868 <main+0x1dc>)
 8001712:	2000      	movs	r0, #0
 8001714:	f000 fd12 	bl	800213c <AddToAutoBuffer>
  AddToAutoBuffer(0, &(raw_gyro_acc_data[1]), 2);
 8001718:	2202      	movs	r2, #2
 800171a:	4954      	ldr	r1, [pc, #336]	; (800186c <main+0x1e0>)
 800171c:	2000      	movs	r0, #0
 800171e:	f000 fd0d 	bl	800213c <AddToAutoBuffer>
  AddToAutoBuffer(0, &(raw_gyro_acc_data[2]), 2);
 8001722:	2202      	movs	r2, #2
 8001724:	4952      	ldr	r1, [pc, #328]	; (8001870 <main+0x1e4>)
 8001726:	2000      	movs	r0, #0
 8001728:	f000 fd08 	bl	800213c <AddToAutoBuffer>
  auto_packet_count += 1;
 800172c:	4b51      	ldr	r3, [pc, #324]	; (8001874 <main+0x1e8>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <main+0x1e8>)
 8001736:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < 6; i++)
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	e008      	b.n	8001750 <main+0xc4>
  {
	  ppm_channels[i] = 1000;
 800173e:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <main+0x1ec>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001746:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 6; i++)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3301      	adds	r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b05      	cmp	r3, #5
 8001754:	ddf3      	ble.n	800173e <main+0xb2>
  }

  for(int i = 0; i < 35; i++)
 8001756:	2300      	movs	r3, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	e007      	b.n	800176c <main+0xe0>
  {
	  empty_data_packet.payload[i] = '\0';
 800175c:	4a47      	ldr	r2, [pc, #284]	; (800187c <main+0x1f0>)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2b22      	cmp	r3, #34	; 0x22
 8001770:	ddf4      	ble.n	800175c <main+0xd0>
  }

  Setup_IMU();
 8001772:	f7ff fdd1 	bl	8001318 <Setup_IMU>

  //sprintf((char*)send_buffer, "%l%s", test_capture_value, "\r\n");



  telem_send_buffer[32] = 30;
 8001776:	4b42      	ldr	r3, [pc, #264]	; (8001880 <main+0x1f4>)
 8001778:	221e      	movs	r2, #30
 800177a:	f883 2020 	strb.w	r2, [r3, #32]
  telem_send_buffer[33] = 0;//Unreliable
 800177e:	4b40      	ldr	r3, [pc, #256]	; (8001880 <main+0x1f4>)
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  //send_buffer[34] = 0;//No data

  //CDC_Transmit_FS(buf, strlen((char*)buf));

  HAL_Delay(2000);
 8001786:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800178a:	f001 f8e5 	bl	8002958 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(GetMillisDifference(&test_millis_timer) > 500)
 800178e:	483d      	ldr	r0, [pc, #244]	; (8001884 <main+0x1f8>)
 8001790:	f000 f9f4 	bl	8001b7c <GetMillisDifference>
	  else
	  {
		  //HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
	  }

	  if(GetMillisDifference(&temp_led_timer) > 500)
 8001794:	483c      	ldr	r0, [pc, #240]	; (8001888 <main+0x1fc>)
 8001796:	f000 f9f1 	bl	8001b7c <GetMillisDifference>
 800179a:	4603      	mov	r3, r0
 800179c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017a0:	d908      	bls.n	80017b4 <main+0x128>
	  {
		  temp_led_timer = GetMillis();
 80017a2:	f000 f9d9 	bl	8001b58 <GetMillis>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b37      	ldr	r3, [pc, #220]	; (8001888 <main+0x1fc>)
 80017aa:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80017ac:	2102      	movs	r1, #2
 80017ae:	4837      	ldr	r0, [pc, #220]	; (800188c <main+0x200>)
 80017b0:	f001 ff7b 	bl	80036aa <HAL_GPIO_TogglePin>
	  }

	  if(GetMicrosDifference(&pwm_output_timer) >= 4000)
 80017b4:	4836      	ldr	r0, [pc, #216]	; (8001890 <main+0x204>)
 80017b6:	f000 f9ef 	bl	8001b98 <GetMicrosDifference>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80017c0:	d309      	bcc.n	80017d6 <main+0x14a>
	  {
		  pwm_output_timer = GetMicros();
 80017c2:	f000 f9bd 	bl	8001b40 <GetMicros>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b31      	ldr	r3, [pc, #196]	; (8001890 <main+0x204>)
 80017ca:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim8, 4999); //Reset motor PWN counter for fast response time
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <main+0x1d4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f241 3287 	movw	r2, #4999	; 0x1387
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
	  }

	  if(GetMicrosDifference(&main_loop_timer) >= 2000)
 80017d6:	482f      	ldr	r0, [pc, #188]	; (8001894 <main+0x208>)
 80017d8:	f000 f9de 	bl	8001b98 <GetMicrosDifference>
 80017dc:	4603      	mov	r3, r0
 80017de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017e2:	d313      	bcc.n	800180c <main+0x180>
	  {
		  how_long_to_loop = GetMicrosDifference(&how_long_to_loop_timer);
 80017e4:	482c      	ldr	r0, [pc, #176]	; (8001898 <main+0x20c>)
 80017e6:	f000 f9d7 	bl	8001b98 <GetMicrosDifference>
 80017ea:	4602      	mov	r2, r0
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <main+0x210>)
 80017ee:	601a      	str	r2, [r3, #0]
		  main_loop_timer = GetMicros();
 80017f0:	f000 f9a6 	bl	8001b40 <GetMicros>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <main+0x208>)
 80017f8:	601a      	str	r2, [r3, #0]
		  how_long_to_loop_timer = GetMicros();
 80017fa:	f000 f9a1 	bl	8001b40 <GetMicros>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <main+0x20c>)
 8001802:	601a      	str	r2, [r3, #0]
		  Read_IMU();
 8001804:	f7ff fdd8 	bl	80013b8 <Read_IMU>

		  telem_loop();
 8001808:	f000 fbce 	bl	8001fa8 <telem_loop>
	  }

	  if(GetMillisDifference(&telem_receive_timout_timer) > 50 && telem_send_buffer[34])
 800180c:	4824      	ldr	r0, [pc, #144]	; (80018a0 <main+0x214>)
 800180e:	f000 f9b5 	bl	8001b7c <GetMillisDifference>
 8001812:	4603      	mov	r3, r0
 8001814:	2b32      	cmp	r3, #50	; 0x32
 8001816:	d909      	bls.n	800182c <main+0x1a0>
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <main+0x1f4>)
 800181a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <main+0x1a0>
	  {
		  HAL_I2C_Master_Abort_IT(&hi2c2, (uint8_t)(0x04 << 1));
 8001824:	2108      	movs	r1, #8
 8001826:	481f      	ldr	r0, [pc, #124]	; (80018a4 <main+0x218>)
 8001828:	f002 fde2 	bl	80043f0 <HAL_I2C_Master_Abort_IT>
	  if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
	  {
		  HAL_I2C_Mem_Read_DMA(&hi2c1, GYRO_ADDR, 0x43, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buf, 2);
	  }*/

	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, ppm_channels[2]);
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <main+0x1d4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <main+0x1ec>)
 8001832:	6892      	ldr	r2, [r2, #8]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, ppm_channels[2]);
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <main+0x1d4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <main+0x1ec>)
 800183c:	6892      	ldr	r2, [r2, #8]
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, ppm_channels[2]);
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <main+0x1d4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <main+0x1ec>)
 8001846:	6892      	ldr	r2, [r2, #8]
 8001848:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, ppm_channels[2]);
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <main+0x1d4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <main+0x1ec>)
 8001850:	6892      	ldr	r2, [r2, #8]
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
	  if(GetMillisDifference(&test_millis_timer) > 500)
 8001854:	e79b      	b.n	800178e <main+0x102>
 8001856:	bf00      	nop
 8001858:	20001f90 	.word	0x20001f90
 800185c:	20002010 	.word	0x20002010
 8001860:	20001f50 	.word	0x20001f50
 8001864:	20000a04 	.word	0x20000a04
 8001868:	20000484 	.word	0x20000484
 800186c:	20000486 	.word	0x20000486
 8001870:	20000488 	.word	0x20000488
 8001874:	20000225 	.word	0x20000225
 8001878:	20000234 	.word	0x20000234
 800187c:	20001f08 	.word	0x20001f08
 8001880:	200009e0 	.word	0x200009e0
 8001884:	2000053c 	.word	0x2000053c
 8001888:	20000528 	.word	0x20000528
 800188c:	40020800 	.word	0x40020800
 8001890:	200004f8 	.word	0x200004f8
 8001894:	20000538 	.word	0x20000538
 8001898:	20000534 	.word	0x20000534
 800189c:	20000524 	.word	0x20000524
 80018a0:	20001f04 	.word	0x20001f04
 80018a4:	20000304 	.word	0x20000304

080018a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b098      	sub	sp, #96	; 0x60
 80018ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b2:	2230      	movs	r2, #48	; 0x30
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00b fbaa 	bl	800d010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <SystemClock_Config+0xfc>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <SystemClock_Config+0xfc>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <SystemClock_Config+0xfc>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <SystemClock_Config+0x100>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2a      	ldr	r2, [pc, #168]	; (80019a8 <SystemClock_Config+0x100>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <SystemClock_Config+0x100>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001912:	2309      	movs	r3, #9
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800191c:	2301      	movs	r3, #1
 800191e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001920:	2302      	movs	r3, #2
 8001922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001924:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001928:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800192a:	2310      	movs	r3, #16
 800192c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800192e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001932:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	2302      	movs	r3, #2
 8001936:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001938:	2307      	movs	r3, #7
 800193a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001940:	4618      	mov	r0, r3
 8001942:	f005 ff61 	bl	8007808 <HAL_RCC_OscConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800194c:	f000 f9e2 	bl	8001d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001950:	230f      	movs	r3, #15
 8001952:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800195c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	2105      	movs	r1, #5
 800196e:	4618      	mov	r0, r3
 8001970:	f006 f9ba 	bl	8007ce8 <HAL_RCC_ClockConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800197a:	f000 f9cb 	bl	8001d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800197e:	2302      	movs	r3, #2
 8001980:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001986:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	4618      	mov	r0, r3
 800198e:	f006 fb87 	bl	80080a0 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001998:	f000 f9bc 	bl	8001d14 <Error_Handler>
  }
}
 800199c:	bf00      	nop
 800199e:	3760      	adds	r7, #96	; 0x60
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000

080019ac <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	f040 8094 	bne.w	8001ae6 <HAL_TIM_IC_CaptureCallback+0x13a>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80019be:	2100      	movs	r1, #0
 80019c0:	484b      	ldr	r0, [pc, #300]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019c2:	f007 f9ad 	bl	8008d20 <HAL_TIM_ReadCapturedValue>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 80019ca:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80019cc:	2101      	movs	r1, #1
 80019ce:	484a      	ldr	r0, [pc, #296]	; (8001af8 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80019d0:	f001 fe3a 	bl	8003648 <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d014      	beq.n	8001a04 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a47      	ldr	r2, [pc, #284]	; (8001afc <HAL_TIM_IC_CaptureCallback+0x150>)
 80019e0:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 020a 	bic.w	r2, r2, #10
 80019f0:	621a      	str	r2, [r3, #32]
 80019f2:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a1a      	ldr	r2, [r3, #32]
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0202 	orr.w	r2, r2, #2
 8001a00:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8001a02:	e070      	b.n	8001ae6 <HAL_TIM_IC_CaptureCallback+0x13a>
			if (current_ppm_capture > last_ppm_capture)
 8001a04:	4b3b      	ldr	r3, [pc, #236]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b3c      	ldr	r3, [pc, #240]	; (8001afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d907      	bls.n	8001a20 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a39      	ldr	r2, [pc, #228]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00d      	b.n	8001a3c <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d807      	bhi.n	8001a3c <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 8001a2c:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b32      	ldr	r3, [pc, #200]	; (8001afc <HAL_TIM_IC_CaptureCallback+0x150>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a3a:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d903      	bls.n	8001a50 <HAL_TIM_IC_CaptureCallback+0xa4>
				current_ppm_channel = 0;
 8001a48:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	e006      	b.n	8001a5e <HAL_TIM_IC_CaptureCallback+0xb2>
				current_ppm_channel++;
 8001a50:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001a5c:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d903      	bls.n	8001a72 <HAL_TIM_IC_CaptureCallback+0xc6>
				test_max_frequency = frequency_read;
 8001a6a:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001a70:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a7c:	6013      	str	r3, [r2, #0]
			if(frequency_read < 1000)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a86:	d204      	bcs.n	8001a92 <HAL_TIM_IC_CaptureCallback+0xe6>
				frequency_read = 1000;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e008      	b.n	8001aa4 <HAL_TIM_IC_CaptureCallback+0xf8>
			else if(frequency_read > 2000)
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a9a:	d903      	bls.n	8001aa4 <HAL_TIM_IC_CaptureCallback+0xf8>
				frequency_read = 2000;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001a9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa2:	601a      	str	r2, [r3, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00d      	beq.n	8001aca <HAL_TIM_IC_CaptureCallback+0x11e>
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b06      	cmp	r3, #6
 8001ab6:	d808      	bhi.n	8001aca <HAL_TIM_IC_CaptureCallback+0x11e>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_TIM_IC_CaptureCallback+0x158>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_TIM_IC_CaptureCallback+0x154>)
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	4911      	ldr	r1, [pc, #68]	; (8001b0c <HAL_TIM_IC_CaptureCallback+0x160>)
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 020a 	bic.w	r2, r2, #10
 8001ad8:	621a      	str	r2, [r3, #32]
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6a12      	ldr	r2, [r2, #32]
 8001ae4:	621a      	str	r2, [r3, #32]
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20001f90 	.word	0x20001f90
 8001af4:	20000210 	.word	0x20000210
 8001af8:	40020000 	.word	0x40020000
 8001afc:	20000214 	.word	0x20000214
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000218 	.word	0x20000218
 8001b08:	2000021c 	.word	0x2000021c
 8001b0c:	20000234 	.word	0x20000234

08001b10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//micros_timer_base += 65000;//65536;
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3341      	adds	r3, #65	; 0x41
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001b28:	6013      	str	r3, [r2, #0]
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20002010 	.word	0x20002010
 8001b3c:	20000530 	.word	0x20000530

08001b40 <GetMicros>:

uint32_t GetMicros()
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim9);
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <GetMicros+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20002010 	.word	0x20002010

08001b58 <GetMillis>:

uint32_t GetMillis()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 8001b5c:	f7ff fff0 	bl	8001b40 <GetMicros>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <GetMillis+0x1c>)
 8001b64:	fba3 2302 	umull	r2, r3, r3, r2
 8001b68:	099a      	lsrs	r2, r3, #6
 8001b6a:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <GetMillis+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	10624dd3 	.word	0x10624dd3
 8001b78:	20000530 	.word	0x20000530

08001b7c <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 8001b84:	f7ff ffe8 	bl	8001b58 <GetMillis>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	1ad3      	subs	r3, r2, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8001ba0:	f7ff ffce 	bl	8001b40 <GetMicros>
 8001ba4:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d905      	bls.n	8001bc0 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e00c      	b.n	8001bda <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d207      	bcs.n	8001bda <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8001bd6:	33e8      	adds	r3, #232	; 0xe8
 8001bd8:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	read_flag = 1;
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000020c 	.word	0x2000020c

08001c04 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_I2C_MasterTxCpltCallback+0x34>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d10c      	bne.n	8001c2e <HAL_I2C_MasterTxCpltCallback+0x2a>
	{
		if(ack_rate_counter == ack_rate)
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_I2C_MasterTxCpltCallback+0x38>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d105      	bne.n	8001c2e <HAL_I2C_MasterTxCpltCallback+0x2a>
		{
			//receive_telem_flag = 1;
			//ack_rate_counter = 0;
			//telem_receive_timout_timer = GetMillis();
			HAL_I2C_Master_Receive_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_receive_buffer, 34);
 8001c22:	2322      	movs	r3, #34	; 0x22
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_I2C_MasterTxCpltCallback+0x40>)
 8001c26:	2108      	movs	r1, #8
 8001c28:	4803      	ldr	r0, [pc, #12]	; (8001c38 <HAL_I2C_MasterTxCpltCallback+0x34>)
 8001c2a:	f002 f8a5 	bl	8003d78 <HAL_I2C_Master_Receive_DMA>

			//HAL_I2C_Master_Receive(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)receive_buffer, 34, 1);
		}
	}
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000304 	.word	0x20000304
 8001c3c:	20000229 	.word	0x20000229
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20001f2c 	.word	0x20001f2c

08001c48 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d10c      	bne.n	8001c72 <HAL_I2C_MasterRxCpltCallback+0x2a>
	{
		ack_rate_counter = 0;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
		new_telem_received = 1;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
		telem_send_buffer[34] = 0;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_I2C_MasterRxCpltCallback+0x44>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		waiting_for_ack = 0;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_I2C_MasterRxCpltCallback+0x48>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
	}
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000304 	.word	0x20000304
 8001c84:	20000229 	.word	0x20000229
 8001c88:	20000227 	.word	0x20000227
 8001c8c:	200009e0 	.word	0x200009e0
 8001c90:	20000228 	.word	0x20000228

08001c94 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_I2C_AbortCpltCallback+0x30>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d109      	bne.n	8001cb8 <HAL_I2C_AbortCpltCallback+0x24>
	{
		telem_send_buffer[34] = 0;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_I2C_AbortCpltCallback+0x34>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		ack_rate_counter = 0;
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_I2C_AbortCpltCallback+0x38>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
		waiting_for_ack = 0;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_I2C_AbortCpltCallback+0x3c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
	}
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000304 	.word	0x20000304
 8001cc8:	200009e0 	.word	0x200009e0
 8001ccc:	20000229 	.word	0x20000229
 8001cd0:	20000228 	.word	0x20000228

08001cd4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <HAL_I2C_ErrorCallback+0x24>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d104      	bne.n	8001cee <HAL_I2C_ErrorCallback+0x1a>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <HAL_I2C_ErrorCallback+0x28>)
 8001cea:	f001 fcc5 	bl	8003678 <HAL_GPIO_WritePin>
	}
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000304 	.word	0x20000304
 8001cfc:	40020800 	.word	0x40020800

08001d00 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <MX_RTC_Init+0x48>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d36:	227f      	movs	r2, #127	; 0x7f
 8001d38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d3c:	22ff      	movs	r2, #255	; 0xff
 8001d3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_RTC_Init+0x44>)
 8001d54:	f006 fa86 	bl	8008264 <HAL_RTC_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001d5e:	f7ff ffd9 	bl	8001d14 <Error_Handler>
  }

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000540 	.word	0x20000540
 8001d6c:	40002800 	.word	0x40002800

08001d70 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <HAL_RTC_MspInit+0x24>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d102      	bne.n	8001d88 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RTC_MspInit+0x28>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40002800 	.word	0x40002800
 8001d98:	42470e3c 	.word	0x42470e3c

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_MspInit+0x4c>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_MspInit+0x4c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <HardFault_Handler+0x4>

08001e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <MemManage_Handler+0x4>

08001e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e40:	f000 fd6a 	bl	8002918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <DMA1_Stream0_IRQHandler+0x10>)
 8001e4e:	f000 ffdf 	bl	8002e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000418 	.word	0x20000418

08001e5c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <DMA1_Stream3_IRQHandler+0x10>)
 8001e62:	f000 ffd5 	bl	8002e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000358 	.word	0x20000358

08001e70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <DMA1_Stream6_IRQHandler+0x10>)
 8001e76:	f000 ffcb 	bl	8002e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000250 	.word	0x20000250

08001e84 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001e8a:	f006 fc27 	bl	80086dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20002010 	.word	0x20002010

08001e98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <I2C1_EV_IRQHandler+0x10>)
 8001e9e:	f002 faee 	bl	800447e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200002b0 	.word	0x200002b0

08001eac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <I2C2_EV_IRQHandler+0x10>)
 8001eb2:	f002 fae4 	bl	800447e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000304 	.word	0x20000304

08001ec0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <I2C2_ER_IRQHandler+0x10>)
 8001ec6:	f002 fc40 	bl	800474a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000304 	.word	0x20000304

08001ed4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <DMA1_Stream7_IRQHandler+0x10>)
 8001eda:	f000 ff99 	bl	8002e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200003b8 	.word	0x200003b8

08001ee8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <TIM5_IRQHandler+0x10>)
 8001eee:	f006 fbf5 	bl	80086dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20001f90 	.word	0x20001f90

08001efc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <OTG_FS_IRQHandler+0x10>)
 8001f02:	f004 fc4e 	bl	80067a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20003524 	.word	0x20003524

08001f10 <_sbrk>:
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
 8001f40:	f00b f82c 	bl	800cf9c <__errno>
 8001f44:	4602      	mov	r2, r0
 8001f46:	230c      	movs	r3, #12
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20020000 	.word	0x20020000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	20000220 	.word	0x20000220
 8001f78:	20003930 	.word	0x20003930

08001f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <SystemInit+0x28>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <SystemInit+0x28>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SystemInit+0x28>)
 8001f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f96:	609a      	str	r2, [r3, #8]
#endif
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <telem_loop>:

volatile uint8_t ack_rate_counter = 0;
uint8_t ack_rate = 20;//Every x ticks of the radio ask for data

void telem_loop()
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
	if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY && telem_send_buffer[34] == 0)
 8001fae:	4859      	ldr	r0, [pc, #356]	; (8002114 <telem_loop+0x16c>)
 8001fb0:	f002 fca8 	bl	8004904 <HAL_I2C_GetState>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	f040 80a8 	bne.w	800210c <telem_loop+0x164>
 8001fbc:	4b56      	ldr	r3, [pc, #344]	; (8002118 <telem_loop+0x170>)
 8001fbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f040 80a1 	bne.w	800210c <telem_loop+0x164>
	{
		for(int i = 0; i < 35; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e007      	b.n	8001fe0 <telem_loop+0x38>
		{
			telem_send_buffer[i] = '\0';
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <telem_loop+0x170>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 35; i++)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b22      	cmp	r3, #34	; 0x22
 8001fe4:	ddf4      	ble.n	8001fd0 <telem_loop+0x28>
		}

		if(manual_packet_count > 0)
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <telem_loop+0x174>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d15e      	bne.n	80020ac <telem_loop+0x104>
			//HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)manual_packet_buffer[0].payload, 35);
		}
		else
		{
			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			telem_send_buffer[0] = auto_packet_buffer[auto_packet_counter].id;
 8001fee:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <telem_loop+0x178>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <telem_loop+0x17c>)
 8001ff6:	23a8      	movs	r3, #168	; 0xa8
 8001ff8:	fb03 f301 	mul.w	r3, r3, r1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781a      	ldrb	r2, [r3, #0]
 8002000:	4b45      	ldr	r3, [pc, #276]	; (8002118 <telem_loop+0x170>)
 8002002:	701a      	strb	r2, [r3, #0]
			uint8_t var_index = 1;
 8002004:	2301      	movs	r3, #1
 8002006:	72fb      	strb	r3, [r7, #11]

			for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	e02d      	b.n	800206a <telem_loop+0xc2>
			{
				for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 800200e:	2300      	movs	r3, #0
 8002010:	603b      	str	r3, [r7, #0]
 8002012:	e017      	b.n	8002044 <telem_loop+0x9c>
				{
					telem_send_buffer[var_index] = *((uint8_t *)(auto_packet_buffer[auto_packet_counter].payload[i]) + j);
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <telem_loop+0x178>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4942      	ldr	r1, [pc, #264]	; (8002124 <telem_loop+0x17c>)
 800201c:	232a      	movs	r3, #42	; 0x2a
 800201e:	fb03 f202 	mul.w	r2, r3, r2
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	441a      	add	r2, r3
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	7811      	ldrb	r1, [r2, #0]
 8002034:	4a38      	ldr	r2, [pc, #224]	; (8002118 <telem_loop+0x170>)
 8002036:	54d1      	strb	r1, [r2, r3]

					var_index += 1;
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	3301      	adds	r3, #1
 800203c:	72fb      	strb	r3, [r7, #11]
				for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <telem_loop+0x178>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	4a36      	ldr	r2, [pc, #216]	; (8002124 <telem_loop+0x17c>)
 800204c:	23a8      	movs	r3, #168	; 0xa8
 800204e:	fb03 f301 	mul.w	r3, r3, r1
 8002052:	441a      	add	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	3384      	adds	r3, #132	; 0x84
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4293      	cmp	r3, r2
 8002062:	dbd7      	blt.n	8002014 <telem_loop+0x6c>
			for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <telem_loop+0x178>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <telem_loop+0x17c>)
 8002072:	23a8      	movs	r3, #168	; 0xa8
 8002074:	fb03 f301 	mul.w	r3, r3, r1
 8002078:	4413      	add	r3, r2
 800207a:	33a4      	adds	r3, #164	; 0xa4
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4293      	cmp	r3, r2
 8002084:	dbc3      	blt.n	800200e <telem_loop+0x66>
				}
			}

			telem_send_buffer[32] = var_index;
 8002086:	4a24      	ldr	r2, [pc, #144]	; (8002118 <telem_loop+0x170>)
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	f882 3020 	strb.w	r3, [r2, #32]

			auto_packet_counter++;
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <telem_loop+0x178>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <telem_loop+0x178>)
 8002098:	701a      	strb	r2, [r3, #0]

			if(auto_packet_counter >= auto_packet_count)
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <telem_loop+0x178>)
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <telem_loop+0x180>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d302      	bcc.n	80020ac <telem_loop+0x104>
				auto_packet_counter = 0;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <telem_loop+0x178>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

		//sprintf((char*)telem_send_buffer, "%lu%s%ld%lu%s", how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t
		//sprintf((char*)telem_send_buffer, "%c%c%lu%s%ld%lu%s", 0x09 , strlen((char*)telem_send_buffer), how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t


		if(ack_rate_counter < 0xFF)
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <telem_loop+0x184>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d006      	beq.n	80020c4 <telem_loop+0x11c>
			ack_rate_counter++;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <telem_loop+0x184>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <telem_loop+0x184>)
 80020c2:	701a      	strb	r2, [r3, #0]

		if(ack_rate_counter == ack_rate)
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <telem_loop+0x184>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <telem_loop+0x188>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d104      	bne.n	80020dc <telem_loop+0x134>
		{
			telem_send_buffer[34] = 1;
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <telem_loop+0x170>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80020da:	e003      	b.n	80020e4 <telem_loop+0x13c>
			//waiting_for_ack = 1;
		}
		else
		{
			telem_send_buffer[34] = 0;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <telem_loop+0x170>)
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}

		test_millis_timer = GetMillis();
 80020e4:	f7ff fd38 	bl	8001b58 <GetMillis>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <telem_loop+0x18c>)
 80020ec:	601a      	str	r2, [r3, #0]

		//telem_send_buffer[32] = 30;
		telem_send_buffer[33] = 0;//Unreliable
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <telem_loop+0x170>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		//send_buffer[34] = 0;//No data

		HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35);
 80020f6:	2323      	movs	r3, #35	; 0x23
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <telem_loop+0x170>)
 80020fa:	2108      	movs	r1, #8
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <telem_loop+0x16c>)
 80020fe:	f001 fd25 	bl	8003b4c <HAL_I2C_Master_Transmit_DMA>
		telem_receive_timout_timer = GetMillis();
 8002102:	f7ff fd29 	bl	8001b58 <GetMillis>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <telem_loop+0x190>)
 800210a:	601a      	str	r2, [r3, #0]
	}
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000304 	.word	0x20000304
 8002118:	200009e0 	.word	0x200009e0
 800211c:	20000224 	.word	0x20000224
 8002120:	20000226 	.word	0x20000226
 8002124:	20000a04 	.word	0x20000a04
 8002128:	20000225 	.word	0x20000225
 800212c:	20000229 	.word	0x20000229
 8002130:	20000008 	.word	0x20000008
 8002134:	2000053c 	.word	0x2000053c
 8002138:	20001f04 	.word	0x20001f04

0800213c <AddToAutoBuffer>:

void AddToAutoBuffer(uint8_t buf_index, uint8_t *num, uint8_t size)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
 8002148:	4613      	mov	r3, r2
 800214a:	71bb      	strb	r3, [r7, #6]
	auto_packet_buffer[buf_index].payload[auto_packet_buffer[buf_index].var_count] = (uint8_t *)num;
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	79fa      	ldrb	r2, [r7, #7]
 8002150:	4928      	ldr	r1, [pc, #160]	; (80021f4 <AddToAutoBuffer+0xb8>)
 8002152:	20a8      	movs	r0, #168	; 0xa8
 8002154:	fb00 f202 	mul.w	r2, r0, r2
 8002158:	440a      	add	r2, r1
 800215a:	32a4      	adds	r2, #164	; 0xa4
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	4610      	mov	r0, r2
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <AddToAutoBuffer+0xb8>)
 8002162:	212a      	movs	r1, #42	; 0x2a
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4403      	add	r3, r0
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	605a      	str	r2, [r3, #4]
	auto_packet_buffer[buf_index].width[auto_packet_buffer[buf_index].var_count] = size;
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	79fa      	ldrb	r2, [r7, #7]
 8002176:	491f      	ldr	r1, [pc, #124]	; (80021f4 <AddToAutoBuffer+0xb8>)
 8002178:	20a8      	movs	r0, #168	; 0xa8
 800217a:	fb00 f202 	mul.w	r2, r0, r2
 800217e:	440a      	add	r2, r1
 8002180:	32a4      	adds	r2, #164	; 0xa4
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	4610      	mov	r0, r2
 8002186:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <AddToAutoBuffer+0xb8>)
 8002188:	21a8      	movs	r1, #168	; 0xa8
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	4403      	add	r3, r0
 8002192:	3384      	adds	r3, #132	; 0x84
 8002194:	79ba      	ldrb	r2, [r7, #6]
 8002196:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].total_width += size;
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <AddToAutoBuffer+0xb8>)
 800219c:	21a8      	movs	r1, #168	; 0xa8
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	33a5      	adds	r3, #165	; 0xa5
 80021a6:	7819      	ldrb	r1, [r3, #0]
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	440a      	add	r2, r1
 80021ae:	b2d0      	uxtb	r0, r2
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <AddToAutoBuffer+0xb8>)
 80021b2:	21a8      	movs	r1, #168	; 0xa8
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	33a5      	adds	r3, #165	; 0xa5
 80021bc:	4602      	mov	r2, r0
 80021be:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].var_count += 1;
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <AddToAutoBuffer+0xb8>)
 80021c4:	21a8      	movs	r1, #168	; 0xa8
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	33a4      	adds	r3, #164	; 0xa4
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	3201      	adds	r2, #1
 80021d4:	b2d0      	uxtb	r0, r2
 80021d6:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <AddToAutoBuffer+0xb8>)
 80021d8:	21a8      	movs	r1, #168	; 0xa8
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	33a4      	adds	r3, #164	; 0xa4
 80021e2:	4602      	mov	r2, r0
 80021e4:	701a      	strb	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000a04 	.word	0x20000a04

080021f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fe:	f107 0320 	add.w	r3, r7, #32
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
 8002216:	615a      	str	r2, [r3, #20]
 8002218:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <MX_TIM3_Init+0xf0>)
 800221c:	4a33      	ldr	r2, [pc, #204]	; (80022ec <MX_TIM3_Init+0xf4>)
 800221e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002220:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <MX_TIM3_Init+0xf0>)
 8002222:	2253      	movs	r2, #83	; 0x53
 8002224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <MX_TIM3_Init+0xf0>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <MX_TIM3_Init+0xf0>)
 800222e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002232:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <MX_TIM3_Init+0xf0>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <MX_TIM3_Init+0xf0>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002240:	4829      	ldr	r0, [pc, #164]	; (80022e8 <MX_TIM3_Init+0xf0>)
 8002242:	f006 f943 	bl	80084cc <HAL_TIM_PWM_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800224c:	f7ff fd62 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002258:	f107 0320 	add.w	r3, r7, #32
 800225c:	4619      	mov	r1, r3
 800225e:	4822      	ldr	r0, [pc, #136]	; (80022e8 <MX_TIM3_Init+0xf0>)
 8002260:	f007 f9f0 	bl	8009644 <HAL_TIMEx_MasterConfigSynchronization>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800226a:	f7ff fd53 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800226e:	2360      	movs	r3, #96	; 0x60
 8002270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002276:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	4619      	mov	r1, r3
 8002286:	4818      	ldr	r0, [pc, #96]	; (80022e8 <MX_TIM3_Init+0xf0>)
 8002288:	f006 fbcc 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002292:	f7ff fd3f 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2204      	movs	r2, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4812      	ldr	r0, [pc, #72]	; (80022e8 <MX_TIM3_Init+0xf0>)
 800229e:	f006 fbc1 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80022a8:	f7ff fd34 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2208      	movs	r2, #8
 80022b0:	4619      	mov	r1, r3
 80022b2:	480d      	ldr	r0, [pc, #52]	; (80022e8 <MX_TIM3_Init+0xf0>)
 80022b4:	f006 fbb6 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80022be:	f7ff fd29 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	220c      	movs	r2, #12
 80022c6:	4619      	mov	r1, r3
 80022c8:	4807      	ldr	r0, [pc, #28]	; (80022e8 <MX_TIM3_Init+0xf0>)
 80022ca:	f006 fbab 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80022d4:	f7ff fd1e 	bl	8001d14 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <MX_TIM3_Init+0xf0>)
 80022da:	f000 fa1f 	bl	800271c <HAL_TIM_MspPostInit>

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20001fd0 	.word	0x20001fd0
 80022ec:	40000400 	.word	0x40000400

080022f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0318 	add.w	r3, r7, #24
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800230e:	463b      	mov	r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <MX_TIM5_Init+0xd8>)
 800231c:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <MX_TIM5_Init+0xdc>)
 800231e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002320:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <MX_TIM5_Init+0xd8>)
 8002322:	2253      	movs	r2, #83	; 0x53
 8002324:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <MX_TIM5_Init+0xd8>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800232c:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <MX_TIM5_Init+0xd8>)
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <MX_TIM5_Init+0xd8>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <MX_TIM5_Init+0xd8>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002340:	4821      	ldr	r0, [pc, #132]	; (80023c8 <MX_TIM5_Init+0xd8>)
 8002342:	f006 f874 	bl	800842e <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 800234c:	f7ff fce2 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	4619      	mov	r1, r3
 800235c:	481a      	ldr	r0, [pc, #104]	; (80023c8 <MX_TIM5_Init+0xd8>)
 800235e:	f006 fc27 	bl	8008bb0 <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002368:	f7ff fcd4 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800236c:	4816      	ldr	r0, [pc, #88]	; (80023c8 <MX_TIM5_Init+0xd8>)
 800236e:	f006 f917 	bl	80085a0 <HAL_TIM_IC_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002378:	f7ff fccc 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	4619      	mov	r1, r3
 800238a:	480f      	ldr	r0, [pc, #60]	; (80023c8 <MX_TIM5_Init+0xd8>)
 800238c:	f007 f95a 	bl	8009644 <HAL_TIMEx_MasterConfigSynchronization>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8002396:	f7ff fcbd 	bl	8001d14 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800239e:	2301      	movs	r3, #1
 80023a0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023aa:	463b      	mov	r3, r7
 80023ac:	2200      	movs	r2, #0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_TIM5_Init+0xd8>)
 80023b2:	f006 fa9b 	bl	80088ec <HAL_TIM_IC_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80023bc:	f7ff fcaa 	bl	8001d14 <Error_Handler>
  }

}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20001f90 	.word	0x20001f90
 80023cc:	40000c00 	.word	0x40000c00

080023d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	615a      	str	r2, [r3, #20]
 8002400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2220      	movs	r2, #32
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f00a fe01 	bl	800d010 <memset>

  htim8.Instance = TIM8;
 800240e:	4b51      	ldr	r3, [pc, #324]	; (8002554 <MX_TIM8_Init+0x184>)
 8002410:	4a51      	ldr	r2, [pc, #324]	; (8002558 <MX_TIM8_Init+0x188>)
 8002412:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8002414:	4b4f      	ldr	r3, [pc, #316]	; (8002554 <MX_TIM8_Init+0x184>)
 8002416:	22a7      	movs	r2, #167	; 0xa7
 8002418:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <MX_TIM8_Init+0x184>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8002420:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <MX_TIM8_Init+0x184>)
 8002422:	f241 3287 	movw	r2, #4999	; 0x1387
 8002426:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002428:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <MX_TIM8_Init+0x184>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <MX_TIM8_Init+0x184>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b47      	ldr	r3, [pc, #284]	; (8002554 <MX_TIM8_Init+0x184>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800243a:	4846      	ldr	r0, [pc, #280]	; (8002554 <MX_TIM8_Init+0x184>)
 800243c:	f005 fff7 	bl	800842e <HAL_TIM_Base_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002446:	f7ff fc65 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002450:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002454:	4619      	mov	r1, r3
 8002456:	483f      	ldr	r0, [pc, #252]	; (8002554 <MX_TIM8_Init+0x184>)
 8002458:	f006 fbaa 	bl	8008bb0 <HAL_TIM_ConfigClockSource>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002462:	f7ff fc57 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002466:	483b      	ldr	r0, [pc, #236]	; (8002554 <MX_TIM8_Init+0x184>)
 8002468:	f006 f830 	bl	80084cc <HAL_TIM_PWM_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002472:	f7ff fc4f 	bl	8001d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800247e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002482:	4619      	mov	r1, r3
 8002484:	4833      	ldr	r0, [pc, #204]	; (8002554 <MX_TIM8_Init+0x184>)
 8002486:	f007 f8dd 	bl	8009644 <HAL_TIMEx_MasterConfigSynchronization>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002490:	f7ff fc40 	bl	8001d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002494:	2360      	movs	r3, #96	; 0x60
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8002498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024a2:	2300      	movs	r3, #0
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	2200      	movs	r2, #0
 80024b8:	4619      	mov	r1, r3
 80024ba:	4826      	ldr	r0, [pc, #152]	; (8002554 <MX_TIM8_Init+0x184>)
 80024bc:	f006 fab2 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80024c6:	f7ff fc25 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ce:	2204      	movs	r2, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4820      	ldr	r0, [pc, #128]	; (8002554 <MX_TIM8_Init+0x184>)
 80024d4:	f006 faa6 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80024de:	f7ff fc19 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	2208      	movs	r2, #8
 80024e8:	4619      	mov	r1, r3
 80024ea:	481a      	ldr	r0, [pc, #104]	; (8002554 <MX_TIM8_Init+0x184>)
 80024ec:	f006 fa9a 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80024f6:	f7ff fc0d 	bl	8001d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	220c      	movs	r2, #12
 8002500:	4619      	mov	r1, r3
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_TIM8_Init+0x184>)
 8002504:	f006 fa8e 	bl	8008a24 <HAL_TIM_PWM_ConfigChannel>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800250e:	f7ff fc01 	bl	8001d14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800252a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM8_Init+0x184>)
 8002536:	f007 f901 	bl	800973c <HAL_TIMEx_ConfigBreakDeadTime>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 8002540:	f7ff fbe8 	bl	8001d14 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM8_Init+0x184>)
 8002546:	f000 f8e9 	bl	800271c <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3758      	adds	r7, #88	; 0x58
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20001f50 	.word	0x20001f50
 8002558:	40010400 	.word	0x40010400

0800255c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	463b      	mov	r3, r7
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <MX_TIM9_Init+0x6c>)
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <MX_TIM9_Init+0x70>)
 8002572:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <MX_TIM9_Init+0x6c>)
 8002576:	22a7      	movs	r2, #167	; 0xa7
 8002578:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <MX_TIM9_Init+0x6c>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64999;
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <MX_TIM9_Init+0x6c>)
 8002582:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002586:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <MX_TIM9_Init+0x6c>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <MX_TIM9_Init+0x6c>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <MX_TIM9_Init+0x6c>)
 8002596:	f005 ff4a 	bl	800842e <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80025a0:	f7ff fbb8 	bl	8001d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80025aa:	463b      	mov	r3, r7
 80025ac:	4619      	mov	r1, r3
 80025ae:	4806      	ldr	r0, [pc, #24]	; (80025c8 <MX_TIM9_Init+0x6c>)
 80025b0:	f006 fafe 	bl	8008bb0 <HAL_TIM_ConfigClockSource>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80025ba:	f7ff fbab 	bl	8001d14 <Error_Handler>
  }

}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20002010 	.word	0x20002010
 80025cc:	40014000 	.word	0x40014000

080025d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0b      	ldr	r2, [pc, #44]	; (800260c <HAL_TIM_PWM_MspInit+0x3c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10d      	bne.n	80025fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_TIM_PWM_MspInit+0x40>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a09      	ldr	r2, [pc, #36]	; (8002610 <HAL_TIM_PWM_MspInit+0x40>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_TIM_PWM_MspInit+0x40>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40000400 	.word	0x40000400
 8002610:	40023800 	.word	0x40023800

08002614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a35      	ldr	r2, [pc, #212]	; (8002708 <HAL_TIM_Base_MspInit+0xf4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d134      	bne.n	80026a0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	4b34      	ldr	r3, [pc, #208]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a33      	ldr	r2, [pc, #204]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a2c      	ldr	r2, [pc, #176]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800267e:	2302      	movs	r3, #2
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	4619      	mov	r1, r3
 8002688:	4821      	ldr	r0, [pc, #132]	; (8002710 <HAL_TIM_Base_MspInit+0xfc>)
 800268a:	f000 fe43 	bl	8003314 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	2032      	movs	r0, #50	; 0x32
 8002694:	f000 fa5d 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002698:	2032      	movs	r0, #50	; 0x32
 800269a:	f000 fa76 	bl	8002b8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800269e:	e02e      	b.n	80026fe <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_TIM_Base_MspInit+0x100>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
}
 80026c6:	e01a      	b.n	80026fe <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_TIM_Base_MspInit+0x104>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d115      	bne.n	80026fe <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4a0c      	ldr	r2, [pc, #48]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6453      	str	r3, [r2, #68]	; 0x44
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_TIM_Base_MspInit+0xf8>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2018      	movs	r0, #24
 80026f4:	f000 fa2d 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80026f8:	2018      	movs	r0, #24
 80026fa:	f000 fa46 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3730      	adds	r7, #48	; 0x30
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40000c00 	.word	0x40000c00
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000
 8002714:	40010400 	.word	0x40010400
 8002718:	40014000 	.word	0x40014000

0800271c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a33      	ldr	r2, [pc, #204]	; (8002808 <HAL_TIM_MspPostInit+0xec>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d13c      	bne.n	80027b8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b32      	ldr	r3, [pc, #200]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a31      	ldr	r2, [pc, #196]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002786:	2302      	movs	r3, #2
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	481f      	ldr	r0, [pc, #124]	; (8002810 <HAL_TIM_MspPostInit+0xf4>)
 8002792:	f000 fdbf 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002796:	2303      	movs	r3, #3
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027a6:	2302      	movs	r3, #2
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4818      	ldr	r0, [pc, #96]	; (8002814 <HAL_TIM_MspPostInit+0xf8>)
 80027b2:	f000 fdaf 	bl	8003314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80027b6:	e023      	b.n	8002800 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_TIM_MspPostInit+0xfc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11e      	bne.n	8002800 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_TIM_MspPostInit+0xf0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80027de:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80027e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027f0:	2303      	movs	r3, #3
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4808      	ldr	r0, [pc, #32]	; (800281c <HAL_TIM_MspPostInit+0x100>)
 80027fc:	f000 fd8a 	bl	8003314 <HAL_GPIO_Init>
}
 8002800:	bf00      	nop
 8002802:	3728      	adds	r7, #40	; 0x28
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40000400 	.word	0x40000400
 800280c:	40023800 	.word	0x40023800
 8002810:	40020000 	.word	0x40020000
 8002814:	40020400 	.word	0x40020400
 8002818:	40010400 	.word	0x40010400
 800281c:	40020800 	.word	0x40020800

08002820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002858 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002826:	e003      	b.n	8002830 <LoopCopyDataInit>

08002828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800282a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800282c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800282e:	3104      	adds	r1, #4

08002830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002830:	480b      	ldr	r0, [pc, #44]	; (8002860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002838:	d3f6      	bcc.n	8002828 <CopyDataInit>
  ldr  r2, =_sbss
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800283c:	e002      	b.n	8002844 <LoopFillZerobss>

0800283e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800283e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002840:	f842 3b04 	str.w	r3, [r2], #4

08002844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002848:	d3f9      	bcc.n	800283e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800284a:	f7ff fb97 	bl	8001f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f00a fbab 	bl	800cfa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002852:	f7fe ff1b 	bl	800168c <main>
  bx  lr    
 8002856:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002858:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800285c:	0800d93c 	.word	0x0800d93c
  ldr  r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002864:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8002868:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800286c:	20003930 	.word	0x20003930

08002870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC_IRQHandler>
	...

08002874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <HAL_Init+0x40>)
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_Init+0x40>)
 800288a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800288e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_Init+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <HAL_Init+0x40>)
 8002896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289c:	2003      	movs	r0, #3
 800289e:	f000 f94d 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f000 f808 	bl	80028b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a8:	f7ff fa78 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_InitTick+0x54>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_InitTick+0x58>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f965 	bl	8002ba6 <HAL_SYSTICK_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e00e      	b.n	8002904 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b0f      	cmp	r3, #15
 80028ea:	d80a      	bhi.n	8002902 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028ec:	2200      	movs	r2, #0
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	f04f 30ff 	mov.w	r0, #4294967295
 80028f4:	f000 f92d 	bl	8002b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028f8:	4a06      	ldr	r2, [pc, #24]	; (8002914 <HAL_InitTick+0x5c>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	e000      	b.n	8002904 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000004 	.word	0x20000004
 8002910:	20000010 	.word	0x20000010
 8002914:	2000000c 	.word	0x2000000c

08002918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_IncTick+0x20>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x24>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4413      	add	r3, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_IncTick+0x24>)
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000010 	.word	0x20000010
 800293c:	20002050 	.word	0x20002050

08002940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return uwTick;
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_GetTick+0x14>)
 8002946:	681b      	ldr	r3, [r3, #0]
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	20002050 	.word	0x20002050

08002958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff ffee 	bl	8002940 <HAL_GetTick>
 8002964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d005      	beq.n	800297e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_Delay+0x40>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800297e:	bf00      	nop
 8002980:	f7ff ffde 	bl	8002940 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d8f7      	bhi.n	8002980 <HAL_Delay+0x28>
  {
  }
}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000010 	.word	0x20000010

0800299c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ce:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <__NVIC_SetPriorityGrouping+0x44>)
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	60d3      	str	r3, [r2, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e8:	4b04      	ldr	r3, [pc, #16]	; (80029fc <__NVIC_GetPriorityGrouping+0x18>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	f003 0307 	and.w	r3, r3, #7
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	db0b      	blt.n	8002a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <__NVIC_EnableIRQ+0x38>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2001      	movs	r0, #1
 8002a22:	fa00 f202 	lsl.w	r2, r0, r2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000e100 	.word	0xe000e100

08002a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db0a      	blt.n	8002a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	490c      	ldr	r1, [pc, #48]	; (8002a88 <__NVIC_SetPriority+0x4c>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	0112      	lsls	r2, r2, #4
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a64:	e00a      	b.n	8002a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	4908      	ldr	r1, [pc, #32]	; (8002a8c <__NVIC_SetPriority+0x50>)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	3b04      	subs	r3, #4
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	440b      	add	r3, r1
 8002a7a:	761a      	strb	r2, [r3, #24]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000e100 	.word	0xe000e100
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f1c3 0307 	rsb	r3, r3, #7
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	bf28      	it	cs
 8002aae:	2304      	movcs	r3, #4
 8002ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d902      	bls.n	8002ac0 <NVIC_EncodePriority+0x30>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3b03      	subs	r3, #3
 8002abe:	e000      	b.n	8002ac2 <NVIC_EncodePriority+0x32>
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	401a      	ands	r2, r3
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	4313      	orrs	r3, r2
         );
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3724      	adds	r7, #36	; 0x24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	f7ff ff8e 	bl	8002a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff29 	bl	800299c <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff3e 	bl	80029e4 <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff8e 	bl	8002a90 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff5d 	bl	8002a3c <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff31 	bl	8002a00 <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffa2 	bl	8002af8 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff feb8 	bl	8002940 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e099      	b.n	8002d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bfc:	e00f      	b.n	8002c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bfe:	f7ff fe9f 	bl	8002940 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d908      	bls.n	8002c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e078      	b.n	8002d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e8      	bne.n	8002bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <HAL_DMA_Init+0x158>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	4313      	orrs	r3, r2
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f023 0307 	bic.w	r3, r3, #7
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d117      	bne.n	8002ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 faab 	bl	8003220 <DMA_CheckFifoParam>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e016      	b.n	8002d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa62 	bl	80031b4 <DMA_CalcBaseAndBitshift>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	223f      	movs	r2, #63	; 0x3f
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	f010803f 	.word	0xf010803f

08002d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_DMA_Start_IT+0x26>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e040      	b.n	8002dc4 <HAL_DMA_Start_IT+0xa8>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d12f      	bne.n	8002db6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f9f4 	bl	8003158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	223f      	movs	r2, #63	; 0x3f
 8002d76:	409a      	lsls	r2, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0216 	orr.w	r2, r2, #22
 8002d8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0208 	orr.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e005      	b.n	8002dc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d004      	beq.n	8002dea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00c      	b.n	8002e04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2205      	movs	r2, #5
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e1c:	4b92      	ldr	r3, [pc, #584]	; (8003068 <HAL_DMA_IRQHandler+0x258>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a92      	ldr	r2, [pc, #584]	; (800306c <HAL_DMA_IRQHandler+0x25c>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0a9b      	lsrs	r3, r3, #10
 8002e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01a      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d013      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0204 	bic.w	r2, r2, #4
 8002e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	2208      	movs	r2, #8
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	2201      	movs	r2, #1
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d012      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	f043 0202 	orr.w	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	f043 0204 	orr.w	r2, r3, #4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	2210      	movs	r2, #16
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d043      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d03c      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d018      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d108      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d024      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e01f      	b.n	8002f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01b      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
 8002f50:	e016      	b.n	8002f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d107      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0208 	bic.w	r2, r2, #8
 8002f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2220      	movs	r2, #32
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 808e 	beq.w	80030ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8086 	beq.w	80030ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b05      	cmp	r3, #5
 8002fb8:	d136      	bne.n	8003028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0216 	bic.w	r2, r2, #22
 8002fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_DMA_IRQHandler+0x1da>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0208 	bic.w	r2, r2, #8
 8002ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	223f      	movs	r2, #63	; 0x3f
 8003000:	409a      	lsls	r2, r3
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301a:	2b00      	cmp	r3, #0
 800301c:	d07d      	beq.n	800311a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
        }
        return;
 8003026:	e078      	b.n	800311a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01c      	beq.n	8003070 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d108      	bne.n	8003056 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	2b00      	cmp	r3, #0
 800304a:	d030      	beq.n	80030ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
 8003054:	e02b      	b.n	80030ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d027      	beq.n	80030ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
 8003066:	e022      	b.n	80030ae <HAL_DMA_IRQHandler+0x29e>
 8003068:	20000004 	.word	0x20000004
 800306c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10f      	bne.n	800309e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0210 	bic.w	r2, r2, #16
 800308c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d032      	beq.n	800311c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d022      	beq.n	8003108 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2205      	movs	r2, #5
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3301      	adds	r3, #1
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d307      	bcc.n	80030f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f2      	bne.n	80030da <HAL_DMA_IRQHandler+0x2ca>
 80030f4:	e000      	b.n	80030f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
 8003118:	e000      	b.n	800311c <HAL_DMA_IRQHandler+0x30c>
        return;
 800311a:	bf00      	nop
    }
  }
}
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop

08003124 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003132:	b2db      	uxtb	r3, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d108      	bne.n	8003198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003196:	e007      	b.n	80031a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	3b10      	subs	r3, #16
 80031c4:	4a14      	ldr	r2, [pc, #80]	; (8003218 <DMA_CalcBaseAndBitshift+0x64>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ce:	4a13      	ldr	r2, [pc, #76]	; (800321c <DMA_CalcBaseAndBitshift+0x68>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d909      	bls.n	80031f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	659a      	str	r2, [r3, #88]	; 0x58
 80031f4:	e007      	b.n	8003206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031fe:	f023 0303 	bic.w	r3, r3, #3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	aaaaaaab 	.word	0xaaaaaaab
 800321c:	0800d918 	.word	0x0800d918

08003220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11f      	bne.n	800327a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d855      	bhi.n	80032ec <DMA_CheckFifoParam+0xcc>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <DMA_CheckFifoParam+0x28>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	08003259 	.word	0x08003259
 800324c:	0800326b 	.word	0x0800326b
 8003250:	08003259 	.word	0x08003259
 8003254:	080032ed 	.word	0x080032ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d045      	beq.n	80032f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003268:	e042      	b.n	80032f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003272:	d13f      	bne.n	80032f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003278:	e03c      	b.n	80032f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003282:	d121      	bne.n	80032c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d836      	bhi.n	80032f8 <DMA_CheckFifoParam+0xd8>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <DMA_CheckFifoParam+0x70>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032a1 	.word	0x080032a1
 8003294:	080032a7 	.word	0x080032a7
 8003298:	080032a1 	.word	0x080032a1
 800329c:	080032b9 	.word	0x080032b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e02f      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d024      	beq.n	80032fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b6:	e021      	b.n	80032fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032c0:	d11e      	bne.n	8003300 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032c6:	e01b      	b.n	8003300 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d902      	bls.n	80032d4 <DMA_CheckFifoParam+0xb4>
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d003      	beq.n	80032da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032d2:	e018      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e015      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00e      	beq.n	8003304 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ea:	e00b      	b.n	8003304 <DMA_CheckFifoParam+0xe4>
      break;
 80032ec:	bf00      	nop
 80032ee:	e00a      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032f0:	bf00      	nop
 80032f2:	e008      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032f4:	bf00      	nop
 80032f6:	e006      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032f8:	bf00      	nop
 80032fa:	e004      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 80032fc:	bf00      	nop
 80032fe:	e002      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;   
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <DMA_CheckFifoParam+0xe6>
      break;
 8003304:	bf00      	nop
    }
  } 
  
  return status; 
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e16b      	b.n	8003608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	429a      	cmp	r2, r3
 800334a:	f040 815a 	bne.w	8003602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d00b      	beq.n	800336e <HAL_GPIO_Init+0x5a>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003362:	2b11      	cmp	r3, #17
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b12      	cmp	r3, #18
 800336c:	d130      	bne.n	80033d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2203      	movs	r2, #3
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 0201 	and.w	r2, r3, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0xfc>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b12      	cmp	r3, #18
 800340e:	d123      	bne.n	8003458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	220f      	movs	r2, #15
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	69b9      	ldr	r1, [r7, #24]
 8003454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80b4 	beq.w	8003602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b5f      	ldr	r3, [pc, #380]	; (800361c <HAL_GPIO_Init+0x308>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a5e      	ldr	r2, [pc, #376]	; (800361c <HAL_GPIO_Init+0x308>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b5c      	ldr	r3, [pc, #368]	; (800361c <HAL_GPIO_Init+0x308>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034b6:	4a5a      	ldr	r2, [pc, #360]	; (8003620 <HAL_GPIO_Init+0x30c>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	220f      	movs	r2, #15
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a51      	ldr	r2, [pc, #324]	; (8003624 <HAL_GPIO_Init+0x310>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d02b      	beq.n	800353a <HAL_GPIO_Init+0x226>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a50      	ldr	r2, [pc, #320]	; (8003628 <HAL_GPIO_Init+0x314>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d025      	beq.n	8003536 <HAL_GPIO_Init+0x222>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4f      	ldr	r2, [pc, #316]	; (800362c <HAL_GPIO_Init+0x318>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <HAL_GPIO_Init+0x21e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4e      	ldr	r2, [pc, #312]	; (8003630 <HAL_GPIO_Init+0x31c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <HAL_GPIO_Init+0x21a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4d      	ldr	r2, [pc, #308]	; (8003634 <HAL_GPIO_Init+0x320>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x216>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <HAL_GPIO_Init+0x324>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x212>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4b      	ldr	r2, [pc, #300]	; (800363c <HAL_GPIO_Init+0x328>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x20e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4a      	ldr	r2, [pc, #296]	; (8003640 <HAL_GPIO_Init+0x32c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x20a>
 800351a:	2307      	movs	r3, #7
 800351c:	e00e      	b.n	800353c <HAL_GPIO_Init+0x228>
 800351e:	2308      	movs	r3, #8
 8003520:	e00c      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003522:	2306      	movs	r3, #6
 8003524:	e00a      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003526:	2305      	movs	r3, #5
 8003528:	e008      	b.n	800353c <HAL_GPIO_Init+0x228>
 800352a:	2304      	movs	r3, #4
 800352c:	e006      	b.n	800353c <HAL_GPIO_Init+0x228>
 800352e:	2303      	movs	r3, #3
 8003530:	e004      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003532:	2302      	movs	r3, #2
 8003534:	e002      	b.n	800353c <HAL_GPIO_Init+0x228>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_GPIO_Init+0x228>
 800353a:	2300      	movs	r3, #0
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	f002 0203 	and.w	r2, r2, #3
 8003542:	0092      	lsls	r2, r2, #2
 8003544:	4093      	lsls	r3, r2
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354c:	4934      	ldr	r1, [pc, #208]	; (8003620 <HAL_GPIO_Init+0x30c>)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800355a:	4b3a      	ldr	r3, [pc, #232]	; (8003644 <HAL_GPIO_Init+0x330>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357e:	4a31      	ldr	r2, [pc, #196]	; (8003644 <HAL_GPIO_Init+0x330>)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003584:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <HAL_GPIO_Init+0x330>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_GPIO_Init+0x330>)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ae:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_GPIO_Init+0x330>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035d2:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <HAL_GPIO_Init+0x330>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_GPIO_Init+0x330>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035fc:	4a11      	ldr	r2, [pc, #68]	; (8003644 <HAL_GPIO_Init+0x330>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3301      	adds	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b0f      	cmp	r3, #15
 800360c:	f67f ae90 	bls.w	8003330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3724      	adds	r7, #36	; 0x24
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40023800 	.word	0x40023800
 8003620:	40013800 	.word	0x40013800
 8003624:	40020000 	.word	0x40020000
 8003628:	40020400 	.word	0x40020400
 800362c:	40020800 	.word	0x40020800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	40021000 	.word	0x40021000
 8003638:	40021400 	.word	0x40021400
 800363c:	40021800 	.word	0x40021800
 8003640:	40021c00 	.word	0x40021c00
 8003644:	40013c00 	.word	0x40013c00

08003648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	e001      	b.n	800366a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
 8003684:	4613      	mov	r3, r2
 8003686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003694:	e003      	b.n	800369e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	041a      	lsls	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	619a      	str	r2, [r3, #24]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	401a      	ands	r2, r3
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d104      	bne.n	80036ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	041a      	lsls	r2, r3, #16
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80036cc:	e002      	b.n	80036d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80036ce:	887a      	ldrh	r2, [r7, #2]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	619a      	str	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e11f      	b.n	8003932 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fca4 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	; 0x24
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003744:	f004 fc98 	bl	8008078 <HAL_RCC_GetPCLK1Freq>
 8003748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4a7b      	ldr	r2, [pc, #492]	; (800393c <HAL_I2C_Init+0x25c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d807      	bhi.n	8003764 <HAL_I2C_Init+0x84>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <HAL_I2C_Init+0x260>)
 8003758:	4293      	cmp	r3, r2
 800375a:	bf94      	ite	ls
 800375c:	2301      	movls	r3, #1
 800375e:	2300      	movhi	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e006      	b.n	8003772 <HAL_I2C_Init+0x92>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a77      	ldr	r2, [pc, #476]	; (8003944 <HAL_I2C_Init+0x264>)
 8003768:	4293      	cmp	r3, r2
 800376a:	bf94      	ite	ls
 800376c:	2301      	movls	r3, #1
 800376e:	2300      	movhi	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e0db      	b.n	8003932 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4a72      	ldr	r2, [pc, #456]	; (8003948 <HAL_I2C_Init+0x268>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	0c9b      	lsrs	r3, r3, #18
 8003784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a64      	ldr	r2, [pc, #400]	; (800393c <HAL_I2C_Init+0x25c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d802      	bhi.n	80037b4 <HAL_I2C_Init+0xd4>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3301      	adds	r3, #1
 80037b2:	e009      	b.n	80037c8 <HAL_I2C_Init+0xe8>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_I2C_Init+0x26c>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	3301      	adds	r3, #1
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4956      	ldr	r1, [pc, #344]	; (800393c <HAL_I2C_Init+0x25c>)
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d80d      	bhi.n	8003804 <HAL_I2C_Init+0x124>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e59      	subs	r1, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	bf38      	it	cc
 8003800:	2304      	movcc	r3, #4
 8003802:	e04f      	b.n	80038a4 <HAL_I2C_Init+0x1c4>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <HAL_I2C_Init+0x150>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1e58      	subs	r0, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	440b      	add	r3, r1
 800381a:	fbb0 f3f3 	udiv	r3, r0, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003824:	2b00      	cmp	r3, #0
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e012      	b.n	8003856 <HAL_I2C_Init+0x176>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1e58      	subs	r0, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	0099      	lsls	r1, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <HAL_I2C_Init+0x17e>
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <HAL_I2C_Init+0x1c4>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10e      	bne.n	8003884 <HAL_I2C_Init+0x1a4>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1e58      	subs	r0, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	440b      	add	r3, r1
 8003874:	fbb0 f3f3 	udiv	r3, r0, r3
 8003878:	3301      	adds	r3, #1
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003882:	e00f      	b.n	80038a4 <HAL_I2C_Init+0x1c4>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	0099      	lsls	r1, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	fbb0 f3f3 	udiv	r3, r0, r3
 800389a:	3301      	adds	r3, #1
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	6809      	ldr	r1, [r1, #0]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6911      	ldr	r1, [r2, #16]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68d2      	ldr	r2, [r2, #12]
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	430b      	orrs	r3, r1
 80038e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	000186a0 	.word	0x000186a0
 8003940:	001e847f 	.word	0x001e847f
 8003944:	003d08ff 	.word	0x003d08ff
 8003948:	431bde83 	.word	0x431bde83
 800394c:	10624dd3 	.word	0x10624dd3

08003950 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	461a      	mov	r2, r3
 800395c:	460b      	mov	r3, r1
 800395e:	817b      	strh	r3, [r7, #10]
 8003960:	4613      	mov	r3, r2
 8003962:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003964:	f7fe ffec 	bl	8002940 <HAL_GetTick>
 8003968:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	f040 80e0 	bne.w	8003b38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	2319      	movs	r3, #25
 800397e:	2201      	movs	r2, #1
 8003980:	4970      	ldr	r1, [pc, #448]	; (8003b44 <HAL_I2C_Master_Transmit+0x1f4>)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f002 fbc5 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
 8003990:	e0d3      	b.n	8003b3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x50>
 800399c:	2302      	movs	r3, #2
 800399e:	e0cc      	b.n	8003b3a <HAL_I2C_Master_Transmit+0x1ea>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d007      	beq.n	80039c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2221      	movs	r2, #33	; 0x21
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2210      	movs	r2, #16
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	893a      	ldrh	r2, [r7, #8]
 80039f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a50      	ldr	r2, [pc, #320]	; (8003b48 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a08:	8979      	ldrh	r1, [r7, #10]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	6a3a      	ldr	r2, [r7, #32]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f002 f886 	bl	8005b20 <I2C_MasterRequestWrite>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e08d      	b.n	8003b3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a34:	e066      	b.n	8003b04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	6a39      	ldr	r1, [r7, #32]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f002 fc3f 	bl	80062be <I2C_WaitOnTXEFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d107      	bne.n	8003a5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06b      	b.n	8003b3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_I2C_Master_Transmit+0x188>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	6a39      	ldr	r1, [r7, #32]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f002 fc2f 	bl	8006340 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d107      	bne.n	8003b00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e01a      	b.n	8003b3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d194      	bne.n	8003a36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	00100002 	.word	0x00100002
 8003b48:	ffff0000 	.word	0xffff0000

08003b4c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	461a      	mov	r2, r3
 8003b58:	460b      	mov	r3, r1
 8003b5a:	817b      	strh	r3, [r7, #10]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	f040 80f4 	bne.w	8003d5a <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b72:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	08db      	lsrs	r3, r3, #3
 8003b78:	4a7b      	ldr	r2, [pc, #492]	; (8003d68 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	0a1a      	lsrs	r2, r3, #8
 8003b80:	4613      	mov	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	009a      	lsls	r2, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d116      	bne.n	8003bc6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f043 0220 	orr.w	r2, r3, #32
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e0ca      	b.n	8003d5c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d0db      	beq.n	8003b8c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d101      	bne.n	8003be2 <HAL_I2C_Master_Transmit_DMA+0x96>
 8003bde:	2302      	movs	r3, #2
 8003be0:	e0bc      	b.n	8003d5c <HAL_I2C_Master_Transmit_DMA+0x210>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d007      	beq.n	8003c08 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2221      	movs	r2, #33	; 0x21
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2210      	movs	r2, #16
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	893a      	ldrh	r2, [r7, #8]
 8003c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a49      	ldr	r2, [pc, #292]	; (8003d6c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c4a:	897a      	ldrh	r2, [r7, #10]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d062      	beq.n	8003d1e <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	4a44      	ldr	r2, [pc, #272]	; (8003d70 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8003c5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c64:	4a43      	ldr	r2, [pc, #268]	; (8003d74 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8003c66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c74:	2200      	movs	r2, #0
 8003c76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	2200      	movs	r2, #0
 8003c86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	4619      	mov	r1, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3310      	adds	r3, #16
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9e:	f7ff f83d 	bl	8002d1c <HAL_DMA_Start_IT>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d124      	bne.n	8003cf6 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cba:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cca:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ce2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	e02f      	b.n	8003d56 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f043 0210 	orr.w	r2, r3, #16
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e01e      	b.n	8003d5c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d54:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000004 	.word	0x20000004
 8003d68:	14f8b589 	.word	0x14f8b589
 8003d6c:	ffff0000 	.word	0xffff0000
 8003d70:	08005df1 	.word	0x08005df1
 8003d74:	08005f9b 	.word	0x08005f9b

08003d78 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	461a      	mov	r2, r3
 8003d84:	460b      	mov	r3, r1
 8003d86:	817b      	strh	r3, [r7, #10]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	f040 80f4 	bne.w	8003f86 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d9e:	4b7c      	ldr	r3, [pc, #496]	; (8003f90 <HAL_I2C_Master_Receive_DMA+0x218>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	08db      	lsrs	r3, r3, #3
 8003da4:	4a7b      	ldr	r2, [pc, #492]	; (8003f94 <HAL_I2C_Master_Receive_DMA+0x21c>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	0a1a      	lsrs	r2, r3, #8
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009a      	lsls	r2, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d116      	bne.n	8003df2 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e0ca      	b.n	8003f88 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d0db      	beq.n	8003db8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_I2C_Master_Receive_DMA+0x96>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e0bc      	b.n	8003f88 <HAL_I2C_Master_Receive_DMA+0x210>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d007      	beq.n	8003e34 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2222      	movs	r2, #34	; 0x22
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2210      	movs	r2, #16
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	893a      	ldrh	r2, [r7, #8]
 8003e64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a49      	ldr	r2, [pc, #292]	; (8003f98 <HAL_I2C_Master_Receive_DMA+0x220>)
 8003e74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003e76:	897a      	ldrh	r2, [r7, #10]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d062      	beq.n	8003f4a <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	4a44      	ldr	r2, [pc, #272]	; (8003f9c <HAL_I2C_Master_Receive_DMA+0x224>)
 8003e8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	4a43      	ldr	r2, [pc, #268]	; (8003fa0 <HAL_I2C_Master_Receive_DMA+0x228>)
 8003e92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eca:	f7fe ff27 	bl	8002d1c <HAL_DMA_Start_IT>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d124      	bne.n	8003f22 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef6:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f0e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	e02f      	b.n	8003f82 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f043 0210 	orr.w	r2, r3, #16
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e01e      	b.n	8003f88 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f58:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f68:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003f80:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000004 	.word	0x20000004
 8003f94:	14f8b589 	.word	0x14f8b589
 8003f98:	ffff0000 	.word	0xffff0000
 8003f9c:	08005df1 	.word	0x08005df1
 8003fa0:	08005f9b 	.word	0x08005f9b

08003fa4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08c      	sub	sp, #48	; 0x30
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	4608      	mov	r0, r1
 8003fae:	4611      	mov	r1, r2
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	813b      	strh	r3, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbe:	f7fe fcbf 	bl	8002940 <HAL_GetTick>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	f040 8208 	bne.w	80043e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2319      	movs	r3, #25
 8003fd8:	2201      	movs	r2, #1
 8003fda:	497b      	ldr	r1, [pc, #492]	; (80041c8 <HAL_I2C_Mem_Read+0x224>)
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f002 f898 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e1fb      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x56>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e1f4      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d007      	beq.n	8004020 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2222      	movs	r2, #34	; 0x22
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a5b      	ldr	r2, [pc, #364]	; (80041cc <HAL_I2C_Mem_Read+0x228>)
 8004060:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004062:	88f8      	ldrh	r0, [r7, #6]
 8004064:	893a      	ldrh	r2, [r7, #8]
 8004066:	8979      	ldrh	r1, [r7, #10]
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	9301      	str	r3, [sp, #4]
 800406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f001 fdd6 	bl	8005c24 <I2C_RequestMemoryRead>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e1b0      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d113      	bne.n	80040b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	623b      	str	r3, [r7, #32]
 800409e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	e184      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d11b      	bne.n	80040f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e164      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d11b      	bne.n	8004132 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004108:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004118:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	e144      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004148:	e138      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	2b03      	cmp	r3, #3
 8004150:	f200 80f1 	bhi.w	8004336 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	2b01      	cmp	r3, #1
 800415a:	d123      	bne.n	80041a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f002 f92e 	bl	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e139      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a2:	e10b      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d14e      	bne.n	800424a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	2200      	movs	r2, #0
 80041b4:	4906      	ldr	r1, [pc, #24]	; (80041d0 <HAL_I2C_Mem_Read+0x22c>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f001 ffab 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e10e      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
 80041c6:	bf00      	nop
 80041c8:	00100002 	.word	0x00100002
 80041cc:	ffff0000 	.word	0xffff0000
 80041d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004248:	e0b8      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2200      	movs	r2, #0
 8004252:	4966      	ldr	r1, [pc, #408]	; (80043ec <HAL_I2C_Mem_Read+0x448>)
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f001 ff5c 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0bf      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2200      	movs	r2, #0
 80042ae:	494f      	ldr	r1, [pc, #316]	; (80043ec <HAL_I2C_Mem_Read+0x448>)
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f001 ff2e 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e091      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004334:	e042      	b.n	80043bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f002 f841 	bl	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e04c      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d118      	bne.n	80043bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f aec2 	bne.w	800414a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	00010004 	.word	0x00010004

080043f0 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b10      	cmp	r3, #16
 8004406:	d135      	bne.n	8004474 <HAL_I2C_Master_Abort_IT+0x84>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_I2C_Master_Abort_IT+0x26>
 8004412:	2302      	movs	r3, #2
 8004414:	e02f      	b.n	8004476 <HAL_I2C_Master_Abort_IT+0x86>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2260      	movs	r2, #96	; 0x60
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004460:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f001 fa2a 	bl	80058c4 <I2C_ITError>

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_I2C_Master_Abort_IT+0x86>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b088      	sub	sp, #32
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800449e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d003      	beq.n	80044b6 <HAL_I2C_EV_IRQHandler+0x38>
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	f040 80b6 	bne.w	8004622 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_I2C_EV_IRQHandler+0x6e>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80044d6:	d003      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x62>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80044de:	d101      	bne.n	80044e4 <HAL_I2C_EV_IRQHandler+0x66>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <HAL_I2C_EV_IRQHandler+0x68>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	f000 8127 	beq.w	800473a <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x92>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	0a5b      	lsrs	r3, r3, #9
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f001 ffe2 	bl	80064cc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fcf8 	bl	8004efe <I2C_Master_SB>
 800450e:	e087      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_I2C_EV_IRQHandler+0xb2>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	0a5b      	lsrs	r3, r3, #9
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fd6e 	bl	800500a <I2C_Master_ADD10>
 800452e:	e077      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	085b      	lsrs	r3, r3, #1
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <HAL_I2C_EV_IRQHandler+0xd2>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	0a5b      	lsrs	r3, r3, #9
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fd88 	bl	800505e <I2C_Master_ADDR>
 800454e:	e067      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d030      	beq.n	80045be <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456a:	f000 80e8 	beq.w	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	09db      	lsrs	r3, r3, #7
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00f      	beq.n	800459a <HAL_I2C_EV_IRQHandler+0x11c>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	0a9b      	lsrs	r3, r3, #10
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_I2C_EV_IRQHandler+0x11c>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d103      	bne.n	800459a <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f9c4 	bl	8004920 <I2C_MasterTransmit_TXE>
 8004598:	e042      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 80cb 	beq.w	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	0a5b      	lsrs	r3, r3, #9
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80c4 	beq.w	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa4e 	bl	8004a58 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045bc:	e0bf      	b.n	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045cc:	f000 80b7 	beq.w	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00f      	beq.n	80045fc <HAL_I2C_EV_IRQHandler+0x17e>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	0a9b      	lsrs	r3, r3, #10
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <HAL_I2C_EV_IRQHandler+0x17e>
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fb16 	bl	8004c26 <I2C_MasterReceive_RXNE>
 80045fa:	e011      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 809a 	beq.w	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	0a5b      	lsrs	r3, r3, #9
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8093 	beq.w	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fb86 	bl	8004d2a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461e:	e08e      	b.n	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
 8004620:	e08d      	b.n	800473e <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	e007      	b.n	8004644 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	0a5b      	lsrs	r3, r3, #9
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 ff44 	bl	80054fc <I2C_Slave_ADDR>
 8004674:	e066      	b.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x218>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	0a5b      	lsrs	r3, r3, #9
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 ff78 	bl	8005584 <I2C_Slave_STOPF>
 8004694:	e056      	b.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004696:	7bbb      	ldrb	r3, [r7, #14]
 8004698:	2b21      	cmp	r3, #33	; 0x21
 800469a:	d002      	beq.n	80046a2 <HAL_I2C_EV_IRQHandler+0x224>
 800469c:	7bbb      	ldrb	r3, [r7, #14]
 800469e:	2b29      	cmp	r3, #41	; 0x29
 80046a0:	d125      	bne.n	80046ee <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	09db      	lsrs	r3, r3, #7
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00f      	beq.n	80046ce <HAL_I2C_EV_IRQHandler+0x250>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	0a9b      	lsrs	r3, r3, #10
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_I2C_EV_IRQHandler+0x250>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	089b      	lsrs	r3, r3, #2
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fe5a 	bl	8005380 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046cc:	e039      	b.n	8004742 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d033      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x2c4>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	0a5b      	lsrs	r3, r3, #9
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d02d      	beq.n	8004742 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fe87 	bl	80053fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ec:	e029      	b.n	8004742 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	099b      	lsrs	r3, r3, #6
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00f      	beq.n	800471a <HAL_I2C_EV_IRQHandler+0x29c>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	0a9b      	lsrs	r3, r3, #10
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_I2C_EV_IRQHandler+0x29c>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fe92 	bl	800543c <I2C_SlaveReceive_RXNE>
 8004718:	e014      	b.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00e      	beq.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	0a5b      	lsrs	r3, r3, #9
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fec0 	bl	80054b8 <I2C_SlaveReceive_BTF>
 8004738:	e004      	b.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800473a:	bf00      	nop
 800473c:	e002      	b.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004742:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b08a      	sub	sp, #40	; 0x28
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004762:	2300      	movs	r3, #0
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00e      	beq.n	8004798 <HAL_I2C_ER_IRQHandler+0x4e>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004796:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	0a5b      	lsrs	r3, r3, #9
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00e      	beq.n	80047c2 <HAL_I2C_ER_IRQHandler+0x78>
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f043 0302 	orr.w	r3, r3, #2
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80047c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	0a9b      	lsrs	r3, r3, #10
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d03f      	beq.n	800484e <HAL_I2C_ER_IRQHandler+0x104>
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d039      	beq.n	800484e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80047da:	7efb      	ldrb	r3, [r7, #27]
 80047dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047f4:	7ebb      	ldrb	r3, [r7, #26]
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d112      	bne.n	8004820 <HAL_I2C_ER_IRQHandler+0xd6>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <HAL_I2C_ER_IRQHandler+0xd6>
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b21      	cmp	r3, #33	; 0x21
 8004804:	d008      	beq.n	8004818 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b29      	cmp	r3, #41	; 0x29
 800480a:	d005      	beq.n	8004818 <HAL_I2C_ER_IRQHandler+0xce>
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	2b28      	cmp	r3, #40	; 0x28
 8004810:	d106      	bne.n	8004820 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b21      	cmp	r3, #33	; 0x21
 8004816:	d103      	bne.n	8004820 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 ffe3 	bl	80057e4 <I2C_Slave_AF>
 800481e:	e016      	b.n	800484e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004828:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	f043 0304 	orr.w	r3, r3, #4
 8004830:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004832:	7efb      	ldrb	r3, [r7, #27]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d002      	beq.n	800483e <HAL_I2C_ER_IRQHandler+0xf4>
 8004838:	7efb      	ldrb	r3, [r7, #27]
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d107      	bne.n	800484e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	0adb      	lsrs	r3, r3, #11
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <HAL_I2C_ER_IRQHandler+0x12e>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	0a1b      	lsrs	r3, r3, #8
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	f043 0308 	orr.w	r3, r3, #8
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004876:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 f81a 	bl	80058c4 <I2C_ITError>
  }
}
 8004890:	bf00      	nop
 8004892:	3728      	adds	r7, #40	; 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
 80048cc:	4613      	mov	r3, r2
 80048ce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004936:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d150      	bne.n	80049e8 <I2C_MasterTransmit_TXE+0xc8>
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b21      	cmp	r3, #33	; 0x21
 800494a:	d14d      	bne.n	80049e8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d01d      	beq.n	800498e <I2C_MasterTransmit_TXE+0x6e>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b20      	cmp	r3, #32
 8004956:	d01a      	beq.n	800498e <I2C_MasterTransmit_TXE+0x6e>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800495e:	d016      	beq.n	800498e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2211      	movs	r2, #17
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fd f93c 	bl	8001c04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800498c:	e060      	b.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800499c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d107      	bne.n	80049d8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ff8d 	bl	80048f0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049d6:	e03b      	b.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fd f90f 	bl	8001c04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049e6:	e033      	b.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b21      	cmp	r3, #33	; 0x21
 80049ec:	d005      	beq.n	80049fa <I2C_MasterTransmit_TXE+0xda>
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d12d      	bne.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b22      	cmp	r3, #34	; 0x22
 80049f8:	d12a      	bne.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d108      	bne.n	8004a16 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a14:	e01c      	b.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d103      	bne.n	8004a2a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f898 	bl	8004b58 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a28:	e012      	b.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a4e:	e7ff      	b.n	8004a50 <I2C_MasterTransmit_TXE+0x130>
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b21      	cmp	r3, #33	; 0x21
 8004a70:	d165      	bne.n	8004b3e <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d012      	beq.n	8004aa2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	781a      	ldrb	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004aa0:	e056      	b.n	8004b50 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d01d      	beq.n	8004ae4 <I2C_MasterTransmit_BTF+0x8c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d01a      	beq.n	8004ae4 <I2C_MasterTransmit_BTF+0x8c>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ab4:	d016      	beq.n	8004ae4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ac4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2211      	movs	r2, #17
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fd f891 	bl	8001c04 <HAL_I2C_MasterTxCpltCallback>
}
 8004ae2:	e035      	b.n	8004b50 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004af2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b02:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d107      	bne.n	8004b2e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fee2 	bl	80048f0 <HAL_I2C_MemTxCpltCallback>
}
 8004b2c:	e010      	b.n	8004b50 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd f864 	bl	8001c04 <HAL_I2C_MasterTxCpltCallback>
}
 8004b3c:	e008      	b.n	8004b50 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d102      	bne.n	8004b50 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f804 	bl	8004b58 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d11d      	bne.n	8004ba4 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10b      	bne.n	8004b88 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b86:	e048      	b.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	121b      	asrs	r3, r3, #8
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ba2:	e03a      	b.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d10b      	bne.n	8004bc4 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bc2:	e02a      	b.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d126      	bne.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b22      	cmp	r3, #34	; 0x22
 8004bd6:	d108      	bne.n	8004bea <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	e017      	b.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b21      	cmp	r3, #33	; 0x21
 8004bf4:	d111      	bne.n	8004c1a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b22      	cmp	r3, #34	; 0x22
 8004c38:	d173      	bne.n	8004d22 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d920      	bls.n	8004c8a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d154      	bne.n	8004d22 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c86:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004c88:	e04b      	b.n	8004d22 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d047      	beq.n	8004d22 <I2C_MasterReceive_RXNE+0xfc>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d002      	beq.n	8004c9e <I2C_MasterReceive_RXNE+0x78>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d141      	bne.n	8004d22 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cac:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cbc:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d10a      	bne.n	8004d0e <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc ff6c 	bl	8001be4 <HAL_I2C_MemRxCpltCallback>
}
 8004d0c:	e009      	b.n	8004d22 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2212      	movs	r2, #18
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fc ff93 	bl	8001c48 <HAL_I2C_MasterRxCpltCallback>
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d11b      	bne.n	8004d7a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d50:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d78:	e0bd      	b.n	8004ef6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d129      	bne.n	8004dd8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d92:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d00a      	beq.n	8004db0 <I2C_MasterReceive_BTF+0x86>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d007      	beq.n	8004db0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dd6:	e08e      	b.n	8004ef6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d176      	bne.n	8004ed0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d002      	beq.n	8004dee <I2C_MasterReceive_BTF+0xc4>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d108      	bne.n	8004e00 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e019      	b.n	8004e34 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d002      	beq.n	8004e0c <I2C_MasterReceive_BTF+0xe2>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d108      	bne.n	8004e1e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e00a      	b.n	8004e34 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d007      	beq.n	8004e34 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d10a      	bne.n	8004eba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fc fe96 	bl	8001be4 <HAL_I2C_MemRxCpltCallback>
}
 8004eb8:	e01d      	b.n	8004ef6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2212      	movs	r2, #18
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fc febd 	bl	8001c48 <HAL_I2C_MasterRxCpltCallback>
}
 8004ece:	e012      	b.n	8004ef6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b40      	cmp	r3, #64	; 0x40
 8004f10:	d117      	bne.n	8004f42 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f2a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f2c:	e067      	b.n	8004ffe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	611a      	str	r2, [r3, #16]
}
 8004f40:	e05d      	b.n	8004ffe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d133      	bne.n	8004fb4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b21      	cmp	r3, #33	; 0x21
 8004f56:	d109      	bne.n	8004f6c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f68:	611a      	str	r2, [r3, #16]
 8004f6a:	e008      	b.n	8004f7e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <I2C_Master_SB+0x92>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d108      	bne.n	8004fa2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d032      	beq.n	8004ffe <I2C_Master_SB+0x100>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d02d      	beq.n	8004ffe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb0:	605a      	str	r2, [r3, #4]
}
 8004fb2:	e024      	b.n	8004ffe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10e      	bne.n	8004fda <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	11db      	asrs	r3, r3, #7
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f063 030f 	orn	r3, r3, #15
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	611a      	str	r2, [r3, #16]
}
 8004fd8:	e011      	b.n	8004ffe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d10d      	bne.n	8004ffe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	11db      	asrs	r3, r3, #7
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 0306 	and.w	r3, r3, #6
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f063 030e 	orn	r3, r3, #14
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	b2da      	uxtb	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <I2C_Master_ADD10+0x24>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	2b00      	cmp	r3, #0
 800502c:	d011      	beq.n	8005052 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <I2C_Master_ADD10+0x38>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d007      	beq.n	8005052 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005050:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800505e:	b480      	push	{r7}
 8005060:	b091      	sub	sp, #68	; 0x44
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b22      	cmp	r3, #34	; 0x22
 8005086:	f040 8169 	bne.w	800535c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <I2C_Master_ADDR+0x54>
 8005092:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d10b      	bne.n	80050b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	633b      	str	r3, [r7, #48]	; 0x30
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	633b      	str	r3, [r7, #48]	; 0x30
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	e160      	b.n	8005374 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11d      	bne.n	80050f6 <I2C_Master_ADDR+0x98>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050c2:	d118      	bne.n	80050f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	651a      	str	r2, [r3, #80]	; 0x50
 80050f4:	e13e      	b.n	8005374 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d113      	bne.n	8005128 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005100:	2300      	movs	r3, #0
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e115      	b.n	8005354 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	f040 808a 	bne.w	8005248 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800513a:	d137      	bne.n	80051ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515a:	d113      	bne.n	8005184 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	e0e7      	b.n	8005354 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005184:	2300      	movs	r3, #0
 8005186:	623b      	str	r3, [r7, #32]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	623b      	str	r3, [r7, #32]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e0d3      	b.n	8005354 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d02e      	beq.n	8005210 <I2C_Master_ADDR+0x1b2>
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d02b      	beq.n	8005210 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	2b12      	cmp	r3, #18
 80051bc:	d102      	bne.n	80051c4 <I2C_Master_ADDR+0x166>
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d125      	bne.n	8005210 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d00e      	beq.n	80051e8 <I2C_Master_ADDR+0x18a>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d00b      	beq.n	80051e8 <I2C_Master_ADDR+0x18a>
 80051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d008      	beq.n	80051e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e007      	b.n	80051f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	e0a1      	b.n	8005354 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e085      	b.n	8005354 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d14d      	bne.n	80052ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	2b04      	cmp	r3, #4
 8005256:	d016      	beq.n	8005286 <I2C_Master_ADDR+0x228>
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	2b02      	cmp	r3, #2
 800525c:	d013      	beq.n	8005286 <I2C_Master_ADDR+0x228>
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	2b10      	cmp	r3, #16
 8005262:	d010      	beq.n	8005286 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005272:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e007      	b.n	8005296 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005294:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a4:	d117      	bne.n	80052d6 <I2C_Master_ADDR+0x278>
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052ac:	d00b      	beq.n	80052c6 <I2C_Master_ADDR+0x268>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d008      	beq.n	80052c6 <I2C_Master_ADDR+0x268>
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d005      	beq.n	80052c6 <I2C_Master_ADDR+0x268>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d002      	beq.n	80052c6 <I2C_Master_ADDR+0x268>
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d107      	bne.n	80052d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	e032      	b.n	8005354 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530c:	d117      	bne.n	800533e <I2C_Master_ADDR+0x2e0>
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005314:	d00b      	beq.n	800532e <I2C_Master_ADDR+0x2d0>
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	2b01      	cmp	r3, #1
 800531a:	d008      	beq.n	800532e <I2C_Master_ADDR+0x2d0>
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	2b08      	cmp	r3, #8
 8005320:	d005      	beq.n	800532e <I2C_Master_ADDR+0x2d0>
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	2b10      	cmp	r3, #16
 8005326:	d002      	beq.n	800532e <I2C_Master_ADDR+0x2d0>
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	2b20      	cmp	r3, #32
 800532c:	d107      	bne.n	800533e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800533c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800535a:	e00b      	b.n	8005374 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	e7ff      	b.n	8005374 <I2C_Master_ADDR+0x316>
 8005374:	bf00      	nop
 8005376:	3744      	adds	r7, #68	; 0x44
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d02b      	beq.n	80053f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d114      	bne.n	80053f2 <I2C_SlaveTransmit_TXE+0x72>
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b29      	cmp	r3, #41	; 0x29
 80053cc:	d111      	bne.n	80053f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2221      	movs	r2, #33	; 0x21
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2228      	movs	r2, #40	; 0x28
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fa53 	bl	8004898 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d011      	beq.n	8005430 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d02c      	beq.n	80054b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d114      	bne.n	80054b0 <I2C_SlaveReceive_RXNE+0x74>
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b2a      	cmp	r3, #42	; 0x2a
 800548a:	d111      	bne.n	80054b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2222      	movs	r2, #34	; 0x22
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2228      	movs	r2, #40	; 0x28
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff f9fe 	bl	80048ac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054b0:	bf00      	nop
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d012      	beq.n	80054f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005516:	2b28      	cmp	r3, #40	; 0x28
 8005518:	d127      	bne.n	800556a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005528:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	089b      	lsrs	r3, r3, #2
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	09db      	lsrs	r3, r3, #7
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	81bb      	strh	r3, [r7, #12]
 800554c:	e002      	b.n	8005554 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800555c:	89ba      	ldrh	r2, [r7, #12]
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff f9ac 	bl	80048c0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005568:	e008      	b.n	800557c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f06f 0202 	mvn.w	r2, #2
 8005572:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005592:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80055a4:	2300      	movs	r3, #0
 80055a6:	60bb      	str	r3, [r7, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e0:	d172      	bne.n	80056c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	2b22      	cmp	r3, #34	; 0x22
 80055e6:	d002      	beq.n	80055ee <I2C_Slave_STOPF+0x6a>
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b2a      	cmp	r3, #42	; 0x2a
 80055ec:	d135      	bne.n	800565a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 0204 	orr.w	r2, r3, #4
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005620:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	4618      	mov	r0, r3
 8005628:	f7fd fd7c 	bl	8003124 <HAL_DMA_GetState>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d049      	beq.n	80056c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	4a69      	ldr	r2, [pc, #420]	; (80057dc <I2C_Slave_STOPF+0x258>)
 8005638:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	4618      	mov	r0, r3
 8005640:	f7fd fbc4 	bl	8002dcc <HAL_DMA_Abort_IT>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d03d      	beq.n	80056c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005654:	4610      	mov	r0, r2
 8005656:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005658:	e035      	b.n	80056c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f043 0204 	orr.w	r2, r3, #4
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd fd46 	bl	8003124 <HAL_DMA_GetState>
 8005698:	4603      	mov	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	d014      	beq.n	80056c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <I2C_Slave_STOPF+0x258>)
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fd fb8e 	bl	8002dcc <HAL_DMA_Abort_IT>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056c0:	4610      	mov	r0, r2
 80056c2:	4798      	blx	r3
 80056c4:	e000      	b.n	80056c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d03e      	beq.n	8005750 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d112      	bne.n	8005706 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d112      	bne.n	800573a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f043 0204 	orr.w	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f8b3 	bl	80058c4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800575e:	e039      	b.n	80057d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b2a      	cmp	r3, #42	; 0x2a
 8005764:	d109      	bne.n	800577a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2228      	movs	r2, #40	; 0x28
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff f899 	bl	80048ac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b28      	cmp	r3, #40	; 0x28
 8005784:	d111      	bne.n	80057aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <I2C_Slave_STOPF+0x25c>)
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff f89a 	bl	80048dc <HAL_I2C_ListenCpltCallback>
}
 80057a8:	e014      	b.n	80057d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	2b22      	cmp	r3, #34	; 0x22
 80057b0:	d002      	beq.n	80057b8 <I2C_Slave_STOPF+0x234>
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b22      	cmp	r3, #34	; 0x22
 80057b6:	d10d      	bne.n	80057d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff f86c 	bl	80048ac <HAL_I2C_SlaveRxCpltCallback>
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	08006015 	.word	0x08006015
 80057e0:	ffff0000 	.word	0xffff0000

080057e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d002      	beq.n	8005806 <I2C_Slave_AF+0x22>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b20      	cmp	r3, #32
 8005804:	d129      	bne.n	800585a <I2C_Slave_AF+0x76>
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b28      	cmp	r3, #40	; 0x28
 800580a:	d126      	bne.n	800585a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <I2C_Slave_AF+0xdc>)
 8005810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005820:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800582a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff f842 	bl	80048dc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005858:	e02e      	b.n	80058b8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b21      	cmp	r3, #33	; 0x21
 800585e:	d126      	bne.n	80058ae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <I2C_Slave_AF+0xdc>)
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2221      	movs	r2, #33	; 0x21
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800588a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005894:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fe fff6 	bl	8004898 <HAL_I2C_SlaveTxCpltCallback>
}
 80058ac:	e004      	b.n	80058b8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b6:	615a      	str	r2, [r3, #20]
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	ffff0000 	.word	0xffff0000

080058c4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d10a      	bne.n	80058f6 <I2C_ITError+0x32>
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b22      	cmp	r3, #34	; 0x22
 80058e4:	d107      	bne.n	80058f6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058fc:	2b28      	cmp	r3, #40	; 0x28
 80058fe:	d107      	bne.n	8005910 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2228      	movs	r2, #40	; 0x28
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800590e:	e015      	b.n	800593c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800591a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591e:	d006      	beq.n	800592e <I2C_ITError+0x6a>
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b60      	cmp	r3, #96	; 0x60
 8005924:	d003      	beq.n	800592e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594a:	d162      	bne.n	8005a12 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d020      	beq.n	80059ac <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	4a6a      	ldr	r2, [pc, #424]	; (8005b18 <I2C_ITError+0x254>)
 8005970:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd fa28 	bl	8002dcc <HAL_DMA_Abort_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8089 	beq.w	8005a96 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059a6:	4610      	mov	r0, r2
 80059a8:	4798      	blx	r3
 80059aa:	e074      	b.n	8005a96 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	4a59      	ldr	r2, [pc, #356]	; (8005b18 <I2C_ITError+0x254>)
 80059b2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fd fa07 	bl	8002dcc <HAL_DMA_Abort_IT>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d068      	beq.n	8005a96 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d10b      	bne.n	80059ea <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	e041      	b.n	8005a96 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b60      	cmp	r3, #96	; 0x60
 8005a1c:	d125      	bne.n	8005a6a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d10b      	bne.n	8005a52 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc f916 	bl	8001c94 <HAL_I2C_AbortCpltCallback>
 8005a68:	e015      	b.n	8005a96 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d10b      	bne.n	8005a90 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fc f91f 	bl	8001cd4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10e      	bne.n	8005ac4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ad2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ada:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d113      	bne.n	8005b10 <I2C_ITError+0x24c>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b28      	cmp	r3, #40	; 0x28
 8005aec:	d110      	bne.n	8005b10 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <I2C_ITError+0x258>)
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fe fee6 	bl	80048dc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	08006015 	.word	0x08006015
 8005b1c:	ffff0000 	.word	0xffff0000

08005b20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d006      	beq.n	8005b4a <I2C_MasterRequestWrite+0x2a>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d003      	beq.n	8005b4a <I2C_MasterRequestWrite+0x2a>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b48:	d108      	bne.n	8005b5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e00b      	b.n	8005b74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	2b12      	cmp	r3, #18
 8005b62:	d107      	bne.n	8005b74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fac6 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e035      	b.n	8005c12 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bae:	d108      	bne.n	8005bc2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bb0:	897b      	ldrh	r3, [r7, #10]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bbe:	611a      	str	r2, [r3, #16]
 8005bc0:	e01b      	b.n	8005bfa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bc2:	897b      	ldrh	r3, [r7, #10]
 8005bc4:	11db      	asrs	r3, r3, #7
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 0306 	and.w	r3, r3, #6
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	f063 030f 	orn	r3, r3, #15
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	490f      	ldr	r1, [pc, #60]	; (8005c1c <I2C_MasterRequestWrite+0xfc>)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 faed 	bl	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e010      	b.n	8005c12 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bf0:	897b      	ldrh	r3, [r7, #10]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4908      	ldr	r1, [pc, #32]	; (8005c20 <I2C_MasterRequestWrite+0x100>)
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fadd 	bl	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	00010008 	.word	0x00010008
 8005c20:	00010002 	.word	0x00010002

08005c24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	461a      	mov	r2, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	817b      	strh	r3, [r7, #10]
 8005c36:	460b      	mov	r3, r1
 8005c38:	813b      	strh	r3, [r7, #8]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fa51 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e0a9      	b.n	8005de4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c90:	897b      	ldrh	r3, [r7, #10]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	4951      	ldr	r1, [pc, #324]	; (8005dec <I2C_RequestMemoryRead+0x1c8>)
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fa8a 	bl	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e096      	b.n	8005de4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cce:	6a39      	ldr	r1, [r7, #32]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 faf4 	bl	80062be <I2C_WaitOnTXEFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00d      	beq.n	8005cf8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d107      	bne.n	8005cf4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e075      	b.n	8005de4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d105      	bne.n	8005d0a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cfe:	893b      	ldrh	r3, [r7, #8]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	611a      	str	r2, [r3, #16]
 8005d08:	e021      	b.n	8005d4e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d0a:	893b      	ldrh	r3, [r7, #8]
 8005d0c:	0a1b      	lsrs	r3, r3, #8
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1a:	6a39      	ldr	r1, [r7, #32]
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 face 	bl	80062be <I2C_WaitOnTXEFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00d      	beq.n	8005d44 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d107      	bne.n	8005d40 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e04f      	b.n	8005de4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d44:	893b      	ldrh	r3, [r7, #8]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	6a39      	ldr	r1, [r7, #32]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fab3 	bl	80062be <I2C_WaitOnTXEFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d107      	bne.n	8005d76 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e034      	b.n	8005de4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f9bb 	bl	8006112 <I2C_WaitOnFlagUntilTimeout>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00c      	beq.n	8005dbc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e013      	b.n	8005de4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dbc:	897b      	ldrh	r3, [r7, #10]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	6a3a      	ldr	r2, [r7, #32]
 8005dd0:	4906      	ldr	r1, [pc, #24]	; (8005dec <I2C_RequestMemoryRead+0x1c8>)
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f9f4 	bl	80061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	00010002 	.word	0x00010002

08005df0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e22:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	2200      	movs	r2, #0
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	2200      	movs	r2, #0
 8005e42:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005e4a:	2b21      	cmp	r3, #33	; 0x21
 8005e4c:	d007      	beq.n	8005e5e <I2C_DMAXferCplt+0x6e>
 8005e4e:	7cfb      	ldrb	r3, [r7, #19]
 8005e50:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005e54:	2b22      	cmp	r3, #34	; 0x22
 8005e56:	d131      	bne.n	8005ebc <I2C_DMAXferCplt+0xcc>
 8005e58:	7cbb      	ldrb	r3, [r7, #18]
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d12e      	bne.n	8005ebc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e6c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e74:	7cfb      	ldrb	r3, [r7, #19]
 8005e76:	2b29      	cmp	r3, #41	; 0x29
 8005e78:	d10a      	bne.n	8005e90 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2221      	movs	r2, #33	; 0x21
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2228      	movs	r2, #40	; 0x28
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e88:	6978      	ldr	r0, [r7, #20]
 8005e8a:	f7fe fd05 	bl	8004898 <HAL_I2C_SlaveTxCpltCallback>
 8005e8e:	e00c      	b.n	8005eaa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e90:	7cfb      	ldrb	r3, [r7, #19]
 8005e92:	2b2a      	cmp	r3, #42	; 0x2a
 8005e94:	d109      	bne.n	8005eaa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2222      	movs	r2, #34	; 0x22
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2228      	movs	r2, #40	; 0x28
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ea4:	6978      	ldr	r0, [r7, #20]
 8005ea6:	f7fe fd01 	bl	80048ac <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005eb8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005eba:	e06a      	b.n	8005f92 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d064      	beq.n	8005f92 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d107      	bne.n	8005ee2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ef0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ef8:	d009      	beq.n	8005f0e <I2C_DMAXferCplt+0x11e>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d006      	beq.n	8005f0e <I2C_DMAXferCplt+0x11e>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f06:	d002      	beq.n	8005f0e <I2C_DMAXferCplt+0x11e>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d107      	bne.n	8005f1e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f1c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f2c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f3c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2200      	movs	r2, #0
 8005f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005f4c:	6978      	ldr	r0, [r7, #20]
 8005f4e:	f7fb fec1 	bl	8001cd4 <HAL_I2C_ErrorCallback>
}
 8005f52:	e01e      	b.n	8005f92 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d10a      	bne.n	8005f7e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2200      	movs	r2, #0
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005f76:	6978      	ldr	r0, [r7, #20]
 8005f78:	f7fb fe34 	bl	8001be4 <HAL_I2C_MemRxCpltCallback>
}
 8005f7c:	e009      	b.n	8005f92 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2212      	movs	r2, #18
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f8c:	6978      	ldr	r0, [r7, #20]
 8005f8e:	f7fb fe5b 	bl	8001c48 <HAL_I2C_MasterRxCpltCallback>
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fd f8b9 	bl	8003140 <HAL_DMA_GetError>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d01b      	beq.n	800600c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f043 0210 	orr.w	r2, r3, #16
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7fb fe64 	bl	8001cd4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	2200      	movs	r2, #0
 8006038:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	2200      	movs	r2, #0
 8006048:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606c:	2200      	movs	r2, #0
 800606e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	2200      	movs	r2, #0
 800607e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b60      	cmp	r3, #96	; 0x60
 800609a:	d10e      	bne.n	80060ba <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7fb fdee 	bl	8001c94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060b8:	e027      	b.n	800610a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060c0:	2b28      	cmp	r3, #40	; 0x28
 80060c2:	d117      	bne.n	80060f4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2228      	movs	r2, #40	; 0x28
 80060ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060f2:	e007      	b.n	8006104 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7fb fde5 	bl	8001cd4 <HAL_I2C_ErrorCallback>
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	60b9      	str	r1, [r7, #8]
 800611c:	603b      	str	r3, [r7, #0]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006122:	e025      	b.n	8006170 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612a:	d021      	beq.n	8006170 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612c:	f7fc fc08 	bl	8002940 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d302      	bcc.n	8006142 <I2C_WaitOnFlagUntilTimeout+0x30>
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d116      	bne.n	8006170 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e023      	b.n	80061b8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	0c1b      	lsrs	r3, r3, #16
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b01      	cmp	r3, #1
 8006178:	d10d      	bne.n	8006196 <I2C_WaitOnFlagUntilTimeout+0x84>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	43da      	mvns	r2, r3
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4013      	ands	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	bf0c      	ite	eq
 800618c:	2301      	moveq	r3, #1
 800618e:	2300      	movne	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	e00c      	b.n	80061b0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	43da      	mvns	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4013      	ands	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bf0c      	ite	eq
 80061a8:	2301      	moveq	r3, #1
 80061aa:	2300      	movne	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	79fb      	ldrb	r3, [r7, #7]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d0b6      	beq.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061ce:	e051      	b.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061de:	d123      	bne.n	8006228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	f043 0204 	orr.w	r2, r3, #4
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e046      	b.n	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d021      	beq.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006230:	f7fc fb86 	bl	8002940 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d302      	bcc.n	8006246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d116      	bne.n	8006274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	f043 0220 	orr.w	r2, r3, #32
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e020      	b.n	80062b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	0c1b      	lsrs	r3, r3, #16
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d10c      	bne.n	8006298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	43da      	mvns	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	bf14      	ite	ne
 8006290:	2301      	movne	r3, #1
 8006292:	2300      	moveq	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	e00b      	b.n	80062b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	43da      	mvns	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bf14      	ite	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	2300      	moveq	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d18d      	bne.n	80061d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ca:	e02d      	b.n	8006328 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f8ce 	bl	800646e <I2C_IsAcknowledgeFailed>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e02d      	b.n	8006338 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e2:	d021      	beq.n	8006328 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e4:	f7fc fb2c 	bl	8002940 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d302      	bcc.n	80062fa <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d116      	bne.n	8006328 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	f043 0220 	orr.w	r2, r3, #32
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e007      	b.n	8006338 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006332:	2b80      	cmp	r3, #128	; 0x80
 8006334:	d1ca      	bne.n	80062cc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800634c:	e02d      	b.n	80063aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f88d 	bl	800646e <I2C_IsAcknowledgeFailed>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e02d      	b.n	80063ba <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d021      	beq.n	80063aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fc faeb 	bl	8002940 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d116      	bne.n	80063aa <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f043 0220 	orr.w	r2, r3, #32
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e007      	b.n	80063ba <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d1ca      	bne.n	800634e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063ce:	e042      	b.n	8006456 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d119      	bne.n	8006412 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f06f 0210 	mvn.w	r2, #16
 80063e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e029      	b.n	8006466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006412:	f7fc fa95 	bl	8002940 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d116      	bne.n	8006456 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e007      	b.n	8006466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006460:	2b40      	cmp	r3, #64	; 0x40
 8006462:	d1b5      	bne.n	80063d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	d11b      	bne.n	80064be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800648e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f043 0204 	orr.w	r2, r3, #4
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80064dc:	d103      	bne.n	80064e6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80064e4:	e007      	b.n	80064f6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80064ee:	d102      	bne.n	80064f6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2208      	movs	r2, #8
 80064f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006504:	b08f      	sub	sp, #60	; 0x3c
 8006506:	af0a      	add	r7, sp, #40	; 0x28
 8006508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e10f      	b.n	8006734 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f006 fa38 	bl	800c9a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2203      	movs	r2, #3
 8006538:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f003 fa6d 	bl	8009a32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	603b      	str	r3, [r7, #0]
 800655e:	687e      	ldr	r6, [r7, #4]
 8006560:	466d      	mov	r5, sp
 8006562:	f106 0410 	add.w	r4, r6, #16
 8006566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800656a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800656c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800656e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006572:	e885 0003 	stmia.w	r5, {r0, r1}
 8006576:	1d33      	adds	r3, r6, #4
 8006578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800657a:	6838      	ldr	r0, [r7, #0]
 800657c:	f003 f944 	bl	8009808 <USB_CoreInit>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e0d0      	b.n	8006734 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f003 fa5b 	bl	8009a54 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
 80065a2:	e04a      	b.n	800663a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80065a4:	7bfa      	ldrb	r2, [r7, #15]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	333d      	adds	r3, #61	; 0x3d
 80065b4:	2201      	movs	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80065b8:	7bfa      	ldrb	r2, [r7, #15]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	1a9b      	subs	r3, r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	333c      	adds	r3, #60	; 0x3c
 80065c8:	7bfa      	ldrb	r2, [r7, #15]
 80065ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80065cc:	7bfa      	ldrb	r2, [r7, #15]
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	b298      	uxth	r0, r3
 80065d2:	6879      	ldr	r1, [r7, #4]
 80065d4:	4613      	mov	r3, r2
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	440b      	add	r3, r1
 80065de:	3342      	adds	r3, #66	; 0x42
 80065e0:	4602      	mov	r2, r0
 80065e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80065e4:	7bfa      	ldrb	r2, [r7, #15]
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	4613      	mov	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	333f      	adds	r3, #63	; 0x3f
 80065f4:	2200      	movs	r2, #0
 80065f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065f8:	7bfa      	ldrb	r2, [r7, #15]
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	1a9b      	subs	r3, r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	3344      	adds	r3, #68	; 0x44
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800660c:	7bfa      	ldrb	r2, [r7, #15]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	3348      	adds	r3, #72	; 0x48
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006620:	7bfa      	ldrb	r2, [r7, #15]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	3350      	adds	r3, #80	; 0x50
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	3301      	adds	r3, #1
 8006638:	73fb      	strb	r3, [r7, #15]
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	429a      	cmp	r2, r3
 8006642:	d3af      	bcc.n	80065a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
 8006648:	e044      	b.n	80066d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800664a:	7bfa      	ldrb	r2, [r7, #15]
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006660:	7bfa      	ldrb	r2, [r7, #15]
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006676:	7bfa      	ldrb	r2, [r7, #15]
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4613      	mov	r3, r2
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	440b      	add	r3, r1
 8006684:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800668c:	7bfa      	ldrb	r2, [r7, #15]
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80066a2:	7bfa      	ldrb	r2, [r7, #15]
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80066b8:	7bfa      	ldrb	r2, [r7, #15]
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	3301      	adds	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	7bfa      	ldrb	r2, [r7, #15]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d3b5      	bcc.n	800664a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	687e      	ldr	r6, [r7, #4]
 80066e6:	466d      	mov	r5, sp
 80066e8:	f106 0410 	add.w	r4, r6, #16
 80066ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80066f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80066f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80066fc:	1d33      	adds	r3, r6, #4
 80066fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006700:	6838      	ldr	r0, [r7, #0]
 8006702:	f003 f9d1 	bl	8009aa8 <USB_DevInit>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e00d      	b.n	8006734 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f004 fa10 	bl	800ab52 <USB_DevDisconnect>

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800673c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_PCD_Start+0x1c>
 8006754:	2302      	movs	r3, #2
 8006756:	e020      	b.n	800679a <HAL_PCD_Start+0x5e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	2b01      	cmp	r3, #1
 8006766:	d109      	bne.n	800677c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800676c:	2b01      	cmp	r3, #1
 800676e:	d005      	beq.n	800677c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f004 f9ce 	bl	800ab22 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f003 f940 	bl	8009a10 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80067a2:	b590      	push	{r4, r7, lr}
 80067a4:	b08d      	sub	sp, #52	; 0x34
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f004 fa75 	bl	800aca8 <USB_GetMode>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 839d 	bne.w	8006f00 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f004 f9d9 	bl	800ab82 <USB_ReadInterrupts>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 8393 	beq.w	8006efe <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f004 f9d0 	bl	800ab82 <USB_ReadInterrupts>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d107      	bne.n	80067fc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695a      	ldr	r2, [r3, #20]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f002 0202 	and.w	r2, r2, #2
 80067fa:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f004 f9be 	bl	800ab82 <USB_ReadInterrupts>
 8006806:	4603      	mov	r3, r0
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b10      	cmp	r3, #16
 800680e:	d161      	bne.n	80068d4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0210 	bic.w	r2, r2, #16
 800681e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	f003 020f 	and.w	r2, r3, #15
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	4413      	add	r3, r2
 800683c:	3304      	adds	r3, #4
 800683e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	0c5b      	lsrs	r3, r3, #17
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	2b02      	cmp	r3, #2
 800684a:	d124      	bne.n	8006896 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006852:	4013      	ands	r3, r2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d035      	beq.n	80068c4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6a38      	ldr	r0, [r7, #32]
 800686c:	f004 f836 	bl	800a8dc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	091b      	lsrs	r3, r3, #4
 8006878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800687c:	441a      	add	r2, r3
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800688e:	441a      	add	r2, r3
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	619a      	str	r2, [r3, #24]
 8006894:	e016      	b.n	80068c4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	0c5b      	lsrs	r3, r3, #17
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	2b06      	cmp	r3, #6
 80068a0:	d110      	bne.n	80068c4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068a8:	2208      	movs	r2, #8
 80068aa:	4619      	mov	r1, r3
 80068ac:	6a38      	ldr	r0, [r7, #32]
 80068ae:	f004 f815 	bl	800a8dc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068be:	441a      	add	r2, r3
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0210 	orr.w	r2, r2, #16
 80068d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f004 f952 	bl	800ab82 <USB_ReadInterrupts>
 80068de:	4603      	mov	r3, r0
 80068e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068e8:	d16e      	bne.n	80069c8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f004 f958 	bl	800aba8 <USB_ReadDevAllOutEpInterrupt>
 80068f8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80068fa:	e062      	b.n	80069c2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	d057      	beq.n	80069b6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	4611      	mov	r1, r2
 8006910:	4618      	mov	r0, r3
 8006912:	f004 f97d 	bl	800ac10 <USB_ReadDevOutEPInterrupt>
 8006916:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00c      	beq.n	800693c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	461a      	mov	r2, r3
 8006930:	2301      	movs	r3, #1
 8006932:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fdb0 	bl	800749c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	461a      	mov	r2, r3
 8006954:	2308      	movs	r3, #8
 8006956:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 feaa 	bl	80076b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b00      	cmp	r3, #0
 8006968:	d008      	beq.n	800697c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006976:	461a      	mov	r2, r3
 8006978:	2310      	movs	r3, #16
 800697a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	2320      	movs	r3, #32
 8006996:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	461a      	mov	r2, r3
 80069b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	3301      	adds	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d199      	bne.n	80068fc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f004 f8d8 	bl	800ab82 <USB_ReadInterrupts>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069dc:	f040 80c0 	bne.w	8006b60 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f004 f8f9 	bl	800abdc <USB_ReadDevAllInEpInterrupt>
 80069ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80069f0:	e0b2      	b.n	8006b58 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80a7 	beq.w	8006b4c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f004 f91f 	bl	800ac4c <USB_ReadDevInEPInterrupt>
 8006a0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d057      	beq.n	8006aca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	2201      	movs	r2, #1
 8006a22:	fa02 f303 	lsl.w	r3, r2, r3
 8006a26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	43db      	mvns	r3, r3
 8006a34:	69f9      	ldr	r1, [r7, #28]
 8006a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d132      	bne.n	8006abe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	440b      	add	r3, r1
 8006a66:	3348      	adds	r3, #72	; 0x48
 8006a68:	6819      	ldr	r1, [r3, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6e:	4613      	mov	r3, r2
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4403      	add	r3, r0
 8006a78:	3344      	adds	r3, #68	; 0x44
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4419      	add	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a82:	4613      	mov	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4403      	add	r3, r0
 8006a8c:	3348      	adds	r3, #72	; 0x48
 8006a8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d113      	bne.n	8006abe <HAL_PCD_IRQHandler+0x31c>
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3350      	adds	r3, #80	; 0x50
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6818      	ldr	r0, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2101      	movs	r1, #1
 8006aba:	f004 f927 	bl	800ad0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f005 ffee 	bl	800caa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	461a      	mov	r2, r3
 8006afe:	2310      	movs	r3, #16
 8006b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2340      	movs	r3, #64	; 0x40
 8006b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d008      	beq.n	8006b3a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	461a      	mov	r2, r3
 8006b36:	2302      	movs	r3, #2
 8006b38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fc1b 	bl	8007382 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	3301      	adds	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f47f af49 	bne.w	80069f2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f004 f80c 	bl	800ab82 <USB_ReadInterrupts>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b74:	d122      	bne.n	8006bbc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b84:	f023 0301 	bic.w	r3, r3, #1
 8006b88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d108      	bne.n	8006ba6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fe26 	bl	80077f0 <HAL_PCDEx_LPM_Callback>
 8006ba4:	e002      	b.n	8006bac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f005 fff4 	bl	800cb94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f003 ffde 	bl	800ab82 <USB_ReadInterrupts>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd0:	d112      	bne.n	8006bf8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d102      	bne.n	8006be8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f005 ffb0 	bl	800cb48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006bf6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f003 ffc0 	bl	800ab82 <USB_ReadInterrupts>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	f040 80c7 	bne.w	8006d9e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1e:	f023 0301 	bic.w	r3, r3, #1
 8006c22:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2110      	movs	r1, #16
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f003 f8a0 	bl	8009d70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c30:	2300      	movs	r3, #0
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c34:	e056      	b.n	8006ce4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c42:	461a      	mov	r2, r3
 8006c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c48:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c68:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c96:	461a      	mov	r2, r3
 8006c98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c9c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cae:	0151      	lsls	r1, r2, #5
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	440a      	add	r2, r1
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cdc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d3a3      	bcc.n	8006c36 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cfc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006d00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d016      	beq.n	8006d38 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d1a:	f043 030b 	orr.w	r3, r3, #11
 8006d1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2a:	69fa      	ldr	r2, [r7, #28]
 8006d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d30:	f043 030b 	orr.w	r3, r3, #11
 8006d34:	6453      	str	r3, [r2, #68]	; 0x44
 8006d36:	e015      	b.n	8006d64 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d4a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006d4e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f043 030b 	orr.w	r3, r3, #11
 8006d62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f003 ffbf 	bl	800ad0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695a      	ldr	r2, [r3, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f003 feed 	bl	800ab82 <USB_ReadInterrupts>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db2:	d124      	bne.n	8006dfe <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f003 ff83 	bl	800acc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f003 f835 	bl	8009e32 <USB_GetDevSpeed>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681c      	ldr	r4, [r3, #0]
 8006dd4:	f001 f944 	bl	8008060 <HAL_RCC_GetHCLKFreq>
 8006dd8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	4620      	mov	r0, r4
 8006de4:	f002 fd72 	bl	80098cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f005 fe84 	bl	800caf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f003 febd 	bl	800ab82 <USB_ReadInterrupts>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d10a      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f005 fe61 	bl	800cada <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f002 0208 	and.w	r2, r2, #8
 8006e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f003 fea8 	bl	800ab82 <USB_ReadInterrupts>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3c:	d10f      	bne.n	8006e5e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f005 fec3 	bl	800cbd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f003 fe8d 	bl	800ab82 <USB_ReadInterrupts>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e72:	d10f      	bne.n	8006e94 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f005 fe96 	bl	800cbb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695a      	ldr	r2, [r3, #20]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f003 fe72 	bl	800ab82 <USB_ReadInterrupts>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea8:	d10a      	bne.n	8006ec0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f005 fea4 	bl	800cbf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f003 fe5c 	bl	800ab82 <USB_ReadInterrupts>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d115      	bne.n	8006f00 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f005 fe94 	bl	800cc14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6859      	ldr	r1, [r3, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
 8006efc:	e000      	b.n	8006f00 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006efe:	bf00      	nop
    }
  }
}
 8006f00:	3734      	adds	r7, #52	; 0x34
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd90      	pop	{r4, r7, pc}

08006f06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_PCD_SetAddress+0x1a>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e013      	b.n	8006f48 <HAL_PCD_SetAddress+0x42>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	4611      	mov	r1, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f003 fdcc 	bl	800aad6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	4608      	mov	r0, r1
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	70fb      	strb	r3, [r7, #3]
 8006f62:	460b      	mov	r3, r1
 8006f64:	803b      	strh	r3, [r7, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da0f      	bge.n	8006f96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	3338      	adds	r3, #56	; 0x38
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4413      	add	r3, r2
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2201      	movs	r2, #1
 8006f92:	705a      	strb	r2, [r3, #1]
 8006f94:	e00f      	b.n	8006fb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	f003 020f 	and.w	r2, r3, #15
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	4413      	add	r3, r2
 8006fac:	3304      	adds	r3, #4
 8006fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006fc2:	883a      	ldrh	r2, [r7, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	78ba      	ldrb	r2, [r7, #2]
 8006fcc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006fe0:	78bb      	ldrb	r3, [r7, #2]
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d102      	bne.n	8006fec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_PCD_EP_Open+0xaa>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e00e      	b.n	8007018 <HAL_PCD_EP_Open+0xc8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	4618      	mov	r0, r3
 800700a:	f002 ff37 	bl	8009e7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007016:	7afb      	ldrb	r3, [r7, #11]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800702c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007030:	2b00      	cmp	r3, #0
 8007032:	da0f      	bge.n	8007054 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	f003 020f 	and.w	r2, r3, #15
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	3338      	adds	r3, #56	; 0x38
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	3304      	adds	r3, #4
 800704a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	705a      	strb	r2, [r3, #1]
 8007052:	e00f      	b.n	8007074 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 020f 	and.w	r2, r3, #15
 800705a:	4613      	mov	r3, r2
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	1a9b      	subs	r3, r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	3304      	adds	r3, #4
 800706c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	b2da      	uxtb	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_PCD_EP_Close+0x6e>
 800708a:	2302      	movs	r3, #2
 800708c:	e00e      	b.n	80070ac <HAL_PCD_EP_Close+0x8c>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	4618      	mov	r0, r3
 800709e:	f002 ff75 	bl	8009f8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	607a      	str	r2, [r7, #4]
 80070be:	603b      	str	r3, [r7, #0]
 80070c0:	460b      	mov	r3, r1
 80070c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	f003 020f 	and.w	r2, r3, #15
 80070ca:	4613      	mov	r3, r2
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	1a9b      	subs	r3, r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	3304      	adds	r3, #4
 80070dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2200      	movs	r2, #0
 80070ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2200      	movs	r2, #0
 80070f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d102      	bne.n	8007110 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007110:	7afb      	ldrb	r3, [r7, #11]
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	6979      	ldr	r1, [r7, #20]
 8007128:	f003 fa50 	bl	800a5cc <USB_EP0StartXfer>
 800712c:	e008      	b.n	8007140 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	6979      	ldr	r1, [r7, #20]
 800713c:	f003 f802 	bl	800a144 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	f003 020f 	and.w	r2, r3, #15
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	1a9b      	subs	r3, r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	440b      	add	r3, r1
 8007168:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800716c:	681b      	ldr	r3, [r3, #0]
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
 8007186:	460b      	mov	r3, r1
 8007188:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718a:	7afb      	ldrb	r3, [r7, #11]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	4613      	mov	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	3338      	adds	r3, #56	; 0x38
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4413      	add	r3, r2
 800719e:	3304      	adds	r3, #4
 80071a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2200      	movs	r2, #0
 80071b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2201      	movs	r2, #1
 80071b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071ba:	7afb      	ldrb	r3, [r7, #11]
 80071bc:	f003 030f 	and.w	r3, r3, #15
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d102      	bne.n	80071d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	6979      	ldr	r1, [r7, #20]
 80071ec:	f003 f9ee 	bl	800a5cc <USB_EP0StartXfer>
 80071f0:	e008      	b.n	8007204 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	6979      	ldr	r1, [r7, #20]
 8007200:	f002 ffa0 	bl	800a144 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	429a      	cmp	r2, r3
 8007226:	d901      	bls.n	800722c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e050      	b.n	80072ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800722c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007230:	2b00      	cmp	r3, #0
 8007232:	da0f      	bge.n	8007254 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	f003 020f 	and.w	r2, r3, #15
 800723a:	4613      	mov	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	3338      	adds	r3, #56	; 0x38
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	4413      	add	r3, r2
 8007248:	3304      	adds	r3, #4
 800724a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	705a      	strb	r2, [r3, #1]
 8007252:	e00d      	b.n	8007270 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007254:	78fa      	ldrb	r2, [r7, #3]
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4413      	add	r3, r2
 8007266:	3304      	adds	r3, #4
 8007268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2201      	movs	r2, #1
 8007274:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	b2da      	uxtb	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_PCD_EP_SetStall+0x82>
 800728c:	2302      	movs	r3, #2
 800728e:	e01e      	b.n	80072ce <HAL_PCD_EP_SetStall+0xc0>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68f9      	ldr	r1, [r7, #12]
 800729e:	4618      	mov	r0, r3
 80072a0:	f003 fb45 	bl	800a92e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	b2d9      	uxtb	r1, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072be:	461a      	mov	r2, r3
 80072c0:	f003 fd24 	bl	800ad0c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	f003 020f 	and.w	r2, r3, #15
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d901      	bls.n	80072f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e042      	b.n	800737a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da0f      	bge.n	800731c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072fc:	78fb      	ldrb	r3, [r7, #3]
 80072fe:	f003 020f 	and.w	r2, r3, #15
 8007302:	4613      	mov	r3, r2
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	1a9b      	subs	r3, r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	3338      	adds	r3, #56	; 0x38
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	4413      	add	r3, r2
 8007310:	3304      	adds	r3, #4
 8007312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	705a      	strb	r2, [r3, #1]
 800731a:	e00f      	b.n	800733c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	f003 020f 	and.w	r2, r3, #15
 8007322:	4613      	mov	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	4413      	add	r3, r2
 8007332:	3304      	adds	r3, #4
 8007334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	f003 030f 	and.w	r3, r3, #15
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007354:	2b01      	cmp	r3, #1
 8007356:	d101      	bne.n	800735c <HAL_PCD_EP_ClrStall+0x86>
 8007358:	2302      	movs	r3, #2
 800735a:	e00e      	b.n	800737a <HAL_PCD_EP_ClrStall+0xa4>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68f9      	ldr	r1, [r7, #12]
 800736a:	4618      	mov	r0, r3
 800736c:	f003 fb4d 	bl	800aa0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b08a      	sub	sp, #40	; 0x28
 8007386:	af02      	add	r7, sp, #8
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	1a9b      	subs	r3, r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	3338      	adds	r3, #56	; 0x38
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	4413      	add	r3, r2
 80073a6:	3304      	adds	r3, #4
 80073a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d901      	bls.n	80073ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e06c      	b.n	8007494 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	695a      	ldr	r2, [r3, #20]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d902      	bls.n	80073d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	3303      	adds	r3, #3
 80073da:	089b      	lsrs	r3, r3, #2
 80073dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80073de:	e02b      	b.n	8007438 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	695a      	ldr	r2, [r3, #20]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d902      	bls.n	80073fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	3303      	adds	r3, #3
 8007400:	089b      	lsrs	r3, r3, #2
 8007402:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68d9      	ldr	r1, [r3, #12]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	b2da      	uxtb	r2, r3
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007414:	b2db      	uxtb	r3, r3
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4603      	mov	r3, r0
 800741a:	6978      	ldr	r0, [r7, #20]
 800741c:	f003 fa29 	bl	800a872 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	441a      	add	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	441a      	add	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	b29b      	uxth	r3, r3
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	429a      	cmp	r2, r3
 800744c:	d809      	bhi.n	8007462 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	699a      	ldr	r2, [r3, #24]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007456:	429a      	cmp	r2, r3
 8007458:	d203      	bcs.n	8007462 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1be      	bne.n	80073e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	695a      	ldr	r2, [r3, #20]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	429a      	cmp	r2, r3
 800746c:	d811      	bhi.n	8007492 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	2201      	movs	r2, #1
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	43db      	mvns	r3, r3
 8007488:	6939      	ldr	r1, [r7, #16]
 800748a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800748e:	4013      	ands	r3, r2
 8007490:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	333c      	adds	r3, #60	; 0x3c
 80074b4:	3304      	adds	r3, #4
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	f040 80a0 	bne.w	8007614 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d015      	beq.n	800750a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a72      	ldr	r2, [pc, #456]	; (80076ac <PCD_EP_OutXfrComplete_int+0x210>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	f240 80dd 	bls.w	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80d7 	beq.w	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	461a      	mov	r2, r3
 8007502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007506:	6093      	str	r3, [r2, #8]
 8007508:	e0cb      	b.n	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	461a      	mov	r2, r3
 8007522:	2320      	movs	r3, #32
 8007524:	6093      	str	r3, [r2, #8]
 8007526:	e0bc      	b.n	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 80b7 	bne.w	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a5d      	ldr	r2, [pc, #372]	; (80076ac <PCD_EP_OutXfrComplete_int+0x210>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d90f      	bls.n	800755c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	461a      	mov	r2, r3
 8007554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007558:	6093      	str	r3, [r2, #8]
 800755a:	e0a2      	b.n	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800755c:	6879      	ldr	r1, [r7, #4]
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800756e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	0159      	lsls	r1, r3, #5
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	440b      	add	r3, r1
 8007578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007582:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4403      	add	r3, r0
 8007592:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007596:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075aa:	6819      	ldr	r1, [r3, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	1a9b      	subs	r3, r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4403      	add	r3, r0
 80075ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4419      	add	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	1a9b      	subs	r3, r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4403      	add	r3, r0
 80075d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075d4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d114      	bne.n	8007606 <PCD_EP_OutXfrComplete_int+0x16a>
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d108      	bne.n	8007606 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075fe:	461a      	mov	r2, r3
 8007600:	2101      	movs	r1, #1
 8007602:	f003 fb83 	bl	800ad0c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f005 fa2f 	bl	800ca70 <HAL_PCD_DataOutStageCallback>
 8007612:	e046      	b.n	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a26      	ldr	r2, [pc, #152]	; (80076b0 <PCD_EP_OutXfrComplete_int+0x214>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d124      	bne.n	8007666 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007632:	461a      	mov	r2, r3
 8007634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007638:	6093      	str	r3, [r2, #8]
 800763a:	e032      	b.n	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d008      	beq.n	8007658 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007652:	461a      	mov	r2, r3
 8007654:	2320      	movs	r3, #32
 8007656:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f005 fa06 	bl	800ca70 <HAL_PCD_DataOutStageCallback>
 8007664:	e01d      	b.n	80076a2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d114      	bne.n	8007696 <PCD_EP_OutXfrComplete_int+0x1fa>
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	4613      	mov	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d108      	bne.n	8007696 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800768e:	461a      	mov	r2, r3
 8007690:	2100      	movs	r1, #0
 8007692:	f003 fb3b 	bl	800ad0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f005 f9e7 	bl	800ca70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	4f54300a 	.word	0x4f54300a
 80076b0:	4f54310a 	.word	0x4f54310a

080076b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	333c      	adds	r3, #60	; 0x3c
 80076cc:	3304      	adds	r3, #4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <PCD_EP_OutSetupPacket_int+0x88>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d90e      	bls.n	8007708 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	461a      	mov	r2, r3
 8007702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007706:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f005 f99f 	bl	800ca4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <PCD_EP_OutSetupPacket_int+0x88>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d90c      	bls.n	8007730 <PCD_EP_OutSetupPacket_int+0x7c>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d108      	bne.n	8007730 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007728:	461a      	mov	r2, r3
 800772a:	2101      	movs	r1, #1
 800772c:	f003 faee 	bl	800ad0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	4f54300a 	.word	0x4f54300a

08007740 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
 800774c:	4613      	mov	r3, r2
 800774e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d107      	bne.n	800776e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800775e:	883b      	ldrh	r3, [r7, #0]
 8007760:	0419      	lsls	r1, r3, #16
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	430a      	orrs	r2, r1
 800776a:	629a      	str	r2, [r3, #40]	; 0x28
 800776c:	e028      	b.n	80077c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	0c1b      	lsrs	r3, r3, #16
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4413      	add	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]
 8007780:	e00d      	b.n	800779e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	3340      	adds	r3, #64	; 0x40
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	0c1b      	lsrs	r3, r3, #16
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	4413      	add	r3, r2
 8007796:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	3301      	adds	r3, #1
 800779c:	73fb      	strb	r3, [r7, #15]
 800779e:	7bfa      	ldrb	r2, [r7, #15]
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d3ec      	bcc.n	8007782 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80077a8:	883b      	ldrh	r3, [r7, #0]
 80077aa:	0418      	lsls	r0, r3, #16
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6819      	ldr	r1, [r3, #0]
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	4302      	orrs	r2, r0
 80077b8:	3340      	adds	r3, #64	; 0x40
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	887a      	ldrh	r2, [r7, #2]
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e25b      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d075      	beq.n	8007912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007826:	4ba3      	ldr	r3, [pc, #652]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 030c 	and.w	r3, r3, #12
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00c      	beq.n	800784c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007832:	4ba0      	ldr	r3, [pc, #640]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800783a:	2b08      	cmp	r3, #8
 800783c:	d112      	bne.n	8007864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800783e:	4b9d      	ldr	r3, [pc, #628]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800784a:	d10b      	bne.n	8007864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800784c:	4b99      	ldr	r3, [pc, #612]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d05b      	beq.n	8007910 <HAL_RCC_OscConfig+0x108>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d157      	bne.n	8007910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e236      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786c:	d106      	bne.n	800787c <HAL_RCC_OscConfig+0x74>
 800786e:	4b91      	ldr	r3, [pc, #580]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a90      	ldr	r2, [pc, #576]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	e01d      	b.n	80078b8 <HAL_RCC_OscConfig+0xb0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007884:	d10c      	bne.n	80078a0 <HAL_RCC_OscConfig+0x98>
 8007886:	4b8b      	ldr	r3, [pc, #556]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a8a      	ldr	r2, [pc, #552]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 800788c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	4b88      	ldr	r3, [pc, #544]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a87      	ldr	r2, [pc, #540]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	e00b      	b.n	80078b8 <HAL_RCC_OscConfig+0xb0>
 80078a0:	4b84      	ldr	r3, [pc, #528]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a83      	ldr	r2, [pc, #524]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80078a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	4b81      	ldr	r3, [pc, #516]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a80      	ldr	r2, [pc, #512]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80078b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d013      	beq.n	80078e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c0:	f7fb f83e 	bl	8002940 <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c8:	f7fb f83a 	bl	8002940 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b64      	cmp	r3, #100	; 0x64
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e1fb      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078da:	4b76      	ldr	r3, [pc, #472]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0xc0>
 80078e6:	e014      	b.n	8007912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e8:	f7fb f82a 	bl	8002940 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078f0:	f7fb f826 	bl	8002940 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	; 0x64
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e1e7      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007902:	4b6c      	ldr	r3, [pc, #432]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f0      	bne.n	80078f0 <HAL_RCC_OscConfig+0xe8>
 800790e:	e000      	b.n	8007912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d063      	beq.n	80079e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800791e:	4b65      	ldr	r3, [pc, #404]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 030c 	and.w	r3, r3, #12
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00b      	beq.n	8007942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800792a:	4b62      	ldr	r3, [pc, #392]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007932:	2b08      	cmp	r3, #8
 8007934:	d11c      	bne.n	8007970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007936:	4b5f      	ldr	r3, [pc, #380]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d116      	bne.n	8007970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007942:	4b5c      	ldr	r3, [pc, #368]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <HAL_RCC_OscConfig+0x152>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d001      	beq.n	800795a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e1bb      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800795a:	4b56      	ldr	r3, [pc, #344]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	4952      	ldr	r1, [pc, #328]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 800796a:	4313      	orrs	r3, r2
 800796c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800796e:	e03a      	b.n	80079e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d020      	beq.n	80079ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007978:	4b4f      	ldr	r3, [pc, #316]	; (8007ab8 <HAL_RCC_OscConfig+0x2b0>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800797e:	f7fa ffdf 	bl	8002940 <HAL_GetTick>
 8007982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007984:	e008      	b.n	8007998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007986:	f7fa ffdb 	bl	8002940 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e19c      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007998:	4b46      	ldr	r3, [pc, #280]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0f0      	beq.n	8007986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079a4:	4b43      	ldr	r3, [pc, #268]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	4940      	ldr	r1, [pc, #256]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	600b      	str	r3, [r1, #0]
 80079b8:	e015      	b.n	80079e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ba:	4b3f      	ldr	r3, [pc, #252]	; (8007ab8 <HAL_RCC_OscConfig+0x2b0>)
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c0:	f7fa ffbe 	bl	8002940 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079c8:	f7fa ffba 	bl	8002940 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e17b      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079da:	4b36      	ldr	r3, [pc, #216]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f0      	bne.n	80079c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d030      	beq.n	8007a54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079fa:	4b30      	ldr	r3, [pc, #192]	; (8007abc <HAL_RCC_OscConfig+0x2b4>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a00:	f7fa ff9e 	bl	8002940 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a08:	f7fa ff9a 	bl	8002940 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e15b      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a1a:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCC_OscConfig+0x200>
 8007a26:	e015      	b.n	8007a54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a28:	4b24      	ldr	r3, [pc, #144]	; (8007abc <HAL_RCC_OscConfig+0x2b4>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a2e:	f7fa ff87 	bl	8002940 <HAL_GetTick>
 8007a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a34:	e008      	b.n	8007a48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a36:	f7fa ff83 	bl	8002940 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d901      	bls.n	8007a48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e144      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a48:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1f0      	bne.n	8007a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80a0 	beq.w	8007ba2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a66:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10f      	bne.n	8007a92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a72:	2300      	movs	r3, #0
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	4a0e      	ldr	r2, [pc, #56]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a80:	6413      	str	r3, [r2, #64]	; 0x40
 8007a82:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <HAL_RCC_OscConfig+0x2ac>)
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8a:	60bb      	str	r3, [r7, #8]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <HAL_RCC_OscConfig+0x2b8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d121      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a9e:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <HAL_RCC_OscConfig+0x2b8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a07      	ldr	r2, [pc, #28]	; (8007ac0 <HAL_RCC_OscConfig+0x2b8>)
 8007aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007aaa:	f7fa ff49 	bl	8002940 <HAL_GetTick>
 8007aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ab0:	e011      	b.n	8007ad6 <HAL_RCC_OscConfig+0x2ce>
 8007ab2:	bf00      	nop
 8007ab4:	40023800 	.word	0x40023800
 8007ab8:	42470000 	.word	0x42470000
 8007abc:	42470e80 	.word	0x42470e80
 8007ac0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac4:	f7fa ff3c 	bl	8002940 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e0fd      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ad6:	4b81      	ldr	r3, [pc, #516]	; (8007cdc <HAL_RCC_OscConfig+0x4d4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0f0      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d106      	bne.n	8007af8 <HAL_RCC_OscConfig+0x2f0>
 8007aea:	4b7d      	ldr	r3, [pc, #500]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aee:	4a7c      	ldr	r2, [pc, #496]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007af0:	f043 0301 	orr.w	r3, r3, #1
 8007af4:	6713      	str	r3, [r2, #112]	; 0x70
 8007af6:	e01c      	b.n	8007b32 <HAL_RCC_OscConfig+0x32a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b05      	cmp	r3, #5
 8007afe:	d10c      	bne.n	8007b1a <HAL_RCC_OscConfig+0x312>
 8007b00:	4b77      	ldr	r3, [pc, #476]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	4a76      	ldr	r2, [pc, #472]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b06:	f043 0304 	orr.w	r3, r3, #4
 8007b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b0c:	4b74      	ldr	r3, [pc, #464]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	4a73      	ldr	r2, [pc, #460]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6713      	str	r3, [r2, #112]	; 0x70
 8007b18:	e00b      	b.n	8007b32 <HAL_RCC_OscConfig+0x32a>
 8007b1a:	4b71      	ldr	r3, [pc, #452]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	4a70      	ldr	r2, [pc, #448]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b20:	f023 0301 	bic.w	r3, r3, #1
 8007b24:	6713      	str	r3, [r2, #112]	; 0x70
 8007b26:	4b6e      	ldr	r3, [pc, #440]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	4a6d      	ldr	r2, [pc, #436]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b2c:	f023 0304 	bic.w	r3, r3, #4
 8007b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d015      	beq.n	8007b66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b3a:	f7fa ff01 	bl	8002940 <HAL_GetTick>
 8007b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b40:	e00a      	b.n	8007b58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b42:	f7fa fefd 	bl	8002940 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e0bc      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b58:	4b61      	ldr	r3, [pc, #388]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0ee      	beq.n	8007b42 <HAL_RCC_OscConfig+0x33a>
 8007b64:	e014      	b.n	8007b90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b66:	f7fa feeb 	bl	8002940 <HAL_GetTick>
 8007b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b6c:	e00a      	b.n	8007b84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b6e:	f7fa fee7 	bl	8002940 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d901      	bls.n	8007b84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e0a6      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b84:	4b56      	ldr	r3, [pc, #344]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1ee      	bne.n	8007b6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d105      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b96:	4b52      	ldr	r3, [pc, #328]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	4a51      	ldr	r2, [pc, #324]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8092 	beq.w	8007cd0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bac:	4b4c      	ldr	r3, [pc, #304]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 030c 	and.w	r3, r3, #12
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d05c      	beq.n	8007c72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d141      	bne.n	8007c44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc0:	4b48      	ldr	r3, [pc, #288]	; (8007ce4 <HAL_RCC_OscConfig+0x4dc>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bc6:	f7fa febb 	bl	8002940 <HAL_GetTick>
 8007bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bcc:	e008      	b.n	8007be0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bce:	f7fa feb7 	bl	8002940 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e078      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007be0:	4b3f      	ldr	r3, [pc, #252]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f0      	bne.n	8007bce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	019b      	lsls	r3, r3, #6
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	3b01      	subs	r3, #1
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	4933      	ldr	r1, [pc, #204]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c16:	4b33      	ldr	r3, [pc, #204]	; (8007ce4 <HAL_RCC_OscConfig+0x4dc>)
 8007c18:	2201      	movs	r2, #1
 8007c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c1c:	f7fa fe90 	bl	8002940 <HAL_GetTick>
 8007c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c24:	f7fa fe8c 	bl	8002940 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e04d      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c36:	4b2a      	ldr	r3, [pc, #168]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0f0      	beq.n	8007c24 <HAL_RCC_OscConfig+0x41c>
 8007c42:	e045      	b.n	8007cd0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c44:	4b27      	ldr	r3, [pc, #156]	; (8007ce4 <HAL_RCC_OscConfig+0x4dc>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c4a:	f7fa fe79 	bl	8002940 <HAL_GetTick>
 8007c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c50:	e008      	b.n	8007c64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c52:	f7fa fe75 	bl	8002940 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e036      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c64:	4b1e      	ldr	r3, [pc, #120]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1f0      	bne.n	8007c52 <HAL_RCC_OscConfig+0x44a>
 8007c70:	e02e      	b.n	8007cd0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e029      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c7e:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <HAL_RCC_OscConfig+0x4d8>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d11c      	bne.n	8007ccc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d115      	bne.n	8007ccc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10d      	bne.n	8007ccc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d001      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40007000 	.word	0x40007000
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	42470060 	.word	0x42470060

08007ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0cc      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cfc:	4b68      	ldr	r3, [pc, #416]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d90c      	bls.n	8007d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0a:	4b65      	ldr	r3, [pc, #404]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d12:	4b63      	ldr	r3, [pc, #396]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d001      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0b8      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d020      	beq.n	8007d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d3c:	4b59      	ldr	r3, [pc, #356]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	4a58      	ldr	r2, [pc, #352]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0308 	and.w	r3, r3, #8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d54:	4b53      	ldr	r3, [pc, #332]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	4a52      	ldr	r2, [pc, #328]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d60:	4b50      	ldr	r3, [pc, #320]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	494d      	ldr	r1, [pc, #308]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d044      	beq.n	8007e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d107      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d86:	4b47      	ldr	r3, [pc, #284]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d119      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e07f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d003      	beq.n	8007da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d107      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da6:	4b3f      	ldr	r3, [pc, #252]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e06f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007db6:	4b3b      	ldr	r3, [pc, #236]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e067      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dc6:	4b37      	ldr	r3, [pc, #220]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f023 0203 	bic.w	r2, r3, #3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	4934      	ldr	r1, [pc, #208]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007dd8:	f7fa fdb2 	bl	8002940 <HAL_GetTick>
 8007ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dde:	e00a      	b.n	8007df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007de0:	f7fa fdae 	bl	8002940 <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e04f      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df6:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f003 020c 	and.w	r2, r3, #12
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d1eb      	bne.n	8007de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d20c      	bcs.n	8007e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e16:	4b22      	ldr	r3, [pc, #136]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1e:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d001      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e032      	b.n	8007e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e3c:	4b19      	ldr	r3, [pc, #100]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	4916      	ldr	r1, [pc, #88]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d009      	beq.n	8007e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e5a:	4b12      	ldr	r3, [pc, #72]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	490e      	ldr	r1, [pc, #56]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e6e:	f000 f821 	bl	8007eb4 <HAL_RCC_GetSysClockFreq>
 8007e72:	4601      	mov	r1, r0
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	091b      	lsrs	r3, r3, #4
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8007e80:	5cd3      	ldrb	r3, [r2, r3]
 8007e82:	fa21 f303 	lsr.w	r3, r1, r3
 8007e86:	4a09      	ldr	r2, [pc, #36]	; (8007eac <HAL_RCC_ClockConfig+0x1c4>)
 8007e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fa fd12 	bl	80028b8 <HAL_InitTick>

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40023c00 	.word	0x40023c00
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	0800d900 	.word	0x0800d900
 8007eac:	20000004 	.word	0x20000004
 8007eb0:	2000000c 	.word	0x2000000c

08007eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eca:	4b63      	ldr	r3, [pc, #396]	; (8008058 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 030c 	and.w	r3, r3, #12
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d007      	beq.n	8007ee6 <HAL_RCC_GetSysClockFreq+0x32>
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d008      	beq.n	8007eec <HAL_RCC_GetSysClockFreq+0x38>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f040 80b4 	bne.w	8008048 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ee0:	4b5e      	ldr	r3, [pc, #376]	; (800805c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007ee2:	60bb      	str	r3, [r7, #8]
       break;
 8007ee4:	e0b3      	b.n	800804e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ee6:	4b5d      	ldr	r3, [pc, #372]	; (800805c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007ee8:	60bb      	str	r3, [r7, #8]
      break;
 8007eea:	e0b0      	b.n	800804e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007eec:	4b5a      	ldr	r3, [pc, #360]	; (8008058 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ef6:	4b58      	ldr	r3, [pc, #352]	; (8008058 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d04a      	beq.n	8007f98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f02:	4b55      	ldr	r3, [pc, #340]	; (8008058 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	f04f 0400 	mov.w	r4, #0
 8007f0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	ea03 0501 	and.w	r5, r3, r1
 8007f18:	ea04 0602 	and.w	r6, r4, r2
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4632      	mov	r2, r6
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	f04f 0400 	mov.w	r4, #0
 8007f28:	0154      	lsls	r4, r2, #5
 8007f2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007f2e:	014b      	lsls	r3, r1, #5
 8007f30:	4619      	mov	r1, r3
 8007f32:	4622      	mov	r2, r4
 8007f34:	1b49      	subs	r1, r1, r5
 8007f36:	eb62 0206 	sbc.w	r2, r2, r6
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	0194      	lsls	r4, r2, #6
 8007f44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007f48:	018b      	lsls	r3, r1, #6
 8007f4a:	1a5b      	subs	r3, r3, r1
 8007f4c:	eb64 0402 	sbc.w	r4, r4, r2
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	00e2      	lsls	r2, r4, #3
 8007f5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007f5e:	00d9      	lsls	r1, r3, #3
 8007f60:	460b      	mov	r3, r1
 8007f62:	4614      	mov	r4, r2
 8007f64:	195b      	adds	r3, r3, r5
 8007f66:	eb44 0406 	adc.w	r4, r4, r6
 8007f6a:	f04f 0100 	mov.w	r1, #0
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	02a2      	lsls	r2, r4, #10
 8007f74:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007f78:	0299      	lsls	r1, r3, #10
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	4621      	mov	r1, r4
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f04f 0400 	mov.w	r4, #0
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	f7f8 fdd8 	bl	8000b40 <__aeabi_uldivmod>
 8007f90:	4603      	mov	r3, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	e049      	b.n	800802c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f98:	4b2f      	ldr	r3, [pc, #188]	; (8008058 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	099b      	lsrs	r3, r3, #6
 8007f9e:	f04f 0400 	mov.w	r4, #0
 8007fa2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	ea03 0501 	and.w	r5, r3, r1
 8007fae:	ea04 0602 	and.w	r6, r4, r2
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	f04f 0400 	mov.w	r4, #0
 8007fbe:	0154      	lsls	r4, r2, #5
 8007fc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007fc4:	014b      	lsls	r3, r1, #5
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4622      	mov	r2, r4
 8007fca:	1b49      	subs	r1, r1, r5
 8007fcc:	eb62 0206 	sbc.w	r2, r2, r6
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	f04f 0400 	mov.w	r4, #0
 8007fd8:	0194      	lsls	r4, r2, #6
 8007fda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007fde:	018b      	lsls	r3, r1, #6
 8007fe0:	1a5b      	subs	r3, r3, r1
 8007fe2:	eb64 0402 	sbc.w	r4, r4, r2
 8007fe6:	f04f 0100 	mov.w	r1, #0
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	00e2      	lsls	r2, r4, #3
 8007ff0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007ff4:	00d9      	lsls	r1, r3, #3
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	195b      	adds	r3, r3, r5
 8007ffc:	eb44 0406 	adc.w	r4, r4, r6
 8008000:	f04f 0100 	mov.w	r1, #0
 8008004:	f04f 0200 	mov.w	r2, #0
 8008008:	02a2      	lsls	r2, r4, #10
 800800a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800800e:	0299      	lsls	r1, r3, #10
 8008010:	460b      	mov	r3, r1
 8008012:	4614      	mov	r4, r2
 8008014:	4618      	mov	r0, r3
 8008016:	4621      	mov	r1, r4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f04f 0400 	mov.w	r4, #0
 800801e:	461a      	mov	r2, r3
 8008020:	4623      	mov	r3, r4
 8008022:	f7f8 fd8d 	bl	8000b40 <__aeabi_uldivmod>
 8008026:	4603      	mov	r3, r0
 8008028:	460c      	mov	r4, r1
 800802a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800802c:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	0c1b      	lsrs	r3, r3, #16
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	3301      	adds	r3, #1
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	fbb2 f3f3 	udiv	r3, r2, r3
 8008044:	60bb      	str	r3, [r7, #8]
      break;
 8008046:	e002      	b.n	800804e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008048:	4b04      	ldr	r3, [pc, #16]	; (800805c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800804a:	60bb      	str	r3, [r7, #8]
      break;
 800804c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800804e:	68bb      	ldr	r3, [r7, #8]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008058:	40023800 	.word	0x40023800
 800805c:	00f42400 	.word	0x00f42400

08008060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008064:	4b03      	ldr	r3, [pc, #12]	; (8008074 <HAL_RCC_GetHCLKFreq+0x14>)
 8008066:	681b      	ldr	r3, [r3, #0]
}
 8008068:	4618      	mov	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000004 	.word	0x20000004

08008078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800807c:	f7ff fff0 	bl	8008060 <HAL_RCC_GetHCLKFreq>
 8008080:	4601      	mov	r1, r0
 8008082:	4b05      	ldr	r3, [pc, #20]	; (8008098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	0a9b      	lsrs	r3, r3, #10
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	4a03      	ldr	r2, [pc, #12]	; (800809c <HAL_RCC_GetPCLK1Freq+0x24>)
 800808e:	5cd3      	ldrb	r3, [r2, r3]
 8008090:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008094:	4618      	mov	r0, r3
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40023800 	.word	0x40023800
 800809c:	0800d910 	.word	0x0800d910

080080a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d105      	bne.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d035      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80080c8:	4b62      	ldr	r3, [pc, #392]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ce:	f7fa fc37 	bl	8002940 <HAL_GetTick>
 80080d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080d4:	e008      	b.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80080d6:	f7fa fc33 	bl	8002940 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d901      	bls.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e0b0      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080e8:	4b5b      	ldr	r3, [pc, #364]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1f0      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	019a      	lsls	r2, r3, #6
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	071b      	lsls	r3, r3, #28
 8008100:	4955      	ldr	r1, [pc, #340]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008102:	4313      	orrs	r3, r2
 8008104:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008108:	4b52      	ldr	r3, [pc, #328]	; (8008254 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800810e:	f7fa fc17 	bl	8002940 <HAL_GetTick>
 8008112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008114:	e008      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008116:	f7fa fc13 	bl	8002940 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e090      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008128:	4b4b      	ldr	r3, [pc, #300]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8083 	beq.w	8008248 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	4b44      	ldr	r3, [pc, #272]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	4a43      	ldr	r2, [pc, #268]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800814c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008150:	6413      	str	r3, [r2, #64]	; 0x40
 8008152:	4b41      	ldr	r3, [pc, #260]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800815e:	4b3f      	ldr	r3, [pc, #252]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a3e      	ldr	r2, [pc, #248]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008168:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800816a:	f7fa fbe9 	bl	8002940 <HAL_GetTick>
 800816e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008172:	f7fa fbe5 	bl	8002940 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e062      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008184:	4b35      	ldr	r3, [pc, #212]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0f0      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008190:	4b31      	ldr	r3, [pc, #196]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008198:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d02f      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d028      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081ae:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80081b8:	4b29      	ldr	r3, [pc, #164]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081be:	4b28      	ldr	r3, [pc, #160]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80081c4:	4a24      	ldr	r2, [pc, #144]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80081ca:	4b23      	ldr	r3, [pc, #140]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d114      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80081d6:	f7fa fbb3 	bl	8002940 <HAL_GetTick>
 80081da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081dc:	e00a      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081de:	f7fa fbaf 	bl	8002940 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d901      	bls.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e02a      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081f4:	4b18      	ldr	r3, [pc, #96]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0ee      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800820c:	d10d      	bne.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800820e:	4b12      	ldr	r3, [pc, #72]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800821e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008222:	490d      	ldr	r1, [pc, #52]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008224:	4313      	orrs	r3, r2
 8008226:	608b      	str	r3, [r1, #8]
 8008228:	e005      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800822a:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	4a0a      	ldr	r2, [pc, #40]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008230:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008234:	6093      	str	r3, [r2, #8]
 8008236:	4b08      	ldr	r3, [pc, #32]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008238:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008242:	4905      	ldr	r1, [pc, #20]	; (8008258 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008244:	4313      	orrs	r3, r2
 8008246:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	42470068 	.word	0x42470068
 8008258:	40023800 	.word	0x40023800
 800825c:	40007000 	.word	0x40007000
 8008260:	42470e40 	.word	0x42470e40

08008264 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e083      	b.n	800837e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7f5b      	ldrb	r3, [r3, #29]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d105      	bne.n	800828c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7f9 fd72 	bl	8001d70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	22ca      	movs	r2, #202	; 0xca
 8008298:	625a      	str	r2, [r3, #36]	; 0x24
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2253      	movs	r2, #83	; 0x53
 80082a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f897 	bl	80083d6 <RTC_EnterInitMode>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	22ff      	movs	r2, #255	; 0xff
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2204      	movs	r2, #4
 80082ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e05e      	b.n	800837e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6899      	ldr	r1, [r3, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	68d2      	ldr	r2, [r2, #12]
 80082fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6919      	ldr	r1, [r3, #16]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	041a      	lsls	r2, r3, #16
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800831e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10e      	bne.n	800834c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f829 	bl	8008386 <HAL_RTC_WaitForSynchro>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d008      	beq.n	800834c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	22ff      	movs	r2, #255	; 0xff
 8008340:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2204      	movs	r2, #4
 8008346:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e018      	b.n	800837e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800835a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	22ff      	movs	r2, #255	; 0xff
 8008374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800837c:	2300      	movs	r3, #0
  }
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083a2:	f7fa facd 	bl	8002940 <HAL_GetTick>
 80083a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083a8:	e009      	b.n	80083be <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80083aa:	f7fa fac9 	bl	8002940 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083b8:	d901      	bls.n	80083be <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e007      	b.n	80083ce <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0ee      	beq.n	80083aa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d119      	bne.n	8008424 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f04f 32ff 	mov.w	r2, #4294967295
 80083f8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80083fa:	f7fa faa1 	bl	8002940 <HAL_GetTick>
 80083fe:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008400:	e009      	b.n	8008416 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008402:	f7fa fa9d 	bl	8002940 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008410:	d901      	bls.n	8008416 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e007      	b.n	8008426 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0ee      	beq.n	8008402 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e01d      	b.n	800847c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7fa f8dd 	bl	8002614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f000 fcaf 	bl	8008dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b06      	cmp	r3, #6
 80084ac:	d007      	beq.n	80084be <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f042 0201 	orr.w	r2, r2, #1
 80084bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e01d      	b.n	800851a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7fa f86c 	bl	80025d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f000 fc60 	bl	8008dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2201      	movs	r2, #1
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f001 f85e 	bl	80095f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a15      	ldr	r2, [pc, #84]	; (8008598 <HAL_TIM_PWM_Start+0x74>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d004      	beq.n	8008550 <HAL_TIM_PWM_Start+0x2c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a14      	ldr	r2, [pc, #80]	; (800859c <HAL_TIM_PWM_Start+0x78>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d101      	bne.n	8008554 <HAL_TIM_PWM_Start+0x30>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <HAL_TIM_PWM_Start+0x32>
 8008554:	2300      	movs	r3, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d007      	beq.n	800856a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b06      	cmp	r3, #6
 800857a:	d007      	beq.n	800858c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0201 	orr.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40010000 	.word	0x40010000
 800859c:	40010400 	.word	0x40010400

080085a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e01d      	b.n	80085ee <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f815 	bl	80085f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3304      	adds	r3, #4
 80085dc:	4619      	mov	r1, r3
 80085de:	4610      	mov	r0, r2
 80085e0:	f000 fbf6 	bl	8008dd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
	...

0800860c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b0c      	cmp	r3, #12
 800861a:	d841      	bhi.n	80086a0 <HAL_TIM_IC_Start_IT+0x94>
 800861c:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <HAL_TIM_IC_Start_IT+0x18>)
 800861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008622:	bf00      	nop
 8008624:	08008659 	.word	0x08008659
 8008628:	080086a1 	.word	0x080086a1
 800862c:	080086a1 	.word	0x080086a1
 8008630:	080086a1 	.word	0x080086a1
 8008634:	0800866b 	.word	0x0800866b
 8008638:	080086a1 	.word	0x080086a1
 800863c:	080086a1 	.word	0x080086a1
 8008640:	080086a1 	.word	0x080086a1
 8008644:	0800867d 	.word	0x0800867d
 8008648:	080086a1 	.word	0x080086a1
 800864c:	080086a1 	.word	0x080086a1
 8008650:	080086a1 	.word	0x080086a1
 8008654:	0800868f 	.word	0x0800868f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0202 	orr.w	r2, r2, #2
 8008666:	60da      	str	r2, [r3, #12]
      break;
 8008668:	e01b      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0204 	orr.w	r2, r2, #4
 8008678:	60da      	str	r2, [r3, #12]
      break;
 800867a:	e012      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0208 	orr.w	r2, r2, #8
 800868a:	60da      	str	r2, [r3, #12]
      break;
 800868c:	e009      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f042 0210 	orr.w	r2, r2, #16
 800869c:	60da      	str	r2, [r3, #12]
      break;
 800869e:	e000      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80086a0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2201      	movs	r2, #1
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 ffa4 	bl	80095f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b06      	cmp	r3, #6
 80086c0:	d007      	beq.n	80086d2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f042 0201 	orr.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d122      	bne.n	8008738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d11b      	bne.n	8008738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f06f 0202 	mvn.w	r2, #2
 8008708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d003      	beq.n	8008726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7f9 f944 	bl	80019ac <HAL_TIM_IC_CaptureCallback>
 8008724:	e005      	b.n	8008732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fb3e 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f7f9 fae7 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b04      	cmp	r3, #4
 8008744:	d122      	bne.n	800878c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b04      	cmp	r3, #4
 8008752:	d11b      	bne.n	800878c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f06f 0204 	mvn.w	r2, #4
 800875c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2202      	movs	r2, #2
 8008762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f9 f91a 	bl	80019ac <HAL_TIM_IC_CaptureCallback>
 8008778:	e005      	b.n	8008786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fb14 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7f9 fabd 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	2b08      	cmp	r3, #8
 8008798:	d122      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d11b      	bne.n	80087e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f06f 0208 	mvn.w	r2, #8
 80087b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2204      	movs	r2, #4
 80087b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d003      	beq.n	80087ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7f9 f8f0 	bl	80019ac <HAL_TIM_IC_CaptureCallback>
 80087cc:	e005      	b.n	80087da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 faea 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7f9 fa93 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f003 0310 	and.w	r3, r3, #16
 80087ea:	2b10      	cmp	r3, #16
 80087ec:	d122      	bne.n	8008834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b10      	cmp	r3, #16
 80087fa:	d11b      	bne.n	8008834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f06f 0210 	mvn.w	r2, #16
 8008804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2208      	movs	r2, #8
 800880a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7f9 f8c6 	bl	80019ac <HAL_TIM_IC_CaptureCallback>
 8008820:	e005      	b.n	800882e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fac0 	bl	8008da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7f9 fa69 	bl	8001d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b01      	cmp	r3, #1
 8008840:	d10e      	bne.n	8008860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b01      	cmp	r3, #1
 800884e:	d107      	bne.n	8008860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0201 	mvn.w	r2, #1
 8008858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7f9 f958 	bl	8001b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886a:	2b80      	cmp	r3, #128	; 0x80
 800886c:	d10e      	bne.n	800888c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	d107      	bne.n	800888c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 ffb4 	bl	80097f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	d10e      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a4:	2b40      	cmp	r3, #64	; 0x40
 80088a6:	d107      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa82 	bl	8008dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d10e      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	d107      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f06f 0220 	mvn.w	r2, #32
 80088dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 ff7e 	bl	80097e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d101      	bne.n	8008906 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008902:	2302      	movs	r3, #2
 8008904:	e08a      	b.n	8008a1c <HAL_TIM_IC_ConfigChannel+0x130>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2202      	movs	r2, #2
 8008912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11b      	bne.n	8008954 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f000 fca0 	bl	8009270 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 020c 	bic.w	r2, r2, #12
 800893e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6999      	ldr	r1, [r3, #24]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	619a      	str	r2, [r3, #24]
 8008952:	e05a      	b.n	8008a0a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b04      	cmp	r3, #4
 8008958:	d11c      	bne.n	8008994 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6819      	ldr	r1, [r3, #0]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f000 fd24 	bl	80093b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	699a      	ldr	r2, [r3, #24]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800897c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6999      	ldr	r1, [r3, #24]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	021a      	lsls	r2, r3, #8
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	619a      	str	r2, [r3, #24]
 8008992:	e03a      	b.n	8008a0a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b08      	cmp	r3, #8
 8008998:	d11b      	bne.n	80089d2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f000 fd71 	bl	8009490 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69da      	ldr	r2, [r3, #28]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 020c 	bic.w	r2, r2, #12
 80089bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69d9      	ldr	r1, [r3, #28]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	61da      	str	r2, [r3, #28]
 80089d0:	e01b      	b.n	8008a0a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	6819      	ldr	r1, [r3, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f000 fd91 	bl	8009508 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80089f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69d9      	ldr	r1, [r3, #28]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	021a      	lsls	r2, r3, #8
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d101      	bne.n	8008a3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a3a:	2302      	movs	r3, #2
 8008a3c:	e0b4      	b.n	8008ba8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2201      	movs	r2, #1
 8008a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2202      	movs	r2, #2
 8008a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b0c      	cmp	r3, #12
 8008a52:	f200 809f 	bhi.w	8008b94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a91 	.word	0x08008a91
 8008a60:	08008b95 	.word	0x08008b95
 8008a64:	08008b95 	.word	0x08008b95
 8008a68:	08008b95 	.word	0x08008b95
 8008a6c:	08008ad1 	.word	0x08008ad1
 8008a70:	08008b95 	.word	0x08008b95
 8008a74:	08008b95 	.word	0x08008b95
 8008a78:	08008b95 	.word	0x08008b95
 8008a7c:	08008b13 	.word	0x08008b13
 8008a80:	08008b95 	.word	0x08008b95
 8008a84:	08008b95 	.word	0x08008b95
 8008a88:	08008b95 	.word	0x08008b95
 8008a8c:	08008b53 	.word	0x08008b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 fa3a 	bl	8008f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0208 	orr.w	r2, r2, #8
 8008aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699a      	ldr	r2, [r3, #24]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f022 0204 	bic.w	r2, r2, #4
 8008aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6999      	ldr	r1, [r3, #24]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	691a      	ldr	r2, [r3, #16]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	619a      	str	r2, [r3, #24]
      break;
 8008ace:	e062      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 fa8a 	bl	8008ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699a      	ldr	r2, [r3, #24]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6999      	ldr	r1, [r3, #24]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	021a      	lsls	r2, r3, #8
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	619a      	str	r2, [r3, #24]
      break;
 8008b10:	e041      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fadf 	bl	80090dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0208 	orr.w	r2, r2, #8
 8008b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	69da      	ldr	r2, [r3, #28]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0204 	bic.w	r2, r2, #4
 8008b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69d9      	ldr	r1, [r3, #28]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	691a      	ldr	r2, [r3, #16]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	61da      	str	r2, [r3, #28]
      break;
 8008b50:	e021      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fb33 	bl	80091c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	69da      	ldr	r2, [r3, #28]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	69da      	ldr	r2, [r3, #28]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69d9      	ldr	r1, [r3, #28]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	021a      	lsls	r2, r3, #8
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	61da      	str	r2, [r3, #28]
      break;
 8008b92:	e000      	b.n	8008b96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008b94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIM_ConfigClockSource+0x18>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e0a6      	b.n	8008d16 <HAL_TIM_ConfigClockSource+0x166>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008be6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b40      	cmp	r3, #64	; 0x40
 8008bfe:	d067      	beq.n	8008cd0 <HAL_TIM_ConfigClockSource+0x120>
 8008c00:	2b40      	cmp	r3, #64	; 0x40
 8008c02:	d80b      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x6c>
 8008c04:	2b10      	cmp	r3, #16
 8008c06:	d073      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x140>
 8008c08:	2b10      	cmp	r3, #16
 8008c0a:	d802      	bhi.n	8008c12 <HAL_TIM_ConfigClockSource+0x62>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d06f      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c10:	e078      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d06c      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x140>
 8008c16:	2b30      	cmp	r3, #48	; 0x30
 8008c18:	d06a      	beq.n	8008cf0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008c1a:	e073      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c1c:	2b70      	cmp	r3, #112	; 0x70
 8008c1e:	d00d      	beq.n	8008c3c <HAL_TIM_ConfigClockSource+0x8c>
 8008c20:	2b70      	cmp	r3, #112	; 0x70
 8008c22:	d804      	bhi.n	8008c2e <HAL_TIM_ConfigClockSource+0x7e>
 8008c24:	2b50      	cmp	r3, #80	; 0x50
 8008c26:	d033      	beq.n	8008c90 <HAL_TIM_ConfigClockSource+0xe0>
 8008c28:	2b60      	cmp	r3, #96	; 0x60
 8008c2a:	d041      	beq.n	8008cb0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008c2c:	e06a      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c32:	d066      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x152>
 8008c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c38:	d017      	beq.n	8008c6a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008c3a:	e063      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	6899      	ldr	r1, [r3, #8]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f000 fcb4 	bl	80095b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	609a      	str	r2, [r3, #8]
      break;
 8008c68:	e04c      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6899      	ldr	r1, [r3, #8]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f000 fc9d 	bl	80095b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c8c:	609a      	str	r2, [r3, #8]
      break;
 8008c8e:	e039      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	6859      	ldr	r1, [r3, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	f000 fb5b 	bl	8009358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2150      	movs	r1, #80	; 0x50
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fc6a 	bl	8009582 <TIM_ITRx_SetConfig>
      break;
 8008cae:	e029      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6818      	ldr	r0, [r3, #0]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6859      	ldr	r1, [r3, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	f000 fbb7 	bl	8009430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2160      	movs	r1, #96	; 0x60
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fc5a 	bl	8009582 <TIM_ITRx_SetConfig>
      break;
 8008cce:	e019      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6859      	ldr	r1, [r3, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f000 fb3b 	bl	8009358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2140      	movs	r1, #64	; 0x40
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fc4a 	bl	8009582 <TIM_ITRx_SetConfig>
      break;
 8008cee:	e009      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f000 fc41 	bl	8009582 <TIM_ITRx_SetConfig>
      break;
 8008d00:	e000      	b.n	8008d04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b0c      	cmp	r3, #12
 8008d32:	d831      	bhi.n	8008d98 <HAL_TIM_ReadCapturedValue+0x78>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d71 	.word	0x08008d71
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	08008d99 	.word	0x08008d99
 8008d48:	08008d99 	.word	0x08008d99
 8008d4c:	08008d7b 	.word	0x08008d7b
 8008d50:	08008d99 	.word	0x08008d99
 8008d54:	08008d99 	.word	0x08008d99
 8008d58:	08008d99 	.word	0x08008d99
 8008d5c:	08008d85 	.word	0x08008d85
 8008d60:	08008d99 	.word	0x08008d99
 8008d64:	08008d99 	.word	0x08008d99
 8008d68:	08008d99 	.word	0x08008d99
 8008d6c:	08008d8f 	.word	0x08008d8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d76:	60fb      	str	r3, [r7, #12]

      break;
 8008d78:	e00f      	b.n	8008d9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d80:	60fb      	str	r3, [r7, #12]

      break;
 8008d82:	e00a      	b.n	8008d9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d8a:	60fb      	str	r3, [r7, #12]

      break;
 8008d8c:	e005      	b.n	8008d9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	60fb      	str	r3, [r7, #12]

      break;
 8008d96:	e000      	b.n	8008d9a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008d98:	bf00      	nop
  }

  return tmpreg;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a40      	ldr	r2, [pc, #256]	; (8008ee4 <TIM_Base_SetConfig+0x114>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d013      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d00f      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a3d      	ldr	r2, [pc, #244]	; (8008ee8 <TIM_Base_SetConfig+0x118>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00b      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a3c      	ldr	r2, [pc, #240]	; (8008eec <TIM_Base_SetConfig+0x11c>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d007      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a3b      	ldr	r2, [pc, #236]	; (8008ef0 <TIM_Base_SetConfig+0x120>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d003      	beq.n	8008e10 <TIM_Base_SetConfig+0x40>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a3a      	ldr	r2, [pc, #232]	; (8008ef4 <TIM_Base_SetConfig+0x124>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d108      	bne.n	8008e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a2f      	ldr	r2, [pc, #188]	; (8008ee4 <TIM_Base_SetConfig+0x114>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d02b      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e30:	d027      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a2c      	ldr	r2, [pc, #176]	; (8008ee8 <TIM_Base_SetConfig+0x118>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d023      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a2b      	ldr	r2, [pc, #172]	; (8008eec <TIM_Base_SetConfig+0x11c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d01f      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a2a      	ldr	r2, [pc, #168]	; (8008ef0 <TIM_Base_SetConfig+0x120>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01b      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a29      	ldr	r2, [pc, #164]	; (8008ef4 <TIM_Base_SetConfig+0x124>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d017      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a28      	ldr	r2, [pc, #160]	; (8008ef8 <TIM_Base_SetConfig+0x128>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d013      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a27      	ldr	r2, [pc, #156]	; (8008efc <TIM_Base_SetConfig+0x12c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00f      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a26      	ldr	r2, [pc, #152]	; (8008f00 <TIM_Base_SetConfig+0x130>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00b      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a25      	ldr	r2, [pc, #148]	; (8008f04 <TIM_Base_SetConfig+0x134>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d007      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a24      	ldr	r2, [pc, #144]	; (8008f08 <TIM_Base_SetConfig+0x138>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d003      	beq.n	8008e82 <TIM_Base_SetConfig+0xb2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a23      	ldr	r2, [pc, #140]	; (8008f0c <TIM_Base_SetConfig+0x13c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d108      	bne.n	8008e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a0a      	ldr	r2, [pc, #40]	; (8008ee4 <TIM_Base_SetConfig+0x114>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_Base_SetConfig+0xf8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a0c      	ldr	r2, [pc, #48]	; (8008ef4 <TIM_Base_SetConfig+0x124>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d103      	bne.n	8008ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	615a      	str	r2, [r3, #20]
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40010000 	.word	0x40010000
 8008ee8:	40000400 	.word	0x40000400
 8008eec:	40000800 	.word	0x40000800
 8008ef0:	40000c00 	.word	0x40000c00
 8008ef4:	40010400 	.word	0x40010400
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40014400 	.word	0x40014400
 8008f00:	40014800 	.word	0x40014800
 8008f04:	40001800 	.word	0x40001800
 8008f08:	40001c00 	.word	0x40001c00
 8008f0c:	40002000 	.word	0x40002000

08008f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f023 0201 	bic.w	r2, r3, #1
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f023 0302 	bic.w	r3, r3, #2
 8008f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a20      	ldr	r2, [pc, #128]	; (8008fe8 <TIM_OC1_SetConfig+0xd8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_OC1_SetConfig+0x64>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a1f      	ldr	r2, [pc, #124]	; (8008fec <TIM_OC1_SetConfig+0xdc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d10c      	bne.n	8008f8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f023 0308 	bic.w	r3, r3, #8
 8008f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	f023 0304 	bic.w	r3, r3, #4
 8008f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <TIM_OC1_SetConfig+0xd8>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d003      	beq.n	8008f9e <TIM_OC1_SetConfig+0x8e>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a14      	ldr	r2, [pc, #80]	; (8008fec <TIM_OC1_SetConfig+0xdc>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d111      	bne.n	8008fc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	621a      	str	r2, [r3, #32]
}
 8008fdc:	bf00      	nop
 8008fde:	371c      	adds	r7, #28
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	40010000 	.word	0x40010000
 8008fec:	40010400 	.word	0x40010400

08008ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f023 0210 	bic.w	r2, r3, #16
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f023 0320 	bic.w	r3, r3, #32
 800903a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	011b      	lsls	r3, r3, #4
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a22      	ldr	r2, [pc, #136]	; (80090d4 <TIM_OC2_SetConfig+0xe4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d003      	beq.n	8009058 <TIM_OC2_SetConfig+0x68>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <TIM_OC2_SetConfig+0xe8>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d10d      	bne.n	8009074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800905e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4313      	orrs	r3, r2
 800906a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a17      	ldr	r2, [pc, #92]	; (80090d4 <TIM_OC2_SetConfig+0xe4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d003      	beq.n	8009084 <TIM_OC2_SetConfig+0x94>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a16      	ldr	r2, [pc, #88]	; (80090d8 <TIM_OC2_SetConfig+0xe8>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d113      	bne.n	80090ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800908a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	4313      	orrs	r3, r2
 800909e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	621a      	str	r2, [r3, #32]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40010000 	.word	0x40010000
 80090d8:	40010400 	.word	0x40010400

080090dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800910a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0303 	bic.w	r3, r3, #3
 8009112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	021b      	lsls	r3, r3, #8
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a21      	ldr	r2, [pc, #132]	; (80091bc <TIM_OC3_SetConfig+0xe0>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <TIM_OC3_SetConfig+0x66>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a20      	ldr	r2, [pc, #128]	; (80091c0 <TIM_OC3_SetConfig+0xe4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d10d      	bne.n	800915e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	021b      	lsls	r3, r3, #8
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800915c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a16      	ldr	r2, [pc, #88]	; (80091bc <TIM_OC3_SetConfig+0xe0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d003      	beq.n	800916e <TIM_OC3_SetConfig+0x92>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a15      	ldr	r2, [pc, #84]	; (80091c0 <TIM_OC3_SetConfig+0xe4>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d113      	bne.n	8009196 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800917c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4313      	orrs	r3, r2
 8009188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	621a      	str	r2, [r3, #32]
}
 80091b0:	bf00      	nop
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	40010000 	.word	0x40010000
 80091c0:	40010400 	.word	0x40010400

080091c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	69db      	ldr	r3, [r3, #28]
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800920e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	031b      	lsls	r3, r3, #12
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	4313      	orrs	r3, r2
 800921a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a12      	ldr	r2, [pc, #72]	; (8009268 <TIM_OC4_SetConfig+0xa4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d003      	beq.n	800922c <TIM_OC4_SetConfig+0x68>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a11      	ldr	r2, [pc, #68]	; (800926c <TIM_OC4_SetConfig+0xa8>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d109      	bne.n	8009240 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	019b      	lsls	r3, r3, #6
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4313      	orrs	r3, r2
 800923e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	621a      	str	r2, [r3, #32]
}
 800925a:	bf00      	nop
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40010000 	.word	0x40010000
 800926c:	40010400 	.word	0x40010400

08009270 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	f023 0201 	bic.w	r2, r3, #1
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4a28      	ldr	r2, [pc, #160]	; (800933c <TIM_TI1_SetConfig+0xcc>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d01b      	beq.n	80092d6 <TIM_TI1_SetConfig+0x66>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a4:	d017      	beq.n	80092d6 <TIM_TI1_SetConfig+0x66>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4a25      	ldr	r2, [pc, #148]	; (8009340 <TIM_TI1_SetConfig+0xd0>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d013      	beq.n	80092d6 <TIM_TI1_SetConfig+0x66>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4a24      	ldr	r2, [pc, #144]	; (8009344 <TIM_TI1_SetConfig+0xd4>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00f      	beq.n	80092d6 <TIM_TI1_SetConfig+0x66>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	4a23      	ldr	r2, [pc, #140]	; (8009348 <TIM_TI1_SetConfig+0xd8>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00b      	beq.n	80092d6 <TIM_TI1_SetConfig+0x66>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	4a22      	ldr	r2, [pc, #136]	; (800934c <TIM_TI1_SetConfig+0xdc>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d007      	beq.n	80092d6 <TIM_TI1_SetConfig+0x66>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4a21      	ldr	r2, [pc, #132]	; (8009350 <TIM_TI1_SetConfig+0xe0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d003      	beq.n	80092d6 <TIM_TI1_SetConfig+0x66>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4a20      	ldr	r2, [pc, #128]	; (8009354 <TIM_TI1_SetConfig+0xe4>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d101      	bne.n	80092da <TIM_TI1_SetConfig+0x6a>
 80092d6:	2301      	movs	r3, #1
 80092d8:	e000      	b.n	80092dc <TIM_TI1_SetConfig+0x6c>
 80092da:	2300      	movs	r3, #0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d008      	beq.n	80092f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f023 0303 	bic.w	r3, r3, #3
 80092e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	e003      	b.n	80092fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f043 0301 	orr.w	r3, r3, #1
 80092f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	b2db      	uxtb	r3, r3
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	4313      	orrs	r3, r2
 800930c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f023 030a 	bic.w	r3, r3, #10
 8009314:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f003 030a 	and.w	r3, r3, #10
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	621a      	str	r2, [r3, #32]
}
 800932e:	bf00      	nop
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	40010000 	.word	0x40010000
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40000c00 	.word	0x40000c00
 800934c:	40010400 	.word	0x40010400
 8009350:	40014000 	.word	0x40014000
 8009354:	40001800 	.word	0x40001800

08009358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	f023 0201 	bic.w	r2, r3, #1
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	4313      	orrs	r3, r2
 800938c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f023 030a 	bic.w	r3, r3, #10
 8009394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	4313      	orrs	r3, r2
 800939c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	621a      	str	r2, [r3, #32]
}
 80093aa:	bf00      	nop
 80093ac:	371c      	adds	r7, #28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b087      	sub	sp, #28
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	f023 0210 	bic.w	r2, r3, #16
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	697a      	ldr	r2, [r7, #20]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	031b      	lsls	r3, r3, #12
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009408:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	4313      	orrs	r3, r2
 8009416:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	621a      	str	r2, [r3, #32]
}
 8009424:	bf00      	nop
 8009426:	371c      	adds	r7, #28
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	f023 0210 	bic.w	r2, r3, #16
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800945a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	031b      	lsls	r3, r3, #12
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	4313      	orrs	r3, r2
 8009464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800946c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	621a      	str	r2, [r3, #32]
}
 8009484:	bf00      	nop
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	f023 0303 	bic.w	r3, r3, #3
 80094bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	011b      	lsls	r3, r3, #4
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80094e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	621a      	str	r2, [r3, #32]
}
 80094fc:	bf00      	nop
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009546:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	031b      	lsls	r3, r3, #12
 800954c:	b29b      	uxth	r3, r3
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800955a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	031b      	lsls	r3, r3, #12
 8009560:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4313      	orrs	r3, r2
 8009568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	621a      	str	r2, [r3, #32]
}
 8009576:	bf00      	nop
 8009578:	371c      	adds	r7, #28
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009582:	b480      	push	{r7}
 8009584:	b085      	sub	sp, #20
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4313      	orrs	r3, r2
 80095a0:	f043 0307 	orr.w	r3, r3, #7
 80095a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	609a      	str	r2, [r3, #8]
}
 80095ac:	bf00      	nop
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	607a      	str	r2, [r7, #4]
 80095c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	021a      	lsls	r2, r3, #8
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	431a      	orrs	r2, r3
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	4313      	orrs	r3, r2
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	609a      	str	r2, [r3, #8]
}
 80095ec:	bf00      	nop
 80095ee:	371c      	adds	r7, #28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 031f 	and.w	r3, r3, #31
 800960a:	2201      	movs	r2, #1
 800960c:	fa02 f303 	lsl.w	r3, r2, r3
 8009610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1a      	ldr	r2, [r3, #32]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	43db      	mvns	r3, r3
 800961a:	401a      	ands	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f003 031f 	and.w	r3, r3, #31
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	fa01 f303 	lsl.w	r3, r1, r3
 8009630:	431a      	orrs	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	621a      	str	r2, [r3, #32]
}
 8009636:	bf00      	nop
 8009638:	371c      	adds	r7, #28
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
	...

08009644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d101      	bne.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009658:	2302      	movs	r3, #2
 800965a:	e05a      	b.n	8009712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a21      	ldr	r2, [pc, #132]	; (8009720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d022      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a8:	d01d      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d018      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a1b      	ldr	r2, [pc, #108]	; (8009728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d013      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a1a      	ldr	r2, [pc, #104]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d00e      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a18      	ldr	r2, [pc, #96]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d009      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a17      	ldr	r2, [pc, #92]	; (8009734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d004      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a15      	ldr	r2, [pc, #84]	; (8009738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d10c      	bne.n	8009700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40010000 	.word	0x40010000
 8009724:	40000400 	.word	0x40000400
 8009728:	40000800 	.word	0x40000800
 800972c:	40000c00 	.word	0x40000c00
 8009730:	40010400 	.word	0x40010400
 8009734:	40014000 	.word	0x40014000
 8009738:	40001800 	.word	0x40001800

0800973c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009754:	2302      	movs	r3, #2
 8009756:	e03d      	b.n	80097d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	4313      	orrs	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	4313      	orrs	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4313      	orrs	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009808:	b084      	sub	sp, #16
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	f107 001c 	add.w	r0, r7, #28
 8009816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	2b01      	cmp	r3, #1
 800981e:	d122      	bne.n	8009866 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800984a:	2b01      	cmp	r3, #1
 800984c:	d105      	bne.n	800985a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 fab4 	bl	800adc8 <USB_CoreReset>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
 8009864:	e01a      	b.n	800989c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 faa8 	bl	800adc8 <USB_CoreReset>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800987c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d106      	bne.n	8009890 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009886:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	639a      	str	r2, [r3, #56]	; 0x38
 800988e:	e005      	b.n	800989c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d10b      	bne.n	80098ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f043 0206 	orr.w	r2, r3, #6
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f043 0220 	orr.w	r2, r3, #32
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098c6:	b004      	add	sp, #16
 80098c8:	4770      	bx	lr
	...

080098cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	4613      	mov	r3, r2
 80098d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098da:	79fb      	ldrb	r3, [r7, #7]
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d165      	bne.n	80099ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4a41      	ldr	r2, [pc, #260]	; (80099e8 <USB_SetTurnaroundTime+0x11c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d906      	bls.n	80098f6 <USB_SetTurnaroundTime+0x2a>
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	4a40      	ldr	r2, [pc, #256]	; (80099ec <USB_SetTurnaroundTime+0x120>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d802      	bhi.n	80098f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80098f0:	230f      	movs	r3, #15
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	e062      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4a3c      	ldr	r2, [pc, #240]	; (80099ec <USB_SetTurnaroundTime+0x120>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d906      	bls.n	800990c <USB_SetTurnaroundTime+0x40>
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	4a3b      	ldr	r2, [pc, #236]	; (80099f0 <USB_SetTurnaroundTime+0x124>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d802      	bhi.n	800990c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009906:	230e      	movs	r3, #14
 8009908:	617b      	str	r3, [r7, #20]
 800990a:	e057      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4a38      	ldr	r2, [pc, #224]	; (80099f0 <USB_SetTurnaroundTime+0x124>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d906      	bls.n	8009922 <USB_SetTurnaroundTime+0x56>
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4a37      	ldr	r2, [pc, #220]	; (80099f4 <USB_SetTurnaroundTime+0x128>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d802      	bhi.n	8009922 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800991c:	230d      	movs	r3, #13
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	e04c      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	4a33      	ldr	r2, [pc, #204]	; (80099f4 <USB_SetTurnaroundTime+0x128>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d906      	bls.n	8009938 <USB_SetTurnaroundTime+0x6c>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	4a32      	ldr	r2, [pc, #200]	; (80099f8 <USB_SetTurnaroundTime+0x12c>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d802      	bhi.n	8009938 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009932:	230c      	movs	r3, #12
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	e041      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4a2f      	ldr	r2, [pc, #188]	; (80099f8 <USB_SetTurnaroundTime+0x12c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d906      	bls.n	800994e <USB_SetTurnaroundTime+0x82>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4a2e      	ldr	r2, [pc, #184]	; (80099fc <USB_SetTurnaroundTime+0x130>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d802      	bhi.n	800994e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009948:	230b      	movs	r3, #11
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	e036      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4a2a      	ldr	r2, [pc, #168]	; (80099fc <USB_SetTurnaroundTime+0x130>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d906      	bls.n	8009964 <USB_SetTurnaroundTime+0x98>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	4a29      	ldr	r2, [pc, #164]	; (8009a00 <USB_SetTurnaroundTime+0x134>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d802      	bhi.n	8009964 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800995e:	230a      	movs	r3, #10
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e02b      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4a26      	ldr	r2, [pc, #152]	; (8009a00 <USB_SetTurnaroundTime+0x134>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d906      	bls.n	800997a <USB_SetTurnaroundTime+0xae>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	4a25      	ldr	r2, [pc, #148]	; (8009a04 <USB_SetTurnaroundTime+0x138>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d802      	bhi.n	800997a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009974:	2309      	movs	r3, #9
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e020      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4a21      	ldr	r2, [pc, #132]	; (8009a04 <USB_SetTurnaroundTime+0x138>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d906      	bls.n	8009990 <USB_SetTurnaroundTime+0xc4>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	4a20      	ldr	r2, [pc, #128]	; (8009a08 <USB_SetTurnaroundTime+0x13c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d802      	bhi.n	8009990 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800998a:	2308      	movs	r3, #8
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	e015      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4a1d      	ldr	r2, [pc, #116]	; (8009a08 <USB_SetTurnaroundTime+0x13c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d906      	bls.n	80099a6 <USB_SetTurnaroundTime+0xda>
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4a1c      	ldr	r2, [pc, #112]	; (8009a0c <USB_SetTurnaroundTime+0x140>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d802      	bhi.n	80099a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099a0:	2307      	movs	r3, #7
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	e00a      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099a6:	2306      	movs	r3, #6
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	e007      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80099ac:	79fb      	ldrb	r3, [r7, #7]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d102      	bne.n	80099b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80099b2:	2309      	movs	r3, #9
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e001      	b.n	80099bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099b8:	2309      	movs	r3, #9
 80099ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	68da      	ldr	r2, [r3, #12]
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	029b      	lsls	r3, r3, #10
 80099d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80099d4:	431a      	orrs	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	00d8acbf 	.word	0x00d8acbf
 80099ec:	00e4e1bf 	.word	0x00e4e1bf
 80099f0:	00f423ff 	.word	0x00f423ff
 80099f4:	0106737f 	.word	0x0106737f
 80099f8:	011a499f 	.word	0x011a499f
 80099fc:	01312cff 	.word	0x01312cff
 8009a00:	014ca43f 	.word	0x014ca43f
 8009a04:	016e35ff 	.word	0x016e35ff
 8009a08:	01a6ab1f 	.word	0x01a6ab1f
 8009a0c:	01e847ff 	.word	0x01e847ff

08009a10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f043 0201 	orr.w	r2, r3, #1
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	f023 0201 	bic.w	r2, r3, #1
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a6c:	78fb      	ldrb	r3, [r7, #3]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d106      	bne.n	8009a80 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60da      	str	r2, [r3, #12]
 8009a7e:	e00b      	b.n	8009a98 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	60da      	str	r2, [r3, #12]
 8009a92:	e001      	b.n	8009a98 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e003      	b.n	8009aa0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009a98:	2032      	movs	r0, #50	; 0x32
 8009a9a:	f7f8 ff5d 	bl	8002958 <HAL_Delay>

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b086      	sub	sp, #24
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	e009      	b.n	8009adc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	3340      	adds	r3, #64	; 0x40
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b0e      	cmp	r3, #14
 8009ae0:	d9f2      	bls.n	8009ac8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d11c      	bne.n	8009b22 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009af6:	f043 0302 	orr.w	r3, r3, #2
 8009afa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8009b20:	e00b      	b.n	8009b3a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b40:	461a      	mov	r2, r3
 8009b42:	2300      	movs	r3, #0
 8009b44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b54:	461a      	mov	r2, r3
 8009b56:	680b      	ldr	r3, [r1, #0]
 8009b58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d10c      	bne.n	8009b7a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d104      	bne.n	8009b70 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b66:	2100      	movs	r1, #0
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f949 	bl	8009e00 <USB_SetDevSpeed>
 8009b6e:	e008      	b.n	8009b82 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b70:	2101      	movs	r1, #1
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f944 	bl	8009e00 <USB_SetDevSpeed>
 8009b78:	e003      	b.n	8009b82 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b7a:	2103      	movs	r1, #3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f93f 	bl	8009e00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b82:	2110      	movs	r1, #16
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f8f3 	bl	8009d70 <USB_FlushTxFifo>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f911 	bl	8009dbc <USB_FlushRxFifo>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009baa:	461a      	mov	r2, r3
 8009bac:	2300      	movs	r3, #0
 8009bae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	2300      	movs	r3, #0
 8009bba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	613b      	str	r3, [r7, #16]
 8009bcc:	e043      	b.n	8009c56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	015a      	lsls	r2, r3, #5
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009be4:	d118      	bne.n	8009c18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10a      	bne.n	8009c02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	e013      	b.n	8009c2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	e008      	b.n	8009c2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c24:	461a      	mov	r2, r3
 8009c26:	2300      	movs	r3, #0
 8009c28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c36:	461a      	mov	r2, r3
 8009c38:	2300      	movs	r3, #0
 8009c3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c48:	461a      	mov	r2, r3
 8009c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	3301      	adds	r3, #1
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d3b7      	bcc.n	8009bce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c5e:	2300      	movs	r3, #0
 8009c60:	613b      	str	r3, [r7, #16]
 8009c62:	e043      	b.n	8009cec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c7a:	d118      	bne.n	8009cae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	e013      	b.n	8009cc0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	015a      	lsls	r2, r3, #5
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	e008      	b.n	8009cc0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cba:	461a      	mov	r2, r3
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ccc:	461a      	mov	r2, r3
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d3b7      	bcc.n	8009c64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009d14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d105      	bne.n	8009d28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	f043 0210 	orr.w	r2, r3, #16
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699a      	ldr	r2, [r3, #24]
 8009d2c:	4b0f      	ldr	r3, [pc, #60]	; (8009d6c <USB_DevInit+0x2c4>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	f043 0208 	orr.w	r2, r3, #8
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d107      	bne.n	8009d5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d54:	f043 0304 	orr.w	r3, r3, #4
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d68:	b004      	add	sp, #16
 8009d6a:	4770      	bx	lr
 8009d6c:	803c3800 	.word	0x803c3800

08009d70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	019b      	lsls	r3, r3, #6
 8009d82:	f043 0220 	orr.w	r2, r3, #32
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	4a09      	ldr	r2, [pc, #36]	; (8009db8 <USB_FlushTxFifo+0x48>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d901      	bls.n	8009d9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e006      	b.n	8009daa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f003 0320 	and.w	r3, r3, #32
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d0f0      	beq.n	8009d8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	00030d40 	.word	0x00030d40

08009dbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2210      	movs	r2, #16
 8009dcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <USB_FlushRxFifo+0x40>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d901      	bls.n	8009de0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e006      	b.n	8009dee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b10      	cmp	r3, #16
 8009dea:	d0f0      	beq.n	8009dce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	00030d40 	.word	0x00030d40

08009e00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	68f9      	ldr	r1, [r7, #12]
 8009e1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e20:	4313      	orrs	r3, r2
 8009e22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b087      	sub	sp, #28
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f003 0306 	and.w	r3, r3, #6
 8009e4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75fb      	strb	r3, [r7, #23]
 8009e56:	e00a      	b.n	8009e6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d002      	beq.n	8009e64 <USB_GetDevSpeed+0x32>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b06      	cmp	r3, #6
 8009e62:	d102      	bne.n	8009e6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e64:	2302      	movs	r3, #2
 8009e66:	75fb      	strb	r3, [r7, #23]
 8009e68:	e001      	b.n	8009e6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e6a:	230f      	movs	r3, #15
 8009e6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	371c      	adds	r7, #28
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d13a      	bne.n	8009f0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9e:	69da      	ldr	r2, [r3, #28]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	f003 030f 	and.w	r3, r3, #15
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	015a      	lsls	r2, r3, #5
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d155      	bne.n	8009f7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	78db      	ldrb	r3, [r3, #3]
 8009eea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009eec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	059b      	lsls	r3, r3, #22
 8009ef2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	0151      	lsls	r1, r2, #5
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	440a      	add	r2, r1
 8009efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	e036      	b.n	8009f7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f14:	69da      	ldr	r2, [r3, #28]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f003 030f 	and.w	r3, r3, #15
 8009f1e:	2101      	movs	r1, #1
 8009f20:	fa01 f303 	lsl.w	r3, r1, r3
 8009f24:	041b      	lsls	r3, r3, #16
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d11a      	bne.n	8009f7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	78db      	ldrb	r3, [r3, #3]
 8009f60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f62:	430b      	orrs	r3, r1
 8009f64:	4313      	orrs	r3, r2
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	0151      	lsls	r1, r2, #5
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	440a      	add	r2, r1
 8009f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
	...

08009f8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	785b      	ldrb	r3, [r3, #1]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d161      	bne.n	800a06c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fbe:	d11f      	bne.n	800a000 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	0151      	lsls	r1, r2, #5
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	440a      	add	r2, r1
 8009fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	0151      	lsls	r1, r2, #5
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	440a      	add	r2, r1
 8009ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ffa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ffe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	f003 030f 	and.w	r3, r3, #15
 800a010:	2101      	movs	r1, #1
 800a012:	fa01 f303 	lsl.w	r3, r1, r3
 800a016:	b29b      	uxth	r3, r3
 800a018:	43db      	mvns	r3, r3
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a020:	4013      	ands	r3, r2
 800a022:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02a:	69da      	ldr	r2, [r3, #28]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	2101      	movs	r1, #1
 800a036:	fa01 f303 	lsl.w	r3, r1, r3
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	43db      	mvns	r3, r3
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a044:	4013      	ands	r3, r2
 800a046:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	0159      	lsls	r1, r3, #5
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	440b      	add	r3, r1
 800a05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a062:	4619      	mov	r1, r3
 800a064:	4b35      	ldr	r3, [pc, #212]	; (800a13c <USB_DeactivateEndpoint+0x1b0>)
 800a066:	4013      	ands	r3, r2
 800a068:	600b      	str	r3, [r1, #0]
 800a06a:	e060      	b.n	800a12e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	015a      	lsls	r2, r3, #5
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a07e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a082:	d11f      	bne.n	800a0c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a09e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	f003 030f 	and.w	r3, r3, #15
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0da:	041b      	lsls	r3, r3, #16
 800a0dc:	43db      	mvns	r3, r3
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ee:	69da      	ldr	r2, [r3, #28]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f003 030f 	and.w	r3, r3, #15
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	43db      	mvns	r3, r3
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a108:	4013      	ands	r3, r2
 800a10a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	0159      	lsls	r1, r3, #5
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	440b      	add	r3, r1
 800a122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a126:	4619      	mov	r1, r3
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <USB_DeactivateEndpoint+0x1b4>)
 800a12a:	4013      	ands	r3, r2
 800a12c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	ec337800 	.word	0xec337800
 800a140:	eff37800 	.word	0xeff37800

0800a144 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08a      	sub	sp, #40	; 0x28
 800a148:	af02      	add	r7, sp, #8
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	4613      	mov	r3, r2
 800a150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	785b      	ldrb	r3, [r3, #1]
 800a160:	2b01      	cmp	r3, #1
 800a162:	f040 815c 	bne.w	800a41e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d132      	bne.n	800a1d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a18c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1b2:	69bb      	ldr	r3, [r7, #24]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	0151      	lsls	r1, r2, #5
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1cc:	0cdb      	lsrs	r3, r3, #19
 800a1ce:	04db      	lsls	r3, r3, #19
 800a1d0:	6113      	str	r3, [r2, #16]
 800a1d2:	e074      	b.n	800a2be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1ee:	0cdb      	lsrs	r3, r3, #19
 800a1f0:	04db      	lsls	r3, r3, #19
 800a1f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	69fa      	ldr	r2, [r7, #28]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a20e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a224:	691a      	ldr	r2, [r3, #16]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6959      	ldr	r1, [r3, #20]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	440b      	add	r3, r1
 800a230:	1e59      	subs	r1, r3, #1
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	fbb1 f3f3 	udiv	r3, r1, r3
 800a23a:	04d9      	lsls	r1, r3, #19
 800a23c:	4b9d      	ldr	r3, [pc, #628]	; (800a4b4 <USB_EPStartXfer+0x370>)
 800a23e:	400b      	ands	r3, r1
 800a240:	69b9      	ldr	r1, [r7, #24]
 800a242:	0148      	lsls	r0, r1, #5
 800a244:	69f9      	ldr	r1, [r7, #28]
 800a246:	4401      	add	r1, r0
 800a248:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a24c:	4313      	orrs	r3, r2
 800a24e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25c:	691a      	ldr	r2, [r3, #16]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a266:	69b9      	ldr	r1, [r7, #24]
 800a268:	0148      	lsls	r0, r1, #5
 800a26a:	69f9      	ldr	r1, [r7, #28]
 800a26c:	4401      	add	r1, r0
 800a26e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a272:	4313      	orrs	r3, r2
 800a274:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	78db      	ldrb	r3, [r3, #3]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d11f      	bne.n	800a2be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	0151      	lsls	r1, r2, #5
 800a290:	69fa      	ldr	r2, [r7, #28]
 800a292:	440a      	add	r2, r1
 800a294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a298:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a29c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	0151      	lsls	r1, r2, #5
 800a2b0:	69fa      	ldr	r2, [r7, #28]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d14b      	bne.n	800a35c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d8:	461a      	mov	r2, r3
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	78db      	ldrb	r3, [r3, #3]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d128      	bne.n	800a33a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d110      	bne.n	800a31a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	0151      	lsls	r1, r2, #5
 800a30a:	69fa      	ldr	r2, [r7, #28]
 800a30c:	440a      	add	r2, r1
 800a30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	e00f      	b.n	800a33a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	69ba      	ldr	r2, [r7, #24]
 800a32a:	0151      	lsls	r1, r2, #5
 800a32c:	69fa      	ldr	r2, [r7, #28]
 800a32e:	440a      	add	r2, r1
 800a330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a338:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	4413      	add	r3, r2
 800a342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	0151      	lsls	r1, r2, #5
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	440a      	add	r2, r1
 800a350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a354:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	e12f      	b.n	800a5bc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	4413      	add	r3, r2
 800a364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69ba      	ldr	r2, [r7, #24]
 800a36c:	0151      	lsls	r1, r2, #5
 800a36e:	69fa      	ldr	r2, [r7, #28]
 800a370:	440a      	add	r2, r1
 800a372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a376:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a37a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	78db      	ldrb	r3, [r3, #3]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d015      	beq.n	800a3b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 8117 	beq.w	800a5bc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	2101      	movs	r1, #1
 800a3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a4:	69f9      	ldr	r1, [r7, #28]
 800a3a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	634b      	str	r3, [r1, #52]	; 0x34
 800a3ae:	e105      	b.n	800a5bc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d110      	bne.n	800a3e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	0151      	lsls	r1, r2, #5
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	440a      	add	r2, r1
 800a3d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e00f      	b.n	800a402 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	69fa      	ldr	r2, [r7, #28]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a400:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	68d9      	ldr	r1, [r3, #12]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	781a      	ldrb	r2, [r3, #0]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	b298      	uxth	r0, r3
 800a410:	79fb      	ldrb	r3, [r7, #7]
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	4603      	mov	r3, r0
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 fa2b 	bl	800a872 <USB_WritePacket>
 800a41c:	e0ce      	b.n	800a5bc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	69fa      	ldr	r2, [r7, #28]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a438:	0cdb      	lsrs	r3, r3, #19
 800a43a:	04db      	lsls	r3, r3, #19
 800a43c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	69ba      	ldr	r2, [r7, #24]
 800a44e:	0151      	lsls	r1, r2, #5
 800a450:	69fa      	ldr	r2, [r7, #28]
 800a452:	440a      	add	r2, r1
 800a454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a458:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a45c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a460:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d126      	bne.n	800a4b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a476:	691a      	ldr	r2, [r3, #16]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a480:	69b9      	ldr	r1, [r7, #24]
 800a482:	0148      	lsls	r0, r1, #5
 800a484:	69f9      	ldr	r1, [r7, #28]
 800a486:	4401      	add	r1, r0
 800a488:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a48c:	4313      	orrs	r3, r2
 800a48e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	69fa      	ldr	r2, [r7, #28]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ae:	6113      	str	r3, [r2, #16]
 800a4b0:	e036      	b.n	800a520 <USB_EPStartXfer+0x3dc>
 800a4b2:	bf00      	nop
 800a4b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	695a      	ldr	r2, [r3, #20]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	1e5a      	subs	r2, r3, #1
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4cc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4da:	691a      	ldr	r2, [r3, #16]
 800a4dc:	8afb      	ldrh	r3, [r7, #22]
 800a4de:	04d9      	lsls	r1, r3, #19
 800a4e0:	4b39      	ldr	r3, [pc, #228]	; (800a5c8 <USB_EPStartXfer+0x484>)
 800a4e2:	400b      	ands	r3, r1
 800a4e4:	69b9      	ldr	r1, [r7, #24]
 800a4e6:	0148      	lsls	r0, r1, #5
 800a4e8:	69f9      	ldr	r1, [r7, #28]
 800a4ea:	4401      	add	r1, r0
 800a4ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a500:	691a      	ldr	r2, [r3, #16]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	8af9      	ldrh	r1, [r7, #22]
 800a508:	fb01 f303 	mul.w	r3, r1, r3
 800a50c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a510:	69b9      	ldr	r1, [r7, #24]
 800a512:	0148      	lsls	r0, r1, #5
 800a514:	69f9      	ldr	r1, [r7, #28]
 800a516:	4401      	add	r1, r0
 800a518:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a51c:	4313      	orrs	r3, r2
 800a51e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a520:	79fb      	ldrb	r3, [r7, #7]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d10d      	bne.n	800a542 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d009      	beq.n	800a542 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	68d9      	ldr	r1, [r3, #12]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a53e:	460a      	mov	r2, r1
 800a540:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	78db      	ldrb	r3, [r3, #3]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d128      	bne.n	800a59c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a556:	2b00      	cmp	r3, #0
 800a558:	d110      	bne.n	800a57c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	e00f      	b.n	800a59c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	0151      	lsls	r1, r2, #5
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	440a      	add	r2, r1
 800a592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a59a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	69fa      	ldr	r2, [r7, #28]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3720      	adds	r7, #32
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	1ff80000 	.word	0x1ff80000

0800a5cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	785b      	ldrb	r3, [r3, #1]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	f040 80cd 	bne.w	800a788 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d132      	bne.n	800a65c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	697a      	ldr	r2, [r7, #20]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a610:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a614:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a634:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a638:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	0151      	lsls	r1, r2, #5
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	440a      	add	r2, r1
 800a650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a654:	0cdb      	lsrs	r3, r3, #19
 800a656:	04db      	lsls	r3, r3, #19
 800a658:	6113      	str	r3, [r2, #16]
 800a65a:	e04e      	b.n	800a6fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	0151      	lsls	r1, r2, #5
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	440a      	add	r2, r1
 800a672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a676:	0cdb      	lsrs	r3, r3, #19
 800a678:	04db      	lsls	r3, r3, #19
 800a67a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	0151      	lsls	r1, r2, #5
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	440a      	add	r2, r1
 800a692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a696:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a69a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a69e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d903      	bls.n	800a6b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	0151      	lsls	r1, r2, #5
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	440a      	add	r2, r1
 800a6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e0:	691a      	ldr	r2, [r3, #16]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ea:	6939      	ldr	r1, [r7, #16]
 800a6ec:	0148      	lsls	r0, r1, #5
 800a6ee:	6979      	ldr	r1, [r7, #20]
 800a6f0:	4401      	add	r1, r0
 800a6f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d11e      	bne.n	800a73e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d009      	beq.n	800a71c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a714:	461a      	mov	r2, r3
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	015a      	lsls	r2, r3, #5
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	4413      	add	r3, r2
 800a724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	0151      	lsls	r1, r2, #5
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	440a      	add	r2, r1
 800a732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a736:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	e092      	b.n	800a864 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	0151      	lsls	r1, r2, #5
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	440a      	add	r2, r1
 800a754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a75c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d07e      	beq.n	800a864 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a76c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	2101      	movs	r1, #1
 800a778:	fa01 f303 	lsl.w	r3, r1, r3
 800a77c:	6979      	ldr	r1, [r7, #20]
 800a77e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a782:	4313      	orrs	r3, r2
 800a784:	634b      	str	r3, [r1, #52]	; 0x34
 800a786:	e06d      	b.n	800a864 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	0151      	lsls	r1, r2, #5
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	440a      	add	r2, r1
 800a79e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7a2:	0cdb      	lsrs	r3, r3, #19
 800a7a4:	04db      	lsls	r3, r3, #19
 800a7a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	0151      	lsls	r1, r2, #5
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	440a      	add	r2, r1
 800a7be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d003      	beq.n	800a7dc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	0151      	lsls	r1, r2, #5
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	440a      	add	r2, r1
 800a7f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a808:	691a      	ldr	r2, [r3, #16]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a812:	6939      	ldr	r1, [r7, #16]
 800a814:	0148      	lsls	r0, r1, #5
 800a816:	6979      	ldr	r1, [r7, #20]
 800a818:	4401      	add	r1, r0
 800a81a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a81e:	4313      	orrs	r3, r2
 800a820:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d10d      	bne.n	800a844 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	68d9      	ldr	r1, [r3, #12]
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	015a      	lsls	r2, r3, #5
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	4413      	add	r3, r2
 800a83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a840:	460a      	mov	r2, r1
 800a842:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	0151      	lsls	r1, r2, #5
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	440a      	add	r2, r1
 800a85a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	371c      	adds	r7, #28
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a872:	b480      	push	{r7}
 800a874:	b089      	sub	sp, #36	; 0x24
 800a876:	af00      	add	r7, sp, #0
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	60b9      	str	r1, [r7, #8]
 800a87c:	4611      	mov	r1, r2
 800a87e:	461a      	mov	r2, r3
 800a880:	460b      	mov	r3, r1
 800a882:	71fb      	strb	r3, [r7, #7]
 800a884:	4613      	mov	r3, r2
 800a886:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a890:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a894:	2b00      	cmp	r3, #0
 800a896:	d11a      	bne.n	800a8ce <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a898:	88bb      	ldrh	r3, [r7, #4]
 800a89a:	3303      	adds	r3, #3
 800a89c:	089b      	lsrs	r3, r3, #2
 800a89e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	e00f      	b.n	800a8c6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	031a      	lsls	r2, r3, #12
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	3304      	adds	r3, #4
 800a8be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	61bb      	str	r3, [r7, #24]
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d3eb      	bcc.n	800a8a6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3724      	adds	r7, #36	; 0x24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b089      	sub	sp, #36	; 0x24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a8f2:	88fb      	ldrh	r3, [r7, #6]
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	089b      	lsrs	r3, r3, #2
 800a8f8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	61bb      	str	r3, [r7, #24]
 800a8fe:	e00b      	b.n	800a918 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	3304      	adds	r3, #4
 800a910:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	3301      	adds	r3, #1
 800a916:	61bb      	str	r3, [r7, #24]
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d3ef      	bcc.n	800a900 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a920:	69fb      	ldr	r3, [r7, #28]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3724      	adds	r7, #36	; 0x24
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	785b      	ldrb	r3, [r3, #1]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d12c      	bne.n	800a9a4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	db12      	blt.n	800a982 <USB_EPSetStall+0x54>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00f      	beq.n	800a982 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	0151      	lsls	r1, r2, #5
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	440a      	add	r2, r1
 800a978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a97c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a980:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	0151      	lsls	r1, r2, #5
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	440a      	add	r2, r1
 800a998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a99c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9a0:	6013      	str	r3, [r2, #0]
 800a9a2:	e02b      	b.n	800a9fc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	db12      	blt.n	800a9dc <USB_EPSetStall+0xae>
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00f      	beq.n	800a9dc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	015a      	lsls	r2, r3, #5
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	0151      	lsls	r1, r2, #5
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	440a      	add	r2, r1
 800a9d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9da:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	0151      	lsls	r1, r2, #5
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	440a      	add	r2, r1
 800a9f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	785b      	ldrb	r3, [r3, #1]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d128      	bne.n	800aa78 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	0151      	lsls	r1, r2, #5
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	440a      	add	r2, r1
 800aa3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	78db      	ldrb	r3, [r3, #3]
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d003      	beq.n	800aa56 <USB_EPClearStall+0x4c>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	78db      	ldrb	r3, [r3, #3]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d138      	bne.n	800aac8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	0151      	lsls	r1, r2, #5
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	440a      	add	r2, r1
 800aa6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	e027      	b.n	800aac8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	0151      	lsls	r1, r2, #5
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	78db      	ldrb	r3, [r3, #3]
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d003      	beq.n	800aaa8 <USB_EPClearStall+0x9e>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	78db      	ldrb	r3, [r3, #3]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d10f      	bne.n	800aac8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aac6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaf4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aaf8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	78fb      	ldrb	r3, [r7, #3]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab0a:	68f9      	ldr	r1, [r7, #12]
 800ab0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab10:	4313      	orrs	r3, r2
 800ab12:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab3c:	f023 0302 	bic.w	r3, r3, #2
 800ab40:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ab42:	2003      	movs	r0, #3
 800ab44:	f7f7 ff08 	bl	8002958 <HAL_Delay>

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab6c:	f043 0302 	orr.w	r3, r3, #2
 800ab70:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ab72:	2003      	movs	r0, #3
 800ab74:	f7f7 fef0 	bl	8002958 <HAL_Delay>

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b085      	sub	sp, #20
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4013      	ands	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b085      	sub	sp, #20
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	4013      	ands	r3, r2
 800abca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	0c1b      	lsrs	r3, r3, #16
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	4013      	ands	r3, r2
 800abfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	b29b      	uxth	r3, r3
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3714      	adds	r7, #20
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	460b      	mov	r3, r1
 800ac56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac6e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac70:	78fb      	ldrb	r3, [r7, #3]
 800ac72:	f003 030f 	and.w	r3, r3, #15
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7c:	01db      	lsls	r3, r3, #7
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	693a      	ldr	r2, [r7, #16]
 800ac96:	4013      	ands	r3, r2
 800ac98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	371c      	adds	r7, #28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	f003 0301 	and.w	r3, r3, #1
}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ace2:	f023 0307 	bic.w	r3, r3, #7
 800ace6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
	...

0800ad0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	460b      	mov	r3, r1
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	333c      	adds	r3, #60	; 0x3c
 800ad22:	3304      	adds	r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	4a26      	ldr	r2, [pc, #152]	; (800adc4 <USB_EP0_OutStart+0xb8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d90a      	bls.n	800ad46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad40:	d101      	bne.n	800ad46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	e037      	b.n	800adb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad74:	f043 0318 	orr.w	r3, r3, #24
 800ad78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad8e:	7afb      	ldrb	r3, [r7, #11]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d10f      	bne.n	800adb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	4f54300a 	.word	0x4f54300a

0800adc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	3301      	adds	r3, #1
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4a13      	ldr	r2, [pc, #76]	; (800ae2c <USB_CoreReset+0x64>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d901      	bls.n	800ade6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e01b      	b.n	800ae1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	2b00      	cmp	r3, #0
 800adec:	daf2      	bge.n	800add4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	f043 0201 	orr.w	r2, r3, #1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3301      	adds	r3, #1
 800ae02:	60fb      	str	r3, [r7, #12]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <USB_CoreReset+0x64>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d901      	bls.n	800ae10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e006      	b.n	800ae1e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d0f0      	beq.n	800adfe <USB_CoreReset+0x36>

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	00030d40 	.word	0x00030d40

0800ae30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	460b      	mov	r3, r1
 800ae3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae40:	f002 f8d6 	bl	800cff0 <malloc>
 800ae44:	4603      	mov	r3, r0
 800ae46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d105      	bne.n	800ae5a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ae56:	2302      	movs	r3, #2
 800ae58:	e066      	b.n	800af28 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	7c1b      	ldrb	r3, [r3, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d119      	bne.n	800ae9e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae6e:	2202      	movs	r2, #2
 800ae70:	2181      	movs	r1, #129	; 0x81
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 ff43 	bl	800ccfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae82:	2202      	movs	r2, #2
 800ae84:	2101      	movs	r1, #1
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f001 ff39 	bl	800ccfe <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2210      	movs	r2, #16
 800ae98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ae9c:	e016      	b.n	800aecc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae9e:	2340      	movs	r3, #64	; 0x40
 800aea0:	2202      	movs	r2, #2
 800aea2:	2181      	movs	r1, #129	; 0x81
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 ff2a 	bl	800ccfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2201      	movs	r2, #1
 800aeae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aeb0:	2340      	movs	r3, #64	; 0x40
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 ff21 	bl	800ccfe <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2210      	movs	r2, #16
 800aec8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aecc:	2308      	movs	r3, #8
 800aece:	2203      	movs	r2, #3
 800aed0:	2182      	movs	r1, #130	; 0x82
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f001 ff13 	bl	800ccfe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7c1b      	ldrb	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d109      	bne.n	800af16 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af0c:	2101      	movs	r1, #1
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 ffe4 	bl	800cedc <USBD_LL_PrepareReceive>
 800af14:	e007      	b.n	800af26 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af1c:	2340      	movs	r3, #64	; 0x40
 800af1e:	2101      	movs	r1, #1
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 ffdb 	bl	800cedc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	460b      	mov	r3, r1
 800af3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af40:	2181      	movs	r1, #129	; 0x81
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 ff01 	bl	800cd4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af4e:	2101      	movs	r1, #1
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f001 fefa 	bl	800cd4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800af5e:	2182      	movs	r1, #130	; 0x82
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f001 fef2 	bl	800cd4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00e      	beq.n	800af9e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af90:	4618      	mov	r0, r3
 800af92:	f002 f835 	bl	800d000 <free>
    pdev->pClassData = NULL;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afb8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d03a      	beq.n	800b048 <USBD_CDC_Setup+0xa0>
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	f040 8097 	bne.w	800b106 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	88db      	ldrh	r3, [r3, #6]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d029      	beq.n	800b034 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	b25b      	sxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	da11      	bge.n	800b00e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff0:	689b      	ldr	r3, [r3, #8]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800aff6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	88d2      	ldrh	r2, [r2, #6]
 800affc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800affe:	6939      	ldr	r1, [r7, #16]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	88db      	ldrh	r3, [r3, #6]
 800b004:	461a      	mov	r2, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f001 fa6d 	bl	800c4e6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b00c:	e082      	b.n	800b114 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	785a      	ldrb	r2, [r3, #1]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	88db      	ldrh	r3, [r3, #6]
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b024:	6939      	ldr	r1, [r7, #16]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	88db      	ldrh	r3, [r3, #6]
 800b02a:	461a      	mov	r2, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 fa86 	bl	800c53e <USBD_CtlPrepareRx>
    break;
 800b032:	e06f      	b.n	800b114 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	7850      	ldrb	r0, [r2, #1]
 800b040:	2200      	movs	r2, #0
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	4798      	blx	r3
    break;
 800b046:	e065      	b.n	800b114 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	785b      	ldrb	r3, [r3, #1]
 800b04c:	2b0b      	cmp	r3, #11
 800b04e:	d84f      	bhi.n	800b0f0 <USBD_CDC_Setup+0x148>
 800b050:	a201      	add	r2, pc, #4	; (adr r2, 800b058 <USBD_CDC_Setup+0xb0>)
 800b052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b056:	bf00      	nop
 800b058:	0800b089 	.word	0x0800b089
 800b05c:	0800b0ff 	.word	0x0800b0ff
 800b060:	0800b0f1 	.word	0x0800b0f1
 800b064:	0800b0f1 	.word	0x0800b0f1
 800b068:	0800b0f1 	.word	0x0800b0f1
 800b06c:	0800b0f1 	.word	0x0800b0f1
 800b070:	0800b0f1 	.word	0x0800b0f1
 800b074:	0800b0f1 	.word	0x0800b0f1
 800b078:	0800b0f1 	.word	0x0800b0f1
 800b07c:	0800b0f1 	.word	0x0800b0f1
 800b080:	0800b0b1 	.word	0x0800b0b1
 800b084:	0800b0d9 	.word	0x0800b0d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d107      	bne.n	800b0a2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b092:	f107 030c 	add.w	r3, r7, #12
 800b096:	2202      	movs	r2, #2
 800b098:	4619      	mov	r1, r3
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f001 fa23 	bl	800c4e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b0a0:	e030      	b.n	800b104 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f9ad 	bl	800c404 <USBD_CtlError>
        ret = USBD_FAIL;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ae:	e029      	b.n	800b104 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d107      	bne.n	800b0ca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0ba:	f107 030f 	add.w	r3, r7, #15
 800b0be:	2201      	movs	r2, #1
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 fa0f 	bl	800c4e6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b0c8:	e01c      	b.n	800b104 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 f999 	bl	800c404 <USBD_CtlError>
        ret = USBD_FAIL;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d6:	e015      	b.n	800b104 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d00f      	beq.n	800b102 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f001 f98d 	bl	800c404 <USBD_CtlError>
        ret = USBD_FAIL;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b0ee:	e008      	b.n	800b102 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f001 f986 	bl	800c404 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b0fc:	e002      	b.n	800b104 <USBD_CDC_Setup+0x15c>
      break;
 800b0fe:	bf00      	nop
 800b100:	e008      	b.n	800b114 <USBD_CDC_Setup+0x16c>
      break;
 800b102:	bf00      	nop
    }
    break;
 800b104:	e006      	b.n	800b114 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 f97b 	bl	800c404 <USBD_CtlError>
    ret = USBD_FAIL;
 800b10e:	2303      	movs	r3, #3
 800b110:	75fb      	strb	r3, [r7, #23]
    break;
 800b112:	bf00      	nop
  }

  return (uint8_t)ret;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop

0800b120 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b132:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b13e:	2303      	movs	r3, #3
 800b140:	e049      	b.n	800b1d6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b148:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b14a:	78fa      	ldrb	r2, [r7, #3]
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	4613      	mov	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	440b      	add	r3, r1
 800b158:	3318      	adds	r3, #24
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d029      	beq.n	800b1b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	6879      	ldr	r1, [r7, #4]
 800b164:	4613      	mov	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	440b      	add	r3, r1
 800b16e:	3318      	adds	r3, #24
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	78f9      	ldrb	r1, [r7, #3]
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	460b      	mov	r3, r1
 800b178:	00db      	lsls	r3, r3, #3
 800b17a:	1a5b      	subs	r3, r3, r1
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4403      	add	r3, r0
 800b180:	3344      	adds	r3, #68	; 0x44
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	fbb2 f1f3 	udiv	r1, r2, r3
 800b188:	fb03 f301 	mul.w	r3, r3, r1
 800b18c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d110      	bne.n	800b1b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	6879      	ldr	r1, [r7, #4]
 800b196:	4613      	mov	r3, r2
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	440b      	add	r3, r1
 800b1a0:	3318      	adds	r3, #24
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1a6:	78f9      	ldrb	r1, [r7, #3]
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f001 fe74 	bl	800ce9a <USBD_LL_Transmit>
 800b1b2:	e00f      	b.n	800b1d4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b1d0:	78fa      	ldrb	r2, [r7, #3]
 800b1d2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b084      	sub	sp, #16
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e015      	b.n	800b22c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b200:	78fb      	ldrb	r3, [r7, #3]
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f001 fe8a 	bl	800cf1e <USBD_LL_GetRxDataSize>
 800b20a:	4602      	mov	r2, r0
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b226:	4611      	mov	r1, r2
 800b228:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b242:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d015      	beq.n	800b27a <USBD_CDC_EP0_RxReady+0x46>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b254:	2bff      	cmp	r3, #255	; 0xff
 800b256:	d010      	beq.n	800b27a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b266:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b26e:	b292      	uxth	r2, r2
 800b270:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	22ff      	movs	r2, #255	; 0xff
 800b276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2243      	movs	r2, #67	; 0x43
 800b290:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b292:	4b03      	ldr	r3, [pc, #12]	; (800b2a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr
 800b2a0:	2000009c 	.word	0x2000009c

0800b2a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2243      	movs	r2, #67	; 0x43
 800b2b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b2b2:	4b03      	ldr	r3, [pc, #12]	; (800b2c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20000058 	.word	0x20000058

0800b2c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2243      	movs	r2, #67	; 0x43
 800b2d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b2d2:	4b03      	ldr	r3, [pc, #12]	; (800b2e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	200000e0 	.word	0x200000e0

0800b2e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	220a      	movs	r2, #10
 800b2f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2f2:	4b03      	ldr	r3, [pc, #12]	; (800b300 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	20000014 	.word	0x20000014

0800b304 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b314:	2303      	movs	r3, #3
 800b316:	e004      	b.n	800b322 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b32e:	b480      	push	{r7}
 800b330:	b087      	sub	sp, #28
 800b332:	af00      	add	r7, sp, #0
 800b334:	60f8      	str	r0, [r7, #12]
 800b336:	60b9      	str	r1, [r7, #8]
 800b338:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b340:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	371c      	adds	r7, #28
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b370:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b396:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e016      	b.n	800b3d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7c1b      	ldrb	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f001 fd8e 	bl	800cedc <USBD_LL_PrepareReceive>
 800b3c0:	e007      	b.n	800b3d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b3c8:	2340      	movs	r3, #64	; 0x40
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f001 fd85 	bl	800cedc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	e025      	b.n	800b440 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	79fa      	ldrb	r2, [r7, #7]
 800b432:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f001 fbfb 	bl	800cc30 <USBD_LL_Init>
 800b43a:	4603      	mov	r3, r0
 800b43c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b452:	2300      	movs	r3, #0
 800b454:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e010      	b.n	800b482 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b470:	f107 020e 	add.w	r2, r7, #14
 800b474:	4610      	mov	r0, r2
 800b476:	4798      	blx	r3
 800b478:	4602      	mov	r2, r0
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b082      	sub	sp, #8
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 fc18 	bl	800ccc8 <USBD_LL_Start>
 800b498:	4603      	mov	r3, r0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d009      	beq.n	800b4e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	78fa      	ldrb	r2, [r7, #3]
 800b4dc:	4611      	mov	r1, r2
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	4798      	blx	r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	78fa      	ldrb	r2, [r7, #3]
 800b510:	4611      	mov	r1, r2
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	4798      	blx	r3
  }

  return USBD_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f000 ff2c 	bl	800c390 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b546:	461a      	mov	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b554:	f003 031f 	and.w	r3, r3, #31
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d00e      	beq.n	800b57a <USBD_LL_SetupStage+0x5a>
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d302      	bcc.n	800b566 <USBD_LL_SetupStage+0x46>
 800b560:	2b02      	cmp	r3, #2
 800b562:	d014      	beq.n	800b58e <USBD_LL_SetupStage+0x6e>
 800b564:	e01d      	b.n	800b5a2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fa18 	bl	800b9a4 <USBD_StdDevReq>
 800b574:	4603      	mov	r3, r0
 800b576:	73fb      	strb	r3, [r7, #15]
      break;
 800b578:	e020      	b.n	800b5bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fa7c 	bl	800ba80 <USBD_StdItfReq>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]
      break;
 800b58c:	e016      	b.n	800b5bc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fab8 	bl	800bb0c <USBD_StdEPReq>
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]
      break;
 800b5a0:	e00c      	b.n	800b5bc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b5a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 fbe9 	bl	800cd88 <USBD_LL_StallEP>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ba:	bf00      	nop
  }

  return ret;
 800b5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b086      	sub	sp, #24
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	607a      	str	r2, [r7, #4]
 800b5d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5d4:	7afb      	ldrb	r3, [r7, #11]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d137      	bne.n	800b64a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b5e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d14a      	bne.n	800b682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d913      	bls.n	800b620 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	1ad2      	subs	r2, r2, r3
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	4293      	cmp	r3, r2
 800b610:	bf28      	it	cs
 800b612:	4613      	movcs	r3, r2
 800b614:	461a      	mov	r2, r3
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 ffad 	bl	800c578 <USBD_CtlContinueRx>
 800b61e:	e030      	b.n	800b682 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00a      	beq.n	800b642 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b632:	2b03      	cmp	r3, #3
 800b634:	d105      	bne.n	800b642 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 ffa9 	bl	800c59a <USBD_CtlSendStatus>
 800b648:	e01b      	b.n	800b682 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d013      	beq.n	800b67e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d10e      	bne.n	800b67e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	7afa      	ldrb	r2, [r7, #11]
 800b66a:	4611      	mov	r1, r2
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	4798      	blx	r3
 800b670:	4603      	mov	r3, r0
 800b672:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b674:	7dfb      	ldrb	r3, [r7, #23]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	e002      	b.n	800b684 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b67e:	2303      	movs	r3, #3
 800b680:	e000      	b.n	800b684 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	460b      	mov	r3, r1
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b69a:	7afb      	ldrb	r3, [r7, #11]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d16a      	bne.n	800b776 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3314      	adds	r3, #20
 800b6a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d155      	bne.n	800b75c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	689a      	ldr	r2, [r3, #8]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d914      	bls.n	800b6e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	689a      	ldr	r2, [r3, #8]
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	1ad2      	subs	r2, r2, r3
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	6879      	ldr	r1, [r7, #4]
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 ff22 	bl	800c51c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2100      	movs	r1, #0
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f001 fbfc 	bl	800cedc <USBD_LL_PrepareReceive>
 800b6e4:	e03a      	b.n	800b75c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d11c      	bne.n	800b72c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d316      	bcc.n	800b72c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b708:	429a      	cmp	r2, r3
 800b70a:	d20f      	bcs.n	800b72c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b70c:	2200      	movs	r2, #0
 800b70e:	2100      	movs	r1, #0
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 ff03 	bl	800c51c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b71e:	2300      	movs	r3, #0
 800b720:	2200      	movs	r2, #0
 800b722:	2100      	movs	r1, #0
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f001 fbd9 	bl	800cedc <USBD_LL_PrepareReceive>
 800b72a:	e017      	b.n	800b75c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00a      	beq.n	800b74e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b73e:	2b03      	cmp	r3, #3
 800b740:	d105      	bne.n	800b74e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b74e:	2180      	movs	r1, #128	; 0x80
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f001 fb19 	bl	800cd88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 ff32 	bl	800c5c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b762:	2b01      	cmp	r3, #1
 800b764:	d123      	bne.n	800b7ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fe9b 	bl	800b4a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b774:	e01b      	b.n	800b7ae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d013      	beq.n	800b7aa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d10e      	bne.n	800b7aa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	7afa      	ldrb	r2, [r7, #11]
 800b796:	4611      	mov	r1, r2
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	4798      	blx	r3
 800b79c:	4603      	mov	r3, r0
 800b79e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
 800b7a8:	e002      	b.n	800b7b0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e000      	b.n	800b7b0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6852      	ldr	r2, [r2, #4]
 800b7f4:	b2d2      	uxtb	r2, r2
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7fc:	2340      	movs	r3, #64	; 0x40
 800b7fe:	2200      	movs	r2, #0
 800b800:	2100      	movs	r1, #0
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f001 fa7b 	bl	800ccfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2240      	movs	r2, #64	; 0x40
 800b814:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b818:	2340      	movs	r3, #64	; 0x40
 800b81a:	2200      	movs	r2, #0
 800b81c:	2180      	movs	r1, #128	; 0x80
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f001 fa6d 	bl	800ccfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2240      	movs	r2, #64	; 0x40
 800b82e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b083      	sub	sp, #12
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	460b      	mov	r3, r1
 800b844:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	78fa      	ldrb	r2, [r7, #3]
 800b84a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2204      	movs	r2, #4
 800b872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b892:	2b04      	cmp	r3, #4
 800b894:	d105      	bne.n	800b8a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	d10b      	bne.n	800b8da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d005      	beq.n	800b8da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr

0800b92e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b944:	2b00      	cmp	r3, #0
 800b946:	d009      	beq.n	800b95c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	6852      	ldr	r2, [r2, #4]
 800b954:	b2d2      	uxtb	r2, r2
 800b956:	4611      	mov	r1, r2
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	4798      	blx	r3
  }

  return USBD_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b966:	b480      	push	{r7}
 800b968:	b087      	sub	sp, #28
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	3301      	adds	r3, #1
 800b97c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b984:	8a3b      	ldrh	r3, [r7, #16]
 800b986:	021b      	lsls	r3, r3, #8
 800b988:	b21a      	sxth	r2, r3
 800b98a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b98e:	4313      	orrs	r3, r2
 800b990:	b21b      	sxth	r3, r3
 800b992:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b994:	89fb      	ldrh	r3, [r7, #14]
}
 800b996:	4618      	mov	r0, r3
 800b998:	371c      	adds	r7, #28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9ba:	2b20      	cmp	r3, #32
 800b9bc:	d004      	beq.n	800b9c8 <USBD_StdDevReq+0x24>
 800b9be:	2b40      	cmp	r3, #64	; 0x40
 800b9c0:	d002      	beq.n	800b9c8 <USBD_StdDevReq+0x24>
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00a      	beq.n	800b9dc <USBD_StdDevReq+0x38>
 800b9c6:	e050      	b.n	800ba6a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	6839      	ldr	r1, [r7, #0]
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	4798      	blx	r3
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9da:	e04b      	b.n	800ba74 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	785b      	ldrb	r3, [r3, #1]
 800b9e0:	2b09      	cmp	r3, #9
 800b9e2:	d83c      	bhi.n	800ba5e <USBD_StdDevReq+0xba>
 800b9e4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <USBD_StdDevReq+0x48>)
 800b9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ea:	bf00      	nop
 800b9ec:	0800ba41 	.word	0x0800ba41
 800b9f0:	0800ba55 	.word	0x0800ba55
 800b9f4:	0800ba5f 	.word	0x0800ba5f
 800b9f8:	0800ba4b 	.word	0x0800ba4b
 800b9fc:	0800ba5f 	.word	0x0800ba5f
 800ba00:	0800ba1f 	.word	0x0800ba1f
 800ba04:	0800ba15 	.word	0x0800ba15
 800ba08:	0800ba5f 	.word	0x0800ba5f
 800ba0c:	0800ba37 	.word	0x0800ba37
 800ba10:	0800ba29 	.word	0x0800ba29
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f9ce 	bl	800bdb8 <USBD_GetDescriptor>
      break;
 800ba1c:	e024      	b.n	800ba68 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fb33 	bl	800c08c <USBD_SetAddress>
      break;
 800ba26:	e01f      	b.n	800ba68 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fb70 	bl	800c110 <USBD_SetConfig>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]
      break;
 800ba34:	e018      	b.n	800ba68 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ba36:	6839      	ldr	r1, [r7, #0]
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fc0d 	bl	800c258 <USBD_GetConfig>
      break;
 800ba3e:	e013      	b.n	800ba68 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fc3c 	bl	800c2c0 <USBD_GetStatus>
      break;
 800ba48:	e00e      	b.n	800ba68 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fc6a 	bl	800c326 <USBD_SetFeature>
      break;
 800ba52:	e009      	b.n	800ba68 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fc79 	bl	800c34e <USBD_ClrFeature>
      break;
 800ba5c:	e004      	b.n	800ba68 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fccf 	bl	800c404 <USBD_CtlError>
      break;
 800ba66:	bf00      	nop
    }
    break;
 800ba68:	e004      	b.n	800ba74 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fcc9 	bl	800c404 <USBD_CtlError>
    break;
 800ba72:	bf00      	nop
  }

  return ret;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop

0800ba80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	d003      	beq.n	800baa2 <USBD_StdItfReq+0x22>
 800ba9a:	2b40      	cmp	r3, #64	; 0x40
 800ba9c:	d001      	beq.n	800baa2 <USBD_StdItfReq+0x22>
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d12a      	bne.n	800baf8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa8:	3b01      	subs	r3, #1
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d81d      	bhi.n	800baea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	889b      	ldrh	r3, [r3, #4]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d813      	bhi.n	800bae0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	4798      	blx	r3
 800bac6:	4603      	mov	r3, r0
 800bac8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	88db      	ldrh	r3, [r3, #6]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d110      	bne.n	800baf4 <USBD_StdItfReq+0x74>
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10d      	bne.n	800baf4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fd5e 	bl	800c59a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bade:	e009      	b.n	800baf4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bae0:	6839      	ldr	r1, [r7, #0]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fc8e 	bl	800c404 <USBD_CtlError>
      break;
 800bae8:	e004      	b.n	800baf4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fc89 	bl	800c404 <USBD_CtlError>
      break;
 800baf2:	e000      	b.n	800baf6 <USBD_StdItfReq+0x76>
      break;
 800baf4:	bf00      	nop
    }
    break;
 800baf6:	e004      	b.n	800bb02 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fc82 	bl	800c404 <USBD_CtlError>
    break;
 800bb00:	bf00      	nop
  }

  return ret;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	889b      	ldrh	r3, [r3, #4]
 800bb1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb28:	2b20      	cmp	r3, #32
 800bb2a:	d004      	beq.n	800bb36 <USBD_StdEPReq+0x2a>
 800bb2c:	2b40      	cmp	r3, #64	; 0x40
 800bb2e:	d002      	beq.n	800bb36 <USBD_StdEPReq+0x2a>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00a      	beq.n	800bb4a <USBD_StdEPReq+0x3e>
 800bb34:	e135      	b.n	800bda2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	4798      	blx	r3
 800bb44:	4603      	mov	r3, r0
 800bb46:	73fb      	strb	r3, [r7, #15]
    break;
 800bb48:	e130      	b.n	800bdac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	785b      	ldrb	r3, [r3, #1]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d03e      	beq.n	800bbd0 <USBD_StdEPReq+0xc4>
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d002      	beq.n	800bb5c <USBD_StdEPReq+0x50>
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d077      	beq.n	800bc4a <USBD_StdEPReq+0x13e>
 800bb5a:	e11c      	b.n	800bd96 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d002      	beq.n	800bb6c <USBD_StdEPReq+0x60>
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d015      	beq.n	800bb96 <USBD_StdEPReq+0x8a>
 800bb6a:	e02b      	b.n	800bbc4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb6c:	7bbb      	ldrb	r3, [r7, #14]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00c      	beq.n	800bb8c <USBD_StdEPReq+0x80>
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	2b80      	cmp	r3, #128	; 0x80
 800bb76:	d009      	beq.n	800bb8c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f001 f903 	bl	800cd88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb82:	2180      	movs	r1, #128	; 0x80
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f001 f8ff 	bl	800cd88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bb8a:	e020      	b.n	800bbce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fc38 	bl	800c404 <USBD_CtlError>
        break;
 800bb94:	e01b      	b.n	800bbce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	885b      	ldrh	r3, [r3, #2]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10e      	bne.n	800bbbc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00b      	beq.n	800bbbc <USBD_StdEPReq+0xb0>
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
 800bba6:	2b80      	cmp	r3, #128	; 0x80
 800bba8:	d008      	beq.n	800bbbc <USBD_StdEPReq+0xb0>
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	88db      	ldrh	r3, [r3, #6]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d104      	bne.n	800bbbc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbb2:	7bbb      	ldrb	r3, [r7, #14]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 f8e6 	bl	800cd88 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fcec 	bl	800c59a <USBD_CtlSendStatus>

        break;
 800bbc2:	e004      	b.n	800bbce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fc1c 	bl	800c404 <USBD_CtlError>
        break;
 800bbcc:	bf00      	nop
      }
      break;
 800bbce:	e0e7      	b.n	800bda0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d002      	beq.n	800bbe0 <USBD_StdEPReq+0xd4>
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d015      	beq.n	800bc0a <USBD_StdEPReq+0xfe>
 800bbde:	e02d      	b.n	800bc3c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00c      	beq.n	800bc00 <USBD_StdEPReq+0xf4>
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	2b80      	cmp	r3, #128	; 0x80
 800bbea:	d009      	beq.n	800bc00 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f001 f8c9 	bl	800cd88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbf6:	2180      	movs	r1, #128	; 0x80
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f001 f8c5 	bl	800cd88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bbfe:	e023      	b.n	800bc48 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800bc00:	6839      	ldr	r1, [r7, #0]
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fbfe 	bl	800c404 <USBD_CtlError>
        break;
 800bc08:	e01e      	b.n	800bc48 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	885b      	ldrh	r3, [r3, #2]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d119      	bne.n	800bc46 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d004      	beq.n	800bc26 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 f8d0 	bl	800cdc6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fcb7 	bl	800c59a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	4798      	blx	r3
        }
        break;
 800bc3a:	e004      	b.n	800bc46 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 fbe0 	bl	800c404 <USBD_CtlError>
        break;
 800bc44:	e000      	b.n	800bc48 <USBD_StdEPReq+0x13c>
        break;
 800bc46:	bf00      	nop
      }
      break;
 800bc48:	e0aa      	b.n	800bda0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d002      	beq.n	800bc5a <USBD_StdEPReq+0x14e>
 800bc54:	2b03      	cmp	r3, #3
 800bc56:	d032      	beq.n	800bcbe <USBD_StdEPReq+0x1b2>
 800bc58:	e097      	b.n	800bd8a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d007      	beq.n	800bc70 <USBD_StdEPReq+0x164>
 800bc60:	7bbb      	ldrb	r3, [r7, #14]
 800bc62:	2b80      	cmp	r3, #128	; 0x80
 800bc64:	d004      	beq.n	800bc70 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fbcb 	bl	800c404 <USBD_CtlError>
          break;
 800bc6e:	e091      	b.n	800bd94 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	da0b      	bge.n	800bc90 <USBD_StdEPReq+0x184>
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc7e:	4613      	mov	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	3310      	adds	r3, #16
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	3304      	adds	r3, #4
 800bc8e:	e00b      	b.n	800bca8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc96:	4613      	mov	r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	4413      	add	r3, r2
 800bca6:	3304      	adds	r3, #4
 800bca8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	2200      	movs	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fc15 	bl	800c4e6 <USBD_CtlSendData>
        break;
 800bcbc:	e06a      	b.n	800bd94 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800bcbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	da11      	bge.n	800bcea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	f003 020f 	and.w	r2, r3, #15
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3324      	adds	r3, #36	; 0x24
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d117      	bne.n	800bd10 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fb8e 	bl	800c404 <USBD_CtlError>
            break;
 800bce8:	e054      	b.n	800bd94 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
 800bcec:	f003 020f 	and.w	r2, r3, #15
 800bcf0:	6879      	ldr	r1, [r7, #4]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd00:	881b      	ldrh	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d104      	bne.n	800bd10 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fb7b 	bl	800c404 <USBD_CtlError>
            break;
 800bd0e:	e041      	b.n	800bd94 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	da0b      	bge.n	800bd30 <USBD_StdEPReq+0x224>
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd1e:	4613      	mov	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	3310      	adds	r3, #16
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	e00b      	b.n	800bd48 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd36:	4613      	mov	r3, r2
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	4413      	add	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	4413      	add	r3, r2
 800bd46:	3304      	adds	r3, #4
 800bd48:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <USBD_StdEPReq+0x24a>
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b80      	cmp	r3, #128	; 0x80
 800bd54:	d103      	bne.n	800bd5e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	e00e      	b.n	800bd7c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd5e:	7bbb      	ldrb	r3, [r7, #14]
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f001 f84e 	bl	800ce04 <USBD_LL_IsStallEP>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d003      	beq.n	800bd76 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2201      	movs	r2, #1
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	e002      	b.n	800bd7c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fbaf 	bl	800c4e6 <USBD_CtlSendData>
          break;
 800bd88:	e004      	b.n	800bd94 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fb39 	bl	800c404 <USBD_CtlError>
        break;
 800bd92:	bf00      	nop
      }
      break;
 800bd94:	e004      	b.n	800bda0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fb33 	bl	800c404 <USBD_CtlError>
      break;
 800bd9e:	bf00      	nop
    }
    break;
 800bda0:	e004      	b.n	800bdac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fb2d 	bl	800c404 <USBD_CtlError>
    break;
 800bdaa:	bf00      	nop
  }

  return ret;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
	...

0800bdb8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	885b      	ldrh	r3, [r3, #2]
 800bdd2:	0a1b      	lsrs	r3, r3, #8
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	2b06      	cmp	r3, #6
 800bdda:	f200 8128 	bhi.w	800c02e <USBD_GetDescriptor+0x276>
 800bdde:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <USBD_GetDescriptor+0x2c>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800be01 	.word	0x0800be01
 800bde8:	0800be19 	.word	0x0800be19
 800bdec:	0800be59 	.word	0x0800be59
 800bdf0:	0800c02f 	.word	0x0800c02f
 800bdf4:	0800c02f 	.word	0x0800c02f
 800bdf8:	0800bfcf 	.word	0x0800bfcf
 800bdfc:	0800bffb 	.word	0x0800bffb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	7c12      	ldrb	r2, [r2, #16]
 800be0c:	f107 0108 	add.w	r1, r7, #8
 800be10:	4610      	mov	r0, r2
 800be12:	4798      	blx	r3
 800be14:	60f8      	str	r0, [r7, #12]
    break;
 800be16:	e112      	b.n	800c03e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7c1b      	ldrb	r3, [r3, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10d      	bne.n	800be3c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be28:	f107 0208 	add.w	r2, r7, #8
 800be2c:	4610      	mov	r0, r2
 800be2e:	4798      	blx	r3
 800be30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3301      	adds	r3, #1
 800be36:	2202      	movs	r2, #2
 800be38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800be3a:	e100      	b.n	800c03e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be44:	f107 0208 	add.w	r2, r7, #8
 800be48:	4610      	mov	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3301      	adds	r3, #1
 800be52:	2202      	movs	r2, #2
 800be54:	701a      	strb	r2, [r3, #0]
    break;
 800be56:	e0f2      	b.n	800c03e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	885b      	ldrh	r3, [r3, #2]
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b05      	cmp	r3, #5
 800be60:	f200 80ac 	bhi.w	800bfbc <USBD_GetDescriptor+0x204>
 800be64:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <USBD_GetDescriptor+0xb4>)
 800be66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6a:	bf00      	nop
 800be6c:	0800be85 	.word	0x0800be85
 800be70:	0800beb9 	.word	0x0800beb9
 800be74:	0800beed 	.word	0x0800beed
 800be78:	0800bf21 	.word	0x0800bf21
 800be7c:	0800bf55 	.word	0x0800bf55
 800be80:	0800bf89 	.word	0x0800bf89
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00b      	beq.n	800bea8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	7c12      	ldrb	r2, [r2, #16]
 800be9c:	f107 0108 	add.w	r1, r7, #8
 800bea0:	4610      	mov	r0, r2
 800bea2:	4798      	blx	r3
 800bea4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bea6:	e091      	b.n	800bfcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 faaa 	bl	800c404 <USBD_CtlError>
        err++;
 800beb0:	7afb      	ldrb	r3, [r7, #11]
 800beb2:	3301      	adds	r3, #1
 800beb4:	72fb      	strb	r3, [r7, #11]
      break;
 800beb6:	e089      	b.n	800bfcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00b      	beq.n	800bedc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	7c12      	ldrb	r2, [r2, #16]
 800bed0:	f107 0108 	add.w	r1, r7, #8
 800bed4:	4610      	mov	r0, r2
 800bed6:	4798      	blx	r3
 800bed8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beda:	e077      	b.n	800bfcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fa90 	bl	800c404 <USBD_CtlError>
        err++;
 800bee4:	7afb      	ldrb	r3, [r7, #11]
 800bee6:	3301      	adds	r3, #1
 800bee8:	72fb      	strb	r3, [r7, #11]
      break;
 800beea:	e06f      	b.n	800bfcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00b      	beq.n	800bf10 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	7c12      	ldrb	r2, [r2, #16]
 800bf04:	f107 0108 	add.w	r1, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf0e:	e05d      	b.n	800bfcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa76 	bl	800c404 <USBD_CtlError>
        err++;
 800bf18:	7afb      	ldrb	r3, [r7, #11]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	72fb      	strb	r3, [r7, #11]
      break;
 800bf1e:	e055      	b.n	800bfcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00b      	beq.n	800bf44 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf32:	691b      	ldr	r3, [r3, #16]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	7c12      	ldrb	r2, [r2, #16]
 800bf38:	f107 0108 	add.w	r1, r7, #8
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	4798      	blx	r3
 800bf40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf42:	e043      	b.n	800bfcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa5c 	bl	800c404 <USBD_CtlError>
        err++;
 800bf4c:	7afb      	ldrb	r3, [r7, #11]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	72fb      	strb	r3, [r7, #11]
      break;
 800bf52:	e03b      	b.n	800bfcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00b      	beq.n	800bf78 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	7c12      	ldrb	r2, [r2, #16]
 800bf6c:	f107 0108 	add.w	r1, r7, #8
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
 800bf74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf76:	e029      	b.n	800bfcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa42 	bl	800c404 <USBD_CtlError>
        err++;
 800bf80:	7afb      	ldrb	r3, [r7, #11]
 800bf82:	3301      	adds	r3, #1
 800bf84:	72fb      	strb	r3, [r7, #11]
      break;
 800bf86:	e021      	b.n	800bfcc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00b      	beq.n	800bfac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	7c12      	ldrb	r2, [r2, #16]
 800bfa0:	f107 0108 	add.w	r1, r7, #8
 800bfa4:	4610      	mov	r0, r2
 800bfa6:	4798      	blx	r3
 800bfa8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfaa:	e00f      	b.n	800bfcc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fa28 	bl	800c404 <USBD_CtlError>
        err++;
 800bfb4:	7afb      	ldrb	r3, [r7, #11]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	72fb      	strb	r3, [r7, #11]
      break;
 800bfba:	e007      	b.n	800bfcc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fa20 	bl	800c404 <USBD_CtlError>
      err++;
 800bfc4:	7afb      	ldrb	r3, [r7, #11]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800bfca:	bf00      	nop
    }
    break;
 800bfcc:	e037      	b.n	800c03e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7c1b      	ldrb	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d109      	bne.n	800bfea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfde:	f107 0208 	add.w	r2, r7, #8
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	4798      	blx	r3
 800bfe6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bfe8:	e029      	b.n	800c03e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fa09 	bl	800c404 <USBD_CtlError>
      err++;
 800bff2:	7afb      	ldrb	r3, [r7, #11]
 800bff4:	3301      	adds	r3, #1
 800bff6:	72fb      	strb	r3, [r7, #11]
    break;
 800bff8:	e021      	b.n	800c03e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	7c1b      	ldrb	r3, [r3, #16]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10d      	bne.n	800c01e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00a:	f107 0208 	add.w	r2, r7, #8
 800c00e:	4610      	mov	r0, r2
 800c010:	4798      	blx	r3
 800c012:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	3301      	adds	r3, #1
 800c018:	2207      	movs	r2, #7
 800c01a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c01c:	e00f      	b.n	800c03e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 f9ef 	bl	800c404 <USBD_CtlError>
      err++;
 800c026:	7afb      	ldrb	r3, [r7, #11]
 800c028:	3301      	adds	r3, #1
 800c02a:	72fb      	strb	r3, [r7, #11]
    break;
 800c02c:	e007      	b.n	800c03e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f9e7 	bl	800c404 <USBD_CtlError>
    err++;
 800c036:	7afb      	ldrb	r3, [r7, #11]
 800c038:	3301      	adds	r3, #1
 800c03a:	72fb      	strb	r3, [r7, #11]
    break;
 800c03c:	bf00      	nop
  }

  if (err != 0U)
 800c03e:	7afb      	ldrb	r3, [r7, #11]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d11e      	bne.n	800c082 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	88db      	ldrh	r3, [r3, #6]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d016      	beq.n	800c07a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c04c:	893b      	ldrh	r3, [r7, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00e      	beq.n	800c070 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	88da      	ldrh	r2, [r3, #6]
 800c056:	893b      	ldrh	r3, [r7, #8]
 800c058:	4293      	cmp	r3, r2
 800c05a:	bf28      	it	cs
 800c05c:	4613      	movcs	r3, r2
 800c05e:	b29b      	uxth	r3, r3
 800c060:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c062:	893b      	ldrh	r3, [r7, #8]
 800c064:	461a      	mov	r2, r3
 800c066:	68f9      	ldr	r1, [r7, #12]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fa3c 	bl	800c4e6 <USBD_CtlSendData>
 800c06e:	e009      	b.n	800c084 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 f9c6 	bl	800c404 <USBD_CtlError>
 800c078:	e004      	b.n	800c084 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fa8d 	bl	800c59a <USBD_CtlSendStatus>
 800c080:	e000      	b.n	800c084 <USBD_GetDescriptor+0x2cc>
    return;
 800c082:	bf00      	nop
    }
  }
}
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop

0800c08c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	889b      	ldrh	r3, [r3, #4]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d130      	bne.n	800c100 <USBD_SetAddress+0x74>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	88db      	ldrh	r3, [r3, #6]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d12c      	bne.n	800c100 <USBD_SetAddress+0x74>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	885b      	ldrh	r3, [r3, #2]
 800c0aa:	2b7f      	cmp	r3, #127	; 0x7f
 800c0ac:	d828      	bhi.n	800c100 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	885b      	ldrh	r3, [r3, #2]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d104      	bne.n	800c0ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f99c 	bl	800c404 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0cc:	e01c      	b.n	800c108 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	7bfa      	ldrb	r2, [r7, #15]
 800c0d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 febe 	bl	800ce5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fa5a 	bl	800c59a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d004      	beq.n	800c0f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0f4:	e008      	b.n	800c108 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0fe:	e003      	b.n	800c108 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f97e 	bl	800c404 <USBD_CtlError>
  }
}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	885b      	ldrh	r3, [r3, #2]
 800c122:	b2da      	uxtb	r2, r3
 800c124:	4b4b      	ldr	r3, [pc, #300]	; (800c254 <USBD_SetConfig+0x144>)
 800c126:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c128:	4b4a      	ldr	r3, [pc, #296]	; (800c254 <USBD_SetConfig+0x144>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d905      	bls.n	800c13c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f966 	bl	800c404 <USBD_CtlError>
    return USBD_FAIL;
 800c138:	2303      	movs	r3, #3
 800c13a:	e087      	b.n	800c24c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c142:	2b02      	cmp	r3, #2
 800c144:	d002      	beq.n	800c14c <USBD_SetConfig+0x3c>
 800c146:	2b03      	cmp	r3, #3
 800c148:	d025      	beq.n	800c196 <USBD_SetConfig+0x86>
 800c14a:	e071      	b.n	800c230 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c14c:	4b41      	ldr	r3, [pc, #260]	; (800c254 <USBD_SetConfig+0x144>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d01c      	beq.n	800c18e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c154:	4b3f      	ldr	r3, [pc, #252]	; (800c254 <USBD_SetConfig+0x144>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	461a      	mov	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c15e:	4b3d      	ldr	r3, [pc, #244]	; (800c254 <USBD_SetConfig+0x144>)
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff f9a7 	bl	800b4b8 <USBD_SetClassConfig>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d004      	beq.n	800c17e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f944 	bl	800c404 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c17c:	e065      	b.n	800c24a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fa0b 	bl	800c59a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2203      	movs	r2, #3
 800c188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c18c:	e05d      	b.n	800c24a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fa03 	bl	800c59a <USBD_CtlSendStatus>
    break;
 800c194:	e059      	b.n	800c24a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c196:	4b2f      	ldr	r3, [pc, #188]	; (800c254 <USBD_SetConfig+0x144>)
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d112      	bne.n	800c1c4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c1a6:	4b2b      	ldr	r3, [pc, #172]	; (800c254 <USBD_SetConfig+0x144>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1b0:	4b28      	ldr	r3, [pc, #160]	; (800c254 <USBD_SetConfig+0x144>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7ff f99a 	bl	800b4f0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 f9ec 	bl	800c59a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c1c2:	e042      	b.n	800c24a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c1c4:	4b23      	ldr	r3, [pc, #140]	; (800c254 <USBD_SetConfig+0x144>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d02a      	beq.n	800c228 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff f988 	bl	800b4f0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c1e0:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <USBD_SetConfig+0x144>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1ea:	4b1a      	ldr	r3, [pc, #104]	; (800c254 <USBD_SetConfig+0x144>)
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff f961 	bl	800b4b8 <USBD_SetClassConfig>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00f      	beq.n	800c220 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f8fe 	bl	800c404 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff f96d 	bl	800b4f0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2202      	movs	r2, #2
 800c21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c21e:	e014      	b.n	800c24a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 f9ba 	bl	800c59a <USBD_CtlSendStatus>
    break;
 800c226:	e010      	b.n	800c24a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f9b6 	bl	800c59a <USBD_CtlSendStatus>
    break;
 800c22e:	e00c      	b.n	800c24a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f8e6 	bl	800c404 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <USBD_SetConfig+0x144>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	4619      	mov	r1, r3
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f7ff f956 	bl	800b4f0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	73fb      	strb	r3, [r7, #15]
    break;
 800c248:	bf00      	nop
  }

  return ret;
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	2000022a 	.word	0x2000022a

0800c258 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	88db      	ldrh	r3, [r3, #6]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d004      	beq.n	800c274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f8c9 	bl	800c404 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c272:	e021      	b.n	800c2b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	db17      	blt.n	800c2ae <USBD_GetConfig+0x56>
 800c27e:	2b02      	cmp	r3, #2
 800c280:	dd02      	ble.n	800c288 <USBD_GetConfig+0x30>
 800c282:	2b03      	cmp	r3, #3
 800c284:	d00b      	beq.n	800c29e <USBD_GetConfig+0x46>
 800c286:	e012      	b.n	800c2ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	3308      	adds	r3, #8
 800c292:	2201      	movs	r2, #1
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f925 	bl	800c4e6 <USBD_CtlSendData>
      break;
 800c29c:	e00c      	b.n	800c2b8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f91d 	bl	800c4e6 <USBD_CtlSendData>
      break;
 800c2ac:	e004      	b.n	800c2b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 f8a7 	bl	800c404 <USBD_CtlError>
      break;
 800c2b6:	bf00      	nop
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d81e      	bhi.n	800c314 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	88db      	ldrh	r3, [r3, #6]
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d004      	beq.n	800c2e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f88f 	bl	800c404 <USBD_CtlError>
      break;
 800c2e6:	e01a      	b.n	800c31e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d005      	beq.n	800c304 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	f043 0202 	orr.w	r2, r3, #2
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	330c      	adds	r3, #12
 800c308:	2202      	movs	r2, #2
 800c30a:	4619      	mov	r1, r3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f8ea 	bl	800c4e6 <USBD_CtlSendData>
    break;
 800c312:	e004      	b.n	800c31e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c314:	6839      	ldr	r1, [r7, #0]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f874 	bl	800c404 <USBD_CtlError>
    break;
 800c31c:	bf00      	nop
  }
}
 800c31e:	bf00      	nop
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b082      	sub	sp, #8
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	885b      	ldrh	r3, [r3, #2]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d106      	bne.n	800c346 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f92a 	bl	800c59a <USBD_CtlSendStatus>
  }
}
 800c346:	bf00      	nop
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b082      	sub	sp, #8
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c35e:	3b01      	subs	r3, #1
 800c360:	2b02      	cmp	r3, #2
 800c362:	d80b      	bhi.n	800c37c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	885b      	ldrh	r3, [r3, #2]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d10c      	bne.n	800c386 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f910 	bl	800c59a <USBD_CtlSendStatus>
      }
      break;
 800c37a:	e004      	b.n	800c386 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f840 	bl	800c404 <USBD_CtlError>
      break;
 800c384:	e000      	b.n	800c388 <USBD_ClrFeature+0x3a>
      break;
 800c386:	bf00      	nop
  }
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	781a      	ldrb	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff fad3 	bl	800b966 <SWAPBYTE>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f7ff fac6 	bl	800b966 <SWAPBYTE>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	461a      	mov	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff fab9 	bl	800b966 <SWAPBYTE>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	80da      	strh	r2, [r3, #6]
}
 800c3fc:	bf00      	nop
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c40e:	2180      	movs	r1, #128	; 0x80
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 fcb9 	bl	800cd88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c416:	2100      	movs	r1, #0
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fcb5 	bl	800cd88 <USBD_LL_StallEP>
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b086      	sub	sp, #24
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	60f8      	str	r0, [r7, #12]
 800c42e:	60b9      	str	r1, [r7, #8]
 800c430:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c432:	2300      	movs	r3, #0
 800c434:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d036      	beq.n	800c4aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c440:	6938      	ldr	r0, [r7, #16]
 800c442:	f000 f836 	bl	800c4b2 <USBD_GetLen>
 800c446:	4603      	mov	r3, r0
 800c448:	3301      	adds	r3, #1
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	b29a      	uxth	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c454:	7dfb      	ldrb	r3, [r7, #23]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4413      	add	r3, r2
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	7812      	ldrb	r2, [r2, #0]
 800c45e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c460:	7dfb      	ldrb	r3, [r7, #23]
 800c462:	3301      	adds	r3, #1
 800c464:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c466:	7dfb      	ldrb	r3, [r7, #23]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	4413      	add	r3, r2
 800c46c:	2203      	movs	r2, #3
 800c46e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	3301      	adds	r3, #1
 800c474:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c476:	e013      	b.n	800c4a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	4413      	add	r3, r2
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	7812      	ldrb	r2, [r2, #0]
 800c482:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3301      	adds	r3, #1
 800c488:	613b      	str	r3, [r7, #16]
    idx++;
 800c48a:	7dfb      	ldrb	r3, [r7, #23]
 800c48c:	3301      	adds	r3, #1
 800c48e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c490:	7dfb      	ldrb	r3, [r7, #23]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	4413      	add	r3, r2
 800c496:	2200      	movs	r2, #0
 800c498:	701a      	strb	r2, [r3, #0]
    idx++;
 800c49a:	7dfb      	ldrb	r3, [r7, #23]
 800c49c:	3301      	adds	r3, #1
 800c49e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e7      	bne.n	800c478 <USBD_GetString+0x52>
 800c4a8:	e000      	b.n	800c4ac <USBD_GetString+0x86>
    return;
 800c4aa:	bf00      	nop
  }
}
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b085      	sub	sp, #20
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4c2:	e005      	b.n	800c4d0 <USBD_GetLen+0x1e>
  {
    len++;
 800c4c4:	7bfb      	ldrb	r3, [r7, #15]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1f5      	bne.n	800c4c4 <USBD_GetLen+0x12>
  }

  return len;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b084      	sub	sp, #16
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	60f8      	str	r0, [r7, #12]
 800c4ee:	60b9      	str	r1, [r7, #8]
 800c4f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	2100      	movs	r1, #0
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f000 fcc4 	bl	800ce9a <USBD_LL_Transmit>

  return USBD_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	2100      	movs	r1, #0
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 fcb3 	bl	800ce9a <USBD_LL_Transmit>

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	60f8      	str	r0, [r7, #12]
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2203      	movs	r2, #3
 800c54e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	2100      	movs	r1, #0
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 fcb7 	bl	800cedc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	2100      	movs	r1, #0
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f000 fca6 	bl	800cedc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2204      	movs	r2, #4
 800c5a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 fc72 	bl	800ce9a <USBD_LL_Transmit>

  return USBD_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2205      	movs	r2, #5
 800c5cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 fc80 	bl	800cedc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3708      	adds	r7, #8
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
	...

0800c5e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4912      	ldr	r1, [pc, #72]	; (800c638 <MX_USB_DEVICE_Init+0x50>)
 800c5f0:	4812      	ldr	r0, [pc, #72]	; (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c5f2:	f7fe fef3 	bl	800b3dc <USBD_Init>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c5fc:	f7f5 fb8a 	bl	8001d14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c600:	490f      	ldr	r1, [pc, #60]	; (800c640 <MX_USB_DEVICE_Init+0x58>)
 800c602:	480e      	ldr	r0, [pc, #56]	; (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c604:	f7fe ff20 	bl	800b448 <USBD_RegisterClass>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c60e:	f7f5 fb81 	bl	8001d14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c612:	490c      	ldr	r1, [pc, #48]	; (800c644 <MX_USB_DEVICE_Init+0x5c>)
 800c614:	4809      	ldr	r0, [pc, #36]	; (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c616:	f7fe fe75 	bl	800b304 <USBD_CDC_RegisterInterface>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c620:	f7f5 fb78 	bl	8001d14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c624:	4805      	ldr	r0, [pc, #20]	; (800c63c <MX_USB_DEVICE_Init+0x54>)
 800c626:	f7fe ff30 	bl	800b48a <USBD_Start>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c630:	f7f5 fb70 	bl	8001d14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c634:	bf00      	nop
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20000138 	.word	0x20000138
 800c63c:	20002054 	.word	0x20002054
 800c640:	20000020 	.word	0x20000020
 800c644:	20000124 	.word	0x20000124

0800c648 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c64c:	2200      	movs	r2, #0
 800c64e:	4905      	ldr	r1, [pc, #20]	; (800c664 <CDC_Init_FS+0x1c>)
 800c650:	4805      	ldr	r0, [pc, #20]	; (800c668 <CDC_Init_FS+0x20>)
 800c652:	f7fe fe6c 	bl	800b32e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c656:	4905      	ldr	r1, [pc, #20]	; (800c66c <CDC_Init_FS+0x24>)
 800c658:	4803      	ldr	r0, [pc, #12]	; (800c668 <CDC_Init_FS+0x20>)
 800c65a:	f7fe fe81 	bl	800b360 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c65e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c660:	4618      	mov	r0, r3
 800c662:	bd80      	pop	{r7, pc}
 800c664:	20002b24 	.word	0x20002b24
 800c668:	20002054 	.word	0x20002054
 800c66c:	20002324 	.word	0x20002324

0800c670 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c670:	b480      	push	{r7}
 800c672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c674:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c676:	4618      	mov	r0, r3
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	6039      	str	r1, [r7, #0]
 800c68a:	71fb      	strb	r3, [r7, #7]
 800c68c:	4613      	mov	r3, r2
 800c68e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c690:	79fb      	ldrb	r3, [r7, #7]
 800c692:	2b23      	cmp	r3, #35	; 0x23
 800c694:	d84a      	bhi.n	800c72c <CDC_Control_FS+0xac>
 800c696:	a201      	add	r2, pc, #4	; (adr r2, 800c69c <CDC_Control_FS+0x1c>)
 800c698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69c:	0800c72d 	.word	0x0800c72d
 800c6a0:	0800c72d 	.word	0x0800c72d
 800c6a4:	0800c72d 	.word	0x0800c72d
 800c6a8:	0800c72d 	.word	0x0800c72d
 800c6ac:	0800c72d 	.word	0x0800c72d
 800c6b0:	0800c72d 	.word	0x0800c72d
 800c6b4:	0800c72d 	.word	0x0800c72d
 800c6b8:	0800c72d 	.word	0x0800c72d
 800c6bc:	0800c72d 	.word	0x0800c72d
 800c6c0:	0800c72d 	.word	0x0800c72d
 800c6c4:	0800c72d 	.word	0x0800c72d
 800c6c8:	0800c72d 	.word	0x0800c72d
 800c6cc:	0800c72d 	.word	0x0800c72d
 800c6d0:	0800c72d 	.word	0x0800c72d
 800c6d4:	0800c72d 	.word	0x0800c72d
 800c6d8:	0800c72d 	.word	0x0800c72d
 800c6dc:	0800c72d 	.word	0x0800c72d
 800c6e0:	0800c72d 	.word	0x0800c72d
 800c6e4:	0800c72d 	.word	0x0800c72d
 800c6e8:	0800c72d 	.word	0x0800c72d
 800c6ec:	0800c72d 	.word	0x0800c72d
 800c6f0:	0800c72d 	.word	0x0800c72d
 800c6f4:	0800c72d 	.word	0x0800c72d
 800c6f8:	0800c72d 	.word	0x0800c72d
 800c6fc:	0800c72d 	.word	0x0800c72d
 800c700:	0800c72d 	.word	0x0800c72d
 800c704:	0800c72d 	.word	0x0800c72d
 800c708:	0800c72d 	.word	0x0800c72d
 800c70c:	0800c72d 	.word	0x0800c72d
 800c710:	0800c72d 	.word	0x0800c72d
 800c714:	0800c72d 	.word	0x0800c72d
 800c718:	0800c72d 	.word	0x0800c72d
 800c71c:	0800c72d 	.word	0x0800c72d
 800c720:	0800c72d 	.word	0x0800c72d
 800c724:	0800c72d 	.word	0x0800c72d
 800c728:	0800c72d 	.word	0x0800c72d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c72c:	bf00      	nop
  }

  return (USBD_OK);
 800c72e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	4805      	ldr	r0, [pc, #20]	; (800c760 <CDC_Receive_FS+0x24>)
 800c74a:	f7fe fe09 	bl	800b360 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c74e:	4804      	ldr	r0, [pc, #16]	; (800c760 <CDC_Receive_FS+0x24>)
 800c750:	f7fe fe1a 	bl	800b388 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c754:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c756:	4618      	mov	r0, r3
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20002054 	.word	0x20002054

0800c764 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	4613      	mov	r3, r2
 800c770:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c776:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	371c      	adds	r7, #28
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
	...

0800c788 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	4603      	mov	r3, r0
 800c790:	6039      	str	r1, [r7, #0]
 800c792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	2212      	movs	r2, #18
 800c798:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c79a:	4b03      	ldr	r3, [pc, #12]	; (800c7a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	20000154 	.word	0x20000154

0800c7ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	6039      	str	r1, [r7, #0]
 800c7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2204      	movs	r2, #4
 800c7bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c7be:	4b03      	ldr	r3, [pc, #12]	; (800c7cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	20000168 	.word	0x20000168

0800c7d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	6039      	str	r1, [r7, #0]
 800c7da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d105      	bne.n	800c7ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	4907      	ldr	r1, [pc, #28]	; (800c804 <USBD_FS_ProductStrDescriptor+0x34>)
 800c7e6:	4808      	ldr	r0, [pc, #32]	; (800c808 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7e8:	f7ff fe1d 	bl	800c426 <USBD_GetString>
 800c7ec:	e004      	b.n	800c7f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	4904      	ldr	r1, [pc, #16]	; (800c804 <USBD_FS_ProductStrDescriptor+0x34>)
 800c7f2:	4805      	ldr	r0, [pc, #20]	; (800c808 <USBD_FS_ProductStrDescriptor+0x38>)
 800c7f4:	f7ff fe17 	bl	800c426 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7f8:	4b02      	ldr	r3, [pc, #8]	; (800c804 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20003324 	.word	0x20003324
 800c808:	0800d8b8 	.word	0x0800d8b8

0800c80c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	6039      	str	r1, [r7, #0]
 800c816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	4904      	ldr	r1, [pc, #16]	; (800c82c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c81c:	4804      	ldr	r0, [pc, #16]	; (800c830 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c81e:	f7ff fe02 	bl	800c426 <USBD_GetString>
  return USBD_StrDesc;
 800c822:	4b02      	ldr	r3, [pc, #8]	; (800c82c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20003324 	.word	0x20003324
 800c830:	0800d8d0 	.word	0x0800d8d0

0800c834 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	4603      	mov	r3, r0
 800c83c:	6039      	str	r1, [r7, #0]
 800c83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	221a      	movs	r2, #26
 800c844:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c846:	f000 f843 	bl	800c8d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c84a:	4b02      	ldr	r3, [pc, #8]	; (800c854 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	2000016c 	.word	0x2000016c

0800c858 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	6039      	str	r1, [r7, #0]
 800c862:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d105      	bne.n	800c876 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	4907      	ldr	r1, [pc, #28]	; (800c88c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c86e:	4808      	ldr	r0, [pc, #32]	; (800c890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c870:	f7ff fdd9 	bl	800c426 <USBD_GetString>
 800c874:	e004      	b.n	800c880 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	4904      	ldr	r1, [pc, #16]	; (800c88c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c87a:	4805      	ldr	r0, [pc, #20]	; (800c890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c87c:	f7ff fdd3 	bl	800c426 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c880:	4b02      	ldr	r3, [pc, #8]	; (800c88c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c882:	4618      	mov	r0, r3
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20003324 	.word	0x20003324
 800c890:	0800d8e4 	.word	0x0800d8e4

0800c894 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8a0:	79fb      	ldrb	r3, [r7, #7]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d105      	bne.n	800c8b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	4907      	ldr	r1, [pc, #28]	; (800c8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8aa:	4808      	ldr	r0, [pc, #32]	; (800c8cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8ac:	f7ff fdbb 	bl	800c426 <USBD_GetString>
 800c8b0:	e004      	b.n	800c8bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	4904      	ldr	r1, [pc, #16]	; (800c8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8b6:	4805      	ldr	r0, [pc, #20]	; (800c8cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8b8:	f7ff fdb5 	bl	800c426 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8bc:	4b02      	ldr	r3, [pc, #8]	; (800c8c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20003324 	.word	0x20003324
 800c8cc:	0800d8f0 	.word	0x0800d8f0

0800c8d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c8d6:	4b0f      	ldr	r3, [pc, #60]	; (800c914 <Get_SerialNum+0x44>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c8dc:	4b0e      	ldr	r3, [pc, #56]	; (800c918 <Get_SerialNum+0x48>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c8e2:	4b0e      	ldr	r3, [pc, #56]	; (800c91c <Get_SerialNum+0x4c>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d009      	beq.n	800c90a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c8f6:	2208      	movs	r2, #8
 800c8f8:	4909      	ldr	r1, [pc, #36]	; (800c920 <Get_SerialNum+0x50>)
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 f814 	bl	800c928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c900:	2204      	movs	r2, #4
 800c902:	4908      	ldr	r1, [pc, #32]	; (800c924 <Get_SerialNum+0x54>)
 800c904:	68b8      	ldr	r0, [r7, #8]
 800c906:	f000 f80f 	bl	800c928 <IntToUnicode>
  }
}
 800c90a:	bf00      	nop
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	1fff7a10 	.word	0x1fff7a10
 800c918:	1fff7a14 	.word	0x1fff7a14
 800c91c:	1fff7a18 	.word	0x1fff7a18
 800c920:	2000016e 	.word	0x2000016e
 800c924:	2000017e 	.word	0x2000017e

0800c928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c93a:	2300      	movs	r3, #0
 800c93c:	75fb      	strb	r3, [r7, #23]
 800c93e:	e027      	b.n	800c990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	0f1b      	lsrs	r3, r3, #28
 800c944:	2b09      	cmp	r3, #9
 800c946:	d80b      	bhi.n	800c960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	0f1b      	lsrs	r3, r3, #28
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4619      	mov	r1, r3
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	440b      	add	r3, r1
 800c958:	3230      	adds	r2, #48	; 0x30
 800c95a:	b2d2      	uxtb	r2, r2
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	e00a      	b.n	800c976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	0f1b      	lsrs	r3, r3, #28
 800c964:	b2da      	uxtb	r2, r3
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	005b      	lsls	r3, r3, #1
 800c96a:	4619      	mov	r1, r3
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	440b      	add	r3, r1
 800c970:	3237      	adds	r2, #55	; 0x37
 800c972:	b2d2      	uxtb	r2, r2
 800c974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	011b      	lsls	r3, r3, #4
 800c97a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c97c:	7dfb      	ldrb	r3, [r7, #23]
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	3301      	adds	r3, #1
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	4413      	add	r3, r2
 800c986:	2200      	movs	r2, #0
 800c988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	3301      	adds	r3, #1
 800c98e:	75fb      	strb	r3, [r7, #23]
 800c990:	7dfa      	ldrb	r2, [r7, #23]
 800c992:	79fb      	ldrb	r3, [r7, #7]
 800c994:	429a      	cmp	r2, r3
 800c996:	d3d3      	bcc.n	800c940 <IntToUnicode+0x18>
  }
}
 800c998:	bf00      	nop
 800c99a:	371c      	adds	r7, #28
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08a      	sub	sp, #40	; 0x28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9ac:	f107 0314 	add.w	r3, r7, #20
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	605a      	str	r2, [r3, #4]
 800c9b6:	609a      	str	r2, [r3, #8]
 800c9b8:	60da      	str	r2, [r3, #12]
 800c9ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9c4:	d13a      	bne.n	800ca3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	613b      	str	r3, [r7, #16]
 800c9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800c9cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ce:	4a1d      	ldr	r2, [pc, #116]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800c9d0:	f043 0301 	orr.w	r3, r3, #1
 800c9d4:	6313      	str	r3, [r2, #48]	; 0x30
 800c9d6:	4b1b      	ldr	r3, [pc, #108]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800c9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9da:	f003 0301 	and.w	r3, r3, #1
 800c9de:	613b      	str	r3, [r7, #16]
 800c9e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c9e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c9e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9e8:	2302      	movs	r3, #2
 800c9ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c9f4:	230a      	movs	r3, #10
 800c9f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9f8:	f107 0314 	add.w	r3, r7, #20
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4812      	ldr	r0, [pc, #72]	; (800ca48 <HAL_PCD_MspInit+0xa4>)
 800ca00:	f7f6 fc88 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ca04:	4b0f      	ldr	r3, [pc, #60]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800ca06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca08:	4a0e      	ldr	r2, [pc, #56]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800ca0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca0e:	6353      	str	r3, [r2, #52]	; 0x34
 800ca10:	2300      	movs	r3, #0
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	4b0b      	ldr	r3, [pc, #44]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800ca16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca18:	4a0a      	ldr	r2, [pc, #40]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800ca1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ca1e:	6453      	str	r3, [r2, #68]	; 0x44
 800ca20:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <HAL_PCD_MspInit+0xa0>)
 800ca22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca28:	60fb      	str	r3, [r7, #12]
 800ca2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	2100      	movs	r1, #0
 800ca30:	2043      	movs	r0, #67	; 0x43
 800ca32:	f7f6 f88e 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ca36:	2043      	movs	r0, #67	; 0x43
 800ca38:	f7f6 f8a7 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	3728      	adds	r7, #40	; 0x28
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	40023800 	.word	0x40023800
 800ca48:	40020000 	.word	0x40020000

0800ca4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ca60:	4619      	mov	r1, r3
 800ca62:	4610      	mov	r0, r2
 800ca64:	f7fe fd5c 	bl	800b520 <USBD_LL_SetupStage>
}
 800ca68:	bf00      	nop
 800ca6a:	3708      	adds	r7, #8
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	460b      	mov	r3, r1
 800ca7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ca82:	78fa      	ldrb	r2, [r7, #3]
 800ca84:	6879      	ldr	r1, [r7, #4]
 800ca86:	4613      	mov	r3, r2
 800ca88:	00db      	lsls	r3, r3, #3
 800ca8a:	1a9b      	subs	r3, r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	440b      	add	r3, r1
 800ca90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	f7fe fd94 	bl	800b5c6 <USBD_LL_DataOutStage>
}
 800ca9e:	bf00      	nop
 800caa0:	3708      	adds	r7, #8
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	460b      	mov	r3, r1
 800cab0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cab8:	78fa      	ldrb	r2, [r7, #3]
 800caba:	6879      	ldr	r1, [r7, #4]
 800cabc:	4613      	mov	r3, r2
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	1a9b      	subs	r3, r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	440b      	add	r3, r1
 800cac6:	3348      	adds	r3, #72	; 0x48
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	78fb      	ldrb	r3, [r7, #3]
 800cacc:	4619      	mov	r1, r3
 800cace:	f7fe fddd 	bl	800b68c <USBD_LL_DataInStage>
}
 800cad2:	bf00      	nop
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fe fee1 	bl	800b8b0 <USBD_LL_SOF>
}
 800caee:	bf00      	nop
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b084      	sub	sp, #16
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cafe:	2301      	movs	r3, #1
 800cb00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d102      	bne.n	800cb10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73fb      	strb	r3, [r7, #15]
 800cb0e:	e008      	b.n	800cb22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	2b02      	cmp	r3, #2
 800cb16:	d102      	bne.n	800cb1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	73fb      	strb	r3, [r7, #15]
 800cb1c:	e001      	b.n	800cb22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cb1e:	f7f5 f8f9 	bl	8001d14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cb28:	7bfa      	ldrb	r2, [r7, #15]
 800cb2a:	4611      	mov	r1, r2
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7fe fe84 	bl	800b83a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7fe fe3d 	bl	800b7b8 <USBD_LL_Reset>
}
 800cb3e:	bf00      	nop
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
	...

0800cb48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe fe7f 	bl	800b85a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	6812      	ldr	r2, [r2, #0]
 800cb6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cb6e:	f043 0301 	orr.w	r3, r3, #1
 800cb72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a1b      	ldr	r3, [r3, #32]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d005      	beq.n	800cb88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb7c:	4b04      	ldr	r3, [pc, #16]	; (800cb90 <HAL_PCD_SuspendCallback+0x48>)
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	4a03      	ldr	r2, [pc, #12]	; (800cb90 <HAL_PCD_SuspendCallback+0x48>)
 800cb82:	f043 0306 	orr.w	r3, r3, #6
 800cb86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	e000ed00 	.word	0xe000ed00

0800cb94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fe6e 	bl	800b884 <USBD_LL_Resume>
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cbc2:	78fa      	ldrb	r2, [r7, #3]
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe fe99 	bl	800b8fe <USBD_LL_IsoOUTIncomplete>
}
 800cbcc:	bf00      	nop
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cbe6:	78fa      	ldrb	r2, [r7, #3]
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fe fe7a 	bl	800b8e4 <USBD_LL_IsoINIncomplete>
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fe fe86 	bl	800b918 <USBD_LL_DevConnected>
}
 800cc0c:	bf00      	nop
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fe83 	bl	800b92e <USBD_LL_DevDisconnected>
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d13c      	bne.n	800ccba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cc40:	4a20      	ldr	r2, [pc, #128]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a1e      	ldr	r2, [pc, #120]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cc50:	4b1c      	ldr	r3, [pc, #112]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cc56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cc58:	4b1a      	ldr	r3, [pc, #104]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc5a:	2204      	movs	r2, #4
 800cc5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cc5e:	4b19      	ldr	r3, [pc, #100]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc60:	2202      	movs	r2, #2
 800cc62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cc64:	4b17      	ldr	r3, [pc, #92]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc6a:	4b16      	ldr	r3, [pc, #88]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc6c:	2202      	movs	r2, #2
 800cc6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cc70:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cc76:	4b13      	ldr	r3, [pc, #76]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cc7c:	4b11      	ldr	r3, [pc, #68]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cc88:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cc8e:	480d      	ldr	r0, [pc, #52]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cc90:	f7f9 fc37 	bl	8006502 <HAL_PCD_Init>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cc9a:	f7f5 f83b 	bl	8001d14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cc9e:	2180      	movs	r1, #128	; 0x80
 800cca0:	4808      	ldr	r0, [pc, #32]	; (800ccc4 <USBD_LL_Init+0x94>)
 800cca2:	f7fa fd94 	bl	80077ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cca6:	2240      	movs	r2, #64	; 0x40
 800cca8:	2100      	movs	r1, #0
 800ccaa:	4806      	ldr	r0, [pc, #24]	; (800ccc4 <USBD_LL_Init+0x94>)
 800ccac:	f7fa fd48 	bl	8007740 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ccb0:	2280      	movs	r2, #128	; 0x80
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	4803      	ldr	r0, [pc, #12]	; (800ccc4 <USBD_LL_Init+0x94>)
 800ccb6:	f7fa fd43 	bl	8007740 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	20003524 	.word	0x20003524

0800ccc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7f9 fd2c 	bl	800673c <HAL_PCD_Start>
 800cce4:	4603      	mov	r3, r0
 800cce6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 f92a 	bl	800cf44 <USBD_Get_USB_Status>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	4608      	mov	r0, r1
 800cd08:	4611      	mov	r1, r2
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	70fb      	strb	r3, [r7, #3]
 800cd10:	460b      	mov	r3, r1
 800cd12:	70bb      	strb	r3, [r7, #2]
 800cd14:	4613      	mov	r3, r2
 800cd16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd26:	78bb      	ldrb	r3, [r7, #2]
 800cd28:	883a      	ldrh	r2, [r7, #0]
 800cd2a:	78f9      	ldrb	r1, [r7, #3]
 800cd2c:	f7fa f910 	bl	8006f50 <HAL_PCD_EP_Open>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 f904 	bl	800cf44 <USBD_Get_USB_Status>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd40:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	460b      	mov	r3, r1
 800cd54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd64:	78fa      	ldrb	r2, [r7, #3]
 800cd66:	4611      	mov	r1, r2
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fa f959 	bl	8007020 <HAL_PCD_EP_Close>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f000 f8e5 	bl	800cf44 <USBD_Get_USB_Status>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	460b      	mov	r3, r1
 800cd92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cda2:	78fa      	ldrb	r2, [r7, #3]
 800cda4:	4611      	mov	r1, r2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fa fa31 	bl	800720e <HAL_PCD_EP_SetStall>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 f8c6 	bl	800cf44 <USBD_Get_USB_Status>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cde0:	78fa      	ldrb	r2, [r7, #3]
 800cde2:	4611      	mov	r1, r2
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fa fa76 	bl	80072d6 <HAL_PCD_EP_ClrStall>
 800cdea:	4603      	mov	r3, r0
 800cdec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 f8a7 	bl	800cf44 <USBD_Get_USB_Status>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b085      	sub	sp, #20
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	da0b      	bge.n	800ce38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	00db      	lsls	r3, r3, #3
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	440b      	add	r3, r1
 800ce32:	333e      	adds	r3, #62	; 0x3e
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	e00b      	b.n	800ce50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce38:	78fb      	ldrb	r3, [r7, #3]
 800ce3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce3e:	68f9      	ldr	r1, [r7, #12]
 800ce40:	4613      	mov	r3, r2
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	1a9b      	subs	r3, r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	440b      	add	r3, r1
 800ce4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	460b      	mov	r3, r1
 800ce66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce76:	78fa      	ldrb	r2, [r7, #3]
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fa f843 	bl	8006f06 <HAL_PCD_SetAddress>
 800ce80:	4603      	mov	r3, r0
 800ce82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce84:	7bfb      	ldrb	r3, [r7, #15]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 f85c 	bl	800cf44 <USBD_Get_USB_Status>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b086      	sub	sp, #24
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	603b      	str	r3, [r7, #0]
 800cea6:	460b      	mov	r3, r1
 800cea8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ceb8:	7af9      	ldrb	r1, [r7, #11]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	f7fa f95c 	bl	800717a <HAL_PCD_EP_Transmit>
 800cec2:	4603      	mov	r3, r0
 800cec4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 f83b 	bl	800cf44 <USBD_Get_USB_Status>
 800cece:	4603      	mov	r3, r0
 800ced0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ced2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	607a      	str	r2, [r7, #4]
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	460b      	mov	r3, r1
 800ceea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cef0:	2300      	movs	r3, #0
 800cef2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cefa:	7af9      	ldrb	r1, [r7, #11]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	f7fa f8d8 	bl	80070b4 <HAL_PCD_EP_Receive>
 800cf04:	4603      	mov	r3, r0
 800cf06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf08:	7dfb      	ldrb	r3, [r7, #23]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 f81a 	bl	800cf44 <USBD_Get_USB_Status>
 800cf10:	4603      	mov	r3, r0
 800cf12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf14:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
 800cf26:	460b      	mov	r3, r1
 800cf28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cf30:	78fa      	ldrb	r2, [r7, #3]
 800cf32:	4611      	mov	r1, r2
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fa f908 	bl	800714a <HAL_PCD_EP_GetRxCount>
 800cf3a:	4603      	mov	r3, r0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b085      	sub	sp, #20
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf52:	79fb      	ldrb	r3, [r7, #7]
 800cf54:	2b03      	cmp	r3, #3
 800cf56:	d817      	bhi.n	800cf88 <USBD_Get_USB_Status+0x44>
 800cf58:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <USBD_Get_USB_Status+0x1c>)
 800cf5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf5e:	bf00      	nop
 800cf60:	0800cf71 	.word	0x0800cf71
 800cf64:	0800cf77 	.word	0x0800cf77
 800cf68:	0800cf7d 	.word	0x0800cf7d
 800cf6c:	0800cf83 	.word	0x0800cf83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	73fb      	strb	r3, [r7, #15]
    break;
 800cf74:	e00b      	b.n	800cf8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf76:	2303      	movs	r3, #3
 800cf78:	73fb      	strb	r3, [r7, #15]
    break;
 800cf7a:	e008      	b.n	800cf8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf80:	e005      	b.n	800cf8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf82:	2303      	movs	r3, #3
 800cf84:	73fb      	strb	r3, [r7, #15]
    break;
 800cf86:	e002      	b.n	800cf8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf88:	2303      	movs	r3, #3
 800cf8a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf8c:	bf00      	nop
  }
  return usb_status;
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3714      	adds	r7, #20
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <__errno>:
 800cf9c:	4b01      	ldr	r3, [pc, #4]	; (800cfa4 <__errno+0x8>)
 800cf9e:	6818      	ldr	r0, [r3, #0]
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	20000188 	.word	0x20000188

0800cfa8 <__libc_init_array>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	4e0d      	ldr	r6, [pc, #52]	; (800cfe0 <__libc_init_array+0x38>)
 800cfac:	4c0d      	ldr	r4, [pc, #52]	; (800cfe4 <__libc_init_array+0x3c>)
 800cfae:	1ba4      	subs	r4, r4, r6
 800cfb0:	10a4      	asrs	r4, r4, #2
 800cfb2:	2500      	movs	r5, #0
 800cfb4:	42a5      	cmp	r5, r4
 800cfb6:	d109      	bne.n	800cfcc <__libc_init_array+0x24>
 800cfb8:	4e0b      	ldr	r6, [pc, #44]	; (800cfe8 <__libc_init_array+0x40>)
 800cfba:	4c0c      	ldr	r4, [pc, #48]	; (800cfec <__libc_init_array+0x44>)
 800cfbc:	f000 fc70 	bl	800d8a0 <_init>
 800cfc0:	1ba4      	subs	r4, r4, r6
 800cfc2:	10a4      	asrs	r4, r4, #2
 800cfc4:	2500      	movs	r5, #0
 800cfc6:	42a5      	cmp	r5, r4
 800cfc8:	d105      	bne.n	800cfd6 <__libc_init_array+0x2e>
 800cfca:	bd70      	pop	{r4, r5, r6, pc}
 800cfcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfd0:	4798      	blx	r3
 800cfd2:	3501      	adds	r5, #1
 800cfd4:	e7ee      	b.n	800cfb4 <__libc_init_array+0xc>
 800cfd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfda:	4798      	blx	r3
 800cfdc:	3501      	adds	r5, #1
 800cfde:	e7f2      	b.n	800cfc6 <__libc_init_array+0x1e>
 800cfe0:	0800d934 	.word	0x0800d934
 800cfe4:	0800d934 	.word	0x0800d934
 800cfe8:	0800d934 	.word	0x0800d934
 800cfec:	0800d938 	.word	0x0800d938

0800cff0 <malloc>:
 800cff0:	4b02      	ldr	r3, [pc, #8]	; (800cffc <malloc+0xc>)
 800cff2:	4601      	mov	r1, r0
 800cff4:	6818      	ldr	r0, [r3, #0]
 800cff6:	f000 b861 	b.w	800d0bc <_malloc_r>
 800cffa:	bf00      	nop
 800cffc:	20000188 	.word	0x20000188

0800d000 <free>:
 800d000:	4b02      	ldr	r3, [pc, #8]	; (800d00c <free+0xc>)
 800d002:	4601      	mov	r1, r0
 800d004:	6818      	ldr	r0, [r3, #0]
 800d006:	f000 b80b 	b.w	800d020 <_free_r>
 800d00a:	bf00      	nop
 800d00c:	20000188 	.word	0x20000188

0800d010 <memset>:
 800d010:	4402      	add	r2, r0
 800d012:	4603      	mov	r3, r0
 800d014:	4293      	cmp	r3, r2
 800d016:	d100      	bne.n	800d01a <memset+0xa>
 800d018:	4770      	bx	lr
 800d01a:	f803 1b01 	strb.w	r1, [r3], #1
 800d01e:	e7f9      	b.n	800d014 <memset+0x4>

0800d020 <_free_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	4605      	mov	r5, r0
 800d024:	2900      	cmp	r1, #0
 800d026:	d045      	beq.n	800d0b4 <_free_r+0x94>
 800d028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d02c:	1f0c      	subs	r4, r1, #4
 800d02e:	2b00      	cmp	r3, #0
 800d030:	bfb8      	it	lt
 800d032:	18e4      	addlt	r4, r4, r3
 800d034:	f000 f8ac 	bl	800d190 <__malloc_lock>
 800d038:	4a1f      	ldr	r2, [pc, #124]	; (800d0b8 <_free_r+0x98>)
 800d03a:	6813      	ldr	r3, [r2, #0]
 800d03c:	4610      	mov	r0, r2
 800d03e:	b933      	cbnz	r3, 800d04e <_free_r+0x2e>
 800d040:	6063      	str	r3, [r4, #4]
 800d042:	6014      	str	r4, [r2, #0]
 800d044:	4628      	mov	r0, r5
 800d046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d04a:	f000 b8a2 	b.w	800d192 <__malloc_unlock>
 800d04e:	42a3      	cmp	r3, r4
 800d050:	d90c      	bls.n	800d06c <_free_r+0x4c>
 800d052:	6821      	ldr	r1, [r4, #0]
 800d054:	1862      	adds	r2, r4, r1
 800d056:	4293      	cmp	r3, r2
 800d058:	bf04      	itt	eq
 800d05a:	681a      	ldreq	r2, [r3, #0]
 800d05c:	685b      	ldreq	r3, [r3, #4]
 800d05e:	6063      	str	r3, [r4, #4]
 800d060:	bf04      	itt	eq
 800d062:	1852      	addeq	r2, r2, r1
 800d064:	6022      	streq	r2, [r4, #0]
 800d066:	6004      	str	r4, [r0, #0]
 800d068:	e7ec      	b.n	800d044 <_free_r+0x24>
 800d06a:	4613      	mov	r3, r2
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	b10a      	cbz	r2, 800d074 <_free_r+0x54>
 800d070:	42a2      	cmp	r2, r4
 800d072:	d9fa      	bls.n	800d06a <_free_r+0x4a>
 800d074:	6819      	ldr	r1, [r3, #0]
 800d076:	1858      	adds	r0, r3, r1
 800d078:	42a0      	cmp	r0, r4
 800d07a:	d10b      	bne.n	800d094 <_free_r+0x74>
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	4401      	add	r1, r0
 800d080:	1858      	adds	r0, r3, r1
 800d082:	4282      	cmp	r2, r0
 800d084:	6019      	str	r1, [r3, #0]
 800d086:	d1dd      	bne.n	800d044 <_free_r+0x24>
 800d088:	6810      	ldr	r0, [r2, #0]
 800d08a:	6852      	ldr	r2, [r2, #4]
 800d08c:	605a      	str	r2, [r3, #4]
 800d08e:	4401      	add	r1, r0
 800d090:	6019      	str	r1, [r3, #0]
 800d092:	e7d7      	b.n	800d044 <_free_r+0x24>
 800d094:	d902      	bls.n	800d09c <_free_r+0x7c>
 800d096:	230c      	movs	r3, #12
 800d098:	602b      	str	r3, [r5, #0]
 800d09a:	e7d3      	b.n	800d044 <_free_r+0x24>
 800d09c:	6820      	ldr	r0, [r4, #0]
 800d09e:	1821      	adds	r1, r4, r0
 800d0a0:	428a      	cmp	r2, r1
 800d0a2:	bf04      	itt	eq
 800d0a4:	6811      	ldreq	r1, [r2, #0]
 800d0a6:	6852      	ldreq	r2, [r2, #4]
 800d0a8:	6062      	str	r2, [r4, #4]
 800d0aa:	bf04      	itt	eq
 800d0ac:	1809      	addeq	r1, r1, r0
 800d0ae:	6021      	streq	r1, [r4, #0]
 800d0b0:	605c      	str	r4, [r3, #4]
 800d0b2:	e7c7      	b.n	800d044 <_free_r+0x24>
 800d0b4:	bd38      	pop	{r3, r4, r5, pc}
 800d0b6:	bf00      	nop
 800d0b8:	2000022c 	.word	0x2000022c

0800d0bc <_malloc_r>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	1ccd      	adds	r5, r1, #3
 800d0c0:	f025 0503 	bic.w	r5, r5, #3
 800d0c4:	3508      	adds	r5, #8
 800d0c6:	2d0c      	cmp	r5, #12
 800d0c8:	bf38      	it	cc
 800d0ca:	250c      	movcc	r5, #12
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	db01      	blt.n	800d0d6 <_malloc_r+0x1a>
 800d0d2:	42a9      	cmp	r1, r5
 800d0d4:	d903      	bls.n	800d0de <_malloc_r+0x22>
 800d0d6:	230c      	movs	r3, #12
 800d0d8:	6033      	str	r3, [r6, #0]
 800d0da:	2000      	movs	r0, #0
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
 800d0de:	f000 f857 	bl	800d190 <__malloc_lock>
 800d0e2:	4a21      	ldr	r2, [pc, #132]	; (800d168 <_malloc_r+0xac>)
 800d0e4:	6814      	ldr	r4, [r2, #0]
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	b991      	cbnz	r1, 800d110 <_malloc_r+0x54>
 800d0ea:	4c20      	ldr	r4, [pc, #128]	; (800d16c <_malloc_r+0xb0>)
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	b91b      	cbnz	r3, 800d0f8 <_malloc_r+0x3c>
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f000 f83d 	bl	800d170 <_sbrk_r>
 800d0f6:	6020      	str	r0, [r4, #0]
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f000 f838 	bl	800d170 <_sbrk_r>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d124      	bne.n	800d14e <_malloc_r+0x92>
 800d104:	230c      	movs	r3, #12
 800d106:	6033      	str	r3, [r6, #0]
 800d108:	4630      	mov	r0, r6
 800d10a:	f000 f842 	bl	800d192 <__malloc_unlock>
 800d10e:	e7e4      	b.n	800d0da <_malloc_r+0x1e>
 800d110:	680b      	ldr	r3, [r1, #0]
 800d112:	1b5b      	subs	r3, r3, r5
 800d114:	d418      	bmi.n	800d148 <_malloc_r+0x8c>
 800d116:	2b0b      	cmp	r3, #11
 800d118:	d90f      	bls.n	800d13a <_malloc_r+0x7e>
 800d11a:	600b      	str	r3, [r1, #0]
 800d11c:	50cd      	str	r5, [r1, r3]
 800d11e:	18cc      	adds	r4, r1, r3
 800d120:	4630      	mov	r0, r6
 800d122:	f000 f836 	bl	800d192 <__malloc_unlock>
 800d126:	f104 000b 	add.w	r0, r4, #11
 800d12a:	1d23      	adds	r3, r4, #4
 800d12c:	f020 0007 	bic.w	r0, r0, #7
 800d130:	1ac3      	subs	r3, r0, r3
 800d132:	d0d3      	beq.n	800d0dc <_malloc_r+0x20>
 800d134:	425a      	negs	r2, r3
 800d136:	50e2      	str	r2, [r4, r3]
 800d138:	e7d0      	b.n	800d0dc <_malloc_r+0x20>
 800d13a:	428c      	cmp	r4, r1
 800d13c:	684b      	ldr	r3, [r1, #4]
 800d13e:	bf16      	itet	ne
 800d140:	6063      	strne	r3, [r4, #4]
 800d142:	6013      	streq	r3, [r2, #0]
 800d144:	460c      	movne	r4, r1
 800d146:	e7eb      	b.n	800d120 <_malloc_r+0x64>
 800d148:	460c      	mov	r4, r1
 800d14a:	6849      	ldr	r1, [r1, #4]
 800d14c:	e7cc      	b.n	800d0e8 <_malloc_r+0x2c>
 800d14e:	1cc4      	adds	r4, r0, #3
 800d150:	f024 0403 	bic.w	r4, r4, #3
 800d154:	42a0      	cmp	r0, r4
 800d156:	d005      	beq.n	800d164 <_malloc_r+0xa8>
 800d158:	1a21      	subs	r1, r4, r0
 800d15a:	4630      	mov	r0, r6
 800d15c:	f000 f808 	bl	800d170 <_sbrk_r>
 800d160:	3001      	adds	r0, #1
 800d162:	d0cf      	beq.n	800d104 <_malloc_r+0x48>
 800d164:	6025      	str	r5, [r4, #0]
 800d166:	e7db      	b.n	800d120 <_malloc_r+0x64>
 800d168:	2000022c 	.word	0x2000022c
 800d16c:	20000230 	.word	0x20000230

0800d170 <_sbrk_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	4c06      	ldr	r4, [pc, #24]	; (800d18c <_sbrk_r+0x1c>)
 800d174:	2300      	movs	r3, #0
 800d176:	4605      	mov	r5, r0
 800d178:	4608      	mov	r0, r1
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	f7f4 fec8 	bl	8001f10 <_sbrk>
 800d180:	1c43      	adds	r3, r0, #1
 800d182:	d102      	bne.n	800d18a <_sbrk_r+0x1a>
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	b103      	cbz	r3, 800d18a <_sbrk_r+0x1a>
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	2000392c 	.word	0x2000392c

0800d190 <__malloc_lock>:
 800d190:	4770      	bx	lr

0800d192 <__malloc_unlock>:
 800d192:	4770      	bx	lr

0800d194 <asin>:
 800d194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d196:	ed2d 8b02 	vpush	{d8}
 800d19a:	4e26      	ldr	r6, [pc, #152]	; (800d234 <asin+0xa0>)
 800d19c:	b08b      	sub	sp, #44	; 0x2c
 800d19e:	ec55 4b10 	vmov	r4, r5, d0
 800d1a2:	f000 f8a9 	bl	800d2f8 <__ieee754_asin>
 800d1a6:	f996 3000 	ldrsb.w	r3, [r6]
 800d1aa:	eeb0 8a40 	vmov.f32	s16, s0
 800d1ae:	eef0 8a60 	vmov.f32	s17, s1
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	d036      	beq.n	800d224 <asin+0x90>
 800d1b6:	4622      	mov	r2, r4
 800d1b8:	462b      	mov	r3, r5
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	4629      	mov	r1, r5
 800d1be:	f7f3 fc59 	bl	8000a74 <__aeabi_dcmpun>
 800d1c2:	4607      	mov	r7, r0
 800d1c4:	bb70      	cbnz	r0, 800d224 <asin+0x90>
 800d1c6:	ec45 4b10 	vmov	d0, r4, r5
 800d1ca:	f000 fb55 	bl	800d878 <fabs>
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	4b19      	ldr	r3, [pc, #100]	; (800d238 <asin+0xa4>)
 800d1d2:	ec51 0b10 	vmov	r0, r1, d0
 800d1d6:	f7f3 fc43 	bl	8000a60 <__aeabi_dcmpgt>
 800d1da:	b318      	cbz	r0, 800d224 <asin+0x90>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	4816      	ldr	r0, [pc, #88]	; (800d23c <asin+0xa8>)
 800d1e2:	4b17      	ldr	r3, [pc, #92]	; (800d240 <asin+0xac>)
 800d1e4:	9301      	str	r3, [sp, #4]
 800d1e6:	9708      	str	r7, [sp, #32]
 800d1e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d1ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d1f0:	f000 fb4e 	bl	800d890 <nan>
 800d1f4:	f996 3000 	ldrsb.w	r3, [r6]
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d1fe:	d104      	bne.n	800d20a <asin+0x76>
 800d200:	f7ff fecc 	bl	800cf9c <__errno>
 800d204:	2321      	movs	r3, #33	; 0x21
 800d206:	6003      	str	r3, [r0, #0]
 800d208:	e004      	b.n	800d214 <asin+0x80>
 800d20a:	4668      	mov	r0, sp
 800d20c:	f000 fb3d 	bl	800d88a <matherr>
 800d210:	2800      	cmp	r0, #0
 800d212:	d0f5      	beq.n	800d200 <asin+0x6c>
 800d214:	9b08      	ldr	r3, [sp, #32]
 800d216:	b11b      	cbz	r3, 800d220 <asin+0x8c>
 800d218:	f7ff fec0 	bl	800cf9c <__errno>
 800d21c:	9b08      	ldr	r3, [sp, #32]
 800d21e:	6003      	str	r3, [r0, #0]
 800d220:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d224:	eeb0 0a48 	vmov.f32	s0, s16
 800d228:	eef0 0a68 	vmov.f32	s1, s17
 800d22c:	b00b      	add	sp, #44	; 0x2c
 800d22e:	ecbd 8b02 	vpop	{d8}
 800d232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d234:	200001ec 	.word	0x200001ec
 800d238:	3ff00000 	.word	0x3ff00000
 800d23c:	0800d924 	.word	0x0800d924
 800d240:	0800d920 	.word	0x0800d920

0800d244 <sqrt>:
 800d244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d248:	ed2d 8b02 	vpush	{d8}
 800d24c:	b08b      	sub	sp, #44	; 0x2c
 800d24e:	ec55 4b10 	vmov	r4, r5, d0
 800d252:	f000 fa61 	bl	800d718 <__ieee754_sqrt>
 800d256:	4b26      	ldr	r3, [pc, #152]	; (800d2f0 <sqrt+0xac>)
 800d258:	eeb0 8a40 	vmov.f32	s16, s0
 800d25c:	eef0 8a60 	vmov.f32	s17, s1
 800d260:	f993 6000 	ldrsb.w	r6, [r3]
 800d264:	1c73      	adds	r3, r6, #1
 800d266:	d02a      	beq.n	800d2be <sqrt+0x7a>
 800d268:	4622      	mov	r2, r4
 800d26a:	462b      	mov	r3, r5
 800d26c:	4620      	mov	r0, r4
 800d26e:	4629      	mov	r1, r5
 800d270:	f7f3 fc00 	bl	8000a74 <__aeabi_dcmpun>
 800d274:	4607      	mov	r7, r0
 800d276:	bb10      	cbnz	r0, 800d2be <sqrt+0x7a>
 800d278:	f04f 0800 	mov.w	r8, #0
 800d27c:	f04f 0900 	mov.w	r9, #0
 800d280:	4642      	mov	r2, r8
 800d282:	464b      	mov	r3, r9
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 fbcc 	bl	8000a24 <__aeabi_dcmplt>
 800d28c:	b1b8      	cbz	r0, 800d2be <sqrt+0x7a>
 800d28e:	2301      	movs	r3, #1
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	4b18      	ldr	r3, [pc, #96]	; (800d2f4 <sqrt+0xb0>)
 800d294:	9301      	str	r3, [sp, #4]
 800d296:	9708      	str	r7, [sp, #32]
 800d298:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d29c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d2a0:	b9b6      	cbnz	r6, 800d2d0 <sqrt+0x8c>
 800d2a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800d2a6:	4668      	mov	r0, sp
 800d2a8:	f000 faef 	bl	800d88a <matherr>
 800d2ac:	b1d0      	cbz	r0, 800d2e4 <sqrt+0xa0>
 800d2ae:	9b08      	ldr	r3, [sp, #32]
 800d2b0:	b11b      	cbz	r3, 800d2ba <sqrt+0x76>
 800d2b2:	f7ff fe73 	bl	800cf9c <__errno>
 800d2b6:	9b08      	ldr	r3, [sp, #32]
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d2be:	eeb0 0a48 	vmov.f32	s0, s16
 800d2c2:	eef0 0a68 	vmov.f32	s1, s17
 800d2c6:	b00b      	add	sp, #44	; 0x2c
 800d2c8:	ecbd 8b02 	vpop	{d8}
 800d2cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d0:	4642      	mov	r2, r8
 800d2d2:	464b      	mov	r3, r9
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	4649      	mov	r1, r9
 800d2d8:	f7f3 fa5c 	bl	8000794 <__aeabi_ddiv>
 800d2dc:	2e02      	cmp	r6, #2
 800d2de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d2e2:	d1e0      	bne.n	800d2a6 <sqrt+0x62>
 800d2e4:	f7ff fe5a 	bl	800cf9c <__errno>
 800d2e8:	2321      	movs	r3, #33	; 0x21
 800d2ea:	6003      	str	r3, [r0, #0]
 800d2ec:	e7df      	b.n	800d2ae <sqrt+0x6a>
 800d2ee:	bf00      	nop
 800d2f0:	200001ec 	.word	0x200001ec
 800d2f4:	0800d925 	.word	0x0800d925

0800d2f8 <__ieee754_asin>:
 800d2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fc:	ec55 4b10 	vmov	r4, r5, d0
 800d300:	4bcb      	ldr	r3, [pc, #812]	; (800d630 <__ieee754_asin+0x338>)
 800d302:	b087      	sub	sp, #28
 800d304:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800d308:	429f      	cmp	r7, r3
 800d30a:	9501      	str	r5, [sp, #4]
 800d30c:	dd31      	ble.n	800d372 <__ieee754_asin+0x7a>
 800d30e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800d312:	ee10 3a10 	vmov	r3, s0
 800d316:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800d31a:	433b      	orrs	r3, r7
 800d31c:	d117      	bne.n	800d34e <__ieee754_asin+0x56>
 800d31e:	a3aa      	add	r3, pc, #680	; (adr r3, 800d5c8 <__ieee754_asin+0x2d0>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	ee10 0a10 	vmov	r0, s0
 800d328:	4629      	mov	r1, r5
 800d32a:	f7f3 f909 	bl	8000540 <__aeabi_dmul>
 800d32e:	a3a8      	add	r3, pc, #672	; (adr r3, 800d5d0 <__ieee754_asin+0x2d8>)
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	4606      	mov	r6, r0
 800d336:	460f      	mov	r7, r1
 800d338:	4620      	mov	r0, r4
 800d33a:	4629      	mov	r1, r5
 800d33c:	f7f3 f900 	bl	8000540 <__aeabi_dmul>
 800d340:	4602      	mov	r2, r0
 800d342:	460b      	mov	r3, r1
 800d344:	4630      	mov	r0, r6
 800d346:	4639      	mov	r1, r7
 800d348:	f7f2 ff44 	bl	80001d4 <__adddf3>
 800d34c:	e00a      	b.n	800d364 <__ieee754_asin+0x6c>
 800d34e:	ee10 2a10 	vmov	r2, s0
 800d352:	462b      	mov	r3, r5
 800d354:	4620      	mov	r0, r4
 800d356:	4629      	mov	r1, r5
 800d358:	f7f2 ff3a 	bl	80001d0 <__aeabi_dsub>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	f7f3 fa18 	bl	8000794 <__aeabi_ddiv>
 800d364:	4604      	mov	r4, r0
 800d366:	460d      	mov	r5, r1
 800d368:	ec45 4b10 	vmov	d0, r4, r5
 800d36c:	b007      	add	sp, #28
 800d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d372:	4bb0      	ldr	r3, [pc, #704]	; (800d634 <__ieee754_asin+0x33c>)
 800d374:	429f      	cmp	r7, r3
 800d376:	dc11      	bgt.n	800d39c <__ieee754_asin+0xa4>
 800d378:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800d37c:	f280 80ae 	bge.w	800d4dc <__ieee754_asin+0x1e4>
 800d380:	a395      	add	r3, pc, #596	; (adr r3, 800d5d8 <__ieee754_asin+0x2e0>)
 800d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d386:	ee10 0a10 	vmov	r0, s0
 800d38a:	4629      	mov	r1, r5
 800d38c:	f7f2 ff22 	bl	80001d4 <__adddf3>
 800d390:	2200      	movs	r2, #0
 800d392:	4ba9      	ldr	r3, [pc, #676]	; (800d638 <__ieee754_asin+0x340>)
 800d394:	f7f3 fb64 	bl	8000a60 <__aeabi_dcmpgt>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d1e5      	bne.n	800d368 <__ieee754_asin+0x70>
 800d39c:	ec45 4b10 	vmov	d0, r4, r5
 800d3a0:	f000 fa6a 	bl	800d878 <fabs>
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	ec53 2b10 	vmov	r2, r3, d0
 800d3aa:	49a3      	ldr	r1, [pc, #652]	; (800d638 <__ieee754_asin+0x340>)
 800d3ac:	f7f2 ff10 	bl	80001d0 <__aeabi_dsub>
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	4ba2      	ldr	r3, [pc, #648]	; (800d63c <__ieee754_asin+0x344>)
 800d3b4:	f7f3 f8c4 	bl	8000540 <__aeabi_dmul>
 800d3b8:	a389      	add	r3, pc, #548	; (adr r3, 800d5e0 <__ieee754_asin+0x2e8>)
 800d3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3be:	4604      	mov	r4, r0
 800d3c0:	460d      	mov	r5, r1
 800d3c2:	f7f3 f8bd 	bl	8000540 <__aeabi_dmul>
 800d3c6:	a388      	add	r3, pc, #544	; (adr r3, 800d5e8 <__ieee754_asin+0x2f0>)
 800d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3cc:	f7f2 ff02 	bl	80001d4 <__adddf3>
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	462b      	mov	r3, r5
 800d3d4:	f7f3 f8b4 	bl	8000540 <__aeabi_dmul>
 800d3d8:	a385      	add	r3, pc, #532	; (adr r3, 800d5f0 <__ieee754_asin+0x2f8>)
 800d3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3de:	f7f2 fef7 	bl	80001d0 <__aeabi_dsub>
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	462b      	mov	r3, r5
 800d3e6:	f7f3 f8ab 	bl	8000540 <__aeabi_dmul>
 800d3ea:	a383      	add	r3, pc, #524	; (adr r3, 800d5f8 <__ieee754_asin+0x300>)
 800d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f0:	f7f2 fef0 	bl	80001d4 <__adddf3>
 800d3f4:	4622      	mov	r2, r4
 800d3f6:	462b      	mov	r3, r5
 800d3f8:	f7f3 f8a2 	bl	8000540 <__aeabi_dmul>
 800d3fc:	a380      	add	r3, pc, #512	; (adr r3, 800d600 <__ieee754_asin+0x308>)
 800d3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d402:	f7f2 fee5 	bl	80001d0 <__aeabi_dsub>
 800d406:	4622      	mov	r2, r4
 800d408:	462b      	mov	r3, r5
 800d40a:	f7f3 f899 	bl	8000540 <__aeabi_dmul>
 800d40e:	a37e      	add	r3, pc, #504	; (adr r3, 800d608 <__ieee754_asin+0x310>)
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	f7f2 fede 	bl	80001d4 <__adddf3>
 800d418:	4622      	mov	r2, r4
 800d41a:	462b      	mov	r3, r5
 800d41c:	f7f3 f890 	bl	8000540 <__aeabi_dmul>
 800d420:	a37b      	add	r3, pc, #492	; (adr r3, 800d610 <__ieee754_asin+0x318>)
 800d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d426:	4680      	mov	r8, r0
 800d428:	4689      	mov	r9, r1
 800d42a:	4620      	mov	r0, r4
 800d42c:	4629      	mov	r1, r5
 800d42e:	f7f3 f887 	bl	8000540 <__aeabi_dmul>
 800d432:	a379      	add	r3, pc, #484	; (adr r3, 800d618 <__ieee754_asin+0x320>)
 800d434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d438:	f7f2 feca 	bl	80001d0 <__aeabi_dsub>
 800d43c:	4622      	mov	r2, r4
 800d43e:	462b      	mov	r3, r5
 800d440:	f7f3 f87e 	bl	8000540 <__aeabi_dmul>
 800d444:	a376      	add	r3, pc, #472	; (adr r3, 800d620 <__ieee754_asin+0x328>)
 800d446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44a:	f7f2 fec3 	bl	80001d4 <__adddf3>
 800d44e:	4622      	mov	r2, r4
 800d450:	462b      	mov	r3, r5
 800d452:	f7f3 f875 	bl	8000540 <__aeabi_dmul>
 800d456:	a374      	add	r3, pc, #464	; (adr r3, 800d628 <__ieee754_asin+0x330>)
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	f7f2 feb8 	bl	80001d0 <__aeabi_dsub>
 800d460:	4622      	mov	r2, r4
 800d462:	462b      	mov	r3, r5
 800d464:	f7f3 f86c 	bl	8000540 <__aeabi_dmul>
 800d468:	4b73      	ldr	r3, [pc, #460]	; (800d638 <__ieee754_asin+0x340>)
 800d46a:	2200      	movs	r2, #0
 800d46c:	f7f2 feb2 	bl	80001d4 <__adddf3>
 800d470:	ec45 4b10 	vmov	d0, r4, r5
 800d474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d478:	f000 f94e 	bl	800d718 <__ieee754_sqrt>
 800d47c:	4b70      	ldr	r3, [pc, #448]	; (800d640 <__ieee754_asin+0x348>)
 800d47e:	429f      	cmp	r7, r3
 800d480:	ec5b ab10 	vmov	sl, fp, d0
 800d484:	f340 80de 	ble.w	800d644 <__ieee754_asin+0x34c>
 800d488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d48c:	4640      	mov	r0, r8
 800d48e:	4649      	mov	r1, r9
 800d490:	f7f3 f980 	bl	8000794 <__aeabi_ddiv>
 800d494:	4652      	mov	r2, sl
 800d496:	465b      	mov	r3, fp
 800d498:	f7f3 f852 	bl	8000540 <__aeabi_dmul>
 800d49c:	4652      	mov	r2, sl
 800d49e:	465b      	mov	r3, fp
 800d4a0:	f7f2 fe98 	bl	80001d4 <__adddf3>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	f7f2 fe94 	bl	80001d4 <__adddf3>
 800d4ac:	a348      	add	r3, pc, #288	; (adr r3, 800d5d0 <__ieee754_asin+0x2d8>)
 800d4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b2:	f7f2 fe8d 	bl	80001d0 <__aeabi_dsub>
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	460b      	mov	r3, r1
 800d4ba:	a143      	add	r1, pc, #268	; (adr r1, 800d5c8 <__ieee754_asin+0x2d0>)
 800d4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c0:	f7f2 fe86 	bl	80001d0 <__aeabi_dsub>
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfdc      	itt	le
 800d4ca:	4602      	movle	r2, r0
 800d4cc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	460d      	mov	r5, r1
 800d4d4:	bfdc      	itt	le
 800d4d6:	4614      	movle	r4, r2
 800d4d8:	461d      	movle	r5, r3
 800d4da:	e745      	b.n	800d368 <__ieee754_asin+0x70>
 800d4dc:	ee10 2a10 	vmov	r2, s0
 800d4e0:	ee10 0a10 	vmov	r0, s0
 800d4e4:	462b      	mov	r3, r5
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	f7f3 f82a 	bl	8000540 <__aeabi_dmul>
 800d4ec:	a33c      	add	r3, pc, #240	; (adr r3, 800d5e0 <__ieee754_asin+0x2e8>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	f7f3 f823 	bl	8000540 <__aeabi_dmul>
 800d4fa:	a33b      	add	r3, pc, #236	; (adr r3, 800d5e8 <__ieee754_asin+0x2f0>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 fe68 	bl	80001d4 <__adddf3>
 800d504:	4632      	mov	r2, r6
 800d506:	463b      	mov	r3, r7
 800d508:	f7f3 f81a 	bl	8000540 <__aeabi_dmul>
 800d50c:	a338      	add	r3, pc, #224	; (adr r3, 800d5f0 <__ieee754_asin+0x2f8>)
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f7f2 fe5d 	bl	80001d0 <__aeabi_dsub>
 800d516:	4632      	mov	r2, r6
 800d518:	463b      	mov	r3, r7
 800d51a:	f7f3 f811 	bl	8000540 <__aeabi_dmul>
 800d51e:	a336      	add	r3, pc, #216	; (adr r3, 800d5f8 <__ieee754_asin+0x300>)
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	f7f2 fe56 	bl	80001d4 <__adddf3>
 800d528:	4632      	mov	r2, r6
 800d52a:	463b      	mov	r3, r7
 800d52c:	f7f3 f808 	bl	8000540 <__aeabi_dmul>
 800d530:	a333      	add	r3, pc, #204	; (adr r3, 800d600 <__ieee754_asin+0x308>)
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	f7f2 fe4b 	bl	80001d0 <__aeabi_dsub>
 800d53a:	4632      	mov	r2, r6
 800d53c:	463b      	mov	r3, r7
 800d53e:	f7f2 ffff 	bl	8000540 <__aeabi_dmul>
 800d542:	a331      	add	r3, pc, #196	; (adr r3, 800d608 <__ieee754_asin+0x310>)
 800d544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d548:	f7f2 fe44 	bl	80001d4 <__adddf3>
 800d54c:	4632      	mov	r2, r6
 800d54e:	463b      	mov	r3, r7
 800d550:	f7f2 fff6 	bl	8000540 <__aeabi_dmul>
 800d554:	a32e      	add	r3, pc, #184	; (adr r3, 800d610 <__ieee754_asin+0x318>)
 800d556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55a:	4680      	mov	r8, r0
 800d55c:	4689      	mov	r9, r1
 800d55e:	4630      	mov	r0, r6
 800d560:	4639      	mov	r1, r7
 800d562:	f7f2 ffed 	bl	8000540 <__aeabi_dmul>
 800d566:	a32c      	add	r3, pc, #176	; (adr r3, 800d618 <__ieee754_asin+0x320>)
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	f7f2 fe30 	bl	80001d0 <__aeabi_dsub>
 800d570:	4632      	mov	r2, r6
 800d572:	463b      	mov	r3, r7
 800d574:	f7f2 ffe4 	bl	8000540 <__aeabi_dmul>
 800d578:	a329      	add	r3, pc, #164	; (adr r3, 800d620 <__ieee754_asin+0x328>)
 800d57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57e:	f7f2 fe29 	bl	80001d4 <__adddf3>
 800d582:	4632      	mov	r2, r6
 800d584:	463b      	mov	r3, r7
 800d586:	f7f2 ffdb 	bl	8000540 <__aeabi_dmul>
 800d58a:	a327      	add	r3, pc, #156	; (adr r3, 800d628 <__ieee754_asin+0x330>)
 800d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d590:	f7f2 fe1e 	bl	80001d0 <__aeabi_dsub>
 800d594:	4632      	mov	r2, r6
 800d596:	463b      	mov	r3, r7
 800d598:	f7f2 ffd2 	bl	8000540 <__aeabi_dmul>
 800d59c:	2200      	movs	r2, #0
 800d59e:	4b26      	ldr	r3, [pc, #152]	; (800d638 <__ieee754_asin+0x340>)
 800d5a0:	f7f2 fe18 	bl	80001d4 <__adddf3>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4640      	mov	r0, r8
 800d5aa:	4649      	mov	r1, r9
 800d5ac:	f7f3 f8f2 	bl	8000794 <__aeabi_ddiv>
 800d5b0:	4622      	mov	r2, r4
 800d5b2:	462b      	mov	r3, r5
 800d5b4:	f7f2 ffc4 	bl	8000540 <__aeabi_dmul>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4620      	mov	r0, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	e6c2      	b.n	800d348 <__ieee754_asin+0x50>
 800d5c2:	bf00      	nop
 800d5c4:	f3af 8000 	nop.w
 800d5c8:	54442d18 	.word	0x54442d18
 800d5cc:	3ff921fb 	.word	0x3ff921fb
 800d5d0:	33145c07 	.word	0x33145c07
 800d5d4:	3c91a626 	.word	0x3c91a626
 800d5d8:	8800759c 	.word	0x8800759c
 800d5dc:	7e37e43c 	.word	0x7e37e43c
 800d5e0:	0dfdf709 	.word	0x0dfdf709
 800d5e4:	3f023de1 	.word	0x3f023de1
 800d5e8:	7501b288 	.word	0x7501b288
 800d5ec:	3f49efe0 	.word	0x3f49efe0
 800d5f0:	b5688f3b 	.word	0xb5688f3b
 800d5f4:	3fa48228 	.word	0x3fa48228
 800d5f8:	0e884455 	.word	0x0e884455
 800d5fc:	3fc9c155 	.word	0x3fc9c155
 800d600:	03eb6f7d 	.word	0x03eb6f7d
 800d604:	3fd4d612 	.word	0x3fd4d612
 800d608:	55555555 	.word	0x55555555
 800d60c:	3fc55555 	.word	0x3fc55555
 800d610:	b12e9282 	.word	0xb12e9282
 800d614:	3fb3b8c5 	.word	0x3fb3b8c5
 800d618:	1b8d0159 	.word	0x1b8d0159
 800d61c:	3fe6066c 	.word	0x3fe6066c
 800d620:	9c598ac8 	.word	0x9c598ac8
 800d624:	40002ae5 	.word	0x40002ae5
 800d628:	1c8a2d4b 	.word	0x1c8a2d4b
 800d62c:	40033a27 	.word	0x40033a27
 800d630:	3fefffff 	.word	0x3fefffff
 800d634:	3fdfffff 	.word	0x3fdfffff
 800d638:	3ff00000 	.word	0x3ff00000
 800d63c:	3fe00000 	.word	0x3fe00000
 800d640:	3fef3332 	.word	0x3fef3332
 800d644:	ee10 2a10 	vmov	r2, s0
 800d648:	ee10 0a10 	vmov	r0, s0
 800d64c:	465b      	mov	r3, fp
 800d64e:	4659      	mov	r1, fp
 800d650:	f7f2 fdc0 	bl	80001d4 <__adddf3>
 800d654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d658:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d65c:	4640      	mov	r0, r8
 800d65e:	4649      	mov	r1, r9
 800d660:	f7f3 f898 	bl	8000794 <__aeabi_ddiv>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d66c:	f7f2 ff68 	bl	8000540 <__aeabi_dmul>
 800d670:	2600      	movs	r6, #0
 800d672:	4680      	mov	r8, r0
 800d674:	4689      	mov	r9, r1
 800d676:	4632      	mov	r2, r6
 800d678:	465b      	mov	r3, fp
 800d67a:	4630      	mov	r0, r6
 800d67c:	4659      	mov	r1, fp
 800d67e:	f7f2 ff5f 	bl	8000540 <__aeabi_dmul>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4620      	mov	r0, r4
 800d688:	4629      	mov	r1, r5
 800d68a:	f7f2 fda1 	bl	80001d0 <__aeabi_dsub>
 800d68e:	4632      	mov	r2, r6
 800d690:	4604      	mov	r4, r0
 800d692:	460d      	mov	r5, r1
 800d694:	465b      	mov	r3, fp
 800d696:	4650      	mov	r0, sl
 800d698:	4659      	mov	r1, fp
 800d69a:	f7f2 fd9b 	bl	80001d4 <__adddf3>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	f7f3 f875 	bl	8000794 <__aeabi_ddiv>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	f7f2 fd91 	bl	80001d4 <__adddf3>
 800d6b2:	4602      	mov	r2, r0
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	a114      	add	r1, pc, #80	; (adr r1, 800d708 <__ieee754_asin+0x410>)
 800d6b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6bc:	f7f2 fd88 	bl	80001d0 <__aeabi_dsub>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4640      	mov	r0, r8
 800d6c6:	4649      	mov	r1, r9
 800d6c8:	f7f2 fd82 	bl	80001d0 <__aeabi_dsub>
 800d6cc:	465f      	mov	r7, fp
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	460d      	mov	r5, r1
 800d6d2:	4632      	mov	r2, r6
 800d6d4:	465b      	mov	r3, fp
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	4639      	mov	r1, r7
 800d6da:	f7f2 fd7b 	bl	80001d4 <__adddf3>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	a10b      	add	r1, pc, #44	; (adr r1, 800d710 <__ieee754_asin+0x418>)
 800d6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e8:	f7f2 fd72 	bl	80001d0 <__aeabi_dsub>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	f7f2 fd6c 	bl	80001d0 <__aeabi_dsub>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	a104      	add	r1, pc, #16	; (adr r1, 800d710 <__ieee754_asin+0x418>)
 800d6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d702:	e6dd      	b.n	800d4c0 <__ieee754_asin+0x1c8>
 800d704:	f3af 8000 	nop.w
 800d708:	33145c07 	.word	0x33145c07
 800d70c:	3c91a626 	.word	0x3c91a626
 800d710:	54442d18 	.word	0x54442d18
 800d714:	3fe921fb 	.word	0x3fe921fb

0800d718 <__ieee754_sqrt>:
 800d718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71c:	4955      	ldr	r1, [pc, #340]	; (800d874 <__ieee754_sqrt+0x15c>)
 800d71e:	ec55 4b10 	vmov	r4, r5, d0
 800d722:	43a9      	bics	r1, r5
 800d724:	462b      	mov	r3, r5
 800d726:	462a      	mov	r2, r5
 800d728:	d112      	bne.n	800d750 <__ieee754_sqrt+0x38>
 800d72a:	ee10 2a10 	vmov	r2, s0
 800d72e:	ee10 0a10 	vmov	r0, s0
 800d732:	4629      	mov	r1, r5
 800d734:	f7f2 ff04 	bl	8000540 <__aeabi_dmul>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4620      	mov	r0, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	f7f2 fd48 	bl	80001d4 <__adddf3>
 800d744:	4604      	mov	r4, r0
 800d746:	460d      	mov	r5, r1
 800d748:	ec45 4b10 	vmov	d0, r4, r5
 800d74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d750:	2d00      	cmp	r5, #0
 800d752:	ee10 0a10 	vmov	r0, s0
 800d756:	4621      	mov	r1, r4
 800d758:	dc0f      	bgt.n	800d77a <__ieee754_sqrt+0x62>
 800d75a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d75e:	4330      	orrs	r0, r6
 800d760:	d0f2      	beq.n	800d748 <__ieee754_sqrt+0x30>
 800d762:	b155      	cbz	r5, 800d77a <__ieee754_sqrt+0x62>
 800d764:	ee10 2a10 	vmov	r2, s0
 800d768:	4620      	mov	r0, r4
 800d76a:	4629      	mov	r1, r5
 800d76c:	f7f2 fd30 	bl	80001d0 <__aeabi_dsub>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	f7f3 f80e 	bl	8000794 <__aeabi_ddiv>
 800d778:	e7e4      	b.n	800d744 <__ieee754_sqrt+0x2c>
 800d77a:	151b      	asrs	r3, r3, #20
 800d77c:	d073      	beq.n	800d866 <__ieee754_sqrt+0x14e>
 800d77e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d782:	07dd      	lsls	r5, r3, #31
 800d784:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d788:	bf48      	it	mi
 800d78a:	0fc8      	lsrmi	r0, r1, #31
 800d78c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d790:	bf44      	itt	mi
 800d792:	0049      	lslmi	r1, r1, #1
 800d794:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d798:	2500      	movs	r5, #0
 800d79a:	1058      	asrs	r0, r3, #1
 800d79c:	0fcb      	lsrs	r3, r1, #31
 800d79e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d7a2:	0049      	lsls	r1, r1, #1
 800d7a4:	2316      	movs	r3, #22
 800d7a6:	462c      	mov	r4, r5
 800d7a8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d7ac:	19a7      	adds	r7, r4, r6
 800d7ae:	4297      	cmp	r7, r2
 800d7b0:	bfde      	ittt	le
 800d7b2:	19bc      	addle	r4, r7, r6
 800d7b4:	1bd2      	suble	r2, r2, r7
 800d7b6:	19ad      	addle	r5, r5, r6
 800d7b8:	0fcf      	lsrs	r7, r1, #31
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d7c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d7c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d7c8:	d1f0      	bne.n	800d7ac <__ieee754_sqrt+0x94>
 800d7ca:	f04f 0c20 	mov.w	ip, #32
 800d7ce:	469e      	mov	lr, r3
 800d7d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d7d4:	42a2      	cmp	r2, r4
 800d7d6:	eb06 070e 	add.w	r7, r6, lr
 800d7da:	dc02      	bgt.n	800d7e2 <__ieee754_sqrt+0xca>
 800d7dc:	d112      	bne.n	800d804 <__ieee754_sqrt+0xec>
 800d7de:	428f      	cmp	r7, r1
 800d7e0:	d810      	bhi.n	800d804 <__ieee754_sqrt+0xec>
 800d7e2:	2f00      	cmp	r7, #0
 800d7e4:	eb07 0e06 	add.w	lr, r7, r6
 800d7e8:	da42      	bge.n	800d870 <__ieee754_sqrt+0x158>
 800d7ea:	f1be 0f00 	cmp.w	lr, #0
 800d7ee:	db3f      	blt.n	800d870 <__ieee754_sqrt+0x158>
 800d7f0:	f104 0801 	add.w	r8, r4, #1
 800d7f4:	1b12      	subs	r2, r2, r4
 800d7f6:	428f      	cmp	r7, r1
 800d7f8:	bf88      	it	hi
 800d7fa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d7fe:	1bc9      	subs	r1, r1, r7
 800d800:	4433      	add	r3, r6
 800d802:	4644      	mov	r4, r8
 800d804:	0052      	lsls	r2, r2, #1
 800d806:	f1bc 0c01 	subs.w	ip, ip, #1
 800d80a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d80e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d812:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d816:	d1dd      	bne.n	800d7d4 <__ieee754_sqrt+0xbc>
 800d818:	430a      	orrs	r2, r1
 800d81a:	d006      	beq.n	800d82a <__ieee754_sqrt+0x112>
 800d81c:	1c5c      	adds	r4, r3, #1
 800d81e:	bf13      	iteet	ne
 800d820:	3301      	addne	r3, #1
 800d822:	3501      	addeq	r5, #1
 800d824:	4663      	moveq	r3, ip
 800d826:	f023 0301 	bicne.w	r3, r3, #1
 800d82a:	106a      	asrs	r2, r5, #1
 800d82c:	085b      	lsrs	r3, r3, #1
 800d82e:	07e9      	lsls	r1, r5, #31
 800d830:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d834:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d838:	bf48      	it	mi
 800d83a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d83e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d842:	461c      	mov	r4, r3
 800d844:	e780      	b.n	800d748 <__ieee754_sqrt+0x30>
 800d846:	0aca      	lsrs	r2, r1, #11
 800d848:	3815      	subs	r0, #21
 800d84a:	0549      	lsls	r1, r1, #21
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	d0fa      	beq.n	800d846 <__ieee754_sqrt+0x12e>
 800d850:	02d6      	lsls	r6, r2, #11
 800d852:	d50a      	bpl.n	800d86a <__ieee754_sqrt+0x152>
 800d854:	f1c3 0420 	rsb	r4, r3, #32
 800d858:	fa21 f404 	lsr.w	r4, r1, r4
 800d85c:	1e5d      	subs	r5, r3, #1
 800d85e:	4099      	lsls	r1, r3
 800d860:	4322      	orrs	r2, r4
 800d862:	1b43      	subs	r3, r0, r5
 800d864:	e78b      	b.n	800d77e <__ieee754_sqrt+0x66>
 800d866:	4618      	mov	r0, r3
 800d868:	e7f0      	b.n	800d84c <__ieee754_sqrt+0x134>
 800d86a:	0052      	lsls	r2, r2, #1
 800d86c:	3301      	adds	r3, #1
 800d86e:	e7ef      	b.n	800d850 <__ieee754_sqrt+0x138>
 800d870:	46a0      	mov	r8, r4
 800d872:	e7bf      	b.n	800d7f4 <__ieee754_sqrt+0xdc>
 800d874:	7ff00000 	.word	0x7ff00000

0800d878 <fabs>:
 800d878:	ec51 0b10 	vmov	r0, r1, d0
 800d87c:	ee10 2a10 	vmov	r2, s0
 800d880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d884:	ec43 2b10 	vmov	d0, r2, r3
 800d888:	4770      	bx	lr

0800d88a <matherr>:
 800d88a:	2000      	movs	r0, #0
 800d88c:	4770      	bx	lr
	...

0800d890 <nan>:
 800d890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d898 <nan+0x8>
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	00000000 	.word	0x00000000
 800d89c:	7ff80000 	.word	0x7ff80000

0800d8a0 <_init>:
 800d8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a2:	bf00      	nop
 800d8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a6:	bc08      	pop	{r3}
 800d8a8:	469e      	mov	lr, r3
 800d8aa:	4770      	bx	lr

0800d8ac <_fini>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	bf00      	nop
 800d8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8b2:	bc08      	pop	{r3}
 800d8b4:	469e      	mov	lr, r3
 800d8b6:	4770      	bx	lr
